{"parents": [{"link": "../../../", "title": "Module code"}, {"link": "../../", "title": "ibeis"}, {"link": "../", "title": "ibeis.viz"}], "title": "ibeis.viz.viz_matches", "body": "<h1>Source code for ibeis.viz.viz_matches</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"k\">import</span> <span class=\"n\">absolute_import</span><span class=\"p\">,</span> <span class=\"n\">division</span><span class=\"p\">,</span> <span class=\"n\">print_function</span><span class=\"p\">,</span> <span class=\"n\">unicode_literals</span>\n<span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n<span class=\"kn\">import</span> <span class=\"nn\">plottool</span> <span class=\"k\">as</span> <span class=\"nn\">pt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">plottool.plot_helpers</span> <span class=\"k\">as</span> <span class=\"nn\">ph</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.viz</span> <span class=\"k\">import</span> <span class=\"n\">viz_helpers</span> <span class=\"k\">as</span> <span class=\"n\">vh</span>\n<span class=\"p\">(</span><span class=\"nb\">print</span><span class=\"p\">,</span> <span class=\"n\">rrr</span><span class=\"p\">,</span> <span class=\"n\">profile</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">inject2</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_get_annot_pair_info</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">,</span> <span class=\"n\">qreq_</span><span class=\"p\">,</span> <span class=\"n\">draw_fmatches</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"n\">kpts1</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;kpts1&#39;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n    <span class=\"n\">kpts2</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;kpts2&#39;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n    <span class=\"n\">as_fpath</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;as_fpath&#39;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">kpts2_list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span> <span class=\"k\">if</span> <span class=\"n\">kpts2</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"k\">else</span> <span class=\"p\">[</span><span class=\"n\">kpts2</span><span class=\"p\">]</span>\n    <span class=\"n\">rchip1</span><span class=\"p\">,</span> <span class=\"n\">kpts1</span> <span class=\"o\">=</span> <span class=\"n\">get_query_annot_pair_info</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">qreq_</span><span class=\"p\">,</span> <span class=\"n\">draw_fmatches</span><span class=\"p\">,</span>\n                                              <span class=\"n\">kpts1</span><span class=\"o\">=</span><span class=\"n\">kpts1</span><span class=\"p\">,</span> <span class=\"n\">as_fpath</span><span class=\"o\">=</span><span class=\"n\">as_fpath</span><span class=\"p\">)</span>\n    <span class=\"n\">annot2_data_list</span> <span class=\"o\">=</span> <span class=\"n\">get_data_annot_pair_info</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">aid2</span><span class=\"p\">],</span> <span class=\"n\">qreq_</span><span class=\"p\">,</span>\n                                                <span class=\"n\">draw_fmatches</span><span class=\"p\">,</span>\n                                                <span class=\"n\">as_fpath</span><span class=\"o\">=</span><span class=\"n\">as_fpath</span><span class=\"p\">,</span>\n                                                <span class=\"n\">kpts2_list</span><span class=\"o\">=</span><span class=\"n\">kpts2_list</span><span class=\"p\">)</span>\n    <span class=\"n\">rchip2</span><span class=\"p\">,</span> <span class=\"n\">kpts2</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_list_column</span><span class=\"p\">(</span><span class=\"n\">annot2_data_list</span> <span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">rchip1</span><span class=\"p\">,</span> <span class=\"n\">rchip2</span><span class=\"p\">,</span> <span class=\"n\">kpts1</span><span class=\"p\">,</span> <span class=\"n\">kpts2</span>\n\n\n<div class=\"viewcode-block\" id=\"get_query_annot_pair_info\"><a class=\"viewcode-back\" href=\"../../../../ibeis.viz/#ibeis.viz.viz_matches.get_query_annot_pair_info\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">get_query_annot_pair_info</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">qaid</span><span class=\"p\">,</span> <span class=\"n\">qreq_</span><span class=\"p\">,</span> <span class=\"n\">draw_fmatches</span><span class=\"p\">,</span> <span class=\"n\">kpts1</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                              <span class=\"n\">as_fpath</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"c1\">#print(&#39;!!! qqreq_ = %r&#39; % (qreq_,))</span>\n    <span class=\"n\">query_config2_</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kc\">None</span> <span class=\"k\">if</span> <span class=\"n\">qreq_</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n                      <span class=\"k\">else</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">extern_query_config2</span><span class=\"p\">)</span>\n    <span class=\"n\">tblhack</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"p\">,</span> <span class=\"s1\">&#39;tablename&#39;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n    <span class=\"c1\">#print(&#39;!!! query_config2_ = %r&#39; % (query_config2_,))</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"ow\">not</span> <span class=\"n\">tblhack</span> <span class=\"ow\">or</span> <span class=\"n\">tblhack</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s1\">&#39;bc_dtw&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;oc_wdtw&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;curvrankdorsal&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;curvrankfluke&#39;</span><span class=\"p\">])</span> <span class=\"ow\">and</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"p\">,</span> <span class=\"s1\">&#39;_isnewreq&#39;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"p\">,</span> <span class=\"s1\">&#39;get_fmatch_overlayed_chip&#39;</span><span class=\"p\">)</span>  <span class=\"ow\">and</span> <span class=\"n\">draw_fmatches</span> <span class=\"ow\">and</span> <span class=\"n\">draw_fmatches</span> <span class=\"o\">!=</span> <span class=\"s1\">&#39;hackoff&#39;</span><span class=\"p\">:</span>\n            <span class=\"n\">rchip1</span> <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">get_fmatch_overlayed_chip</span><span class=\"p\">(</span><span class=\"n\">qaid</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">query_config2_</span><span class=\"p\">)</span>\n            <span class=\"n\">draw_fmatches</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">rchip1</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">depc_annot</span><span class=\"o\">.</span><span class=\"n\">get_property</span><span class=\"p\">(</span><span class=\"s1\">&#39;chips&#39;</span><span class=\"p\">,</span> <span class=\"n\">qaid</span><span class=\"p\">,</span> <span class=\"s1\">&#39;img&#39;</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">query_config2_</span><span class=\"p\">)</span>\n            <span class=\"n\">draw_fmatches</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">rchip1</span> <span class=\"o\">=</span> <span class=\"n\">vh</span><span class=\"o\">.</span><span class=\"n\">get_chips</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">qaid</span><span class=\"p\">],</span> <span class=\"n\">config2_</span><span class=\"o\">=</span><span class=\"n\">query_config2_</span><span class=\"p\">,</span>\n                              <span class=\"n\">as_fpath</span><span class=\"o\">=</span><span class=\"n\">as_fpath</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"k\">if</span> <span class=\"n\">draw_fmatches</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">kpts1</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">kpts1</span> <span class=\"o\">=</span> <span class=\"n\">vh</span><span class=\"o\">.</span><span class=\"n\">get_kpts</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">qaid</span><span class=\"p\">],</span> <span class=\"n\">config2_</span><span class=\"o\">=</span><span class=\"n\">query_config2_</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">kpts1</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"k\">return</span> <span class=\"n\">rchip1</span><span class=\"p\">,</span> <span class=\"n\">kpts1</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_data_annot_pair_info\"><a class=\"viewcode-back\" href=\"../../../../ibeis.viz/#ibeis.viz.viz_matches.get_data_annot_pair_info\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">get_data_annot_pair_info</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">qreq_</span><span class=\"p\">,</span> <span class=\"n\">draw_fmatches</span><span class=\"p\">,</span>\n                             <span class=\"n\">scale_down</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">kpts2_list</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">as_fpath</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"n\">data_config2_</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kc\">None</span> <span class=\"k\">if</span> <span class=\"n\">qreq_</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"k\">else</span>\n                     <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">extern_data_config2</span><span class=\"p\">)</span>\n    <span class=\"c1\">#print(&#39;!!! data_config2_ = %r&#39; % (data_config2_,))</span>\n    <span class=\"c1\">#print(&#39;!!! dqreq_ = %r&#39; % (qreq_,))</span>\n    <span class=\"n\">tblhack</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"p\">,</span> <span class=\"s1\">&#39;tablename&#39;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"ow\">not</span> <span class=\"n\">tblhack</span> <span class=\"ow\">or</span> <span class=\"n\">tblhack</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s1\">&#39;bc_dtw&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;oc_wdtw&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;curvrankdorsal&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;curvrankfluke&#39;</span><span class=\"p\">])</span> <span class=\"ow\">and</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"p\">,</span> <span class=\"s1\">&#39;_isnewreq&#39;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"p\">,</span> <span class=\"s1\">&#39;get_fmatch_overlayed_chip&#39;</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">draw_fmatches</span> <span class=\"ow\">and</span> <span class=\"n\">draw_fmatches</span> <span class=\"o\">!=</span> <span class=\"s1\">&#39;hackoff&#39;</span><span class=\"p\">:</span>\n            <span class=\"n\">rchip2_list</span> <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">get_fmatch_overlayed_chip</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">data_config2_</span><span class=\"p\">)</span>\n            <span class=\"c1\">#rchip2_list = ibs.depc_annot.get_property(&#39;chips&#39;, aid_list, &#39;img&#39;, config=data_config2_)</span>\n            <span class=\"n\">draw_fmatches</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">rchip2_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">depc_annot</span><span class=\"o\">.</span><span class=\"n\">get_property</span><span class=\"p\">(</span><span class=\"s1\">&#39;chips&#39;</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"s1\">&#39;img&#39;</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">data_config2_</span><span class=\"p\">)</span>\n            <span class=\"n\">draw_fmatches</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"c1\">#vh.get_chips(ibs, aid_list, config2_=data_config2_)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">rchip2_list</span> <span class=\"o\">=</span> <span class=\"n\">vh</span><span class=\"o\">.</span><span class=\"n\">get_chips</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">config2_</span><span class=\"o\">=</span><span class=\"n\">data_config2_</span><span class=\"p\">,</span>\n                                   <span class=\"n\">as_fpath</span><span class=\"o\">=</span><span class=\"n\">as_fpath</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">draw_fmatches</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">kpts2_list</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">kpts2_list</span> <span class=\"o\">=</span> <span class=\"n\">vh</span><span class=\"o\">.</span><span class=\"n\">get_kpts</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">config2_</span><span class=\"o\">=</span><span class=\"n\">data_config2_</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">kpts2_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">scale_down</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n    <span class=\"k\">return</span> <span class=\"n\">rchip2_list</span><span class=\"p\">,</span> <span class=\"n\">kpts2_list</span></div>\n\n\n<span class=\"c1\">#@ut.tracefunc_xml</span>\n<div class=\"viewcode-block\" id=\"show_name_matches\"><a class=\"viewcode-back\" href=\"../../../../ibeis.viz/#ibeis.viz.viz_matches.show_name_matches\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">show_name_matches</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">qaid</span><span class=\"p\">,</span> <span class=\"n\">name_daid_list</span><span class=\"p\">,</span> <span class=\"n\">name_fm_list</span><span class=\"p\">,</span> <span class=\"n\">name_fs_list</span><span class=\"p\">,</span>\n                      <span class=\"n\">name_H1_list</span><span class=\"p\">,</span> <span class=\"n\">name_featflag_list</span><span class=\"p\">,</span> <span class=\"n\">qreq_</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Called from chip_match.py</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (IBEISController):  ibeis controller object</span>\n<span class=\"sd\">        qaid (int):  query annotation id</span>\n<span class=\"sd\">        name_daid_list (list):</span>\n<span class=\"sd\">        name_fm_list (list):</span>\n<span class=\"sd\">        name_fs_list (list):</span>\n<span class=\"sd\">        name_H1_list (list):</span>\n<span class=\"sd\">        name_featflag_list (list):</span>\n<span class=\"sd\">        qreq_ (QueryRequest):  query request object with hyper-parameters(default = None)</span>\n\n<span class=\"sd\">    Kwargs:</span>\n<span class=\"sd\">        draw_fmatches, name_rank, fnum, pnum, colorbar_, nonvote_mode,</span>\n<span class=\"sd\">        fastmode, show_matches, fs, fm_norm, lbl1, lbl2, rect, draw_border,</span>\n<span class=\"sd\">        cmap, H1, H2, scale_factor1, scale_factor2, draw_pts, draw_ell,</span>\n<span class=\"sd\">        draw_lines, show_nMatches, all_kpts, in_image, show_query, draw_lbl,</span>\n<span class=\"sd\">        name_annot_scores, score, rawscore, aid2_raw_rank, show_name,</span>\n<span class=\"sd\">        show_nid, show_aid, show_annot_score, show_truth, name_score,</span>\n<span class=\"sd\">        show_name_score, show_name_rank, show_timedelta</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.viz.viz_matches --exec-show_name_matches</span>\n<span class=\"sd\">        python -m ibeis.viz.viz_matches --test-show_name_matches --show</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.viz.viz_matches import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.algo.hots import chip_match</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.algo.hots import name_scoring</span>\n<span class=\"sd\">        &gt;&gt;&gt; import vtool as vt</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.algo.hots import _pipeline_helpers as plh  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import numpy as np</span>\n<span class=\"sd\">        &gt;&gt;&gt; func = chip_match.ChipMatch.show_single_namematch</span>\n<span class=\"sd\">        &gt;&gt;&gt; sourcecode = ut.get_func_sourcecode(func, stripdef=True, stripret=True,</span>\n<span class=\"sd\">        &gt;&gt;&gt;                                     strip_docstr=True)</span>\n<span class=\"sd\">        &gt;&gt;&gt; setup = ut.regex_replace(&#39;viz_matches.show_name_matches&#39;, &#39;#&#39;, sourcecode)</span>\n<span class=\"sd\">        &gt;&gt;&gt; homog = False</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(ut.indent(setup, &#39;&gt;&gt;&gt; &#39;))</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs, qreq_, cm_list = plh.testdata_post_sver(&#39;PZ_MTEST&#39;, qaid_list=[1])</span>\n<span class=\"sd\">        &gt;&gt;&gt; cm = cm_list[0]</span>\n<span class=\"sd\">        &gt;&gt;&gt; cm.score_name_nsum(qreq_)</span>\n<span class=\"sd\">        &gt;&gt;&gt; dnid = ibs.get_annot_nids(cm.qaid)</span>\n<span class=\"sd\">        &gt;&gt;&gt; # +--- COPIED SECTION</span>\n<span class=\"sd\">        &gt;&gt;&gt; locals_ = locals()</span>\n<span class=\"sd\">        &gt;&gt;&gt; var_list = ut.exec_func_src(</span>\n<span class=\"sd\">        &gt;&gt;&gt;     func, locals_=locals_,</span>\n<span class=\"sd\">        &gt;&gt;&gt;     sentinal=&#39;name_annot_scores = cm.annot_score_list.take(sorted_groupxs&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; exec(ut.execstr_dict(var_list))</span>\n<span class=\"sd\">        &gt;&gt;&gt; # L___ COPIED SECTION</span>\n<span class=\"sd\">        &gt;&gt;&gt; kwargs = {}</span>\n<span class=\"sd\">        &gt;&gt;&gt; show_name_matches(ibs, qaid, name_daid_list, name_fm_list,</span>\n<span class=\"sd\">        &gt;&gt;&gt;                   name_fs_list, name_h1_list, name_featflag_list,</span>\n<span class=\"sd\">        &gt;&gt;&gt;                   qreq_=qreq_, **kwargs)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.quit_if_noshow()</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.show_if_requested()</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\">#print(&quot;SHOW NAME MATCHES&quot;)</span>\n    <span class=\"c1\">#print(ut.repr2(kwargs, nl=True))</span>\n    <span class=\"c1\">#from ibeis import constants as const</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis</span> <span class=\"k\">import</span> <span class=\"n\">tag_funcs</span>\n    <span class=\"n\">draw_fmatches</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s1\">&#39;draw_fmatches&#39;</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">rchip1</span><span class=\"p\">,</span> <span class=\"n\">kpts1</span> <span class=\"o\">=</span> <span class=\"n\">get_query_annot_pair_info</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">qaid</span><span class=\"p\">,</span> <span class=\"n\">qreq_</span><span class=\"p\">,</span> <span class=\"n\">draw_fmatches</span><span class=\"p\">)</span>\n    <span class=\"n\">rchip2_list</span><span class=\"p\">,</span> <span class=\"n\">kpts2_list</span> <span class=\"o\">=</span> <span class=\"n\">get_data_annot_pair_info</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">name_daid_list</span><span class=\"p\">,</span>\n                                                       <span class=\"n\">qreq_</span><span class=\"p\">,</span> <span class=\"n\">draw_fmatches</span><span class=\"p\">)</span>\n\n    <span class=\"n\">heatmask</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s1\">&#39;heatmask&#39;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">heatmask</span><span class=\"p\">:</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">vtool.coverage_kpts</span> <span class=\"k\">import</span> <span class=\"n\">make_kpts_heatmask</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">vtool</span> <span class=\"k\">as</span> <span class=\"nn\">vt</span>\n\n        <span class=\"n\">wh1</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">get_size</span><span class=\"p\">(</span><span class=\"n\">rchip1</span><span class=\"p\">)</span>\n        <span class=\"n\">fx1</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">unique</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">hstack</span><span class=\"p\">([</span><span class=\"n\">fm</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">fm</span> <span class=\"ow\">in</span> <span class=\"n\">name_fm_list</span><span class=\"p\">]))</span>\n        <span class=\"n\">heatmask1</span> <span class=\"o\">=</span> <span class=\"n\">make_kpts_heatmask</span><span class=\"p\">(</span><span class=\"n\">kpts1</span><span class=\"p\">[</span><span class=\"n\">fx1</span><span class=\"p\">],</span> <span class=\"n\">wh1</span><span class=\"p\">)</span>\n        <span class=\"n\">rchip1</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">overlay_alpha_images</span><span class=\"p\">(</span><span class=\"n\">heatmask1</span><span class=\"p\">,</span> <span class=\"n\">rchip1</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Hack cast back to uint8</span>\n        <span class=\"n\">rchip1</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">rchip1</span> <span class=\"o\">*</span> <span class=\"mi\">255</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">uint8</span><span class=\"p\">)</span>\n\n        <span class=\"n\">rchip2_list_</span> <span class=\"o\">=</span> <span class=\"n\">rchip2_list</span>\n        <span class=\"n\">rchip2_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">rchip2</span><span class=\"p\">,</span> <span class=\"n\">kpts2</span><span class=\"p\">,</span> <span class=\"n\">fm</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">rchip2_list_</span><span class=\"p\">,</span> <span class=\"n\">kpts2_list</span><span class=\"p\">,</span> <span class=\"n\">name_fm_list</span><span class=\"p\">):</span>\n            <span class=\"n\">fx2</span> <span class=\"o\">=</span> <span class=\"n\">fm</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"n\">wh2</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">get_size</span><span class=\"p\">(</span><span class=\"n\">rchip2</span><span class=\"p\">)</span>\n            <span class=\"n\">heatmask2</span> <span class=\"o\">=</span> <span class=\"n\">make_kpts_heatmask</span><span class=\"p\">(</span><span class=\"n\">kpts2</span><span class=\"p\">[</span><span class=\"n\">fx2</span><span class=\"p\">],</span> <span class=\"n\">wh2</span><span class=\"p\">)</span>\n            <span class=\"n\">rchip2</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">overlay_alpha_images</span><span class=\"p\">(</span><span class=\"n\">heatmask2</span><span class=\"p\">,</span> <span class=\"n\">rchip2</span><span class=\"p\">)</span>\n            <span class=\"c1\"># Hack cast back to uint8</span>\n            <span class=\"n\">rchip2</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">rchip2</span> <span class=\"o\">*</span> <span class=\"mi\">255</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">uint8</span><span class=\"p\">)</span>\n            <span class=\"n\">rchip2_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">rchip2</span><span class=\"p\">)</span>\n    <span class=\"c1\">#</span>\n    <span class=\"n\">fm_list</span> <span class=\"o\">=</span> <span class=\"n\">name_fm_list</span>\n    <span class=\"n\">fs_list</span> <span class=\"o\">=</span> <span class=\"n\">name_fs_list</span>\n    <span class=\"n\">featflag_list</span> <span class=\"o\">=</span> <span class=\"n\">name_featflag_list</span>\n    <span class=\"n\">offset_list</span><span class=\"p\">,</span> <span class=\"n\">sf_list</span><span class=\"p\">,</span> <span class=\"n\">bbox_list</span> <span class=\"o\">=</span> <span class=\"n\">show_multichip_match</span><span class=\"p\">(</span><span class=\"n\">rchip1</span><span class=\"p\">,</span> <span class=\"n\">rchip2_list</span><span class=\"p\">,</span>\n                                                           <span class=\"n\">kpts1</span><span class=\"p\">,</span> <span class=\"n\">kpts2_list</span><span class=\"p\">,</span>\n                                                           <span class=\"n\">fm_list</span><span class=\"p\">,</span> <span class=\"n\">fs_list</span><span class=\"p\">,</span>\n                                                           <span class=\"n\">featflag_list</span><span class=\"p\">,</span>\n                                                           <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    <span class=\"n\">aid_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">qaid</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">name_daid_list</span>\n    <span class=\"n\">annotate_matches3</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">bbox_list</span><span class=\"p\">,</span> <span class=\"n\">offset_list</span><span class=\"p\">,</span> <span class=\"n\">name_fm_list</span><span class=\"p\">,</span>\n                      <span class=\"n\">name_fs_list</span><span class=\"p\">,</span> <span class=\"n\">qreq_</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">gca</span><span class=\"p\">()</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">vh</span><span class=\"o\">.</span><span class=\"n\">get_query_text</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">name_daid_list</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">qaid</span><span class=\"o\">=</span><span class=\"n\">qaid</span><span class=\"p\">,</span>\n                              <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n    <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">set_title</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"p\">,</span> <span class=\"n\">ax</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Case tags</span>\n    <span class=\"n\">annotmatch_rowid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annotmatch_rowid_from_superkey</span><span class=\"p\">(</span>\n        <span class=\"p\">[</span><span class=\"n\">qaid</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">name_daid_list</span><span class=\"p\">),</span> <span class=\"n\">name_daid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">annotmatch_rowid_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">filter_Nones</span><span class=\"p\">(</span><span class=\"n\">annotmatch_rowid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">tags_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annotmatch_case_tags</span><span class=\"p\">(</span><span class=\"n\">annotmatch_rowid_list</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argflag</span><span class=\"p\">(</span><span class=\"s1\">&#39;--show&#39;</span><span class=\"p\">):</span>  <span class=\"c1\"># False:</span>\n        <span class=\"n\">tags_list</span> <span class=\"o\">=</span> <span class=\"n\">tag_funcs</span><span class=\"o\">.</span><span class=\"n\">consolodate_annotmatch_tags</span><span class=\"p\">(</span><span class=\"n\">tags_list</span><span class=\"p\">)</span>\n    <span class=\"n\">tag_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">unique_ordered</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">tags_list</span><span class=\"p\">))</span>\n\n    <span class=\"n\">name_rank</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;name_rank&#39;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n    <span class=\"n\">truth</span> <span class=\"o\">=</span> <span class=\"n\">get_multitruth</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">)</span>\n\n    <span class=\"n\">xlabel</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Correct ID&#39;</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Incorrect ID&#39;</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Unknown ID&#39;</span><span class=\"p\">}[</span><span class=\"n\">truth</span><span class=\"p\">]</span>\n\n    <span class=\"k\">if</span> <span class=\"kc\">False</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">name_rank</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">xlabel</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Genuine&#39;</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Imposter&#39;</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Unknown&#39;</span><span class=\"p\">}[</span><span class=\"n\">truth</span><span class=\"p\">]</span>\n            <span class=\"c1\">#xlabel = {1: &#39;True&#39;, 0: &#39;False&#39;, 2: &#39;Unknown&#39;}[truth]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">name_rank</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"n\">xlabel</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                    <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"s1\">&#39;True Positive&#39;</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"s1\">&#39;False Positive&#39;</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Unknown&#39;</span><span class=\"p\">}[</span><span class=\"n\">truth</span><span class=\"p\">]</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">xlabel</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                    <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"s1\">&#39;False Negative&#39;</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"s1\">&#39;True Negative&#39;</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Unknown&#39;</span><span class=\"p\">}[</span><span class=\"n\">truth</span><span class=\"p\">]</span>\n\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">tag_list</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"n\">xlabel</span> <span class=\"o\">+=</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;, &#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">tag_list</span><span class=\"p\">)</span>\n\n    <span class=\"n\">noshow_truth</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argflag</span><span class=\"p\">(</span><span class=\"s1\">&#39;--noshow_truth&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">noshow_truth</span><span class=\"p\">:</span>\n        <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">set_xlabel</span><span class=\"p\">(</span><span class=\"n\">xlabel</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">ax</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_multitruth\"><a class=\"viewcode-back\" href=\"../../../../ibeis.viz/#ibeis.viz.viz_matches.get_multitruth\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">get_multitruth</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">):</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n    <span class=\"k\">if</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">is_aid_unknown</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]):</span>\n        <span class=\"k\">return</span> <span class=\"mi\">2</span>\n    <span class=\"n\">name_equality</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_nids</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"o\">==</span>\n                     <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_nids</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:])))</span>\n    <span class=\"n\">truth</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"k\">if</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">(</span><span class=\"n\">name_equality</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"k\">if</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">any</span><span class=\"p\">(</span><span class=\"n\">name_equality</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">truth</span></div>\n\n\n<div class=\"viewcode-block\" id=\"annotate_matches3\"><a class=\"viewcode-back\" href=\"../../../../ibeis.viz/#ibeis.viz.viz_matches.annotate_matches3\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">annotate_matches3</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">bbox_list</span><span class=\"p\">,</span> <span class=\"n\">offset_list</span><span class=\"p\">,</span> <span class=\"n\">name_fm_list</span><span class=\"p\">,</span>\n                      <span class=\"n\">name_fs_list</span><span class=\"p\">,</span> <span class=\"n\">qreq_</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    TODO: use this as the main function.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\"># TODO Use this function when you clean show_matches</span>\n    <span class=\"n\">in_image</span>    <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;in_image&#39;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"c1\">#show_query  = kwargs.get(&#39;show_query&#39;, True)</span>\n    <span class=\"n\">draw_border</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;draw_border&#39;</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">draw_lbl</span>    <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;draw_lbl&#39;</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">notitle</span>     <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;notitle&#39;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"c1\"># List of annotation scores for each annot in the name</span>\n\n    <span class=\"c1\">#printDBG(&#39;[viz] annotate_matches3()&#39;)</span>\n    <span class=\"c1\">#truth = ibs.get_match_truth(aid1, aid2)</span>\n\n    <span class=\"c1\">#name_equality = (</span>\n    <span class=\"c1\">#    np.array(ibs.get_annot_nids(aid_list[1:])) == ibs.get_annot_nids(aid_list[0])</span>\n    <span class=\"c1\">#).tolist()</span>\n    <span class=\"c1\">#truth = 1 if all(name_equality) else (2 if any(name_equality) else 0)</span>\n    <span class=\"c1\">#truth_color = vh.get_truth_color(truth)</span>\n    <span class=\"c1\">## Build title</span>\n\n    <span class=\"c1\">#score         = kwargs.pop(&#39;score&#39;, None)</span>\n    <span class=\"c1\">#rawscore      = kwargs.pop(&#39;rawscore&#39;, None)</span>\n    <span class=\"c1\">#aid2_raw_rank = kwargs.pop(&#39;aid2_raw_rank&#39;, None)</span>\n    <span class=\"c1\">#print(kwargs)</span>\n    <span class=\"c1\">#title = vh.get_query_text(ibs, None, aid2, truth, qaid=aid1, **kwargs)</span>\n    <span class=\"c1\"># Build xlbl</span>\n    <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">gca</span><span class=\"p\">()</span>\n    <span class=\"n\">ph</span><span class=\"o\">.</span><span class=\"n\">set_plotdat</span><span class=\"p\">(</span><span class=\"n\">ax</span><span class=\"p\">,</span> <span class=\"s1\">&#39;viztype&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;multi_match&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">ph</span><span class=\"o\">.</span><span class=\"n\">set_plotdat</span><span class=\"p\">(</span><span class=\"n\">ax</span><span class=\"p\">,</span> <span class=\"s1\">&#39;qaid&#39;</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n    <span class=\"n\">ph</span><span class=\"o\">.</span><span class=\"n\">set_plotdat</span><span class=\"p\">(</span><span class=\"n\">ax</span><span class=\"p\">,</span> <span class=\"s1\">&#39;num_matches&#39;</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">ph</span><span class=\"o\">.</span><span class=\"n\">set_plotdat</span><span class=\"p\">(</span><span class=\"n\">ax</span><span class=\"p\">,</span> <span class=\"s1\">&#39;aid_list&#39;</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:])</span>\n    <span class=\"k\">for</span> <span class=\"n\">count</span><span class=\"p\">,</span> <span class=\"n\">aid</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span class=\"n\">ph</span><span class=\"o\">.</span><span class=\"n\">set_plotdat</span><span class=\"p\">(</span><span class=\"n\">ax</span><span class=\"p\">,</span> <span class=\"s1\">&#39;aid</span><span class=\"si\">%d</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">count</span><span class=\"p\">,),</span> <span class=\"n\">aid</span><span class=\"p\">)</span>\n\n    <span class=\"c1\">#name_equality = (ibs.get_annot_nids(aid_list[0]) ==</span>\n    <span class=\"c1\">#                 np.array(ibs.get_annot_nids(aid_list[1:])))</span>\n    <span class=\"c1\">#truth = 1 if np.all(name_equality) else (2 if np.any(name_equality) else 0)</span>\n    <span class=\"n\">truth</span> <span class=\"o\">=</span> <span class=\"n\">get_multitruth</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"nb\">any</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">is_aid_unknown</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]))</span> <span class=\"ow\">or</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">is_aid_unknown</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]):</span>\n        <span class=\"n\">truth</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">EVIDENCE_DECISION</span><span class=\"o\">.</span><span class=\"n\">UNKNOWN</span>\n    <span class=\"n\">truth_color</span> <span class=\"o\">=</span> <span class=\"n\">vh</span><span class=\"o\">.</span><span class=\"n\">get_truth_color</span><span class=\"p\">(</span><span class=\"n\">truth</span><span class=\"p\">)</span>\n\n    <span class=\"n\">name_annot_scores</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;name_annot_scores&#39;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n        <span class=\"c1\"># HACK; generalize to multple annots</span>\n        <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">vh</span><span class=\"o\">.</span><span class=\"n\">get_query_text</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">truth</span><span class=\"p\">,</span>\n                                  <span class=\"n\">qaid</span><span class=\"o\">=</span><span class=\"n\">aid_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">notitle</span><span class=\"p\">:</span>\n            <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">set_title</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"p\">,</span> <span class=\"n\">ax</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">draw_lbl</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Build labels</span>\n        <span class=\"n\">nid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_nids</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">distinguish_unknowns</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"n\">name_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_names</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n        <span class=\"n\">lbls_list</span> <span class=\"o\">=</span> <span class=\"p\">[[]</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">))]</span>\n        <span class=\"k\">if</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;show_name&#39;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">):</span>\n            <span class=\"k\">for</span> <span class=\"n\">count</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">lbls</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">lbls_list</span><span class=\"p\">,</span> <span class=\"n\">name_list</span><span class=\"p\">)):</span>\n                <span class=\"n\">lbls</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr2</span><span class=\"p\">((</span><span class=\"n\">name</span><span class=\"p\">)))</span>\n        <span class=\"k\">if</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;show_nid&#39;</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">):</span>\n            <span class=\"k\">for</span> <span class=\"n\">count</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">lbls</span><span class=\"p\">,</span> <span class=\"n\">nid</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">lbls_list</span><span class=\"p\">,</span> <span class=\"n\">nid_list</span><span class=\"p\">)):</span>\n                <span class=\"c1\"># only label the first two images with nids</span>\n                <span class=\"n\">LABEL_ALL_NIDS</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n                <span class=\"k\">if</span> <span class=\"n\">count</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">1</span> <span class=\"ow\">or</span> <span class=\"n\">LABEL_ALL_NIDS</span><span class=\"p\">:</span>\n                    <span class=\"c1\">#lbls.append(vh.get_nidstrs(nid))</span>\n                    <span class=\"n\">lbls</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"s1\">&#39;q&#39;</span> <span class=\"k\">if</span> <span class=\"n\">count</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">vh</span><span class=\"o\">.</span><span class=\"n\">get_nidstrs</span><span class=\"p\">(</span><span class=\"n\">nid</span><span class=\"p\">))</span>\n        <span class=\"k\">if</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;show_aid&#39;</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">):</span>\n            <span class=\"k\">for</span> <span class=\"n\">count</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">lbls</span><span class=\"p\">,</span> <span class=\"n\">aid</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">lbls_list</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">)):</span>\n                <span class=\"n\">lbls</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"s1\">&#39;q&#39;</span> <span class=\"k\">if</span> <span class=\"n\">count</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">vh</span><span class=\"o\">.</span><span class=\"n\">get_aidstrs</span><span class=\"p\">(</span><span class=\"n\">aid</span><span class=\"p\">))</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;show_annot_score&#39;</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span> <span class=\"ow\">and</span>\n              <span class=\"n\">name_annot_scores</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n            <span class=\"n\">max_digits</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;score_precision&#39;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">lbls</span><span class=\"p\">,</span> <span class=\"n\">score</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">lbls_list</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:],</span> <span class=\"n\">name_annot_scores</span><span class=\"p\">):</span>\n                <span class=\"n\">lbls</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">num_fmt</span><span class=\"p\">(</span><span class=\"n\">score</span><span class=\"p\">,</span> <span class=\"n\">max_digits</span><span class=\"o\">=</span><span class=\"n\">max_digits</span><span class=\"p\">))</span>\n        <span class=\"n\">lbl_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39; : &#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">lbls</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">lbls</span> <span class=\"ow\">in</span> <span class=\"n\">lbls_list</span><span class=\"p\">]</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">lbl_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Plot annotations over images</span>\n    <span class=\"k\">if</span> <span class=\"n\">in_image</span><span class=\"p\">:</span>\n        <span class=\"n\">in_image_bbox_list</span> <span class=\"o\">=</span> <span class=\"n\">vh</span><span class=\"o\">.</span><span class=\"n\">get_bboxes</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">offset_list</span><span class=\"p\">)</span>\n        <span class=\"n\">in_image_theta_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_thetas</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n        <span class=\"c1\"># HACK!</span>\n        <span class=\"c1\">#if show_query:</span>\n        <span class=\"c1\">#    pt.draw_bbox(bbox1, bbox_color=pt.ORANGE, lbl=lbl1, theta=theta1)</span>\n        <span class=\"n\">bbox_color</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">ORANGE</span>\n        <span class=\"n\">bbox_color</span> <span class=\"o\">=</span> <span class=\"n\">truth_color</span> <span class=\"k\">if</span> <span class=\"n\">draw_border</span> <span class=\"k\">else</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">ORANGE</span>\n        <span class=\"k\">for</span> <span class=\"n\">bbox</span><span class=\"p\">,</span> <span class=\"n\">theta</span><span class=\"p\">,</span> <span class=\"n\">lbl</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">in_image_bbox_list</span><span class=\"p\">,</span> <span class=\"n\">in_image_theta_list</span><span class=\"p\">,</span>\n                                    <span class=\"n\">lbl_list</span><span class=\"p\">):</span>\n            <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">draw_bbox</span><span class=\"p\">(</span><span class=\"n\">bbox</span><span class=\"p\">,</span> <span class=\"n\">bbox_color</span><span class=\"o\">=</span><span class=\"n\">bbox_color</span><span class=\"p\">,</span> <span class=\"n\">lbl</span><span class=\"o\">=</span><span class=\"n\">lbl</span><span class=\"p\">,</span> <span class=\"n\">theta</span><span class=\"o\">=</span><span class=\"n\">theta</span><span class=\"p\">)</span>\n            <span class=\"k\">pass</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">xy</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">get_axis_xy_width_height</span><span class=\"p\">(</span><span class=\"n\">ax</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">draw_border</span><span class=\"p\">:</span>\n            <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">draw_border</span><span class=\"p\">(</span><span class=\"n\">ax</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"n\">truth_color</span><span class=\"p\">,</span> <span class=\"n\">lw</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">draw_lbl</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Custom user lbl for chips 1 and 2</span>\n            <span class=\"k\">for</span> <span class=\"n\">bbox</span><span class=\"p\">,</span> <span class=\"n\">lbl</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">bbox_list</span><span class=\"p\">,</span> <span class=\"n\">lbl_list</span><span class=\"p\">):</span>\n                <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">h</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">bbox</span>\n                <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">absolute_lbl</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">lbl</span><span class=\"p\">)</span>\n    <span class=\"c1\"># No matches draw a red box</span>\n    <span class=\"k\">if</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"n\">no_matches</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"n\">name_fm_list</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span>\n            <span class=\"nb\">all</span><span class=\"p\">([</span><span class=\"kc\">True</span> <span class=\"k\">if</span> <span class=\"n\">fm</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"k\">else</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">fm</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"k\">for</span> <span class=\"n\">fm</span> <span class=\"ow\">in</span> <span class=\"n\">name_fm_list</span><span class=\"p\">])</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">no_matches</span><span class=\"p\">:</span>\n            <span class=\"n\">xy</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">get_axis_xy_width_height</span><span class=\"p\">(</span><span class=\"n\">ax</span><span class=\"p\">)</span>\n            <span class=\"c1\">#axes_bbox = (xy[0], xy[1], w, h)</span>\n            <span class=\"k\">if</span> <span class=\"n\">draw_border</span><span class=\"p\">:</span>\n                <span class=\"k\">pass</span></div>\n                <span class=\"c1\">#pt.draw_boxedX(axes_bbox, theta=0)</span>\n\n\n<div class=\"viewcode-block\" id=\"annotate_matches2\"><a class=\"viewcode-back\" href=\"../../../../ibeis.viz/#ibeis.viz.viz_matches.annotate_matches2\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">annotate_matches2</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">,</span> <span class=\"n\">fm</span><span class=\"p\">,</span> <span class=\"n\">fs</span><span class=\"p\">,</span>\n                      <span class=\"n\">offset1</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span>\n                      <span class=\"n\">offset2</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span>\n                      <span class=\"n\">xywh2</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>  <span class=\"c1\"># (0, 0, 0, 0),</span>\n                      <span class=\"n\">xywh1</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>  <span class=\"c1\"># (0, 0, 0, 0),</span>\n                      <span class=\"n\">qreq_</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                      <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    TODO: use this as the main function.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"n\">aid_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">]</span>\n        <span class=\"n\">bbox_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">xywh1</span><span class=\"p\">,</span> <span class=\"n\">xywh2</span><span class=\"p\">]</span>\n        <span class=\"n\">offset_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">offset1</span><span class=\"p\">,</span> <span class=\"n\">offset2</span><span class=\"p\">]</span>\n        <span class=\"n\">name_fm_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">fm</span><span class=\"p\">]</span>\n        <span class=\"n\">name_fs_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">fs</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">annotate_matches3</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">bbox_list</span><span class=\"p\">,</span> <span class=\"n\">offset_list</span><span class=\"p\">,</span> <span class=\"n\">name_fm_list</span><span class=\"p\">,</span> <span class=\"n\">name_fs_list</span><span class=\"p\">,</span> <span class=\"n\">qreq_</span><span class=\"o\">=</span><span class=\"n\">qreq_</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"c1\"># TODO: make sure all of this functionality is incorporated into annotate_matches3</span>\n        <span class=\"n\">in_image</span>    <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;in_image&#39;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"n\">show_query</span>  <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;show_query&#39;</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">draw_border</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;draw_border&#39;</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">draw_lbl</span>    <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;draw_lbl&#39;</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">notitle</span>     <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;notitle&#39;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n\n        <span class=\"n\">truth</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_match_truth</span><span class=\"p\">(</span><span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">)</span>\n        <span class=\"n\">truth_color</span> <span class=\"o\">=</span> <span class=\"n\">vh</span><span class=\"o\">.</span><span class=\"n\">get_truth_color</span><span class=\"p\">(</span><span class=\"n\">truth</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Build title</span>\n        <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">vh</span><span class=\"o\">.</span><span class=\"n\">get_query_text</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">,</span> <span class=\"n\">truth</span><span class=\"p\">,</span> <span class=\"n\">qaid</span><span class=\"o\">=</span><span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Build xlbl</span>\n        <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">gca</span><span class=\"p\">()</span>\n        <span class=\"n\">ph</span><span class=\"o\">.</span><span class=\"n\">set_plotdat</span><span class=\"p\">(</span><span class=\"n\">ax</span><span class=\"p\">,</span> <span class=\"s1\">&#39;viztype&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;matches&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">ph</span><span class=\"o\">.</span><span class=\"n\">set_plotdat</span><span class=\"p\">(</span><span class=\"n\">ax</span><span class=\"p\">,</span> <span class=\"s1\">&#39;qaid&#39;</span><span class=\"p\">,</span> <span class=\"n\">aid1</span><span class=\"p\">)</span>\n        <span class=\"n\">ph</span><span class=\"o\">.</span><span class=\"n\">set_plotdat</span><span class=\"p\">(</span><span class=\"n\">ax</span><span class=\"p\">,</span> <span class=\"s1\">&#39;aid1&#39;</span><span class=\"p\">,</span> <span class=\"n\">aid1</span><span class=\"p\">)</span>\n        <span class=\"n\">ph</span><span class=\"o\">.</span><span class=\"n\">set_plotdat</span><span class=\"p\">(</span><span class=\"n\">ax</span><span class=\"p\">,</span> <span class=\"s1\">&#39;aid2&#39;</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">draw_lbl</span><span class=\"p\">:</span>\n            <span class=\"n\">name1</span><span class=\"p\">,</span> <span class=\"n\">name2</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_names</span><span class=\"p\">([</span><span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">])</span>\n            <span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">nid2</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_name_rowids</span><span class=\"p\">([</span><span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">],</span>\n                                                   <span class=\"n\">distinguish_unknowns</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n            <span class=\"c1\">#lbl1 = repr(name1)  + &#39; : &#39; + &#39;q&#39; + vh.get_aidstrs(aid1)</span>\n            <span class=\"c1\">#lbl2 = repr(name2)  + &#39; : &#39; +  vh.get_aidstrs(aid2)</span>\n            <span class=\"n\">lbl1_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"n\">lbl2_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">if</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;show_aid&#39;</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">):</span>\n                <span class=\"n\">lbl1_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s1\">&#39;q&#39;</span> <span class=\"o\">+</span> <span class=\"n\">vh</span><span class=\"o\">.</span><span class=\"n\">get_aidstrs</span><span class=\"p\">(</span><span class=\"n\">aid1</span><span class=\"p\">))</span>\n                <span class=\"n\">lbl2_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">vh</span><span class=\"o\">.</span><span class=\"n\">get_aidstrs</span><span class=\"p\">(</span><span class=\"n\">aid2</span><span class=\"p\">))</span>\n            <span class=\"k\">if</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;show_name&#39;</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">):</span>\n                <span class=\"n\">lbl1_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">repr</span><span class=\"p\">((</span><span class=\"n\">name1</span><span class=\"p\">)))</span>\n                <span class=\"n\">lbl2_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">repr</span><span class=\"p\">((</span><span class=\"n\">name2</span><span class=\"p\">)))</span>\n            <span class=\"k\">if</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;show_nid&#39;</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">):</span>\n                <span class=\"n\">lbl1_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">vh</span><span class=\"o\">.</span><span class=\"n\">get_nidstrs</span><span class=\"p\">(</span><span class=\"n\">nid1</span><span class=\"p\">))</span>\n                <span class=\"n\">lbl2_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">vh</span><span class=\"o\">.</span><span class=\"n\">get_nidstrs</span><span class=\"p\">(</span><span class=\"n\">nid2</span><span class=\"p\">))</span>\n            <span class=\"n\">lbl1</span> <span class=\"o\">=</span> <span class=\"s1\">&#39; : &#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">lbl1_list</span><span class=\"p\">)</span>\n            <span class=\"n\">lbl2</span> <span class=\"o\">=</span> <span class=\"s1\">&#39; : &#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">lbl2_list</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">lbl1</span><span class=\"p\">,</span> <span class=\"n\">lbl2</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span>\n        <span class=\"k\">if</span> <span class=\"n\">vh</span><span class=\"o\">.</span><span class=\"n\">NO_LBL_OVERRIDE</span><span class=\"p\">:</span>\n            <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">notitle</span><span class=\"p\">:</span>\n            <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">set_title</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"p\">,</span> <span class=\"n\">ax</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Plot annotations over images</span>\n        <span class=\"k\">if</span> <span class=\"n\">in_image</span><span class=\"p\">:</span>\n            <span class=\"n\">bbox1</span><span class=\"p\">,</span> <span class=\"n\">bbox2</span> <span class=\"o\">=</span> <span class=\"n\">vh</span><span class=\"o\">.</span><span class=\"n\">get_bboxes</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"n\">offset1</span><span class=\"p\">,</span> <span class=\"n\">offset2</span><span class=\"p\">])</span>\n            <span class=\"n\">theta1</span><span class=\"p\">,</span> <span class=\"n\">theta2</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_thetas</span><span class=\"p\">([</span><span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">])</span>\n            <span class=\"c1\"># HACK!</span>\n            <span class=\"k\">if</span> <span class=\"n\">show_query</span><span class=\"p\">:</span>\n                <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">draw_bbox</span><span class=\"p\">(</span><span class=\"n\">bbox1</span><span class=\"p\">,</span> <span class=\"n\">bbox_color</span><span class=\"o\">=</span><span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">ORANGE</span><span class=\"p\">,</span> <span class=\"n\">lbl</span><span class=\"o\">=</span><span class=\"n\">lbl1</span><span class=\"p\">,</span> <span class=\"n\">theta</span><span class=\"o\">=</span><span class=\"n\">theta1</span><span class=\"p\">)</span>\n            <span class=\"n\">bbox_color2</span> <span class=\"o\">=</span> <span class=\"n\">truth_color</span> <span class=\"k\">if</span> <span class=\"n\">draw_border</span> <span class=\"k\">else</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">ORANGE</span>\n            <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">draw_bbox</span><span class=\"p\">(</span><span class=\"n\">bbox2</span><span class=\"p\">,</span> <span class=\"n\">bbox_color</span><span class=\"o\">=</span><span class=\"n\">bbox_color2</span><span class=\"p\">,</span> <span class=\"n\">lbl</span><span class=\"o\">=</span><span class=\"n\">lbl2</span><span class=\"p\">,</span> <span class=\"n\">theta</span><span class=\"o\">=</span><span class=\"n\">theta2</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">xy</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">get_axis_xy_width_height</span><span class=\"p\">(</span><span class=\"n\">ax</span><span class=\"p\">)</span>\n            <span class=\"n\">bbox2</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">xy</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">xy</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">h</span><span class=\"p\">)</span>\n            <span class=\"n\">theta2</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">xywh2</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"c1\">#xywh2 = (xy[0], xy[1], w, h)</span>\n                <span class=\"c1\"># weird when sidebyside is off y seems to be inverted</span>\n                <span class=\"n\">xywh2</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span>  <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">h</span><span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">show_query</span> <span class=\"ow\">and</span> <span class=\"n\">xywh1</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">data_config2</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kc\">None</span> <span class=\"k\">if</span> <span class=\"n\">qreq_</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"k\">else</span>\n                                <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">extern_data_config2</span><span class=\"p\">)</span>\n                <span class=\"c1\"># FIXME, pass data in</span>\n                <span class=\"n\">kpts2</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_kpts</span><span class=\"p\">([</span><span class=\"n\">aid2</span><span class=\"p\">],</span> <span class=\"n\">config2_</span><span class=\"o\">=</span><span class=\"n\">data_config2</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                <span class=\"c1\">#pt.draw_kpts2(kpts2.take(fm.T[1], axis=0))</span>\n                <span class=\"c1\"># Draw any selected matches</span>\n                <span class=\"c1\">#sm_kw = dict(rect=True, colors=pt.BLUE)</span>\n                <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">plot_fmatch</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">xywh2</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">kpts2</span><span class=\"p\">,</span> <span class=\"n\">fm</span><span class=\"p\">,</span> <span class=\"n\">fs</span><span class=\"o\">=</span><span class=\"n\">fs</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">draw_border</span><span class=\"p\">:</span>\n                <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">draw_border</span><span class=\"p\">(</span><span class=\"n\">ax</span><span class=\"p\">,</span> <span class=\"n\">truth_color</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">offset</span><span class=\"o\">=</span><span class=\"n\">offset2</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">draw_lbl</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Custom user lbl for chips 1 and 2</span>\n                <span class=\"k\">if</span> <span class=\"n\">show_query</span><span class=\"p\">:</span>\n                    <span class=\"p\">(</span><span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"n\">y1</span><span class=\"p\">,</span> <span class=\"n\">w1</span><span class=\"p\">,</span> <span class=\"n\">h1</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">xywh1</span>\n                    <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">absolute_lbl</span><span class=\"p\">(</span><span class=\"n\">x1</span> <span class=\"o\">+</span> <span class=\"n\">w1</span><span class=\"p\">,</span> <span class=\"n\">y1</span><span class=\"p\">,</span> <span class=\"n\">lbl1</span><span class=\"p\">)</span>\n                <span class=\"p\">(</span><span class=\"n\">x2</span><span class=\"p\">,</span> <span class=\"n\">y2</span><span class=\"p\">,</span> <span class=\"n\">w2</span><span class=\"p\">,</span> <span class=\"n\">h2</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">xywh2</span>\n                <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">absolute_lbl</span><span class=\"p\">(</span><span class=\"n\">x2</span> <span class=\"o\">+</span> <span class=\"n\">w2</span><span class=\"p\">,</span> <span class=\"n\">y2</span><span class=\"p\">,</span> <span class=\"n\">lbl2</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n            <span class=\"c1\"># No matches draw a red box</span>\n            <span class=\"k\">if</span> <span class=\"n\">fm</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">fm</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">draw_border</span><span class=\"p\">:</span>\n                    <span class=\"k\">pass</span></div>\n                    <span class=\"c1\">#pt.draw_boxedX(bbox2, theta=theta2)</span>\n\n\n<span class=\"c1\">#@ut.indent_func</span>\n<span class=\"c1\">#@ut.tracefunc_xml</span>\n<div class=\"viewcode-block\" id=\"show_matches2\"><a class=\"viewcode-back\" href=\"../../../../ibeis.viz/#ibeis.viz.viz_matches.show_matches2\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">show_matches2</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">,</span> <span class=\"n\">fm</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">fs</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">fm_norm</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">sel_fm</span><span class=\"o\">=</span><span class=\"p\">[],</span>\n                  <span class=\"n\">H1</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">H2</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">qreq_</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    TODO: DEPRICATE and use special case of show_name_matches</span>\n<span class=\"sd\">    Integrate ChipMatch</span>\n\n<span class=\"sd\">    Used in:</span>\n<span class=\"sd\">        Found 1 line(s) in &#39;/home/joncrall/code/ibeis_cnn/ibeis_cnn/ingest_ibeis.py&#39;:</span>\n<span class=\"sd\">        ingest_ibeis.py : 827 |        &gt;&gt;&gt;     ibeis.viz.viz_matches.show_matches2(ibs, aid1, aid2, fm=None, kpts1=kpts1, kpts2=kpts2)</span>\n<span class=\"sd\">        ----------------------</span>\n<span class=\"sd\">        Found 4 line(s) in &#39;/home/joncrall/code/ibeis/ibeis/viz/viz_matches.py&#39;:</span>\n<span class=\"sd\">        viz_matches.py : 423 |def show_matches2(ibs, aid1, aid2, fm=None, fs=None, fm_norm=None, sel_fm=[],</span>\n<span class=\"sd\">        viz_matches.py : 430 |        python -m ibeis.viz.viz_matches --exec-show_matches2 --show</span>\n<span class=\"sd\">        viz_matches.py : 431 |        python -m ibeis --tf ChipMatch.ishow_single_annotmatch show_matches2 --show</span>\n<span class=\"sd\">        viz_matches.py : 515 |    return show_matches2(ibs, aid1, aid2, fm, fs, qreq_=qreq_, **kwargs)</span>\n<span class=\"sd\">        ----------------------</span>\n<span class=\"sd\">        Found 1 line(s) in &#39;/home/joncrall/code/ibeis/ibeis/viz/interact/interact_matches.py&#39;:</span>\n<span class=\"sd\">        interact_matches.py : 372 |            tup = viz.viz_matches.show_matches2(ibs, self.qaid, self.daid,</span>\n<span class=\"sd\">        ----------------------</span>\n<span class=\"sd\">        Found 2 line(s) in &#39;/home/joncrall/code/ibeis/ibeis/algo/hots/chip_match.py&#39;:</span>\n<span class=\"sd\">        chip_match.py : 204 |        viz_matches.show_matches2(qreq_.ibs, cm.qaid, daid, qreq_=qreq_,</span>\n<span class=\"sd\">        chip_match.py : 219 |            ibeis.viz.viz_matches.show_matches2</span>\n<span class=\"sd\">        ----------------------</span>\n<span class=\"sd\">        Found 1 line(s) in &#39;/home/joncrall/code/ibeis/ibeis/algo/hots/scoring.py&#39;:</span>\n<span class=\"sd\">        scoring.py : 562 |        viz.viz_matches.show_matches2(qreq_.ibs, qaid, daid, fm, fs,</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.viz.viz_matches --exec-show_matches2 --show</span>\n<span class=\"sd\">        python -m ibeis --tf ChipMatch.ishow_single_annotmatch show_matches2 --show</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.algo.hots.chip_match import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; cm, qreq_ = ibeis.testdata_cm(defaultdb=&#39;PZ_MTEST&#39;, default_qaids=[18])</span>\n<span class=\"sd\">        &gt;&gt;&gt; cm.score_name_nsum(qreq_)</span>\n<span class=\"sd\">        &gt;&gt;&gt; daid = cm.get_top_aids()[0]</span>\n<span class=\"sd\">        &gt;&gt;&gt; cm.show_single_annotmatch(qreq_, daid)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.show_if_requested()</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">qreq_</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[viz_matches] WARNING: qreq_ is None&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">kwargs</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n    <span class=\"n\">in_image</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;in_image&#39;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">draw_fmatches</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s1\">&#39;draw_fmatches&#39;</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Read query and result info (chips, names, ...)</span>\n    <span class=\"n\">rchip1</span><span class=\"p\">,</span> <span class=\"n\">rchip2</span><span class=\"p\">,</span> <span class=\"n\">kpts1</span><span class=\"p\">,</span> <span class=\"n\">kpts2</span> <span class=\"o\">=</span> <span class=\"n\">_get_annot_pair_info</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">,</span> <span class=\"n\">qreq_</span><span class=\"p\">,</span>\n                                                        <span class=\"n\">draw_fmatches</span><span class=\"p\">,</span>  <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">delete_keys</span><span class=\"p\">(</span><span class=\"n\">kwargs</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">&#39;kpts1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;kpts2&#39;</span><span class=\"p\">])</span>\n    <span class=\"k\">if</span> <span class=\"n\">fm</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">kpts1</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">kpts2</span><span class=\"p\">),</span> <span class=\"s1\">&#39;keypoints should be in correspondence&#39;</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n        <span class=\"n\">fm</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">vstack</span><span class=\"p\">((</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">kpts1</span><span class=\"p\">)),</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">kpts1</span><span class=\"p\">))))</span><span class=\"o\">.</span><span class=\"n\">T</span>\n\n    <span class=\"c1\"># Build annotation strings / colors</span>\n    <span class=\"n\">lbl1</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;q&#39;</span> <span class=\"o\">+</span> <span class=\"n\">vh</span><span class=\"o\">.</span><span class=\"n\">get_aidstrs</span><span class=\"p\">(</span><span class=\"n\">aid1</span><span class=\"p\">)</span>\n    <span class=\"n\">lbl2</span> <span class=\"o\">=</span> <span class=\"n\">vh</span><span class=\"o\">.</span><span class=\"n\">get_aidstrs</span><span class=\"p\">(</span><span class=\"n\">aid2</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">in_image</span><span class=\"p\">:</span>  <span class=\"c1\"># HACK!</span>\n        <span class=\"n\">lbl1</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">lbl2</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"c1\"># Draws the chips and keypoint matches</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">ax</span><span class=\"p\">,</span> <span class=\"n\">xywh1</span><span class=\"p\">,</span> <span class=\"n\">xywh2</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">show_chipmatch2</span><span class=\"p\">(</span><span class=\"n\">rchip1</span><span class=\"p\">,</span> <span class=\"n\">rchip2</span><span class=\"p\">,</span> <span class=\"n\">kpts1</span><span class=\"p\">,</span> <span class=\"n\">kpts2</span><span class=\"p\">,</span> <span class=\"n\">fm</span><span class=\"p\">,</span>\n                                              <span class=\"n\">fs</span><span class=\"o\">=</span><span class=\"n\">fs</span><span class=\"p\">,</span> <span class=\"n\">fm_norm</span><span class=\"o\">=</span><span class=\"n\">fm_norm</span><span class=\"p\">,</span> <span class=\"n\">H1</span><span class=\"o\">=</span><span class=\"n\">H1</span><span class=\"p\">,</span>\n                                              <span class=\"n\">H2</span><span class=\"o\">=</span><span class=\"n\">H2</span><span class=\"p\">,</span> <span class=\"n\">lbl1</span><span class=\"o\">=</span><span class=\"n\">lbl1</span><span class=\"p\">,</span> <span class=\"n\">lbl2</span><span class=\"o\">=</span><span class=\"n\">lbl2</span><span class=\"p\">,</span>\n                                              <span class=\"n\">sel_fm</span><span class=\"o\">=</span><span class=\"n\">sel_fm</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">printex</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">,</span> <span class=\"s1\">&#39;consider qr.remove_corrupted_queries&#39;</span><span class=\"p\">,</span>\n                      <span class=\"s1\">&#39;[viz_matches]&#39;</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">)</span>\n        <span class=\"k\">raise</span>\n    <span class=\"c1\"># Moved the code into show_chipmatch</span>\n    <span class=\"c1\">#if len(sel_fm) &gt; 0:</span>\n    <span class=\"c1\">#    # Draw any selected matches</span>\n    <span class=\"c1\">#    sm_kw = dict(rect=True, colors=pt.BLUE)</span>\n    <span class=\"c1\">#    pt.plot_fmatch(xywh1, xywh2, kpts1, kpts2, sel_fm, **sm_kw)</span>\n    <span class=\"p\">(</span><span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"n\">y1</span><span class=\"p\">,</span> <span class=\"n\">w1</span><span class=\"p\">,</span> <span class=\"n\">h1</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">xywh1</span>\n    <span class=\"p\">(</span><span class=\"n\">x2</span><span class=\"p\">,</span> <span class=\"n\">y2</span><span class=\"p\">,</span> <span class=\"n\">w2</span><span class=\"p\">,</span> <span class=\"n\">h2</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">xywh2</span>\n    <span class=\"n\">offset1</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"n\">y1</span><span class=\"p\">)</span>\n    <span class=\"n\">offset2</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">x2</span><span class=\"p\">,</span> <span class=\"n\">y2</span><span class=\"p\">)</span>\n    <span class=\"n\">annotate_matches2</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">,</span> <span class=\"n\">fm</span><span class=\"p\">,</span> <span class=\"n\">fs</span><span class=\"p\">,</span> <span class=\"n\">xywh2</span><span class=\"o\">=</span><span class=\"n\">xywh2</span><span class=\"p\">,</span> <span class=\"n\">xywh1</span><span class=\"o\">=</span><span class=\"n\">xywh1</span><span class=\"p\">,</span>\n                      <span class=\"n\">offset1</span><span class=\"o\">=</span><span class=\"n\">offset1</span><span class=\"p\">,</span> <span class=\"n\">offset2</span><span class=\"o\">=</span><span class=\"n\">offset2</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">ax</span><span class=\"p\">,</span> <span class=\"n\">xywh1</span><span class=\"p\">,</span> <span class=\"n\">xywh2</span></div>\n\n\n<span class=\"c1\"># OLD QRES BASED FUNCS STILL IN USE</span>\n\n\n<span class=\"c1\">#@ut.indent_func</span>\n<div class=\"viewcode-block\" id=\"show_matches\"><a class=\"viewcode-back\" href=\"../../../../ibeis.viz/#ibeis.viz.viz_matches.show_matches\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">show_matches</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">cm</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">,</span> <span class=\"n\">sel_fm</span><span class=\"o\">=</span><span class=\"p\">[],</span> <span class=\"n\">qreq_</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    DEPRICATE</span>\n\n<span class=\"sd\">    shows single annotated match result.</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (IBEISController):</span>\n<span class=\"sd\">        cm (ChipMatch):  object of feature correspondences and scores</span>\n<span class=\"sd\">        aid2 (int): result annotation id</span>\n<span class=\"sd\">        sel_fm (list): selected features match indices</span>\n\n<span class=\"sd\">    Kwargs:</span>\n<span class=\"sd\">        vert (bool)</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        tuple: (ax, xywh1, xywh2)</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">fm</span> <span class=\"o\">=</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">aid2_fm</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">aid2</span><span class=\"p\">,</span> <span class=\"p\">[])</span>\n    <span class=\"n\">fs</span> <span class=\"o\">=</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">aid2_fs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">aid2</span><span class=\"p\">,</span> <span class=\"p\">[])</span>\n    <span class=\"n\">aid1</span> <span class=\"o\">=</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">qaid</span>\n    <span class=\"k\">return</span> <span class=\"n\">show_matches2</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">,</span> <span class=\"n\">fm</span><span class=\"p\">,</span> <span class=\"n\">fs</span><span class=\"p\">,</span> <span class=\"n\">qreq_</span><span class=\"o\">=</span><span class=\"n\">qreq_</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"show_multichip_match\"><a class=\"viewcode-back\" href=\"../../../../ibeis.viz/#ibeis.viz.viz_matches.show_multichip_match\">[docs]</a><span class=\"nd\">@profile</span>\n<span class=\"k\">def</span> <span class=\"nf\">show_multichip_match</span><span class=\"p\">(</span><span class=\"n\">rchip1</span><span class=\"p\">,</span> <span class=\"n\">rchip2_list</span><span class=\"p\">,</span> <span class=\"n\">kpts1</span><span class=\"p\">,</span> <span class=\"n\">kpts2_list</span><span class=\"p\">,</span> <span class=\"n\">fm_list</span><span class=\"p\">,</span>\n                         <span class=\"n\">fs_list</span><span class=\"p\">,</span> <span class=\"n\">featflag_list</span><span class=\"p\">,</span> <span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">pnum</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                         <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    move to df2</span>\n<span class=\"sd\">    rchip = rchip1</span>\n<span class=\"sd\">    H = H1 = None</span>\n<span class=\"sd\">    target_wh = None</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">vtool.image</span> <span class=\"k\">as</span> <span class=\"nn\">gtool</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">plottool</span> <span class=\"k\">as</span> <span class=\"nn\">pt</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">vtool</span> <span class=\"k\">as</span> <span class=\"nn\">vt</span>\n    <span class=\"n\">kwargs</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n\n    <span class=\"n\">colorbar_</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s1\">&#39;colorbar_&#39;</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">stack_larger</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s1\">&#39;stack_larger&#39;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">stack_side</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s1\">&#39;stack_side&#39;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"c1\"># mode for features disabled by name scoring</span>\n    <span class=\"n\">NONVOTE_MODE</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;nonvote_mode&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;filter&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">preprocess_chips</span><span class=\"p\">(</span><span class=\"n\">rchip</span><span class=\"p\">,</span> <span class=\"n\">H</span><span class=\"p\">,</span> <span class=\"n\">target_wh</span><span class=\"p\">):</span>\n        <span class=\"n\">rchip_</span> <span class=\"o\">=</span> <span class=\"n\">rchip</span> <span class=\"k\">if</span> <span class=\"n\">H</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"k\">else</span> <span class=\"n\">gtool</span><span class=\"o\">.</span><span class=\"n\">warpHomog</span><span class=\"p\">(</span><span class=\"n\">rchip</span><span class=\"p\">,</span> <span class=\"n\">H</span><span class=\"p\">,</span> <span class=\"n\">target_wh</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">rchip_</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">fnum</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">fnum</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">next_fnum</span><span class=\"p\">()</span>\n\n    <span class=\"n\">target_wh1</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"n\">H1</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"n\">rchip1_</span> <span class=\"o\">=</span> <span class=\"n\">preprocess_chips</span><span class=\"p\">(</span><span class=\"n\">rchip1</span><span class=\"p\">,</span> <span class=\"n\">H1</span><span class=\"p\">,</span> <span class=\"n\">target_wh1</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Hack to visually identify the query</span>\n    <span class=\"n\">rchip1_</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">draw_border</span><span class=\"p\">(</span>\n        <span class=\"n\">rchip1_</span><span class=\"p\">,</span> <span class=\"n\">out</span><span class=\"o\">=</span><span class=\"n\">rchip1_</span><span class=\"p\">,</span> <span class=\"n\">thickness</span><span class=\"o\">=</span><span class=\"mi\">15</span><span class=\"p\">,</span>\n        <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">UNKNOWN_PURP</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"mi\">255</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">uint8</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">tolist</span><span class=\"p\">())</span>\n    <span class=\"n\">wh1</span> <span class=\"o\">=</span> <span class=\"n\">gtool</span><span class=\"o\">.</span><span class=\"n\">get_size</span><span class=\"p\">(</span><span class=\"n\">rchip1_</span><span class=\"p\">)</span>\n    <span class=\"n\">rchip2_list_</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">preprocess_chips</span><span class=\"p\">(</span><span class=\"n\">rchip2</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">wh1</span><span class=\"p\">)</span>\n                    <span class=\"k\">for</span> <span class=\"n\">rchip2</span> <span class=\"ow\">in</span> <span class=\"n\">rchip2_list</span><span class=\"p\">]</span>\n    <span class=\"n\">wh2_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">gtool</span><span class=\"o\">.</span><span class=\"n\">get_size</span><span class=\"p\">(</span><span class=\"n\">rchip2</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">rchip2</span> <span class=\"ow\">in</span> <span class=\"n\">rchip2_list_</span><span class=\"p\">]</span>\n\n    <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"mi\">0</span> <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">rchip2_list</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">3</span> <span class=\"k\">else</span> <span class=\"mi\">1</span>\n    <span class=\"c1\">#vert = True if len(rchip2_list) &gt; 1 else False</span>\n    <span class=\"n\">vert</span> <span class=\"o\">=</span> <span class=\"kc\">True</span> <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">rchip2_list</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"kc\">None</span>\n    <span class=\"c1\">#num = 0</span>\n\n    <span class=\"k\">if</span> <span class=\"kc\">False</span> <span class=\"ow\">and</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;fastmode&#39;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"c1\"># This doesn&#39;t actually help the speed very much</span>\n        <span class=\"n\">stackkw</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span>\n            <span class=\"c1\"># Hack draw results faster Q</span>\n            <span class=\"c1\">#initial_sf=.4,</span>\n            <span class=\"c1\">#initial_sf=.9,</span>\n            <span class=\"n\">use_larger</span><span class=\"o\">=</span><span class=\"n\">stack_larger</span><span class=\"p\">,</span>\n            <span class=\"c1\">#use_larger=True,</span>\n        <span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">stackkw</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">()</span>\n    <span class=\"c1\">#use_larger = True</span>\n    <span class=\"c1\">#vert = kwargs.get(&#39;fastmode&#39;, False)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">stack_side</span><span class=\"p\">:</span>\n        <span class=\"c1\"># hack to stack all database images vertically</span>\n        <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n    <span class=\"c1\"># TODO: heatmask</span>\n\n    <span class=\"n\">match_img</span><span class=\"p\">,</span> <span class=\"n\">offset_list</span><span class=\"p\">,</span> <span class=\"n\">sf_list</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">stack_image_list_special</span><span class=\"p\">(</span>\n        <span class=\"n\">rchip1_</span><span class=\"p\">,</span> <span class=\"n\">rchip2_list_</span><span class=\"p\">,</span> <span class=\"n\">num</span><span class=\"o\">=</span><span class=\"n\">num</span><span class=\"p\">,</span> <span class=\"n\">vert</span><span class=\"o\">=</span><span class=\"n\">vert</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">stackkw</span><span class=\"p\">)</span>\n    <span class=\"n\">wh_list</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">([[</span><span class=\"n\">wh1</span><span class=\"p\">],</span> <span class=\"n\">wh2_list</span><span class=\"p\">]))</span> <span class=\"o\">*</span> <span class=\"n\">sf_list</span>\n\n    <span class=\"n\">offset1</span> <span class=\"o\">=</span> <span class=\"n\">offset_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"n\">wh1</span> <span class=\"o\">=</span> <span class=\"n\">wh_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"n\">sf1</span> <span class=\"o\">=</span> <span class=\"n\">sf_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n    <span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">match_img</span><span class=\"p\">,</span> <span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"n\">fnum</span><span class=\"p\">,</span> <span class=\"n\">pnum</span><span class=\"o\">=</span><span class=\"n\">pnum</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;show_matches&#39;</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">fs_list</span><span class=\"p\">)</span>\n        <span class=\"c1\">#ut.embed()</span>\n        <span class=\"n\">flat_fs</span><span class=\"p\">,</span> <span class=\"n\">cumlen_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">invertible_flatten2</span><span class=\"p\">(</span><span class=\"n\">fs_list</span><span class=\"p\">)</span>\n        <span class=\"n\">flat_colors</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">scores_to_color</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">flat_fs</span><span class=\"p\">),</span> <span class=\"s1\">&#39;hot&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">colors_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">unflatten2</span><span class=\"p\">(</span><span class=\"n\">flat_colors</span><span class=\"p\">,</span> <span class=\"n\">cumlen_list</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">_tup</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">offset_list</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:],</span> <span class=\"n\">wh_list</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:],</span> <span class=\"n\">sf_list</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:],</span> <span class=\"n\">kpts2_list</span><span class=\"p\">,</span>\n                        <span class=\"n\">fm_list</span><span class=\"p\">,</span> <span class=\"n\">fs_list</span><span class=\"p\">,</span> <span class=\"n\">featflag_list</span><span class=\"p\">,</span> <span class=\"n\">colors_list</span><span class=\"p\">):</span>\n            <span class=\"n\">offset2</span><span class=\"p\">,</span> <span class=\"n\">wh2</span><span class=\"p\">,</span> <span class=\"n\">sf2</span><span class=\"p\">,</span> <span class=\"n\">kpts2</span><span class=\"p\">,</span> <span class=\"n\">fm2_</span><span class=\"p\">,</span> <span class=\"n\">fs2_</span><span class=\"p\">,</span> <span class=\"n\">featflags</span><span class=\"p\">,</span> <span class=\"n\">colors</span> <span class=\"o\">=</span> <span class=\"n\">_tup</span>\n            <span class=\"n\">xywh1</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">offset1</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">offset1</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">wh1</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">wh1</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n            <span class=\"n\">xywh2</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">offset2</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">offset2</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">wh2</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">wh2</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n            <span class=\"c1\">#colors = pt.scores_to_color(fs2)</span>\n            <span class=\"k\">if</span> <span class=\"n\">kpts1</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">kpts2</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">NONVOTE_MODE</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;filter&#39;</span><span class=\"p\">:</span>\n                    <span class=\"n\">fm2</span> <span class=\"o\">=</span> <span class=\"n\">fm2_</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">featflags</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n                    <span class=\"n\">fs2</span> <span class=\"o\">=</span> <span class=\"n\">fs2_</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">featflags</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n                <span class=\"k\">elif</span> <span class=\"n\">NONVOTE_MODE</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;only&#39;</span><span class=\"p\">:</span>\n                    <span class=\"n\">fm2</span> <span class=\"o\">=</span> <span class=\"n\">fm2_</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">logical_not</span><span class=\"p\">(</span><span class=\"n\">featflags</span><span class=\"p\">),</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n                    <span class=\"n\">fs2</span> <span class=\"o\">=</span> <span class=\"n\">fs2_</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">logical_not</span><span class=\"p\">(</span><span class=\"n\">featflags</span><span class=\"p\">),</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"c1\"># TODO: optional coloring of nonvotes instead</span>\n                    <span class=\"n\">fm2</span> <span class=\"o\">=</span> <span class=\"n\">fm2_</span>\n                    <span class=\"n\">fs2</span> <span class=\"o\">=</span> <span class=\"n\">fs2_</span>\n                <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">plot_fmatch</span><span class=\"p\">(</span><span class=\"n\">xywh1</span><span class=\"p\">,</span> <span class=\"n\">xywh2</span><span class=\"p\">,</span> <span class=\"n\">kpts1</span><span class=\"p\">,</span> <span class=\"n\">kpts2</span><span class=\"p\">,</span> <span class=\"n\">fm2</span><span class=\"p\">,</span> <span class=\"n\">fs2</span><span class=\"p\">,</span>\n                               <span class=\"n\">fm_norm</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">H1</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">H2</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                               <span class=\"n\">scale_factor1</span><span class=\"o\">=</span><span class=\"n\">sf1</span><span class=\"p\">,</span> <span class=\"n\">scale_factor2</span><span class=\"o\">=</span><span class=\"n\">sf2</span><span class=\"p\">,</span>\n                               <span class=\"n\">colorbar_</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">colors</span><span class=\"o\">=</span><span class=\"n\">colors</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">colorbar_</span><span class=\"p\">:</span>\n            <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">colorbar</span><span class=\"p\">(</span><span class=\"n\">flat_fs</span><span class=\"p\">,</span> <span class=\"n\">flat_colors</span><span class=\"p\">)</span>\n    <span class=\"n\">bbox_list</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">h</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">h</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">offset_list</span><span class=\"p\">,</span> <span class=\"n\">wh_list</span><span class=\"p\">)]</span>\n    <span class=\"k\">return</span> <span class=\"n\">offset_list</span><span class=\"p\">,</span> <span class=\"n\">sf_list</span><span class=\"p\">,</span> <span class=\"n\">bbox_list</span></div>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.viz.viz_matches --test-show_matches --show</span>\n\n<span class=\"sd\">        python -m ibeis.viz.viz_matches</span>\n<span class=\"sd\">        python -m ibeis.viz.viz_matches --allexamples</span>\n<span class=\"sd\">        python -m ibeis.viz.viz_matches --allexamples --noface --nosrc</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">multiprocessing</span>\n    <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">freeze_support</span><span class=\"p\">()</span>  <span class=\"c1\"># for win32</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>  <span class=\"c1\"># NOQA</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">doctest_funcs</span><span class=\"p\">()</span>\n</pre></div>", "current_page_name": "_modules/ibeis/viz/viz_matches", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}