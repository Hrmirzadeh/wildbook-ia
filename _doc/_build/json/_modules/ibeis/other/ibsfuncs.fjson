{"parents": [{"link": "../../../", "title": "Module code"}, {"link": "../../", "title": "ibeis"}, {"link": "../", "title": "ibeis.other"}], "title": "ibeis.other.ibsfuncs", "body": "<h1>Source code for ibeis.other.ibsfuncs</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">developer convenience functions for ibs</span>\n\n<span class=\"sd\">TODO: need to split up into sub modules:</span>\n<span class=\"sd\">    consistency_checks</span>\n<span class=\"sd\">    feasibility_fixes</span>\n<span class=\"sd\">    move the export stuff to dbio</span>\n\n<span class=\"sd\">    python -m utool.util_inspect check_module_usage --pat=&quot;ibsfuncs.py&quot;</span>\n\n<span class=\"sd\">    then there are also convineience functions that need to be ordered at least</span>\n<span class=\"sd\">    within this file</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"k\">import</span> <span class=\"n\">absolute_import</span><span class=\"p\">,</span> <span class=\"n\">division</span><span class=\"p\">,</span> <span class=\"n\">print_function</span><span class=\"p\">,</span> <span class=\"n\">unicode_literals</span>\n<span class=\"kn\">import</span> <span class=\"nn\">six</span>\n<span class=\"kn\">import</span> <span class=\"nn\">types</span>\n<span class=\"kn\">import</span> <span class=\"nn\">functools</span>\n<span class=\"kn\">import</span> <span class=\"nn\">re</span>\n<span class=\"kn\">from</span> <span class=\"nn\">six.moves</span> <span class=\"k\">import</span> <span class=\"nb\">zip</span><span class=\"p\">,</span> <span class=\"nb\">range</span><span class=\"p\">,</span> <span class=\"nb\">map</span><span class=\"p\">,</span> <span class=\"n\">reduce</span>\n<span class=\"kn\">from</span> <span class=\"nn\">os.path</span> <span class=\"k\">import</span> <span class=\"n\">split</span><span class=\"p\">,</span> <span class=\"n\">join</span><span class=\"p\">,</span> <span class=\"n\">exists</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">vtool</span> <span class=\"k\">as</span> <span class=\"nn\">vt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n<span class=\"kn\">from</span> <span class=\"nn\">utool._internal.meta_util_six</span> <span class=\"k\">import</span> <span class=\"n\">get_funcname</span><span class=\"p\">,</span> <span class=\"n\">set_funcname</span>\n<span class=\"kn\">import</span> <span class=\"nn\">itertools</span> <span class=\"k\">as</span> <span class=\"nn\">it</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis</span> <span class=\"k\">import</span> <span class=\"n\">constants</span> <span class=\"k\">as</span> <span class=\"n\">const</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.control</span> <span class=\"k\">import</span> <span class=\"n\">accessor_decors</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.control</span> <span class=\"k\">import</span> <span class=\"n\">controller_inject</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis</span> <span class=\"k\">import</span> <span class=\"n\">annotmatch_funcs</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"kn\">from</span> <span class=\"nn\">skimage</span> <span class=\"k\">import</span> <span class=\"n\">io</span>\n<span class=\"kn\">import</span> <span class=\"nn\">xml.etree.ElementTree</span> <span class=\"k\">as</span> <span class=\"nn\">ET</span>\n\n<span class=\"c1\"># Inject utool functions</span>\n<span class=\"p\">(</span><span class=\"nb\">print</span><span class=\"p\">,</span> <span class=\"n\">rrr</span><span class=\"p\">,</span> <span class=\"n\">profile</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">inject2</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">,</span> <span class=\"s1\">&#39;[ibsfuncs]&#39;</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Must import class before injection</span>\n<span class=\"n\">CLASS_INJECT_KEY</span><span class=\"p\">,</span> <span class=\"n\">register_ibs_method</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"n\">controller_inject</span><span class=\"o\">.</span><span class=\"n\">make_ibs_register_decorator</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">))</span>\n\n\n<span class=\"n\">register_api</span>   <span class=\"o\">=</span> <span class=\"n\">controller_inject</span><span class=\"o\">.</span><span class=\"n\">get_ibeis_flask_api</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"postinject_func\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.postinject_func\">[docs]</a><span class=\"nd\">@ut</span><span class=\"o\">.</span><span class=\"n\">make_class_postinject_decorator</span><span class=\"p\">(</span><span class=\"n\">CLASS_INJECT_KEY</span><span class=\"p\">,</span> <span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">postinject_func</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (IBEISController):</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --test-postinject_func</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs.delete_empty_nids()  # a test run before this forgot to do this</span>\n<span class=\"sd\">        &gt;&gt;&gt; aids_list = ibs.get_name_aids(ibs.get_valid_nids())</span>\n<span class=\"sd\">        &gt;&gt;&gt; # indirectly test postinject_func</span>\n<span class=\"sd\">        &gt;&gt;&gt; thetas_list = ibs.get_unflat_annot_thetas(aids_list)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = str(thetas_list)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">        [[0.0, 0.0], [0.0, 0.0], [0.0], [0.0], [0.0], [0.0], [0.0]]</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\"># List of getters to ut.unflatten2</span>\n    <span class=\"n\">to_unflatten</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_uuids</span><span class=\"p\">,</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_uuids</span><span class=\"p\">,</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_name_texts</span><span class=\"p\">,</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_unixtime</span><span class=\"p\">,</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_bboxes</span><span class=\"p\">,</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_thetas</span><span class=\"p\">,</span>\n    <span class=\"p\">]</span>\n    <span class=\"k\">for</span> <span class=\"n\">flat_getter</span> <span class=\"ow\">in</span> <span class=\"n\">to_unflatten</span><span class=\"p\">:</span>\n        <span class=\"n\">unflat_getter</span> <span class=\"o\">=</span> <span class=\"n\">_make_unflat_getter_func</span><span class=\"p\">(</span><span class=\"n\">flat_getter</span><span class=\"p\">)</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">inject_func_as_method</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">unflat_getter</span><span class=\"p\">,</span>\n                                 <span class=\"n\">allow_override</span><span class=\"o\">=</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">allow_override</span><span class=\"p\">)</span>\n    <span class=\"c1\"># very hacky, but useful</span>\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">unflat_map</span> <span class=\"o\">=</span> <span class=\"n\">unflat_map</span></div>\n\n\n<div class=\"viewcode-block\" id=\"export_to_hotspotter\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.export_to_hotspotter\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">export_to_hotspotter</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">):</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.dbio</span> <span class=\"k\">import</span> <span class=\"n\">export_hsdb</span>\n    <span class=\"n\">export_hsdb</span><span class=\"o\">.</span><span class=\"n\">export_ibeis_to_hotspotter</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_image_time_statstr\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.get_image_time_statstr\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_image_time_statstr</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">gid_list</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">gid_list</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">gid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_gids</span><span class=\"p\">()</span>\n    <span class=\"n\">unixtime_list_</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_unixtime</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">utvalid_list</span>   <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">time</span> <span class=\"o\">!=</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"k\">for</span> <span class=\"n\">time</span> <span class=\"ow\">in</span> <span class=\"n\">unixtime_list_</span><span class=\"p\">]</span>\n    <span class=\"n\">unixtime_list</span>  <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">unixtime_list_</span><span class=\"p\">,</span> <span class=\"n\">utvalid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">unixtime_statstr</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_timestats_str</span><span class=\"p\">(</span><span class=\"n\">unixtime_list</span><span class=\"p\">,</span> <span class=\"n\">newlines</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">unixtime_statstr</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_image_annotation_bboxes\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.get_image_annotation_bboxes\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_image_annotation_bboxes</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">gid_list</span><span class=\"p\">):</span>\n    <span class=\"n\">aids_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_aids</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">bboxes_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_unflat_annotation_bboxes</span><span class=\"p\">(</span><span class=\"n\">aids_list</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">bboxes_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_image_annotation_thetas\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.get_image_annotation_thetas\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_image_annotation_thetas</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">gid_list</span><span class=\"p\">):</span>\n    <span class=\"n\">aids_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_aids</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">thetas_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_unflat_annotation_thetas</span><span class=\"p\">(</span><span class=\"n\">aids_list</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">thetas_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"filter_junk_annotations\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.filter_junk_annotations\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">filter_junk_annotations</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    remove junk annotations from a list</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (IBEISController):  ibeis controller object</span>\n<span class=\"sd\">        aid_list (int):  list of annotation ids</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        list: filtered_aid_list</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; aid_list = ibs.get_valid_aids()</span>\n<span class=\"sd\">        &gt;&gt;&gt; filtered_aid_list = filter_junk_annotations(ibs, aid_list)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = str(filtered_aid_list)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">isjunk_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_isjunk</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">filtered_aid_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">filterfalse_items</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">isjunk_list</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">filtered_aid_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"compute_all_chips\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.compute_all_chips\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">compute_all_chips</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; Executes lazy evaluation of all chips &quot;&quot;&quot;</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[ibs] compute_all_chips&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">aid_list</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">aid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_aids</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    <span class=\"n\">cid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">depc_annot</span><span class=\"o\">.</span><span class=\"n\">get_rowids</span><span class=\"p\">(</span><span class=\"s1\">&#39;chips&#39;</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">cid_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"ensure_annotation_data\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.ensure_annotation_data\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">ensure_annotation_data</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">chips</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">feats</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                           <span class=\"n\">featweights</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">featweights</span><span class=\"p\">:</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">depc_annot</span><span class=\"o\">.</span><span class=\"n\">get_rowids</span><span class=\"p\">(</span><span class=\"s1\">&#39;featweight&#39;</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">feats</span><span class=\"p\">:</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">depc_annot</span><span class=\"o\">.</span><span class=\"n\">get_rowids</span><span class=\"p\">(</span><span class=\"s1\">&#39;feat&#39;</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">chips</span><span class=\"p\">:</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">depc_annot</span><span class=\"o\">.</span><span class=\"n\">get_rowids</span><span class=\"p\">(</span><span class=\"s1\">&#39;chips&#39;</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"convert_empty_images_to_annotations\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.convert_empty_images_to_annotations\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">convert_empty_images_to_annotations</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; images without chips are given an ANNOTATION over the entire image &quot;&quot;&quot;</span>\n    <span class=\"n\">gid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_empty_gids</span><span class=\"p\">()</span>\n    <span class=\"n\">aid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">use_images_as_annotations</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">aid_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"add_trivial_annotations\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.add_trivial_annotations\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">add_trivial_annotations</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">use_images_as_annotations</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"use_images_as_annotations\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.use_images_as_annotations\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">use_images_as_annotations</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">gid_list</span><span class=\"p\">,</span> <span class=\"n\">name_list</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">nid_list</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                              <span class=\"n\">notes_list</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">adjust_percent</span><span class=\"o\">=</span><span class=\"mf\">0.0</span><span class=\"p\">,</span>\n                              <span class=\"n\">tags_list</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; Adds an annotation the size of the entire image to each image.</span>\n<span class=\"sd\">    adjust_percent - shrinks the ANNOTATION by percentage on each side</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">pct</span> <span class=\"o\">=</span> <span class=\"n\">adjust_percent</span>  <span class=\"c1\"># Alias</span>\n    <span class=\"n\">gsize_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_sizes</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Build bounding boxes as images size minus padding</span>\n    <span class=\"n\">bbox_list</span>  <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"nb\">int</span><span class=\"p\">(</span> <span class=\"mi\">0</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">gw</span> <span class=\"o\">*</span> <span class=\"n\">pct</span><span class=\"p\">)),</span>\n                   <span class=\"nb\">int</span><span class=\"p\">(</span> <span class=\"mi\">0</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">gh</span> <span class=\"o\">*</span> <span class=\"n\">pct</span><span class=\"p\">)),</span>\n                   <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">gw</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"n\">gw</span> <span class=\"o\">*</span> <span class=\"n\">pct</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">)),</span>\n                   <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">gh</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"n\">gh</span> <span class=\"o\">*</span> <span class=\"n\">pct</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">)))</span>\n                  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">gw</span><span class=\"p\">,</span> <span class=\"n\">gh</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"n\">gsize_list</span><span class=\"p\">]</span>\n    <span class=\"n\">theta_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">0.0</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">gsize_list</span><span class=\"p\">))]</span>\n    <span class=\"n\">aid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">add_annots</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">,</span> <span class=\"n\">bbox_list</span><span class=\"p\">,</span> <span class=\"n\">theta_list</span><span class=\"p\">,</span>\n                              <span class=\"n\">name_list</span><span class=\"o\">=</span><span class=\"n\">name_list</span><span class=\"p\">,</span> <span class=\"n\">nid_list</span><span class=\"o\">=</span><span class=\"n\">nid_list</span><span class=\"p\">,</span>\n                              <span class=\"n\">notes_list</span><span class=\"o\">=</span><span class=\"n\">notes_list</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">tags_list</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">append_annot_case_tags</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">tags_list</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">aid_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_annot_been_adjusted\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.get_annot_been_adjusted\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_annot_been_adjusted</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Returns if a bounding box has been adjusted from defaults set in</span>\n<span class=\"sd\">    use_images_as_annotations Very hacky very heurstic.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">bbox_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_bboxes</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">ori_list</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_thetas</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">))</span>\n    <span class=\"n\">size_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_sizes</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_gids</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">))</span>\n\n    <span class=\"n\">been_ori_adjusted</span> <span class=\"o\">=</span> <span class=\"n\">ori_list</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span>\n\n    <span class=\"n\">adjusted_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">(</span><span class=\"n\">bbox</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">/</span> <span class=\"n\">gw</span><span class=\"p\">,</span>\n         <span class=\"n\">bbox</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">/</span> <span class=\"n\">gh</span><span class=\"p\">,</span>\n         <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"n\">bbox</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">/</span> <span class=\"n\">gw</span><span class=\"p\">))</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n         <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"n\">bbox</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">/</span> <span class=\"n\">gh</span><span class=\"p\">))</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">,)</span>\n        <span class=\"k\">for</span> <span class=\"n\">bbox</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">gw</span><span class=\"p\">,</span> <span class=\"n\">gh</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">bbox_list</span><span class=\"p\">,</span> <span class=\"n\">size_list</span><span class=\"p\">)</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"c1\"># Has the bounding box been moved past the default value?</span>\n    <span class=\"n\">been_bbox_adjusted</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span>\n        <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">abs</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">iprod</span><span class=\"p\">(</span><span class=\"n\">pcts</span><span class=\"p\">,</span> <span class=\"n\">pcts</span><span class=\"p\">))),</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">()</span> <span class=\"o\">&gt;</span> <span class=\"mf\">1e-2</span>\n        <span class=\"k\">for</span> <span class=\"n\">pcts</span> <span class=\"ow\">in</span> <span class=\"n\">adjusted_list</span>\n    <span class=\"p\">])</span>\n\n    <span class=\"n\">been_adjusted</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">logical_or</span><span class=\"p\">(</span><span class=\"n\">been_ori_adjusted</span><span class=\"p\">,</span> <span class=\"n\">been_bbox_adjusted</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">been_adjusted</span></div>\n\n\n<div class=\"viewcode-block\" id=\"assert_valid_species_texts\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.assert_valid_species_texts\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">assert_valid_species_texts</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">species_list</span><span class=\"p\">,</span> <span class=\"n\">iswarning</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">NO_ASSERTS</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">valid_species</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_all_species_texts</span><span class=\"p\">()</span>\n        <span class=\"n\">isvalid_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"n\">species</span> <span class=\"ow\">in</span> <span class=\"n\">valid_species</span>  <span class=\"c1\"># or species == const.UNKNOWN</span>\n            <span class=\"k\">for</span> <span class=\"n\">species</span> <span class=\"ow\">in</span> <span class=\"n\">species_list</span>\n        <span class=\"p\">]</span>\n        <span class=\"k\">assert</span> <span class=\"nb\">all</span><span class=\"p\">(</span><span class=\"n\">isvalid_list</span><span class=\"p\">),</span> <span class=\"s1\">&#39;invalid species found in </span><span class=\"si\">%r</span><span class=\"s1\">: </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span>\n            <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_caller_name</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)),</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span>\n                <span class=\"n\">species_list</span><span class=\"p\">,</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">not_list</span><span class=\"p\">(</span><span class=\"n\">isvalid_list</span><span class=\"p\">)),)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">AssertionError</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">printex</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">,</span> <span class=\"n\">iswarning</span><span class=\"o\">=</span><span class=\"n\">iswarning</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">iswarning</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span></div>\n\n\n<div class=\"viewcode-block\" id=\"assert_singleton_relationship\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.assert_singleton_relationship\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">assert_singleton_relationship</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">alrids_list</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">NO_ASSERTS</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">assert</span> <span class=\"nb\">all</span><span class=\"p\">([</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">alrids</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"k\">for</span> <span class=\"n\">alrids</span> <span class=\"ow\">in</span> <span class=\"n\">alrids_list</span><span class=\"p\">]),</span> <span class=\"p\">(</span>\n            <span class=\"s1\">&#39;must only have one relationship of a type&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">AssertionError</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n        <span class=\"n\">parent_locals</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_parent_frame</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">f_locals</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">printex</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">,</span> <span class=\"s1\">&#39;parent_locals=&#39;</span> <span class=\"o\">+</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr2</span><span class=\"p\">(</span><span class=\"n\">parent_locals</span><span class=\"p\">),</span>\n                   <span class=\"n\">key_list</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;alrids_list&#39;</span><span class=\"p\">,</span> <span class=\"p\">])</span>\n        <span class=\"k\">raise</span></div>\n\n\n<div class=\"viewcode-block\" id=\"assert_valid_gids\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.assert_valid_gids\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">assert_valid_gids</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">gid_list</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">veryverbose</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">isinvalid_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">gid</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"k\">for</span> <span class=\"n\">gid</span> <span class=\"ow\">in</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_gid</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)]</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"nb\">any</span><span class=\"p\">(</span><span class=\"n\">isinvalid_list</span><span class=\"p\">),</span> <span class=\"s1\">&#39;invalid gids: </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span>\n            <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">,</span> <span class=\"n\">isinvalid_list</span><span class=\"p\">),)</span>\n        <span class=\"n\">isinvalid_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">gid</span><span class=\"p\">,</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">VALID_INT_TYPES</span><span class=\"p\">)</span>\n                          <span class=\"k\">for</span> <span class=\"n\">gid</span> <span class=\"ow\">in</span> <span class=\"n\">gid_list</span><span class=\"p\">]</span>\n        <span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"nb\">any</span><span class=\"p\">(</span><span class=\"n\">isinvalid_list</span><span class=\"p\">),</span> <span class=\"s1\">&#39;invalidly typed gids: </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span>\n            <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">,</span> <span class=\"n\">isinvalid_list</span><span class=\"p\">),)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">AssertionError</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;dbname = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_dbname</span><span class=\"p\">()))</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">printex</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">)</span>\n        <span class=\"k\">raise</span>\n    <span class=\"k\">if</span> <span class=\"n\">veryverbose</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;passed assert_valid_gids&#39;</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"assert_valid_aids\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.assert_valid_aids\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">assert_valid_aids</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">veryverbose</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"n\">auuid_list</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (IBEISController):  ibeis controller object</span>\n<span class=\"sd\">        aid_list (int):  list of annotation ids</span>\n<span class=\"sd\">        verbose (bool):  verbosity flag(default = False)</span>\n<span class=\"sd\">        veryverbose (bool): (default = False)</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --test-assert_valid_aids</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(defaultdb=&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; aid_list = ibs.get_valid_aids()</span>\n<span class=\"sd\">        &gt;&gt;&gt; verbose = False</span>\n<span class=\"sd\">        &gt;&gt;&gt; veryverbose = False</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&#39;Asserting multiple&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = assert_valid_aids(ibs, aid_list, verbose, veryverbose)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&#39;Asserting single&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = assert_valid_aids(ibs, aid_list[0:1], verbose, veryverbose)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&#39;Asserting multiple incorrect&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; auuid_list = ibs.get_annot_uuids(aid_list) + [None]</span>\n<span class=\"sd\">        &gt;&gt;&gt; try:</span>\n<span class=\"sd\">        &gt;&gt;&gt;    result = assert_valid_aids(ibs, aid_list + [0], verbose, veryverbose, auuid_list=auuid_list)</span>\n<span class=\"sd\">        &gt;&gt;&gt; except AssertionError:</span>\n<span class=\"sd\">        &gt;&gt;&gt;    print(&#39;Correctly got assertion&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; else:</span>\n<span class=\"sd\">        &gt;&gt;&gt;    assert False, &#39;should have failed&#39;</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&#39;Asserting single incorrect&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; try:</span>\n<span class=\"sd\">        &gt;&gt;&gt;    result = assert_valid_aids(ibs, [0], verbose, veryverbose)</span>\n<span class=\"sd\">        &gt;&gt;&gt; except AssertionError:</span>\n<span class=\"sd\">        &gt;&gt;&gt;    print(&#39;Correctly got assertion&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; else:</span>\n<span class=\"sd\">        &gt;&gt;&gt;    assert False, &#39;should have failed&#39;</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\">#if ut.NO_ASSERTS and not force:</span>\n    <span class=\"c1\">#    return</span>\n    <span class=\"c1\">#valid_aids = set(ibs.get_valid_aids())</span>\n    <span class=\"c1\">#invalid_aids = [aid for aid in aid_list if aid not in valid_aids]</span>\n    <span class=\"c1\">#isinvalid_list = [aid not in valid_aids for aid in aid_list]</span>\n    <span class=\"n\">isinvalid_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">aid</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"k\">for</span> <span class=\"n\">aid</span> <span class=\"ow\">in</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_aid</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)]</span>\n    <span class=\"c1\">#isinvalid_list = [aid not in valid_aids for aid in aid_list]</span>\n    <span class=\"n\">invalid_aids</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">isinvalid_list</span><span class=\"p\">)</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"nb\">any</span><span class=\"p\">(</span><span class=\"n\">isinvalid_list</span><span class=\"p\">),</span> <span class=\"s1\">&#39;</span><span class=\"si\">%d</span><span class=\"s1\">/</span><span class=\"si\">%d</span><span class=\"s1\"> invalid aids: </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span>\n            <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">isinvalid_list</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">),</span> <span class=\"n\">invalid_aids</span><span class=\"p\">,)</span>\n        <span class=\"n\">isinvalid_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"ow\">not</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">is_int</span><span class=\"p\">(</span><span class=\"n\">aid</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">aid</span> <span class=\"ow\">in</span> <span class=\"n\">aid_list</span><span class=\"p\">]</span>\n        <span class=\"n\">invalid_aids</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">isinvalid_list</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"nb\">any</span><span class=\"p\">(</span><span class=\"n\">isinvalid_list</span><span class=\"p\">),</span> <span class=\"s1\">&#39;</span><span class=\"si\">%d</span><span class=\"s1\">/</span><span class=\"si\">%d</span><span class=\"s1\"> invalidly typed aids: </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span>\n            <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">isinvalid_list</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">),</span> <span class=\"n\">invalid_aids</span><span class=\"p\">,)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">AssertionError</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">auuid_list</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">auuid_list</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">):</span>\n            <span class=\"n\">invalid_auuids</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">auuid_list</span><span class=\"p\">,</span> <span class=\"n\">isinvalid_list</span><span class=\"p\">)</span>  <span class=\"c1\"># NOQA</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">invalid_auuids</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;not-available&#39;</span>\n        <span class=\"n\">dbname</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_dbname</span><span class=\"p\">()</span>  <span class=\"c1\"># NOQA</span>\n        <span class=\"n\">locals_</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">dbname</span><span class=\"o\">=</span><span class=\"n\">dbname</span><span class=\"p\">,</span> <span class=\"n\">invalid_auuids</span><span class=\"o\">=</span><span class=\"n\">invalid_auuids</span><span class=\"p\">,</span> <span class=\"n\">invalid_aids</span><span class=\"o\">=</span><span class=\"n\">invalid_aids</span><span class=\"p\">)</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">printex</span><span class=\"p\">(</span>\n            <span class=\"n\">ex</span><span class=\"p\">,</span> <span class=\"s1\">&#39;assert_valid_aids: &#39;</span> <span class=\"o\">+</span> <span class=\"n\">msg</span><span class=\"p\">,</span>\n            <span class=\"n\">locals_</span><span class=\"o\">=</span><span class=\"n\">locals_</span><span class=\"p\">,</span>\n            <span class=\"n\">keys</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;invalid_aids&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;invalid_auuids&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;dbname&#39;</span><span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">raise</span>\n    <span class=\"k\">if</span> <span class=\"n\">veryverbose</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;passed assert_valid_aids&#39;</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_missing_gids\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.get_missing_gids\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_missing_gids</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">gid_list</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Finds gids with broken links to the original data.</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (IBEISController):  ibeis controller object</span>\n<span class=\"sd\">        gid_list (list): (default = None)</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --exec-get_missing_gids --db GZ_Master1</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(defaultdb=&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; #ibs = ibeis.opendb(&#39;GZ_Master1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; gid_list = ibs.get_valid_gids()</span>\n<span class=\"sd\">        &gt;&gt;&gt; bad_gids = ibs.get_missing_gids(gid_list)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&#39;#bad_gids = %r / %r&#39; % (len(bad_gids), len(gid_list)))</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">gid_list</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">gid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_gids</span><span class=\"p\">()</span>\n    <span class=\"n\">gpath_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_paths</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">exists_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"n\">exists</span><span class=\"p\">,</span> <span class=\"n\">gpath_list</span><span class=\"p\">))</span>\n    <span class=\"n\">bad_gids</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">,</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">not_list</span><span class=\"p\">(</span><span class=\"n\">exists_list</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">bad_gids</span></div>\n\n\n<div class=\"viewcode-block\" id=\"assert_images_exist\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.assert_images_exist\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">assert_images_exist</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">gid_list</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">gid_list</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">gid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_gids</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;checking images exist&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">bad_gids</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_missing_gids</span><span class=\"p\">()</span>\n    <span class=\"n\">num_bad_gids</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">bad_gids</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">verbose</span><span class=\"p\">:</span>\n        <span class=\"n\">bad_gpaths</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_paths</span><span class=\"p\">(</span><span class=\"n\">bad_gids</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Bad Gpaths:&#39;</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">truncate_str</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr2</span><span class=\"p\">(</span><span class=\"n\">bad_gpaths</span><span class=\"p\">),</span> <span class=\"n\">maxlen</span><span class=\"o\">=</span><span class=\"mi\">500</span><span class=\"p\">))</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Bad GIDs:&#39;</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">bad_gids</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"si\">%d</span><span class=\"s1\"> images dont exist&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">num_bad_gids</span><span class=\"p\">,))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[check] checked </span><span class=\"si\">%d</span><span class=\"s1\"> images exist&#39;</span> <span class=\"o\">%</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">num_bad_gids</span></div>\n\n\n<div class=\"viewcode-block\" id=\"assert_images_are_unique\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.assert_images_are_unique\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">assert_images_are_unique</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">gid_list</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">gid_list</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">gid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_gids</span><span class=\"p\">()</span>\n\n    <span class=\"n\">gpath_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_paths</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">hash_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_file_hash</span><span class=\"p\">(</span><span class=\"n\">gpath</span><span class=\"p\">,</span> <span class=\"n\">hexdigest</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">gpath</span> <span class=\"ow\">in</span> <span class=\"n\">gpath_list</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">hash_list</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">hash_list</span><span class=\"p\">)):</span>\n        <span class=\"n\">hash_histogram</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">for</span> <span class=\"n\">gid</span><span class=\"p\">,</span> <span class=\"n\">gpath</span><span class=\"p\">,</span> <span class=\"n\">hash_</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">,</span> <span class=\"n\">gpath_list</span><span class=\"p\">,</span> <span class=\"n\">hash_list</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">hash_</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">hash_histogram</span><span class=\"p\">:</span>\n                <span class=\"n\">hash_histogram</span><span class=\"p\">[</span><span class=\"n\">hash_</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"n\">vals</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">gid</span><span class=\"p\">,</span> <span class=\"n\">gpath</span><span class=\"p\">)</span>\n            <span class=\"n\">hash_histogram</span><span class=\"p\">[</span><span class=\"n\">hash_</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">vals</span><span class=\"p\">)</span>\n\n        <span class=\"n\">divergent</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">counter</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">global_delete_gid_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">gid_gpath_list_</span> <span class=\"ow\">in</span> <span class=\"n\">hash_histogram</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">gid_gpath_list_</span><span class=\"p\">)</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n                <span class=\"n\">gid_list</span>   <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">_</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"n\">gid_gpath_list_</span><span class=\"p\">]</span>\n                <span class=\"n\">gpath_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">_</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"n\">gid_gpath_list_</span><span class=\"p\">]</span>\n\n                <span class=\"n\">aids_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_aids</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n                <span class=\"n\">aids_len_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">,</span>  <span class=\"n\">aids_list</span><span class=\"p\">))</span>\n                <span class=\"n\">max_aids</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">aids_len_list</span><span class=\"p\">)</span>\n\n                <span class=\"n\">filtered_gid_list</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">([</span>\n                    <span class=\"n\">gid</span>\n                    <span class=\"k\">for</span> <span class=\"n\">gid</span><span class=\"p\">,</span> <span class=\"n\">aids_len</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">,</span> <span class=\"n\">aids_len_list</span><span class=\"p\">)</span>\n                    <span class=\"k\">if</span> <span class=\"n\">aids_len</span> <span class=\"o\">==</span> <span class=\"n\">max_aids</span>\n                <span class=\"p\">])</span>\n\n                <span class=\"n\">survive_gid</span> <span class=\"o\">=</span> <span class=\"n\">filtered_gid_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                <span class=\"n\">delete_gid_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n                <span class=\"n\">delete_gid_list</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">survive_gid</span><span class=\"p\">)</span>\n                <span class=\"k\">assert</span> <span class=\"n\">survive_gid</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">delete_gid_list</span>\n\n                <span class=\"n\">global_delete_gid_list</span> <span class=\"o\">+=</span> <span class=\"n\">delete_gid_list</span>\n                <span class=\"n\">counter</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n                <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">aids_len_list</span><span class=\"p\">))</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                    <span class=\"n\">divergent</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                    <span class=\"c1\"># print(&#39;FOUND DIVERGENT&#39;)</span>\n\n                <span class=\"c1\"># print(gid_list)</span>\n                <span class=\"c1\"># print(aids_list)</span>\n                <span class=\"c1\"># print(aids_len_list)</span>\n                <span class=\"c1\"># print(max_aids)</span>\n                <span class=\"c1\"># print(filtered_gid_list)</span>\n                <span class=\"c1\"># print(survive_gid)</span>\n                <span class=\"c1\"># print(delete_gid_list)</span>\n                <span class=\"c1\"># print(&#39;-&#39; * 40)</span>\n\n        <span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">hash_histogram</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Found [</span><span class=\"si\">%d</span><span class=\"s1\"> / </span><span class=\"si\">%d</span><span class=\"s1\"> / </span><span class=\"si\">%d</span><span class=\"s1\">] images that have duplicates...&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">divergent</span><span class=\"p\">,</span> <span class=\"n\">counter</span><span class=\"p\">,</span> <span class=\"n\">total</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">delete_images</span><span class=\"p\">(</span><span class=\"n\">global_delete_gid_list</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Deleted </span><span class=\"si\">%d</span><span class=\"s1\"> images.&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">global_delete_gid_list</span><span class=\"p\">),</span> <span class=\"p\">))</span></div>\n\n\n<div class=\"viewcode-block\" id=\"assert_valid_names\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.assert_valid_names\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">assert_valid_names</span><span class=\"p\">(</span><span class=\"n\">name_list</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; Asserts that user specified names do not conflict with the standard unknown name &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">NO_ASSERTS</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span>\n    <span class=\"k\">def</span> <span class=\"nf\">isconflict</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">)</span>\n    <span class=\"n\">valid_namecheck</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"ow\">not</span> <span class=\"n\">isconflict</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">UNKNOWN</span><span class=\"p\">)</span>\n                       <span class=\"k\">for</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">name_list</span><span class=\"p\">]</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">all</span><span class=\"p\">(</span><span class=\"n\">valid_namecheck</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">&#39;A name conflicts with UKNONWN Name. -- &#39;</span>\n                                  <span class=\"s1\">&#39;cannot start a name with four underscores&#39;</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"assert_lblannot_rowids_are_type\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.assert_lblannot_rowids_are_type\">[docs]</a><span class=\"nd\">@ut</span><span class=\"o\">.</span><span class=\"n\">on_exception_report_input</span>\n<span class=\"k\">def</span> <span class=\"nf\">assert_lblannot_rowids_are_type</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">lblannot_rowid_list</span><span class=\"p\">,</span>\n                                    <span class=\"n\">valid_lbltype_rowid</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">NO_ASSERTS</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span>\n    <span class=\"n\">lbltype_rowid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_lblannot_lbltypes_rowids</span><span class=\"p\">(</span><span class=\"n\">lblannot_rowid_list</span><span class=\"p\">)</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"c1\"># HACK: the unknown_lblannot_rowid will have a None type</span>\n        <span class=\"c1\"># the unknown lblannot_rowid should be handled more gracefully</span>\n        <span class=\"c1\"># this should just check the first condition (get rid of the or)</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">assert_same_len</span><span class=\"p\">(</span><span class=\"n\">lbltype_rowid_list</span><span class=\"p\">,</span> <span class=\"n\">lbltype_rowid_list</span><span class=\"p\">)</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">assert_scalar_list</span><span class=\"p\">(</span><span class=\"n\">lblannot_rowid_list</span><span class=\"p\">)</span>\n        <span class=\"n\">validtype_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"p\">(</span><span class=\"n\">lbltype_rowid</span> <span class=\"o\">==</span> <span class=\"n\">valid_lbltype_rowid</span><span class=\"p\">)</span> <span class=\"ow\">or</span>\n            <span class=\"p\">(</span><span class=\"n\">lbltype_rowid</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span>\n             <span class=\"n\">lblannot_rowid</span> <span class=\"o\">==</span> <span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">UNKNOWN_LBLANNOT_ROWID</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">lbltype_rowid</span><span class=\"p\">,</span> <span class=\"n\">lblannot_rowid</span> <span class=\"ow\">in</span>\n            <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">lbltype_rowid_list</span><span class=\"p\">,</span> <span class=\"n\">lblannot_rowid_list</span><span class=\"p\">)</span>\n        <span class=\"p\">]</span>\n        <span class=\"k\">assert</span> <span class=\"nb\">all</span><span class=\"p\">(</span><span class=\"n\">validtype_list</span><span class=\"p\">),</span> <span class=\"s1\">&#39;not all types match valid type&#39;</span>\n    <span class=\"k\">except</span> <span class=\"ne\">AssertionError</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n        <span class=\"n\">tup_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">(</span>\n            <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">lbltype_rowid_list</span><span class=\"p\">,</span> <span class=\"n\">lblannot_rowid_list</span><span class=\"p\">))))</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[!!!] (lbltype_rowid, lblannot_rowid) = : &#39;</span> <span class=\"o\">+</span>\n              <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">indentjoin</span><span class=\"p\">(</span><span class=\"n\">tup_list</span><span class=\"p\">))</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[!!!] valid_lbltype_rowid: </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span>\n              <span class=\"p\">(</span><span class=\"n\">valid_lbltype_rowid</span><span class=\"p\">,))</span>\n\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">printex</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">,</span> <span class=\"s1\">&#39;not all types match valid type&#39;</span><span class=\"p\">,</span>\n                      <span class=\"n\">keys</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;valid_lbltype_rowid&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;lblannot_rowid_list&#39;</span><span class=\"p\">])</span>\n        <span class=\"k\">raise</span></div>\n\n\n<div class=\"viewcode-block\" id=\"check_for_unregistered_images\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.check_for_unregistered_images\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">check_for_unregistered_images</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">):</span>\n    <span class=\"n\">images</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">images</span><span class=\"p\">()</span>\n    <span class=\"c1\"># Check if any images in the image directory are unregistered</span>\n    <span class=\"n\">gpath_disk</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ls</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">imgdir</span><span class=\"p\">))</span>\n    <span class=\"n\">gpath_registered</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">images</span><span class=\"o\">.</span><span class=\"n\">paths</span><span class=\"p\">)</span>\n    <span class=\"n\">overlaps</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">set_overlaps</span><span class=\"p\">(</span><span class=\"n\">gpath_disk</span><span class=\"p\">,</span> <span class=\"n\">gpath_registered</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ondisk&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;reg&#39;</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;overlaps&#39;</span> <span class=\"o\">+</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr3</span><span class=\"p\">(</span><span class=\"n\">overlaps</span><span class=\"p\">))</span>\n    <span class=\"n\">gpath_unregistered</span> <span class=\"o\">=</span> <span class=\"n\">gpath_disk</span> <span class=\"o\">-</span> <span class=\"n\">gpath_registered</span>\n    <span class=\"k\">return</span> <span class=\"n\">overlaps</span><span class=\"p\">,</span> <span class=\"n\">gpath_unregistered</span></div>\n\n\n<div class=\"viewcode-block\" id=\"delete_unregistered_images\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.delete_unregistered_images\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">delete_unregistered_images</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n    <span class=\"n\">dst_fpath</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">trashdir</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ensuredir</span><span class=\"p\">(</span><span class=\"n\">dst_fpath</span><span class=\"p\">)</span>\n    <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">gpath_unregistered</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">check_for_unregistered_images</span><span class=\"p\">()</span>\n    <span class=\"n\">gname_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">gpath</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">gpath</span> <span class=\"ow\">in</span> <span class=\"n\">gpath_unregistered</span><span class=\"p\">]</span>\n    <span class=\"n\">dst_fpath_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">dst_fpath</span><span class=\"p\">,</span> <span class=\"n\">gname</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">gname</span> <span class=\"ow\">in</span> <span class=\"n\">gname_list</span><span class=\"p\">]</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">copy_files_to</span><span class=\"p\">(</span><span class=\"n\">gpath_unregistered</span><span class=\"p\">,</span> <span class=\"n\">dst_fpath_list</span><span class=\"o\">=</span><span class=\"n\">dst_fpath_list</span><span class=\"p\">)</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">remove_file_list</span><span class=\"p\">(</span><span class=\"n\">gpath_unregistered</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"check_image_consistency\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.check_image_consistency\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">check_image_consistency</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">gid_list</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (IBEISController):  ibeis controller object</span>\n<span class=\"sd\">        gid_list (list): (default = None)</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --exec-check_image_consistency  --db=GZ_Master1</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(defaultdb=&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; gid_list = None</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = check_image_consistency(ibs, gid_list)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\"># TODO: more consistency checks</span>\n    <span class=\"k\">if</span> <span class=\"n\">gid_list</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">gid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_gids</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;check image consistency. len(gid_list)=</span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">))</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">debug_duplicate_items</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n    <span class=\"n\">assert_images_exist</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">gid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">image_uuid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_uuids</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">debug_duplicate_items</span><span class=\"p\">(</span><span class=\"n\">image_uuid_list</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"mi\">0</span></div>\n    <span class=\"c1\">#check_image_uuid_consistency(ibs, gid_list)</span>\n\n\n<div class=\"viewcode-block\" id=\"check_image_uuid_consistency\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.check_image_uuid_consistency\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">check_image_uuid_consistency</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">gid_list</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Checks to make sure image uuids are computed detemenistically</span>\n<span class=\"sd\">    by recomputing all guuids and checking that they are equal to</span>\n<span class=\"sd\">    what is already there.</span>\n\n<span class=\"sd\">    VERY SLOW</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --test-check_image_uuid_consistency --db=PZ_Master0</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --test-check_image_uuid_consistency --db=GZ_Master1</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --test-check_image_uuid_consistency</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --test-check_image_uuid_consistency --db lynx</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # SCRIPT</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; import utool as ut</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(defaultdb=&#39;PZ_MTEST&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; images = ibs.images()</span>\n<span class=\"sd\">        &gt;&gt;&gt; # Check only very the largest files</span>\n<span class=\"sd\">        &gt;&gt;&gt; #bytes_list_ = [</span>\n<span class=\"sd\">        &gt;&gt;&gt; #    ut.get_file_nBytes(path)</span>\n<span class=\"sd\">        &gt;&gt;&gt; #    for path in ut.ProgIter(images.paths, lbl=&#39;reading nbytes&#39;)]</span>\n<span class=\"sd\">        &gt;&gt;&gt; #sortx = ut.list_argsort(bytes_list_, reverse=True)[0:10]</span>\n<span class=\"sd\">        &gt;&gt;&gt; #images = images.take(sortx)</span>\n<span class=\"sd\">        &gt;&gt;&gt; gid_list = list(images)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibeis.other.ibsfuncs.check_image_uuid_consistency(ibs, gid_list)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;checking image uuid consistency&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">gid_list</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">gid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_gids</span><span class=\"p\">()</span>\n    <span class=\"n\">uuid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_uuids</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">gpath_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_paths</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">uuid_list_</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">compute_image_uuids</span><span class=\"p\">(</span><span class=\"n\">gpath_list</span><span class=\"p\">)</span>\n\n    <span class=\"n\">bad_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">gid</span><span class=\"p\">,</span> <span class=\"n\">uuid</span><span class=\"p\">,</span> <span class=\"n\">uuid_</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">,</span> <span class=\"n\">uuid_list</span><span class=\"p\">,</span> <span class=\"n\">uuid_list_</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">uuid</span> <span class=\"o\">!=</span> <span class=\"n\">uuid_</span><span class=\"p\">:</span>\n            <span class=\"n\">bad_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">gid</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">bad_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"check_image_loadable\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.check_image_loadable\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">check_image_loadable</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">gid_list</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;checking image loadable&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">gid_list</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">gid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_gids</span><span class=\"p\">()</span>\n\n    <span class=\"n\">gpath_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_paths</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">arg_iter</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span>\n        <span class=\"n\">gpath_list</span><span class=\"p\">,</span>\n    <span class=\"p\">))</span>\n    <span class=\"n\">flag_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">util_parallel</span><span class=\"o\">.</span><span class=\"n\">generate2</span><span class=\"p\">(</span><span class=\"n\">check_image_loadable_worker</span><span class=\"p\">,</span> <span class=\"n\">arg_iter</span><span class=\"p\">)</span>\n    <span class=\"n\">flag_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"ow\">not</span> <span class=\"n\">flag</span> <span class=\"k\">for</span> <span class=\"n\">flag</span> <span class=\"ow\">in</span> <span class=\"n\">flag_list</span><span class=\"p\">]</span>\n\n    <span class=\"n\">bad_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">,</span> <span class=\"n\">flag_list</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">bad_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"check_image_loadable_worker\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.check_image_loadable_worker\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">check_image_loadable_worker</span><span class=\"p\">(</span><span class=\"n\">gpath</span><span class=\"p\">):</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">imread</span><span class=\"p\">(</span><span class=\"n\">gpath</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n    <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n\n<div class=\"viewcode-block\" id=\"check_annot_consistency\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.check_annot_consistency\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">check_annot_consistency</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs      (IBEISController):</span>\n<span class=\"sd\">        aid_list (list):</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --test-check_annot_consistency</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; aid_list = ibs.get_valid_aids()</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = check_annot_consistency(ibs, aid_list)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\"># TODO: more consistency checks</span>\n    <span class=\"k\">if</span> <span class=\"n\">aid_list</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">aid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_aids</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;check annot consistency. len(aid_list)=</span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">))</span>\n    <span class=\"n\">annot_gid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_gids</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">num_None_annot_gids</span> <span class=\"o\">=</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flag_None_items</span><span class=\"p\">(</span><span class=\"n\">annot_gid_list</span><span class=\"p\">))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;num_None_annot_gids = </span><span class=\"si\">%r</span><span class=\"s1\"> &#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">num_None_annot_gids</span><span class=\"p\">,))</span>\n    <span class=\"k\">assert</span> <span class=\"n\">num_None_annot_gids</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n    <span class=\"c1\">#print(ut.repr2(dict(ut.debug_duplicate_items(annot_gid_list))))</span>\n    <span class=\"n\">assert_images_exist</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">annot_gid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">unique_gids</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">annot_gid_list</span><span class=\"p\">))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;num_unique_images=</span><span class=\"si\">%r</span><span class=\"s1\"> / </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">unique_gids</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">annot_gid_list</span><span class=\"p\">)))</span>\n    <span class=\"n\">cfpath_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_chip_fpath</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">ensure</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">valid_chip_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kc\">None</span> <span class=\"k\">if</span> <span class=\"n\">cfpath</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"k\">else</span> <span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">cfpath</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">cfpath</span> <span class=\"ow\">in</span> <span class=\"n\">cfpath_list</span><span class=\"p\">]</span>\n    <span class=\"n\">invalid_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">flag</span> <span class=\"ow\">is</span> <span class=\"kc\">False</span> <span class=\"k\">for</span> <span class=\"n\">flag</span> <span class=\"ow\">in</span> <span class=\"n\">valid_chip_list</span><span class=\"p\">]</span>\n    <span class=\"n\">invalid_aids</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">invalid_list</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">invalid_aids</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;found </span><span class=\"si\">%d</span><span class=\"s1\"> inconsistent chips attempting to fix&#39;</span> <span class=\"o\">%</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">invalid_aids</span><span class=\"p\">))</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">delete_annot_chips</span><span class=\"p\">(</span><span class=\"n\">invalid_aids</span><span class=\"p\">)</span>\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">check_chip_existence</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"o\">=</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">visual_uuid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_visual_uuids</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">exemplar_flag</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_exemplar_flags</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">is_unknown</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">is_aid_unknown</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Exemplars should all be known</span>\n    <span class=\"n\">unknown_exemplar_flags</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">exemplar_flag</span><span class=\"p\">,</span> <span class=\"n\">is_unknown</span><span class=\"p\">)</span>\n    <span class=\"n\">is_error</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"ow\">not</span> <span class=\"n\">flag</span> <span class=\"k\">for</span> <span class=\"n\">flag</span> <span class=\"ow\">in</span> <span class=\"n\">unknown_exemplar_flags</span><span class=\"p\">]</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">all</span><span class=\"p\">(</span><span class=\"n\">is_error</span><span class=\"p\">),</span> <span class=\"s1\">&#39;Unknown annotations are set as exemplars&#39;</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">debug_duplicate_items</span><span class=\"p\">(</span><span class=\"n\">visual_uuid_list</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"check_annot_corrupt_uuids\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.check_annot_corrupt_uuids\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">check_annot_corrupt_uuids</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    # del dtool.__SQLITE__.converters[&#39;UUID&#39;]</span>\n<span class=\"sd\">    # import uuid</span>\n<span class=\"sd\">    # del dtool.__SQLITE__.adapters[(uuid.UUID, dtool.__SQLITE__.PrepareProtocol)]</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(&#39;PZ_MTEST&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; aid_list = ibs.get_valid_aids()</span>\n<span class=\"sd\">        &gt;&gt;&gt; check_annot_corrupt_uuids(ibs, aid_list)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">aid_list</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">aid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_aids</span><span class=\"p\">()</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_uuids</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">printex</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">)</span>\n        <span class=\"n\">failed_aids</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">aid</span> <span class=\"ow\">in</span> <span class=\"n\">aid_list</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_uuids</span><span class=\"p\">(</span><span class=\"n\">aid</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n                <span class=\"n\">failed_aids</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">aid</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;failed_aids = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">failed_aids</span><span class=\"p\">,))</span>\n        <span class=\"k\">return</span> <span class=\"n\">failed_aids</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;uuids do not seem to be corrupt&#39;</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"check_name_consistency\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.check_name_consistency\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">check_name_consistency</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">nid_list</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (IBEISController):  ibeis controller object</span>\n<span class=\"sd\">        nid_list (list):</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --test-check_name_consistency</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; nid_list = ibs._get_all_known_nids()</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = check_name_consistency(ibs, nid_list)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\">#aids_list = ibs.get_name_aids(nid_list)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;check name consistency. len(nid_list)=</span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">nid_list</span><span class=\"p\">))</span>\n    <span class=\"n\">aids_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_name_aids</span><span class=\"p\">(</span><span class=\"n\">nid_list</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Checking that all annotations of a name have the same species&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">species_rowids_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">unflat_map</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_species_rowids</span><span class=\"p\">,</span> <span class=\"n\">aids_list</span><span class=\"p\">)</span>\n    <span class=\"n\">error_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"n\">sids</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">aids_list</span><span class=\"p\">,</span> <span class=\"n\">species_rowids_list</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">allsame</span><span class=\"p\">(</span><span class=\"n\">sids</span><span class=\"p\">):</span>\n            <span class=\"n\">error_msg</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;aids=</span><span class=\"si\">%r</span><span class=\"s1\"> have the same name, but belong to multiple species=</span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span>\n                <span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_species_texts</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">unique_ordered</span><span class=\"p\">(</span><span class=\"n\">sids</span><span class=\"p\">)))</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">error_msg</span><span class=\"p\">)</span>\n            <span class=\"n\">error_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">error_msg</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">error_list</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">AssertionError</span><span class=\"p\">(</span><span class=\"s1\">&#39;A total of </span><span class=\"si\">%d</span><span class=\"s1\"> names failed check_name_consistency&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span>\n            <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">error_list</span><span class=\"p\">)))</span></div>\n\n\n<div class=\"viewcode-block\" id=\"check_name_mapping_consistency\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.check_name_mapping_consistency\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">check_name_mapping_consistency</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">nx2_aids</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; checks that all the aids grouped in a name ahave the same name &quot;&quot;&quot;</span>\n    <span class=\"c1\"># DEBUGGING CODE</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">ibeis</span> <span class=\"k\">import</span> <span class=\"n\">ibsfuncs</span>\n        <span class=\"n\">_nids_list</span> <span class=\"o\">=</span> <span class=\"n\">ibsfuncs</span><span class=\"o\">.</span><span class=\"n\">unflat_map</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_name_rowids</span><span class=\"p\">,</span> <span class=\"n\">nx2_aids</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"nb\">all</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">allsame</span><span class=\"p\">,</span> <span class=\"n\">_nids_list</span><span class=\"p\">))</span>\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n        <span class=\"c1\"># THESE SHOULD BE CONSISTENT BUT THEY ARE NOT!!?</span>\n        <span class=\"c1\">#name_annots = [ibs.get_annot_name_rowids(aids) for aids in nx2_aids]</span>\n        <span class=\"n\">bad</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">good</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">huh</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">for</span> <span class=\"n\">nx</span><span class=\"p\">,</span> <span class=\"n\">aids</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">nx2_aids</span><span class=\"p\">):</span>\n            <span class=\"n\">nids</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_name_rowids</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">nids</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">):</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">nids</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">allsame</span><span class=\"p\">(</span><span class=\"n\">nids</span><span class=\"p\">):</span>\n                    <span class=\"n\">good</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">huh</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">bad</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">printex</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">,</span> <span class=\"n\">keys</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;good&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bad&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;huh&#39;</span><span class=\"p\">])</span></div>\n\n\n<div class=\"viewcode-block\" id=\"check_tile_consistency\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.check_tile_consistency\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">check_tile_consistency</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">gid_list</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (IBEISController):  ibeis controller object</span>\n<span class=\"sd\">        gid_list (list): (default = None)</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --exec-check_tile_consistency</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(defaultdb=&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; gid_list = None</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = check_image_consistency(ibs, gid_list)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\"># TODO: more consistency checks</span>\n    <span class=\"k\">if</span> <span class=\"n\">gid_list</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">gid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_gids</span><span class=\"p\">(</span><span class=\"n\">is_tile</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n    <span class=\"n\">all_tile_gid_set</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_gids</span><span class=\"p\">(</span><span class=\"n\">is_tile</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n\n    <span class=\"n\">level_error_set</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">([])</span>\n    <span class=\"k\">for</span> <span class=\"n\">tile_gid</span> <span class=\"ow\">in</span> <span class=\"n\">all_tile_gid_set</span><span class=\"p\">:</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_vulcan_image_tile_level</span><span class=\"p\">(</span><span class=\"n\">tile_gid</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">RuntimeError</span><span class=\"p\">:</span>\n            <span class=\"n\">level_error_set</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">tile_gid</span><span class=\"p\">)</span>\n\n    <span class=\"n\">error_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">tile_gids_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">compute_tiles</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">gid</span><span class=\"p\">,</span> <span class=\"n\">tile_gid_list</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">,</span> <span class=\"n\">tile_gids_list</span><span class=\"p\">):</span>\n        <span class=\"n\">error</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"k\">for</span> <span class=\"n\">tile_gid</span> <span class=\"ow\">in</span> <span class=\"n\">tile_gid_list</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">tile_gid</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">all_tile_gid_set</span><span class=\"p\">:</span>\n                <span class=\"n\">error</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"k\">if</span> <span class=\"n\">tile_gid</span> <span class=\"ow\">in</span> <span class=\"n\">level_error_set</span><span class=\"p\">:</span>\n                <span class=\"n\">error</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"k\">if</span> <span class=\"n\">error</span><span class=\"p\">:</span>\n            <span class=\"n\">error_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">gid</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Found </span><span class=\"si\">%d</span><span class=\"s1\"> error GIDs&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">error_list</span><span class=\"p\">),</span> <span class=\"p\">))</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">error_list</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">depc_image</span><span class=\"o\">.</span><span class=\"n\">get_property</span><span class=\"p\">(</span><span class=\"s1\">&#39;tiles&#39;</span><span class=\"p\">,</span> <span class=\"n\">error_list</span><span class=\"p\">,</span> <span class=\"s1\">&#39;gids&#39;</span><span class=\"p\">,</span> <span class=\"n\">recompute</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"check_annot_size\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.check_annot_size\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">check_annot_size</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Checking annot sizes&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">aid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_aids</span><span class=\"p\">()</span>\n    <span class=\"n\">uuid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_uuids</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">desc_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_vecs</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">ensure</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">kpts_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_kpts</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">ensure</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">vert_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_verts</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;size(aid_list) = &#39;</span> <span class=\"o\">+</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">byte_str2</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_object_nbytes</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;size(vert_list) = &#39;</span> <span class=\"o\">+</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">byte_str2</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_object_nbytes</span><span class=\"p\">(</span><span class=\"n\">vert_list</span><span class=\"p\">)))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;size(uuid_list) = &#39;</span> <span class=\"o\">+</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">byte_str2</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_object_nbytes</span><span class=\"p\">(</span><span class=\"n\">uuid_list</span><span class=\"p\">)))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;size(desc_list) = &#39;</span> <span class=\"o\">+</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">byte_str2</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_object_nbytes</span><span class=\"p\">(</span><span class=\"n\">desc_list</span><span class=\"p\">)))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;size(kpts_list) = &#39;</span> <span class=\"o\">+</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">byte_str2</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_object_nbytes</span><span class=\"p\">(</span><span class=\"n\">kpts_list</span><span class=\"p\">)))</span></div>\n\n\n<div class=\"viewcode-block\" id=\"check_exif_data\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.check_exif_data\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">check_exif_data</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">gid_list</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; TODO CALL SCRIPT &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">vtool.exif</span> <span class=\"k\">as</span> <span class=\"nn\">exif</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">PIL</span> <span class=\"k\">import</span> <span class=\"n\">Image</span>  <span class=\"c1\"># NOQA</span>\n    <span class=\"n\">gpath_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_paths</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">exif_dict_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">ix</span> <span class=\"ow\">in</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ProgIter</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">gpath_list</span><span class=\"p\">)),</span> <span class=\"n\">lbl</span><span class=\"o\">=</span><span class=\"s1\">&#39;checking exif: &#39;</span><span class=\"p\">):</span>\n        <span class=\"n\">gpath</span> <span class=\"o\">=</span> <span class=\"n\">gpath_list</span><span class=\"p\">[</span><span class=\"n\">ix</span><span class=\"p\">]</span>\n        <span class=\"n\">pil_img</span> <span class=\"o\">=</span> <span class=\"n\">Image</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">gpath</span><span class=\"p\">,</span> <span class=\"s1\">&#39;r&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># NOQA</span>\n        <span class=\"n\">exif_dict</span> <span class=\"o\">=</span> <span class=\"n\">exif</span><span class=\"o\">.</span><span class=\"n\">get_exif_dict</span><span class=\"p\">(</span><span class=\"n\">pil_img</span><span class=\"p\">)</span>\n        <span class=\"n\">exif_dict_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">exif_dict</span><span class=\"p\">)</span>\n        <span class=\"c1\">#if len(exif_dict) &gt; 0:</span>\n        <span class=\"c1\">#    break</span>\n\n    <span class=\"n\">has_latlon</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">exif_dict</span> <span class=\"ow\">in</span> <span class=\"n\">exif_dict_list</span><span class=\"p\">:</span>\n        <span class=\"n\">latlon</span> <span class=\"o\">=</span> <span class=\"n\">exif</span><span class=\"o\">.</span><span class=\"n\">get_lat_lon</span><span class=\"p\">(</span><span class=\"n\">exif_dict</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">latlon</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">has_latlon</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">has_latlon</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"si\">%d</span><span class=\"s1\"> / </span><span class=\"si\">%d</span><span class=\"s1\"> have gps info&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">has_latlon</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">has_latlon</span><span class=\"p\">),))</span>\n\n    <span class=\"n\">key2_freq</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ddict</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">num_tags_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">exif_dict</span> <span class=\"ow\">in</span> <span class=\"n\">exif_dict_list</span><span class=\"p\">:</span>\n        <span class=\"n\">exif_dict2</span> <span class=\"o\">=</span> <span class=\"n\">exif</span><span class=\"o\">.</span><span class=\"n\">make_exif_dict_human_readable</span><span class=\"p\">(</span><span class=\"n\">exif_dict</span><span class=\"p\">)</span>\n        <span class=\"n\">num_tags_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">exif_dict</span><span class=\"p\">))</span>\n        <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">exif_dict2</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">():</span>\n            <span class=\"n\">key2_freq</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Stats for num tags per image&#39;</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr4</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_stats</span><span class=\"p\">(</span><span class=\"n\">num_tags_list</span><span class=\"p\">)))</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;tag frequency&#39;</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr2</span><span class=\"p\">(</span><span class=\"n\">key2_freq</span><span class=\"p\">))</span></div>\n\n\n<div class=\"viewcode-block\" id=\"run_integrity_checks\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.run_integrity_checks\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">run_integrity_checks</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">embed</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; Function to run all database consistency checks &quot;&quot;&quot;</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[ibsfuncs] Checking consistency&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">gid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_gids</span><span class=\"p\">()</span>\n    <span class=\"n\">aid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_aids</span><span class=\"p\">()</span>\n    <span class=\"n\">nid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_nids</span><span class=\"p\">()</span>\n    <span class=\"n\">check_annot_size</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">)</span>\n    <span class=\"n\">check_image_consistency</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">gid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">check_annot_consistency</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">check_name_consistency</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">nid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">check_annotmatch_consistency</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Very slow check</span>\n    <span class=\"n\">check_image_uuid_consistency</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">gid_list</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">embed</span><span class=\"p\">:</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">embed</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[ibsfuncs] Finshed consistency check&#39;</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"check_annotmatch_consistency\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.check_annotmatch_consistency\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">check_annotmatch_consistency</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">):</span>\n    <span class=\"n\">annomatch_rowids</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">_get_all_annotmatch_rowids</span><span class=\"p\">()</span>\n    <span class=\"n\">aid1_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annotmatch_aid1</span><span class=\"p\">(</span><span class=\"n\">annomatch_rowids</span><span class=\"p\">)</span>\n    <span class=\"n\">aid2_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annotmatch_aid2</span><span class=\"p\">(</span><span class=\"n\">annomatch_rowids</span><span class=\"p\">)</span>\n    <span class=\"n\">exists1_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">check_rowid_exists</span><span class=\"p\">(</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">ANNOTATION_TABLE</span><span class=\"p\">,</span> <span class=\"n\">aid1_list</span><span class=\"p\">)</span>\n    <span class=\"n\">exists2_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">check_rowid_exists</span><span class=\"p\">(</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">ANNOTATION_TABLE</span><span class=\"p\">,</span> <span class=\"n\">aid2_list</span><span class=\"p\">)</span>\n    <span class=\"n\">invalid_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">not_list</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">and_lists</span><span class=\"p\">(</span><span class=\"n\">exists1_list</span><span class=\"p\">,</span> <span class=\"n\">exists2_list</span><span class=\"p\">))</span>\n    <span class=\"n\">invalid_annotmatch_rowids</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">annomatch_rowids</span><span class=\"p\">,</span> <span class=\"n\">invalid_list</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;There are </span><span class=\"si\">%d</span><span class=\"s1\"> invalid annotmatch rowids&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">invalid_annotmatch_rowids</span><span class=\"p\">),))</span>\n    <span class=\"k\">return</span> <span class=\"n\">invalid_annotmatch_rowids</span></div>\n\n\n<div class=\"viewcode-block\" id=\"fix_invalid_annotmatches\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.fix_invalid_annotmatches\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">fix_invalid_annotmatches</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Fixing invalid annotmatches&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">invalid_annotmatch_rowids</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">check_annotmatch_consistency</span><span class=\"p\">()</span>\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">delete_annotmatch</span><span class=\"p\">(</span><span class=\"n\">invalid_annotmatch_rowids</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"fix_remove_visual_dupliate_annotations\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.fix_remove_visual_dupliate_annotations\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">fix_remove_visual_dupliate_annotations</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    depricate because duplicate visual_uuids</span>\n<span class=\"sd\">    are no longer allowed to be duplicates</span>\n\n<span class=\"sd\">    Add to clean database?</span>\n\n<span class=\"sd\">    removes visually duplicate annotations</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (IBEISController):</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(&#39;GZ_ALL&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; fix_remove_visual_dupliate_annotations(ibs)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">aid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_aids</span><span class=\"p\">()</span>\n    <span class=\"n\">visual_uuid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_visual_uuids</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">ibs_dup_annots</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">debug_duplicate_items</span><span class=\"p\">(</span><span class=\"n\">visual_uuid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">dupaids_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">ibs_dup_annots</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">dupxs</span> <span class=\"ow\">in</span> <span class=\"n\">six</span><span class=\"o\">.</span><span class=\"n\">iteritems</span><span class=\"p\">(</span><span class=\"n\">ibs_dup_annots</span><span class=\"p\">):</span>\n            <span class=\"n\">aids</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">dupxs</span><span class=\"p\">)</span>\n            <span class=\"n\">dupaids_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:])</span>\n\n        <span class=\"n\">toremove_aids</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">dupaids_list</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;About to delete toremove_aids=</span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">toremove_aids</span><span class=\"p\">,))</span>\n        <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">are_you_sure</span><span class=\"p\">(</span><span class=\"s1\">&#39;About to delete </span><span class=\"si\">%r</span><span class=\"s1\"> aids&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">toremove_aids</span><span class=\"p\">))):</span>\n            <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">delete_annots</span><span class=\"p\">(</span><span class=\"n\">toremove_aids</span><span class=\"p\">)</span>\n\n            <span class=\"n\">aid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_aids</span><span class=\"p\">()</span>\n            <span class=\"n\">visual_uuid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_visual_uuids</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n            <span class=\"n\">ibs_dup_annots</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">debug_duplicate_items</span><span class=\"p\">(</span><span class=\"n\">visual_uuid_list</span><span class=\"p\">)</span>\n            <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">ibs_dup_annots</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span></div>\n\n\n<div class=\"viewcode-block\" id=\"fix_zero_features\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.fix_zero_features\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">fix_zero_features</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">):</span>\n    <span class=\"n\">aid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_aids</span><span class=\"p\">()</span>\n    <span class=\"n\">nfeat_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_num_feats</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">ensure</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">haszero_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">nfeat</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"k\">for</span> <span class=\"n\">nfeat</span> <span class=\"ow\">in</span> <span class=\"n\">nfeat_list</span><span class=\"p\">]</span>\n    <span class=\"n\">haszero_aids</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">haszero_list</span><span class=\"p\">)</span>\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">delete_annot_chips</span><span class=\"p\">(</span><span class=\"n\">haszero_aids</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"fix_and_clean_database\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.fix_and_clean_database\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">fix_and_clean_database</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; Function to run all database cleanup scripts</span>\n\n<span class=\"sd\">    Rename to run_cleanup_scripts</span>\n\n<span class=\"sd\">    Break into two funcs:</span>\n<span class=\"sd\">        run_cleanup_scripts</span>\n<span class=\"sd\">        run_fixit_scripts</span>\n\n<span class=\"sd\">    CONSITENCY CHECKS TODO:</span>\n<span class=\"sd\">        * check that annotmatches marked as False do not have the</span>\n<span class=\"sd\">          same name for similar viewpoints.</span>\n<span class=\"sd\">        * check that photobombs are have different names</span>\n<span class=\"sd\">        * warn if scenery matches have the same name</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\">#TODO: Call more stuff, maybe rename to &#39;apply duct tape&#39;</span>\n    <span class=\"k\">with</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">Indenter</span><span class=\"p\">(</span><span class=\"s1\">&#39;[FIX_AND_CLEAN]&#39;</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;starting fixes and consistency checks&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">fix_unknown_exemplars</span><span class=\"p\">()</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">fix_invalid_name_texts</span><span class=\"p\">()</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">fix_invalid_nids</span><span class=\"p\">()</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">fix_invalid_annotmatches</span><span class=\"p\">()</span>\n        <span class=\"n\">fix_zero_features</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">)</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">update_annot_visual_uuids</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_aids</span><span class=\"p\">())</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">delete_empty_nids</span><span class=\"p\">()</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">delete_empty_imgsetids</span><span class=\"p\">()</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">vacuum</span><span class=\"p\">()</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;finished fixes and consistency checks</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"fix_exif_data\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.fix_exif_data\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">fix_exif_data</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">gid_list</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; TODO CALL SCRIPT</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (IBEISController):  ibeis controller object</span>\n<span class=\"sd\">        gid_list (list): list of image ids</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --exec-fix_exif_data</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(defaultdb=&#39;lynx&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; gid_list = ibs.get_valid_gids()</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = fix_exif_data(ibs, gid_list)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">vtool</span> <span class=\"k\">as</span> <span class=\"nn\">vt</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">PIL</span> <span class=\"k\">import</span> <span class=\"n\">Image</span>  <span class=\"c1\"># NOQA</span>\n    <span class=\"n\">gpath_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_paths</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n\n    <span class=\"n\">pil_img_gen</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">Image</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">gpath</span><span class=\"p\">,</span> <span class=\"s1\">&#39;r&#39;</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">gpath</span> <span class=\"ow\">in</span> <span class=\"n\">gpath_list</span><span class=\"p\">)</span>  <span class=\"c1\"># NOQA</span>\n\n    <span class=\"n\">exif_dict_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">get_exif_dict</span><span class=\"p\">(</span><span class=\"n\">pil_img</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">pil_img</span> <span class=\"ow\">in</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ProgIter</span><span class=\"p\">(</span>\n            <span class=\"n\">pil_img_gen</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">gpath_list</span><span class=\"p\">),</span> <span class=\"n\">lbl</span><span class=\"o\">=</span><span class=\"s1\">&#39;reading exif: &#39;</span><span class=\"p\">,</span>\n            <span class=\"n\">adjust</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">fix_property</span><span class=\"p\">(</span><span class=\"n\">exif_getter</span><span class=\"p\">,</span> <span class=\"n\">ibs_getter</span><span class=\"p\">,</span> <span class=\"n\">ibs_setter</span><span class=\"p\">,</span> <span class=\"n\">dirty_ibs_val</span><span class=\"p\">,</span> <span class=\"n\">propname</span><span class=\"o\">=</span><span class=\"s1\">&#39;property&#39;</span><span class=\"p\">):</span>\n        <span class=\"n\">exif_prop_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">exif_getter</span><span class=\"p\">(</span><span class=\"n\">_dict</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">_dict</span> <span class=\"ow\">in</span> <span class=\"n\">exif_dict_list</span><span class=\"p\">]</span>\n        <span class=\"n\">hasprop_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">prop</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"k\">for</span> <span class=\"n\">prop</span> <span class=\"ow\">in</span> <span class=\"n\">exif_prop_list</span><span class=\"p\">]</span>\n\n        <span class=\"n\">exif_prop_list_</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">exif_prop_list</span><span class=\"p\">,</span> <span class=\"n\">hasprop_list</span><span class=\"p\">)</span>\n        <span class=\"n\">gid_list_</span>       <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">,</span> <span class=\"n\">hasprop_list</span><span class=\"p\">)</span>\n        <span class=\"n\">ibs_prop_list</span>   <span class=\"o\">=</span> <span class=\"n\">ibs_getter</span><span class=\"p\">(</span><span class=\"n\">gid_list_</span><span class=\"p\">)</span>\n        <span class=\"n\">isdirty_list</span>    <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">prop</span> <span class=\"o\">==</span> <span class=\"n\">dirty_ibs_val</span> <span class=\"k\">for</span> <span class=\"n\">prop</span> <span class=\"ow\">in</span> <span class=\"n\">ibs_prop_list</span><span class=\"p\">]</span>\n\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"si\">%d</span><span class=\"s1\"> / </span><span class=\"si\">%d</span><span class=\"s1\"> need </span><span class=\"si\">%s</span><span class=\"s1\"> update&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">isdirty_list</span><span class=\"p\">),</span>\n                                          <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">isdirty_list</span><span class=\"p\">),</span> <span class=\"n\">propname</span><span class=\"p\">))</span>\n\n        <span class=\"k\">if</span> <span class=\"kc\">False</span> <span class=\"ow\">and</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">isdirty_list</span><span class=\"p\">)</span>  <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">assert</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">isdirty_list</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">isdirty_list</span><span class=\"p\">),</span> <span class=\"s1\">&#39;safety. remove and evaluate if hit&#39;</span>\n            <span class=\"c1\">#ibs.set_image_imagesettext(gid_list_, [&#39;HASGPS&#39;] * len(gid_list_))</span>\n            <span class=\"n\">new_exif_prop_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">exif_prop_list_</span><span class=\"p\">,</span> <span class=\"n\">isdirty_list</span><span class=\"p\">)</span>\n            <span class=\"n\">dirty_gid_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">gid_list_</span><span class=\"p\">,</span> <span class=\"n\">isdirty_list</span><span class=\"p\">)</span>\n            <span class=\"n\">ibs_setter</span><span class=\"p\">(</span><span class=\"n\">dirty_gid_list</span><span class=\"p\">,</span> <span class=\"n\">new_exif_prop_list</span><span class=\"p\">)</span>\n\n    <span class=\"n\">FIX_GPS</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"k\">if</span> <span class=\"n\">FIX_GPS</span><span class=\"p\">:</span>\n        <span class=\"n\">fix_property</span><span class=\"p\">(</span><span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">get_lat_lon</span><span class=\"p\">,</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_gps</span><span class=\"p\">,</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_image_gps</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"s1\">&#39;gps&#39;</span><span class=\"p\">)</span>\n        <span class=\"c1\">#latlon_list = [vt.get_lat_lon(_dict, None) for _dict in exif_dict_list]</span>\n        <span class=\"c1\">#hasprop_list = [latlon is not None for latlon in latlon_list]</span>\n\n        <span class=\"c1\">#latlon_list_ = ut.compress(latlon_list, hasprop_list)</span>\n        <span class=\"c1\">#gid_list_    = ut.compress(gid_list, hasprop_list)</span>\n        <span class=\"c1\">#gps_list = ibs.get_image_gps(gid_list_)</span>\n        <span class=\"c1\">#isdirty_list = [gps == (-1, -1) for gps in gps_list]</span>\n\n        <span class=\"c1\">#print(&#39;%d / %d need gps update&#39; % (sum(isdirty_list),</span>\n        <span class=\"c1\">#                                   len(isdirty_list)))</span>\n\n        <span class=\"c1\">#if False and sum(isdirty_list)  &gt; 0:</span>\n        <span class=\"c1\">#    assert sum(isdirty_list) == len(isdirty_list), (</span>\n        <span class=\"c1\">#        &#39;safety. remove and evaluate if hit&#39;)</span>\n        <span class=\"c1\">#    #ibs.set_image_imagesettext(gid_list_, [&#39;HASGPS&#39;] * len(gid_list_))</span>\n        <span class=\"c1\">#    latlon_list__ = ut.compress(latlon_list_, isdirty_list)</span>\n        <span class=\"c1\">#    gid_list__ = ut.compress(gid_list_, isdirty_list)</span>\n        <span class=\"c1\">#    ibs.set_image_gps(gid_list__, latlon_list__)</span>\n\n    <span class=\"n\">FIX_UNIXTIME</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"k\">if</span> <span class=\"n\">FIX_UNIXTIME</span><span class=\"p\">:</span>\n        <span class=\"n\">dirty_ibs_val</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n        <span class=\"n\">propname</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;unixtime&#39;</span>\n        <span class=\"n\">exif_getter</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">get_unixtime</span>\n        <span class=\"n\">ibs_getter</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_unixtime</span>\n        <span class=\"n\">ibs_setter</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_image_unixtime</span>\n        <span class=\"n\">fix_property</span><span class=\"p\">(</span><span class=\"n\">exif_getter</span><span class=\"p\">,</span> <span class=\"n\">ibs_getter</span><span class=\"p\">,</span> <span class=\"n\">ibs_setter</span><span class=\"p\">,</span> <span class=\"n\">dirty_ibs_val</span><span class=\"p\">,</span> <span class=\"n\">propname</span><span class=\"p\">)</span></div>\n        <span class=\"c1\">#exif_prop_list = [vt.get_unixtime(_dict, None) for _dict in exif_dict_list]</span>\n        <span class=\"c1\">#hasprop_list = [prop is not None for prop in exif_prop_list]</span>\n\n        <span class=\"c1\">#exif_prop_list_ = ut.compress(exif_prop_list, hasprop_list)</span>\n        <span class=\"c1\">#gid_list_       = ut.compress(gid_list, hasprop_list)</span>\n        <span class=\"c1\">#ibs_prop_list   = ibs.get_image_unixtime(gid_list_)</span>\n        <span class=\"c1\">#isdirty_list    = [prop == dirty_ibs_val for prop in ibs_prop_list]</span>\n\n        <span class=\"c1\">#print(&#39;%d / %d need time update&#39; % (sum(isdirty_list),</span>\n        <span class=\"c1\">#                                    len(isdirty_list)))</span>\n\n        <span class=\"c1\">#if False and sum(isdirty_list)  &gt; 0:</span>\n        <span class=\"c1\">#    assert sum(isdirty_list) == len(isdirty_list), &#39;safety. remove and evaluate if hit&#39;</span>\n        <span class=\"c1\">#    #ibs.set_image_imagesettext(gid_list_, [&#39;HASGPS&#39;] * len(gid_list_))</span>\n        <span class=\"c1\">#    new_exif_prop_list = ut.compress(exif_prop_list_, isdirty_list)</span>\n        <span class=\"c1\">#    dirty_gid_list = ut.compress(gid_list_, isdirty_list)</span>\n        <span class=\"c1\">#    ibs.set_image_unixtime(dirty_gid_list, new_exif_prop_list)</span>\n\n\n<div class=\"viewcode-block\" id=\"fix_invalid_nids\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.fix_invalid_nids\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">fix_invalid_nids</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Make sure that all rowids are greater than 0</span>\n\n<span class=\"sd\">    We can only handle there being a name with rowid 0 if it is UNKNOWN. In this</span>\n<span class=\"sd\">    case we safely delete it, but anything more complicated needs to be handled</span>\n<span class=\"sd\">    anually</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (IBEISController):  ibeis controller object</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --test-fix_invalid_nids</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = fix_invalid_nids(ibs)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[ibs] fixing invalid nids (nids that are &lt;= ibs.UKNOWN_NAME_ROWID)&#39;</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Get actual rowids from sql database (no postprocessing)</span>\n    <span class=\"n\">nid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">_get_all_known_name_rowids</span><span class=\"p\">()</span>\n    <span class=\"c1\"># Get actual names from sql database (no postprocessing)</span>\n    <span class=\"n\">name_text_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_name_texts</span><span class=\"p\">(</span><span class=\"n\">nid_list</span><span class=\"p\">,</span> <span class=\"n\">apply_fix</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">is_invalid_nid_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">nid</span> <span class=\"o\">&lt;=</span> <span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">UNKNOWN_NAME_ROWID</span> <span class=\"k\">for</span> <span class=\"n\">nid</span> <span class=\"ow\">in</span> <span class=\"n\">nid_list</span><span class=\"p\">]</span>\n    <span class=\"k\">if</span> <span class=\"nb\">any</span><span class=\"p\">(</span><span class=\"n\">is_invalid_nid_list</span><span class=\"p\">):</span>\n        <span class=\"n\">invalid_nids</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">nid_list</span><span class=\"p\">,</span> <span class=\"n\">is_invalid_nid_list</span><span class=\"p\">)</span>\n        <span class=\"n\">invalid_texts</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">name_text_list</span><span class=\"p\">,</span> <span class=\"n\">is_invalid_nid_list</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">invalid_nids</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span>\n              <span class=\"n\">invalid_nids</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">UNKNOWN_NAME_ROWID</span> <span class=\"ow\">and</span>\n              <span class=\"n\">invalid_texts</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">UNKNOWN</span><span class=\"p\">):</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[ibs] found bad name rowids = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">invalid_nids</span><span class=\"p\">,))</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[ibs] found bad name texts  = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">invalid_texts</span><span class=\"p\">,))</span>\n            <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">delete_names</span><span class=\"p\">([</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">UNKNOWN_NAME_ROWID</span><span class=\"p\">])</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">errmsg</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Unfixable error: Found invalid (nid, text) pairs: &#39;</span>\n            <span class=\"n\">errmsg</span> <span class=\"o\">+=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr2</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">invalid_nids</span><span class=\"p\">,</span> <span class=\"n\">invalid_texts</span><span class=\"p\">)))</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">AssertionError</span><span class=\"p\">(</span><span class=\"n\">errmsg</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"fix_invalid_name_texts\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.fix_invalid_name_texts\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">fix_invalid_name_texts</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Ensure  that no name text is empty or &#39;____&#39;</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (IBEISController):  ibeis controller object</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --test-fix_invalid_names</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = fix_invalid_name_texts(ibs)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n\n<span class=\"sd\">    ibs.set_name_texts(nid_list[3], &#39;____&#39;)</span>\n<span class=\"sd\">    ibs.set_name_texts(nid_list[2], &#39;&#39;)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;checking for invalid name texts&#39;</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Get actual rowids from sql database (no postprocessing)</span>\n    <span class=\"n\">nid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">_get_all_known_name_rowids</span><span class=\"p\">()</span>\n    <span class=\"c1\"># Get actual names from sql database (no postprocessing)</span>\n    <span class=\"n\">name_text_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_name_texts</span><span class=\"p\">(</span><span class=\"n\">nid_list</span><span class=\"p\">,</span> <span class=\"n\">apply_fix</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">invalid_name_set</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">UNKNOWN</span><span class=\"p\">}</span>\n    <span class=\"n\">is_invalid_name_text_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">name_text</span> <span class=\"ow\">in</span> <span class=\"n\">invalid_name_set</span>\n                                 <span class=\"k\">for</span> <span class=\"n\">name_text</span> <span class=\"ow\">in</span> <span class=\"n\">name_text_list</span><span class=\"p\">]</span>\n    <span class=\"k\">if</span> <span class=\"nb\">any</span><span class=\"p\">(</span><span class=\"n\">is_invalid_name_text_list</span><span class=\"p\">):</span>\n        <span class=\"n\">invalid_nids</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">nid_list</span><span class=\"p\">,</span> <span class=\"n\">is_invalid_name_text_list</span><span class=\"p\">)</span>\n        <span class=\"n\">invalid_texts</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">name_text_list</span><span class=\"p\">,</span> <span class=\"n\">is_invalid_name_text_list</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">count</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">invalid_nid</span><span class=\"p\">,</span> <span class=\"n\">invalid_text</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">invalid_nids</span><span class=\"p\">,</span> <span class=\"n\">invalid_texts</span><span class=\"p\">)):</span>\n            <span class=\"n\">conflict_set</span> <span class=\"o\">=</span> <span class=\"n\">invalid_name_set</span><span class=\"o\">.</span><span class=\"n\">union</span><span class=\"p\">(</span>\n                <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_name_texts</span><span class=\"p\">(</span><span class=\"n\">nid_list</span><span class=\"p\">,</span> <span class=\"n\">apply_fix</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)))</span>\n            <span class=\"n\">base_str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;fixedname</span><span class=\"si\">%d</span><span class=\"s1\">&#39;</span> <span class=\"o\">+</span> <span class=\"n\">invalid_text</span>\n            <span class=\"n\">new_text</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_nonconflicting_string</span><span class=\"p\">(</span><span class=\"n\">base_str</span><span class=\"p\">,</span> <span class=\"n\">conflict_set</span><span class=\"p\">,</span> <span class=\"n\">offset</span><span class=\"o\">=</span><span class=\"n\">count</span><span class=\"p\">)</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Fixing name </span><span class=\"si\">%r</span><span class=\"s1\"> -&gt; </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">invalid_text</span><span class=\"p\">,</span> <span class=\"n\">new_text</span><span class=\"p\">))</span>\n            <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_name_texts</span><span class=\"p\">((</span><span class=\"n\">invalid_nid</span><span class=\"p\">,),</span> <span class=\"p\">(</span><span class=\"n\">new_text</span><span class=\"p\">,))</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Fixed </span><span class=\"si\">%d</span><span class=\"s1\"> name texts&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">invalid_nids</span><span class=\"p\">)))</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;all names seem valid&#39;</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"copy_imagesets\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.copy_imagesets\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">copy_imagesets</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">imgsetid_list</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (IBEISController):  ibeis controller object</span>\n<span class=\"sd\">        imgsetid_list (list):</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        list: new_imgsetid_list</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --test-copy_imagesets</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs.delete_all_imagesets()</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs.compute_occurrences(config={&#39;use_gps&#39;: False, &#39;seconds_thresh&#39;: 600})</span>\n<span class=\"sd\">        &gt;&gt;&gt; imgsetid_list = ibs.get_valid_imgsetids()</span>\n<span class=\"sd\">        &gt;&gt;&gt; new_imgsetid_list = copy_imagesets(ibs, imgsetid_list)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = str(ibs.get_imageset_text(new_imgsetid_list))</span>\n<span class=\"sd\">        &gt;&gt;&gt; assert [2] == list(set(map(len, ibs.get_image_imgsetids(ibs.get_valid_gids()))))</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs.delete_all_imagesets()</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs.compute_occurrences(config={&#39;use_gps&#39;: False, &#39;seconds_thresh&#39;: 600})</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">all_imagesettext_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_imageset_text</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_imgsetids</span><span class=\"p\">())</span>\n    <span class=\"n\">imagesettext_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_imageset_text</span><span class=\"p\">(</span><span class=\"n\">imgsetid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">new_imagesettext_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_nonconflicting_string</span><span class=\"p\">(</span><span class=\"n\">imagesettext</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;_Copy(</span><span class=\"si\">%d</span><span class=\"s1\">)&#39;</span><span class=\"p\">,</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">all_imagesettext_list</span><span class=\"p\">))</span>\n        <span class=\"k\">for</span> <span class=\"n\">imagesettext</span> <span class=\"ow\">in</span> <span class=\"n\">imagesettext_list</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">new_imgsetid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">add_imagesets</span><span class=\"p\">(</span><span class=\"n\">new_imagesettext_list</span><span class=\"p\">)</span>\n    <span class=\"n\">gids_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_imageset_gids</span><span class=\"p\">(</span><span class=\"n\">imgsetid_list</span><span class=\"p\">)</span>\n    <span class=\"c1\">#new_imgsetid_list =</span>\n    <span class=\"k\">for</span> <span class=\"n\">gids</span><span class=\"p\">,</span> <span class=\"n\">new_imgsetid</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">gids_list</span><span class=\"p\">,</span> <span class=\"n\">new_imgsetid_list</span><span class=\"p\">):</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_image_imgsetids</span><span class=\"p\">(</span><span class=\"n\">gids</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">new_imgsetid</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">gids</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">new_imgsetid_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"fix_unknown_exemplars\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.fix_unknown_exemplars\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">fix_unknown_exemplars</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Goes through all of the annotations, and sets their exemplar flag to 0 if it</span>\n<span class=\"sd\">    is associated with an unknown annotation</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">aid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_aids</span><span class=\"p\">()</span>\n    <span class=\"c1\">#nid_list = ibs.get_annot_nids(aid_list, distinguish_unknowns=False)</span>\n    <span class=\"n\">flag_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_exemplar_flags</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">unknown_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">is_aid_unknown</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Exemplars should all be known</span>\n    <span class=\"n\">unknown_exemplar_flags</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">flag_list</span><span class=\"p\">,</span> <span class=\"n\">unknown_list</span><span class=\"p\">)</span>\n    <span class=\"n\">unknown_aid_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">unknown_list</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Fixing </span><span class=\"si\">%d</span><span class=\"s1\"> unknown annotations set as exemplars&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">unknown_exemplar_flags</span><span class=\"p\">),))</span>\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_annot_exemplar_flags</span><span class=\"p\">(</span><span class=\"n\">unknown_aid_list</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"kc\">False</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">unknown_aid_list</span><span class=\"p\">))</span>\n    <span class=\"c1\">#is_error = [not flag for flag in unknown_exemplar_flags]</span>\n    <span class=\"c1\">#new_annots = [flag if nid != const.UNKNOWN_NAME_ROWID else 0</span>\n    <span class=\"c1\">#              for nid, flag in</span>\n    <span class=\"c1\">#              zip(nid_list, flag_list)]</span>\n    <span class=\"c1\">#ibs.set_annot_exemplar_flags(aid_list, new_annots)</span>\n    <span class=\"k\">pass</span></div>\n\n\n<div class=\"viewcode-block\" id=\"delete_all_recomputable_data\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.delete_all_recomputable_data\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">delete_all_recomputable_data</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; Delete all cached data including chips and imagesets &quot;&quot;&quot;</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[ibs] delete_all_recomputable_data&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">delete_cachedir</span><span class=\"p\">()</span>\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">delete_all_chips</span><span class=\"p\">()</span>\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">delete_all_imagesets</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[ibs] finished delete_all_recomputable_data&#39;</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"delete_cache\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.delete_cache\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">delete_cache</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">delete_imagesets</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Deletes the cache directory in the database directory.</span>\n<span class=\"sd\">    Can specify to delete encoutners as well.</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis delete_cache --db testdb1</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # SCRIPT</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb()</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = ibs.delete_cache()</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">ensure_directories</span><span class=\"p\">()</span>\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">delete_cachedir</span><span class=\"p\">()</span>\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">ensure_directories</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"n\">delete_imagesets</span><span class=\"p\">:</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">delete_all_imagesets</span><span class=\"p\">()</span></div>\n\n\n<div class=\"viewcode-block\" id=\"delete_cachedir\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.delete_cachedir\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">delete_cachedir</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Deletes the cache directory in the database directory.</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs delete_cachedir</span>\n<span class=\"sd\">        python -m ibeis delete_cachedir --db testdb1</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # SCRIPT</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb()</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = ibs.delete_cachedir()</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[ibs] delete_cachedir&#39;</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Need to close depc before restarting</span>\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">_close_depcache</span><span class=\"p\">()</span>\n    <span class=\"n\">cachedir</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_cachedir</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[ibs] cachedir=</span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">cachedir</span><span class=\"p\">)</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">cachedir</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[ibs] finished delete cachedir&#39;</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Reinit cache</span>\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">ensure_directories</span><span class=\"p\">()</span>\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">_init_depcache</span><span class=\"p\">()</span></div>\n\n\n<div class=\"viewcode-block\" id=\"delete_qres_cache\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.delete_qres_cache\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">delete_qres_cache</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (IBEISController):  ibeis controller object</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis --tf delete_qres_cache</span>\n<span class=\"sd\">        python -m ibeis --tf delete_qres_cache --db PZ_MTEST</span>\n<span class=\"sd\">        python -m ibeis --tf delete_qres_cache --db PZ_Master1</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # SCRIPT</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(defaultdb=&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = delete_qres_cache(ibs)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[ibs] delete delete_qres_cache&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">qreq_cachedir</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_qres_cachedir</span><span class=\"p\">()</span>\n    <span class=\"n\">qreq_bigcachedir</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_big_cachedir</span><span class=\"p\">()</span>\n    <span class=\"c1\"># Preliminary-ensure</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ensuredir</span><span class=\"p\">(</span><span class=\"n\">qreq_bigcachedir</span><span class=\"p\">)</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ensuredir</span><span class=\"p\">(</span><span class=\"n\">qreq_cachedir</span><span class=\"p\">)</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">qreq_cachedir</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">VERBOSE</span><span class=\"p\">)</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">qreq_bigcachedir</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">VERBOSE</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Re-ensure</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ensuredir</span><span class=\"p\">(</span><span class=\"n\">qreq_bigcachedir</span><span class=\"p\">)</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ensuredir</span><span class=\"p\">(</span><span class=\"n\">qreq_cachedir</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[ibs] finished delete_qres_cache&#39;</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"delete_neighbor_cache\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.delete_neighbor_cache\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">delete_neighbor_cache</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[ibs] delete neighbor_cache&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">neighbor_cachedir</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_neighbor_cachedir</span><span class=\"p\">()</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">neighbor_cachedir</span><span class=\"p\">)</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ensuredir</span><span class=\"p\">(</span><span class=\"n\">neighbor_cachedir</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[ibs] finished delete neighbor_cache&#39;</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"delete_all_features\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.delete_all_features\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">delete_all_features</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[ibs] delete_all_features&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">all_fids</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">_get_all_fids</span><span class=\"p\">()</span>\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">delete_features</span><span class=\"p\">(</span><span class=\"n\">all_fids</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[ibs] finished delete_all_features&#39;</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"delete_all_chips\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.delete_all_chips\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">delete_all_chips</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[ibs] delete_all_chips&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ensuredir</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">chipdir</span><span class=\"p\">)</span>\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">delete_annot_chipl</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_aids</span><span class=\"p\">())</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">chipdir</span><span class=\"p\">)</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ensuredir</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">chipdir</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[ibs] finished delete_all_chips&#39;</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"delete_all_imagesets\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.delete_all_imagesets\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">delete_all_imagesets</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[ibs] delete_all_imagesets&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">all_imgsetids</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">_get_all_imgsetids</span><span class=\"p\">()</span>\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">delete_imagesets</span><span class=\"p\">(</span><span class=\"n\">all_imgsetids</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[ibs] finished delete_all_imagesets&#39;</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"delete_all_annotations\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.delete_all_annotations\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">delete_all_annotations</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; Carefull with this function. Annotations are not recomputable &quot;&quot;&quot;</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[ibs] delete_all_annotations&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">six</span><span class=\"o\">.</span><span class=\"n\">moves</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"p\">(</span><span class=\"s1\">&#39;Are you sure you want to delete all annotations?&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">ans</span> <span class=\"o\">!=</span> <span class=\"s1\">&#39;yes&#39;</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span>\n    <span class=\"n\">all_aids</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">_get_all_aids</span><span class=\"p\">()</span>\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">delete_annots</span><span class=\"p\">(</span><span class=\"n\">all_aids</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[ibs] finished delete_all_annotations&#39;</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"delete_thumbnails\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.delete_thumbnails\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">delete_thumbnails</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">):</span>\n    <span class=\"n\">gid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_gids</span><span class=\"p\">()</span>\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">delete_image_thumbs</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">delete_annot_imgthumbs</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_aids</span><span class=\"p\">())</span></div>\n\n\n<div class=\"viewcode-block\" id=\"delete_flann_cachedir\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.delete_flann_cachedir\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">delete_flann_cachedir</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[ibs] delete_flann_cachedir&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">flann_cachedir</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_flann_cachedir</span><span class=\"p\">()</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">remove_files_in_dir</span><span class=\"p\">(</span><span class=\"n\">flann_cachedir</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"delete_ibeis_database\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.delete_ibeis_database\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">delete_ibeis_database</span><span class=\"p\">(</span><span class=\"n\">dbdir</span><span class=\"p\">):</span>\n    <span class=\"n\">_ibsdb</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">dbdir</span><span class=\"p\">,</span> <span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">PATH_NAMES</span><span class=\"o\">.</span><span class=\"n\">_ibsdb</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[ibsfuncs] DELETEING: _ibsdb=</span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">_ibsdb</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">_ibsdb</span><span class=\"p\">):</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">_ibsdb</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"vd\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.vd\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">vd</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">):</span>\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">view_dbdir</span><span class=\"p\">()</span></div>\n\n\n<div class=\"viewcode-block\" id=\"view_dbdir\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.view_dbdir\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">view_dbdir</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">):</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">view_directory</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_dbdir</span><span class=\"p\">())</span></div>\n\n\n<div class=\"viewcode-block\" id=\"is_nid_unknown\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.is_nid_unknown\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"nd\">@accessor_decors</span><span class=\"o\">.</span><span class=\"n\">getter_1to1</span>\n<span class=\"k\">def</span> <span class=\"nf\">is_nid_unknown</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">nid_list</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">nid</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span> <span class=\"k\">for</span> <span class=\"n\">nid</span> <span class=\"ow\">in</span> <span class=\"n\">nid_list</span><span class=\"p\">]</span></div>\n\n\n<div class=\"viewcode-block\" id=\"set_annot_names_to_next_name\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.set_annot_names_to_next_name\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">set_annot_names_to_next_name</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">):</span>\n    <span class=\"n\">next_name</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">make_next_name</span><span class=\"p\">()</span>\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_annot_names</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">next_name</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">))</span></div>\n\n\n<span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">_overwrite_annot_species_to_plains</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">):</span>\n    <span class=\"n\">species_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;zebra_plains&#39;</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_annot_species</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">species_list</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">_overwrite_annot_species_to_grevys</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">):</span>\n    <span class=\"n\">species_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;zebra_grevys&#39;</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_annot_species</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">species_list</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">_overwrite_annot_species_to_giraffe</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">):</span>\n    <span class=\"n\">species_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;giraffe_reticulated&#39;</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_annot_species</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">species_list</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">_overwrite_all_annot_species_to</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">species</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; THIS OVERWRITES A LOT OF INFO &quot;&quot;&quot;</span>\n    <span class=\"n\">valid_species</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_all_species_texts</span><span class=\"p\">()</span>\n    <span class=\"k\">assert</span> <span class=\"n\">species</span> <span class=\"ow\">in</span> <span class=\"n\">valid_species</span><span class=\"p\">,</span> <span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">species</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;is not in &#39;</span> <span class=\"o\">+</span> <span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">valid_species</span><span class=\"p\">)</span>\n    <span class=\"n\">aid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_aids</span><span class=\"p\">()</span>\n    <span class=\"n\">species_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">species</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_annot_species</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">species_list</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"unflat_map\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.unflat_map\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">unflat_map</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"p\">,</span> <span class=\"n\">unflat_rowids</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Uses an ibeis lookup function with a non-flat rowid list.</span>\n<span class=\"sd\">    In essence this is equivilent to map(method, unflat_rowids).</span>\n<span class=\"sd\">    The utility of this function is that it only calls method once.</span>\n<span class=\"sd\">    This is more efficient for calls that can take a list of inputs</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        method        (method):  ibeis controller method</span>\n<span class=\"sd\">        unflat_rowids (list): list of rowid lists</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        list of values: unflat_vals</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --test-unflat_map</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; method = ibs.get_annot_name_rowids</span>\n<span class=\"sd\">        &gt;&gt;&gt; unflat_rowids = ibs.get_name_aids(ibs.get_valid_nids())</span>\n<span class=\"sd\">        &gt;&gt;&gt; unflat_vals = unflat_map(method, unflat_rowids)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = str(unflat_vals)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">        [[1, 1], [2, 2], [3], [4], [5], [6], [7]]</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\">#ut.assert_unflat_level(unflat_rowids, level=1, basetype=(int, uuid.UUID))</span>\n    <span class=\"c1\"># First flatten the list, and remember the original dimensions</span>\n    <span class=\"n\">flat_rowids</span><span class=\"p\">,</span> <span class=\"n\">reverse_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">invertible_flatten2</span><span class=\"p\">(</span><span class=\"n\">unflat_rowids</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Then preform the lookup / implicit mapping</span>\n    <span class=\"n\">flat_vals</span> <span class=\"o\">=</span> <span class=\"n\">method</span><span class=\"p\">(</span><span class=\"n\">flat_rowids</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">flat_vals</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">flat_rowids</span><span class=\"p\">),</span> <span class=\"p\">(</span>\n            <span class=\"s1\">&#39;flat lens not the same, len(flat_vals)=</span><span class=\"si\">%d</span><span class=\"s1\"> len(flat_rowids)=</span><span class=\"si\">%d</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span>\n            <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">flat_vals</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">flat_rowids</span><span class=\"p\">),))</span>\n    <span class=\"c1\"># Then ut.unflatten2 the results to the original input dimensions</span>\n    <span class=\"n\">unflat_vals</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">unflatten2</span><span class=\"p\">(</span><span class=\"n\">flat_vals</span><span class=\"p\">,</span> <span class=\"n\">reverse_list</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">unflat_vals</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">unflat_rowids</span><span class=\"p\">),</span> <span class=\"p\">(</span>\n            <span class=\"s1\">&#39;unflat lens not the same, len(unflat_vals)=</span><span class=\"si\">%d</span><span class=\"s1\"> len(unflat_rowids)=</span><span class=\"si\">%d</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span>\n            <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">unflat_vals</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">unflat_rowids</span><span class=\"p\">),))</span>\n    <span class=\"k\">return</span> <span class=\"n\">unflat_vals</span></div>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_make_unflat_getter_func</span><span class=\"p\">(</span><span class=\"n\">flat_getter</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; makes an unflat version of an ibeis getter &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">flat_getter</span><span class=\"p\">,</span> <span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">MethodType</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Unwrap fmethods</span>\n        <span class=\"n\">func</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_method_func</span><span class=\"p\">(</span><span class=\"n\">flat_getter</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">func</span> <span class=\"o\">=</span> <span class=\"n\">flat_getter</span>\n    <span class=\"n\">funcname</span> <span class=\"o\">=</span> <span class=\"n\">get_funcname</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">funcname</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">&#39;get_&#39;</span><span class=\"p\">),</span> <span class=\"s1\">&#39;only works on getters, not: &#39;</span> <span class=\"o\">+</span> <span class=\"n\">funcname</span>\n    <span class=\"c1\"># Create new function</span>\n    <span class=\"k\">def</span> <span class=\"nf\">unflat_getter</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">unflat_rowids</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"c1\"># First flatten the list</span>\n        <span class=\"n\">flat_rowids</span><span class=\"p\">,</span> <span class=\"n\">reverse_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">invertible_flatten2</span><span class=\"p\">(</span><span class=\"n\">unflat_rowids</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Then preform the lookup</span>\n        <span class=\"n\">flat_vals</span> <span class=\"o\">=</span> <span class=\"n\">func</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">flat_rowids</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Then ut.unflatten2 the list</span>\n        <span class=\"n\">unflat_vals</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">unflatten2</span><span class=\"p\">(</span><span class=\"n\">flat_vals</span><span class=\"p\">,</span> <span class=\"n\">reverse_list</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">unflat_vals</span>\n    <span class=\"n\">set_funcname</span><span class=\"p\">(</span><span class=\"n\">unflat_getter</span><span class=\"p\">,</span> <span class=\"n\">funcname</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">&#39;get_&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;get_unflat_&#39;</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">unflat_getter</span>\n\n\n<div class=\"viewcode-block\" id=\"ensure_unix_gpaths\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.ensure_unix_gpaths\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">ensure_unix_gpaths</span><span class=\"p\">(</span><span class=\"n\">gpath_list</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Asserts that all paths are given with forward slashes.</span>\n<span class=\"sd\">    If not it fixes them</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\">#if ut.NO_ASSERTS:</span>\n    <span class=\"c1\">#    return</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;gpath_list must be in unix format (no backslashes).&#39;</span>\n               <span class=\"s1\">&#39;Failed on </span><span class=\"si\">%d</span><span class=\"s1\">-th gpath=</span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">count</span><span class=\"p\">,</span> <span class=\"n\">gpath</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">gpath_list</span><span class=\"p\">):</span>\n            <span class=\"k\">assert</span> <span class=\"n\">gpath</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\\\</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">msg</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">count</span><span class=\"p\">,</span> <span class=\"n\">gpath</span><span class=\"p\">))</span>\n    <span class=\"k\">except</span> <span class=\"ne\">AssertionError</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">printex</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">,</span> <span class=\"n\">iswarning</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">gpath_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">unixpath</span><span class=\"p\">,</span> <span class=\"n\">gpath_list</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">gpath_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_annot_info\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.get_annot_info\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"nd\">@accessor_decors</span><span class=\"o\">.</span><span class=\"n\">getter_1to1</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_annot_info</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">reference_aid</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (ibeis.IBEISController):  ibeis controller object</span>\n<span class=\"sd\">        aid_list (list):  list of annotation rowids</span>\n<span class=\"sd\">        default (bool): (default = False)</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        list: infodict_list</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --exec-get_annot_info --tb</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(defaultdb=&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; aid_list = ibs.get_valid_aids()[0:2]</span>\n<span class=\"sd\">        &gt;&gt;&gt; default = True</span>\n<span class=\"sd\">        &gt;&gt;&gt; infodict_list = ibs.get_annot_info(1, default)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = (&#39;infodict_list = %s&#39; % (ut.repr2(infodict_list, nl=4),))</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\"># TODO rectify and combine with viz_helpers.get_annot_texts</span>\n    <span class=\"n\">key_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">vals_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n    <span class=\"c1\">#if len(aid_list) == 0:</span>\n    <span class=\"c1\">#    return []</span>\n\n    <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;aid&#39;</span>\n    <span class=\"k\">if</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">default</span> <span class=\"ow\">or</span> <span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"n\">vals_list</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">aid_list</span><span class=\"p\">]</span>\n        <span class=\"n\">key_list</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span>\n\n    <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;notes&#39;</span>\n    <span class=\"k\">if</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"p\">):</span>\n        <span class=\"n\">vals_list</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_notes</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)]</span>\n        <span class=\"n\">key_list</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span>\n\n    <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;case_tags&#39;</span>\n    <span class=\"k\">if</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"p\">):</span>\n        <span class=\"n\">vals_list</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_case_tags</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)]</span>\n        <span class=\"n\">key_list</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span>\n\n    <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;match_tags&#39;</span>\n    <span class=\"k\">if</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"p\">):</span>\n        <span class=\"n\">vals_list</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_annotmatch_tags</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)]</span>\n        <span class=\"n\">key_list</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span>\n\n    <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;name&#39;</span>\n    <span class=\"k\">if</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"p\">):</span>\n        <span class=\"n\">vals_list</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_names</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)]</span>\n        <span class=\"n\">key_list</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span>\n\n    <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;nid&#39;</span>\n    <span class=\"k\">if</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"p\">):</span>\n        <span class=\"n\">vals_list</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_name_rowids</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)]</span>\n        <span class=\"n\">key_list</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span>\n\n    <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;num_gt&#39;</span>\n    <span class=\"k\">if</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"p\">):</span>\n        <span class=\"n\">vals_list</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_num_groundtruth</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)]</span>\n        <span class=\"n\">key_list</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span>\n\n    <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;gname&#39;</span>\n    <span class=\"k\">if</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"p\">):</span>\n        <span class=\"n\">vals_list</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_image_names</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)]</span>\n        <span class=\"n\">key_list</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span>\n\n    <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;bbox&#39;</span>\n    <span class=\"k\">if</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"p\">):</span>\n        <span class=\"n\">vals_list</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_bboxes</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)]</span>\n        <span class=\"n\">key_list</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span>\n\n    <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;viewpoint_code&#39;</span>\n    <span class=\"k\">if</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"p\">):</span>\n        <span class=\"n\">vals_list</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_viewpoints</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)]</span>\n        <span class=\"n\">key_list</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span>\n\n    <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;time&#39;</span>\n    <span class=\"k\">if</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"p\">):</span>\n        <span class=\"n\">vals_list</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_image_unixtimes</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)]</span>\n        <span class=\"n\">key_list</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span>\n\n    <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;timestr&#39;</span>\n    <span class=\"k\">if</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"p\">):</span>\n        <span class=\"n\">unixtimes</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_image_unixtimes</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n        <span class=\"n\">vals_list</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">util_time</span><span class=\"o\">.</span><span class=\"n\">unixtime_to_datetimestr</span><span class=\"p\">,</span> <span class=\"n\">unixtimes</span><span class=\"p\">))]</span>\n        <span class=\"n\">key_list</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span>\n\n    <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;timedelta&#39;</span>\n    <span class=\"k\">if</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">reference_aid</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">times</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_image_unixtimes_asfloat</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">))</span>\n        <span class=\"n\">ref_time</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_image_unixtimes_asfloat</span><span class=\"p\">(</span><span class=\"n\">reference_aid</span><span class=\"p\">)</span>\n        <span class=\"n\">vals_list</span> <span class=\"o\">+=</span> <span class=\"p\">[(</span><span class=\"n\">times</span> <span class=\"o\">-</span> <span class=\"n\">ref_time</span><span class=\"p\">)]</span>\n        <span class=\"n\">key_list</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span>\n\n    <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;quality_text&#39;</span>\n    <span class=\"k\">if</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"p\">):</span>\n        <span class=\"n\">vals_list</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_quality_texts</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)]</span>\n        <span class=\"n\">key_list</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span>\n\n    <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;exemplar&#39;</span>\n    <span class=\"k\">if</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"p\">):</span>\n        <span class=\"n\">vals_list</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_exemplar_flags</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)]</span>\n        <span class=\"n\">key_list</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span>\n\n    <span class=\"n\">infodict_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"n\">key_</span><span class=\"p\">:</span> <span class=\"n\">val</span> <span class=\"k\">for</span> <span class=\"n\">key_</span><span class=\"p\">,</span> <span class=\"n\">val</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">key_list</span><span class=\"p\">,</span> <span class=\"n\">vals</span><span class=\"p\">)}</span>\n        <span class=\"k\">for</span> <span class=\"n\">vals</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">vals_list</span><span class=\"p\">)</span>\n    <span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">infodict_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"aidstr\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.aidstr\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">aidstr</span><span class=\"p\">(</span><span class=\"n\">aid</span><span class=\"p\">,</span> <span class=\"n\">ibs</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">notes</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; Helper to make a string from an aid &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">notes</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"s1\">&#39;aid</span><span class=\"si\">%d</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">aid</span><span class=\"p\">,)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">assert</span> <span class=\"n\">ibs</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span>\n        <span class=\"n\">notes</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_notes</span><span class=\"p\">(</span><span class=\"n\">aid</span><span class=\"p\">)</span>\n        <span class=\"n\">name</span>  <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_names</span><span class=\"p\">(</span><span class=\"n\">aid</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"s1\">&#39;aid</span><span class=\"si\">%d</span><span class=\"s1\">-</span><span class=\"si\">%r</span><span class=\"s1\">-</span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">aid</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">),</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">notes</span><span class=\"p\">))</span></div>\n\n\n<div class=\"viewcode-block\" id=\"update_exemplar_special_imageset\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.update_exemplar_special_imageset\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"c1\">#@ut.time_func</span>\n<span class=\"c1\">#@profile</span>\n<span class=\"k\">def</span> <span class=\"nf\">update_exemplar_special_imageset</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">):</span>\n    <span class=\"c1\"># FIXME SLOW</span>\n    <span class=\"n\">exemplar_imgsetid</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_imageset_imgsetids_from_text</span><span class=\"p\">(</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">EXEMPLAR_IMAGESETTEXT</span><span class=\"p\">)</span>\n    <span class=\"c1\">#ibs.delete_imagesets(exemplar_imgsetid)</span>\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">delete_gsgr_imageset_relations</span><span class=\"p\">(</span><span class=\"n\">exemplar_imgsetid</span><span class=\"p\">)</span>\n    <span class=\"c1\">#aid_list = ibs.get_valid_aids(is_exemplar=True)</span>\n    <span class=\"c1\">#gid_list = ut.unique_ordered(ibs.get_annot_gids(aid_list))</span>\n    <span class=\"n\">gid_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">_get_exemplar_gids</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">)))</span>\n    <span class=\"c1\">#ibs.set_image_imagesettext(gid_list, [const.EXEMPLAR_IMAGESETTEXT] * len(gid_list))</span>\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_image_imgsetids</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">exemplar_imgsetid</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">))</span></div>\n\n\n<div class=\"viewcode-block\" id=\"update_reviewed_unreviewed_image_special_imageset\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.update_reviewed_unreviewed_image_special_imageset\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"c1\">#@ut.time_func</span>\n<span class=\"c1\">#@profile</span>\n<span class=\"k\">def</span> <span class=\"nf\">update_reviewed_unreviewed_image_special_imageset</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">reviewed</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">unreviewed</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Creates imageset of images that have not been reviewed</span>\n<span class=\"sd\">    and that have been reviewed (wrt detection)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\"># FIXME SLOW</span>\n    <span class=\"k\">if</span> <span class=\"n\">unreviewed</span><span class=\"p\">:</span>\n        <span class=\"n\">unreviewed_imgsetid</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_imageset_imgsetids_from_text</span><span class=\"p\">(</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">UNREVIEWED_IMAGE_IMAGESETTEXT</span><span class=\"p\">)</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">delete_gsgr_imageset_relations</span><span class=\"p\">(</span><span class=\"n\">unreviewed_imgsetid</span><span class=\"p\">)</span>\n        <span class=\"n\">unreviewed_gids</span> <span class=\"o\">=</span> <span class=\"n\">_get_unreviewed_gids</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">)</span>  <span class=\"c1\"># hack</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_image_imgsetids</span><span class=\"p\">(</span><span class=\"n\">unreviewed_gids</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">unreviewed_imgsetid</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">unreviewed_gids</span><span class=\"p\">))</span>\n    <span class=\"k\">if</span> <span class=\"n\">reviewed</span><span class=\"p\">:</span>\n        <span class=\"n\">reviewed_imgsetid</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_imageset_imgsetids_from_text</span><span class=\"p\">(</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">REVIEWED_IMAGE_IMAGESETTEXT</span><span class=\"p\">)</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">delete_gsgr_imageset_relations</span><span class=\"p\">(</span><span class=\"n\">reviewed_imgsetid</span><span class=\"p\">)</span>\n        <span class=\"c1\">#gid_list = ibs.get_valid_gids(reviewed=False)</span>\n        <span class=\"c1\">#ibs.set_image_imagesettext(gid_list, [const.UNREVIEWED_IMAGE_IMAGESETTEXT] * len(gid_list))</span>\n        <span class=\"n\">reviewed_gids</span>  <span class=\"o\">=</span> <span class=\"n\">_get_reviewed_gids</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">)</span>  <span class=\"c1\"># hack</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_image_imgsetids</span><span class=\"p\">(</span><span class=\"n\">reviewed_gids</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">reviewed_imgsetid</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">reviewed_gids</span><span class=\"p\">))</span></div>\n\n\n<div class=\"viewcode-block\" id=\"update_all_image_special_imageset\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.update_all_image_special_imageset\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"c1\">#@ut.time_func</span>\n<span class=\"c1\">#@profile</span>\n<span class=\"k\">def</span> <span class=\"nf\">update_all_image_special_imageset</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">):</span>\n    <span class=\"c1\"># FIXME SLOW</span>\n    <span class=\"n\">allimg_imgsetid</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_imageset_imgsetids_from_text</span><span class=\"p\">(</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">ALL_IMAGE_IMAGESETTEXT</span><span class=\"p\">)</span>\n    <span class=\"c1\">#ibs.delete_imagesets(allimg_imgsetid)</span>\n    <span class=\"n\">gid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_gids</span><span class=\"p\">()</span>\n    <span class=\"c1\">#ibs.set_image_imagesettext(gid_list, [const.ALL_IMAGE_IMAGESETTEXT] * len(gid_list))</span>\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_image_imgsetids</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">allimg_imgsetid</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">))</span></div>\n\n\n<div class=\"viewcode-block\" id=\"update_species_imagesets\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.update_species_imagesets\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">update_species_imagesets</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">):</span>\n    <span class=\"n\">gid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_gids</span><span class=\"p\">()</span>\n    <span class=\"n\">aids_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_aids</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">species_list</span> <span class=\"o\">=</span> <span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_species_texts</span><span class=\"p\">,</span> <span class=\"n\">aids_list</span><span class=\"p\">)</span>\n    <span class=\"n\">species_list</span> <span class=\"o\">=</span> <span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">,</span> <span class=\"n\">species_list</span><span class=\"p\">)</span>\n\n    <span class=\"n\">species_dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"k\">for</span> <span class=\"n\">species_list_</span><span class=\"p\">,</span> <span class=\"n\">gid</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">species_list</span><span class=\"p\">,</span> <span class=\"n\">gid_list</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">species</span> <span class=\"ow\">in</span> <span class=\"n\">species_list_</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">species</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">species_dict</span><span class=\"p\">:</span>\n                <span class=\"n\">species_dict</span><span class=\"p\">[</span><span class=\"n\">species</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"n\">species_dict</span><span class=\"p\">[</span><span class=\"n\">species</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">gid</span><span class=\"p\">)</span>\n\n    <span class=\"n\">key_list</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">species_dict</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n    <span class=\"n\">imageset_text_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"s1\">&#39;Species: </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">&#39;_&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39; &#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">(),</span> <span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">key_list</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"n\">imageset_rowid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_imageset_imgsetids_from_text</span><span class=\"p\">(</span><span class=\"n\">imageset_text_list</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">imageset_rowid_list</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">key_list</span><span class=\"p\">,</span> <span class=\"n\">imageset_rowid_list</span><span class=\"p\">):</span>\n        <span class=\"n\">gid_list</span> <span class=\"o\">=</span> <span class=\"n\">species_dict</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span>\n        <span class=\"n\">gid_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">))</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_image_imgsetids</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">imageset_rowid_list</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">))</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_special_imgsetids\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.get_special_imgsetids\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_special_imgsetids</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">):</span>\n    <span class=\"n\">get_imagesettext_imgsetid</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_imageset_imgsetids_from_text</span>\n    <span class=\"n\">special_imagesettext_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">UNGROUPED_IMAGES_IMAGESETTEXT</span><span class=\"p\">,</span>\n        <span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">ALL_IMAGE_IMAGESETTEXT</span><span class=\"p\">,</span>\n        <span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">UNREVIEWED_IMAGE_IMAGESETTEXT</span><span class=\"p\">,</span>\n        <span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">REVIEWED_IMAGE_IMAGESETTEXT</span><span class=\"p\">,</span>\n        <span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">EXEMPLAR_IMAGESETTEXT</span><span class=\"p\">,</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">special_imgsetids_</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">get_imagesettext_imgsetid</span><span class=\"p\">(</span><span class=\"n\">imagesettext</span><span class=\"p\">,</span> <span class=\"n\">ensure</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n                          <span class=\"k\">for</span> <span class=\"n\">imagesettext</span> <span class=\"ow\">in</span> <span class=\"n\">special_imagesettext_list</span><span class=\"p\">]</span>\n    <span class=\"n\">special_imgsetids</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">special_imgsetids_</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">special_imgsetids</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_ungrouped_gids\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.get_ungrouped_gids\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"nd\">@profile</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_ungrouped_gids</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --test-get_ungrouped_gids</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs.delete_all_imagesets()</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs.compute_occurrences(config={&#39;use_gps&#39;: False, &#39;seconds_thresh&#39;: 600})</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs.update_special_imagesets()</span>\n<span class=\"sd\">        &gt;&gt;&gt; # Now we want to remove some images from a non-special imageset</span>\n<span class=\"sd\">        &gt;&gt;&gt; nonspecial_imgsetids = [i for i in ibs.get_valid_imgsetids() if i not in ibs.get_special_imgsetids()]</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&quot;Nonspecial EIDs %r&quot; % nonspecial_imgsetids)</span>\n<span class=\"sd\">        &gt;&gt;&gt; images_to_remove = ibs.get_imageset_gids(nonspecial_imgsetids[0:1])[0][0:1]</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&quot;Removing %r&quot; % images_to_remove)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs.unrelate_images_and_imagesets(images_to_remove,nonspecial_imgsetids[0:1] * len(images_to_remove))</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs.update_special_imagesets()</span>\n<span class=\"sd\">        &gt;&gt;&gt; ungr_imgsetid = ibs.get_imageset_imgsetids_from_text(const.UNGROUPED_IMAGES_IMAGESETTEXT)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&quot;Ungrouped gids %r&quot; % ibs.get_ungrouped_gids())</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&quot;Ungrouped imgsetid %d contains %r&quot; % (ungr_imgsetid, ibs.get_imageset_gids([ungr_imgsetid])))</span>\n<span class=\"sd\">        &gt;&gt;&gt; ungr_gids = ibs.get_imageset_gids([ungr_imgsetid])[0]</span>\n<span class=\"sd\">        &gt;&gt;&gt; assert(sorted(images_to_remove) == sorted(ungr_gids))</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">special_imgsetids</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">get_special_imgsetids</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">))</span>\n    <span class=\"n\">gid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_gids</span><span class=\"p\">()</span>\n    <span class=\"n\">imgsetids_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_imgsetids</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">has_imgsetids</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">special_imgsetids</span><span class=\"o\">.</span><span class=\"n\">issuperset</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">imgsetids</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">imgsetids</span> <span class=\"ow\">in</span> <span class=\"n\">imgsetids_list</span><span class=\"p\">]</span>\n    <span class=\"n\">ungrouped_gids</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">,</span> <span class=\"n\">has_imgsetids</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">ungrouped_gids</span></div>\n\n\n<div class=\"viewcode-block\" id=\"update_ungrouped_special_imageset\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.update_ungrouped_special_imageset\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"c1\">#@ut.time_func</span>\n<span class=\"c1\">#@profile</span>\n<span class=\"nd\">@profile</span>\n<span class=\"k\">def</span> <span class=\"nf\">update_ungrouped_special_imageset</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (IBEISController):  ibeis controller object</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --test-update_ungrouped_special_imageset</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(&#39;testdb9&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = update_ungrouped_special_imageset(ibs)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\"># FIXME SLOW</span>\n    <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">VERBOSE</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[ibsfuncs] update_ungrouped_special_imageset.1&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">ungrouped_imgsetid</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_imageset_imgsetids_from_text</span><span class=\"p\">(</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">UNGROUPED_IMAGES_IMAGESETTEXT</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">VERBOSE</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[ibsfuncs] update_ungrouped_special_imageset.2&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">delete_gsgr_imageset_relations</span><span class=\"p\">(</span><span class=\"n\">ungrouped_imgsetid</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">VERBOSE</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[ibsfuncs] update_ungrouped_special_imageset.3&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">ungrouped_gids</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_ungrouped_gids</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">VERBOSE</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[ibsfuncs] update_ungrouped_special_imageset.4&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_image_imgsetids</span><span class=\"p\">(</span><span class=\"n\">ungrouped_gids</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">ungrouped_imgsetid</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">ungrouped_gids</span><span class=\"p\">))</span>\n    <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">VERBOSE</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[ibsfuncs] update_ungrouped_special_imageset.5&#39;</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"update_special_imagesets\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.update_special_imagesets\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"c1\">#@ut.time_func</span>\n<span class=\"nd\">@profile</span>\n<span class=\"k\">def</span> <span class=\"nf\">update_special_imagesets</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">use_more_special_imagesets</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argflag</span><span class=\"p\">(</span><span class=\"s1\">&#39;--readonly-mode&#39;</span><span class=\"p\">):</span>\n        <span class=\"c1\"># SUPER HACK</span>\n        <span class=\"k\">return</span>\n    <span class=\"c1\"># FIXME SLOW</span>\n    <span class=\"k\">if</span> <span class=\"n\">use_more_special_imagesets</span><span class=\"p\">:</span>\n        <span class=\"c1\">#ibs.update_reviewed_unreviewed_image_special_imageset()</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">update_reviewed_unreviewed_image_special_imageset</span><span class=\"p\">(</span><span class=\"n\">reviewed</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">update_exemplar_special_imageset</span><span class=\"p\">()</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">update_all_image_special_imageset</span><span class=\"p\">()</span>\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">update_ungrouped_special_imageset</span><span class=\"p\">()</span></div>\n\n\n<span class=\"c1\"># def _get_unreviewed_gids(ibs):</span>\n<span class=\"c1\">#     # hack</span>\n<span class=\"c1\">#     gid_list = ibs.db.executeone(</span>\n<span class=\"c1\">#         &#39;&#39;&#39;</span>\n<span class=\"c1\">#         SELECT image_rowid</span>\n<span class=\"c1\">#         FROM {IMAGE_TABLE}</span>\n<span class=\"c1\">#         WHERE</span>\n<span class=\"c1\">#         image_toggle_reviewed=0</span>\n<span class=\"c1\">#         &#39;&#39;&#39;.format(**const.__dict__))</span>\n<span class=\"c1\">#     return gid_list</span>\n\n\n<span class=\"c1\"># def _get_reviewed_gids(ibs):</span>\n<span class=\"c1\">#     # hack</span>\n<span class=\"c1\">#     gid_list = ibs.db.executeone(</span>\n<span class=\"c1\">#         &#39;&#39;&#39;</span>\n<span class=\"c1\">#         SELECT image_rowid</span>\n<span class=\"c1\">#         FROM {IMAGE_TABLE}</span>\n<span class=\"c1\">#         WHERE</span>\n<span class=\"c1\">#         image_toggle_reviewed=1</span>\n<span class=\"c1\">#         &#39;&#39;&#39;.format(**const.__dict__))</span>\n<span class=\"c1\">#     return gid_list</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_get_unreviewed_gids</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    &gt;&gt;&gt; import ibeis  # NOQA</span>\n<span class=\"sd\">    &gt;&gt;&gt; ibs = ibeis.opendb(&#39;testdb1&#39;)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\"># hack</span>\n    <span class=\"n\">gid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_gids</span><span class=\"p\">()</span>\n    <span class=\"n\">flag_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">detect_cnn_yolo_exists</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">gid_list_</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">,</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">not_list</span><span class=\"p\">(</span><span class=\"n\">flag_list</span><span class=\"p\">))</span>\n    <span class=\"c1\"># unreviewed and unshipped</span>\n    <span class=\"n\">imgsets_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_imgsetids</span><span class=\"p\">(</span><span class=\"n\">gid_list_</span><span class=\"p\">)</span>\n    <span class=\"n\">nonspecial_imgset_ids</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">ids</span><span class=\"p\">,</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">not_list</span><span class=\"p\">(</span><span class=\"n\">mask</span><span class=\"p\">))</span>\n                             <span class=\"k\">for</span> <span class=\"n\">mask</span><span class=\"p\">,</span> <span class=\"n\">ids</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">unflat_map</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">is_special_imageset</span><span class=\"p\">,</span> <span class=\"n\">imgsets_list</span><span class=\"p\">),</span> <span class=\"n\">imgsets_list</span><span class=\"p\">)]</span>\n    <span class=\"n\">flags_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">unflat_map</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_imageset_shipped_flags</span><span class=\"p\">,</span> <span class=\"n\">nonspecial_imgset_ids</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Keep images that have at least one instance in an unshipped non-special set</span>\n    <span class=\"n\">flag_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"ow\">not</span> <span class=\"nb\">all</span><span class=\"p\">(</span><span class=\"n\">flags</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">flags</span> <span class=\"ow\">in</span> <span class=\"n\">flags_list</span><span class=\"p\">]</span>\n    <span class=\"n\">gid_list_</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">gid_list_</span><span class=\"p\">,</span> <span class=\"n\">flag_list</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Filter by if the user has specified the image has been reviewed manually</span>\n    <span class=\"n\">flag_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_reviewed</span><span class=\"p\">(</span><span class=\"n\">gid_list_</span><span class=\"p\">)</span>\n    <span class=\"n\">gid_list_</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">gid_list_</span><span class=\"p\">,</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">not_list</span><span class=\"p\">(</span><span class=\"n\">flag_list</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">gid_list_</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_get_reviewed_gids</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">):</span>\n    <span class=\"n\">gid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_gids</span><span class=\"p\">()</span>\n    <span class=\"n\">OLD</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n    <span class=\"k\">if</span> <span class=\"n\">OLD</span><span class=\"p\">:</span>\n        <span class=\"c1\"># hack</span>\n        <span class=\"n\">flag_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">detect_cnn_yolo_exists</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n        <span class=\"n\">gid_list_</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">filter_items</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">,</span> <span class=\"n\">flag_list</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">flag_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_reviewed</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n        <span class=\"n\">gid_list_</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">,</span> <span class=\"n\">flag_list</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">gid_list_</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_get_gids_in_imgsetid</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">imgsetid</span><span class=\"p\">):</span>\n    <span class=\"n\">gid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">executeone</span><span class=\"p\">(</span>\n        <span class=\"sd\">&#39;&#39;&#39;</span>\n<span class=\"sd\">        SELECT image_rowid</span>\n<span class=\"sd\">        FROM {GSG_RELATION_TABLE}</span>\n<span class=\"sd\">        WHERE</span>\n<span class=\"sd\">            imageset_rowid==?</span>\n<span class=\"sd\">        &#39;&#39;&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"p\">),</span>\n        <span class=\"n\">params</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">imgsetid</span><span class=\"p\">,))</span>\n    <span class=\"k\">return</span> <span class=\"n\">gid_list</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_get_dirty_reviewed_gids</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">imgsetid</span><span class=\"p\">):</span>\n    <span class=\"n\">gid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">executeone</span><span class=\"p\">(</span>\n        <span class=\"sd\">&#39;&#39;&#39;</span>\n<span class=\"sd\">        SELECT image_rowid</span>\n<span class=\"sd\">        FROM {GSG_RELATION_TABLE}</span>\n<span class=\"sd\">        WHERE</span>\n<span class=\"sd\">            imageset_rowid==? AND</span>\n<span class=\"sd\">            image_rowid NOT IN (SELECT rowid FROM {IMAGE_TABLE} WHERE image_toggle_reviewed=1)</span>\n<span class=\"sd\">        &#39;&#39;&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"p\">),</span>\n        <span class=\"n\">params</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">imgsetid</span><span class=\"p\">,))</span>\n    <span class=\"k\">return</span> <span class=\"n\">gid_list</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_get_exemplar_gids</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">):</span>\n    <span class=\"n\">gid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">executeone</span><span class=\"p\">(</span>\n        <span class=\"sd\">&#39;&#39;&#39;</span>\n<span class=\"sd\">        SELECT image_rowid</span>\n<span class=\"sd\">        FROM {ANNOTATION_TABLE}</span>\n<span class=\"sd\">        WHERE annot_exemplar_flag=1</span>\n<span class=\"sd\">        &#39;&#39;&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">gid_list</span>\n\n\n<div class=\"viewcode-block\" id=\"print_dbinfo\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.print_dbinfo\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">print_dbinfo</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.other</span> <span class=\"k\">import</span> <span class=\"n\">dbinfo</span>\n    <span class=\"n\">dbinfo</span><span class=\"o\">.</span><span class=\"n\">get_dbinfo</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">kwargs</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"print_infostr\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.print_infostr\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">print_infostr</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_infostr</span><span class=\"p\">())</span></div>\n\n\n<div class=\"viewcode-block\" id=\"print_annotation_table\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.print_annotation_table\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">print_annotation_table</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">verbosity</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">exclude_columns</span><span class=\"o\">=</span><span class=\"p\">[],</span> <span class=\"n\">include_columns</span><span class=\"o\">=</span><span class=\"p\">[]):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Dumps annotation table to stdout</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (IBEISController):</span>\n<span class=\"sd\">        verbosity (int):</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; verbosity = 1</span>\n<span class=\"sd\">        &gt;&gt;&gt; print_annotation_table(ibs, verbosity)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">exclude_columns</span> <span class=\"o\">=</span> <span class=\"n\">exclude_columns</span><span class=\"p\">[:]</span>\n    <span class=\"k\">if</span> <span class=\"n\">verbosity</span> <span class=\"o\">&lt;</span> <span class=\"mi\">5</span><span class=\"p\">:</span>\n        <span class=\"n\">exclude_columns</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;annot_uuid&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;annot_verts&#39;</span><span class=\"p\">]</span>\n    <span class=\"k\">if</span> <span class=\"n\">verbosity</span> <span class=\"o\">&lt;</span> <span class=\"mi\">4</span><span class=\"p\">:</span>\n        <span class=\"n\">exclude_columns</span> <span class=\"o\">+=</span> <span class=\"p\">[</span>\n            <span class=\"s1\">&#39;annot_xtl&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;annot_ytl&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;annot_width&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;annot_height&#39;</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;annot_theta&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;annot_yaw&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;annot_detect_confidence&#39;</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;annot_note&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;annot_parent_rowid&#39;</span><span class=\"p\">]</span>\n    <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">include_columns</span><span class=\"p\">:</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">exclude_columns</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n            <span class=\"k\">pass</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">get_table_csv</span><span class=\"p\">(</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">ANNOTATION_TABLE</span><span class=\"p\">,</span> <span class=\"n\">exclude_columns</span><span class=\"o\">=</span><span class=\"n\">exclude_columns</span><span class=\"p\">))</span></div>\n\n\n<div class=\"viewcode-block\" id=\"print_annotmatch_table\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.print_annotmatch_table\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">print_annotmatch_table</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Dumps annotation match table to stdout</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (IBEISController):  ibeis controller object</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --exec-print_annotmatch_table</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --exec-print_annotmatch_table --db PZ_Master1</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # SCRIPT</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(defaultdb=&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = print_annotmatch_table(ibs)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">exclude_columns</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;annotmatch_confidence&#39;</span><span class=\"p\">]</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">get_table_csv</span><span class=\"p\">(</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">ANNOTMATCH_TABLE</span><span class=\"p\">,</span> <span class=\"n\">exclude_columns</span><span class=\"o\">=</span><span class=\"n\">exclude_columns</span><span class=\"p\">))</span></div>\n\n\n<div class=\"viewcode-block\" id=\"print_chip_table\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.print_chip_table\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">print_chip_table</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; Dumps chip table to stdout &quot;&quot;&quot;</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">get_table_csv</span><span class=\"p\">(</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">CHIP_TABLE</span><span class=\"p\">))</span></div>\n\n\n<div class=\"viewcode-block\" id=\"print_feat_table\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.print_feat_table\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">print_feat_table</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; Dumps chip table to stdout &quot;&quot;&quot;</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">get_table_csv</span><span class=\"p\">(</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">FEATURE_TABLE</span><span class=\"p\">,</span> <span class=\"n\">exclude_columns</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"s1\">&#39;feature_keypoints&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;feature_vecs&#39;</span><span class=\"p\">]))</span></div>\n\n\n<div class=\"viewcode-block\" id=\"print_image_table\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.print_image_table\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">print_image_table</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; Dumps chip table to stdout &quot;&quot;&quot;</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">get_table_csv</span><span class=\"p\">(</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">IMAGE_TABLE</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">))</span></div>\n    <span class=\"c1\">#, exclude_columns=[&#39;image_rowid&#39;]))</span>\n\n\n<div class=\"viewcode-block\" id=\"print_party_table\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.print_party_table\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">print_party_table</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; Dumps chip table to stdout &quot;&quot;&quot;</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">get_table_csv</span><span class=\"p\">(</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">PARTY_TABLE</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">))</span></div>\n    <span class=\"c1\">#, exclude_columns=[&#39;image_rowid&#39;]))</span>\n\n\n<div class=\"viewcode-block\" id=\"print_lblannot_table\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.print_lblannot_table\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">print_lblannot_table</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; Dumps lblannot table to stdout &quot;&quot;&quot;</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">get_table_csv</span><span class=\"p\">(</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">LBLANNOT_TABLE</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">))</span></div>\n\n\n<div class=\"viewcode-block\" id=\"print_name_table\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.print_name_table\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">print_name_table</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; Dumps name table to stdout &quot;&quot;&quot;</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">get_table_csv</span><span class=\"p\">(</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">NAME_TABLE</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">))</span></div>\n\n\n<div class=\"viewcode-block\" id=\"print_species_table\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.print_species_table\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">print_species_table</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; Dumps species table to stdout &quot;&quot;&quot;</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">get_table_csv</span><span class=\"p\">(</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">SPECIES_TABLE</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">))</span></div>\n\n\n<div class=\"viewcode-block\" id=\"print_alr_table\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.print_alr_table\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">print_alr_table</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; Dumps alr table to stdout &quot;&quot;&quot;</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">get_table_csv</span><span class=\"p\">(</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">AL_RELATION_TABLE</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">))</span></div>\n\n\n<div class=\"viewcode-block\" id=\"print_config_table\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.print_config_table\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">print_config_table</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; Dumps config table to stdout &quot;&quot;&quot;</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">get_table_csv</span><span class=\"p\">(</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">CONFIG_TABLE</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">))</span></div>\n\n\n<div class=\"viewcode-block\" id=\"print_imageset_table\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.print_imageset_table\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">print_imageset_table</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; Dumps imageset table to stdout</span>\n\n<span class=\"sd\">    Kwargs:</span>\n<span class=\"sd\">        exclude_columns (list):</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">get_table_csv</span><span class=\"p\">(</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">IMAGESET_TABLE</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">))</span></div>\n\n\n<div class=\"viewcode-block\" id=\"print_egpairs_table\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.print_egpairs_table\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">print_egpairs_table</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; Dumps egpairs table to stdout &quot;&quot;&quot;</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">get_table_csv</span><span class=\"p\">(</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">GSG_RELATION_TABLE</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">))</span></div>\n\n\n<div class=\"viewcode-block\" id=\"print_tables\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.print_tables\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">print_tables</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">exclude_columns</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">exclude_tables</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">exclude_columns</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">exclude_columns</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;annot_uuid&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;lblannot_uuid&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;annot_verts&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;feature_keypoints&#39;</span><span class=\"p\">,</span>\n                           <span class=\"s1\">&#39;feature_vecs&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;image_uuid&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;image_uri&#39;</span><span class=\"p\">]</span>\n    <span class=\"k\">if</span> <span class=\"n\">exclude_tables</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">exclude_tables</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;masks&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;recognitions&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;chips&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;features&#39;</span><span class=\"p\">]</span>\n    <span class=\"k\">for</span> <span class=\"n\">table_name</span> <span class=\"ow\">in</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">get_table_names</span><span class=\"p\">():</span>\n        <span class=\"k\">if</span> <span class=\"n\">table_name</span> <span class=\"ow\">in</span> <span class=\"n\">exclude_tables</span><span class=\"p\">:</span>\n            <span class=\"k\">continue</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">get_table_csv</span><span class=\"p\">(</span><span class=\"n\">table_name</span><span class=\"p\">,</span> <span class=\"n\">exclude_columns</span><span class=\"o\">=</span><span class=\"n\">exclude_columns</span><span class=\"p\">))</span>\n    <span class=\"c1\">#ibs.print_image_table()</span>\n    <span class=\"c1\">#ibs.print_annotation_table()</span>\n    <span class=\"c1\">#ibs.print_lblannots_table()</span>\n    <span class=\"c1\">#ibs.print_alr_table()</span>\n    <span class=\"c1\">#ibs.print_config_table()</span>\n    <span class=\"c1\">#ibs.print_chip_table()</span>\n    <span class=\"c1\">#ibs.print_feat_table()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"print_contributor_table\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.print_contributor_table\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">print_contributor_table</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">verbosity</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">exclude_columns</span><span class=\"o\">=</span><span class=\"p\">[]):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Dumps annotation table to stdout</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (IBEISController):</span>\n<span class=\"sd\">        verbosity (int):</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; verbosity = 1</span>\n<span class=\"sd\">        &gt;&gt;&gt; print_contributor_table(ibs, verbosity)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">exclude_columns</span> <span class=\"o\">=</span> <span class=\"n\">exclude_columns</span><span class=\"p\">[:]</span>\n    <span class=\"k\">if</span> <span class=\"n\">verbosity</span> <span class=\"o\">&lt;</span> <span class=\"mi\">5</span><span class=\"p\">:</span>\n        <span class=\"n\">exclude_columns</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;contributor_uuid&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">exclude_columns</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;contributor_location_city&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">exclude_columns</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;contributor_location_state&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">exclude_columns</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;contributor_location_country&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">exclude_columns</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;contributor_location_zip&#39;</span><span class=\"p\">]</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">get_table_csv</span><span class=\"p\">(</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">CONTRIBUTOR_TABLE</span><span class=\"p\">,</span> <span class=\"n\">exclude_columns</span><span class=\"o\">=</span><span class=\"n\">exclude_columns</span><span class=\"p\">))</span></div>\n\n\n<div class=\"viewcode-block\" id=\"is_aid_unknown\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.is_aid_unknown\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">is_aid_unknown</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; Returns if an annotation has been given a name (even if that name is temporary) &quot;&quot;&quot;</span>\n    <span class=\"n\">nid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_name_rowids</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">is_nid_unknown</span><span class=\"p\">(</span><span class=\"n\">nid_list</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"batch_rename_consecutive_via_species\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.batch_rename_consecutive_via_species\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">batch_rename_consecutive_via_species</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">imgsetid</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">location_text</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                                         <span class=\"n\">notify_wildbook</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">assert_wildbook</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">ibeis</span>\n    <span class=\"n\">wildbook_existing_name_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">if</span> <span class=\"n\">notify_wildbook</span> <span class=\"ow\">and</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">ENABLE_WILDBOOK_SIGNAL</span><span class=\"p\">:</span>\n        <span class=\"n\">wildbook_existing_name_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">wildbook_get_existing_names</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">wildbook_existing_name_list</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">wildbook_existing_name_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">wildbook_existing_name_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n    <span class=\"sd\">&quot;&quot;&quot; actually sets the new consecutive names&quot;&quot;&quot;</span>\n    <span class=\"n\">new_nid_list</span><span class=\"p\">,</span> <span class=\"n\">new_name_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_consecutive_newname_list_via_species</span><span class=\"p\">(</span>\n        <span class=\"n\">imgsetid</span><span class=\"o\">=</span><span class=\"n\">imgsetid</span><span class=\"p\">,</span> <span class=\"n\">location_text</span><span class=\"o\">=</span><span class=\"n\">location_text</span><span class=\"p\">,</span>\n        <span class=\"n\">wildbook_existing_name_list</span><span class=\"o\">=</span><span class=\"n\">wildbook_existing_name_list</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_conflict_names</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">new_nid_list</span><span class=\"p\">,</span> <span class=\"n\">new_name_list</span><span class=\"p\">):</span>\n        <span class=\"n\">other_nid_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_nids</span><span class=\"p\">())</span> <span class=\"o\">-</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">new_nid_list</span><span class=\"p\">))</span>\n        <span class=\"n\">other_names</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_name_texts</span><span class=\"p\">(</span><span class=\"n\">other_nid_list</span><span class=\"p\">)</span>\n        <span class=\"n\">conflict_names</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">other_names</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">intersection</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">new_name_list</span><span class=\"p\">)))</span>\n        <span class=\"k\">return</span> <span class=\"n\">conflict_names</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_assert_no_name_conflicts</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">new_nid_list</span><span class=\"p\">,</span> <span class=\"n\">new_name_list</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;checking for conflicting names&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">conflit_names</span> <span class=\"o\">=</span> <span class=\"n\">get_conflict_names</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">new_nid_list</span><span class=\"p\">,</span> <span class=\"n\">new_name_list</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">conflit_names</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;conflit_names=</span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">conflit_names</span><span class=\"p\">,)</span>\n\n    <span class=\"c1\"># Check to make sure new names dont conflict with other names</span>\n    <span class=\"n\">_assert_no_name_conflicts</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">new_nid_list</span><span class=\"p\">,</span> <span class=\"n\">new_name_list</span><span class=\"p\">)</span>\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_name_texts</span><span class=\"p\">(</span><span class=\"n\">new_nid_list</span><span class=\"p\">,</span> <span class=\"n\">new_name_list</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">NOT_QUIET</span><span class=\"p\">,</span>\n                       <span class=\"n\">notify_wildbook</span><span class=\"o\">=</span><span class=\"n\">notify_wildbook</span><span class=\"p\">,</span> <span class=\"n\">assert_wildbook</span><span class=\"o\">=</span><span class=\"n\">assert_wildbook</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_location_text\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.get_location_text\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">get_location_text</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">location_text</span><span class=\"p\">,</span> <span class=\"n\">default_location_text</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">location_text</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Check for Lewa server</span>\n        <span class=\"n\">comp_name</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_computer_name</span><span class=\"p\">()</span>\n        <span class=\"n\">db_name</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">dbname</span>\n        <span class=\"n\">is_lewa</span> <span class=\"o\">=</span> <span class=\"n\">comp_name</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s1\">&#39;ibeis.cs.uic.edu&#39;</span><span class=\"p\">]</span> <span class=\"ow\">or</span> <span class=\"n\">db_name</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s1\">&#39;LEWA&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;lewa_grevys&#39;</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">is_lewa</span><span class=\"p\">:</span>\n            <span class=\"n\">location_text</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;LWC&#39;</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">location_text</span> <span class=\"o\">=</span> <span class=\"n\">default_location_text</span>\n    <span class=\"k\">return</span> <span class=\"n\">location_text</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_consecutive_newname_list_via_species\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.get_consecutive_newname_list_via_species\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_consecutive_newname_list_via_species</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">imgsetid</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">location_text</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                                             <span class=\"n\">wildbook_existing_name_list</span><span class=\"o\">=</span><span class=\"p\">[]):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Just creates the nams, but does not set them</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (IBEISController):  ibeis controller object</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --test-get_consecutive_newname_list_via_species</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs._clean_species()</span>\n<span class=\"sd\">        &gt;&gt;&gt; imgsetid = None</span>\n<span class=\"sd\">        &gt;&gt;&gt; new_nid_list, new_name_list = get_consecutive_newname_list_via_species(ibs, imgsetid=imgsetid)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = ut.repr2((new_nid_list, new_name_list), nl=1)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">        (</span>\n<span class=\"sd\">            [1, 2, 3, 4, 5, 6, 7],</span>\n<span class=\"sd\">            [&#39;IBEIS_PZ_0001&#39;, &#39;IBEIS_PZ_0002&#39;, &#39;IBEIS_UNKNOWN_0001&#39;, &#39;IBEIS_UNKNOWN_0002&#39;, &#39;IBEIS_GZ_0001&#39;, &#39;IBEIS_PB_0001&#39;, &#39;IBEIS_UNKNOWN_0003&#39;],</span>\n<span class=\"sd\">        )</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs._clean_species()</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs.delete_all_imagesets()</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs.compute_occurrences(config={&#39;use_gps&#39;: False, &#39;seconds_thresh&#39;: 600})</span>\n<span class=\"sd\">        &gt;&gt;&gt; imgsetid = ibs.get_valid_imgsetids()[1]</span>\n<span class=\"sd\">        &gt;&gt;&gt; new_nid_list, new_name_list = get_consecutive_newname_list_via_species(ibs, imgsetid=imgsetid)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = ut.repr2((new_nid_list, new_name_list), nl=1)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">        (</span>\n<span class=\"sd\">            [4, 5, 6, 7],</span>\n<span class=\"sd\">            [&#39;IBEIS_UNKNOWN_Occurrence_1_0001&#39;, &#39;IBEIS_GZ_Occurrence_1_0001&#39;, &#39;IBEIS_PB_Occurrence_1_0001&#39;, &#39;IBEIS_UNKNOWN_Occurrence_1_0002&#39;],</span>\n<span class=\"sd\">        )</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">wildbook_existing_name_set</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">wildbook_existing_name_list</span><span class=\"p\">)</span>\n    <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">wildbook_existing_name_set</span><span class=\"p\">),</span> <span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[ibs] get_consecutive_newname_list_via_species with </span><span class=\"si\">%d</span><span class=\"s1\"> existing WB names&#39;</span> <span class=\"o\">%</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n    <span class=\"n\">location_text</span> <span class=\"o\">=</span> <span class=\"n\">get_location_text</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">location_text</span><span class=\"p\">,</span> <span class=\"s1\">&#39;IBEIS&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">delete_empty_nids</span><span class=\"p\">()</span>\n    <span class=\"n\">nid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_nids</span><span class=\"p\">(</span><span class=\"n\">imgsetid</span><span class=\"o\">=</span><span class=\"n\">imgsetid</span><span class=\"p\">)</span>\n    <span class=\"c1\">#name_list = ibs.get_name_texts(nid_list)</span>\n    <span class=\"n\">aids_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_name_aids</span><span class=\"p\">(</span><span class=\"n\">nid_list</span><span class=\"p\">)</span>\n\n    <span class=\"n\">species_rowids_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">unflat_map</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_species_rowids</span><span class=\"p\">,</span> <span class=\"n\">aids_list</span><span class=\"p\">)</span>\n    <span class=\"n\">unique_species_rowids_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">unique_ordered</span><span class=\"p\">,</span> <span class=\"n\">species_rowids_list</span><span class=\"p\">))</span>\n    <span class=\"n\">species_rowid_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">unique_species_rowids_list</span><span class=\"p\">)</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">species_rowid_list</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">nid_list</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">AssertionError</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;WARNING: Names assigned to annotations with inconsistent species&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">inconsistent_nid_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">nid</span><span class=\"p\">,</span> <span class=\"n\">unique_species_rowid_list</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">nid_list</span><span class=\"p\">,</span> <span class=\"n\">unique_species_rowids_list</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">unique_species_rowid_list</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                <span class=\"n\">inconsistent_nid_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">nid</span><span class=\"p\">)</span>\n        <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Inconsistent nid_list = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">inconsistent_nid_list</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">)</span>\n    <span class=\"n\">code_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_species_codes</span><span class=\"p\">(</span><span class=\"n\">species_rowid_list</span><span class=\"p\">)</span>\n\n    <span class=\"n\">_code2_count</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ddict</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_next_index</span><span class=\"p\">(</span><span class=\"n\">code</span><span class=\"p\">):</span>\n        <span class=\"n\">_code2_count</span><span class=\"p\">[</span><span class=\"n\">code</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">return</span> <span class=\"n\">_code2_count</span><span class=\"p\">[</span><span class=\"n\">code</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_new_name</span><span class=\"p\">(</span><span class=\"n\">code</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">imgsetid</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">imgset_text</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_imageset_text</span><span class=\"p\">(</span><span class=\"n\">imgsetid</span><span class=\"p\">)</span>\n            <span class=\"n\">imgset_text</span> <span class=\"o\">=</span> <span class=\"n\">imgset_text</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">&#39; &#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;_&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\&#39;</span><span class=\"s1\">&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">&#39;&quot;&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">location_text</span><span class=\"p\">,</span> <span class=\"n\">code</span><span class=\"p\">,</span> <span class=\"n\">imgset_text</span><span class=\"p\">,</span> <span class=\"n\">get_next_index</span><span class=\"p\">(</span><span class=\"n\">code</span><span class=\"p\">),</span> <span class=\"p\">)</span>\n            <span class=\"n\">new_name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"si\">%s</span><span class=\"s1\">_</span><span class=\"si\">%s</span><span class=\"s1\">_</span><span class=\"si\">%s</span><span class=\"s1\">_</span><span class=\"si\">%04d</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">args</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">location_text</span><span class=\"p\">,</span> <span class=\"n\">code</span><span class=\"p\">,</span> <span class=\"n\">get_next_index</span><span class=\"p\">(</span><span class=\"n\">code</span><span class=\"p\">),</span> <span class=\"p\">)</span>\n            <span class=\"n\">new_name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"si\">%s</span><span class=\"s1\">_</span><span class=\"si\">%s</span><span class=\"s1\">_</span><span class=\"si\">%04d</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">args</span>\n        <span class=\"k\">return</span> <span class=\"n\">new_name</span>\n\n    <span class=\"n\">new_name_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">code</span> <span class=\"ow\">in</span> <span class=\"n\">code_list</span><span class=\"p\">:</span>\n        <span class=\"n\">new_name</span> <span class=\"o\">=</span> <span class=\"n\">get_new_name</span><span class=\"p\">(</span><span class=\"n\">code</span><span class=\"p\">)</span>\n        <span class=\"k\">while</span> <span class=\"n\">new_name</span> <span class=\"ow\">in</span> <span class=\"n\">wildbook_existing_name_set</span><span class=\"p\">:</span>\n            <span class=\"n\">new_name</span> <span class=\"o\">=</span> <span class=\"n\">get_new_name</span><span class=\"p\">(</span><span class=\"n\">code</span><span class=\"p\">)</span>\n        <span class=\"n\">new_name_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">new_name</span><span class=\"p\">)</span>\n\n    <span class=\"n\">new_nid_list</span> <span class=\"o\">=</span> <span class=\"n\">nid_list</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">new_nid_list</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">new_name_list</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">new_nid_list</span><span class=\"p\">,</span> <span class=\"n\">new_name_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"set_annot_names_to_same_new_name\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.set_annot_names_to_same_new_name\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">set_annot_names_to_same_new_name</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">):</span>\n    <span class=\"n\">new_nid</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">make_next_nids</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">VERBOSE</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Setting aid_list=</span><span class=\"si\">{aid_list}</span><span class=\"s1\"> to have new_nid=</span><span class=\"si\">{new_nid}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n            <span class=\"n\">aid_list</span><span class=\"o\">=</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">new_nid</span><span class=\"o\">=</span><span class=\"n\">new_nid</span><span class=\"p\">))</span>\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_annot_name_rowids</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">new_nid</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">))</span></div>\n\n\n<div class=\"viewcode-block\" id=\"set_annot_names_to_different_new_names\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.set_annot_names_to_different_new_names\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">set_annot_names_to_different_new_names</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"n\">new_nid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">make_next_nids</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">))</span>\n    <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">VERBOSE</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Setting aid_list=</span><span class=\"si\">{aid_list}</span><span class=\"s1\"> to have new_nid_list=</span><span class=\"si\">{new_nid_list}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n            <span class=\"n\">aid_list</span><span class=\"o\">=</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">new_nid_list</span><span class=\"o\">=</span><span class=\"n\">new_nid_list</span><span class=\"p\">))</span>\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_annot_name_rowids</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">new_nid_list</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"make_next_nids\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.make_next_nids\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">make_next_nids</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">num</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">str_format</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">species_text</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">location_text</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    makes name and adds it to the database returning the newly added name rowid(s)</span>\n\n<span class=\"sd\">    CAUTION; changes database state</span>\n\n<span class=\"sd\">    SeeAlso:</span>\n<span class=\"sd\">        make_next_name</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">next_names</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">make_next_name</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"o\">=</span><span class=\"n\">num</span><span class=\"p\">,</span> <span class=\"n\">str_format</span><span class=\"o\">=</span><span class=\"n\">str_format</span><span class=\"p\">,</span>\n                                    <span class=\"n\">species_text</span><span class=\"o\">=</span><span class=\"n\">species_text</span><span class=\"p\">,</span>\n                                    <span class=\"n\">location_text</span><span class=\"o\">=</span><span class=\"n\">location_text</span><span class=\"p\">)</span>\n    <span class=\"n\">next_nids</span>  <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">add_names</span><span class=\"p\">(</span><span class=\"n\">next_names</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">next_nids</span></div>\n\n\n<div class=\"viewcode-block\" id=\"make_next_name\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.make_next_name\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">make_next_name</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">num</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">str_format</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">species_text</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">location_text</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; Creates a number of names which are not in the database, but does not</span>\n<span class=\"sd\">    add them</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (IBEISController):  ibeis controller object</span>\n<span class=\"sd\">        num (None):</span>\n<span class=\"sd\">        str_format (int): either 1 or 2</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        str: next_name</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --test-make_next_name</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs1 = ibeis.opendb(&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs2 = ibeis.opendb(&#39;PZ_MTEST&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs3 = ibeis.opendb(&#39;NAUT_test&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs1._clean_species()</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs2._clean_species()</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs3._clean_species()</span>\n<span class=\"sd\">        &gt;&gt;&gt; num = None</span>\n<span class=\"sd\">        &gt;&gt;&gt; str_format = 2</span>\n<span class=\"sd\">        &gt;&gt;&gt; next_name1 = make_next_name(ibs1, num, str_format)</span>\n<span class=\"sd\">        &gt;&gt;&gt; next_name2 = make_next_name(ibs2, num, str_format)</span>\n<span class=\"sd\">        &gt;&gt;&gt; next_name3 = make_next_name(ibs3, num, str_format)</span>\n<span class=\"sd\">        &gt;&gt;&gt; next_name4 = make_next_name(ibs1, num, str_format, const.TEST_SPECIES.ZEB_GREVY)</span>\n<span class=\"sd\">        &gt;&gt;&gt; name_list = [next_name1, next_name2, next_name3, next_name4]</span>\n<span class=\"sd\">        &gt;&gt;&gt; next_name_list1 = make_next_name(ibs2, 5, str_format)</span>\n<span class=\"sd\">        &gt;&gt;&gt; temp_nids = ibs2.add_names([&#39;IBEIS_PZ_0045&#39;, &#39;IBEIS_PZ_0048&#39;])</span>\n<span class=\"sd\">        &gt;&gt;&gt; next_name_list2 = make_next_name(ibs2, 5, str_format)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs2.delete_names(temp_nids)</span>\n<span class=\"sd\">        &gt;&gt;&gt; next_name_list3 = make_next_name(ibs2, 5, str_format)</span>\n<span class=\"sd\">        &gt;&gt;&gt; # FIXME: nautiluses are not working right</span>\n<span class=\"sd\">        &gt;&gt;&gt; names = (name_list, next_name_list1, next_name_list2, next_name_list3)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = ut.repr4(names)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">        (</span>\n<span class=\"sd\">            [&#39;IBEIS_PZ_0008&#39;, &#39;IBEIS_PZ_0042&#39;, &#39;IBEIS_UNKNOWN_0004&#39;, &#39;IBEIS_GZ_0008&#39;],</span>\n<span class=\"sd\">            [&#39;IBEIS_PZ_0042&#39;, &#39;IBEIS_PZ_0043&#39;, &#39;IBEIS_PZ_0044&#39;, &#39;IBEIS_PZ_0045&#39;, &#39;IBEIS_PZ_0046&#39;],</span>\n<span class=\"sd\">            [&#39;IBEIS_PZ_0044&#39;, &#39;IBEIS_PZ_0046&#39;, &#39;IBEIS_PZ_0047&#39;, &#39;IBEIS_PZ_0049&#39;, &#39;IBEIS_PZ_0050&#39;],</span>\n<span class=\"sd\">            [&#39;IBEIS_PZ_0042&#39;, &#39;IBEIS_PZ_0043&#39;, &#39;IBEIS_PZ_0044&#39;, &#39;IBEIS_PZ_0045&#39;, &#39;IBEIS_PZ_0046&#39;],</span>\n<span class=\"sd\">        )</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\"># HACK TO FORCE TIMESTAMPS FOR NEW NAMES</span>\n    <span class=\"c1\">#str_format = 1</span>\n    <span class=\"k\">if</span> <span class=\"n\">species_text</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"c1\"># TODO: optionally specify qreq_ or qparams?</span>\n        <span class=\"n\">species_text</span>  <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">detect_cfg</span><span class=\"o\">.</span><span class=\"n\">species_text</span>\n    <span class=\"n\">location_text</span> <span class=\"o\">=</span> <span class=\"n\">get_location_text</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">location_text</span><span class=\"p\">,</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">other_cfg</span><span class=\"o\">.</span><span class=\"n\">location_for_names</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">num</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">num_</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">num_</span> <span class=\"o\">=</span> <span class=\"n\">num</span>\n    <span class=\"c1\"># Assign new names</span>\n    <span class=\"n\">nid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">_get_all_known_name_rowids</span><span class=\"p\">()</span>\n    <span class=\"n\">names_used_list</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_name_texts</span><span class=\"p\">(</span><span class=\"n\">nid_list</span><span class=\"p\">))</span>\n    <span class=\"n\">base_index</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">nid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">next_name_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">while</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">next_name_list</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">num_</span><span class=\"p\">:</span>\n        <span class=\"n\">base_index</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">if</span> <span class=\"n\">str_format</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"n\">user_id</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_user_name</span><span class=\"p\">()</span>\n            <span class=\"n\">timestamp</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_timestamp</span><span class=\"p\">(</span><span class=\"s1\">&#39;tag&#39;</span><span class=\"p\">)</span>\n            <span class=\"c1\">#timestamp_suffix = &#39;_TMP_&#39;</span>\n            <span class=\"n\">timestamp_suffix</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;_&#39;</span>\n            <span class=\"n\">timestamp_prefix</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>\n            <span class=\"n\">name_prefix</span> <span class=\"o\">=</span> <span class=\"n\">timestamp_prefix</span> <span class=\"o\">+</span> <span class=\"n\">timestamp</span> <span class=\"o\">+</span> <span class=\"n\">timestamp_suffix</span> <span class=\"o\">+</span> <span class=\"n\">user_id</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;_&#39;</span>\n        <span class=\"k\">elif</span> <span class=\"n\">str_format</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n            <span class=\"n\">species_rowid</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_species_rowids_from_text</span><span class=\"p\">(</span><span class=\"n\">species_text</span><span class=\"p\">)</span>\n            <span class=\"n\">species_code</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_species_codes</span><span class=\"p\">(</span><span class=\"n\">species_rowid</span><span class=\"p\">)</span>\n            <span class=\"n\">name_prefix</span> <span class=\"o\">=</span> <span class=\"n\">location_text</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;_&#39;</span> <span class=\"o\">+</span> <span class=\"n\">species_code</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;_&#39;</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s1\">&#39;Invalid str_format supplied&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">next_name</span> <span class=\"o\">=</span> <span class=\"n\">name_prefix</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;</span><span class=\"si\">%04d</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">base_index</span>\n        <span class=\"k\">if</span> <span class=\"n\">next_name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">names_used_list</span><span class=\"p\">:</span>\n            <span class=\"c1\">#names_used_list.add(next_name)</span>\n            <span class=\"n\">next_name_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">next_name</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Return a list or a string</span>\n    <span class=\"k\">if</span> <span class=\"n\">num</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">next_name_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">next_name_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"group_annots_by_name\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.group_annots_by_name\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"nd\">@profile</span>\n<span class=\"k\">def</span> <span class=\"nf\">group_annots_by_name</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">distinguish_unknowns</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">assume_unique</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    This function is probably the fastest of its siblings</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (IBEISController):  ibeis controller object</span>\n<span class=\"sd\">        aid_list (list):</span>\n<span class=\"sd\">        distinguish_unknowns (bool):</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        tuple: grouped_aids, unique_nids</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --test-group_annots_by_name</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; aid_list = ibs.get_valid_aids()</span>\n<span class=\"sd\">        &gt;&gt;&gt; distinguish_unknowns = True</span>\n<span class=\"sd\">        &gt;&gt;&gt; grouped_aids, unique_nids = group_annots_by_name(ibs, aid_list, distinguish_unknowns)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = str([aids.tolist() for aids in grouped_aids])</span>\n<span class=\"sd\">        &gt;&gt;&gt; result += &#39;\\n&#39; + str(unique_nids.tolist())</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">        [[11], [9], [4], [1], [2, 3], [5, 6], [7], [8], [10], [12], [13]]</span>\n<span class=\"sd\">        [-11, -9, -4, -1, 1, 2, 3, 4, 5, 6, 7]</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">nid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_name_rowids</span><span class=\"p\">(</span>\n        <span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">distinguish_unknowns</span><span class=\"o\">=</span><span class=\"n\">distinguish_unknowns</span><span class=\"p\">,</span> <span class=\"n\">assume_unique</span><span class=\"o\">=</span><span class=\"n\">assume_unique</span><span class=\"p\">)</span>\n    <span class=\"n\">nid_list</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">nid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">aid_list</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">unique_nids</span><span class=\"p\">,</span> <span class=\"n\">groupxs_list</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">group_indices</span><span class=\"p\">(</span><span class=\"n\">nid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">grouped_aids</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">apply_grouping</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">groupxs_list</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">grouped_aids</span><span class=\"p\">,</span> <span class=\"n\">unique_nids</span></div>\n\n\n<span class=\"c1\">#def group_annots_by_known_names_nochecks(ibs, aid_list):</span>\n<span class=\"c1\">#    nid_list = ibs.get_annot_name_rowids(aid_list)</span>\n<span class=\"c1\">#    nid2_aids = ut.group_items(aid_list, nid_list)</span>\n<span class=\"c1\">#    return list(nid2_aids.values())</span>\n\n\n<div class=\"viewcode-block\" id=\"group_annots_by_known_names\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.group_annots_by_known_names\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">group_annots_by_known_names</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">checks</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    FIXME; rectify this</span>\n<span class=\"sd\">    #&gt;&gt;&gt; import ibeis  # NOQA</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --test-group_annots_by_known_names</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(db=&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; aid_list = ibs.get_valid_aids()</span>\n<span class=\"sd\">        &gt;&gt;&gt; [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]</span>\n<span class=\"sd\">        &gt;&gt;&gt; known_aids_list, unknown_aids = group_annots_by_known_names(ibs, aid_list)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = ut.repr2(sorted(known_aids_list)) + &#39;\\n&#39;</span>\n<span class=\"sd\">        &gt;&gt;&gt; result += ut.repr2(unknown_aids)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">        [[2, 3], [5, 6], [7], [8], [10], [12], [13]]</span>\n<span class=\"sd\">        [11, 9, 4, 1]</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">nid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_name_rowids</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">nid2_aids</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">group_items</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">nid_list</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">aid_gen</span><span class=\"p\">():</span>\n        <span class=\"k\">return</span> <span class=\"n\">six</span><span class=\"o\">.</span><span class=\"n\">itervalues</span><span class=\"p\">(</span><span class=\"n\">nid2_aids</span><span class=\"p\">)</span>\n    <span class=\"n\">isunknown_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">is_nid_unknown</span><span class=\"p\">(</span><span class=\"n\">six</span><span class=\"o\">.</span><span class=\"n\">iterkeys</span><span class=\"p\">(</span><span class=\"n\">nid2_aids</span><span class=\"p\">))</span>\n    <span class=\"n\">known_aids_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ifilterfalse_items</span><span class=\"p\">(</span><span class=\"n\">aid_gen</span><span class=\"p\">(),</span> <span class=\"n\">isunknown_list</span><span class=\"p\">))</span>\n    <span class=\"n\">unknown_aids</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">iflatten</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">iter_compress</span><span class=\"p\">(</span><span class=\"n\">aid_gen</span><span class=\"p\">(),</span> <span class=\"n\">isunknown_list</span><span class=\"p\">)))</span>\n    <span class=\"k\">if</span> <span class=\"n\">__debug__</span><span class=\"p\">:</span>\n        <span class=\"c1\"># References:</span>\n        <span class=\"c1\">#     http://stackoverflow.com/questions/482014/how-would-you-do-the-equivalent-of-preprocessor-directives-in-python</span>\n        <span class=\"n\">nidgroup_list</span> <span class=\"o\">=</span> <span class=\"n\">unflat_map</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_name_rowids</span><span class=\"p\">,</span> <span class=\"n\">known_aids_list</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">nidgroup</span> <span class=\"ow\">in</span> <span class=\"n\">nidgroup_list</span><span class=\"p\">:</span>\n            <span class=\"k\">assert</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">allsame</span><span class=\"p\">(</span><span class=\"n\">nidgroup</span><span class=\"p\">),</span> <span class=\"s1\">&#39;bad name grouping&#39;</span>\n    <span class=\"k\">return</span> <span class=\"n\">known_aids_list</span><span class=\"p\">,</span> <span class=\"n\">unknown_aids</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_primary_species_viewpoint\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.get_primary_species_viewpoint\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">get_primary_species_viewpoint</span><span class=\"p\">(</span><span class=\"n\">species</span><span class=\"p\">,</span> <span class=\"n\">plus</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (IBEISController):  ibeis controller object</span>\n<span class=\"sd\">        species (?):</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        str: primary_viewpoint</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --exec-get_primary_species_viewpoint</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; species = ibeis.const.TEST_SPECIES.ZEB_PLAIN</span>\n<span class=\"sd\">        &gt;&gt;&gt; aid_subset = get_primary_species_viewpoint(species, 0)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = (&#39;aid_subset = %s&#39; % (str(aid_subset),))</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">        aid_subset = left</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">species</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;zebra_plains&#39;</span><span class=\"p\">:</span>\n        <span class=\"n\">primary_viewpoint</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;left&#39;</span>\n    <span class=\"k\">elif</span> <span class=\"n\">species</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;zebra_grevys&#39;</span><span class=\"p\">:</span>\n        <span class=\"n\">primary_viewpoint</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;right&#39;</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">primary_viewpoint</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;left&#39;</span>\n    <span class=\"k\">if</span> <span class=\"n\">plus</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"c1\"># return an augmented primary viewpoint</span>\n        <span class=\"n\">primary_viewpoint</span> <span class=\"o\">=</span> <span class=\"n\">get_extended_viewpoints</span><span class=\"p\">(</span><span class=\"n\">primary_viewpoint</span><span class=\"p\">,</span> <span class=\"n\">num1</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n                                                    <span class=\"n\">num2</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n                                                    <span class=\"n\">include_base</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">primary_viewpoint</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_extended_viewpoints\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.get_extended_viewpoints\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">get_extended_viewpoints</span><span class=\"p\">(</span><span class=\"n\">base_yaw_text</span><span class=\"p\">,</span> <span class=\"n\">towards</span><span class=\"o\">=</span><span class=\"s1\">&#39;front&#39;</span><span class=\"p\">,</span> <span class=\"n\">num1</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n                            <span class=\"n\">num2</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">include_base</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Given a viewpoint returns the acceptable viewpoints around it</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; yaw_text_list = [&#39;left&#39;, &#39;right&#39;, &#39;back&#39;, &#39;front&#39;]</span>\n<span class=\"sd\">        &gt;&gt;&gt; towards = &#39;front&#39;</span>\n<span class=\"sd\">        &gt;&gt;&gt; num1 = 1</span>\n<span class=\"sd\">        &gt;&gt;&gt; num2 = 0</span>\n<span class=\"sd\">        &gt;&gt;&gt; include_base = False</span>\n<span class=\"sd\">        &gt;&gt;&gt; extended_yaws_list = [get_extended_viewpoints(base_yaw_text, towards, num1, num2, include_base)</span>\n<span class=\"sd\">        &gt;&gt;&gt;                       for base_yaw_text in yaw_text_list]</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = (&#39;extended_yaws_list = %s&#39; % (ut.repr2(extended_yaws_list),))</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">        extended_yaws_list = [[&#39;frontleft&#39;], [&#39;frontright&#39;], [&#39;backleft&#39;], [&#39;frontleft&#39;]]</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">vtool</span> <span class=\"k\">as</span> <span class=\"nn\">vt</span>\n    <span class=\"c1\"># DEPRICATE?</span>\n    <span class=\"n\">ori1</span> <span class=\"o\">=</span> <span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">VIEWTEXT_TO_YAW_RADIANS</span><span class=\"p\">[</span><span class=\"n\">base_yaw_text</span><span class=\"p\">]</span>\n    <span class=\"n\">ori2</span> <span class=\"o\">=</span> <span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">VIEWTEXT_TO_YAW_RADIANS</span><span class=\"p\">[</span><span class=\"n\">towards</span><span class=\"p\">]</span>\n    <span class=\"c1\"># Find which direction to go to get closer to `towards`</span>\n    <span class=\"n\">yawdist</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">signed_ori_distance</span><span class=\"p\">(</span><span class=\"n\">ori1</span><span class=\"p\">,</span> <span class=\"n\">ori2</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">yawdist</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"c1\"># break ties</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;warning extending viewpoint yaws from the same position as towards&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">yawdist</span> <span class=\"o\">+=</span> <span class=\"mf\">1E-3</span>\n    <span class=\"k\">if</span> <span class=\"n\">num1</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">num1</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">if</span> <span class=\"n\">num2</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">num2</span> <span class=\"o\">=</span> <span class=\"n\">num1</span>\n    <span class=\"k\">assert</span> <span class=\"n\">num1</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;must specify positive num&#39;</span>\n    <span class=\"k\">assert</span> <span class=\"n\">num2</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;must specify positive num&#39;</span>\n    <span class=\"n\">yawtext_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">VIEW</span><span class=\"o\">.</span><span class=\"n\">CODE_TO_INT</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n    <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">yawtext_list</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">base_yaw_text</span><span class=\"p\">)</span>\n    <span class=\"n\">other_index_list1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">((</span><span class=\"n\">index</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sign</span><span class=\"p\">(</span><span class=\"n\">yawdist</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">count</span><span class=\"p\">))</span> <span class=\"o\">%</span>\n                             <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">yawtext_list</span><span class=\"p\">))</span>\n                         <span class=\"k\">for</span> <span class=\"n\">count</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">num1</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)]</span>\n    <span class=\"n\">other_index_list2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">((</span><span class=\"n\">index</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sign</span><span class=\"p\">(</span><span class=\"n\">yawdist</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">count</span><span class=\"p\">))</span> <span class=\"o\">%</span>\n                             <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">yawtext_list</span><span class=\"p\">))</span>\n                         <span class=\"k\">for</span> <span class=\"n\">count</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">num2</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)]</span>\n    <span class=\"k\">if</span> <span class=\"n\">include_base</span><span class=\"p\">:</span>\n        <span class=\"n\">extended_index_list</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">other_index_list1</span> <span class=\"o\">+</span> <span class=\"n\">other_index_list2</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">])))</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">extended_index_list</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">other_index_list1</span> <span class=\"o\">+</span> <span class=\"n\">other_index_list2</span><span class=\"p\">)))</span>\n    <span class=\"n\">extended_yaws</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">yawtext_list</span><span class=\"p\">,</span> <span class=\"n\">extended_index_list</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">extended_yaws</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_two_annots_per_name_and_singletons\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.get_two_annots_per_name_and_singletons\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">get_two_annots_per_name_and_singletons</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">onlygt</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    makes controlled subset of data</span>\n\n<span class=\"sd\">    DEPRICATE</span>\n\n<span class=\"sd\">    CONTROLLED TEST DATA</span>\n\n<span class=\"sd\">    Build data for experiment that tries to rule out</span>\n<span class=\"sd\">    as much bad data as possible</span>\n\n\n<span class=\"sd\">    Returns a controlled set of annotations that conforms to</span>\n<span class=\"sd\">      * number of annots per name</span>\n<span class=\"sd\">      * uniform species</span>\n<span class=\"sd\">      * viewpoint restrictions</span>\n<span class=\"sd\">      * quality restrictions</span>\n<span class=\"sd\">      * time delta restrictions</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --test-get_two_annots_per_name_and_singletons</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --test-get_two_annots_per_name_and_singletons --db GZ_ALL</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --test-get_two_annots_per_name_and_singletons --db PZ_Master0 --onlygt</span>\n\n<span class=\"sd\">    Ignore:</span>\n<span class=\"sd\">        sys.argv.extend([&#39;--db&#39;, &#39;PZ_MTEST&#39;])</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(defaultdb=&#39;PZ_Master0&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; aid_subset = get_two_annots_per_name_and_singletons(ibs, onlygt=ut.get_argflag(&#39;--onlygt&#39;))</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibeis.other.dbinfo.get_dbinfo(ibs, aid_list=aid_subset, with_contrib=False)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = str(aid_subset)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">species</span> <span class=\"o\">=</span> <span class=\"n\">get_primary_database_species</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_aids</span><span class=\"p\">())</span>\n    <span class=\"c1\">#aid_list = ibs.get_valid_aids(species=&#39;zebra_plains&#39;, is_known=True)</span>\n    <span class=\"n\">aid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_aids</span><span class=\"p\">(</span><span class=\"n\">species</span><span class=\"o\">=</span><span class=\"n\">species</span><span class=\"p\">,</span> <span class=\"n\">is_known</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"c1\"># FILTER OUT UNUSABLE ANNOTATIONS</span>\n    <span class=\"c1\"># Get annots with timestamps</span>\n    <span class=\"n\">aid_list</span> <span class=\"o\">=</span> <span class=\"n\">filter_aids_without_timestamps</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">minqual</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;ok&#39;</span>\n    <span class=\"c1\">#valid_yaws = {&#39;left&#39;, &#39;frontleft&#39;, &#39;backleft&#39;}</span>\n    <span class=\"k\">if</span> <span class=\"n\">species</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;zebra_plains&#39;</span><span class=\"p\">:</span>\n        <span class=\"n\">valid_yawtexts</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;left&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;frontleft&#39;</span><span class=\"p\">}</span>\n    <span class=\"k\">elif</span> <span class=\"n\">species</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;zebra_grevys&#39;</span><span class=\"p\">:</span>\n        <span class=\"n\">valid_yawtexts</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;right&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;frontright&#39;</span><span class=\"p\">}</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">valid_yawtexts</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;left&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;frontleft&#39;</span><span class=\"p\">}</span>\n    <span class=\"n\">flags_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_quality_viewpoint_filterflags</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">minqual</span><span class=\"p\">,</span> <span class=\"n\">valid_yawtexts</span><span class=\"p\">)</span>\n    <span class=\"n\">aid_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">flags_list</span><span class=\"p\">)</span>\n    <span class=\"c1\">#print(&#39;print subset info&#39;)</span>\n    <span class=\"c1\">#print(ut.dict_hist(ibs.get_annot_viewpoints(aid_list)))</span>\n    <span class=\"c1\">#print(ut.dict_hist(ibs.get_annot_quality_texts(aid_list)))</span>\n    <span class=\"n\">singletons</span><span class=\"p\">,</span> <span class=\"n\">multitons</span> <span class=\"o\">=</span> <span class=\"n\">partition_annots_into_singleton_multiton</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"c1\"># process multitons</span>\n    <span class=\"n\">hourdists_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_unflat_annots_hourdists_list</span><span class=\"p\">(</span><span class=\"n\">multitons</span><span class=\"p\">)</span>\n    <span class=\"c1\">#pairxs_list = [vt.pdist_argsort(x) for x in hourdists_list]</span>\n    <span class=\"c1\"># Get the pictures taken the furthest appart of each gt case</span>\n    <span class=\"n\">best_pairx_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">pdist_argsort</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">hourdists_list</span><span class=\"p\">]</span>\n\n    <span class=\"n\">best_multitons</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">ziptake</span><span class=\"p\">(</span><span class=\"n\">multitons</span><span class=\"p\">,</span> <span class=\"n\">best_pairx_list</span><span class=\"p\">))</span>\n    <span class=\"k\">if</span> <span class=\"n\">onlygt</span><span class=\"p\">:</span>\n        <span class=\"n\">aid_subset</span> <span class=\"o\">=</span> <span class=\"n\">best_multitons</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">()</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">aid_subset</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">hstack</span><span class=\"p\">([</span><span class=\"n\">best_multitons</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(),</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">singletons</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">()])</span>\n    <span class=\"n\">aid_subset</span><span class=\"o\">.</span><span class=\"n\">sort</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">aid_subset</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_num_annots_per_name\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.get_num_annots_per_name\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_num_annots_per_name</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Returns the number of annots per name (IN THIS LIST)</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (IBEISController):  ibeis controller object</span>\n<span class=\"sd\">        aid_list (int):  list of annotation ids</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --exec-get_num_annots_per_name</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --exec-get_num_annots_per_name --db PZ_Master1</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # UNSTABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(defaultdb=&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; aid_list = ibs.get_valid_aids(is_known=True)</span>\n<span class=\"sd\">        &gt;&gt;&gt; num_annots_per_name, unique_nids = get_num_annots_per_name(ibs, aid_list)</span>\n<span class=\"sd\">        &gt;&gt;&gt; per_name_hist = ut.dict_hist(num_annots_per_name)</span>\n<span class=\"sd\">        &gt;&gt;&gt; items = per_name_hist.items()</span>\n<span class=\"sd\">        &gt;&gt;&gt; items = sorted(items)[::-1]</span>\n<span class=\"sd\">        &gt;&gt;&gt; key_list = ut.get_list_column(items, 0)</span>\n<span class=\"sd\">        &gt;&gt;&gt; val_list = ut.get_list_column(items, 1)</span>\n<span class=\"sd\">        &gt;&gt;&gt; min_per_name = dict(zip(key_list, np.cumsum(val_list)))</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = (&#39;per_name_hist = %s&#39; % (ut.repr2(per_name_hist),))</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&#39;min_per_name = %s&#39; % (ut.repr2(min_per_name),))</span>\n<span class=\"sd\">        per_name_hist = {</span>\n<span class=\"sd\">            1: 5,</span>\n<span class=\"sd\">            2: 2,</span>\n<span class=\"sd\">        }</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">aids_list</span><span class=\"p\">,</span> <span class=\"n\">unique_nids</span>  <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">group_annots_by_name</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">num_annots_per_name</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">,</span> <span class=\"n\">aids_list</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">num_annots_per_name</span><span class=\"p\">,</span> <span class=\"n\">unique_nids</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_annots_per_name_stats\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.get_annots_per_name_stats\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_annots_per_name_stats</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"n\">stats_kw</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">use_nan</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">stats_kw</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_stats</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_num_annots_per_name</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"o\">**</span><span class=\"n\">stats_kw</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_aids_with_groundtruth\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.get_aids_with_groundtruth\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_aids_with_groundtruth</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; returns aids with valid groundtruth &quot;&quot;&quot;</span>\n    <span class=\"n\">valid_aids</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_aids</span><span class=\"p\">()</span>\n    <span class=\"n\">has_gt_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_has_groundtruth</span><span class=\"p\">(</span><span class=\"n\">valid_aids</span><span class=\"p\">)</span>\n    <span class=\"n\">hasgt_aids</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">valid_aids</span><span class=\"p\">,</span> <span class=\"n\">has_gt_list</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">hasgt_aids</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_dbnotes_fpath\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.get_dbnotes_fpath\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_dbnotes_fpath</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">ensure</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"n\">notes_fpath</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_ibsdir</span><span class=\"p\">(),</span> <span class=\"s1\">&#39;dbnotes.txt&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">ensure</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_dbnotes_fpath</span><span class=\"p\">()):</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_dbnotes</span><span class=\"p\">(</span><span class=\"s1\">&#39;None&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">notes_fpath</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_yaw_viewtexts\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.get_yaw_viewtexts\">[docs]</a><span class=\"nd\">@profile</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_yaw_viewtexts</span><span class=\"p\">(</span><span class=\"n\">yaw_list</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        yaw_list (list of angles):</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --test-get_yaw_viewtexts</span>\n\n<span class=\"sd\">    TODO:</span>\n<span class=\"sd\">        rhombicubeoctehedron</span>\n\n<span class=\"sd\">        https://en.wikipedia.org/wiki/Rhombicuboctahedron</span>\n\n<span class=\"sd\">        up,</span>\n<span class=\"sd\">        down,</span>\n<span class=\"sd\">        front,</span>\n<span class=\"sd\">        left,</span>\n<span class=\"sd\">        back,</span>\n<span class=\"sd\">        right,</span>\n<span class=\"sd\">        front-left,</span>\n<span class=\"sd\">        back-left,</span>\n<span class=\"sd\">        back-right,</span>\n<span class=\"sd\">        front-right,</span>\n<span class=\"sd\">        up-front,</span>\n<span class=\"sd\">        up-left,</span>\n<span class=\"sd\">        up-back,</span>\n<span class=\"sd\">        up-right,</span>\n<span class=\"sd\">        up-front-left,</span>\n<span class=\"sd\">        up-back-left,</span>\n<span class=\"sd\">        up-back-right,</span>\n<span class=\"sd\">        up-front-right,</span>\n<span class=\"sd\">        down-front,</span>\n<span class=\"sd\">        down-left,</span>\n<span class=\"sd\">        down-back,</span>\n<span class=\"sd\">        down-right,</span>\n<span class=\"sd\">        down-front-left,</span>\n<span class=\"sd\">        down-back-left,</span>\n<span class=\"sd\">        down-back-right,</span>\n<span class=\"sd\">        down-front-right,</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import numpy as np</span>\n<span class=\"sd\">        &gt;&gt;&gt; yaw_list = [0.0, np.pi / 2, np.pi / 4, np.pi, 3.15, -.4, -8, .2, 4, 7, 20, None]</span>\n<span class=\"sd\">        &gt;&gt;&gt; text_list = get_yaw_viewtexts(yaw_list)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = ut.repr2(text_list, nl=False)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">        [&#39;right&#39;, &#39;front&#39;, &#39;frontright&#39;, &#39;left&#39;, &#39;left&#39;, &#39;backright&#39;, &#39;back&#39;, &#39;right&#39;, &#39;backleft&#39;, &#39;frontright&#39;, &#39;frontright&#39;, None]</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\">#import vtool as vt</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n    <span class=\"n\">stdlblyaw_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">VIEWTEXT_TO_YAW_RADIANS</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">())</span>\n    <span class=\"n\">stdlbl_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_list_column</span><span class=\"p\">(</span><span class=\"n\">stdlblyaw_list</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"c1\">#ALTERNATE = False</span>\n    <span class=\"c1\">#if ALTERNATE:</span>\n    <span class=\"c1\">#    #with ut.Timer(&#39;fdsa&#39;):</span>\n    <span class=\"c1\">#    TAU = np.pi * 2</span>\n    <span class=\"c1\">#    binsize = TAU / len(const.VIEWTEXT_TO_YAW_RADIANS)</span>\n    <span class=\"c1\">#    yaw_list_ = np.array([np.nan if yaw is None else yaw for yaw in yaw_list])</span>\n    <span class=\"c1\">#    index_list = np.floor(.5 + (yaw_list_ % TAU) / binsize)</span>\n    <span class=\"c1\">#    text_list = [None if np.isnan(index) else stdlbl_list[int(index)] for index in index_list]</span>\n    <span class=\"c1\">#else:</span>\n    <span class=\"c1\">#with ut.Timer(&#39;fdsa&#39;):</span>\n    <span class=\"n\">stdyaw_list</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take_column</span><span class=\"p\">(</span><span class=\"n\">stdlblyaw_list</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n\n    <span class=\"n\">yaw_list</span>\n\n    <span class=\"n\">is_not_none</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flag_not_None_items</span><span class=\"p\">(</span><span class=\"n\">yaw_list</span><span class=\"p\">)</span>\n    <span class=\"n\">has_nones</span> <span class=\"o\">=</span> <span class=\"ow\">not</span> <span class=\"nb\">all</span><span class=\"p\">(</span><span class=\"n\">is_not_none</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">has_nones</span><span class=\"p\">:</span>\n        <span class=\"n\">yaw_list_</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">yaw_list</span><span class=\"p\">,</span> <span class=\"n\">is_not_none</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">yaw_list_</span> <span class=\"o\">=</span> <span class=\"n\">yaw_list</span>\n    <span class=\"n\">yaw_list_</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">yaw_list_</span><span class=\"p\">)</span>\n    <span class=\"n\">textdists</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">ori_distance</span><span class=\"p\">(</span><span class=\"n\">stdyaw_list</span><span class=\"p\">,</span> <span class=\"n\">yaw_list_</span><span class=\"p\">[:,</span> <span class=\"kc\">None</span><span class=\"p\">])</span>\n    <span class=\"n\">index_list</span> <span class=\"o\">=</span> <span class=\"n\">textdists</span><span class=\"o\">.</span><span class=\"n\">argmin</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">text_list_</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">stdlbl_list</span><span class=\"p\">,</span> <span class=\"n\">index_list</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">has_nones</span><span class=\"p\">:</span>\n        <span class=\"n\">text_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ungroup</span><span class=\"p\">([</span><span class=\"n\">text_list_</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">is_not_none</span><span class=\"p\">)],</span>\n                               <span class=\"n\">maxval</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">is_not_none</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">text_list</span> <span class=\"o\">=</span> <span class=\"n\">text_list_</span>\n\n    <span class=\"c1\">#textdists_list = [None if yaw is None else</span>\n    <span class=\"c1\">#                  vt.ori_distance(stdyaw_list, yaw)</span>\n    <span class=\"c1\">#                  for yaw in yaw_list]</span>\n    <span class=\"c1\">#index_list = [None if dists is None else dists.argmin()</span>\n    <span class=\"c1\">#              for dists in textdists_list]</span>\n    <span class=\"c1\">#text_list = [None if index is None else stdlbl_list[index] for index in index_list]</span>\n    <span class=\"c1\">#yaw_list_ / binsize</span>\n    <span class=\"c1\">#errors = [&#39;%.2f&#39; % dists[index] for dists, index in zip(textdists_list, index_list)]</span>\n    <span class=\"c1\">#return list(zip(yaw_list, errors, text_list))</span>\n    <span class=\"k\">return</span> <span class=\"n\">text_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_species_dbs\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.get_species_dbs\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">get_species_dbs</span><span class=\"p\">(</span><span class=\"n\">species_prefix</span><span class=\"p\">):</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.init</span> <span class=\"k\">import</span> <span class=\"n\">sysres</span>\n    <span class=\"n\">ibs_dblist</span> <span class=\"o\">=</span> <span class=\"n\">sysres</span><span class=\"o\">.</span><span class=\"n\">get_ibsdb_list</span><span class=\"p\">()</span>\n    <span class=\"n\">isvalid_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"n\">species_prefix</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">path</span> <span class=\"ow\">in</span> <span class=\"n\">ibs_dblist</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">ibs_dblist</span><span class=\"p\">,</span> <span class=\"n\">isvalid_list</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_annot_bbox_area\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.get_annot_bbox_area\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_annot_bbox_area</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">):</span>\n    <span class=\"n\">bbox_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_bboxes</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">area_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">bbox</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">bbox</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">bbox</span> <span class=\"ow\">in</span> <span class=\"n\">bbox_list</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">area_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_database_species\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.get_database_species\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_database_species</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --test-get_database_species</span>\n\n<span class=\"sd\">    Example1:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = ut.repr2(ibs.get_database_species(), nl=False)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">        [&#39;____&#39;, &#39;bear_polar&#39;, &#39;zebra_grevys&#39;, &#39;zebra_plains&#39;]</span>\n\n<span class=\"sd\">    Example2:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(&#39;PZ_MTEST&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = ut.repr2(ibs.get_database_species(), nl=False)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">        [&#39;zebra_plains&#39;]</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">aid_list</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">aid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_aids</span><span class=\"p\">()</span>\n    <span class=\"n\">species_rowids</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_species_rowids</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">))</span>\n    <span class=\"n\">unique_species</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_species_texts</span><span class=\"p\">(</span><span class=\"n\">species_rowids</span><span class=\"p\">)))</span>\n    <span class=\"k\">return</span> <span class=\"n\">unique_species</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_primary_database_species\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.get_primary_database_species\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_primary_database_species</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">speedhack</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        aid_list (list):  list of annotation ids (default = None)</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --test-get_primary_database_species</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(defaultdb=&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; aid_list = None</span>\n<span class=\"sd\">        &gt;&gt;&gt; primary_species = get_primary_database_species(ibs, aid_list)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = primary_species</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&#39;primary_species = %r&#39; % (primary_species,))</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">        zebra_plains</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">speedhack</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Use our conventions</span>\n        <span class=\"k\">if</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_dbname</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">&#39;PZ_&#39;</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"s1\">&#39;zebra_plains&#39;</span>\n        <span class=\"k\">elif</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_dbname</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;NNP_Master&#39;</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s1\">&#39;zebra_plains&#39;</span>\n        <span class=\"k\">elif</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_dbname</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">&#39;GZ_&#39;</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"s1\">&#39;zebra_grevys&#39;</span>\n    <span class=\"k\">if</span> <span class=\"n\">aid_list</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">aid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_aids</span><span class=\"p\">(</span><span class=\"n\">is_staged</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n    <span class=\"n\">species_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_species_texts</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">species_hist</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dict_hist</span><span class=\"p\">(</span><span class=\"n\">species_list</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">species_hist</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"n\">primary_species</span> <span class=\"o\">=</span> <span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">UNKNOWN</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">frequent_species</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">species_hist</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">(),</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"n\">item</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">primary_species</span> <span class=\"o\">=</span> <span class=\"n\">frequent_species</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">primary_species</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_dominant_species\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.get_dominant_species\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_dominant_species</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        aid_list (int):  list of annotation ids</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --test-get_dominant_species</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; aid_list = ibs.get_valid_aids()</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = get_dominant_species(ibs, aid_list)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">        zebra_plains</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">hist_</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dict_hist</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_species_texts</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">))</span>\n    <span class=\"n\">keys</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">hist_</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n    <span class=\"n\">vals</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">hist_</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">())</span>\n    <span class=\"n\">species_text</span> <span class=\"o\">=</span> <span class=\"n\">keys</span><span class=\"p\">[</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">list_argmax</span><span class=\"p\">(</span><span class=\"n\">vals</span><span class=\"p\">)]</span>\n    <span class=\"k\">return</span> <span class=\"n\">species_text</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_database_species_count\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.get_database_species_count\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_database_species_count</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --test-get_database_species_count</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; #print(ut.repr2(ibeis.opendb(&#39;PZ_Master0&#39;).get_database_species_count()))</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = ut.repr2(ibs.get_database_species_count(), nl=False)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">        {&#39;____&#39;: 3, &#39;bear_polar&#39;: 2, &#39;zebra_grevys&#39;: 2, &#39;zebra_plains&#39;: 6}</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">aid_list</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">aid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_aids</span><span class=\"p\">()</span>\n    <span class=\"n\">species_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_species_texts</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">species_count_dict</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">item_hist</span><span class=\"p\">(</span><span class=\"n\">species_list</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">species_count_dict</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_dbinfo_str\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.get_dbinfo_str\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_dbinfo_str</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">):</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.other</span> <span class=\"k\">import</span> <span class=\"n\">dbinfo</span>\n    <span class=\"k\">return</span> <span class=\"n\">dbinfo</span><span class=\"o\">.</span><span class=\"n\">get_dbinfo</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)[</span><span class=\"s1\">&#39;info_str&#39;</span><span class=\"p\">]</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_infostr\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.get_infostr\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_infostr</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; Returns sort printable database information</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (IBEISController):  ibeis controller object</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        str: infostr</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.other</span> <span class=\"k\">import</span> <span class=\"n\">dbinfo</span>\n    <span class=\"k\">return</span> <span class=\"n\">dbinfo</span><span class=\"o\">.</span><span class=\"n\">get_short_infostr</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_dbnotes\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.get_dbnotes\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_dbnotes</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; sets notes for an entire database &quot;&quot;&quot;</span>\n    <span class=\"n\">notes</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">read_from</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_dbnotes_fpath</span><span class=\"p\">(),</span> <span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">notes</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_dbnotes</span><span class=\"p\">(</span><span class=\"s1\">&#39;None&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">notes</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">read_from</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_dbnotes_fpath</span><span class=\"p\">())</span>\n    <span class=\"k\">return</span> <span class=\"n\">notes</span></div>\n\n\n<div class=\"viewcode-block\" id=\"set_dbnotes\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.set_dbnotes\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">set_dbnotes</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">notes</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; sets notes for an entire database &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">ibeis</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">control</span><span class=\"o\">.</span><span class=\"n\">IBEISControl</span><span class=\"o\">.</span><span class=\"n\">IBEISController</span><span class=\"p\">)</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">write_to</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_dbnotes_fpath</span><span class=\"p\">(),</span> <span class=\"n\">notes</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"annotstr\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.annotstr\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">annotstr</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s1\">&#39;aid=</span><span class=\"si\">%d</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">aid</span></div>\n\n\n<div class=\"viewcode-block\" id=\"merge_names\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.merge_names\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">merge_names</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">merge_name</span><span class=\"p\">,</span> <span class=\"n\">other_names</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (IBEISController):  ibeis controller object</span>\n<span class=\"sd\">        merge_name (str):</span>\n<span class=\"sd\">        other_names (list):</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --test-merge_names</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; merge_name = &#39;zebra&#39;</span>\n<span class=\"sd\">        &gt;&gt;&gt; other_names = [&#39;occl&#39;, &#39;jeff&#39;]</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = merge_names(ibs, merge_name, other_names)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs.print_names_table()</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[ibsfuncs] merging other_names=</span><span class=\"si\">%r</span><span class=\"s1\"> into merge_name=</span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span>\n            <span class=\"p\">(</span><span class=\"n\">other_names</span><span class=\"p\">,</span> <span class=\"n\">merge_name</span><span class=\"p\">))</span>\n    <span class=\"n\">other_nid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_name_rowids_from_text</span><span class=\"p\">(</span><span class=\"n\">other_names</span><span class=\"p\">)</span>\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_name_alias_texts</span><span class=\"p\">(</span><span class=\"n\">other_nid_list</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">merge_name</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">other_nid_list</span><span class=\"p\">))</span>\n    <span class=\"n\">other_aids_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_name_aids</span><span class=\"p\">(</span><span class=\"n\">other_nid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">other_aids</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">other_aids_list</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[ibsfuncs] ... </span><span class=\"si\">%r</span><span class=\"s1\"> annotations are being merged into merge_name=</span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span>\n            <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">other_aids</span><span class=\"p\">),</span> <span class=\"n\">merge_name</span><span class=\"p\">))</span>\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_annot_names</span><span class=\"p\">(</span><span class=\"n\">other_aids</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">merge_name</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">other_aids</span><span class=\"p\">))</span></div>\n\n\n<div class=\"viewcode-block\" id=\"inspect_nonzero_yaws\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.inspect_nonzero_yaws\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">inspect_nonzero_yaws</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; python dev.py --dbdir /raid/work2/Turk/PZ_Master --cmd --show &quot;&quot;&quot;</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.viz</span> <span class=\"k\">import</span> <span class=\"n\">viz_chip</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">plottool</span> <span class=\"k\">as</span> <span class=\"nn\">pt</span>\n    <span class=\"n\">aids</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_aids</span><span class=\"p\">()</span>\n    <span class=\"n\">yaws</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_yaws</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">)</span>\n    <span class=\"n\">isnone_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">yaw</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"k\">for</span> <span class=\"n\">yaw</span> <span class=\"ow\">in</span> <span class=\"n\">yaws</span><span class=\"p\">]</span>\n    <span class=\"n\">aids</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"n\">isnone_list</span><span class=\"p\">)</span>\n    <span class=\"n\">yaws</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">yaws</span><span class=\"p\">,</span> <span class=\"n\">isnone_list</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">aid</span><span class=\"p\">,</span> <span class=\"n\">yaw</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"n\">yaws</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">yaw</span><span class=\"p\">)</span>\n        <span class=\"c1\"># We seem to be storing FULL paths in</span>\n        <span class=\"c1\"># the probchip table</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">delete_annot_chips</span><span class=\"p\">(</span><span class=\"n\">aid</span><span class=\"p\">)</span>\n        <span class=\"n\">viz_chip</span><span class=\"o\">.</span><span class=\"n\">show_chip</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid</span><span class=\"p\">,</span> <span class=\"n\">annote</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">show_if_requested</span><span class=\"p\">()</span></div>\n\n\n<div class=\"viewcode-block\" id=\"set_exemplars_from_quality_and_viewpoint\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.set_exemplars_from_quality_and_viewpoint\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"nd\">@register_api</span><span class=\"p\">(</span><span class=\"s1\">&#39;/api/annot/exemplar/&#39;</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;POST&#39;</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">set_exemplars_from_quality_and_viewpoint</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                                             <span class=\"n\">exemplars_per_view</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">imgsetid</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                                             <span class=\"n\">dry_run</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">prog_hook</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Automatic exemplar selection algorithm based on viewpoint and quality</span>\n\n<span class=\"sd\">    References:</span>\n<span class=\"sd\">        # implement maximum diversity approximation instead</span>\n<span class=\"sd\">        http://www.csbio.unc.edu/mcmillan/pubs/ICDM07_Pan.pdf</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --test-set_exemplars_from_quality_and_viewpoint</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --test-set_exemplars_from_quality_and_viewpoint:1</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; #ibs = ibeis.opendb(&#39;PZ_MUGU_19&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(&#39;PZ_MTEST&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; dry_run = True</span>\n<span class=\"sd\">        &gt;&gt;&gt; verbose = False</span>\n<span class=\"sd\">        &gt;&gt;&gt; old_sum = sum(ibs.get_annot_exemplar_flags(ibs.get_valid_aids()))</span>\n<span class=\"sd\">        &gt;&gt;&gt; new_flag_list = ibs.set_exemplars_from_quality_and_viewpoint(dry_run=dry_run)</span>\n<span class=\"sd\">        &gt;&gt;&gt; new_sum = sum(new_flag_list)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&#39;old_sum = %r&#39; % (old_sum,))</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&#39;new_sum = %r&#39; % (new_sum,))</span>\n<span class=\"sd\">        &gt;&gt;&gt; zero_flag_list = ibs.set_exemplars_from_quality_and_viewpoint(exemplars_per_view=0, dry_run=dry_run)</span>\n<span class=\"sd\">        &gt;&gt;&gt; assert sum(zero_flag_list) == 0</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = new_sum</span>\n\n<span class=\"sd\">    Example1:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; dry_run = True</span>\n<span class=\"sd\">        &gt;&gt;&gt; verbose = False</span>\n<span class=\"sd\">        &gt;&gt;&gt; old_sum = sum(ibs.get_annot_exemplar_flags(ibs.get_valid_aids()))</span>\n<span class=\"sd\">        &gt;&gt;&gt; new_flag_list = ibs.set_exemplars_from_quality_and_viewpoint(dry_run=dry_run)</span>\n<span class=\"sd\">        &gt;&gt;&gt; # 2 of the 11 annots are unknown and should not be exemplars</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.assert_eq(sum(new_flag_list), 9)</span>\n\n<span class=\"sd\">    Example2:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(&#39;testdb2&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; dry_run = True</span>\n<span class=\"sd\">        &gt;&gt;&gt; verbose = False</span>\n<span class=\"sd\">        &gt;&gt;&gt; imgsetid = None</span>\n<span class=\"sd\">        &gt;&gt;&gt; aid_list = ibs.get_valid_aids(imgsetid=imgsetid)</span>\n<span class=\"sd\">        &gt;&gt;&gt; new_flag_list = ibs.set_exemplars_from_quality_and_viewpoint(aid_list, dry_run=dry_run)</span>\n<span class=\"sd\">        &gt;&gt;&gt; old_flag_list = ibs.get_annot_exemplar_flags(aid_list)</span>\n<span class=\"sd\">        &gt;&gt;&gt; new_exemplar_aids = ut.compress(aid_list, new_flag_list)</span>\n<span class=\"sd\">        &gt;&gt;&gt; new_exemplar_qualtexts = ibs.get_annot_quality_texts(new_exemplar_aids)</span>\n<span class=\"sd\">        &gt;&gt;&gt; assert &#39;junk&#39; not in new_exemplar_qualtexts, &#39;should not have junk exemplars&#39;</span>\n<span class=\"sd\">        &gt;&gt;&gt; assert &#39;poor&#39; not in new_exemplar_qualtexts, &#39;should not have poor exemplars&#39;</span>\n<span class=\"sd\">        &gt;&gt;&gt; #assert len(new_aid_list) == len(new_flag_list)</span>\n<span class=\"sd\">        &gt;&gt;&gt; # 2 of the 11 annots are unknown and should not be exemplars</span>\n<span class=\"sd\">        &gt;&gt;&gt; #ut.assert_eq(len(new_aid_list), 9)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">aid_list</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">aid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_aids</span><span class=\"p\">(</span><span class=\"n\">imgsetid</span><span class=\"o\">=</span><span class=\"n\">imgsetid</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">exemplars_per_view</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">exemplars_per_view</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n    <span class=\"n\">new_flag_list</span> <span class=\"o\">=</span> <span class=\"n\">get_annot_quality_viewpoint_subset</span><span class=\"p\">(</span>\n        <span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"o\">=</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">annots_per_view</span><span class=\"o\">=</span><span class=\"n\">exemplars_per_view</span><span class=\"p\">,</span>\n        <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">verbose</span><span class=\"p\">,</span> <span class=\"n\">prog_hook</span><span class=\"o\">=</span><span class=\"n\">prog_hook</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Hack ensure each name has at least 1 exemplar</span>\n    <span class=\"c1\">#if False:</span>\n    <span class=\"c1\">#    nids = ibs.get_annot_nids(new_aid_list)</span>\n    <span class=\"c1\">#    uniquenids, groupxs = ut.group_indices(nids)</span>\n    <span class=\"c1\">#    num_hacked = 0</span>\n    <span class=\"c1\">#    grouped_exemplars = ut.apply_grouping(new_flag_list, groupxs)</span>\n    <span class=\"c1\">#    for exflags, idxs in zip(grouped_exemplars, groupxs):</span>\n    <span class=\"c1\">#        if not any(exflags):</span>\n    <span class=\"c1\">#            num_hacked += 1</span>\n    <span class=\"c1\">#            if len(idxs) &gt; 0:</span>\n    <span class=\"c1\">#                new_flag_list[idxs[0]] = True</span>\n    <span class=\"c1\">#            if len(idxs) &gt; 1:</span>\n    <span class=\"c1\">#                new_flag_list[idxs[1]] = True</span>\n    <span class=\"c1\">#    print(&#39;(exemplars) num_hacked = %r&#39; % (num_hacked,))</span>\n\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">dry_run</span><span class=\"p\">:</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_annot_exemplar_flags</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">new_flag_list</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">new_flag_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_annot_quality_viewpoint_subset\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.get_annot_quality_viewpoint_subset\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_annot_quality_viewpoint_subset</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">annots_per_view</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n                                       <span class=\"n\">max_annots</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                                       <span class=\"n\">prog_hook</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">allow_unknown</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --exec-get_annot_quality_viewpoint_subset --show</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.exec_funckw(get_annot_quality_viewpoint_subset, globals())</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(&#39;testdb2&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; new_flag_list = get_annot_quality_viewpoint_subset(ibs)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = sum(new_flag_list)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">        38</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.exec_funckw(get_annot_quality_viewpoint_subset, globals())</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; aid_list = [1]</span>\n<span class=\"sd\">        &gt;&gt;&gt; new_flag_list = get_annot_quality_viewpoint_subset(ibs, aid_list, allow_unknown=True)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = sum(new_flag_list)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">        1</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">aid_list</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">aid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_aids</span><span class=\"p\">()</span>\n\n    <span class=\"n\">INF</span> <span class=\"o\">=</span> <span class=\"mi\">999999</span>  <span class=\"c1\"># effectively infinite</span>\n\n    <span class=\"n\">qual2_value</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">QUAL_EXCELLENT</span> <span class=\"p\">:</span> <span class=\"mi\">30</span><span class=\"p\">,</span>\n        <span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">QUAL_GOOD</span>      <span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"p\">,</span>\n        <span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">QUAL_OK</span>        <span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n        <span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">QUAL_UNKNOWN</span>   <span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">QUAL_POOR</span>      <span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">30</span><span class=\"p\">,</span>\n        <span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">QUAL_JUNK</span>      <span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"n\">INF</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\"># Value of previously being an exemplar</span>\n    <span class=\"n\">oldexemp2_value</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"kc\">True</span><span class=\"p\">:</span>  <span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"kc\">False</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"kc\">None</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\"># Value of not having multiple annotations</span>\n    <span class=\"n\">ismulti2_value</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"kc\">True</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"kc\">False</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n        <span class=\"kc\">None</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_chosen_flags</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">):</span>\n        <span class=\"c1\"># The weight of each annotation is 1. The value is based off its properties</span>\n        <span class=\"c1\"># We like good more than ok, and junk is infeasible We prefer items that</span>\n        <span class=\"c1\"># had previously been exemplars</span>\n        <span class=\"n\">qual_value</span>     <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">qual2_value</span><span class=\"p\">,</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_quality_texts</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">)))</span>\n        <span class=\"n\">oldexemp_value</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">oldexemp2_value</span><span class=\"p\">,</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_exemplar_flags</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">)))</span>\n        <span class=\"n\">ismulti_value</span>  <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">ismulti2_value</span><span class=\"p\">,</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_multiple</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">)))</span>\n        <span class=\"n\">base_value</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n        <span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"n\">qual_value</span> <span class=\"o\">+</span> <span class=\"n\">oldexemp_value</span> <span class=\"o\">+</span> <span class=\"n\">ismulti_value</span> <span class=\"o\">+</span> <span class=\"n\">base_value</span>\n\n        <span class=\"c1\"># Build input for knapsack</span>\n        <span class=\"n\">weights</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n        <span class=\"n\">indices</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">weights</span><span class=\"p\">)))</span>\n        <span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">round</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">tolist</span><span class=\"p\">()</span>\n        <span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">,</span> <span class=\"n\">weights</span><span class=\"p\">,</span> <span class=\"n\">indices</span><span class=\"p\">))</span>\n\n        <span class=\"c1\"># Greedy version is fine if all weights are 1, just pick the N maximum values</span>\n        <span class=\"n\">total_value</span><span class=\"p\">,</span> <span class=\"n\">chosen_items</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">knapsack_greedy</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">,</span> <span class=\"n\">maxweight</span><span class=\"o\">=</span><span class=\"n\">annots_per_view</span><span class=\"p\">)</span>\n        <span class=\"c1\">#try:</span>\n        <span class=\"c1\">#    total_value, chosen_items = ut.knapsack(items, annots_per_view, method=&#39;recursive&#39;)</span>\n        <span class=\"c1\">#except Exception:</span>\n        <span class=\"c1\">#    print(&#39;WARNING: iterative method does not work correctly, but stack too big for recrusive&#39;)</span>\n        <span class=\"c1\">#    total_value, chosen_items = ut.knapsack(items, annots_per_view, method=&#39;iterative&#39;)</span>\n\n        <span class=\"n\">chosen_indices</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_list_column</span><span class=\"p\">(</span><span class=\"n\">chosen_items</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"n\">flags</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kc\">False</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">index</span> <span class=\"ow\">in</span> <span class=\"n\">chosen_indices</span><span class=\"p\">:</span>\n            <span class=\"n\">flags</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"k\">return</span> <span class=\"n\">flags</span>\n\n    <span class=\"n\">nid_list</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_name_rowids</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">distinguish_unknowns</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n    <span class=\"n\">unique_nids</span><span class=\"p\">,</span> <span class=\"n\">groupxs_list</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">group_indices</span><span class=\"p\">(</span><span class=\"n\">nid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">grouped_aids</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">apply_grouping</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">),</span> <span class=\"n\">groupxs_list</span><span class=\"p\">)</span>\n    <span class=\"c1\">#aids = grouped_aids[-6]</span>\n    <span class=\"c1\"># for final settings because I&#39;m too lazy to write</span>\n    <span class=\"n\">new_aid_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">new_flag_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">_iter</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ProgIter</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">grouped_aids</span><span class=\"p\">,</span> <span class=\"n\">unique_nids</span><span class=\"p\">),</span>\n                        <span class=\"n\">length</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">unique_nids</span><span class=\"p\">),</span>\n                        <span class=\"c1\">#freq=100,</span>\n                        <span class=\"n\">lbl</span><span class=\"o\">=</span><span class=\"s1\">&#39;Picking best annots per viewpoint&#39;</span><span class=\"p\">,</span>\n                        <span class=\"n\">prog_hook</span><span class=\"o\">=</span><span class=\"n\">prog_hook</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">aids_</span><span class=\"p\">,</span> <span class=\"n\">nid</span> <span class=\"ow\">in</span> <span class=\"n\">_iter</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">allow_unknown</span> <span class=\"ow\">and</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">is_nid_unknown</span><span class=\"p\">(</span><span class=\"n\">nid</span><span class=\"p\">):</span>\n            <span class=\"c1\"># do not change unknown animals</span>\n            <span class=\"n\">new_aid_list</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">aids_</span><span class=\"p\">)</span>\n            <span class=\"n\">new_flag_list</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">([</span><span class=\"kc\">False</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aids_</span><span class=\"p\">))</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># subgroup the names by viewpoints</span>\n            <span class=\"n\">yawtexts</span>  <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_viewpoints</span><span class=\"p\">(</span><span class=\"n\">aids_</span><span class=\"p\">)</span>\n            <span class=\"n\">yawtext2_aids</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">group_items</span><span class=\"p\">(</span><span class=\"n\">aids_</span><span class=\"p\">,</span> <span class=\"n\">yawtexts</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">yawtext</span><span class=\"p\">,</span> <span class=\"n\">aids</span> <span class=\"ow\">in</span> <span class=\"n\">six</span><span class=\"o\">.</span><span class=\"n\">iteritems</span><span class=\"p\">(</span><span class=\"n\">yawtext2_aids</span><span class=\"p\">):</span>\n                <span class=\"n\">flags</span> <span class=\"o\">=</span> <span class=\"n\">get_chosen_flags</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">)</span>\n                <span class=\"n\">new_aid_list</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">)</span>\n                <span class=\"n\">new_flag_list</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">flags</span><span class=\"p\">)</span>\n\n    <span class=\"n\">aid2_idx</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">make_index_lookup</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">new_idxs</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">aid2_idx</span><span class=\"p\">,</span> <span class=\"n\">new_aid_list</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Re-order flags to agree with the input</span>\n    <span class=\"n\">flag_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ungroup</span><span class=\"p\">([</span><span class=\"n\">new_flag_list</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"n\">new_idxs</span><span class=\"p\">])</span>\n    <span class=\"k\">assert</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">sortedby</span><span class=\"p\">(</span><span class=\"n\">new_flag_list</span><span class=\"p\">,</span> <span class=\"n\">new_aid_list</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">sortedby</span><span class=\"p\">(</span><span class=\"n\">flag_list</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">verbose</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Found </span><span class=\"si\">%d</span><span class=\"s1\"> exemplars for </span><span class=\"si\">%d</span><span class=\"s1\"> names&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">flag_list</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">unique_nids</span><span class=\"p\">)))</span>\n    <span class=\"k\">return</span> <span class=\"n\">flag_list</span></div>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_split_car_contributor_tag</span><span class=\"p\">(</span><span class=\"n\">contributor_tag</span><span class=\"p\">,</span> <span class=\"n\">distinguish_invalids</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">contributor_tag</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"s1\">&#39;NNP GZC Car&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">contributor_tag</span><span class=\"p\">:</span>\n            <span class=\"n\">contributor_tag_split</span> <span class=\"o\">=</span> <span class=\"n\">contributor_tag</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;,&#39;</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">contributor_tag_split</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n                <span class=\"n\">contributor_tag</span> <span class=\"o\">=</span> <span class=\"n\">contributor_tag_split</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span>\n        <span class=\"k\">elif</span> <span class=\"n\">distinguish_invalids</span><span class=\"p\">:</span>\n            <span class=\"n\">contributor_tag</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">return</span> <span class=\"n\">contributor_tag</span>\n\n\n<div class=\"viewcode-block\" id=\"report_sightings\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.report_sightings\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">report_sightings</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">complete</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">include_images</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">sanitize_list</span><span class=\"p\">(</span><span class=\"n\">data_list</span><span class=\"p\">):</span>\n        <span class=\"n\">data_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">&#39;,&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&lt;COMMA&gt;&#39;</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">data</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">data_list</span><span class=\"p\">)</span> <span class=\"p\">]</span>\n        <span class=\"n\">return_str</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;,&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">data_list</span><span class=\"p\">))</span>\n        <span class=\"n\">return_str</span> <span class=\"o\">=</span> <span class=\"n\">return_str</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">&#39;,None,&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;,NONE,&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">return_str</span> <span class=\"o\">=</span> <span class=\"n\">return_str</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">&#39;,</span><span class=\"si\">%s</span><span class=\"s1\">,&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">UNKNOWN</span><span class=\"p\">,</span> <span class=\"p\">)</span> <span class=\"p\">,</span> <span class=\"s1\">&#39;,UNKNOWN,&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">return_str</span> <span class=\"o\">=</span> <span class=\"n\">return_str</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">&#39;,-1,&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;,UNKNOWN,&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">return_str</span> <span class=\"o\">=</span> <span class=\"n\">return_str</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">&#39;,-1,&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;,UNKNOWN,&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">return_str</span> <span class=\"o\">=</span> <span class=\"n\">return_str</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">&#39;,-1.0,&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;,UNKNOWN,&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">return_str</span> <span class=\"o\">=</span> <span class=\"n\">return_str</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">&#39;,-1.0,&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;,UNKNOWN,&#39;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">return_str</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">construct</span><span class=\"p\">():</span>\n        <span class=\"k\">if</span> <span class=\"n\">complete</span><span class=\"p\">:</span>\n            <span class=\"n\">cols_list</span>      <span class=\"o\">=</span> <span class=\"p\">[</span>\n                <span class=\"p\">(</span><span class=\"s1\">&#39;annotation_id&#39;</span><span class=\"p\">,</span>        <span class=\"n\">aid_list</span><span class=\"p\">),</span>\n                <span class=\"p\">(</span><span class=\"s1\">&#39;annotation_xtl&#39;</span><span class=\"p\">,</span>       <span class=\"n\">xtl_list</span><span class=\"p\">),</span>\n                <span class=\"p\">(</span><span class=\"s1\">&#39;annotation_ytl&#39;</span><span class=\"p\">,</span>       <span class=\"n\">ytl_list</span><span class=\"p\">),</span>\n                <span class=\"p\">(</span><span class=\"s1\">&#39;annotation_width&#39;</span><span class=\"p\">,</span>     <span class=\"n\">width_list</span><span class=\"p\">),</span>\n                <span class=\"p\">(</span><span class=\"s1\">&#39;annotation_height&#39;</span><span class=\"p\">,</span>    <span class=\"n\">height_list</span><span class=\"p\">),</span>\n                <span class=\"p\">(</span><span class=\"s1\">&#39;annotation_species&#39;</span><span class=\"p\">,</span>   <span class=\"n\">species_list</span><span class=\"p\">),</span>\n                <span class=\"p\">(</span><span class=\"s1\">&#39;annotation_viewpoint&#39;</span><span class=\"p\">,</span> <span class=\"n\">viewpoint_list</span><span class=\"p\">),</span>\n                <span class=\"p\">(</span><span class=\"s1\">&#39;annotation_qualities&#39;</span><span class=\"p\">,</span> <span class=\"n\">quality_list</span><span class=\"p\">),</span>\n                <span class=\"p\">(</span><span class=\"s1\">&#39;annotation_sex&#39;</span><span class=\"p\">,</span>       <span class=\"n\">sex_list</span><span class=\"p\">),</span>\n                <span class=\"p\">(</span><span class=\"s1\">&#39;annotation_age_min&#39;</span><span class=\"p\">,</span>   <span class=\"n\">age_min_list</span><span class=\"p\">),</span>\n                <span class=\"p\">(</span><span class=\"s1\">&#39;annotation_age_max&#39;</span><span class=\"p\">,</span>   <span class=\"n\">age_max_list</span><span class=\"p\">),</span>\n                <span class=\"p\">(</span><span class=\"s1\">&#39;annotation_name&#39;</span><span class=\"p\">,</span>      <span class=\"n\">name_list</span><span class=\"p\">),</span>\n                <span class=\"p\">(</span><span class=\"s1\">&#39;image_id&#39;</span><span class=\"p\">,</span>             <span class=\"n\">gid_list</span><span class=\"p\">),</span>\n                <span class=\"p\">(</span><span class=\"s1\">&#39;image_contributor&#39;</span><span class=\"p\">,</span>    <span class=\"n\">contributor_list</span><span class=\"p\">),</span>\n                <span class=\"p\">(</span><span class=\"s1\">&#39;image_car&#39;</span><span class=\"p\">,</span>            <span class=\"n\">car_list</span><span class=\"p\">),</span>\n                <span class=\"p\">(</span><span class=\"s1\">&#39;image_filename&#39;</span><span class=\"p\">,</span>       <span class=\"n\">uri_list</span><span class=\"p\">),</span>\n                <span class=\"p\">(</span><span class=\"s1\">&#39;image_unixtime&#39;</span><span class=\"p\">,</span>       <span class=\"n\">unixtime_list</span><span class=\"p\">),</span>\n                <span class=\"p\">(</span><span class=\"s1\">&#39;image_time_str&#39;</span><span class=\"p\">,</span>       <span class=\"n\">time_list</span><span class=\"p\">),</span>\n                <span class=\"p\">(</span><span class=\"s1\">&#39;image_date_str&#39;</span><span class=\"p\">,</span>       <span class=\"n\">date_list</span><span class=\"p\">),</span>\n                <span class=\"p\">(</span><span class=\"s1\">&#39;image_lat&#39;</span><span class=\"p\">,</span>            <span class=\"n\">lat_list</span><span class=\"p\">),</span>\n                <span class=\"p\">(</span><span class=\"s1\">&#39;image_lon&#39;</span><span class=\"p\">,</span>            <span class=\"n\">lon_list</span><span class=\"p\">),</span>\n                <span class=\"p\">(</span><span class=\"s1\">&#39;flag_first_seen&#39;</span><span class=\"p\">,</span>      <span class=\"n\">seen_list</span><span class=\"p\">),</span>\n                <span class=\"p\">(</span><span class=\"s1\">&#39;flag_marked&#39;</span><span class=\"p\">,</span>          <span class=\"n\">marked_list</span><span class=\"p\">),</span>\n            <span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">cols_list</span>      <span class=\"o\">=</span> <span class=\"p\">[</span>\n                <span class=\"p\">(</span><span class=\"s1\">&#39;annotation_id&#39;</span><span class=\"p\">,</span>        <span class=\"n\">aid_list</span><span class=\"p\">),</span>\n                <span class=\"p\">(</span><span class=\"s1\">&#39;image_time_str&#39;</span><span class=\"p\">,</span>       <span class=\"n\">time_list</span><span class=\"p\">),</span>\n                <span class=\"p\">(</span><span class=\"s1\">&#39;image_date_str&#39;</span><span class=\"p\">,</span>       <span class=\"n\">date_list</span><span class=\"p\">),</span>\n                <span class=\"p\">(</span><span class=\"s1\">&#39;flag_first_seen&#39;</span><span class=\"p\">,</span>      <span class=\"n\">seen_list</span><span class=\"p\">),</span>\n                <span class=\"p\">(</span><span class=\"s1\">&#39;image_lat&#39;</span><span class=\"p\">,</span>            <span class=\"n\">lat_list</span><span class=\"p\">),</span>\n                <span class=\"p\">(</span><span class=\"s1\">&#39;image_lon&#39;</span><span class=\"p\">,</span>            <span class=\"n\">lon_list</span><span class=\"p\">),</span>\n                <span class=\"p\">(</span><span class=\"s1\">&#39;image_car&#39;</span><span class=\"p\">,</span>            <span class=\"n\">car_list</span><span class=\"p\">),</span>\n                <span class=\"p\">(</span><span class=\"s1\">&#39;annotation_age_min&#39;</span><span class=\"p\">,</span>   <span class=\"n\">age_min_list</span><span class=\"p\">),</span>\n                <span class=\"p\">(</span><span class=\"s1\">&#39;annotation_age_max&#39;</span><span class=\"p\">,</span>   <span class=\"n\">age_max_list</span><span class=\"p\">),</span>\n                <span class=\"p\">(</span><span class=\"s1\">&#39;annotation_sex&#39;</span><span class=\"p\">,</span>       <span class=\"n\">sex_list</span><span class=\"p\">),</span>\n            <span class=\"p\">]</span>\n        <span class=\"n\">header_list</span>    <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"n\">sanitize_list</span><span class=\"p\">([</span> <span class=\"n\">cols</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">cols</span> <span class=\"ow\">in</span> <span class=\"n\">cols_list</span> <span class=\"p\">])</span> <span class=\"p\">]</span>\n        <span class=\"n\">data_list</span>      <span class=\"o\">=</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">[</span> <span class=\"n\">cols</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">cols</span> <span class=\"ow\">in</span> <span class=\"n\">cols_list</span> <span class=\"p\">])</span>\n        <span class=\"n\">line_list</span>      <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"n\">sanitize_list</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">data</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">data_list</span><span class=\"p\">)</span> <span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">header_list</span><span class=\"p\">,</span> <span class=\"n\">line_list</span>\n\n    <span class=\"c1\"># Grab primitives</span>\n    <span class=\"k\">if</span> <span class=\"n\">complete</span><span class=\"p\">:</span>\n        <span class=\"n\">aid_list</span>   <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_aids</span><span class=\"p\">()</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">aid_list</span>   <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">filter_aids_count</span><span class=\"p\">(</span><span class=\"n\">pre_unixtime_sort</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">gid_list</span>       <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_gids</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">bbox_list</span>      <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_bboxes</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">xtl_list</span>       <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"n\">bbox</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">bbox</span> <span class=\"ow\">in</span> <span class=\"n\">bbox_list</span> <span class=\"p\">]</span>\n    <span class=\"n\">ytl_list</span>       <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"n\">bbox</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">bbox</span> <span class=\"ow\">in</span> <span class=\"n\">bbox_list</span> <span class=\"p\">]</span>\n    <span class=\"n\">width_list</span>     <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"n\">bbox</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">bbox</span> <span class=\"ow\">in</span> <span class=\"n\">bbox_list</span> <span class=\"p\">]</span>\n    <span class=\"n\">height_list</span>    <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"n\">bbox</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">bbox</span> <span class=\"ow\">in</span> <span class=\"n\">bbox_list</span> <span class=\"p\">]</span>\n    <span class=\"n\">species_list</span>   <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_species_texts</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">viewpoint_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_viewpoints</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">quality_list</span>   <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_quality_texts</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">contributor_list</span>   <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_contributor_tag</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">car_list</span>       <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"n\">_split_car_contributor_tag</span><span class=\"p\">(</span><span class=\"n\">contributor_tag</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">contributor_tag</span> <span class=\"ow\">in</span> <span class=\"n\">contributor_list</span> <span class=\"p\">]</span>\n    <span class=\"n\">uri_list</span>       <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_uris</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">sex_list</span>       <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_sex_texts</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">age_min_list</span>   <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_age_months_est_min</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">age_max_list</span>   <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_age_months_est_max</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">name_list</span>      <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_names</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">unixtime_list</span>  <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_unixtime</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">datetime_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">unixtime_to_datetimestr</span><span class=\"p\">(</span><span class=\"n\">unixtime</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">unixtime</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"k\">else</span>\n        <span class=\"s1\">&#39;UNKNOWN&#39;</span>\n        <span class=\"k\">for</span> <span class=\"n\">unixtime</span> <span class=\"ow\">in</span> <span class=\"n\">unixtime_list</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">datetime_split_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39; &#39;</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">datetime</span> <span class=\"ow\">in</span> <span class=\"n\">datetime_list</span> <span class=\"p\">]</span>\n    <span class=\"n\">date_list</span>      <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">datetime_split</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">datetime_split</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span> <span class=\"k\">else</span> <span class=\"s1\">&#39;UNKNOWN&#39;</span>\n        <span class=\"k\">for</span> <span class=\"n\">datetime_split</span> <span class=\"ow\">in</span> <span class=\"n\">datetime_split_list</span> <span class=\"p\">]</span>\n    <span class=\"n\">time_list</span>      <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">datetime_split</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">datetime_split</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span> <span class=\"k\">else</span> <span class=\"s1\">&#39;UNKNOWN&#39;</span>\n        <span class=\"k\">for</span> <span class=\"n\">datetime_split</span> <span class=\"ow\">in</span> <span class=\"n\">datetime_split_list</span> <span class=\"p\">]</span>\n    <span class=\"n\">lat_list</span>       <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_lat</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">lon_list</span>       <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_lon</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">marked_list</span>    <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">flag_aids_count</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">seen_list</span>      <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">seen_set</span>       <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">()</span>\n    <span class=\"k\">for</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">name_list</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">name</span> <span class=\"o\">!=</span> <span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">UNKNOWN</span> <span class=\"ow\">and</span> <span class=\"n\">name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">seen_set</span><span class=\"p\">:</span>\n            <span class=\"n\">seen_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"n\">seen_set</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"k\">continue</span>\n        <span class=\"n\">seen_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n    <span class=\"n\">return_list</span><span class=\"p\">,</span> <span class=\"n\">line_list</span> <span class=\"o\">=</span> <span class=\"n\">construct</span><span class=\"p\">()</span>\n    <span class=\"n\">return_list</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">line_list</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">include_images</span><span class=\"p\">:</span>\n        <span class=\"n\">all_gid_set</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_gids</span><span class=\"p\">())</span>\n        <span class=\"n\">gid_set</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n        <span class=\"n\">missing_gid_list</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">all_gid_set</span> <span class=\"o\">-</span> <span class=\"n\">gid_set</span><span class=\"p\">))</span>\n        <span class=\"n\">filler</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">missing_gid_list</span><span class=\"p\">)</span>\n\n        <span class=\"n\">aid_list</span>       <span class=\"o\">=</span> <span class=\"n\">filler</span>\n        <span class=\"n\">species_list</span>   <span class=\"o\">=</span> <span class=\"n\">filler</span>\n        <span class=\"n\">viewpoint_list</span> <span class=\"o\">=</span> <span class=\"n\">filler</span>\n        <span class=\"n\">quality_list</span>   <span class=\"o\">=</span> <span class=\"n\">filler</span>\n        <span class=\"n\">sex_list</span>       <span class=\"o\">=</span> <span class=\"n\">filler</span>\n        <span class=\"n\">age_min_list</span>   <span class=\"o\">=</span> <span class=\"n\">filler</span>\n        <span class=\"n\">age_max_list</span>   <span class=\"o\">=</span> <span class=\"n\">filler</span>\n        <span class=\"n\">name_list</span>      <span class=\"o\">=</span> <span class=\"n\">filler</span>\n        <span class=\"n\">gid_list</span>       <span class=\"o\">=</span> <span class=\"n\">missing_gid_list</span>\n        <span class=\"n\">contributor_list</span>   <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_contributor_tag</span><span class=\"p\">(</span><span class=\"n\">missing_gid_list</span><span class=\"p\">)</span>\n        <span class=\"n\">car_list</span>       <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"n\">_split_car_contributor_tag</span><span class=\"p\">(</span><span class=\"n\">contributor_tag</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">contributor_tag</span> <span class=\"ow\">in</span> <span class=\"n\">contributor_list</span> <span class=\"p\">]</span>\n        <span class=\"n\">uri_list</span>       <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_uris</span><span class=\"p\">(</span><span class=\"n\">missing_gid_list</span><span class=\"p\">)</span>\n        <span class=\"n\">unixtime_list</span>  <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_unixtime</span><span class=\"p\">(</span><span class=\"n\">missing_gid_list</span><span class=\"p\">)</span>\n        <span class=\"n\">datetime_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">unixtime_to_datetimestr</span><span class=\"p\">(</span><span class=\"n\">unixtime</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">unixtime</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"k\">else</span>\n            <span class=\"s1\">&#39;UNKNOWN&#39;</span>\n            <span class=\"k\">for</span> <span class=\"n\">unixtime</span> <span class=\"ow\">in</span> <span class=\"n\">unixtime_list</span>\n        <span class=\"p\">]</span>\n        <span class=\"n\">datetime_split_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39; &#39;</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">datetime</span> <span class=\"ow\">in</span> <span class=\"n\">datetime_list</span> <span class=\"p\">]</span>\n        <span class=\"n\">date_list</span>      <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"n\">datetime_split</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">datetime_split</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span> <span class=\"k\">else</span> <span class=\"s1\">&#39;UNKNOWN&#39;</span>\n            <span class=\"k\">for</span> <span class=\"n\">datetime_split</span> <span class=\"ow\">in</span> <span class=\"n\">datetime_split_list</span> <span class=\"p\">]</span>\n        <span class=\"n\">time_list</span>      <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"n\">datetime_split</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">datetime_split</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span> <span class=\"k\">else</span> <span class=\"s1\">&#39;UNKNOWN&#39;</span>\n            <span class=\"k\">for</span> <span class=\"n\">datetime_split</span> <span class=\"ow\">in</span> <span class=\"n\">datetime_split_list</span> <span class=\"p\">]</span>\n        <span class=\"n\">lat_list</span>       <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_lat</span><span class=\"p\">(</span><span class=\"n\">missing_gid_list</span><span class=\"p\">)</span>\n        <span class=\"n\">lon_list</span>       <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_lon</span><span class=\"p\">(</span><span class=\"n\">missing_gid_list</span><span class=\"p\">)</span>\n        <span class=\"n\">seen_list</span>      <span class=\"o\">=</span> <span class=\"n\">filler</span>\n        <span class=\"n\">marked_list</span>    <span class=\"o\">=</span> <span class=\"n\">filler</span>\n\n        <span class=\"n\">header_list</span><span class=\"p\">,</span> <span class=\"n\">line_list</span> <span class=\"o\">=</span> <span class=\"n\">construct</span><span class=\"p\">()</span>  <span class=\"c1\"># NOTE: discard the header list returned here</span>\n        <span class=\"n\">return_list</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">line_list</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">return_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"report_sightings_str\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.report_sightings_str\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">report_sightings_str</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"n\">line_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">report_sightings</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">line_list</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"check_chip_existence\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.check_chip_existence\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">check_chip_existence</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"n\">aid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_aids</span><span class=\"p\">()</span>\n    <span class=\"n\">chip_fpath_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_chip_fpath</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">flag_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"kc\">True</span> <span class=\"k\">if</span> <span class=\"n\">chip_fpath</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"k\">else</span> <span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">chip_fpath</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">chip_fpath</span> <span class=\"ow\">in</span> <span class=\"n\">chip_fpath_list</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">aid_kill_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">filterfalse_items</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">flag_list</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aid_kill_list</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;found </span><span class=\"si\">%d</span><span class=\"s1\"> inconsistent chips attempting to fix&#39;</span> <span class=\"o\">%</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aid_kill_list</span><span class=\"p\">))</span>\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">delete_annot_chips</span><span class=\"p\">(</span><span class=\"n\">aid_kill_list</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_quality_filterflags\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.get_quality_filterflags\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_quality_filterflags</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">minqual</span><span class=\"p\">,</span> <span class=\"n\">unknown_ok</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    DEPRICATE</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (IBEISController):  ibeis controller object</span>\n<span class=\"sd\">        aid_list (int):  list of annotation ids</span>\n<span class=\"sd\">        minqual (str): qualtext</span>\n<span class=\"sd\">        unknown_ok (bool): (default = False)</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        iter: qual_flags</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --exec-get_quality_filterflags</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(defaultdb=&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; aid_list = ibs.get_valid_aids()[0:20]</span>\n<span class=\"sd\">        &gt;&gt;&gt; minqual = &#39;junk&#39;</span>\n<span class=\"sd\">        &gt;&gt;&gt; unknown_ok = False</span>\n<span class=\"sd\">        &gt;&gt;&gt; qual_flags = list(get_quality_filterflags(ibs, aid_list, minqual, unknown_ok))</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = (&#39;qual_flags = %s&#39; % (str(qual_flags),))</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">minqual_int</span> <span class=\"o\">=</span> <span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">QUALITY_TEXT_TO_INT</span><span class=\"p\">[</span><span class=\"n\">minqual</span><span class=\"p\">]</span>\n    <span class=\"n\">qual_int_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_qualities</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"c1\">#print(&#39;qual_int_list = %r&#39; % (qual_int_list,))</span>\n    <span class=\"k\">if</span> <span class=\"n\">unknown_ok</span><span class=\"p\">:</span>\n        <span class=\"n\">qual_flags</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"p\">(</span><span class=\"n\">qual_int</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"n\">qual_int</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">qual_int</span> <span class=\"o\">&gt;=</span> <span class=\"n\">minqual_int</span>\n            <span class=\"k\">for</span> <span class=\"n\">qual_int</span> <span class=\"ow\">in</span> <span class=\"n\">qual_int_list</span>\n        <span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">qual_flags</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"p\">(</span><span class=\"n\">qual_int</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">qual_int</span> <span class=\"o\">&gt;=</span> <span class=\"n\">minqual_int</span>\n            <span class=\"k\">for</span> <span class=\"n\">qual_int</span> <span class=\"ow\">in</span> <span class=\"n\">qual_int_list</span>\n        <span class=\"p\">)</span>\n    <span class=\"n\">qual_flags</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">qual_flags</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">qual_flags</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_viewpoint_filterflags\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.get_viewpoint_filterflags\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"nd\">@profile</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_viewpoint_filterflags</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">valid_yaws</span><span class=\"p\">,</span> <span class=\"n\">unknown_ok</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">assume_unique</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (IBEISController):  ibeis controller object</span>\n<span class=\"sd\">        aid_list (int):  list of annotation ids</span>\n<span class=\"sd\">        valid_yaws (?):</span>\n<span class=\"sd\">        unknown_ok (bool): (default = True)</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        int: aid_list -  list of annotation ids</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --exec-get_viewpoint_filterflags</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --exec-get_viewpoint_filterflags --db NNP_Master3</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(defaultdb=&#39;Spotted_Dolfin_Master&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; aid_list = ibs.get_valid_aids()[0:20]</span>\n<span class=\"sd\">        &gt;&gt;&gt; valid_yaws = [&#39;left&#39;]</span>\n<span class=\"sd\">        &gt;&gt;&gt; unknown_ok = False</span>\n<span class=\"sd\">        &gt;&gt;&gt; yaw_flags = list(get_viewpoint_filterflags(ibs, aid_list, valid_yaws, unknown_ok))</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = (&#39;yaw_flags = %s&#39; % (str(yaw_flags),))</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">assert</span> <span class=\"n\">valid_yaws</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">valid_yaws</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">)),</span> <span class=\"s1\">&#39;valid_yaws is not a container&#39;</span>\n    <span class=\"n\">yaw_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_viewpoints</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">assume_unique</span><span class=\"o\">=</span><span class=\"n\">assume_unique</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">unknown_ok</span><span class=\"p\">:</span>\n        <span class=\"n\">yaw_flags</span>  <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">yaw</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"p\">(</span><span class=\"n\">valid_yaws</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"n\">yaw</span> <span class=\"ow\">in</span> <span class=\"n\">valid_yaws</span><span class=\"p\">)</span>\n                      <span class=\"k\">for</span> <span class=\"n\">yaw</span> <span class=\"ow\">in</span> <span class=\"n\">yaw_list</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">yaw_flags</span>  <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">yaw</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"p\">(</span><span class=\"n\">valid_yaws</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"n\">yaw</span> <span class=\"ow\">in</span> <span class=\"n\">valid_yaws</span><span class=\"p\">)</span>\n                      <span class=\"k\">for</span> <span class=\"n\">yaw</span> <span class=\"ow\">in</span> <span class=\"n\">yaw_list</span><span class=\"p\">)</span>\n    <span class=\"n\">yaw_flags</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">yaw_flags</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">yaw_flags</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_quality_viewpoint_filterflags\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.get_quality_viewpoint_filterflags\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_quality_viewpoint_filterflags</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">minqual</span><span class=\"p\">,</span> <span class=\"n\">valid_yaws</span><span class=\"p\">):</span>\n    <span class=\"n\">qual_flags</span> <span class=\"o\">=</span> <span class=\"n\">get_quality_filterflags</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">minqual</span><span class=\"p\">)</span>\n    <span class=\"n\">yaw_flags</span> <span class=\"o\">=</span> <span class=\"n\">get_viewpoint_filterflags</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">valid_yaws</span><span class=\"p\">)</span>\n    <span class=\"c1\">#qual_list = ibs.get_annot_qualities(aid_list)</span>\n    <span class=\"c1\">#yaw_list = ibs.get_annot_viewpoints(aid_list)</span>\n    <span class=\"c1\">#qual_flags = (qual is None or qual &gt; minqual for qual in qual_list)</span>\n    <span class=\"c1\">#yaw_flags  = (yaw is None or yaw in valid_yaws for yaw in yaw_list)</span>\n    <span class=\"n\">flags_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">and_iters</span><span class=\"p\">(</span><span class=\"n\">qual_flags</span><span class=\"p\">,</span> <span class=\"n\">yaw_flags</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">flags_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"flag_aids_count\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.flag_aids_count\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">flag_aids_count</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (IBEISController):  ibeis controller object</span>\n<span class=\"sd\">        aid_list (int):  list of annotation ids</span>\n<span class=\"sd\">        pre_unixtime_sort (bool):</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        list:</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --test-flag_aids_count</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; aid_list = ibs.get_valid_aids()</span>\n<span class=\"sd\">        &gt;&gt;&gt; gzc_flag_list = flag_aids_count(ibs, aid_list)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = gzc_flag_list</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">        [False, True, False, False, True, False, True, True, False, True, False, True, True]</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\"># Get primitives</span>\n    <span class=\"n\">unixtime_list</span>  <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_image_unixtimes</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">index_list</span>     <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">list_argsort</span><span class=\"p\">(</span><span class=\"n\">unixtime_list</span><span class=\"p\">)</span>\n    <span class=\"n\">aid_list</span>       <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">sortedby</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">unixtime_list</span><span class=\"p\">)</span>\n    <span class=\"n\">gid_list</span>       <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_gids</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">nid_list</span>       <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_name_rowids</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">contributor_list</span>   <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_contributor_tag</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Get filter flags for aids</span>\n    <span class=\"n\">isunknown_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">is_aid_unknown</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">flag_list</span>      <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"ow\">not</span> <span class=\"n\">unknown</span>  <span class=\"k\">for</span> <span class=\"n\">unknown</span> <span class=\"ow\">in</span> <span class=\"n\">isunknown_list</span><span class=\"p\">]</span>\n    <span class=\"c1\"># Filter by seen and car</span>\n    <span class=\"n\">flag_list_</span>     <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">seen_dict</span>      <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ddict</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Mark the first annotation (for each name) seen per car</span>\n    <span class=\"n\">values_list</span>    <span class=\"o\">=</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">gid_list</span><span class=\"p\">,</span> <span class=\"n\">nid_list</span><span class=\"p\">,</span> <span class=\"n\">flag_list</span><span class=\"p\">,</span> <span class=\"n\">contributor_list</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">aid</span><span class=\"p\">,</span> <span class=\"n\">gid</span><span class=\"p\">,</span> <span class=\"n\">nid</span><span class=\"p\">,</span> <span class=\"n\">flag</span><span class=\"p\">,</span> <span class=\"n\">contrib</span> <span class=\"ow\">in</span> <span class=\"n\">values_list</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">flag</span><span class=\"p\">:</span>\n            <span class=\"n\">contributor_</span> <span class=\"o\">=</span> <span class=\"n\">_split_car_contributor_tag</span><span class=\"p\">(</span><span class=\"n\">contrib</span><span class=\"p\">,</span> <span class=\"n\">distinguish_invalids</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">nid</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">seen_dict</span><span class=\"p\">[</span><span class=\"n\">contributor_</span><span class=\"p\">]:</span>\n                <span class=\"n\">seen_dict</span><span class=\"p\">[</span><span class=\"n\">contributor_</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">nid</span><span class=\"p\">)</span>\n                <span class=\"n\">flag_list_</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n                <span class=\"k\">continue</span>\n        <span class=\"n\">flag_list_</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Take the inverse of the sorted</span>\n    <span class=\"n\">gzc_flag_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">list_inverse_take</span><span class=\"p\">(</span><span class=\"n\">flag_list_</span><span class=\"p\">,</span> <span class=\"n\">index_list</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">gzc_flag_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"filter_aids_count\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.filter_aids_count\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">filter_aids_count</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">pre_unixtime_sort</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">aid_list</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Get all aids and pre-sort by unixtime</span>\n        <span class=\"n\">aid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_aids</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">pre_unixtime_sort</span><span class=\"p\">:</span>\n            <span class=\"n\">unixtime_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_unixtime</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_gids</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">))</span>\n            <span class=\"n\">aid_list</span>      <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">sortedby</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">unixtime_list</span><span class=\"p\">)</span>\n    <span class=\"n\">flags_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">flag_aids_count</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">aid_list_</span>  <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">iter_compress</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">flags_list</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">aid_list_</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_unflat_annots_kmdists_list\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.get_unflat_annots_kmdists_list\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"nd\">@profile</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_unflat_annots_kmdists_list</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aids_list</span><span class=\"p\">):</span>\n    <span class=\"c1\">#ibs.check_name_mapping_consistency(aids_list)</span>\n    <span class=\"n\">latlons_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">unflat_map</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_image_gps</span><span class=\"p\">,</span> <span class=\"n\">aids_list</span><span class=\"p\">)</span>\n    <span class=\"n\">latlon_arrs</span>   <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">latlons</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">latlons</span> <span class=\"ow\">in</span> <span class=\"n\">latlons_list</span><span class=\"p\">]</span>\n    <span class=\"k\">for</span> <span class=\"n\">arrs</span> <span class=\"ow\">in</span> <span class=\"n\">latlon_arrs</span><span class=\"p\">:</span>\n        <span class=\"c1\"># our database encodes -1 as invalid.</span>\n        <span class=\"c1\"># Silly, but its in the middle of the atlantic ocean</span>\n        <span class=\"n\">arrs</span><span class=\"p\">[</span><span class=\"n\">arrs</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span>\n    <span class=\"n\">km_dists_list</span>   <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">safe_pdist</span><span class=\"p\">(</span><span class=\"n\">latlon_arr</span><span class=\"p\">,</span> <span class=\"n\">metric</span><span class=\"o\">=</span><span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">haversine</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">latlon_arr</span> <span class=\"ow\">in</span> <span class=\"n\">latlon_arrs</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">km_dists_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_unflat_annots_hourdists_list\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.get_unflat_annots_hourdists_list\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"nd\">@profile</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_unflat_annots_hourdists_list</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aids_list</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = testdata_ibs(&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; nid_list = get_valid_multiton_nids_custom(ibs)</span>\n<span class=\"sd\">        &gt;&gt;&gt; aids_list_ = ibs.get_name_aids(nid_list)</span>\n<span class=\"sd\">        &gt;&gt;&gt; aids_list = [(aids) for aids in aids_list_]</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs.get_unflat_annots_hourdists_list(aids_list)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\">#assert all(list(map(ut.isunique, aids_list)))</span>\n    <span class=\"n\">unixtimes_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">unflat_map</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_image_unixtimes_asfloat</span><span class=\"p\">,</span> <span class=\"n\">aids_list</span><span class=\"p\">)</span>\n    <span class=\"c1\">#assert all(list(map(ut.isunique, unixtimes_list)))</span>\n    <span class=\"n\">unixtime_arrs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">unixtimes</span><span class=\"p\">)[:,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">unixtimes</span> <span class=\"ow\">in</span> <span class=\"n\">unixtimes_list</span><span class=\"p\">]</span>\n    <span class=\"n\">hour_dists_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">safe_pdist</span><span class=\"p\">(</span><span class=\"n\">unixtime_arr</span><span class=\"p\">,</span> <span class=\"n\">metric</span><span class=\"o\">=</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">unixtime_hourdiff</span><span class=\"p\">)</span>\n                       <span class=\"k\">for</span> <span class=\"n\">unixtime_arr</span> <span class=\"ow\">in</span> <span class=\"n\">unixtime_arrs</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">hour_dists_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_unflat_annots_timedelta_list\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.get_unflat_annots_timedelta_list\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"nd\">@profile</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_unflat_annots_timedelta_list</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aids_list</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = testdata_ibs(&#39;NNP_Master3&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; nid_list = get_valid_multiton_nids_custom(ibs)</span>\n<span class=\"sd\">        &gt;&gt;&gt; aids_list_ = ibs.get_name_aids(nid_list)</span>\n<span class=\"sd\">        &gt;&gt;&gt; aids_list = [(aids) for aids in aids_list_]</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\">#assert all(list(map(ut.isunique, aids_list)))</span>\n    <span class=\"n\">unixtimes_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">unflat_map</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_image_unixtimes_asfloat</span><span class=\"p\">,</span> <span class=\"n\">aids_list</span><span class=\"p\">)</span>\n    <span class=\"c1\">#assert all(list(map(ut.isunique, unixtimes_list)))</span>\n    <span class=\"n\">unixtime_arrs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">unixtimes</span><span class=\"p\">)[:,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">unixtimes</span> <span class=\"ow\">in</span> <span class=\"n\">unixtimes_list</span><span class=\"p\">]</span>\n    <span class=\"n\">timedelta_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">safe_pdist</span><span class=\"p\">(</span><span class=\"n\">unixtime_arr</span><span class=\"p\">,</span> <span class=\"n\">metric</span><span class=\"o\">=</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">absdiff</span><span class=\"p\">)</span> <span class=\"k\">for</span>\n                      <span class=\"n\">unixtime_arr</span> <span class=\"ow\">in</span> <span class=\"n\">unixtime_arrs</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">timedelta_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_unflat_annots_speeds_list2\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.get_unflat_annots_speeds_list2\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"nd\">@profile</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_unflat_annots_speeds_list2</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aids_list</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    much faster than original version</span>\n\n<span class=\"sd\">    _ = ibs.get_unflat_annots_speeds_list2(aids_list)</span>\n\n<span class=\"sd\">    %timeit ibs.get_unflat_annots_speeds_list(aids_list)</span>\n<span class=\"sd\">    3.44 s per loop</span>\n\n<span class=\"sd\">    %timeit ibs.get_unflat_annots_speeds_list2(aids_list)</span>\n<span class=\"sd\">    665 ms per loop</span>\n\n<span class=\"sd\">    %timeit ibs.get_unflat_annots_speeds_list(aids_list[0:1])</span>\n<span class=\"sd\">    12.8 ms</span>\n<span class=\"sd\">    %timeit ibs.get_unflat_annots_speeds_list2(aids_list[0:1])</span>\n<span class=\"sd\">    6.51 ms</span>\n\n<span class=\"sd\">    assert ibs.get_unflat_annots_speeds_list([]) == ibs.get_unflat_annots_speeds_list2([])</span>\n\n<span class=\"sd\">    ibs.get_unflat_annots_speeds_list([[]])</span>\n<span class=\"sd\">    ibs.get_unflat_annots_speeds_list2([[]])</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"n\">unique_aids</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">aids_list</span><span class=\"p\">))))</span>\n        <span class=\"n\">aid_pairs_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">combinations</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">aids</span> <span class=\"ow\">in</span> <span class=\"n\">aids_list</span><span class=\"p\">]</span>\n        <span class=\"n\">aid_pairs</span><span class=\"p\">,</span> <span class=\"n\">cumsum</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">invertible_flatten2</span><span class=\"p\">(</span><span class=\"n\">aid_pairs_list</span><span class=\"p\">)</span>\n        <span class=\"n\">speeds</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annotpair_speeds</span><span class=\"p\">(</span><span class=\"n\">aid_pairs</span><span class=\"p\">,</span> <span class=\"n\">unique_aids</span><span class=\"o\">=</span><span class=\"n\">unique_aids</span><span class=\"p\">)</span>\n        <span class=\"n\">speeds_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">unflatten2</span><span class=\"p\">(</span><span class=\"n\">speeds</span><span class=\"p\">,</span> <span class=\"n\">cumsum</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Use indexing for lookup efficiency</span>\n        <span class=\"n\">unique_aids</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">aids_list</span><span class=\"p\">))))</span>\n        <span class=\"n\">aid_to_idx</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">make_index_lookup</span><span class=\"p\">(</span><span class=\"n\">unique_aids</span><span class=\"p\">)</span>\n        <span class=\"n\">idx_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">aid_to_idx</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">aids</span> <span class=\"ow\">in</span> <span class=\"n\">aids_list</span><span class=\"p\">]</span>\n        <span class=\"c1\"># Lookup values in SQL only once</span>\n        <span class=\"n\">unique_unixtimes</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_image_unixtimes_asfloat</span><span class=\"p\">(</span><span class=\"n\">unique_aids</span><span class=\"p\">)</span>\n        <span class=\"n\">unique_gps</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_image_gps</span><span class=\"p\">(</span><span class=\"n\">unique_aids</span><span class=\"p\">)</span>\n        <span class=\"n\">unique_gps</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span>\n            <span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span> <span class=\"k\">if</span> <span class=\"n\">lat</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"n\">lat</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span> <span class=\"k\">if</span> <span class=\"n\">lon</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"n\">lon</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">lat</span><span class=\"p\">,</span> <span class=\"n\">lon</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"n\">unique_gps</span><span class=\"p\">])</span>\n        <span class=\"n\">unique_gps</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">atleast_nd</span><span class=\"p\">(</span><span class=\"n\">unique_gps</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">unique_gps</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">unique_gps</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Find pairs that need comparison</span>\n        <span class=\"n\">idx_pairs_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">combinations</span><span class=\"p\">(</span><span class=\"n\">idxs</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">idxs</span> <span class=\"ow\">in</span> <span class=\"n\">idx_list</span><span class=\"p\">]</span>\n        <span class=\"n\">idx_pairs</span><span class=\"p\">,</span> <span class=\"n\">cumsum</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">invertible_flatten2</span><span class=\"p\">(</span><span class=\"n\">idx_pairs_list</span><span class=\"p\">)</span>\n        <span class=\"n\">idxs1</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take_column</span><span class=\"p\">(</span><span class=\"n\">idx_pairs</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"n\">idxs2</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take_column</span><span class=\"p\">(</span><span class=\"n\">idx_pairs</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Find differences in time and space</span>\n        <span class=\"n\">hour_dists</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">unixtime_hourdiff</span><span class=\"p\">(</span><span class=\"n\">unique_unixtimes</span><span class=\"p\">[</span><span class=\"n\">idxs1</span><span class=\"p\">],</span> <span class=\"n\">unique_unixtimes</span><span class=\"p\">[</span><span class=\"n\">idxs2</span><span class=\"p\">])</span>\n        <span class=\"n\">km_dists</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">haversine</span><span class=\"p\">(</span><span class=\"n\">unique_gps</span><span class=\"p\">[</span><span class=\"n\">idxs1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">unique_gps</span><span class=\"p\">[</span><span class=\"n\">idxs2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Zero km-distances less than a small epsilon if the timediff is zero to</span>\n        <span class=\"c1\"># prevent infinity problems</span>\n        <span class=\"n\">idxs</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">hour_dists</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">under_eps</span> <span class=\"o\">=</span> <span class=\"n\">km_dists</span><span class=\"p\">[</span><span class=\"n\">idxs</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"o\">.</span><span class=\"mi\">5</span>\n        <span class=\"n\">km_dists</span><span class=\"p\">[</span><span class=\"n\">idxs</span><span class=\"p\">[</span><span class=\"n\">under_eps</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"c1\"># Normal speed calculation</span>\n        <span class=\"n\">speeds</span> <span class=\"o\">=</span> <span class=\"n\">km_dists</span> <span class=\"o\">/</span> <span class=\"n\">hour_dists</span>\n        <span class=\"c1\"># No movement over no time</span>\n        <span class=\"n\">flags</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">logical_and</span><span class=\"p\">(</span><span class=\"n\">km_dists</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">hour_dists</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"n\">speeds</span><span class=\"p\">[</span><span class=\"n\">flags</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">speeds_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">unflatten2</span><span class=\"p\">(</span><span class=\"n\">speeds</span><span class=\"p\">,</span> <span class=\"n\">cumsum</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">speeds_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_annotpair_speeds\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.get_annotpair_speeds\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"nd\">@profile</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_annotpair_speeds</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_pairs</span><span class=\"p\">,</span> <span class=\"n\">unique_aids</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"n\">aids1</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take_column</span><span class=\"p\">(</span><span class=\"n\">aid_pairs</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">aids2</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take_column</span><span class=\"p\">(</span><span class=\"n\">aid_pairs</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">unique_aids</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">unique_aids</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">([</span><span class=\"n\">aids1</span><span class=\"p\">,</span> <span class=\"n\">aids2</span><span class=\"p\">]))))</span>\n    <span class=\"c1\"># Use indexing for lookup efficiency</span>\n    <span class=\"n\">aid_to_idx</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">make_index_lookup</span><span class=\"p\">(</span><span class=\"n\">unique_aids</span><span class=\"p\">)</span>\n    <span class=\"n\">idxs1</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">aid_to_idx</span><span class=\"p\">,</span> <span class=\"n\">aids1</span><span class=\"p\">)</span>\n    <span class=\"n\">idxs2</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">aid_to_idx</span><span class=\"p\">,</span> <span class=\"n\">aids2</span><span class=\"p\">)</span>\n    <span class=\"c1\">#idx_list = [ut.take(aid_to_idx, aids) for aids in aids_list]</span>\n    <span class=\"c1\"># Lookup values in SQL only once</span>\n    <span class=\"n\">unique_unixtimes</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_image_unixtimes_asfloat</span><span class=\"p\">(</span><span class=\"n\">unique_aids</span><span class=\"p\">)</span>\n    <span class=\"n\">unique_gps</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_image_gps</span><span class=\"p\">(</span><span class=\"n\">unique_aids</span><span class=\"p\">)</span>\n    <span class=\"n\">unique_gps</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span>\n        <span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span> <span class=\"k\">if</span> <span class=\"n\">lat</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"n\">lat</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span> <span class=\"k\">if</span> <span class=\"n\">lon</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"n\">lon</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">lat</span><span class=\"p\">,</span> <span class=\"n\">lon</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"n\">unique_gps</span><span class=\"p\">])</span>\n    <span class=\"n\">unique_gps</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">atleast_nd</span><span class=\"p\">(</span><span class=\"n\">unique_gps</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">unique_gps</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"n\">unique_gps</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Find differences in time and space</span>\n    <span class=\"n\">hour_dists</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">unixtime_hourdiff</span><span class=\"p\">(</span><span class=\"n\">unique_unixtimes</span><span class=\"p\">[</span><span class=\"n\">idxs1</span><span class=\"p\">],</span> <span class=\"n\">unique_unixtimes</span><span class=\"p\">[</span><span class=\"n\">idxs2</span><span class=\"p\">])</span>\n    <span class=\"n\">km_dists</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">haversine</span><span class=\"p\">(</span><span class=\"n\">unique_gps</span><span class=\"p\">[</span><span class=\"n\">idxs1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">unique_gps</span><span class=\"p\">[</span><span class=\"n\">idxs2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Zero km-distances less than a small epsilon if the timediff is zero to</span>\n    <span class=\"c1\"># prevent infinity problems</span>\n    <span class=\"n\">idxs</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">hour_dists</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"n\">under_eps</span> <span class=\"o\">=</span> <span class=\"n\">km_dists</span><span class=\"p\">[</span><span class=\"n\">idxs</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"o\">.</span><span class=\"mi\">5</span>\n    <span class=\"n\">km_dists</span><span class=\"p\">[</span><span class=\"n\">idxs</span><span class=\"p\">[</span><span class=\"n\">under_eps</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"c1\"># Normal speed calculation</span>\n    <span class=\"n\">speeds</span> <span class=\"o\">=</span> <span class=\"n\">km_dists</span> <span class=\"o\">/</span> <span class=\"n\">hour_dists</span>\n    <span class=\"c1\"># No movement over no time</span>\n    <span class=\"n\">flags</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">logical_and</span><span class=\"p\">(</span><span class=\"n\">km_dists</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">hour_dists</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">speeds</span><span class=\"p\">[</span><span class=\"n\">flags</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">return</span> <span class=\"n\">speeds</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_unflat_am_rowids\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.get_unflat_am_rowids\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"nd\">@profile</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_unflat_am_rowids</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aids_list</span><span class=\"p\">):</span>\n    <span class=\"n\">aid_pairs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">combinations</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">aids</span> <span class=\"ow\">in</span> <span class=\"n\">aids_list</span><span class=\"p\">]</span>\n    <span class=\"n\">flat_pairs</span><span class=\"p\">,</span> <span class=\"n\">cumsum</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">invertible_flatten2</span><span class=\"p\">(</span><span class=\"n\">aid_pairs</span><span class=\"p\">)</span>\n    <span class=\"n\">flat_aids1</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take_column</span><span class=\"p\">(</span><span class=\"n\">flat_pairs</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">flat_aids2</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take_column</span><span class=\"p\">(</span><span class=\"n\">flat_pairs</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">flat_ams_</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annotmatch_rowid_from_undirected_superkey</span><span class=\"p\">(</span><span class=\"n\">flat_aids1</span><span class=\"p\">,</span> <span class=\"n\">flat_aids2</span><span class=\"p\">)</span>\n    <span class=\"n\">ams_</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">unflatten2</span><span class=\"p\">(</span><span class=\"n\">flat_ams_</span><span class=\"p\">,</span> <span class=\"n\">cumsum</span><span class=\"p\">)</span>\n    <span class=\"n\">ams_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">filter_Nones</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">a</span> <span class=\"ow\">in</span> <span class=\"n\">ams_</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">ams_list</span></div>\n    <span class=\"c1\">#flat_ams = ut.filter_Nones(ams)</span>\n\n\n<div class=\"viewcode-block\" id=\"get_unflat_am_aidpairs\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.get_unflat_am_aidpairs\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"nd\">@profile</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_unflat_am_aidpairs</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aids_list</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; Gets only aid pairs that have some reviewed/matched status &quot;&quot;&quot;</span>\n    <span class=\"n\">ams_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_unflat_am_rowids</span><span class=\"p\">(</span><span class=\"n\">aids_list</span><span class=\"p\">)</span>\n    <span class=\"n\">flat_ams</span><span class=\"p\">,</span> <span class=\"n\">cumsum</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">invertible_flatten2</span><span class=\"p\">(</span><span class=\"n\">ams_list</span><span class=\"p\">)</span>\n    <span class=\"n\">flat_aids1</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annotmatch_aid1</span><span class=\"p\">(</span><span class=\"n\">flat_ams</span><span class=\"p\">)</span>\n    <span class=\"n\">flat_aids2</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annotmatch_aid2</span><span class=\"p\">(</span><span class=\"n\">flat_ams</span><span class=\"p\">)</span>\n    <span class=\"n\">flat_aid_pairs</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">flat_aids1</span><span class=\"p\">,</span> <span class=\"n\">flat_aids2</span><span class=\"p\">))</span>\n    <span class=\"n\">aid_pairs</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">unflatten2</span><span class=\"p\">(</span><span class=\"n\">flat_aid_pairs</span><span class=\"p\">,</span> <span class=\"n\">cumsum</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">aid_pairs</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_unflat_case_tags\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.get_unflat_case_tags\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"nd\">@profile</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_unflat_case_tags</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aids_list</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; Gets only aid pairs that have some reviewed/matched status &quot;&quot;&quot;</span>\n    <span class=\"n\">ams_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_unflat_am_rowids</span><span class=\"p\">(</span><span class=\"n\">aids_list</span><span class=\"p\">)</span>\n    <span class=\"n\">tags</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">unflat_map</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annotmatch_case_tags</span><span class=\"p\">,</span> <span class=\"n\">ams_list</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">tags</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_unflat_annots_speeds_list\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.get_unflat_annots_speeds_list\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"nd\">@profile</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_unflat_annots_speeds_list</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aids_list</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; DEPRICATE. SLOWER &quot;&quot;&quot;</span>\n    <span class=\"n\">km_dists_list</span>   <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_unflat_annots_kmdists_list</span><span class=\"p\">(</span><span class=\"n\">aids_list</span><span class=\"p\">)</span>\n    <span class=\"n\">hour_dists_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_unflat_annots_hourdists_list</span><span class=\"p\">(</span><span class=\"n\">aids_list</span><span class=\"p\">)</span>\n\n    <span class=\"c1\">#hour_dists_list = ut.replace_nones(hour_dists_list, [])</span>\n    <span class=\"c1\">#km_dists_list = ut.replace_nones(km_dists_list, [])</span>\n    <span class=\"c1\">#flat_hours, cumsum1 = np.array(ut.invertible_flatten2(hour_dists_list))</span>\n    <span class=\"c1\">#flat_hours = np.array(flat_hours)</span>\n    <span class=\"c1\">#flat_kms = np.array(ut.flatten(km_dists_list))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">compute_speed</span><span class=\"p\">(</span><span class=\"n\">km_dists</span><span class=\"p\">,</span> <span class=\"n\">hours_dists</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">km_dists</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"n\">hours_dists</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>\n        <span class=\"c1\"># Zero km-distances less than a small epsilon if the timediff is zero to</span>\n        <span class=\"c1\"># prevent infinity problems</span>\n        <span class=\"n\">idxs</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">hours_dists</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">under_eps</span> <span class=\"o\">=</span> <span class=\"n\">km_dists</span><span class=\"p\">[</span><span class=\"n\">idxs</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"o\">.</span><span class=\"mi\">5</span>\n        <span class=\"n\">km_dists</span><span class=\"p\">[</span><span class=\"n\">idxs</span><span class=\"p\">[</span><span class=\"n\">under_eps</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"c1\"># Normal speed calculation</span>\n        <span class=\"n\">speeds</span> <span class=\"o\">=</span> <span class=\"n\">km_dists</span> <span class=\"o\">/</span> <span class=\"n\">hours_dists</span>\n        <span class=\"c1\"># No movement over no time</span>\n        <span class=\"n\">flags</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">logical_and</span><span class=\"p\">(</span><span class=\"n\">km_dists</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">hours_dists</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"n\">speeds</span><span class=\"p\">[</span><span class=\"n\">flags</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">return</span> <span class=\"n\">speeds</span>\n\n    <span class=\"n\">speeds_list</span>     <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">compute_speed</span><span class=\"p\">(</span><span class=\"n\">km_dists</span><span class=\"p\">,</span> <span class=\"n\">hours_dists</span><span class=\"p\">)</span>\n        <span class=\"c1\">#vt.safe_div(km_dists, hours_dists)</span>\n        <span class=\"k\">for</span> <span class=\"n\">km_dists</span><span class=\"p\">,</span> <span class=\"n\">hours_dists</span> <span class=\"ow\">in</span>\n        <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">km_dists_list</span><span class=\"p\">,</span> <span class=\"n\">hour_dists_list</span><span class=\"p\">)]</span>\n    <span class=\"k\">return</span> <span class=\"n\">speeds_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"testdata_ibs\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.testdata_ibs\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">testdata_ibs</span><span class=\"p\">(</span><span class=\"n\">defaultdb</span><span class=\"o\">=</span><span class=\"s1\">&#39;testdb1&#39;</span><span class=\"p\">):</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">ibeis</span>\n    <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">opendb</span><span class=\"p\">(</span><span class=\"n\">defaultdb</span><span class=\"o\">=</span><span class=\"n\">defaultdb</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">ibs</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_valid_multiton_nids_custom\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.get_valid_multiton_nids_custom\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">get_valid_multiton_nids_custom</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">):</span>\n    <span class=\"n\">nid_list_</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">_get_all_known_nids</span><span class=\"p\">()</span>\n    <span class=\"n\">ismultiton_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">len</span><span class=\"p\">((</span><span class=\"n\">aids</span><span class=\"p\">))</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span>\n                       <span class=\"k\">for</span> <span class=\"n\">aids</span> <span class=\"ow\">in</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_name_aids</span><span class=\"p\">(</span><span class=\"n\">nid_list_</span><span class=\"p\">)]</span>\n    <span class=\"n\">nid_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">nid_list_</span><span class=\"p\">,</span> <span class=\"n\">ismultiton_list</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">nid_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"make_next_imageset_text\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.make_next_imageset_text\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">make_next_imageset_text</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Creates what the next imageset name would be but does not add it to the database</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (IBEISController):  ibeis controller object</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --test-make_next_imageset_text</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; new_imagesettext = make_next_imageset_text(ibs)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = new_imagesettext</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">        New ImageSet 0</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">imgsetid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_imgsetids</span><span class=\"p\">()</span>\n    <span class=\"n\">old_imagesettext_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_imageset_text</span><span class=\"p\">(</span><span class=\"n\">imgsetid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">new_imagesettext</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_nonconflicting_string</span><span class=\"p\">(</span><span class=\"s1\">&#39;New ImageSet </span><span class=\"si\">%d</span><span class=\"s1\">&#39;</span><span class=\"p\">,</span> <span class=\"n\">old_imagesettext_list</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">new_imagesettext</span></div>\n\n\n<div class=\"viewcode-block\" id=\"add_next_imageset\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.add_next_imageset\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">add_next_imageset</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; Adds a new imageset to the database &quot;&quot;&quot;</span>\n    <span class=\"n\">new_imagesettext</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">make_next_imageset_text</span><span class=\"p\">()</span>\n    <span class=\"p\">(</span><span class=\"n\">new_imgsetid</span><span class=\"p\">,)</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">add_imagesets</span><span class=\"p\">([</span><span class=\"n\">new_imagesettext</span><span class=\"p\">])</span>\n    <span class=\"k\">return</span> <span class=\"n\">new_imgsetid</span></div>\n\n\n<div class=\"viewcode-block\" id=\"create_new_imageset_from_images\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.create_new_imageset_from_images\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">create_new_imageset_from_images</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">gid_list</span><span class=\"p\">,</span> <span class=\"n\">new_imgsetid</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        gid_list (list):</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --test-create_new_imageset_from_images</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; gid_list = ibs.get_valid_gids()[::2]</span>\n<span class=\"sd\">        &gt;&gt;&gt; new_imgsetid = create_new_imageset_from_images(ibs, gid_list)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = new_imgsetid</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">new_imgsetid</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">new_imgsetid</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">add_next_imageset</span><span class=\"p\">()</span>\n    <span class=\"n\">imgsetid_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">new_imgsetid</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_image_imgsetids</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">,</span> <span class=\"n\">imgsetid_list</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">new_imgsetid</span></div>\n\n\n<div class=\"viewcode-block\" id=\"new_imagesets_from_images\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.new_imagesets_from_images\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">new_imagesets_from_images</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">gids_list</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        gids_list (list):</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">imgsetid_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">create_new_imageset_from_images</span><span class=\"p\">(</span><span class=\"n\">gids</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">gids</span> <span class=\"ow\">in</span> <span class=\"n\">gids_list</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">imgsetid_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"create_new_imageset_from_names\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.create_new_imageset_from_names\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">create_new_imageset_from_names</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">nid_list</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        nid_list (list):</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --test-create_new_imageset_from_names</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; nid_list = ibs._get_all_known_nids()[0:2]</span>\n<span class=\"sd\">        &gt;&gt;&gt; new_imgsetid = ibs.create_new_imageset_from_names(nid_list)</span>\n<span class=\"sd\">        &gt;&gt;&gt; # clean up</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs.delete_imagesets(new_imgsetid)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = new_imgsetid</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">aids_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_name_aids</span><span class=\"p\">(</span><span class=\"n\">nid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">gids_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">unflat_map</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_gids</span><span class=\"p\">,</span> <span class=\"n\">aids_list</span><span class=\"p\">)</span>\n    <span class=\"n\">gid_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">gids_list</span><span class=\"p\">)</span>\n    <span class=\"n\">new_imgsetid</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">create_new_imageset_from_images</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">new_imgsetid</span></div>\n\n\n<div class=\"viewcode-block\" id=\"prepare_annotgroup_review\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.prepare_annotgroup_review\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">prepare_annotgroup_review</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (IBEISController):  ibeis controller object</span>\n<span class=\"sd\">        aid_list (int):  list of annotation ids</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        tuple: (src_ag_rowid, dst_ag_rowid) - source and dest annot groups</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --test-prepare_annotgroup_review</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; aid_list = ibs.get_valid_aids()</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = prepare_annotgroup_review(ibs, aid_list)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\"># Build new names for source and dest annot groups</span>\n    <span class=\"n\">all_annotgroup_rowid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">_get_all_annotgroup_rowids</span><span class=\"p\">()</span>\n    <span class=\"n\">all_annotgroup_text_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annotgroup_text</span><span class=\"p\">(</span><span class=\"n\">all_annotgroup_rowid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">new_grouptext_src</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_nonconflicting_string</span><span class=\"p\">(</span><span class=\"s1\">&#39;Source Group </span><span class=\"si\">%d</span><span class=\"s1\">&#39;</span><span class=\"p\">,</span> <span class=\"n\">all_annotgroup_text_list</span><span class=\"p\">)</span>\n    <span class=\"n\">all_annotgroup_text_list</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">new_grouptext_src</span><span class=\"p\">]</span>\n    <span class=\"n\">new_grouptext_dst</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_nonconflicting_string</span><span class=\"p\">(</span><span class=\"s1\">&#39;Dest Group </span><span class=\"si\">%d</span><span class=\"s1\">&#39;</span><span class=\"p\">,</span> <span class=\"n\">all_annotgroup_text_list</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Add new empty groups</span>\n    <span class=\"n\">annotgroup_text_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">new_grouptext_src</span><span class=\"p\">,</span> <span class=\"n\">new_grouptext_dst</span><span class=\"p\">]</span>\n    <span class=\"n\">annotgroup_uuid_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">hashable_to_uuid</span><span class=\"p\">,</span> <span class=\"n\">annotgroup_text_list</span><span class=\"p\">))</span>\n    <span class=\"n\">annotgroup_note_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">]</span>\n    <span class=\"n\">src_ag_rowid</span><span class=\"p\">,</span> <span class=\"n\">dst_ag_rowid</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">add_annotgroup</span><span class=\"p\">(</span><span class=\"n\">annotgroup_uuid_list</span><span class=\"p\">,</span>\n                                                    <span class=\"n\">annotgroup_text_list</span><span class=\"p\">,</span>\n                                                    <span class=\"n\">annotgroup_note_list</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Relate the annotations with the source group</span>\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">add_gar</span><span class=\"p\">([</span><span class=\"n\">src_ag_rowid</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">),</span> <span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">src_ag_rowid</span><span class=\"p\">,</span> <span class=\"n\">dst_ag_rowid</span></div>\n\n\n<div class=\"viewcode-block\" id=\"remove_groundtrue_aids\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.remove_groundtrue_aids\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">remove_groundtrue_aids</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">ref_aid_list</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; removes any aids that are known to match &quot;&quot;&quot;</span>\n    <span class=\"n\">ref_nids</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_name_rowids</span><span class=\"p\">(</span><span class=\"n\">ref_aid_list</span><span class=\"p\">))</span>\n    <span class=\"n\">nid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_name_rowids</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">flag_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">nid</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">ref_nids</span> <span class=\"k\">for</span> <span class=\"n\">nid</span> <span class=\"ow\">in</span> <span class=\"n\">nid_list</span><span class=\"p\">]</span>\n    <span class=\"n\">aid_list_</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">flag_list</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">aid_list_</span></div>\n\n\n<div class=\"viewcode-block\" id=\"search_annot_notes\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.search_annot_notes\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">search_annot_notes</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">pattern</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(&#39;PZ_Master0&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; pattern = [&#39;gash&#39;, &#39;injury&#39;, &#39;scar&#39;, &#39;wound&#39;]</span>\n<span class=\"sd\">        &gt;&gt;&gt; valid_aid_list = ibs.search_annot_notes(pattern)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(valid_aid_list)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(ibs.get_annot_notes(valid_aid_list))</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">aid_list</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">aid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_aids</span><span class=\"p\">()</span>\n    <span class=\"n\">notes_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_notes</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"c1\"># convert a list of patterns into an or statement</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">)):</span>\n        <span class=\"n\">pattern</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;|&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"s1\">&#39;(</span><span class=\"si\">%s</span><span class=\"s1\">)&#39;</span> <span class=\"o\">%</span> <span class=\"n\">pat</span> <span class=\"k\">for</span> <span class=\"n\">pat</span> <span class=\"ow\">in</span> <span class=\"n\">pattern</span><span class=\"p\">])</span>\n    <span class=\"n\">valid_index_list</span><span class=\"p\">,</span> <span class=\"n\">valid_match_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">search_list</span><span class=\"p\">(</span><span class=\"n\">notes_list</span><span class=\"p\">,</span> <span class=\"n\">pattern</span><span class=\"p\">,</span> <span class=\"n\">flags</span><span class=\"o\">=</span><span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">IGNORECASE</span><span class=\"p\">)</span>\n    <span class=\"c1\">#[match.group() for match in valid_match_list]</span>\n    <span class=\"n\">valid_aid_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">valid_index_list</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">valid_aid_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"filter_aids_to_quality\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.filter_aids_to_quality\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">filter_aids_to_quality</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">minqual</span><span class=\"p\">,</span> <span class=\"n\">unknown_ok</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">speedhack</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    DEPRICATE</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(defaultdb=&#39;PZ_Master1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; aid_list = ibs.get_valid_aids()</span>\n<span class=\"sd\">        &gt;&gt;&gt; minqual = &#39;good&#39;</span>\n<span class=\"sd\">        &gt;&gt;&gt; x1 = filter_aids_to_quality(ibs, aid_list, &#39;good&#39;, True, speedhack=True)</span>\n<span class=\"sd\">        &gt;&gt;&gt; x2 = filter_aids_to_quality(ibs, aid_list, &#39;good&#39;, True, speedhack=False)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">speedhack</span><span class=\"p\">:</span>\n        <span class=\"n\">list_repr</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;,&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">))</span>\n        <span class=\"n\">minqual_int</span> <span class=\"o\">=</span> <span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">QUALITY_TEXT_TO_INT</span><span class=\"p\">[</span><span class=\"n\">minqual</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">unknown_ok</span><span class=\"p\">:</span>\n            <span class=\"n\">operation</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;SELECT rowid from annotations WHERE (annot_quality ISNULL OR annot_quality==-1 OR annot_quality&gt;=</span><span class=\"si\">{minqual_int}</span><span class=\"s1\">) AND rowid IN (</span><span class=\"si\">{aids}</span><span class=\"s1\">)&#39;</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">operation</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;SELECT rowid from annotations WHERE annot_quality NOTNULL AND annot_quality&gt;=</span><span class=\"si\">{minqual_int}</span><span class=\"s1\"> AND rowid IN (</span><span class=\"si\">{aids}</span><span class=\"s1\">)&#39;</span>\n        <span class=\"n\">operation</span> <span class=\"o\">=</span> <span class=\"n\">operation</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"o\">=</span><span class=\"n\">list_repr</span><span class=\"p\">,</span> <span class=\"n\">minqual_int</span><span class=\"o\">=</span><span class=\"n\">minqual_int</span><span class=\"p\">)</span>\n        <span class=\"n\">aid_list_</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take_column</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">cur</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">operation</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">fetchall</span><span class=\"p\">(),</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">qual_flags</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_quality_filterflags</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">minqual</span><span class=\"p\">,</span> <span class=\"n\">unknown_ok</span><span class=\"o\">=</span><span class=\"n\">unknown_ok</span><span class=\"p\">))</span>\n        <span class=\"n\">aid_list_</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">qual_flags</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">aid_list_</span></div>\n\n\n<div class=\"viewcode-block\" id=\"filter_aids_to_viewpoint\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.filter_aids_to_viewpoint\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">filter_aids_to_viewpoint</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">valid_yaws</span><span class=\"p\">,</span> <span class=\"n\">unknown_ok</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Removes aids that do not have a valid yaw</span>\n\n<span class=\"sd\">    TODO: rename to valid_viewpoint because this func uses category labels</span>\n\n<span class=\"sd\">    valid_yaws = [&#39;primary&#39;, &#39;primary1&#39;, &#39;primary-1&#39;]</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">def</span> <span class=\"nf\">rectify_view_category</span><span class=\"p\">(</span><span class=\"n\">view</span><span class=\"p\">):</span>\n        <span class=\"nd\">@ut</span><span class=\"o\">.</span><span class=\"n\">memoize</span>\n        <span class=\"k\">def</span> <span class=\"nf\">_primary_species</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_primary_database_species</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">view</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;primary&#39;</span><span class=\"p\">:</span>\n            <span class=\"n\">view</span> <span class=\"o\">=</span> <span class=\"n\">get_primary_species_viewpoint</span><span class=\"p\">(</span><span class=\"n\">_primary_species</span><span class=\"p\">())</span>\n        <span class=\"k\">if</span> <span class=\"n\">view</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;primary1&#39;</span><span class=\"p\">:</span>\n            <span class=\"n\">view</span> <span class=\"o\">=</span> <span class=\"n\">get_primary_species_viewpoint</span><span class=\"p\">(</span><span class=\"n\">_primary_species</span><span class=\"p\">(),</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">view</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;primary-1&#39;</span><span class=\"p\">:</span>\n            <span class=\"n\">view</span> <span class=\"o\">=</span> <span class=\"n\">get_primary_species_viewpoint</span><span class=\"p\">(</span><span class=\"n\">_primary_species</span><span class=\"p\">(),</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">view</span>\n\n    <span class=\"n\">valid_yaws</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">rectify_view_category</span><span class=\"p\">(</span><span class=\"n\">view</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">view</span> <span class=\"ow\">in</span> <span class=\"n\">valid_yaws</span><span class=\"p\">]</span>\n\n    <span class=\"n\">yaw_flags</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_viewpoint_filterflags</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">valid_yaws</span><span class=\"p\">,</span> <span class=\"n\">unknown_ok</span><span class=\"o\">=</span><span class=\"n\">unknown_ok</span><span class=\"p\">))</span>\n    <span class=\"n\">aid_list_</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">yaw_flags</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">aid_list_</span></div>\n\n\n<div class=\"viewcode-block\" id=\"remove_aids_of_viewpoint\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.remove_aids_of_viewpoint\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">remove_aids_of_viewpoint</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">invalid_yaws</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Removes aids that do not have a valid yaw</span>\n\n<span class=\"sd\">    TODO; rename to valid_viewpoint because this func uses category labels</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">notyaw_flags</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_viewpoint_filterflags</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">invalid_yaws</span><span class=\"p\">,</span> <span class=\"n\">unknown_ok</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">))</span>\n    <span class=\"n\">yaw_flags</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">not_list</span><span class=\"p\">(</span><span class=\"n\">notyaw_flags</span><span class=\"p\">)</span>\n    <span class=\"n\">aid_list_</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">yaw_flags</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">aid_list_</span></div>\n\n\n<div class=\"viewcode-block\" id=\"filter_aids_without_name\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.filter_aids_without_name\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">filter_aids_without_name</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">invert</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">speedhack</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Remove aids without names</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(defaultdb=&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; aid_list = ibs.get_valid_aids()</span>\n<span class=\"sd\">        &gt;&gt;&gt; annots = ibs.annots(aid_list)</span>\n<span class=\"sd\">        &gt;&gt;&gt; aid_list1_ = ibs.filter_aids_without_name(aid_list)</span>\n<span class=\"sd\">        &gt;&gt;&gt; aid_list2_ = ibs.filter_aids_without_name(aid_list, invert=True)</span>\n<span class=\"sd\">        &gt;&gt;&gt; annots1_ = ibs.annots(aid_list1_)</span>\n<span class=\"sd\">        &gt;&gt;&gt; annots2_ = ibs.annots(aid_list2_)</span>\n<span class=\"sd\">        &gt;&gt;&gt; assert len(annots1_) + len(annots2_) == len(annots)</span>\n<span class=\"sd\">        &gt;&gt;&gt; assert np.all(np.array(annots1_.nids) &gt; 0)</span>\n<span class=\"sd\">        &gt;&gt;&gt; assert len(annots1_) == 9</span>\n<span class=\"sd\">        &gt;&gt;&gt; assert np.all(np.array(annots2_.nids) &lt; 0)</span>\n<span class=\"sd\">        &gt;&gt;&gt; assert len(annots2_) == 4</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">speedhack</span><span class=\"p\">:</span>\n        <span class=\"n\">list_repr</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;,&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">))</span>\n        <span class=\"k\">if</span> <span class=\"n\">invert</span><span class=\"p\">:</span>\n            <span class=\"n\">operation</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;SELECT rowid from annotations WHERE name_rowid&lt;=0 AND rowid IN (</span><span class=\"si\">%s</span><span class=\"s1\">)&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">list_repr</span><span class=\"p\">,)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">operation</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;SELECT rowid from annotations WHERE name_rowid&gt;0 AND rowid IN (</span><span class=\"si\">%s</span><span class=\"s1\">)&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">list_repr</span><span class=\"p\">,)</span>\n        <span class=\"n\">aid_list_</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take_column</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">cur</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">operation</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">fetchall</span><span class=\"p\">(),</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">flag_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">is_aid_unknown</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">invert</span><span class=\"p\">:</span>\n            <span class=\"n\">flag_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">not_list</span><span class=\"p\">(</span><span class=\"n\">flag_list</span><span class=\"p\">)</span>\n        <span class=\"n\">aid_list_</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">flag_list</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">aid_list_</span></div>\n\n\n<div class=\"viewcode-block\" id=\"filter_annots_using_minimum_timedelta\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.filter_annots_using_minimum_timedelta\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">filter_annots_using_minimum_timedelta</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">min_timedelta</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Uses a dynamic program to find the maximum number of annotations that are</span>\n<span class=\"sd\">    above the minimum timedelta requirement.</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (IBEISController):  ibeis controller object</span>\n<span class=\"sd\">        aid_list (?):</span>\n<span class=\"sd\">        min_timedelta (?):</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --exec-filter_annots_using_minimum_timedelta</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --exec-filter_annots_using_minimum_timedelta --db PZ_Master1</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(defaultdb=&#39;PZ_MTEST&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; aid_list = ibs.get_valid_aids()</span>\n<span class=\"sd\">        &gt;&gt;&gt; aid_list = ibs.filter_aids_without_timestamps(aid_list)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&#39;Before&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs.print_annot_stats(aid_list, min_name_hourdist=True)</span>\n<span class=\"sd\">        &gt;&gt;&gt; min_timedelta = 60 * 60 * 24</span>\n<span class=\"sd\">        &gt;&gt;&gt; filtered_aids = filter_annots_using_minimum_timedelta(ibs, aid_list, min_timedelta)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&#39;After&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs.print_annot_stats(filtered_aids, min_name_hourdist=True)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.quit_if_noshow()</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibeis.other.dbinfo.hackshow_names(ibs, aid_list)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibeis.other.dbinfo.hackshow_names(ibs, filtered_aids)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.show_if_requested()</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">vtool</span> <span class=\"k\">as</span> <span class=\"nn\">vt</span>\n    <span class=\"c1\">#min_timedelta = 60 * 60 * 24</span>\n    <span class=\"c1\">#min_timedelta = 60 * 10</span>\n    <span class=\"n\">grouped_aids</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">group_annots_by_name</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"n\">unixtimes_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">unflat_map</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_image_unixtimes_asfloat</span><span class=\"p\">,</span> <span class=\"n\">grouped_aids</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Find the maximum size subset such that all timedeltas are less than a given value</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Given a set of annotations V (all of the same name).</span>\n<span class=\"sd\">    Let $E = V \\times V$ be the the set of all pairs of annotations.</span>\n\n<span class=\"sd\">    We will now indicate which annotations are included as to separate them by</span>\n<span class=\"sd\">    a minimum timedelta while maximizing the number of annotations taken.</span>\n\n<span class=\"sd\">    Let t[u, v] be the absolute difference in time deltas between u and v</span>\n\n<span class=\"sd\">    Let x[u, v] = 1 if the annotation pair (u, v) is included.</span>\n\n<span class=\"sd\">    Let y[u] = 1 if the annotation u is included.</span>\n\n<span class=\"sd\">    maximize sum(y[u] for u in V)</span>\n<span class=\"sd\">    subject to:</span>\n\n<span class=\"sd\">        # Annotations pairs are only included if their timedelta is less than</span>\n<span class=\"sd\">        # the threshold.</span>\n<span class=\"sd\">        x[u, v] = 0 if t[u, v] &gt; thresh</span>\n\n<span class=\"sd\">        # If a pair is excluded than at least one annotation in that pair must</span>\n<span class=\"sd\">        # be excluded.</span>\n<span class=\"sd\">        y[u] + y[v] - x[u, v] &lt; 2</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">chosen_idxs_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">maximin_distance_subset1d</span><span class=\"p\">(</span><span class=\"n\">unixtimes</span><span class=\"p\">,</span> <span class=\"n\">min_thresh</span><span class=\"o\">=</span><span class=\"n\">min_timedelta</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">unixtimes</span> <span class=\"ow\">in</span> <span class=\"n\">unixtimes_list</span><span class=\"p\">]</span>\n    <span class=\"n\">filtered_groups</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">ziptake</span><span class=\"p\">(</span><span class=\"n\">grouped_aids</span><span class=\"p\">,</span> <span class=\"n\">chosen_idxs_list</span><span class=\"p\">)</span>\n    <span class=\"n\">filtered_aids</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">filtered_groups</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">DEBUG2</span><span class=\"p\">:</span>\n        <span class=\"n\">timedeltas</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_unflat_annots_timedelta_list</span><span class=\"p\">(</span><span class=\"n\">filtered_groups</span><span class=\"p\">)</span>\n        <span class=\"n\">min_timedeltas</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span> <span class=\"k\">if</span> <span class=\"n\">dists</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"k\">else</span>\n                                   <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nanmin</span><span class=\"p\">(</span><span class=\"n\">dists</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">dists</span> <span class=\"ow\">in</span> <span class=\"n\">timedeltas</span><span class=\"p\">])</span>\n        <span class=\"n\">min_name_timedelta_stats</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_stats</span><span class=\"p\">(</span><span class=\"n\">min_timedeltas</span><span class=\"p\">,</span> <span class=\"n\">use_nan</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;min_name_timedelta_stats = </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr2</span><span class=\"p\">(</span><span class=\"n\">min_name_timedelta_stats</span><span class=\"p\">),))</span>\n    <span class=\"k\">return</span> <span class=\"n\">filtered_aids</span></div>\n\n\n<div class=\"viewcode-block\" id=\"filter_aids_without_timestamps\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.filter_aids_without_timestamps\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">filter_aids_without_timestamps</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">invert</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Removes aids without timestamps</span>\n<span class=\"sd\">    aid_list = ibs.get_valid_aids()</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">unixtime_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_image_unixtimes</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">flag_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">unixtime</span> <span class=\"o\">!=</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"k\">for</span> <span class=\"n\">unixtime</span> <span class=\"ow\">in</span> <span class=\"n\">unixtime_list</span><span class=\"p\">]</span>\n    <span class=\"k\">if</span> <span class=\"n\">invert</span><span class=\"p\">:</span>\n        <span class=\"n\">flag_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">not_list</span><span class=\"p\">(</span><span class=\"n\">flag_list</span><span class=\"p\">)</span>\n    <span class=\"n\">aid_list_</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">flag_list</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">aid_list_</span></div>\n\n\n<div class=\"viewcode-block\" id=\"filter_aids_to_species\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.filter_aids_to_species\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">filter_aids_to_species</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">species</span><span class=\"p\">,</span> <span class=\"n\">speedhack</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (IBEISController):  ibeis controller object</span>\n<span class=\"sd\">        aid_list (int):  list of annotation ids</span>\n<span class=\"sd\">        species (?):</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        list: aid_list_</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --exec-filter_aids_to_species</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(defaultdb=&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; aid_list = ibs.get_valid_aids()</span>\n<span class=\"sd\">        &gt;&gt;&gt; species = ibeis.const.TEST_SPECIES.ZEB_GREVY</span>\n<span class=\"sd\">        &gt;&gt;&gt; aid_list_ = filter_aids_to_species(ibs, aid_list, species)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = &#39;aid_list_ = %r&#39; % (aid_list_,)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">        aid_list_ = [9, 10]</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">species_rowid</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_species_rowids_from_text</span><span class=\"p\">(</span><span class=\"n\">species</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">speedhack</span><span class=\"p\">:</span>\n        <span class=\"n\">list_repr</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;,&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">))</span>\n        <span class=\"n\">operation</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;SELECT rowid from annotations WHERE (species_rowid == </span><span class=\"si\">{species_rowid}</span><span class=\"s1\">) AND rowid IN (</span><span class=\"si\">{aids}</span><span class=\"s1\">)&#39;</span>\n        <span class=\"n\">operation</span> <span class=\"o\">=</span> <span class=\"n\">operation</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"o\">=</span><span class=\"n\">list_repr</span><span class=\"p\">,</span> <span class=\"n\">species_rowid</span><span class=\"o\">=</span><span class=\"n\">species_rowid</span><span class=\"p\">)</span>\n        <span class=\"n\">aid_list_</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take_column</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">cur</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">operation</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">fetchall</span><span class=\"p\">(),</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">species_rowid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_species_rowids</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n        <span class=\"n\">is_valid_species</span>   <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">sid</span> <span class=\"o\">==</span> <span class=\"n\">species_rowid</span> <span class=\"k\">for</span> <span class=\"n\">sid</span> <span class=\"ow\">in</span> <span class=\"n\">species_rowid_list</span><span class=\"p\">]</span>\n        <span class=\"n\">aid_list_</span>          <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">is_valid_species</span><span class=\"p\">)</span>\n        <span class=\"c1\">#flag_list = [species == species_text for species_text in ibs.get_annot_species(aid_list)]</span>\n        <span class=\"c1\">#aid_list_ = ut.compress(aid_list, flag_list)</span>\n    <span class=\"k\">return</span> <span class=\"n\">aid_list_</span></div>\n\n\n<div class=\"viewcode-block\" id=\"partition_annots_into_singleton_multiton\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.partition_annots_into_singleton_multiton\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">partition_annots_into_singleton_multiton</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; aid_list = aid_list_ &quot;&quot;&quot;</span>\n    <span class=\"n\">aids_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">group_annots_by_name</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"n\">singletons</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">aids</span> <span class=\"k\">for</span> <span class=\"n\">aids</span> <span class=\"ow\">in</span> <span class=\"n\">aids_list</span> <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n    <span class=\"n\">multitons</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">aids</span> <span class=\"k\">for</span> <span class=\"n\">aids</span> <span class=\"ow\">in</span> <span class=\"n\">aids_list</span> <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">singletons</span><span class=\"p\">,</span> <span class=\"n\">multitons</span></div>\n\n\n<div class=\"viewcode-block\" id=\"partition_annots_into_corresponding_groups\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.partition_annots_into_corresponding_groups\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">partition_annots_into_corresponding_groups</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list1</span><span class=\"p\">,</span> <span class=\"n\">aid_list2</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Used for grouping one-vs-one training pairs and corerspondence filtering</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (ibeis.control.IBEISControl.IBEISController):  ibeis controller object</span>\n<span class=\"sd\">        aid_list1 (int):  list of annotation ids</span>\n<span class=\"sd\">        aid_list2 (int):  list of annotation ids</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        tuple: 4 lists of lists. In the first two each list is a list of aids</span>\n<span class=\"sd\">            grouped by names and the names correspond with each other. In the</span>\n<span class=\"sd\">            last two are the annots that did not correspond with anything in</span>\n<span class=\"sd\">            the other list.</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --exec-partition_annots_into_corresponding_groups</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(defaultdb=&#39;PZ_MTEST&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; grouped_aids = list(map(list, ibs.group_annots_by_name(ibs.get_valid_aids())[0]))</span>\n<span class=\"sd\">        &gt;&gt;&gt; grouped_aids = [aids for aids in grouped_aids if len(aids) &gt; 3]</span>\n<span class=\"sd\">        &gt;&gt;&gt; # Get some overlapping groups</span>\n<span class=\"sd\">        &gt;&gt;&gt; import copy</span>\n<span class=\"sd\">        &gt;&gt;&gt; aids_group1 = copy.deepcopy((ut.get_list_column_slice(grouped_aids[0:5], slice(0, 2))))</span>\n<span class=\"sd\">        &gt;&gt;&gt; aids_group2 = copy.deepcopy((ut.get_list_column_slice(grouped_aids[2:7], slice(2, None))))</span>\n<span class=\"sd\">        &gt;&gt;&gt; # Ensure there is a singleton in each</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.delete_items_by_index(aids_group1[0], [0])</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.delete_items_by_index(aids_group2[-1], [0])</span>\n<span class=\"sd\">        &gt;&gt;&gt; aid_list1 = ut.flatten(aids_group1)</span>\n<span class=\"sd\">        &gt;&gt;&gt; aid_list2 = ut.flatten(aids_group2)</span>\n<span class=\"sd\">        &gt;&gt;&gt; #aid_list1 = [1, 2, 8, 9, 60]</span>\n<span class=\"sd\">        &gt;&gt;&gt; #aid_list2 = [3, 7, 20]</span>\n<span class=\"sd\">        &gt;&gt;&gt; groups = partition_annots_into_corresponding_groups(ibs, aid_list1, aid_list2)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = ut.repr2(groups)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">        [[10, 11], [17, 18], [22, 23]]</span>\n<span class=\"sd\">        [[12, 13, 14, 15], [19, 20, 21], [24, 25, 26]]</span>\n<span class=\"sd\">        [[2], [5, 6]]</span>\n<span class=\"sd\">        [[29, 30, 31, 32], [49]]</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\">#ibs.</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">ibeis.control.IBEISControl</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">control</span><span class=\"o\">.</span><span class=\"n\">IBEISControl</span><span class=\"o\">.</span><span class=\"n\">IBEISController</span><span class=\"p\">)</span>\n    <span class=\"c1\">#ibs</span>\n    <span class=\"c1\">#ibs.get_ann</span>\n\n    <span class=\"n\">grouped_aids1</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">group_annots_by_name</span><span class=\"p\">(</span><span class=\"n\">aid_list1</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"n\">grouped_aids1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">aids</span><span class=\"o\">.</span><span class=\"n\">tolist</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">aids</span> <span class=\"ow\">in</span> <span class=\"n\">grouped_aids1</span><span class=\"p\">]</span>\n\n    <span class=\"c1\"># Get the group of available aids that a reference aid could match</span>\n    <span class=\"n\">gropued_aids2</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_groundtruth</span><span class=\"p\">(</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_list_column</span><span class=\"p\">(</span><span class=\"n\">grouped_aids1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">daid_list</span><span class=\"o\">=</span><span class=\"n\">aid_list2</span><span class=\"p\">,</span>\n        <span class=\"n\">noself</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Flag if there is a correspondence</span>\n    <span class=\"n\">flag_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">,</span> <span class=\"n\">gropued_aids2</span><span class=\"p\">)]</span>\n\n    <span class=\"c1\"># Corresonding lists of aids groups</span>\n    <span class=\"n\">gt_grouped_aids1</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">grouped_aids1</span><span class=\"p\">,</span> <span class=\"n\">flag_list</span><span class=\"p\">)</span>\n    <span class=\"n\">gt_grouped_aids2</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">gropued_aids2</span><span class=\"p\">,</span> <span class=\"n\">flag_list</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Non-corresponding lists of aids groups</span>\n    <span class=\"n\">gf_grouped_aids1</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">grouped_aids1</span><span class=\"p\">,</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">not_list</span><span class=\"p\">(</span><span class=\"n\">flag_list</span><span class=\"p\">))</span>\n    <span class=\"c1\">#gf_aids1 = ut.flatten(gf_grouped_aids1)</span>\n    <span class=\"n\">gf_aids2</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">setdiff_ordered</span><span class=\"p\">(</span><span class=\"n\">aid_list2</span><span class=\"p\">,</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">gt_grouped_aids2</span><span class=\"p\">))</span>\n    <span class=\"n\">gf_grouped_aids2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">aids</span><span class=\"o\">.</span><span class=\"n\">tolist</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">aids</span> <span class=\"ow\">in</span>\n                        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">group_annots_by_name</span><span class=\"p\">(</span><span class=\"n\">gf_aids2</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]]</span>\n\n    <span class=\"n\">gt_grouped_aids1</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">sorted</span><span class=\"p\">,</span> <span class=\"n\">gt_grouped_aids1</span><span class=\"p\">))</span>\n    <span class=\"n\">gt_grouped_aids2</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">sorted</span><span class=\"p\">,</span> <span class=\"n\">gt_grouped_aids2</span><span class=\"p\">))</span>\n    <span class=\"n\">gf_grouped_aids1</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">sorted</span><span class=\"p\">,</span> <span class=\"n\">gf_grouped_aids1</span><span class=\"p\">))</span>\n    <span class=\"n\">gf_grouped_aids2</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">sorted</span><span class=\"p\">,</span> <span class=\"n\">gf_grouped_aids2</span><span class=\"p\">))</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">gt_grouped_aids1</span><span class=\"p\">,</span> <span class=\"n\">gt_grouped_aids2</span><span class=\"p\">,</span> <span class=\"n\">gf_grouped_aids1</span><span class=\"p\">,</span> <span class=\"n\">gf_grouped_aids2</span></div>\n\n\n<div class=\"viewcode-block\" id=\"dans_lists\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.dans_lists\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">dans_lists</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">positives</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">negatives</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">random</span> <span class=\"k\">import</span> <span class=\"n\">shuffle</span>\n\n    <span class=\"n\">aid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_aids</span><span class=\"p\">()</span>\n    <span class=\"n\">yaw_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_viewpoints</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">qua_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_quality_texts</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">sex_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_sex_texts</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">age_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_age_months_est</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n\n    <span class=\"n\">positive_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">aid</span>\n        <span class=\"k\">for</span> <span class=\"n\">aid</span><span class=\"p\">,</span> <span class=\"n\">yaw</span><span class=\"p\">,</span> <span class=\"n\">qua</span><span class=\"p\">,</span> <span class=\"n\">sex</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"p\">)</span> <span class=\"ow\">in</span>\n        <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">yaw_list</span><span class=\"p\">,</span> <span class=\"n\">qua_list</span><span class=\"p\">,</span> <span class=\"n\">sex_list</span><span class=\"p\">,</span> <span class=\"n\">age_list</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span>\n            <span class=\"n\">yaw</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;LEFT&#39;</span> <span class=\"ow\">and</span>\n            <span class=\"n\">qua</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">()</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s1\">&#39;OK&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;GOOD&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;EXCELLENT&#39;</span><span class=\"p\">]</span> <span class=\"ow\">and</span>\n            <span class=\"n\">sex</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">()</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s1\">&#39;MALE&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;FEMALE&#39;</span><span class=\"p\">]</span> <span class=\"ow\">and</span>\n            <span class=\"n\">start</span> <span class=\"o\">!=</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"ow\">and</span> <span class=\"n\">end</span> <span class=\"o\">!=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"n\">negative_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">aid</span>\n        <span class=\"k\">for</span> <span class=\"n\">aid</span><span class=\"p\">,</span> <span class=\"n\">yaw</span><span class=\"p\">,</span> <span class=\"n\">qua</span><span class=\"p\">,</span> <span class=\"n\">sex</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">yaw_list</span><span class=\"p\">,</span>\n                                                    <span class=\"n\">qua_list</span><span class=\"p\">,</span> <span class=\"n\">sex_list</span><span class=\"p\">,</span>\n                                                    <span class=\"n\">age_list</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span>\n            <span class=\"n\">yaw</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;LEFT&#39;</span> <span class=\"ow\">and</span>\n            <span class=\"n\">qua</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">()</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s1\">&#39;OK&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;GOOD&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;EXCELLENT&#39;</span><span class=\"p\">]</span> <span class=\"ow\">and</span>\n            <span class=\"n\">sex</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;UNKNOWN SEX&#39;</span> <span class=\"ow\">and</span>\n            <span class=\"n\">start</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"ow\">and</span> <span class=\"n\">end</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"n\">shuffle</span><span class=\"p\">(</span><span class=\"n\">positive_list</span><span class=\"p\">)</span>\n    <span class=\"n\">shuffle</span><span class=\"p\">(</span><span class=\"n\">negative_list</span><span class=\"p\">)</span>\n\n    <span class=\"n\">positive_list</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">positive_list</span><span class=\"p\">[:</span><span class=\"mi\">10</span><span class=\"p\">])</span>\n    <span class=\"n\">negative_list</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">negative_list</span><span class=\"p\">[:</span><span class=\"mi\">10</span><span class=\"p\">])</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">verbose</span><span class=\"p\">:</span>\n        <span class=\"n\">pos_yaw_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_viewpoints</span><span class=\"p\">(</span><span class=\"n\">positive_list</span><span class=\"p\">)</span>\n        <span class=\"n\">pos_qua_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_quality_texts</span><span class=\"p\">(</span><span class=\"n\">positive_list</span><span class=\"p\">)</span>\n        <span class=\"n\">pos_sex_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_sex_texts</span><span class=\"p\">(</span><span class=\"n\">positive_list</span><span class=\"p\">)</span>\n        <span class=\"n\">pos_age_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_age_months_est</span><span class=\"p\">(</span><span class=\"n\">positive_list</span><span class=\"p\">)</span>\n        <span class=\"n\">pos_chip_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_chip_fpath</span><span class=\"p\">(</span><span class=\"n\">positive_list</span><span class=\"p\">)</span>\n\n        <span class=\"n\">neg_yaw_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_viewpoints</span><span class=\"p\">(</span><span class=\"n\">negative_list</span><span class=\"p\">)</span>\n        <span class=\"n\">neg_qua_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_quality_texts</span><span class=\"p\">(</span><span class=\"n\">negative_list</span><span class=\"p\">)</span>\n        <span class=\"n\">neg_sex_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_sex_texts</span><span class=\"p\">(</span><span class=\"n\">negative_list</span><span class=\"p\">)</span>\n        <span class=\"n\">neg_age_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_age_months_est</span><span class=\"p\">(</span><span class=\"n\">negative_list</span><span class=\"p\">)</span>\n        <span class=\"n\">neg_chip_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_chip_fpath</span><span class=\"p\">(</span><span class=\"n\">negative_list</span><span class=\"p\">)</span>\n\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;positive_aid_list = </span><span class=\"si\">%s</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">positive_list</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;positive_yaw_list = </span><span class=\"si\">%s</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">pos_yaw_list</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;positive_qua_list = </span><span class=\"si\">%s</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">pos_qua_list</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;positive_sex_list = </span><span class=\"si\">%s</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">pos_sex_list</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;positive_age_list = </span><span class=\"si\">%s</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">pos_age_list</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;positive_chip_list = </span><span class=\"si\">%s</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">pos_chip_list</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;-&#39;</span> <span class=\"o\">*</span> <span class=\"mi\">90</span><span class=\"p\">,</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;negative_aid_list = </span><span class=\"si\">%s</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">negative_list</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;negative_yaw_list = </span><span class=\"si\">%s</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">neg_yaw_list</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;negative_qua_list = </span><span class=\"si\">%s</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">neg_qua_list</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;negative_sex_list = </span><span class=\"si\">%s</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">neg_sex_list</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;negative_age_list = </span><span class=\"si\">%s</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">neg_age_list</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;negative_chip_list = </span><span class=\"si\">%s</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">neg_chip_list</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;mkdir ~/Desktop/chips&#39;</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">pos_chip</span> <span class=\"ow\">in</span> <span class=\"n\">pos_chip_list</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;cp &quot;</span><span class=\"si\">%s</span><span class=\"s1\">&quot; ~/Desktop/chips/&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">pos_chip</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n        <span class=\"k\">for</span> <span class=\"n\">neg_chip</span> <span class=\"ow\">in</span> <span class=\"n\">neg_chip_list</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;cp &quot;</span><span class=\"si\">%s</span><span class=\"s1\">&quot; ~/Desktop/chips/&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">neg_chip</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">positive_list</span><span class=\"p\">,</span> <span class=\"n\">negative_list</span></div>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_stat_str</span><span class=\"p\">(</span><span class=\"n\">dict_</span><span class=\"p\">,</span> <span class=\"n\">multi</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">precision</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n    <span class=\"n\">dict_</span> <span class=\"o\">=</span> <span class=\"n\">dict_</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"n\">dict_</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;num_nan&#39;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"k\">del</span> <span class=\"n\">dict_</span><span class=\"p\">[</span><span class=\"s1\">&#39;num_nan&#39;</span><span class=\"p\">]</span>\n    <span class=\"n\">exclude_keys</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>  <span class=\"c1\"># [&#39;std&#39;, &#39;nMin&#39;, &#39;nMax&#39;]</span>\n    <span class=\"k\">if</span> <span class=\"n\">multi</span> <span class=\"ow\">is</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"n\">str_</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr2</span><span class=\"p\">(</span><span class=\"n\">dict_</span><span class=\"p\">,</span> <span class=\"n\">precision</span><span class=\"o\">=</span><span class=\"n\">precision</span><span class=\"p\">,</span> <span class=\"n\">nl</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">strvals</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">str_</span> <span class=\"o\">=</span>  <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_stats_str</span><span class=\"p\">(</span><span class=\"n\">stat_dict</span><span class=\"o\">=</span><span class=\"n\">dict_</span><span class=\"p\">,</span> <span class=\"n\">precision</span><span class=\"o\">=</span><span class=\"n\">precision</span><span class=\"p\">,</span>\n                                 <span class=\"n\">exclude_keys</span><span class=\"o\">=</span><span class=\"n\">exclude_keys</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    <span class=\"n\">str_</span> <span class=\"o\">=</span> <span class=\"n\">str_</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\&#39;</span><span class=\"s1\">&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">str_</span> <span class=\"o\">=</span> <span class=\"n\">str_</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">&#39;num_nan: 0, &#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">str_</span>\n\n\n<div class=\"viewcode-block\" id=\"group_annots_by_prop\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.group_annots_by_prop\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">group_annots_by_prop</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"n\">getter_func</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Make a dictionary that maps props into a dictionary of names to aids</span>\n    <span class=\"n\">annot_prop_list</span> <span class=\"o\">=</span> <span class=\"n\">getter_func</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">)</span>\n    <span class=\"n\">prop_to_aids</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">group_items</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"n\">annot_prop_list</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">prop_to_aids</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_annot_intermediate_viewpoint_stats\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.get_annot_intermediate_viewpoint_stats\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_annot_intermediate_viewpoint_stats</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">    &gt;&gt;&gt; aids = available_aids</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">getter_func</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_viewpoints</span>\n    <span class=\"n\">prop_basis</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">VIEW</span><span class=\"o\">.</span><span class=\"n\">CODE_TO_INT</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n\n    <span class=\"n\">group_annots_by_view_and_name</span> <span class=\"o\">=</span> <span class=\"n\">functools</span><span class=\"o\">.</span><span class=\"n\">partial</span><span class=\"p\">(</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">group_annots_by_prop_and_name</span><span class=\"p\">,</span> <span class=\"n\">getter_func</span><span class=\"o\">=</span><span class=\"n\">getter_func</span><span class=\"p\">)</span>\n    <span class=\"n\">group_annots_by_view</span> <span class=\"o\">=</span> <span class=\"n\">functools</span><span class=\"o\">.</span><span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">group_annots_by_prop</span><span class=\"p\">,</span>\n                                             <span class=\"n\">getter_func</span><span class=\"o\">=</span><span class=\"n\">getter_func</span><span class=\"p\">)</span>\n\n    <span class=\"n\">prop2_nid2_aids</span> <span class=\"o\">=</span> <span class=\"n\">group_annots_by_view_and_name</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">)</span>\n\n    <span class=\"n\">edge2_nid2_aids</span> <span class=\"o\">=</span> <span class=\"n\">group_prop_edges</span><span class=\"p\">(</span><span class=\"n\">prop2_nid2_aids</span><span class=\"p\">,</span> <span class=\"n\">prop_basis</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"n\">wrap</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Total number of names that have two viewpoints</span>\n    <span class=\"c1\">#yawtext_edge_nid_hist = ut.map_dict_vals(len, edge2_nid2_aids)</span>\n    <span class=\"n\">edge2_grouped_aids</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">map_dict_vals</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">dict_</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">dict_</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()),</span> <span class=\"n\">edge2_nid2_aids</span><span class=\"p\">)</span>\n    <span class=\"n\">edge2_aids</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">map_dict_vals</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">,</span> <span class=\"n\">edge2_grouped_aids</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Num annots of each type of viewpoint</span>\n\n    <span class=\"c1\"># Regroup by view and name</span>\n    <span class=\"n\">edge2_vp2_pername_stats</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"n\">edge2_vp2_aids</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">map_dict_vals</span><span class=\"p\">(</span><span class=\"n\">group_annots_by_view</span><span class=\"p\">,</span> <span class=\"n\">edge2_aids</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">vp2_aids</span> <span class=\"ow\">in</span> <span class=\"n\">edge2_vp2_aids</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n        <span class=\"n\">vp2_pernam_stats</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">map_dict_vals</span><span class=\"p\">(</span>\n            <span class=\"n\">functools</span><span class=\"o\">.</span><span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annots_per_name_stats</span><span class=\"p\">,</span> <span class=\"n\">use_sum</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">),</span> <span class=\"n\">vp2_aids</span><span class=\"p\">)</span>\n        <span class=\"n\">edge2_vp2_pername_stats</span><span class=\"p\">[</span><span class=\"n\">edge</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">vp2_pernam_stats</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">edge2_vp2_pername_stats</span></div>\n\n\n<div class=\"viewcode-block\" id=\"group_annots_by_name_dict\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.group_annots_by_name_dict\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">group_annots_by_name_dict</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"p\">):</span>\n    <span class=\"n\">grouped_aids</span><span class=\"p\">,</span> <span class=\"n\">nids</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">group_annots_by_name</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">nids</span><span class=\"p\">,</span> <span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"n\">grouped_aids</span><span class=\"p\">)))</span></div>\n\n\n<div class=\"viewcode-block\" id=\"group_annots_by_prop_and_name\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.group_annots_by_prop_and_name\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">group_annots_by_prop_and_name</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"n\">getter_func</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Make a dictionary that maps props into a dictionary of names to aids</span>\n    <span class=\"n\">prop2_aids</span> <span class=\"o\">=</span> <span class=\"n\">group_annots_by_prop</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"n\">getter_func</span><span class=\"p\">)</span>\n    <span class=\"n\">prop2_nid2_aids</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">map_dict_vals</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">group_annots_by_name_dict</span><span class=\"p\">,</span> <span class=\"n\">prop2_aids</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">prop2_nid2_aids</span></div>\n\n\n<div class=\"viewcode-block\" id=\"group_annots_by_multi_prop\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.group_annots_by_multi_prop\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">group_annots_by_multi_prop</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"n\">getter_list</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n\n<span class=\"sd\">    Performs heirachical grouping of annotations based on properties</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (IBEISController):  ibeis controller object</span>\n<span class=\"sd\">        aids (list):  list of annotation rowids</span>\n<span class=\"sd\">        getter_list (list):</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        dict: multiprop2_aids</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --exec-group_annots_by_multi_prop --db PZ_Master1 --props=viewpoint_code,name_rowids --keys1 frontleft</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --exec-group_annots_by_multi_prop</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(defaultdb=&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; aids = ibs.get_valid_aids(is_known=True)</span>\n<span class=\"sd\">        &gt;&gt;&gt; #getter_list = [ibs.get_annot_name_rowids, ibs.get_annot_viewpoints]</span>\n<span class=\"sd\">        &gt;&gt;&gt; props = ut.get_argval(&#39;--props&#39;, type_=list, default=[&#39;viewpoint_code&#39;, &#39;name_rowids&#39;])</span>\n<span class=\"sd\">        &gt;&gt;&gt; getter_list = [getattr(ibs, &#39;get_annot_&#39; + prop) for prop in props]</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&#39;getter_list = %r&#39; % (getter_list,))</span>\n<span class=\"sd\">        &gt;&gt;&gt; #getter_list = [ibs.get_annot_viewpoints, ibs.get_annot_name_rowids]</span>\n<span class=\"sd\">        &gt;&gt;&gt; multiprop2_aids = group_annots_by_multi_prop(ibs, aids, getter_list)</span>\n<span class=\"sd\">        &gt;&gt;&gt; get_dict_values = lambda x: list(x.values())</span>\n<span class=\"sd\">        &gt;&gt;&gt; # a bit convoluted</span>\n<span class=\"sd\">        &gt;&gt;&gt; keys1 = ut.get_argval(&#39;--keys1&#39;, type_=list, default=list(multiprop2_aids.keys()))</span>\n<span class=\"sd\">        &gt;&gt;&gt; multiprop2_num_aids = ut.hmap_vals(len, multiprop2_aids)</span>\n<span class=\"sd\">        &gt;&gt;&gt; prop2_num_aids = ut.hmap_vals(get_dict_values, multiprop2_num_aids, max_depth=len(props) - 2)</span>\n<span class=\"sd\">        &gt;&gt;&gt; #prop2_num_aids_stats = ut.hmap_vals(ut.get_stats, prop2_num_aids)</span>\n<span class=\"sd\">        &gt;&gt;&gt; prop2_num_aids_hist = ut.hmap_vals(ut.dict_hist, prop2_num_aids)</span>\n<span class=\"sd\">        &gt;&gt;&gt; prop2_num_aids_cumhist = ut.map_dict_vals(ut.dict_hist_cumsum, prop2_num_aids_hist)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&#39;prop2_num_aids_hist[%s] = %s&#39; % (keys1,  ut.repr2(ut.dict_subset(prop2_num_aids_hist, keys1))))</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&#39;prop2_num_aids_cumhist[%s] = %s&#39; % (keys1,  ut.repr2(ut.dict_subset(prop2_num_aids_cumhist, keys1))))</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">aid_prop_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">getter</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">getter</span> <span class=\"ow\">in</span> <span class=\"n\">getter_list</span><span class=\"p\">]</span>\n    <span class=\"c1\">#%timeit multiprop2_aids = ut.hierarchical_group_items(aids, aid_prop_list)</span>\n    <span class=\"c1\">#%timeit ut.group_items(aids, list(zip(*aid_prop_list)))</span>\n    <span class=\"n\">multiprop2_aids</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">hierarchical_group_items</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"n\">aid_prop_list</span><span class=\"p\">)</span>\n    <span class=\"c1\">#multiprop2_aids = ut.group_items(aids, list(zip(*aid_prop_list)))</span>\n    <span class=\"k\">return</span> <span class=\"n\">multiprop2_aids</span></div>\n\n\n<div class=\"viewcode-block\" id=\"group_prop_edges\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.group_prop_edges\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">group_prop_edges</span><span class=\"p\">(</span><span class=\"n\">prop2_nid2_aids</span><span class=\"p\">,</span> <span class=\"n\">prop_basis</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">wrap</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">    getter_func = ibs.get_annot_viewpoints</span>\n<span class=\"sd\">    prop_basis = list(const.VIEWTEXT_TO_YAW_RADIANS.keys())</span>\n<span class=\"sd\">    size = 2</span>\n<span class=\"sd\">    wrap = True</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\"># Get intermediate viewpoints</span>\n    <span class=\"c1\"># prop = yawtext</span>\n\n    <span class=\"c1\"># Build a list of property edges (TODO: mabye include option for all pairwise combinations)</span>\n    <span class=\"n\">prop_edges</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">iter_window</span><span class=\"p\">(</span><span class=\"n\">prop_basis</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"n\">step</span><span class=\"o\">=</span><span class=\"n\">size</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">wrap</span><span class=\"o\">=</span><span class=\"n\">wrap</span><span class=\"p\">))</span>\n    <span class=\"n\">edge2_nid2_aids</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">odict</span><span class=\"p\">()</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">edge</span> <span class=\"ow\">in</span> <span class=\"n\">prop_edges</span><span class=\"p\">:</span>\n        <span class=\"n\">edge_nid2_aids_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">prop2_nid2_aids</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">prop</span><span class=\"p\">,</span> <span class=\"p\">{})</span> <span class=\"k\">for</span> <span class=\"n\">prop</span> <span class=\"ow\">in</span> <span class=\"n\">edge</span><span class=\"p\">]</span>\n        <span class=\"n\">isect_nid2_aids</span> <span class=\"o\">=</span> <span class=\"n\">reduce</span><span class=\"p\">(</span>\n            <span class=\"c1\">#functools.partial(ut.dict_intersection, combine=True),</span>\n            <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dict_isect_combine</span><span class=\"p\">,</span>\n            <span class=\"n\">edge_nid2_aids_list</span><span class=\"p\">)</span>\n        <span class=\"n\">edge2_nid2_aids</span><span class=\"p\">[</span><span class=\"n\">edge</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">isect_nid2_aids</span>\n        <span class=\"c1\">#common_nids = list(isect_nid2_aids.keys())</span>\n        <span class=\"c1\">#common_num_prop1 = np.array([len(prop2_nid2_aids[prop1][nid]) for nid in common_nids])</span>\n        <span class=\"c1\">#common_num_prop2 = np.array([len(prop2_nid2_aids[prop2][nid]) for nid in common_nids])</span>\n    <span class=\"k\">return</span> <span class=\"n\">edge2_nid2_aids</span></div>\n\n\n<div class=\"viewcode-block\" id=\"parse_annot_stats_filter_kws\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.parse_annot_stats_filter_kws\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">parse_annot_stats_filter_kws</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">):</span>\n    <span class=\"n\">kwkeys</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">parse_func_kwarg_keys</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_stats_dict</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">kwkeys</span></div>\n\n\n<span class=\"c1\"># Indepdentent query / database stats</span>\n<div class=\"viewcode-block\" id=\"get_annot_stats_dict\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.get_annot_stats_dict\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_annot_stats_dict</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"n\">forceall</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">old</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                         <span class=\"n\">use_hist</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; stats for a set of annots</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (ibeis.IBEISController):  ibeis controller object</span>\n<span class=\"sd\">        aids (list):  list of annotation rowids</span>\n<span class=\"sd\">        prefix (str): (default = &#39;&#39;)</span>\n\n<span class=\"sd\">    Kwargs:</span>\n<span class=\"sd\">        hashid, per_name, per_qual, per_vp, per_name_vpedge, per_image, min_name_hourdist</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        dict: aid_stats_dict</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis get_annot_stats_dict --db WWF_Lynx --all</span>\n<span class=\"sd\">        python -m ibeis get_annot_stats_dict --db EWT_Cheetahs --all</span>\n<span class=\"sd\">        python -m ibeis get_annot_stats_dict --db PZ_PB_RF_TRAIN --all</span>\n<span class=\"sd\">        python -m ibeis get_annot_stats_dict --db PZ_Master1 --all</span>\n\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --exec-get_annot_stats_dict</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --exec-get_annot_stats_dict --db PZ_PB_RF_TRAIN --use-hist=True --old=False --per_name_vpedge=False</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --exec-get_annot_stats_dict --db PZ_PB_RF_TRAIN --use-hist=False --old=False --per_name_vpedge=False</span>\n\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --exec-get_annot_stats_dict --db PZ_MTEST --use-hist --per_name_vpedge=False</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --exec-get_annot_stats_dict --db PZ_MTEST --use-hist --per_name_vpedge=False</span>\n\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --exec-get_annot_stats_dict --db PZ_Master1 --per_name_vpedge=True</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --exec-get_annot_stats_dict --db PZ_Master1 --min_name_hourdist=True</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --exec-get_annot_stats_dict --db GZ_ALL --min_name_hourdist=True --all</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --exec-get_annot_stats_dict --db GZ_Master1 --all</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --exec-get_annot_stats_dict --db PZ_Master1 --min_name_hourdist=True --all</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --exec-get_annot_stats_dict --db NNP_MasterGIRM_core --min_name_hourdist=True --all</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(defaultdb=&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; aids = ibeis.testdata_aids(ibs=ibs)</span>\n<span class=\"sd\">        &gt;&gt;&gt; prefix = &#39;&#39;</span>\n<span class=\"sd\">        &gt;&gt;&gt; kwkeys = ut.parse_func_kwarg_keys(get_annot_stats_dict)</span>\n<span class=\"sd\">        &gt;&gt;&gt; #default = True if ut.get_argflag(&#39;--all&#39;) else None</span>\n<span class=\"sd\">        &gt;&gt;&gt; default = None if ut.get_argflag(&#39;--notall&#39;) else True</span>\n<span class=\"sd\">        &gt;&gt;&gt; kwargs = ut.argparse_dict(dict(zip(kwkeys, [default] * len(kwkeys))))</span>\n<span class=\"sd\">        &gt;&gt;&gt; #ut.argparse_funckw(ibs.get_annot_stats_dict)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&#39;kwargs = %r&#39; % (kwargs,))</span>\n<span class=\"sd\">        &gt;&gt;&gt; old = ut.get_argval(&#39;--old&#39;, default=True)</span>\n<span class=\"sd\">        &gt;&gt;&gt; use_hist = ut.get_argval(&#39;--use_hist&#39;, default=True)</span>\n<span class=\"sd\">        &gt;&gt;&gt; aid_stats_dict = get_annot_stats_dict(ibs, aids, prefix, use_hist=use_hist, old=old, **kwargs)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = (&#39;aid_stats_dict = %s&#39; % (ut.repr2(aid_stats_dict, strkeys=True, strvals=True, nl=2, precision=2),))</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">kwargs</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">HackStatsDict</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">DictLike</span><span class=\"p\">):</span>\n        <span class=\"c1\"># def __repr__(self):</span>\n        <span class=\"c1\">#     return repr(self)</span>\n        <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">dict_</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dict_</span> <span class=\"o\">=</span> <span class=\"n\">dict_</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">keys</span> <span class=\"o\">=</span> <span class=\"n\">dict_</span><span class=\"o\">.</span><span class=\"n\">keys</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">kwargs</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">getitem</span> <span class=\"o\">=</span> <span class=\"n\">dict_</span><span class=\"o\">.</span><span class=\"fm\">__getitem__</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">delitem</span> <span class=\"o\">=</span> <span class=\"n\">dict_</span><span class=\"o\">.</span><span class=\"fm\">__delitem__</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">setitem</span> <span class=\"o\">=</span> <span class=\"n\">dict_</span><span class=\"o\">.</span><span class=\"fm\">__setitem__</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">_stat_str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dict_</span><span class=\"p\">)</span>\n\n    <span class=\"n\">statwrap</span> <span class=\"o\">=</span> <span class=\"n\">HackStatsDict</span>\n\n    <span class=\"n\">annots</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">annots</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">stat_func</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">num_None</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">use_hist</span><span class=\"p\">:</span>\n            <span class=\"n\">stats</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dict_hist</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">stats</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_stats</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">use_nan</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">use_median</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">stats</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;num_nan&#39;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"k\">del</span> <span class=\"n\">stats</span><span class=\"p\">[</span><span class=\"s1\">&#39;num_nan&#39;</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"n\">num_None</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">stats</span><span class=\"p\">[</span><span class=\"s1\">&#39;num_None&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">num_None</span>\n            <span class=\"n\">stats</span> <span class=\"o\">=</span> <span class=\"n\">HackStatsDict</span><span class=\"p\">(</span><span class=\"n\">stats</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">stats</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_per_prop_stats</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"n\">getter_func</span><span class=\"p\">):</span>\n        <span class=\"n\">prop2_aids</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">group_annots_by_prop</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"n\">getter_func</span><span class=\"o\">=</span><span class=\"n\">getter_func</span><span class=\"p\">)</span>\n        <span class=\"n\">num_None</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">if</span> <span class=\"kc\">None</span> <span class=\"ow\">in</span> <span class=\"n\">prop2_aids</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Dont count invalid properties</span>\n            <span class=\"n\">num_None</span> <span class=\"o\">+=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">prop2_aids</span><span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">])</span>\n            <span class=\"k\">del</span> <span class=\"n\">prop2_aids</span><span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">UNKNOWN</span> <span class=\"ow\">in</span> <span class=\"n\">prop2_aids</span><span class=\"p\">:</span>\n            <span class=\"n\">num_None</span> <span class=\"o\">+=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">prop2_aids</span><span class=\"p\">[</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">UNKNOWN</span><span class=\"p\">])</span>\n            <span class=\"k\">del</span> <span class=\"n\">prop2_aids</span><span class=\"p\">[</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">UNKNOWN</span><span class=\"p\">]</span>\n        <span class=\"n\">num_aids_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">,</span> <span class=\"n\">prop2_aids</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()))</span>\n        <span class=\"c1\"># represent that Nones were removed</span>\n        <span class=\"c1\"># num_aids_list += ([np.nan] * num_None)</span>\n        <span class=\"c1\"># if num_None:</span>\n        <span class=\"n\">num_aids_stats</span> <span class=\"o\">=</span> <span class=\"n\">stat_func</span><span class=\"p\">(</span><span class=\"n\">num_aids_list</span><span class=\"p\">,</span> <span class=\"n\">num_None</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">num_aids_stats</span>\n\n    <span class=\"n\">keyval_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">(</span><span class=\"s1\">&#39;num_&#39;</span> <span class=\"o\">+</span> <span class=\"n\">prefix</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;aids&#39;</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">)),</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s1\">&#39;bigstr&#39;</span><span class=\"p\">,</span> <span class=\"kc\">False</span> <span class=\"ow\">or</span> <span class=\"n\">forceall</span><span class=\"p\">):</span>\n        <span class=\"n\">bigstr</span> <span class=\"o\">=</span> <span class=\"n\">functools</span><span class=\"o\">.</span><span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">truncate_str</span><span class=\"p\">,</span> <span class=\"n\">maxlen</span><span class=\"o\">=</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"n\">truncmsg</span><span class=\"o\">=</span><span class=\"s1\">&#39; ~TRUNC~ &#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">keyval_list</span> <span class=\"o\">+=</span> <span class=\"p\">[</span>\n            <span class=\"p\">(</span><span class=\"n\">prefix</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;bigstr&#39;</span><span class=\"p\">,</span>\n             <span class=\"n\">bigstr</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">)))]</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s1\">&#39;hashid&#39;</span><span class=\"p\">,</span> <span class=\"kc\">True</span> <span class=\"ow\">or</span> <span class=\"n\">forceall</span><span class=\"p\">):</span>\n        <span class=\"c1\"># TODO: depricate semantic hashid</span>\n        <span class=\"n\">keyval_list</span> <span class=\"o\">+=</span> <span class=\"p\">[</span>\n            <span class=\"p\">(</span><span class=\"n\">prefix</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;hashid&#39;</span><span class=\"p\">,</span>\n             <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_hashid_semantic_uuid</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"n\">prefix</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">()))]</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s1\">&#39;hashid_visual&#39;</span><span class=\"p\">,</span> <span class=\"kc\">False</span> <span class=\"ow\">or</span> <span class=\"n\">forceall</span><span class=\"p\">):</span>\n        <span class=\"n\">keyval_list</span> <span class=\"o\">+=</span> <span class=\"p\">[</span>\n            <span class=\"p\">(</span><span class=\"n\">prefix</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;hashid_visual&#39;</span><span class=\"p\">,</span>\n             <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_hashid_visual_uuid</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"n\">prefix</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">()))]</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s1\">&#39;hashid_uuid&#39;</span><span class=\"p\">,</span> <span class=\"kc\">False</span> <span class=\"ow\">or</span> <span class=\"n\">forceall</span><span class=\"p\">):</span>\n        <span class=\"n\">keyval_list</span> <span class=\"o\">+=</span> <span class=\"p\">[</span>\n            <span class=\"p\">(</span><span class=\"n\">prefix</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;hashid_uuid&#39;</span><span class=\"p\">,</span>\n             <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_hashid_uuid</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"n\">prefix</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">()))]</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s1\">&#39;per_name&#39;</span><span class=\"p\">,</span> <span class=\"kc\">True</span> <span class=\"ow\">or</span> <span class=\"n\">forceall</span><span class=\"p\">):</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_num_annots_per_name</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">stats</span> <span class=\"o\">=</span> <span class=\"n\">stat_func</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n        <span class=\"n\">keyval_list</span> <span class=\"o\">+=</span> <span class=\"p\">[(</span><span class=\"n\">prefix</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;per_name&#39;</span><span class=\"p\">,</span> <span class=\"n\">stats</span><span class=\"p\">)]</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">use_hist</span><span class=\"p\">:</span>\n            <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">annots</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">)</span>\n            <span class=\"n\">pername</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dict_hist</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">lmap</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">group_items</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">nids</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()))</span>\n            <span class=\"n\">pername_bins</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">odict</span><span class=\"p\">([</span>\n                <span class=\"p\">(</span><span class=\"s1\">&#39;1&#39;</span><span class=\"p\">,</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">pername</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)),</span>\n                <span class=\"p\">(</span><span class=\"s1\">&#39;2-3&#39;</span><span class=\"p\">,</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">pername</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">2</span> <span class=\"ow\">and</span> <span class=\"n\">k</span> <span class=\"o\">&lt;</span> <span class=\"mi\">4</span><span class=\"p\">)),</span>\n                <span class=\"p\">(</span><span class=\"s1\">&#39;4-5&#39;</span><span class=\"p\">,</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">pername</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">4</span> <span class=\"ow\">and</span> <span class=\"n\">k</span> <span class=\"o\">&lt;</span> <span class=\"mi\">6</span><span class=\"p\">)),</span>\n                <span class=\"p\">(</span><span class=\"s1\">&#39;&gt;=6&#39;</span><span class=\"p\">,</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">pername</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">6</span><span class=\"p\">)),</span>\n            <span class=\"p\">])</span>\n            <span class=\"n\">keyval_list</span> <span class=\"o\">+=</span> <span class=\"p\">[(</span><span class=\"n\">prefix</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;per_name_bins&#39;</span><span class=\"p\">,</span> <span class=\"n\">pername_bins</span><span class=\"p\">)]</span>\n\n    <span class=\"c1\"># if kwargs.pop(&#39;per_name_dict&#39;, True or forceall):</span>\n    <span class=\"c1\">#     keyval_list += [</span>\n    <span class=\"c1\">#         (prefix + &#39;per_name_dict&#39;,</span>\n    <span class=\"c1\">#          ut.get_stats(ibs.get_num_annots_per_name(aids)[0],</span>\n    <span class=\"c1\">#                                 use_nan=True, use_median=True))]</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s1\">&#39;per_qual&#39;</span><span class=\"p\">,</span> <span class=\"kc\">False</span> <span class=\"ow\">or</span> <span class=\"n\">forceall</span><span class=\"p\">):</span>\n        <span class=\"n\">qualtext2_nAnnots</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">order_dict_by</span><span class=\"p\">(</span>\n            <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">map_vals</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">,</span> <span class=\"n\">annots</span><span class=\"o\">.</span><span class=\"n\">group_items</span><span class=\"p\">(</span><span class=\"n\">annots</span><span class=\"o\">.</span><span class=\"n\">quality_texts</span><span class=\"p\">)),</span>\n            <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">QUALITY_TEXT_TO_INT</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">keyval_list</span> <span class=\"o\">+=</span> <span class=\"p\">[(</span><span class=\"n\">prefix</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;per_qual&#39;</span><span class=\"p\">,</span>\n                         <span class=\"n\">statwrap</span><span class=\"p\">(</span><span class=\"n\">qualtext2_nAnnots</span><span class=\"p\">))]</span>\n\n    <span class=\"c1\">#if kwargs.pop(&#39;per_vp&#39;, False):</span>\n    <span class=\"k\">if</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s1\">&#39;per_vp&#39;</span><span class=\"p\">,</span> <span class=\"kc\">True</span> <span class=\"ow\">or</span> <span class=\"n\">forceall</span><span class=\"p\">):</span>\n        <span class=\"n\">yawtext2_nAnnots</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">order_dict_by</span><span class=\"p\">(</span>\n            <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">map_vals</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">,</span> <span class=\"n\">annots</span><span class=\"o\">.</span><span class=\"n\">group_items</span><span class=\"p\">(</span><span class=\"n\">annots</span><span class=\"o\">.</span><span class=\"n\">viewpoint_code</span><span class=\"p\">)),</span>\n            <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">VIEW</span><span class=\"o\">.</span><span class=\"n\">CODE_TO_INT</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">keyval_list</span> <span class=\"o\">+=</span> <span class=\"p\">[(</span><span class=\"n\">prefix</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;per_vp&#39;</span><span class=\"p\">,</span>\n                         <span class=\"n\">statwrap</span><span class=\"p\">(</span><span class=\"n\">yawtext2_nAnnots</span><span class=\"p\">))]</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s1\">&#39;per_multiple&#39;</span><span class=\"p\">,</span> <span class=\"kc\">True</span> <span class=\"ow\">or</span> <span class=\"n\">forceall</span><span class=\"p\">):</span>\n        <span class=\"n\">keyval_list</span> <span class=\"o\">+=</span> <span class=\"p\">[</span>\n            <span class=\"p\">(</span><span class=\"n\">prefix</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;per_multiple&#39;</span><span class=\"p\">,</span> <span class=\"n\">statwrap</span><span class=\"p\">(</span>\n                <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">map_vals</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">,</span> <span class=\"n\">annots</span><span class=\"o\">.</span><span class=\"n\">group_items</span><span class=\"p\">(</span><span class=\"n\">annots</span><span class=\"o\">.</span><span class=\"n\">multiple</span><span class=\"p\">))))]</span>\n\n    <span class=\"c1\"># information about overlapping viewpoints</span>\n    <span class=\"k\">if</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s1\">&#39;per_name_vpedge&#39;</span><span class=\"p\">,</span> <span class=\"kc\">False</span> <span class=\"ow\">or</span> <span class=\"n\">forceall</span><span class=\"p\">):</span>\n        <span class=\"n\">keyval_list</span> <span class=\"o\">+=</span> <span class=\"p\">[</span>\n            <span class=\"p\">(</span><span class=\"n\">prefix</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;per_name_vpedge&#39;</span><span class=\"p\">,</span>\n             <span class=\"n\">statwrap</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_intermediate_viewpoint_stats</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">),</span> <span class=\"n\">multi</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))]</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s1\">&#39;per_enc&#39;</span><span class=\"p\">,</span> <span class=\"kc\">True</span> <span class=\"ow\">or</span> <span class=\"n\">forceall</span><span class=\"p\">):</span>\n        <span class=\"n\">keyval_list</span> <span class=\"o\">+=</span> <span class=\"p\">[</span>\n            <span class=\"p\">(</span><span class=\"n\">prefix</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;per_enc&#39;</span><span class=\"p\">,</span>\n             <span class=\"n\">statwrap</span><span class=\"p\">(</span><span class=\"n\">get_per_prop_stats</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_encounter_text</span><span class=\"p\">)))]</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s1\">&#39;per_image&#39;</span><span class=\"p\">,</span> <span class=\"kc\">False</span> <span class=\"ow\">or</span> <span class=\"n\">forceall</span><span class=\"p\">):</span>\n        <span class=\"n\">keyval_list</span> <span class=\"o\">+=</span> <span class=\"p\">[</span>\n            <span class=\"p\">(</span><span class=\"n\">prefix</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;aid_per_image&#39;</span><span class=\"p\">,</span>\n             <span class=\"n\">statwrap</span><span class=\"p\">(</span><span class=\"n\">get_per_prop_stats</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_image_rowids</span><span class=\"p\">)))]</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s1\">&#39;enc_per_name&#39;</span><span class=\"p\">,</span> <span class=\"kc\">True</span> <span class=\"ow\">or</span> <span class=\"n\">forceall</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Does not handle None encounters. They show up as just another encounter</span>\n        <span class=\"n\">name_to_enc_</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">group_items</span><span class=\"p\">(</span><span class=\"n\">annots</span><span class=\"o\">.</span><span class=\"n\">encounter_text</span><span class=\"p\">,</span> <span class=\"n\">annots</span><span class=\"o\">.</span><span class=\"n\">names</span><span class=\"p\">)</span>\n        <span class=\"n\">name_to_enc</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">map_vals</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">,</span> <span class=\"n\">name_to_enc_</span><span class=\"p\">)</span>\n        <span class=\"n\">name_to_num_enc</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">map_vals</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">,</span> <span class=\"n\">name_to_enc</span><span class=\"p\">)</span>\n        <span class=\"n\">num_enc_per_name</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">name_to_num_enc</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">())</span>\n        <span class=\"n\">stats</span> <span class=\"o\">=</span> <span class=\"n\">stat_func</span><span class=\"p\">(</span><span class=\"n\">num_enc_per_name</span><span class=\"p\">)</span>\n        <span class=\"n\">keyval_list</span> <span class=\"o\">+=</span> <span class=\"p\">[</span>\n            <span class=\"p\">(</span><span class=\"n\">prefix</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;enc_per_name&#39;</span><span class=\"p\">,</span> <span class=\"n\">stats</span><span class=\"p\">)]</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s1\">&#39;species_hist&#39;</span><span class=\"p\">,</span> <span class=\"kc\">False</span> <span class=\"ow\">or</span> <span class=\"n\">forceall</span><span class=\"p\">):</span>\n        <span class=\"n\">keyval_list</span> <span class=\"o\">+=</span> <span class=\"p\">[</span>\n            <span class=\"p\">(</span><span class=\"n\">prefix</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;species_hist&#39;</span><span class=\"p\">,</span>\n             <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dict_hist</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_species_texts</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">)))</span>\n        <span class=\"p\">]</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s1\">&#39;case_tag_hist&#39;</span><span class=\"p\">,</span> <span class=\"kc\">False</span> <span class=\"ow\">or</span> <span class=\"n\">forceall</span><span class=\"p\">):</span>\n        <span class=\"n\">keyval_list</span> <span class=\"o\">+=</span> <span class=\"p\">[</span>\n            <span class=\"p\">(</span><span class=\"n\">prefix</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;case_tags&#39;</span><span class=\"p\">,</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dict_hist</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_case_tags</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">))))]</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s1\">&#39;match_tag_hist&#39;</span><span class=\"p\">,</span> <span class=\"kc\">False</span> <span class=\"ow\">or</span> <span class=\"n\">forceall</span><span class=\"p\">):</span>\n        <span class=\"n\">keyval_list</span> <span class=\"o\">+=</span> <span class=\"p\">[</span>\n            <span class=\"p\">(</span><span class=\"n\">prefix</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;match_tags&#39;</span><span class=\"p\">,</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dict_hist</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_annotmatch_tags</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">))))]</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s1\">&#39;match_state&#39;</span><span class=\"p\">,</span> <span class=\"kc\">False</span> <span class=\"ow\">or</span> <span class=\"n\">forceall</span><span class=\"p\">):</span>\n        <span class=\"n\">am_rowids</span> <span class=\"o\">=</span> <span class=\"n\">annots</span><span class=\"o\">.</span><span class=\"n\">get_am_rowids</span><span class=\"p\">(</span><span class=\"n\">internal</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">truths</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annotmatch_evidence_decision</span><span class=\"p\">(</span><span class=\"n\">am_rowids</span><span class=\"p\">)</span>\n        <span class=\"n\">truths</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">replace_nones</span><span class=\"p\">(</span><span class=\"n\">truths</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">))</span>\n        <span class=\"n\">match_state</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">odict</span><span class=\"p\">([</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;None&#39;</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">isnan</span><span class=\"p\">(</span><span class=\"n\">truths</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;unknown&#39;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">truths</span> <span class=\"o\">==</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">EVIDENCE_DECISION</span><span class=\"o\">.</span><span class=\"n\">UNKNOWN</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;incomp&#39;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">truths</span> <span class=\"o\">==</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">EVIDENCE_DECISION</span><span class=\"o\">.</span><span class=\"n\">INCOMPARABLE</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;nomatch&#39;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">truths</span> <span class=\"o\">==</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">EVIDENCE_DECISION</span><span class=\"o\">.</span><span class=\"n\">NEGATIVE</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;match&#39;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">truths</span> <span class=\"o\">==</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">EVIDENCE_DECISION</span><span class=\"o\">.</span><span class=\"n\">POSITIVE</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()),</span>\n        <span class=\"p\">])</span>\n        <span class=\"n\">keyval_list</span> <span class=\"o\">+=</span> <span class=\"p\">[</span>\n            <span class=\"p\">(</span><span class=\"n\">prefix</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;match_state&#39;</span><span class=\"p\">,</span> <span class=\"n\">match_state</span><span class=\"p\">)</span>\n        <span class=\"p\">]</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s1\">&#39;min_name_hourdist&#39;</span><span class=\"p\">,</span> <span class=\"kc\">False</span> <span class=\"ow\">or</span> <span class=\"n\">forceall</span><span class=\"p\">):</span>\n        <span class=\"n\">grouped_aids</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">group_annots_by_name</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"c1\">#ibs.unflat_map(ibs.get_annot_image_unixtimes_asfloat, grouped_aids)</span>\n        <span class=\"n\">timedeltas</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_unflat_annots_timedelta_list</span><span class=\"p\">(</span><span class=\"n\">grouped_aids</span><span class=\"p\">)</span>\n        <span class=\"c1\">#timedeltas = [dists for dists in timedeltas if dists is not np.nan and</span>\n        <span class=\"c1\">#dists is not None]</span>\n        <span class=\"c1\">#timedeltas = [np.nan if dists is None else dists for dists in timedeltas]</span>\n        <span class=\"c1\">#min_timedelta_list = [np.nan if dists is None else dists.min() / (60 *</span>\n        <span class=\"c1\">#60 * 24) for dists in timedeltas]</span>\n        <span class=\"c1\"># convert to hours</span>\n        <span class=\"n\">min_timedelta_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span> <span class=\"k\">if</span> <span class=\"n\">dists</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"k\">else</span> <span class=\"n\">dists</span><span class=\"o\">.</span><span class=\"n\">min</span><span class=\"p\">()</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"mi\">60</span> <span class=\"o\">*</span> <span class=\"mi\">60</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">dists</span> <span class=\"ow\">in</span> <span class=\"n\">timedeltas</span><span class=\"p\">]</span>\n        <span class=\"c1\">#min_timedelta_list = [np.nan if dists is None else dists.min() for dists in timedeltas]</span>\n        <span class=\"n\">min_name_timedelta_stats</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_stats</span><span class=\"p\">(</span><span class=\"n\">min_timedelta_list</span><span class=\"p\">,</span> <span class=\"n\">use_nan</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">keyval_list</span> <span class=\"o\">+=</span> <span class=\"p\">[(</span><span class=\"n\">prefix</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;min_name_hourdist&#39;</span><span class=\"p\">,</span> <span class=\"n\">_stat_str</span><span class=\"p\">(</span><span class=\"n\">min_name_timedelta_stats</span><span class=\"p\">,</span> <span class=\"n\">precision</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">))]</span>\n\n    <span class=\"n\">aid_stats_dict</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">odict</span><span class=\"p\">(</span><span class=\"n\">keyval_list</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">aid_stats_dict</span></div>\n\n\n<div class=\"viewcode-block\" id=\"print_annot_stats\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.print_annot_stats\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">print_annot_stats</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"n\">aid_stats_dict</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_stats_dict</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"n\">prefix</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">label</span> <span class=\"o\">+</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr4</span><span class=\"p\">(</span><span class=\"n\">aid_stats_dict</span><span class=\"p\">,</span> <span class=\"n\">strkeys</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">strvals</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span></div>\n\n\n<div class=\"viewcode-block\" id=\"compare_nested_props\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.compare_nested_props\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">compare_nested_props</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aids1_list</span><span class=\"p\">,</span>\n                         <span class=\"n\">aids2_list</span><span class=\"p\">,</span> <span class=\"n\">getter_func</span><span class=\"p\">,</span>\n                         <span class=\"n\">cmp_func</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Compares properties of query vs database annotations</span>\n\n<span class=\"sd\">    grouped_qaids = aids1_list</span>\n<span class=\"sd\">    grouped_groundtruth_list = aids2_list</span>\n\n<span class=\"sd\">    getter_func = ibs.get_annot_yaws</span>\n<span class=\"sd\">    cmp_func = vt.ori_distance</span>\n\n<span class=\"sd\">    getter_func = ibs.get_annot_image_unixtimes_asfloat</span>\n<span class=\"sd\">    cmp_func = ut.unixtime_hourdiff</span>\n\n<span class=\"sd\">    ExpandNestedComparisions:</span>\n<span class=\"sd\">        import itertools</span>\n<span class=\"sd\">        list(map(list, itertools.starmap(ut.iprod, zip(aids1_list, aids2_list))))</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (IBEISController):  ibeis controller object</span>\n<span class=\"sd\">        aids1_list (list):</span>\n<span class=\"sd\">        aids2_list (list):</span>\n<span class=\"sd\">        getter_func (?):</span>\n<span class=\"sd\">        cmp_func (?):</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        list of ndarrays:</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --exec-compare_nested_props --show</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(defaultdb=&#39;PZ_MTEST&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; aids1_list = [ibs.get_valid_aids()[8:11]]</span>\n<span class=\"sd\">        &gt;&gt;&gt; aids2_list = [ibs.get_valid_aids()[8:11]]</span>\n<span class=\"sd\">        &gt;&gt;&gt; getter_func = ibs.get_annot_image_unixtimes_asfloat</span>\n<span class=\"sd\">        &gt;&gt;&gt; cmp_func = ut.unixtime_hourdiff</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = compare_nested_props(ibs, aids1_list, aids2_list, getter_func, cmp_func)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.quit_if_noshow()</span>\n<span class=\"sd\">        &gt;&gt;&gt; import plottool as pt</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.show_if_requested()</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">def</span> <span class=\"nf\">replace_none_with_nan</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n        <span class=\"k\">return</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">replace_nones</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">))</span>\n\n    <span class=\"n\">props1_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">unflat_map</span><span class=\"p\">(</span><span class=\"n\">getter_func</span><span class=\"p\">,</span> <span class=\"n\">aids1_list</span><span class=\"p\">)</span>\n    <span class=\"n\">props1_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">unflat_map</span><span class=\"p\">(</span><span class=\"n\">replace_none_with_nan</span><span class=\"p\">,</span> <span class=\"n\">props1_list</span><span class=\"p\">)</span>\n\n    <span class=\"n\">props2_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">unflat_map</span><span class=\"p\">(</span><span class=\"n\">getter_func</span><span class=\"p\">,</span> <span class=\"n\">aids2_list</span><span class=\"p\">)</span>\n    <span class=\"n\">props2_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">unflat_map</span><span class=\"p\">(</span><span class=\"n\">replace_none_with_nan</span><span class=\"p\">,</span> <span class=\"n\">props2_list</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Compare the query yaws to the yaws of its correct matches in the database</span>\n    <span class=\"n\">propdist_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">cmp_func</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">qprops</span><span class=\"p\">),</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">gt_props</span><span class=\"p\">)[:,</span> <span class=\"kc\">None</span><span class=\"p\">])</span>\n        <span class=\"k\">for</span> <span class=\"n\">qprops</span><span class=\"p\">,</span> <span class=\"n\">gt_props</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">props1_list</span><span class=\"p\">,</span> <span class=\"n\">props2_list</span><span class=\"p\">)</span>\n    <span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">propdist_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"viewpoint_diff\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.viewpoint_diff\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">viewpoint_diff</span><span class=\"p\">(</span><span class=\"n\">ori1</span><span class=\"p\">,</span> <span class=\"n\">ori2</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; convert distance in radians to distance in viewpoint category &quot;&quot;&quot;</span>\n    <span class=\"c1\"># TODO: lookup distance</span>\n    <span class=\"n\">TAU</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span> <span class=\"o\">*</span> <span class=\"mi\">2</span>\n    <span class=\"n\">ori_diff</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">ori_distance</span><span class=\"p\">(</span><span class=\"n\">ori1</span><span class=\"p\">,</span> <span class=\"n\">ori2</span><span class=\"p\">)</span>\n    <span class=\"n\">viewpoint_diff</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">VIEWTEXT_TO_YAW_RADIANS</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">ori_diff</span> <span class=\"o\">/</span> <span class=\"n\">TAU</span>\n    <span class=\"k\">return</span> <span class=\"n\">viewpoint_diff</span></div>\n\n\n<div class=\"viewcode-block\" id=\"parse_annot_config_stats_filter_kws\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.parse_annot_config_stats_filter_kws\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">parse_annot_config_stats_filter_kws</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">):</span>\n    <span class=\"c1\">#kwkeys = ibs.parse_annot_stats_filter_kws() + [&#39;combined&#39;, &#39;combo_gt_info&#39;, &#39;combo_enc_info&#39;, &#39;combo_dists&#39;]</span>\n    <span class=\"n\">kwkeys1</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">parse_annot_stats_filter_kws</span><span class=\"p\">()</span>\n    <span class=\"n\">kwkeys2</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_func_kwargs</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annotconfig_stats</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n    <span class=\"k\">if</span> <span class=\"s1\">&#39;verbose&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">kwkeys2</span><span class=\"p\">:</span>\n        <span class=\"n\">kwkeys2</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"s1\">&#39;verbose&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">kwkeys</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">unique</span><span class=\"p\">(</span><span class=\"n\">kwkeys1</span> <span class=\"o\">+</span> <span class=\"n\">kwkeys2</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">kwkeys</span></div>\n\n\n<div class=\"viewcode-block\" id=\"print_annotconfig_stats\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.print_annotconfig_stats\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">print_annotconfig_stats</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">qaids</span><span class=\"p\">,</span> <span class=\"n\">daids</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    SeeAlso:</span>\n<span class=\"sd\">        ibs.get_annotconfig_stats</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">annotconfig_stats</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annotconfig_stats</span><span class=\"p\">(</span><span class=\"n\">qaids</span><span class=\"p\">,</span> <span class=\"n\">daids</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    <span class=\"n\">stats_str2</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr4</span><span class=\"p\">(</span><span class=\"n\">annotconfig_stats</span><span class=\"p\">,</span> <span class=\"n\">strvals</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">strkeys</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                          <span class=\"n\">nl</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">explicit</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">nobr</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">stats_str2</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_annotconfig_stats\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.get_annotconfig_stats\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_annotconfig_stats</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">qaids</span><span class=\"p\">,</span> <span class=\"n\">daids</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">combined</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                          <span class=\"n\">combo_gt_info</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">combo_enc_info</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                          <span class=\"n\">combo_dists</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">split_matchable_data</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                          <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Gets statistics about a query / database set of annotations</span>\n\n<span class=\"sd\">    USEFUL DEVELOPER FUNCTION</span>\n\n<span class=\"sd\">    TODO: this function should return non-string values in dictionaries.</span>\n<span class=\"sd\">    The print function should do string conversions</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (IBEISController):  ibeis controller object</span>\n<span class=\"sd\">        qaids (list):  query annotation ids</span>\n<span class=\"sd\">        daids (list):  database annotation ids</span>\n\n<span class=\"sd\">    SeeAlso:</span>\n<span class=\"sd\">        ibeis.dbinfo.print_qd_info</span>\n<span class=\"sd\">        ibs.get_annot_stats_dict</span>\n<span class=\"sd\">        ibs.print_annotconfig_stats(qaid_list, daid_list)</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs get_annotconfig_stats --db PZ_MTEST -a default</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs get_annotconfig_stats --db testdb1  -a default</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs get_annotconfig_stats --db PZ_MTEST -a controlled</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs get_annotconfig_stats --db PZ_FlankHack -a default:qaids=allgt</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs get_annotconfig_stats --db PZ_MTEST -a controlled:per_name=2,min_gt=4</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.init import main_helpers</span>\n<span class=\"sd\">        &gt;&gt;&gt; kwargs = {&#39;per_enc&#39;: True, &#39;enc_per_name&#39;: True}</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs, qaids, daids = main_helpers.testdata_expanded_aids(</span>\n<span class=\"sd\">        ...    defaultdb=&#39;testdb1&#39;, a=&#39;default:qsize=3&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; stat_dict = get_annotconfig_stats(ibs, qaids, daids, **kwargs)</span>\n<span class=\"sd\">        &gt;&gt;&gt; stats_str2 = ut.repr2(stat_dict, si=True, nl=True, nobr=False)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(stats_str2)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">warnings</span>\n    <span class=\"k\">with</span> <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">catch_warnings</span><span class=\"p\">():</span>\n        <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">filterwarnings</span><span class=\"p\">(</span><span class=\"s1\">&#39;ignore&#39;</span><span class=\"p\">,</span> <span class=\"sa\">r</span><span class=\"s1\">&#39;All-NaN (slice|axis) encountered&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">filterwarnings</span><span class=\"p\">(</span><span class=\"s1\">&#39;ignore&#39;</span><span class=\"p\">,</span> <span class=\"sa\">r</span><span class=\"s1\">&#39;Mean of empty slice&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">filterwarnings</span><span class=\"p\">(</span><span class=\"s1\">&#39;ignore&#39;</span><span class=\"p\">,</span> <span class=\"sa\">r</span><span class=\"s1\">&#39;Degrees of freedom &lt;= 0 for slice.&#39;</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># The aids that should be matched by a query</span>\n        <span class=\"n\">grouped_qaids</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">group_annots_by_name</span><span class=\"p\">(</span><span class=\"n\">qaids</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">grouped_groundtruth_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_groundtruth</span><span class=\"p\">(</span>\n            <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_list_column</span><span class=\"p\">(</span><span class=\"n\">grouped_qaids</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">daid_list</span><span class=\"o\">=</span><span class=\"n\">daids</span><span class=\"p\">)</span>\n        <span class=\"c1\"># groundtruth_daids = ut.unique(ut.flatten(grouped_groundtruth_list))</span>\n        <span class=\"n\">query_hasgt_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_has_groundtruth</span><span class=\"p\">(</span><span class=\"n\">qaids</span><span class=\"p\">,</span> <span class=\"n\">daid_list</span><span class=\"o\">=</span><span class=\"n\">daids</span><span class=\"p\">)</span>\n        <span class=\"c1\"># The aids that should not match any query</span>\n        <span class=\"c1\"># nonquery_daids = np.setdiff1d(np.setdiff1d(daids, qaids), groundtruth_daids)</span>\n        <span class=\"c1\"># The query aids that should not get any match</span>\n        <span class=\"n\">unmatchable_queries</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">qaids</span><span class=\"p\">,</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">not_list</span><span class=\"p\">(</span><span class=\"n\">query_hasgt_list</span><span class=\"p\">))</span>\n        <span class=\"c1\"># The query aids that should not have a match</span>\n        <span class=\"n\">matchable_queries</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">qaids</span><span class=\"p\">,</span> <span class=\"n\">query_hasgt_list</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Find the daids that are in the same occurrence as the qaids</span>\n        <span class=\"k\">if</span> <span class=\"n\">combo_enc_info</span><span class=\"p\">:</span>\n            <span class=\"n\">query_encs</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_encounter_text</span><span class=\"p\">(</span><span class=\"n\">qaids</span><span class=\"p\">))</span>\n            <span class=\"n\">data_encs</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_encounter_text</span><span class=\"p\">(</span><span class=\"n\">daids</span><span class=\"p\">))</span>\n            <span class=\"n\">enc_intersect</span> <span class=\"o\">=</span> <span class=\"n\">query_encs</span><span class=\"o\">.</span><span class=\"n\">intersection</span><span class=\"p\">(</span><span class=\"n\">data_encs</span><span class=\"p\">)</span>\n            <span class=\"n\">enc_intersect</span><span class=\"o\">.</span><span class=\"n\">difference_update</span><span class=\"p\">({</span><span class=\"kc\">None</span><span class=\"p\">})</span>\n\n        <span class=\"c1\"># Compare the query yaws to the yaws of its correct matches in the database</span>\n        <span class=\"c1\"># For each name there will be nQaids:nid x nDaids:nid comparisons</span>\n        <span class=\"n\">gt_viewdist_list</span> <span class=\"o\">=</span> <span class=\"n\">compare_nested_props</span><span class=\"p\">(</span>\n            <span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">grouped_qaids</span><span class=\"p\">,</span> <span class=\"n\">grouped_groundtruth_list</span><span class=\"p\">,</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_yaws</span><span class=\"p\">,</span> <span class=\"n\">viewpoint_diff</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Compare the query qualities to the qualities of its correct matches in the database</span>\n        <span class=\"c1\"># gt_qualdists_list = compare_nested_props(</span>\n        <span class=\"c1\">#     ibs, grouped_qaids, grouped_groundtruth_list, ibs.get_annot_qualities, ut.absdiff)</span>\n\n        <span class=\"c1\"># Compare timedelta differences</span>\n        <span class=\"n\">gt_hourdelta_list</span> <span class=\"o\">=</span> <span class=\"n\">compare_nested_props</span><span class=\"p\">(</span>\n            <span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">grouped_qaids</span><span class=\"p\">,</span> <span class=\"n\">grouped_groundtruth_list</span><span class=\"p\">,</span>\n            <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_image_unixtimes_asfloat</span><span class=\"p\">,</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">unixtime_hourdiff</span><span class=\"p\">)</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">super_flatten</span><span class=\"p\">(</span><span class=\"n\">arr_list</span><span class=\"p\">):</span>\n            <span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n            <span class=\"k\">return</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">([</span><span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"n\">ravel</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">arr</span> <span class=\"ow\">in</span> <span class=\"n\">arr_list</span><span class=\"p\">])</span>\n\n        <span class=\"n\">gt_viewdist_stats</span>  <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_stats</span><span class=\"p\">(</span><span class=\"n\">super_flatten</span><span class=\"p\">(</span><span class=\"n\">gt_viewdist_list</span><span class=\"p\">),</span> <span class=\"n\">use_nan</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"c1\"># gt_qualdist_stats  = ut.get_stats(super_flatten(gt_qualdists_list), use_nan=True)</span>\n        <span class=\"n\">gt_hourdelta_stats</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_stats</span><span class=\"p\">(</span><span class=\"n\">super_flatten</span><span class=\"p\">(</span><span class=\"n\">gt_hourdelta_list</span><span class=\"p\">),</span> <span class=\"n\">use_nan</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n        <span class=\"n\">qaids2</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">qaids</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n        <span class=\"n\">daids2</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">daids</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n        <span class=\"n\">qaids2</span><span class=\"o\">.</span><span class=\"n\">sort</span><span class=\"p\">()</span>\n        <span class=\"n\">daids2</span><span class=\"o\">.</span><span class=\"n\">sort</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">(</span><span class=\"n\">qaids2</span> <span class=\"o\">==</span> <span class=\"n\">qaids</span><span class=\"p\">):</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;WARNING: qaids are not sorted&#39;</span><span class=\"p\">)</span>\n            <span class=\"c1\">#raise AssertionError(&#39;WARNING: qaids are not sorted&#39;)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">(</span><span class=\"n\">daids2</span> <span class=\"o\">==</span> <span class=\"n\">daids</span><span class=\"p\">):</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;WARNING: daids are not sorted&#39;</span><span class=\"p\">)</span>\n            <span class=\"c1\">#raise AssertionError(&#39;WARNING: qaids are not sorted&#39;)</span>\n\n        <span class=\"n\">qaid_stats_dict</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_stats_dict</span><span class=\"p\">(</span><span class=\"n\">qaids</span><span class=\"p\">,</span> <span class=\"s1\">&#39;q&#39;</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"n\">daid_stats_dict</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_stats_dict</span><span class=\"p\">(</span><span class=\"n\">daids</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">split_matchable_data</span><span class=\"p\">:</span>\n            <span class=\"c1\"># The aids that should not be matched by any query</span>\n            <span class=\"n\">data_hasgt_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_has_groundtruth</span><span class=\"p\">(</span><span class=\"n\">daids</span><span class=\"p\">,</span> <span class=\"n\">daid_list</span><span class=\"o\">=</span><span class=\"n\">qaids</span><span class=\"p\">)</span>\n            <span class=\"n\">matchable_daids</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">daids</span><span class=\"p\">,</span> <span class=\"n\">data_hasgt_list</span><span class=\"p\">)</span>\n            <span class=\"n\">confusor_daids</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">daids</span><span class=\"p\">,</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">not_list</span><span class=\"p\">(</span><span class=\"n\">data_hasgt_list</span><span class=\"p\">))</span>\n\n            <span class=\"n\">matchable_daid_stats_dict</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_stats_dict</span><span class=\"p\">(</span><span class=\"n\">matchable_daids</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n            <span class=\"n\">confusor_daid_stats_dict</span>  <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_stats_dict</span><span class=\"p\">(</span><span class=\"n\">confusor_daids</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n            <span class=\"n\">daid_stats_dict</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dict_subset</span><span class=\"p\">(</span><span class=\"n\">daid_stats_dict</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">&#39;num_daids&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;dhashid&#39;</span><span class=\"p\">])</span>\n\n        <span class=\"c1\"># Intersections between qaids and daids</span>\n        <span class=\"n\">common_aids</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">intersect1d</span><span class=\"p\">(</span><span class=\"n\">daids</span><span class=\"p\">,</span> <span class=\"n\">qaids</span><span class=\"p\">)</span>\n\n        <span class=\"n\">qnids</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">unique</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_name_rowids</span><span class=\"p\">(</span><span class=\"n\">qaids</span><span class=\"p\">))</span>\n        <span class=\"n\">dnids</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">unique</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_name_rowids</span><span class=\"p\">(</span><span class=\"n\">daids</span><span class=\"p\">))</span>\n        <span class=\"n\">common_nids</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">intersect1d</span><span class=\"p\">(</span><span class=\"n\">qnids</span><span class=\"p\">,</span> <span class=\"n\">dnids</span><span class=\"p\">)</span>\n\n        <span class=\"n\">annotconfig_stats_strs_list1</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">annotconfig_stats_strs_list2</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">annotconfig_stats_strs_list1</span> <span class=\"o\">+=</span> <span class=\"p\">[</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;dbname&#39;</span><span class=\"p\">,</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_dbname</span><span class=\"p\">()),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;num_qaids&#39;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">qaids</span><span class=\"p\">))),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;num_daids&#39;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">daids</span><span class=\"p\">))),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;num_annot_intersect&#39;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">common_aids</span><span class=\"p\">))),</span>\n        <span class=\"p\">]</span>\n\n        <span class=\"n\">annotconfig_stats_strs_list1</span> <span class=\"o\">+=</span> <span class=\"p\">[</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;qaid_stats&#39;</span><span class=\"p\">,</span> <span class=\"n\">qaid_stats_dict</span><span class=\"p\">),</span>\n        <span class=\"p\">]</span>\n        <span class=\"n\">annotconfig_stats_strs_list1</span> <span class=\"o\">+=</span> <span class=\"p\">[</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;daid_stats&#39;</span><span class=\"p\">,</span> <span class=\"n\">daid_stats_dict</span><span class=\"p\">),</span>\n        <span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">split_matchable_data</span><span class=\"p\">:</span>\n            <span class=\"n\">annotconfig_stats_strs_list1</span> <span class=\"o\">+=</span> <span class=\"p\">[</span>\n                <span class=\"p\">(</span><span class=\"s1\">&#39;matchable_daid_stats&#39;</span><span class=\"p\">,</span> <span class=\"n\">matchable_daid_stats_dict</span><span class=\"p\">),</span>\n                <span class=\"p\">(</span><span class=\"s1\">&#39;confusor_daid_stats&#39;</span><span class=\"p\">,</span> <span class=\"n\">confusor_daid_stats_dict</span><span class=\"p\">),</span>\n            <span class=\"p\">]</span>\n            <span class=\"n\">matchable_daid_stats_dict</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_stats_dict</span><span class=\"p\">(</span><span class=\"n\">matchable_daids</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n            <span class=\"n\">confusor_daid_stats_dict</span>  <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_stats_dict</span><span class=\"p\">(</span><span class=\"n\">confusor_daids</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">combined</span><span class=\"p\">:</span>\n            <span class=\"n\">combined_aids</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">unique</span><span class=\"p\">((</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">hstack</span><span class=\"p\">((</span><span class=\"n\">qaids</span><span class=\"p\">,</span> <span class=\"n\">daids</span><span class=\"p\">))))</span>\n            <span class=\"n\">combined_aids</span><span class=\"o\">.</span><span class=\"n\">sort</span><span class=\"p\">()</span>\n            <span class=\"n\">annotconfig_stats_strs_list1</span> <span class=\"o\">+=</span> <span class=\"p\">[</span>\n                <span class=\"p\">(</span><span class=\"s1\">&#39;combined_aids&#39;</span><span class=\"p\">,</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_stats_dict</span><span class=\"p\">(</span><span class=\"n\">combined_aids</span><span class=\"p\">,</span>\n                                                           <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)),</span>\n            <span class=\"p\">]</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">combo_gt_info</span><span class=\"p\">:</span>\n            <span class=\"n\">annotconfig_stats_strs_list1</span> <span class=\"o\">+=</span> <span class=\"p\">[</span>\n                <span class=\"p\">(</span><span class=\"s1\">&#39;num_unmatchable_queries&#39;</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">unmatchable_queries</span><span class=\"p\">)),</span>\n                <span class=\"p\">(</span><span class=\"s1\">&#39;num_matchable_queries&#39;</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">matchable_queries</span><span class=\"p\">)),</span>\n            <span class=\"p\">]</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">combo_enc_info</span><span class=\"p\">:</span>\n            <span class=\"n\">annotconfig_stats_strs_list1</span> <span class=\"o\">+=</span> <span class=\"p\">[</span>\n                <span class=\"c1\">#(&#39;num_qnids&#39;, (len(qnids))),</span>\n                <span class=\"c1\">#(&#39;num_dnids&#39;, (len(dnids))),</span>\n                <span class=\"p\">(</span><span class=\"s1\">&#39;num_enc_intersect&#39;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">enc_intersect</span><span class=\"p\">))),</span>\n                <span class=\"p\">(</span><span class=\"s1\">&#39;num_name_intersect&#39;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">common_nids</span><span class=\"p\">))),</span>\n            <span class=\"p\">]</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">combo_dists</span><span class=\"p\">:</span>\n            <span class=\"n\">annotconfig_stats_strs_list2</span> <span class=\"o\">+=</span> <span class=\"p\">[</span>\n                <span class=\"c1\"># Distances between a query and its groundtruth</span>\n                <span class=\"p\">(</span><span class=\"s1\">&#39;viewdist&#39;</span><span class=\"p\">,</span> <span class=\"n\">_stat_str</span><span class=\"p\">(</span><span class=\"n\">gt_viewdist_stats</span><span class=\"p\">)),</span>\n                <span class=\"c1\">#(&#39;qualdist&#39;, _stat_str(gt_qualdist_stats)),</span>\n                <span class=\"p\">(</span><span class=\"s1\">&#39;hourdist&#39;</span><span class=\"p\">,</span> <span class=\"n\">_stat_str</span><span class=\"p\">(</span><span class=\"n\">gt_hourdelta_stats</span><span class=\"p\">,</span> <span class=\"n\">precision</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)),</span>\n            <span class=\"p\">]</span>\n\n        <span class=\"n\">annotconfig_stats_strs1</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">odict</span><span class=\"p\">(</span><span class=\"n\">annotconfig_stats_strs_list1</span><span class=\"p\">)</span>\n        <span class=\"n\">annotconfig_stats_strs2</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">odict</span><span class=\"p\">(</span><span class=\"n\">annotconfig_stats_strs_list2</span><span class=\"p\">)</span>\n\n        <span class=\"n\">annotconfig_stats</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">odict</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">annotconfig_stats_strs1</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">())</span> <span class=\"o\">+</span>\n                                          <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">annotconfig_stats_strs2</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()))</span>\n        <span class=\"k\">if</span> <span class=\"n\">verbose</span><span class=\"p\">:</span>\n            <span class=\"n\">stats_str2</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr2</span><span class=\"p\">(</span><span class=\"n\">annotconfig_stats</span><span class=\"p\">,</span> <span class=\"n\">strvals</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                                     <span class=\"n\">newlines</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">explicit</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">nobraces</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;annot_config_stats = &#39;</span> <span class=\"o\">+</span> <span class=\"n\">stats_str2</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">annotconfig_stats</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_dbname_alias\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.get_dbname_alias\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_dbname_alias</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; convinience for plots &quot;&quot;&quot;</span>\n    <span class=\"n\">dbname</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_dbname</span><span class=\"p\">()</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">DBNAME_ALIAS</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">dbname</span><span class=\"p\">,</span> <span class=\"n\">dbname</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"find_unlabeled_name_members\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.find_unlabeled_name_members\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">find_unlabeled_name_members</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Find annots where some members of a name have information but others do not.</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (IBEISController):  ibeis controller object</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --exec-find_unlabeled_name_members --qual</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # SCRIPT</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(defaultdb=&#39;PZ_Master1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; defaultdict = dict(ut.parse_func_kwarg_keys(find_unlabeled_name_members, with_vals=True))</span>\n<span class=\"sd\">        &gt;&gt;&gt; kwargs = ut.argparse_dict(defaultdict)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = find_unlabeled_name_members(ibs, **kwargs)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">aid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_aids</span><span class=\"p\">()</span>\n    <span class=\"n\">aids_list</span><span class=\"p\">,</span> <span class=\"n\">nids</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">group_annots_by_name</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">aids_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">aids_list</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span> <span class=\"k\">for</span> <span class=\"n\">aids</span> <span class=\"ow\">in</span> <span class=\"n\">aids_list</span><span class=\"p\">])</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">find_missing</span><span class=\"p\">(</span><span class=\"n\">props_list</span><span class=\"p\">,</span> <span class=\"n\">flags_list</span><span class=\"p\">):</span>\n        <span class=\"n\">missing_idx_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">list_where</span><span class=\"p\">([</span><span class=\"nb\">any</span><span class=\"p\">(</span><span class=\"n\">flags</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"nb\">all</span><span class=\"p\">(</span><span class=\"n\">flags</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">flags</span> <span class=\"ow\">in</span> <span class=\"n\">flags_list</span><span class=\"p\">])</span>\n        <span class=\"n\">missing_flag_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">flags_list</span><span class=\"p\">,</span> <span class=\"n\">missing_idx_list</span><span class=\"p\">)</span>\n        <span class=\"n\">missing_aids_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">aids_list</span><span class=\"p\">,</span> <span class=\"n\">missing_idx_list</span><span class=\"p\">)</span>\n        <span class=\"c1\">#missing_prop_list = ut.take(props_list, missing_idx_list)</span>\n        <span class=\"n\">missing_aid_list</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">zipcompress</span><span class=\"p\">(</span><span class=\"n\">missing_aids_list</span><span class=\"p\">,</span> <span class=\"n\">missing_flag_list</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"kc\">False</span><span class=\"p\">:</span>\n            <span class=\"n\">missing_percent_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">flags</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">flags</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">flags</span> <span class=\"ow\">in</span> <span class=\"n\">missing_flag_list</span><span class=\"p\">]</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Missing per name stats&#39;</span><span class=\"p\">)</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr2</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_stats</span><span class=\"p\">(</span><span class=\"n\">missing_percent_list</span><span class=\"p\">,</span> <span class=\"n\">use_median</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)))</span>\n        <span class=\"k\">return</span> <span class=\"n\">missing_aid_list</span>\n\n    <span class=\"n\">selected_aids_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;time&#39;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"n\">props_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">unflat_map</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_image_unixtimes_asfloat</span><span class=\"p\">,</span> <span class=\"n\">aids_list</span><span class=\"p\">)</span>\n        <span class=\"n\">flags_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">isnan</span><span class=\"p\">(</span><span class=\"n\">props</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">props</span> <span class=\"ow\">in</span> <span class=\"n\">props_list</span><span class=\"p\">]</span>\n        <span class=\"n\">missing_time_aid_list</span> <span class=\"o\">=</span> <span class=\"n\">find_missing</span><span class=\"p\">(</span><span class=\"n\">props_list</span><span class=\"p\">,</span> <span class=\"n\">flags_list</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;missing_time_aid_list = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">missing_time_aid_list</span><span class=\"p\">),))</span>\n        <span class=\"n\">selected_aids_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">missing_time_aid_list</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;yaw&#39;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"n\">props_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">unflat_map</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_yaws</span><span class=\"p\">,</span> <span class=\"n\">aids_list</span><span class=\"p\">)</span>\n        <span class=\"n\">flags_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flag_None_items</span><span class=\"p\">(</span><span class=\"n\">props</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">props</span> <span class=\"ow\">in</span> <span class=\"n\">props_list</span><span class=\"p\">]</span>\n        <span class=\"n\">missing_yaw_aid_list</span> <span class=\"o\">=</span> <span class=\"n\">find_missing</span><span class=\"p\">(</span><span class=\"n\">props_list</span><span class=\"p\">,</span> <span class=\"n\">flags_list</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;num_names_missing_yaw = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">missing_yaw_aid_list</span><span class=\"p\">),))</span>\n        <span class=\"n\">selected_aids_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">missing_yaw_aid_list</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;qual&#39;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"n\">props_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">unflat_map</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_qualities</span><span class=\"p\">,</span> <span class=\"n\">aids_list</span><span class=\"p\">)</span>\n        <span class=\"n\">flags_list</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"n\">p</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"n\">p</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">props</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">props</span> <span class=\"ow\">in</span> <span class=\"n\">props_list</span><span class=\"p\">]</span>\n        <span class=\"n\">missing_qual_aid_list</span> <span class=\"o\">=</span> <span class=\"n\">find_missing</span><span class=\"p\">(</span><span class=\"n\">props_list</span><span class=\"p\">,</span> <span class=\"n\">flags_list</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;num_names_missing_qual = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">missing_qual_aid_list</span><span class=\"p\">),))</span>\n        <span class=\"n\">selected_aids_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">missing_qual_aid_list</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;suspect_yaws&#39;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"n\">yaws_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">unflat_map</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_yaws</span><span class=\"p\">,</span> <span class=\"n\">aids_list</span><span class=\"p\">)</span>\n        <span class=\"n\">time_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">unflat_map</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_image_unixtimes_asfloat</span><span class=\"p\">,</span> <span class=\"n\">aids_list</span><span class=\"p\">)</span>\n        <span class=\"n\">max_timedelta_list</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span>\n            <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nanmax</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">safe_pdist</span><span class=\"p\">(</span><span class=\"n\">unixtime_arr</span><span class=\"p\">[:,</span> <span class=\"kc\">None</span><span class=\"p\">],</span> <span class=\"n\">metric</span><span class=\"o\">=</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">absdiff</span><span class=\"p\">))</span>\n            <span class=\"k\">for</span> <span class=\"n\">unixtime_arr</span> <span class=\"ow\">in</span> <span class=\"n\">time_list</span><span class=\"p\">])</span>\n        <span class=\"n\">flags</span> <span class=\"o\">=</span> <span class=\"n\">max_timedelta_list</span> <span class=\"o\">&gt;</span> <span class=\"mi\">60</span> <span class=\"o\">*</span> <span class=\"mi\">60</span> <span class=\"o\">*</span> <span class=\"mi\">1</span>\n\n        <span class=\"n\">aids1</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">aids_list</span><span class=\"p\">,</span> <span class=\"n\">flags</span><span class=\"p\">)</span>\n        <span class=\"n\">max_yawdiff_list</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span>\n            <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nanmax</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">safe_pdist</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">yaws</span><span class=\"p\">)[:,</span> <span class=\"kc\">None</span><span class=\"p\">],</span> <span class=\"n\">metric</span><span class=\"o\">=</span><span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">ori_distance</span><span class=\"p\">))</span>\n            <span class=\"k\">for</span> <span class=\"n\">yaws</span> <span class=\"ow\">in</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">yaws_list</span><span class=\"p\">,</span> <span class=\"n\">flags</span><span class=\"p\">)</span>\n        <span class=\"p\">])</span>\n\n        <span class=\"c1\"># Find annots with large timedeltas but 0 viewpoint difference</span>\n        <span class=\"n\">flags2</span> <span class=\"o\">=</span> <span class=\"n\">max_yawdiff_list</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n        <span class=\"n\">selected_aids_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">aids1</span><span class=\"p\">,</span> <span class=\"n\">flags2</span><span class=\"p\">))</span>\n\n    <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">selected_aids_list</span><span class=\"p\">)</span>\n    <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">sortedby2</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)))</span>\n    <span class=\"n\">selected_aids</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">unique_ordered</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">selected_aids</span></div>\n\n    <span class=\"c1\">#ibs.unflat_map(ibs.get_annot_quality_texts, aids_list)</span>\n    <span class=\"c1\">#ibs.unflat_map(ibs.get_annot_viewpoints, aids_list)</span>\n\n\n<div class=\"viewcode-block\" id=\"get_annot_pair_lazy_dict\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.get_annot_pair_lazy_dict\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_annot_pair_lazy_dict</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">qaid</span><span class=\"p\">,</span> <span class=\"n\">daid</span><span class=\"p\">,</span> <span class=\"n\">qconfig2_</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">dconfig2_</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (IBEISController):  ibeis controller object</span>\n<span class=\"sd\">        qaid (int):  query annotation id</span>\n<span class=\"sd\">        daid (?):</span>\n<span class=\"sd\">        qconfig2_ (dict): (default = None)</span>\n<span class=\"sd\">        dconfig2_ (dict): (default = None)</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --exec-get_annot_pair_lazy_dict</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(defaultdb=&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; qaid, daid = ibs.get_valid_aids()[0:2]</span>\n<span class=\"sd\">        &gt;&gt;&gt; qconfig2_ = None</span>\n<span class=\"sd\">        &gt;&gt;&gt; dconfig2_ = None</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = get_annot_pair_lazy_dict(ibs, qaid, daid, qconfig2_, dconfig2_)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">metadata</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">LazyDict</span><span class=\"p\">({</span>\n        <span class=\"s1\">&#39;annot1&#39;</span><span class=\"p\">:</span> <span class=\"n\">get_annot_lazy_dict</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">qaid</span><span class=\"p\">,</span> <span class=\"n\">config2_</span><span class=\"o\">=</span><span class=\"n\">qconfig2_</span><span class=\"p\">),</span>\n        <span class=\"s1\">&#39;annot2&#39;</span><span class=\"p\">:</span> <span class=\"n\">get_annot_lazy_dict</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">daid</span><span class=\"p\">,</span> <span class=\"n\">config2_</span><span class=\"o\">=</span><span class=\"n\">dconfig2_</span><span class=\"p\">),</span>\n    <span class=\"p\">},</span> <span class=\"n\">reprkw</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">truncate</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">metadata</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_annot_lazy_dict\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.get_annot_lazy_dict\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_annot_lazy_dict</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid</span><span class=\"p\">,</span> <span class=\"n\">config2_</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (ibeis.IBEISController):  image analysis api</span>\n<span class=\"sd\">        aid (int):  annotation id</span>\n<span class=\"sd\">        config2_ (dict): (default = None)</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        ut.LazyDict: metadata</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --exec-get_annot_lazy_dict --show</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(defaultdb=&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; aid = 1</span>\n<span class=\"sd\">        &gt;&gt;&gt; config2_ = None</span>\n<span class=\"sd\">        &gt;&gt;&gt; metadata = get_annot_lazy_dict(ibs, aid, config2_)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = (&#39;metadata = %s&#39; % (ut.repr3(metadata),))</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\"># if False:</span>\n    <span class=\"c1\">#     metadata1 = ut.LazyDict({</span>\n    <span class=\"c1\">#         &#39;aid&#39;: aid,</span>\n    <span class=\"c1\">#         &#39;name&#39;: lambda: ibs.get_annot_names([aid])[0],</span>\n    <span class=\"c1\">#         &#39;nid&#39;: lambda: ibs.get_annot_name_rowids([aid])[0],</span>\n    <span class=\"c1\">#         &#39;rchip_fpath&#39;: lambda: ibs.get_annot_chip_fpath([aid], config2_=config2_)[0],</span>\n    <span class=\"c1\">#         &#39;rchip&#39;: lambda: ibs.get_annot_chips([aid], config2_=config2_)[0],</span>\n    <span class=\"c1\">#         &#39;vecs&#39;: lambda:  ibs.get_annot_vecs([aid], config2_=config2_)[0],</span>\n    <span class=\"c1\">#         &#39;kpts&#39;: lambda:  ibs.get_annot_kpts([aid], config2_=config2_)[0],</span>\n    <span class=\"c1\">#         &#39;chip_size&#39;: lambda: ibs.get_annot_chip_sizes([aid], config2_=config2_)[0],</span>\n    <span class=\"c1\">#         &#39;dlen_sqrd&#39;: lambda: ibs.get_annot_chip_dlensqrd([aid], config2_=config2_)[0],</span>\n    <span class=\"c1\">#         # global measures</span>\n    <span class=\"c1\">#         &#39;yaw&#39;: lambda: ibs.get_annot_yaws_asfloat(aid),</span>\n    <span class=\"c1\">#         &#39;qual&#39;: lambda: ibs.get_annot_qualities(aid),</span>\n    <span class=\"c1\">#         &#39;gps&#39;: lambda: ibs.get_annot_image_gps2(aid),</span>\n    <span class=\"c1\">#         &#39;time&#39;: lambda: ibs.get_annot_image_unixtimes_asfloat(aid),</span>\n    <span class=\"c1\">#         &#39;annot_context_options&#39;: lambda: interact_chip.build_annot_context_options(ibs, aid),</span>\n    <span class=\"c1\">#     }, reprkw=dict(truncate=True))</span>\n    <span class=\"n\">annot</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">annots</span><span class=\"p\">([</span><span class=\"n\">aid</span><span class=\"p\">],</span> <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">config2_</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"n\">metadata</span> <span class=\"o\">=</span> <span class=\"n\">annot</span><span class=\"o\">.</span><span class=\"n\">_make_lazy_dict</span><span class=\"p\">()</span>\n    <span class=\"c1\"># metadata[&#39;rchip&#39;] = metadata.getitem(&#39;chips&#39;, is_eager=False)</span>\n    <span class=\"c1\"># metadata[&#39;dlen_sqrd&#39;] = metadata.getitem(&#39;chip_dlensqrd&#39;, is_eager=False)</span>\n    <span class=\"c1\"># metadata[&#39;rchip_fpath&#39;] = metadata.getitem(&#39;chip_fpath&#39;, is_eager=False)</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">ibeis.viz.interact</span> <span class=\"k\">import</span> <span class=\"n\">interact_chip</span>\n        <span class=\"n\">metadata</span><span class=\"p\">[</span><span class=\"s1\">&#39;annot_context_options&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">interact_chip</span><span class=\"o\">.</span><span class=\"n\">build_annot_context_options</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">ImportError</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n    <span class=\"k\">return</span> <span class=\"n\">metadata</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_image_lazydict\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.get_image_lazydict\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_image_lazydict</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">gid</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (ibeis.IBEISController):  image analysis api</span>\n<span class=\"sd\">        aid (int):  annotation id</span>\n<span class=\"sd\">        config (dict): (default = None)</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        ut.LazyDict: metadata</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --exec-get_annot_lazy_dict2 --show</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(defaultdb=&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; gid = 1</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\">#from ibeis.viz.interact import interact_chip</span>\n    <span class=\"n\">metadata</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">LazyDict</span><span class=\"p\">({</span>\n        <span class=\"s1\">&#39;gid&#39;</span><span class=\"p\">:</span> <span class=\"n\">gid</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;unixtime&#39;</span><span class=\"p\">:</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_unixtime</span><span class=\"p\">(</span><span class=\"n\">gid</span><span class=\"p\">),</span>\n        <span class=\"s1\">&#39;datetime&#39;</span><span class=\"p\">:</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_datetime</span><span class=\"p\">(</span><span class=\"n\">gid</span><span class=\"p\">),</span>\n        <span class=\"s1\">&#39;aids&#39;</span><span class=\"p\">:</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_aids</span><span class=\"p\">(</span><span class=\"n\">gid</span><span class=\"p\">),</span>\n        <span class=\"s1\">&#39;size&#39;</span><span class=\"p\">:</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_sizes</span><span class=\"p\">(</span><span class=\"n\">gid</span><span class=\"p\">),</span>\n        <span class=\"s1\">&#39;uri&#39;</span><span class=\"p\">:</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_uris</span><span class=\"p\">(</span><span class=\"n\">gid</span><span class=\"p\">),</span>\n        <span class=\"s1\">&#39;uuid&#39;</span><span class=\"p\">:</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_uuids</span><span class=\"p\">(</span><span class=\"n\">gid</span><span class=\"p\">),</span>\n        <span class=\"s1\">&#39;gps&#39;</span><span class=\"p\">:</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_gps</span><span class=\"p\">(</span><span class=\"n\">gid</span><span class=\"p\">),</span>\n        <span class=\"s1\">&#39;orientation&#39;</span><span class=\"p\">:</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_orientation</span><span class=\"p\">(</span><span class=\"n\">gid</span><span class=\"p\">),</span>\n        <span class=\"c1\">#&#39;annot_context_options&#39;: lambda: interact_chip.build_annot_context_options(ibs, aid),</span>\n    <span class=\"p\">},</span> <span class=\"n\">reprkw</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">truncate</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">metadata</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_image_instancelist\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.get_image_instancelist\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_image_instancelist</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">gid_list</span><span class=\"p\">):</span>\n    <span class=\"c1\"># DEPRICATE</span>\n    <span class=\"n\">obj_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_lazydict</span><span class=\"p\">(</span><span class=\"n\">gid</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">gid</span> <span class=\"ow\">in</span> <span class=\"n\">gid_list</span><span class=\"p\">]</span>\n    <span class=\"n\">image_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">instancelist</span><span class=\"p\">(</span><span class=\"n\">obj_list</span><span class=\"p\">,</span> <span class=\"n\">check</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">image_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_annot_instancelist\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.get_annot_instancelist\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_annot_instancelist</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">):</span>\n    <span class=\"c1\"># DEPRICATE</span>\n    <span class=\"n\">obj_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_lazydict</span><span class=\"p\">(</span><span class=\"n\">aid</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">aid</span> <span class=\"ow\">in</span> <span class=\"n\">aid_list</span><span class=\"p\">]</span>\n    <span class=\"n\">annot_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">instancelist</span><span class=\"p\">(</span><span class=\"n\">obj_list</span><span class=\"p\">,</span> <span class=\"n\">check</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">annot_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_annot_lazy_dict2\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.get_annot_lazy_dict2\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_annot_lazy_dict2</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    DEPRICATE FOR ibs.annots</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (ibeis.IBEISController):  image analysis api</span>\n<span class=\"sd\">        aid (int):  annotation id</span>\n<span class=\"sd\">        config (dict): (default = None)</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        ut.LazyDict: metadata</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --exec-get_annot_lazy_dict2 --show</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(defaultdb=&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; aid = 1</span>\n<span class=\"sd\">        &gt;&gt;&gt; config = {&#39;dim_size&#39;: 450}</span>\n<span class=\"sd\">        &gt;&gt;&gt; metadata = get_annot_lazy_dict2(ibs, aid, config)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = (&#39;metadata = %s&#39; % (ut.repr3(metadata),))</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">defaults</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">&#39;aid&#39;</span><span class=\"p\">:</span> <span class=\"n\">aid</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_names</span><span class=\"p\">(</span><span class=\"n\">aid</span><span class=\"p\">),</span>\n        <span class=\"s1\">&#39;rchip_fpath&#39;</span><span class=\"p\">:</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">depc_annot</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;chips&#39;</span><span class=\"p\">,</span> <span class=\"n\">aid</span><span class=\"p\">,</span> <span class=\"s1\">&#39;img&#39;</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">read_extern</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">),</span>\n        <span class=\"s1\">&#39;rchip&#39;</span><span class=\"p\">:</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">depc_annot</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;chips&#39;</span><span class=\"p\">,</span> <span class=\"n\">aid</span><span class=\"p\">,</span> <span class=\"s1\">&#39;img&#39;</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">),</span>\n        <span class=\"s1\">&#39;vecs&#39;</span><span class=\"p\">:</span> <span class=\"k\">lambda</span><span class=\"p\">:</span>  <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">depc_annot</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;feat&#39;</span><span class=\"p\">,</span> <span class=\"n\">aid</span><span class=\"p\">,</span> <span class=\"s1\">&#39;vecs&#39;</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">),</span>\n        <span class=\"s1\">&#39;kpts&#39;</span><span class=\"p\">:</span> <span class=\"k\">lambda</span><span class=\"p\">:</span>  <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">depc_annot</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;feat&#39;</span><span class=\"p\">,</span> <span class=\"n\">aid</span><span class=\"p\">,</span> <span class=\"s1\">&#39;kpts&#39;</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">),</span>\n        <span class=\"s1\">&#39;dlen_sqrd&#39;</span><span class=\"p\">:</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">depc_annot</span><span class=\"p\">[</span><span class=\"s1\">&#39;chips&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">subproperties</span><span class=\"p\">[</span><span class=\"s1\">&#39;dlen_sqrd&#39;</span><span class=\"p\">](</span>\n            <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">depc_annot</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">aid</span><span class=\"p\">],</span> <span class=\"n\">config</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">ibeis.viz.interact</span> <span class=\"k\">import</span> <span class=\"n\">interact_chip</span>\n    <span class=\"k\">except</span> <span class=\"ne\">ImportError</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"c1\">#get_annot_chip_dlensqrd([aid], config=config)[0],</span>\n        <span class=\"n\">defaults</span><span class=\"p\">[</span><span class=\"s1\">&#39;annot_context_options&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">interact_chip</span><span class=\"o\">.</span><span class=\"n\">build_annot_context_options</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid</span><span class=\"p\">))</span>\n    <span class=\"n\">metadata</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">LazyDict</span><span class=\"p\">(</span><span class=\"n\">defaults</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">metadata</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_annot_primary_imageset\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.get_annot_primary_imageset\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_annot_primary_imageset</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"c1\"># TODO: make it better</span>\n    <span class=\"n\">imgsetids_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_imgsetids</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">flags_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">unflat_map</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">is_special_imageset</span><span class=\"p\">,</span> <span class=\"n\">imgsetids_list</span><span class=\"p\">)</span>\n    <span class=\"c1\"># GET IMAGESET QUERY STRUCTURE DATA</span>\n    <span class=\"n\">flags_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">unflat_map</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">not_list</span><span class=\"p\">,</span> <span class=\"n\">flags_list</span><span class=\"p\">)</span>\n    <span class=\"n\">imgsetids_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">list_zipcompress</span><span class=\"p\">(</span><span class=\"n\">imgsetids_list</span><span class=\"p\">,</span> <span class=\"n\">flags_list</span><span class=\"p\">)</span>\n    <span class=\"n\">imgsetid_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_list_column</span><span class=\"p\">(</span><span class=\"n\">imgsetids_list</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">imgsetid_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"lookup_annot_vecs_subset\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.lookup_annot_vecs_subset\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"nd\">@profile</span>\n<span class=\"k\">def</span> <span class=\"nf\">lookup_annot_vecs_subset</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">unflat_aids</span><span class=\"p\">,</span> <span class=\"n\">unflat_fxs</span><span class=\"p\">,</span> <span class=\"n\">annots</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">config2_</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    unflat_aids = naids_list</span>\n<span class=\"sd\">    unflat_fxs = nfxs_list</span>\n<span class=\"sd\">    annots = data_annots</span>\n<span class=\"sd\">    config2_ = data_config2_</span>\n\n<span class=\"sd\">    unflat_aids = cm.filtnorm_aids[0]</span>\n<span class=\"sd\">    unflat_fxs  = cm.filtnorm_fxs[0]</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">aids</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">unique</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">unflat_aids</span><span class=\"p\">))</span>\n    <span class=\"k\">if</span> <span class=\"n\">annots</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">annots</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"n\">annots</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">aid</span><span class=\"p\">:</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_lazy_dict</span><span class=\"p\">(</span><span class=\"n\">aid</span><span class=\"p\">,</span> <span class=\"n\">config2_</span><span class=\"o\">=</span><span class=\"n\">config2_</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">aid</span> <span class=\"ow\">in</span> <span class=\"n\">aids</span><span class=\"p\">}</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">for</span> <span class=\"n\">aid</span> <span class=\"ow\">in</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">annots</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()):</span>\n            <span class=\"n\">annots</span><span class=\"p\">[</span><span class=\"n\">aid</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_lazy_dict</span><span class=\"p\">(</span><span class=\"n\">aid</span><span class=\"p\">,</span> <span class=\"n\">config2_</span><span class=\"o\">=</span><span class=\"n\">config2_</span><span class=\"p\">)</span>\n\n    <span class=\"c1\">#for annot in annots.values():</span>\n    <span class=\"c1\">#    annot.eager_eval(&#39;vecs&#39;)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">extract_vecs</span><span class=\"p\">(</span><span class=\"n\">annots</span><span class=\"p\">,</span> <span class=\"n\">aid</span><span class=\"p\">,</span> <span class=\"n\">fxs</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot; custom_func(lazydict, key, subkeys) for multigroup_lookup &quot;&quot;&quot;</span>\n        <span class=\"n\">vecs</span> <span class=\"o\">=</span> <span class=\"n\">annots</span><span class=\"p\">[</span><span class=\"n\">aid</span><span class=\"p\">][</span><span class=\"s1\">&#39;vecs&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">fxs</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">vecs</span>\n    <span class=\"c1\">#unflat_vecs1 = vt.multigroup_lookup(annots, unflat_aids, unflat_fxs, extract_vecs)</span>\n    <span class=\"c1\"># HACK</span>\n    <span class=\"c1\"># FIXME: naive and regular multigroup still arnt equivalent</span>\n    <span class=\"c1\">#unflat_vecs = unflat_vecs1 = [[] if len(x) == 1 and x[0] is None else x  for x in unflat_vecs1]</span>\n    <span class=\"n\">unflat_vecs</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">multigroup_lookup_naive</span><span class=\"p\">(</span><span class=\"n\">annots</span><span class=\"p\">,</span> <span class=\"n\">unflat_aids</span><span class=\"p\">,</span> <span class=\"n\">unflat_fxs</span><span class=\"p\">,</span> <span class=\"n\">extract_vecs</span><span class=\"p\">)</span>  <span class=\"c1\"># NOQA</span>\n    <span class=\"k\">return</span> <span class=\"n\">unflat_vecs</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_annot_vecs_subset\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.get_annot_vecs_subset\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_annot_vecs_subset</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">fxs_list</span><span class=\"p\">,</span> <span class=\"n\">config2_</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"n\">vecs_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_vecs</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">config2_</span><span class=\"o\">=</span><span class=\"n\">config2_</span><span class=\"p\">)</span>\n    <span class=\"n\">vecs_list</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">ziptake</span><span class=\"p\">(</span><span class=\"n\">vecs_list</span><span class=\"p\">,</span> <span class=\"n\">fxs_list</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">vecs_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_annot_fgweights_subset\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.get_annot_fgweights_subset\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_annot_fgweights_subset</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">fxs_list</span><span class=\"p\">,</span> <span class=\"n\">config2_</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"n\">fgweight_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_fgweights</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">config2_</span><span class=\"o\">=</span><span class=\"n\">config2_</span><span class=\"p\">)</span>\n    <span class=\"n\">vecs_list</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">ziptake</span><span class=\"p\">(</span><span class=\"n\">fgweight_list</span><span class=\"p\">,</span> <span class=\"n\">fxs_list</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">vecs_list</span></div>\n\n\n<span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">_clean_species</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">VERBOSE</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[_clean_species] Cleaning...&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">readonly</span><span class=\"p\">:</span>\n        <span class=\"c1\"># SUPER HACK</span>\n        <span class=\"k\">return</span>\n    <span class=\"n\">species_mapping_dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"k\">if</span> <span class=\"n\">ibs</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;--allow-keyboard-database-update&#39;</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">six.moves</span> <span class=\"k\">import</span> <span class=\"nb\">input</span> <span class=\"k\">as</span> <span class=\"n\">raw_input_</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">ibeis.control.manual_species_funcs</span> <span class=\"k\">import</span> <span class=\"n\">_convert_species_nice_to_code</span>\n        <span class=\"n\">species_rowid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">_get_all_species_rowids</span><span class=\"p\">()</span>\n        <span class=\"n\">species_text_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_species_texts</span><span class=\"p\">(</span><span class=\"n\">species_rowid_list</span><span class=\"p\">)</span>\n        <span class=\"n\">species_nice_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_species_nice</span><span class=\"p\">(</span><span class=\"n\">species_rowid_list</span><span class=\"p\">)</span>\n        <span class=\"n\">species_code_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_species_codes</span><span class=\"p\">(</span><span class=\"n\">species_rowid_list</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">rowid</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">nice</span><span class=\"p\">,</span> <span class=\"n\">code</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">species_rowid_list</span><span class=\"p\">,</span> <span class=\"n\">species_text_list</span><span class=\"p\">,</span> <span class=\"n\">species_nice_list</span><span class=\"p\">,</span> <span class=\"n\">species_code_list</span><span class=\"p\">):</span>\n            <span class=\"n\">alias</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n            <span class=\"k\">if</span> <span class=\"n\">text</span> <span class=\"ow\">in</span> <span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">SPECIES_MAPPING</span><span class=\"p\">:</span>\n                <span class=\"n\">species_code</span><span class=\"p\">,</span> <span class=\"n\">species_nice</span> <span class=\"o\">=</span> <span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">SPECIES_MAPPING</span><span class=\"p\">[</span><span class=\"n\">text</span><span class=\"p\">]</span>\n                <span class=\"k\">while</span> <span class=\"n\">species_code</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                    <span class=\"n\">alias</span> <span class=\"o\">=</span> <span class=\"n\">species_nice</span>\n                    <span class=\"n\">species_code</span><span class=\"p\">,</span> <span class=\"n\">species_nice</span> <span class=\"o\">=</span> <span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">SPECIES_MAPPING</span><span class=\"p\">[</span><span class=\"n\">species_nice</span><span class=\"p\">]</span>\n            <span class=\"k\">elif</span> <span class=\"n\">text</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s1\">&#39;_&#39;</span><span class=\"p\">,</span> <span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">UNKNOWN</span><span class=\"p\">,</span> <span class=\"s1\">&#39;none&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;None&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">]:</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[_clean_species] deleting species: </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n                <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">delete_species</span><span class=\"p\">(</span><span class=\"n\">rowid</span><span class=\"p\">)</span>\n                <span class=\"k\">continue</span>\n            <span class=\"k\">elif</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">nice</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argflag</span><span class=\"p\">(</span><span class=\"n\">flag</span><span class=\"p\">):</span>\n                    <span class=\"n\">species_nice</span> <span class=\"o\">=</span> <span class=\"n\">text</span>\n                    <span class=\"n\">species_code</span> <span class=\"o\">=</span> <span class=\"n\">_convert_species_nice_to_code</span><span class=\"p\">([</span><span class=\"n\">species_nice</span><span class=\"p\">])[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Found an unknown species: </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n                    <span class=\"n\">species_nice</span> <span class=\"o\">=</span> <span class=\"n\">raw_input_</span><span class=\"p\">(</span><span class=\"s1\">&#39;Input a NICE name for </span><span class=\"si\">%r</span><span class=\"s1\">: &#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n                    <span class=\"n\">species_code</span> <span class=\"o\">=</span> <span class=\"n\">raw_input_</span><span class=\"p\">(</span><span class=\"s1\">&#39;Input a CODE name for </span><span class=\"si\">%r</span><span class=\"s1\">: &#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n                    <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">species_code</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">species_nice</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">continue</span>\n            <span class=\"k\">if</span> <span class=\"n\">nice</span> <span class=\"o\">!=</span> <span class=\"n\">species_nice</span> <span class=\"ow\">or</span> <span class=\"n\">code</span> <span class=\"o\">!=</span> <span class=\"n\">species_code</span><span class=\"p\">:</span>\n                <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">_set_species_nice</span><span class=\"p\">([</span><span class=\"n\">rowid</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"n\">species_nice</span><span class=\"p\">])</span>\n                <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">_set_species_code</span><span class=\"p\">([</span><span class=\"n\">rowid</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"n\">species_code</span><span class=\"p\">])</span>\n            <span class=\"k\">if</span> <span class=\"n\">alias</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">alias_rowid</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_species_rowids_from_text</span><span class=\"p\">(</span><span class=\"n\">alias</span><span class=\"p\">,</span> <span class=\"n\">skip_cleaning</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n                <span class=\"n\">aid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">_get_all_aids</span><span class=\"p\">()</span>\n                <span class=\"n\">species_rowid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_species_rowids</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n                <span class=\"n\">aid_list_</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                    <span class=\"n\">aid</span>\n                    <span class=\"k\">for</span> <span class=\"n\">aid</span><span class=\"p\">,</span> <span class=\"n\">species_rowid</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">species_rowid_list</span><span class=\"p\">)</span>\n                    <span class=\"k\">if</span> <span class=\"n\">species_rowid</span> <span class=\"o\">==</span> <span class=\"n\">rowid</span>\n                <span class=\"p\">]</span>\n                <span class=\"n\">species_mapping_dict</span><span class=\"p\">[</span><span class=\"n\">rowid</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">alias_rowid</span>\n                <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_annot_species_rowids</span><span class=\"p\">(</span><span class=\"n\">aid_list_</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">alias_rowid</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aid_list_</span><span class=\"p\">))</span>\n                <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">delete_species</span><span class=\"p\">([</span><span class=\"n\">rowid</span><span class=\"p\">])</span>\n    <span class=\"k\">return</span> <span class=\"n\">species_mapping_dict</span>\n\n\n<div class=\"viewcode-block\" id=\"get_annot_encounter_text\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.get_annot_encounter_text\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_annot_encounter_text</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; Encounter identifier for annotations &quot;&quot;&quot;</span>\n    <span class=\"n\">occur_texts</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_occurrence_text</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">)</span>\n    <span class=\"n\">name_texts</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_names</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">)</span>\n    <span class=\"n\">enc_texts</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ot</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;_&#39;</span> <span class=\"o\">+</span> <span class=\"n\">nt</span> <span class=\"k\">if</span> <span class=\"n\">ot</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">nt</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"k\">else</span> <span class=\"kc\">None</span> <span class=\"k\">for</span> <span class=\"n\">ot</span><span class=\"p\">,</span> <span class=\"n\">nt</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">occur_texts</span><span class=\"p\">,</span> <span class=\"n\">name_texts</span><span class=\"p\">)]</span>\n    <span class=\"k\">return</span> <span class=\"n\">enc_texts</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_annot_occurrence_text\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.get_annot_occurrence_text\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_annot_occurrence_text</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; Occurrence identifier for annotations</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (ibeis.IBEISController):  image analysis api</span>\n<span class=\"sd\">        aids (list):  list of annotation rowids</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        list: occur_texts</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs get_annot_occurrence_text --show</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(defaultdb=&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; aids = ibs.get_valid_aids()</span>\n<span class=\"sd\">        &gt;&gt;&gt; occur_texts = get_annot_occurrence_text(ibs, aids)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = (&#39;occur_texts = %s&#39; % (ut.repr2(occur_texts),))</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">imgset_ids</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_imgsetids</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">)</span>\n    <span class=\"n\">flags</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">unflat_map</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_imageset_isoccurrence</span><span class=\"p\">,</span> <span class=\"n\">imgset_ids</span><span class=\"p\">)</span>\n    <span class=\"c1\">#flags = [[text.lower().startswith(&#39;occurrence&#39;) for text in texts]</span>\n    <span class=\"c1\">#         for texts in imgset_texts]</span>\n    <span class=\"n\">imgset_ids</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">zipcompress</span><span class=\"p\">(</span><span class=\"n\">imgset_ids</span><span class=\"p\">,</span> <span class=\"n\">flags</span><span class=\"p\">)</span>\n    <span class=\"n\">_occur_texts</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">unflat_map</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_imageset_text</span><span class=\"p\">,</span> <span class=\"n\">imgset_ids</span><span class=\"p\">)</span>\n    <span class=\"n\">_occur_texts</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">t</span> <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"n\">_occur_texts</span><span class=\"p\">]</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">all</span><span class=\"p\">([</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"n\">_occur_texts</span><span class=\"p\">]):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[</span><span class=\"si\">%s</span><span class=\"s1\">] WARNING: annot must be in exactly one occurrence&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_caller_name</span><span class=\"p\">(),))</span>\n    <span class=\"n\">occur_texts</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take_column</span><span class=\"p\">(</span><span class=\"n\">_occur_texts</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">occur_texts</span></div>\n\n\n<span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">_parse_smart_xml</span><span class=\"p\">(</span><span class=\"n\">back</span><span class=\"p\">,</span> <span class=\"n\">xml_path</span><span class=\"p\">,</span> <span class=\"n\">nTotal</span><span class=\"p\">,</span> <span class=\"n\">offset</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Storage for the patrol imagesets</span>\n    <span class=\"n\">xml_dir</span><span class=\"p\">,</span> <span class=\"n\">xml_name</span> <span class=\"o\">=</span> <span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">xml_path</span><span class=\"p\">)</span>\n    <span class=\"n\">imageset_info_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">last_photo_number</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"n\">last_imageset_info</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"c1\"># Parse the XML file for the information</span>\n    <span class=\"n\">patrol_tree</span> <span class=\"o\">=</span> <span class=\"n\">ET</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"n\">xml_path</span><span class=\"p\">)</span>\n    <span class=\"n\">namespace</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;{http://www.smartconservationsoftware.org/xml/1.1/patrol}&#39;</span>\n    <span class=\"c1\"># Load all waypoint elements</span>\n    <span class=\"n\">element</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;.//</span><span class=\"si\">%s</span><span class=\"s1\">waypoints&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">namespace</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n    <span class=\"n\">waypoint_list</span> <span class=\"o\">=</span> <span class=\"n\">patrol_tree</span><span class=\"o\">.</span><span class=\"n\">findall</span><span class=\"p\">(</span><span class=\"n\">element</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">waypoint_list</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"c1\"># raise IOError(&#39;There are no observations (waypoints) in this</span>\n        <span class=\"c1\"># Patrol XML file: %r&#39; % (xml_path, ))</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;There are no observations (waypoints) in this Patrol XML file: </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span>\n              <span class=\"p\">(</span><span class=\"n\">xml_path</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n    <span class=\"k\">for</span> <span class=\"n\">waypoint</span> <span class=\"ow\">in</span> <span class=\"n\">waypoint_list</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Get the relevant information about the waypoint</span>\n        <span class=\"n\">waypoint_id</span>   <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">waypoint</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;id&#39;</span><span class=\"p\">))</span>\n        <span class=\"n\">waypoint_lat</span>  <span class=\"o\">=</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">waypoint</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;y&#39;</span><span class=\"p\">))</span>\n        <span class=\"n\">waypoint_lon</span>  <span class=\"o\">=</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">waypoint</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">))</span>\n        <span class=\"n\">waypoint_time</span> <span class=\"o\">=</span> <span class=\"n\">waypoint</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;time&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">waypoint_info</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"n\">xml_name</span><span class=\"p\">,</span>\n            <span class=\"n\">waypoint_id</span><span class=\"p\">,</span>\n            <span class=\"p\">(</span><span class=\"n\">waypoint_lat</span><span class=\"p\">,</span> <span class=\"n\">waypoint_lon</span><span class=\"p\">),</span>\n            <span class=\"n\">waypoint_time</span><span class=\"p\">,</span>\n        <span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"kc\">None</span> <span class=\"ow\">in</span> <span class=\"n\">waypoint_info</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">IOError</span><span class=\"p\">(</span>\n                <span class=\"s1\">&#39;The observation (waypoint) is missing information: </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span>\n                <span class=\"p\">(</span><span class=\"n\">waypoint_info</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n        <span class=\"c1\"># Get all of the waypoint&#39;s observations (we expect only one</span>\n        <span class=\"c1\"># normally)</span>\n        <span class=\"n\">element</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;.//</span><span class=\"si\">%s</span><span class=\"s1\">observations&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">namespace</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n        <span class=\"n\">observation_list</span> <span class=\"o\">=</span> <span class=\"n\">waypoint</span><span class=\"o\">.</span><span class=\"n\">findall</span><span class=\"p\">(</span><span class=\"n\">element</span><span class=\"p\">)</span>\n        <span class=\"c1\"># if len(observation_list) == 0:</span>\n        <span class=\"c1\">#     raise IOError(&#39;There are no observations in this waypoint,</span>\n        <span class=\"c1\">#     waypoint_id: %r&#39; % (waypoint_id, ))</span>\n        <span class=\"k\">for</span> <span class=\"n\">observation</span> <span class=\"ow\">in</span> <span class=\"n\">observation_list</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Filter the observations based on type, we only care</span>\n            <span class=\"c1\"># about certain types</span>\n            <span class=\"n\">categoryKey</span> <span class=\"o\">=</span> <span class=\"n\">observation</span><span class=\"o\">.</span><span class=\"n\">attrib</span><span class=\"p\">[</span><span class=\"s1\">&#39;categoryKey&#39;</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">categoryKey</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">&#39;animals.liveanimals&#39;</span><span class=\"p\">)</span> <span class=\"ow\">or</span>\n                  <span class=\"n\">categoryKey</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">&#39;animals.problemanimal&#39;</span><span class=\"p\">)):</span>\n                <span class=\"c1\"># Get the photonumber attribute for the waypoint&#39;s</span>\n                <span class=\"c1\"># observation</span>\n                <span class=\"n\">element</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;.//</span><span class=\"si\">%s</span><span class=\"s1\">attributes[@attributeKey=&quot;photonumber&quot;]&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span>\n                    <span class=\"n\">namespace</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n                <span class=\"n\">photonumber</span> <span class=\"o\">=</span> <span class=\"n\">observation</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">element</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">photonumber</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                    <span class=\"n\">element</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;.//</span><span class=\"si\">%s</span><span class=\"s1\">sValue&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">namespace</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n                    <span class=\"c1\"># Get the value for photonumber</span>\n                    <span class=\"n\">sValue</span>  <span class=\"o\">=</span> <span class=\"n\">photonumber</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">element</span><span class=\"p\">)</span>\n                    <span class=\"k\">if</span> <span class=\"n\">sValue</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                        <span class=\"k\">raise</span> <span class=\"ne\">IOError</span><span class=\"p\">(</span>\n                            <span class=\"p\">(</span><span class=\"s1\">&#39;The photonumber sValue is missing from &#39;</span>\n                             <span class=\"s1\">&#39;photonumber, waypoint_id: </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span> <span class=\"o\">%</span>\n                            <span class=\"p\">(</span><span class=\"n\">waypoint_id</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n                    <span class=\"c1\"># Python cast the value</span>\n                    <span class=\"k\">try</span><span class=\"p\">:</span>\n                        <span class=\"n\">photo_number</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">sValue</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">))</span> <span class=\"o\">-</span> <span class=\"n\">offset</span>\n                    <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n                        <span class=\"c1\"># raise IOError(&#39;The photonumber sValue is invalid,</span>\n                        <span class=\"c1\"># waypoint_id: %r&#39; % (waypoint_id, ))</span>\n                        <span class=\"nb\">print</span><span class=\"p\">((</span><span class=\"s1\">&#39;[ibs]     &#39;</span>\n                               <span class=\"s1\">&#39;Skipped Invalid Observation with &#39;</span>\n                               <span class=\"s1\">&#39;photonumber: </span><span class=\"si\">%r</span><span class=\"s1\">, waypoint_id: </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n                              <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">sValue</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">waypoint_id</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n                        <span class=\"k\">continue</span>\n                    <span class=\"c1\"># Check that the photo_number is within the acceptable bounds</span>\n                    <span class=\"k\">if</span> <span class=\"n\">photo_number</span> <span class=\"o\">&gt;=</span> <span class=\"n\">nTotal</span><span class=\"p\">:</span>\n                        <span class=\"k\">raise</span> <span class=\"ne\">IOError</span><span class=\"p\">(</span>\n                            <span class=\"s1\">&#39;The Patrol XML file is looking for images &#39;</span>\n                            <span class=\"s1\">&#39;that do not exist (too few images given)&#39;</span><span class=\"p\">)</span>\n                    <span class=\"c1\"># Keep track of the last waypoint that was processed</span>\n                    <span class=\"c1\"># becuase we only have photono, which indicates start</span>\n                    <span class=\"c1\"># indices and doesn&#39;t specify the end index.  The</span>\n                    <span class=\"c1\"># ending index is extracted as the next waypoint&#39;s</span>\n                    <span class=\"c1\"># photonum minus 1.</span>\n                    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">last_photo_number</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span>\n                         <span class=\"n\">last_imageset_info</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n                        <span class=\"n\">imageset_info</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                            <span class=\"n\">last_imageset_info</span> <span class=\"o\">+</span> <span class=\"p\">[(</span><span class=\"n\">last_photo_number</span><span class=\"p\">,</span>\n                                                    <span class=\"n\">photo_number</span><span class=\"p\">)])</span>\n                        <span class=\"n\">imageset_info_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">imageset_info</span><span class=\"p\">)</span>\n                    <span class=\"n\">last_photo_number</span> <span class=\"o\">=</span> <span class=\"n\">photo_number</span>\n                    <span class=\"n\">last_imageset_info</span> <span class=\"o\">=</span> <span class=\"n\">waypoint_info</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"c1\"># raise IOError(&#39;The photonumber value is missing from</span>\n                    <span class=\"c1\"># waypoint, waypoint_id: %r&#39; % (waypoint_id, ))</span>\n                    <span class=\"nb\">print</span><span class=\"p\">((</span><span class=\"s1\">&#39;[ibs]     Skipped Empty Observation with&#39;</span>\n                           <span class=\"s1\">&#39;&quot;categoryKey&quot;: </span><span class=\"si\">%r</span><span class=\"s1\">, waypoint_id: </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span> <span class=\"o\">%</span>\n                          <span class=\"p\">(</span><span class=\"n\">categoryKey</span><span class=\"p\">,</span> <span class=\"n\">waypoint_id</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"nb\">print</span><span class=\"p\">((</span><span class=\"s1\">&#39;[ibs]     &#39;</span>\n                       <span class=\"s1\">&#39;Skipped Incompatible Observation with &#39;</span>\n                       <span class=\"s1\">&#39;&quot;categoryKey&quot;: </span><span class=\"si\">%r</span><span class=\"s1\">, waypoint_id: </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span> <span class=\"o\">%</span>\n                      <span class=\"p\">(</span><span class=\"n\">categoryKey</span><span class=\"p\">,</span> <span class=\"n\">waypoint_id</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n    <span class=\"c1\"># Append the last photo_number</span>\n    <span class=\"k\">if</span> <span class=\"n\">last_photo_number</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">last_imageset_info</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">imageset_info</span> <span class=\"o\">=</span> <span class=\"n\">last_imageset_info</span> <span class=\"o\">+</span> <span class=\"p\">[(</span><span class=\"n\">last_photo_number</span><span class=\"p\">,</span> <span class=\"n\">nTotal</span><span class=\"p\">)]</span>\n        <span class=\"n\">imageset_info_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">imageset_info</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">imageset_info_list</span>\n\n\n<div class=\"viewcode-block\" id=\"compute_occurrences_smart\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.compute_occurrences_smart\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">compute_occurrences_smart</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">gid_list</span><span class=\"p\">,</span> <span class=\"n\">smart_xml_fpath</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; Function to load and process a SMART patrol XML file &quot;&quot;&quot;</span>\n    <span class=\"c1\"># Get file and copy to ibeis database folder</span>\n    <span class=\"n\">xml_dir</span><span class=\"p\">,</span> <span class=\"n\">xml_name</span> <span class=\"o\">=</span> <span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">smart_xml_fpath</span><span class=\"p\">)</span>\n    <span class=\"n\">dst_xml_path</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_smart_patrol_dir</span><span class=\"p\">(),</span> <span class=\"n\">xml_name</span><span class=\"p\">)</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"n\">smart_xml_fpath</span><span class=\"p\">,</span> <span class=\"n\">dst_xml_path</span><span class=\"p\">,</span> <span class=\"n\">overwrite</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Process the XML File</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[ibs] Processing Patrol XML file: </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">dst_xml_path</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">imageset_info_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">_parse_smart_xml</span><span class=\"p\">(</span><span class=\"n\">dst_xml_path</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">))</span>\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">delete_images</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">((</span><span class=\"s1\">&#39;[ibs] ERROR: Parsing Patrol XML file failed, &#39;</span>\n               <span class=\"s1\">&#39;rolling back by deleting </span><span class=\"si\">%d</span><span class=\"s1\"> images...&#39;</span><span class=\"p\">)</span> <span class=\"o\">%</span>\n              <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">,</span> <span class=\"p\">)))</span>\n        <span class=\"k\">raise</span> <span class=\"n\">e</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Sanity check</span>\n        <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">imageset_info_list</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"p\">(</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;Trying to added </span><span class=\"si\">%d</span><span class=\"s1\"> images, but the Patrol  &#39;</span>\n             <span class=\"s1\">&#39;XML file has no observations&#39;</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">),</span> <span class=\"p\">))</span>\n    <span class=\"c1\"># Display the patrol imagesets</span>\n    <span class=\"k\">for</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">imageset_info</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">imageset_info_list</span><span class=\"p\">):</span>\n        <span class=\"n\">smart_xml_fname</span><span class=\"p\">,</span> <span class=\"n\">smart_waypoint_id</span><span class=\"p\">,</span> <span class=\"n\">gps</span><span class=\"p\">,</span> <span class=\"n\">local_time</span><span class=\"p\">,</span> <span class=\"n\">range_</span> <span class=\"o\">=</span> <span class=\"n\">imageset_info</span>\n        <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">range_</span>\n        <span class=\"n\">gid_list_</span> <span class=\"o\">=</span> <span class=\"n\">gid_list</span><span class=\"p\">[</span><span class=\"n\">start</span><span class=\"p\">:</span><span class=\"n\">end</span><span class=\"p\">]</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[ibs]     Found Patrol ImageSet: </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">imageset_info</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[ibs]         GIDs: </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">gid_list_</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">gid_list_</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[ibs]         SKIPPING EMPTY IMAGESET&#39;</span><span class=\"p\">)</span>\n            <span class=\"k\">continue</span>\n        <span class=\"c1\"># Add the GPS data to the images</span>\n        <span class=\"n\">gps_list</span>  <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">gps</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">gid_list_</span><span class=\"p\">)</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_image_gps</span><span class=\"p\">(</span><span class=\"n\">gid_list_</span><span class=\"p\">,</span> <span class=\"n\">gps_list</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Create a new imageset</span>\n        <span class=\"n\">imagesettext</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"si\">%s</span><span class=\"s1\"> Waypoint </span><span class=\"si\">%03d</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">xml_name</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">&#39;.xml&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">),</span> <span class=\"n\">index</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n        <span class=\"n\">imgsetid</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">add_imagesets</span><span class=\"p\">(</span><span class=\"n\">imagesettext</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Add images to the imagesets</span>\n        <span class=\"n\">imgsetid_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">imgsetid</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">gid_list_</span><span class=\"p\">)</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_image_imgsetids</span><span class=\"p\">(</span><span class=\"n\">gid_list_</span><span class=\"p\">,</span> <span class=\"n\">imgsetid_list</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Set the imageset&#39;s smart fields</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_imageset_smart_xml_fnames</span><span class=\"p\">([</span><span class=\"n\">imgsetid</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"n\">smart_xml_fname</span><span class=\"p\">])</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_imageset_smart_waypoint_ids</span><span class=\"p\">([</span><span class=\"n\">imgsetid</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"n\">smart_waypoint_id</span><span class=\"p\">])</span>\n        <span class=\"c1\"># Set the imageset&#39;s time based on the images</span>\n        <span class=\"n\">unixtime_list</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_unixtime</span><span class=\"p\">(</span><span class=\"n\">gid_list_</span><span class=\"p\">))</span>\n        <span class=\"n\">start_time</span> <span class=\"o\">=</span> <span class=\"n\">unixtime_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">end_time</span> <span class=\"o\">=</span> <span class=\"n\">unixtime_list</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_imageset_start_time_posix</span><span class=\"p\">([</span><span class=\"n\">imgsetid</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"n\">start_time</span><span class=\"p\">])</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_imageset_end_time_posix</span><span class=\"p\">([</span><span class=\"n\">imgsetid</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"n\">end_time</span><span class=\"p\">])</span>\n    <span class=\"c1\"># Complete</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[ibs] ...Done processing Patrol XML file&#39;</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"compute_occurrences\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.compute_occurrences\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">compute_occurrences</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Clusters ungrouped images into imagesets representing occurrences</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.control.IBEISControl --test-compute_occurrences</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.control.IBEISControl import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs.compute_occurrences(config={&#39;use_gps&#39;: False, &#39;seconds_thresh&#39;: 600})</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs.update_special_imagesets()</span>\n<span class=\"sd\">        &gt;&gt;&gt; # Remove some images from a non-special imageset</span>\n<span class=\"sd\">        &gt;&gt;&gt; nonspecial_imgsetids = [i for i in ibs.get_valid_imgsetids() if i not in ibs.get_special_imgsetids()]</span>\n<span class=\"sd\">        &gt;&gt;&gt; images_to_remove = ibs.get_imageset_gids(nonspecial_imgsetids[0:1])[0][0:1]</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs.unrelate_images_and_imagesets(images_to_remove,nonspecial_imgsetids[0:1] * len(images_to_remove))</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs.update_special_imagesets()</span>\n<span class=\"sd\">        &gt;&gt;&gt; ungr_imgsetid = ibs.get_imageset_imgsetids_from_text(const.UNGROUPED_IMAGES_IMAGESETTEXT)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ungr_gids = ibs.get_imageset_gids([ungr_imgsetid])[0]</span>\n<span class=\"sd\">        &gt;&gt;&gt; #Now let&#39;s make sure that when we recompute imagesets, our non-special imgsetid remains the same</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&#39;PRE COMPUTE: ImageSets are %r&#39; % ibs.get_valid_imgsetids())</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&#39;Containing: %r&#39; % ibs.get_imageset_gids(ibs.get_valid_imgsetids()))</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs.compute_occurrences(config={&#39;use_gps&#39;: False, &#39;seconds_thresh&#39;: 600})</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&#39;COMPUTE: New imagesets are %r&#39; % ibs.get_valid_imgsetids())</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&#39;Containing: %r&#39; % ibs.get_imageset_gids(ibs.get_valid_imgsetids()))</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs.update_special_imagesets()</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&#39;UPDATE SPECIAL: New imagesets are %r&#39; % ibs.get_valid_imgsetids())</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&#39;Containing: %r&#39; % ibs.get_imageset_gids(ibs.get_valid_imgsetids()))</span>\n<span class=\"sd\">        &gt;&gt;&gt; assert(images_to_remove[0] not in ibs.get_imageset_gids(nonspecial_imgsetids[0:1])[0])</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.preproc</span> <span class=\"k\">import</span> <span class=\"n\">preproc_occurrence</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[ibs] Computing and adding imagesets.&#39;</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Only ungrouped images are clustered</span>\n    <span class=\"n\">gid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_ungrouped_gids</span><span class=\"p\">()</span>\n    <span class=\"c1\">#gid_list = ibs.get_valid_gids(require_unixtime=False, reviewed=False)</span>\n    <span class=\"k\">with</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">Timer</span><span class=\"p\">(</span><span class=\"s1\">&#39;computing imagesets&#39;</span><span class=\"p\">):</span>\n        <span class=\"n\">flat_imgsetids</span><span class=\"p\">,</span> <span class=\"n\">flat_gids</span> <span class=\"o\">=</span> <span class=\"n\">preproc_occurrence</span><span class=\"o\">.</span><span class=\"n\">ibeis_compute_occurrences</span><span class=\"p\">(</span>\n            <span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">gid_list</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"p\">)</span>\n        <span class=\"n\">sortx</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">argsort</span><span class=\"p\">(</span><span class=\"n\">flat_imgsetids</span><span class=\"p\">)</span>\n        <span class=\"n\">flat_imgsetids</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">flat_imgsetids</span><span class=\"p\">,</span> <span class=\"n\">sortx</span><span class=\"p\">)</span>\n        <span class=\"n\">flat_gids</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">flat_gids</span><span class=\"p\">,</span> <span class=\"n\">sortx</span><span class=\"p\">)</span>\n\n    <span class=\"n\">valid_imgsetids</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_imgsetids</span><span class=\"p\">()</span>\n    <span class=\"n\">imgsetid_offset</span> <span class=\"o\">=</span> <span class=\"mi\">0</span> <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">valid_imgsetids</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">valid_imgsetids</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># This way we can make sure that manually separated imagesets</span>\n    <span class=\"c1\"># remain untouched, and ensure that new imagesets are created</span>\n    <span class=\"n\">flat_imgsetids_offset</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">imgsetid</span> <span class=\"o\">+</span> <span class=\"n\">imgsetid_offset</span>\n                             <span class=\"k\">for</span> <span class=\"n\">imgsetid</span> <span class=\"ow\">in</span> <span class=\"n\">flat_imgsetids</span><span class=\"p\">]</span>\n    <span class=\"n\">imagesettext_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;Occurrence &#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">imgsetid</span><span class=\"p\">)</span>\n                         <span class=\"k\">for</span> <span class=\"n\">imgsetid</span> <span class=\"ow\">in</span> <span class=\"n\">flat_imgsetids_offset</span><span class=\"p\">]</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[ibs] Finished computing, about to add imageset.&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_image_imagesettext</span><span class=\"p\">(</span><span class=\"n\">flat_gids</span><span class=\"p\">,</span> <span class=\"n\">imagesettext_list</span><span class=\"p\">)</span>\n    <span class=\"c1\"># HACK TO UPDATE IMAGESET POSIX TIMES</span>\n    <span class=\"c1\"># CAREFUL THIS BLOWS AWAY SMART DATA</span>\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">update_imageset_info</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_imgsetids</span><span class=\"p\">())</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[ibs] Finished computing and adding imagesets.&#39;</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"compute_ggr_path_dict\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.compute_ggr_path_dict\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">compute_ggr_path_dict</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">):</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">matplotlib.path</span> <span class=\"k\">import</span> <span class=\"n\">Path</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">shapefile</span>\n\n    <span class=\"n\">path_dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n    <span class=\"c1\"># ADD ZONES</span>\n    <span class=\"n\">point_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"mi\">1</span>  <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">0.829843</span><span class=\"p\">,</span> <span class=\"mf\">35.732721</span><span class=\"p\">],</span>\n        <span class=\"mi\">2</span>  <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">0.829843</span><span class=\"p\">,</span> <span class=\"mf\">37.165353</span><span class=\"p\">],</span>\n        <span class=\"mi\">3</span>  <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">0.829843</span><span class=\"p\">,</span> <span class=\"mf\">38.566150</span><span class=\"p\">],</span>\n        <span class=\"mi\">4</span>  <span class=\"p\">:</span> <span class=\"p\">[</span> <span class=\"mf\">0.405015</span><span class=\"p\">,</span> <span class=\"mf\">37.165353</span><span class=\"p\">],</span>\n        <span class=\"mi\">5</span>  <span class=\"p\">:</span> <span class=\"p\">[</span> <span class=\"mf\">0.405015</span><span class=\"p\">,</span> <span class=\"mf\">38.566150</span><span class=\"p\">],</span>\n        <span class=\"mi\">6</span>  <span class=\"p\">:</span> <span class=\"p\">[</span> <span class=\"mf\">1.292767</span><span class=\"p\">,</span> <span class=\"mf\">35.732721</span><span class=\"p\">],</span>\n        <span class=\"mi\">7</span>  <span class=\"p\">:</span> <span class=\"p\">[</span> <span class=\"mf\">1.292767</span><span class=\"p\">,</span> <span class=\"mf\">36.701444</span><span class=\"p\">],</span>\n        <span class=\"mi\">8</span>  <span class=\"p\">:</span> <span class=\"p\">[</span> <span class=\"mf\">1.292767</span><span class=\"p\">,</span> <span class=\"mf\">37.029463</span><span class=\"p\">],</span>\n        <span class=\"mi\">9</span>  <span class=\"p\">:</span> <span class=\"p\">[</span> <span class=\"mf\">1.292767</span><span class=\"p\">,</span> <span class=\"mf\">37.415937</span><span class=\"p\">],</span>\n        <span class=\"mi\">10</span> <span class=\"p\">:</span> <span class=\"p\">[</span> <span class=\"mf\">1.292767</span><span class=\"p\">,</span> <span class=\"mf\">38.566150</span><span class=\"p\">],</span>\n        <span class=\"mi\">11</span> <span class=\"p\">:</span> <span class=\"p\">[</span> <span class=\"mf\">2.641838</span><span class=\"p\">,</span> <span class=\"mf\">35.732721</span><span class=\"p\">],</span>\n        <span class=\"mi\">12</span> <span class=\"p\">:</span> <span class=\"p\">[</span> <span class=\"mf\">2.641838</span><span class=\"p\">,</span> <span class=\"mf\">37.029463</span><span class=\"p\">],</span>\n        <span class=\"mi\">13</span> <span class=\"p\">:</span> <span class=\"p\">[</span> <span class=\"mf\">2.641838</span><span class=\"p\">,</span> <span class=\"mf\">37.415937</span><span class=\"p\">],</span>\n        <span class=\"mi\">14</span> <span class=\"p\">:</span> <span class=\"p\">[</span> <span class=\"mf\">2.641838</span><span class=\"p\">,</span> <span class=\"mf\">38.566150</span><span class=\"p\">],</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">zone_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">&#39;1&#39;</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span>\n        <span class=\"s1\">&#39;2&#39;</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span>\n        <span class=\"s1\">&#39;3&#39;</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">],</span>\n        <span class=\"s1\">&#39;4&#39;</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">],</span>\n        <span class=\"s1\">&#39;5&#39;</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">],</span>\n        <span class=\"s1\">&#39;6&#39;</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">],</span>\n        <span class=\"s1\">&#39;North&#39;</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">],</span>\n        <span class=\"s1\">&#39;Core&#39;</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">],</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">zone</span> <span class=\"ow\">in</span> <span class=\"n\">zone_dict</span><span class=\"p\">:</span>\n        <span class=\"n\">point_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"n\">point_dict</span><span class=\"p\">[</span><span class=\"n\">vertex</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">vertex</span> <span class=\"ow\">in</span> <span class=\"n\">zone_dict</span><span class=\"p\">[</span><span class=\"n\">zone</span><span class=\"p\">]</span> <span class=\"p\">]</span>\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Zone </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">zone</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n        <span class=\"n\">path_dict</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span>\n            <span class=\"n\">point_list</span>\n        <span class=\"p\">))</span>\n\n    <span class=\"c1\"># ADD COUNTIES</span>\n    <span class=\"n\">name_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"s1\">&#39;Laikipia&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;Samburu&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;Isiolo&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;Marsabit&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;Meru&#39;</span><span class=\"p\">,</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">county_file_url</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://cthulhu.dyn.wildme.io/public/data/kenyan_counties_boundary_gps_coordinates.zip&#39;</span>\n    <span class=\"n\">unzipped_path</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">grab_zipped_url</span><span class=\"p\">(</span><span class=\"n\">county_file_url</span><span class=\"p\">)</span>\n    <span class=\"n\">county_path</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">unzipped_path</span><span class=\"p\">,</span> <span class=\"s1\">&#39;County&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">counties</span> <span class=\"o\">=</span> <span class=\"n\">shapefile</span><span class=\"o\">.</span><span class=\"n\">Reader</span><span class=\"p\">(</span><span class=\"n\">county_path</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">record</span><span class=\"p\">,</span> <span class=\"n\">shape</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">counties</span><span class=\"o\">.</span><span class=\"n\">records</span><span class=\"p\">(),</span> <span class=\"n\">counties</span><span class=\"o\">.</span><span class=\"n\">shapes</span><span class=\"p\">()):</span>\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">record</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">name_list</span><span class=\"p\">:</span>\n            <span class=\"k\">continue</span>\n        <span class=\"n\">point_list</span> <span class=\"o\">=</span> <span class=\"n\">shape</span><span class=\"o\">.</span><span class=\"n\">points</span>\n        <span class=\"n\">point_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">point</span><span class=\"p\">)[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">point</span> <span class=\"ow\">in</span> <span class=\"n\">point_list</span> <span class=\"p\">]</span>\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;County </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n        <span class=\"n\">path_dict</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span>\n            <span class=\"n\">point_list</span>\n        <span class=\"p\">))</span>\n\n    <span class=\"c1\"># ADD LAND TENURES</span>\n    <span class=\"n\">land_tenure_file_url</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://cthulhu.dyn.wildme.io/public/data/kenyan_land_tenures_boundary_gps_coordinates.zip&#39;</span>\n    <span class=\"n\">unzipped_path</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">grab_zipped_url</span><span class=\"p\">(</span><span class=\"n\">land_tenure_file_url</span><span class=\"p\">)</span>\n    <span class=\"n\">land_tenure_path</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">unzipped_path</span><span class=\"p\">,</span> <span class=\"s1\">&#39;LandTenure&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">land_tenures</span> <span class=\"o\">=</span> <span class=\"n\">shapefile</span><span class=\"o\">.</span><span class=\"n\">Reader</span><span class=\"p\">(</span><span class=\"n\">land_tenure_path</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">record</span><span class=\"p\">,</span> <span class=\"n\">shape</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">land_tenures</span><span class=\"o\">.</span><span class=\"n\">records</span><span class=\"p\">(),</span> <span class=\"n\">land_tenures</span><span class=\"o\">.</span><span class=\"n\">shapes</span><span class=\"p\">()):</span>\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">record</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">continue</span>\n        <span class=\"n\">point_list</span> <span class=\"o\">=</span> <span class=\"n\">shape</span><span class=\"o\">.</span><span class=\"n\">points</span>\n        <span class=\"n\">point_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">point</span><span class=\"p\">)[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">point</span> <span class=\"ow\">in</span> <span class=\"n\">point_list</span> <span class=\"p\">]</span>\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Land Tenure </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n        <span class=\"n\">path_dict</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span>\n            <span class=\"n\">point_list</span>\n        <span class=\"p\">))</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">path_dict</span></div>\n\n\n<div class=\"viewcode-block\" id=\"compute_ggr_imagesets\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.compute_ggr_imagesets\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">compute_ggr_imagesets</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">gid_list</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">min_diff</span><span class=\"o\">=</span><span class=\"mi\">86400</span><span class=\"p\">,</span> <span class=\"n\">individual</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                          <span class=\"n\">purge_all_old</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">purge_all_old</span><span class=\"p\">:</span>\n        <span class=\"n\">imageset_rowid_list_all</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_imgsetids</span><span class=\"p\">()</span>\n        <span class=\"n\">imageset_text_list_all</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_imageset_text</span><span class=\"p\">(</span><span class=\"n\">imageset_rowid_list_all</span><span class=\"p\">)</span>\n        <span class=\"n\">zipped</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">imageset_rowid_list_all</span><span class=\"p\">,</span> <span class=\"n\">imageset_text_list_all</span><span class=\"p\">))</span>\n        <span class=\"n\">imageset_rowid_list_delete</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"n\">imageset_rowid_all</span>\n            <span class=\"k\">for</span> <span class=\"n\">imageset_rowid_all</span><span class=\"p\">,</span> <span class=\"n\">imageset_text_all</span> <span class=\"ow\">in</span> <span class=\"n\">zipped</span>\n            <span class=\"k\">if</span> <span class=\"s1\">&#39;GGR Special&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">imageset_text_all</span>\n        <span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">imageset_rowid_delete</span> <span class=\"ow\">in</span> <span class=\"n\">imageset_rowid_list_delete</span><span class=\"p\">:</span>\n            <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">delete_gsgr_imageset_relations</span><span class=\"p\">(</span><span class=\"n\">imageset_rowid_delete</span><span class=\"p\">)</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">delete_imagesets</span><span class=\"p\">(</span><span class=\"n\">imageset_rowid_list_delete</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># GET DATA</span>\n    <span class=\"n\">path_dict</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">compute_ggr_path_dict</span><span class=\"p\">()</span>\n    <span class=\"n\">zone_list</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">path_dict</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"s1\">&#39;Zone 7&#39;</span><span class=\"p\">]</span>\n    <span class=\"n\">imageset_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"n\">zone</span> <span class=\"p\">:</span> <span class=\"p\">[]</span> <span class=\"k\">for</span> <span class=\"n\">zone</span> <span class=\"ow\">in</span> <span class=\"n\">zone_list</span> <span class=\"p\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">gid_list</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">gid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_gids</span><span class=\"p\">()</span>\n\n    <span class=\"n\">gps_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_gps</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">note_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_notes</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"k\">if</span> <span class=\"n\">individual</span> <span class=\"k\">else</span> <span class=\"o\">-</span><span class=\"mi\">2</span>\n    <span class=\"n\">note_list_</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"s1\">&#39;,&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">note</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;,&#39;</span><span class=\"p\">)[:</span><span class=\"n\">temp</span><span class=\"p\">])</span>\n        <span class=\"k\">for</span> <span class=\"n\">note</span> <span class=\"ow\">in</span> <span class=\"n\">note_list</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">note_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"s1\">&#39;,&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">note</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;,&#39;</span><span class=\"p\">)[:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n        <span class=\"k\">for</span> <span class=\"n\">note</span> <span class=\"ow\">in</span> <span class=\"n\">note_list</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"n\">special_zone_map</span> <span class=\"o\">=</span> <span class=\"p\">{</span>  <span class=\"c1\"># NOQA</span>\n        <span class=\"s1\">&#39;GGR,3,A&#39;</span>   <span class=\"p\">:</span> <span class=\"s1\">&#39;Zone 1,County Laikipia,Zone Core&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;GGR,8,A&#39;</span>   <span class=\"p\">:</span> <span class=\"s1\">&#39;Zone 3,County Isiolo,Zone Core&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;GGR,10,A&#39;</span>  <span class=\"p\">:</span> <span class=\"s1\">&#39;Zone 1,County Laikipia,Zone Core&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;GGR,13,A&#39;</span>  <span class=\"p\">:</span> <span class=\"s1\">&#39;Zone 1,County Laikipia,Zone Core&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;GGR,14,A&#39;</span>  <span class=\"p\">:</span> <span class=\"s1\">&#39;Zone 1,County Laikipia,Zone Core&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;GGR,15,A&#39;</span>  <span class=\"p\">:</span> <span class=\"s1\">&#39;Zone 1,County Laikipia,Zone Core&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;GGR,19,A&#39;</span>  <span class=\"p\">:</span> <span class=\"s1\">&#39;Zone 2,County Samburu,Zone Core&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;GGR,23,A&#39;</span>  <span class=\"p\">:</span> <span class=\"s1\">&#39;Zone 1,County Laikipia,Zone Core&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;GGR,24,A&#39;</span>  <span class=\"p\">:</span> <span class=\"s1\">&#39;Zone 1,County Laikipia,Zone Core&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;GGR,25,A&#39;</span>  <span class=\"p\">:</span> <span class=\"s1\">&#39;Zone 1,County Laikipia,Zone Core&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;GGR,27,A&#39;</span>  <span class=\"p\">:</span> <span class=\"s1\">&#39;Zone 1,County Laikipia,Zone Core&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;GGR,29,A&#39;</span>  <span class=\"p\">:</span> <span class=\"s1\">&#39;Zone 1,County Laikipia,Zone Core&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;GGR,37,A&#39;</span>  <span class=\"p\">:</span> <span class=\"s1\">&#39;Zone 1,County Laikipia,Zone Core&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;GGR,37,B&#39;</span>  <span class=\"p\">:</span> <span class=\"s1\">&#39;Zone 1,County Laikipia,Zone Core&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;GGR,38,C&#39;</span>  <span class=\"p\">:</span> <span class=\"s1\">&#39;Zone 1,County Laikipia,Zone Core&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;GGR,40,A&#39;</span>  <span class=\"p\">:</span> <span class=\"s1\">&#39;Zone 1,County Laikipia,Zone Core&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;GGR,41,B&#39;</span>  <span class=\"p\">:</span> <span class=\"s1\">&#39;Zone 1,County Laikipia,Zone Core&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;GGR,44,A&#39;</span>  <span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;GGR,45,A&#39;</span>  <span class=\"p\">:</span> <span class=\"s1\">&#39;Zone 2,County Isiolo,Zone Core&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;GGR,46,A&#39;</span>  <span class=\"p\">:</span> <span class=\"s1\">&#39;Zone 1,County Laikipia,Zone Core&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;GGR,62,B&#39;</span>  <span class=\"p\">:</span> <span class=\"s1\">&#39;Zone 1,County Laikipia,Zone Core&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;GGR,86,A&#39;</span>  <span class=\"p\">:</span> <span class=\"s1\">&#39;Zone 3,County Isiolo,Zone Core&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;GGR,96,A&#39;</span>  <span class=\"p\">:</span> <span class=\"s1\">&#39;Zone 1,County Laikipia,Zone Core&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;GGR,97,B&#39;</span>  <span class=\"p\">:</span> <span class=\"s1\">&#39;Zone 2,County Samburu,Zone Core&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;GGR,108,A&#39;</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;Zone 1,County Laikipia,Zone Core&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;GGR,118,C&#39;</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;Zone 6,Zone North,County Marsabit,Zone Core&#39;</span><span class=\"p\">,</span>\n\n        <span class=\"s1\">&#39;GGR2,8,D&#39;</span>   <span class=\"p\">:</span> <span class=\"s1\">&#39;Zone 1,County Laikipia,Zone Core,Land Tenure Mpala&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;GGR2,39,A&#39;</span>  <span class=\"p\">:</span> <span class=\"s1\">&#39;Zone 1,County Laikipia,Zone Core,Land Tenure Colcheccio - Franscombe&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;GGR2,40,A&#39;</span>  <span class=\"p\">:</span> <span class=\"s1\">&#39;Zone 2,County Samburu,Zone Core,Land Tenure Kalama&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;GGR2,54,B&#39;</span>  <span class=\"p\">:</span> <span class=\"s1\">&#39;Zone 3,County Isiolo,Zone Core,Land Tenure Nasuulu&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;GGR2,92,D&#39;</span>  <span class=\"p\">:</span> <span class=\"s1\">&#39;Zone 2,County Samburu,Zone Core,Land Tenure Westgate&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;GGR2,94,C&#39;</span>  <span class=\"p\">:</span> <span class=\"s1\">&#39;Zone 1,County Laikipia,Zone Core,Land Tenure Mukogodo&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;GGR2,103,A&#39;</span> <span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;GGR2,106,A&#39;</span> <span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;GGR2,107,A&#39;</span> <span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;GGR2,107,B&#39;</span> <span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;GGR2,126,B&#39;</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;Zone 1,County Laikipia,Zone Core&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;GGR2,126,C&#39;</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;Zone 1,County Laikipia,Zone Core&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;GGR2,137,B&#39;</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;Zone 2,County Samburu,Zone Core,Land Tenure Sera&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;GGR2,160,E&#39;</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;Zone 1,County Laikipia,Zone Core,Land Tenure Mpala&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;GGR2,192,A&#39;</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;County Laikipia,Zone Core,Land Tenure Melako&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;GGR2,200,B&#39;</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;Zone 1,County Laikipia,Zone Core,Land Tenure Mpala&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;GGR2,200,F&#39;</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;Zone 1,County Laikipia,Zone Core,Land Tenure Mpala&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;GGR2,201,E&#39;</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;Zone 1,County Laikipia,Zone Core,Land Tenure Mpala&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;GGR2,201,F&#39;</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;Zone 1,County Laikipia,Zone Core,Land Tenure Mpala&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;GGR2,210,A&#39;</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;Zone 1,County Laikipia,Zone Core,Land Tenure Mugie&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;GGR2,220,A&#39;</span> <span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;GGR2,222,B&#39;</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;Zone 1,County Laikipia,Zone Core,Land Tenure Ol Jogi&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;GGR2,224,A&#39;</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;Zone 1,County Laikipia,Zone Core,Land Tenure Mpala&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;GGR2,224,B&#39;</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;Zone 1,County Laikipia,Zone Core,Land Tenure Mpala&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;GGR2,225,A&#39;</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;Zone 1,County Laikipia,Zone Core,Land Tenure Ol Jogi&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;GGR2,230,A&#39;</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;Zone 1,County Laikipia,Zone Core,Land Tenure Elkarama&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;GGR2,230,C&#39;</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;Zone 1,County Laikipia,Zone Core,Land Tenure Elkarama&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;GGR2,231,B&#39;</span> <span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;GGR2,232,B&#39;</span> <span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">skipped_gid_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">skipped_note_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">skipped</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"n\">zipped</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">,</span> <span class=\"n\">gps_list</span><span class=\"p\">)))</span>\n    <span class=\"k\">for</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">gid</span><span class=\"p\">,</span> <span class=\"n\">point</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ProgIter</span><span class=\"p\">(</span><span class=\"n\">zipped</span><span class=\"p\">,</span> <span class=\"n\">lbl</span><span class=\"o\">=</span><span class=\"s1\">&#39;assigning zones&#39;</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">point</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n            <span class=\"n\">unixtime</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_unixtime</span><span class=\"p\">(</span><span class=\"n\">gid</span><span class=\"p\">)</span>\n            <span class=\"n\">note</span> <span class=\"o\">=</span> <span class=\"n\">note_list_</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span>\n\n            <span class=\"c1\"># Find siblings in the same car</span>\n            <span class=\"n\">sibling_gid_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">for</span> <span class=\"n\">gid_</span><span class=\"p\">,</span> <span class=\"n\">note_</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">,</span> <span class=\"n\">note_list_</span><span class=\"p\">):</span>\n                <span class=\"k\">if</span> <span class=\"n\">note_</span> <span class=\"o\">==</span> <span class=\"n\">note</span><span class=\"p\">:</span>\n                    <span class=\"n\">sibling_gid_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">gid_</span><span class=\"p\">)</span>\n\n            <span class=\"c1\"># Get valid GPS</span>\n            <span class=\"n\">gps_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_gps</span><span class=\"p\">(</span><span class=\"n\">sibling_gid_list</span><span class=\"p\">)</span>\n            <span class=\"n\">flag_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"n\">gps</span> <span class=\"o\">!=</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">gps</span> <span class=\"ow\">in</span> <span class=\"n\">gps_list</span> <span class=\"p\">]</span>\n            <span class=\"n\">gid_list_</span>  <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">sibling_gid_list</span><span class=\"p\">,</span> <span class=\"n\">flag_list</span><span class=\"p\">)</span>\n\n            <span class=\"c1\"># If found, get closest image</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">gid_list_</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"n\">gps_list_</span>  <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_gps</span><span class=\"p\">(</span><span class=\"n\">gid_list_</span><span class=\"p\">)</span>\n                <span class=\"n\">unixtime_list_</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_unixtime</span><span class=\"p\">(</span><span class=\"n\">gid_list_</span><span class=\"p\">)</span>\n                <span class=\"c1\"># Find closest</span>\n                <span class=\"n\">closest_diff</span><span class=\"p\">,</span> <span class=\"n\">closest_gps</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">inf</span><span class=\"p\">,</span> <span class=\"kc\">None</span>\n                <span class=\"k\">for</span> <span class=\"n\">unixtime_</span><span class=\"p\">,</span> <span class=\"n\">gps_</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">unixtime_list_</span><span class=\"p\">,</span> <span class=\"n\">gps_list_</span><span class=\"p\">):</span>\n                    <span class=\"n\">diff</span> <span class=\"o\">=</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">unixtime</span> <span class=\"o\">-</span> <span class=\"n\">unixtime_</span><span class=\"p\">)</span>\n                    <span class=\"k\">if</span> <span class=\"n\">diff</span> <span class=\"o\">&lt;</span> <span class=\"n\">closest_diff</span> <span class=\"ow\">and</span> <span class=\"n\">gps_</span> <span class=\"o\">!=</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n                        <span class=\"n\">closest_diff</span> <span class=\"o\">=</span> <span class=\"n\">diff</span>\n                        <span class=\"n\">closest_gps</span> <span class=\"o\">=</span> <span class=\"n\">gps_</span>\n                <span class=\"c1\"># Assign closest</span>\n                <span class=\"k\">if</span> <span class=\"n\">closest_gps</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">closest_diff</span> <span class=\"o\">&lt;=</span> <span class=\"n\">min_diff</span><span class=\"p\">:</span>\n                    <span class=\"n\">point</span> <span class=\"o\">=</span> <span class=\"n\">closest_gps</span>\n\n        <span class=\"c1\"># if point == (-1, -1):</span>\n        <span class=\"c1\">#     note = note_list[index]</span>\n        <span class=\"c1\">#     if note in special_zone_map:</span>\n        <span class=\"c1\">#         zone_str = special_zone_map[note]</span>\n        <span class=\"c1\">#         if zone_str is not None:</span>\n        <span class=\"c1\">#             zone_list = zone_str.strip().split(&#39;,&#39;)</span>\n        <span class=\"c1\">#             for zone in zone_list:</span>\n        <span class=\"c1\">#                 imageset_dict[zone].append(gid)</span>\n        <span class=\"c1\">#             continue</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">point</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n            <span class=\"n\">skipped_gid_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">gid</span><span class=\"p\">)</span>\n            <span class=\"n\">skipped_note_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">note</span><span class=\"p\">)</span>\n            <span class=\"n\">skipped</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n            <span class=\"k\">continue</span>\n\n        <span class=\"n\">found</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"k\">for</span> <span class=\"n\">zone</span> <span class=\"ow\">in</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">path_dict</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()):</span>\n            <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">path_dict</span><span class=\"p\">[</span><span class=\"n\">zone</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">contains_point</span><span class=\"p\">(</span><span class=\"n\">point</span><span class=\"p\">):</span>\n                <span class=\"n\">found</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>  <span class=\"c1\"># NOQA</span>\n                <span class=\"n\">imageset_dict</span><span class=\"p\">[</span><span class=\"n\">zone</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">gid</span><span class=\"p\">)</span>\n        <span class=\"c1\"># if not found:</span>\n        <span class=\"c1\">#     imageset_dict[&#39;Zone 7&#39;].append(gid)</span>\n\n    <span class=\"n\">imageset_id_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">zone</span><span class=\"p\">,</span> <span class=\"n\">gid_list</span> <span class=\"ow\">in</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">imageset_dict</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()):</span>\n        <span class=\"n\">imageset_str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;GGR Special Zone - </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">zone</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n        <span class=\"n\">imageset_id</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">add_imagesets</span><span class=\"p\">(</span><span class=\"n\">imageset_str</span><span class=\"p\">)</span>\n        <span class=\"n\">imageset_id_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">imageset_id</span><span class=\"p\">)</span>\n        <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">imageset_str</span><span class=\"p\">,</span> <span class=\"n\">imageset_id</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">),</span> <span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Creating new GGR imageset: </span><span class=\"si\">%r</span><span class=\"s1\"> (ID </span><span class=\"si\">%d</span><span class=\"s1\">) with </span><span class=\"si\">%d</span><span class=\"s1\"> images&#39;</span> <span class=\"o\">%</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">delete_gsgr_imageset_relations</span><span class=\"p\">(</span><span class=\"n\">imageset_id</span><span class=\"p\">)</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_image_imgsetids</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">imageset_id</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">))</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;SKIPPED </span><span class=\"si\">%d</span><span class=\"s1\"> IMAGES&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">skipped</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n    <span class=\"n\">skipped_note_list</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">skipped_note_list</span><span class=\"p\">)))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;skipped_note_list = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">skipped_note_list</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;skipped_gid_list = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">skipped_gid_list</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">imageset_id_list</span><span class=\"p\">,</span> <span class=\"n\">skipped_note_list</span><span class=\"p\">,</span> <span class=\"n\">skipped_gid_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"compute_ggr_fix_gps_names\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.compute_ggr_fix_gps_names\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">compute_ggr_fix_gps_names</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">min_diff</span><span class=\"o\">=</span><span class=\"mi\">1800</span><span class=\"p\">):</span>  <span class=\"c1\"># 86,400 = 60 sec x 60 min X 24 hours</span>\n    <span class=\"c1\"># Get all aids</span>\n    <span class=\"n\">aid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_aids</span><span class=\"p\">()</span>\n    <span class=\"n\">num_all</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">gps_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_image_gps</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">flag_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"n\">gps</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">gps</span> <span class=\"ow\">in</span> <span class=\"n\">gps_list</span> <span class=\"p\">]</span>\n    <span class=\"c1\"># Get bad GPS aids</span>\n    <span class=\"n\">aid_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">filter_items</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">flag_list</span><span class=\"p\">)</span>\n    <span class=\"n\">num_bad</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">nid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_name_rowids</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">flag_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"n\">nid</span> <span class=\"o\">!=</span> <span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">UNKNOWN_NAME_ROWID</span> <span class=\"k\">for</span> <span class=\"n\">nid</span> <span class=\"ow\">in</span> <span class=\"n\">nid_list</span> <span class=\"p\">]</span>\n    <span class=\"c1\"># Get KNOWN and bad GPS aids</span>\n    <span class=\"n\">aid_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">filter_items</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">flag_list</span><span class=\"p\">)</span>\n    <span class=\"n\">num_known</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Find close GPS</span>\n    <span class=\"n\">num_found</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"n\">recovered_aid_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">recovered_gps_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">recovered_dist_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">aid</span> <span class=\"ow\">in</span> <span class=\"n\">aid_list</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Get annotation information</span>\n        <span class=\"n\">unixtime</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_image_unixtimes</span><span class=\"p\">(</span><span class=\"n\">aid</span><span class=\"p\">)</span>\n        <span class=\"n\">nid</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_name_rowids</span><span class=\"p\">(</span><span class=\"n\">aid</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Get other sightings</span>\n        <span class=\"n\">aid_list_</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_name_aids</span><span class=\"p\">(</span><span class=\"n\">nid</span><span class=\"p\">)</span>\n        <span class=\"n\">aid_list_</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">aid</span><span class=\"p\">)</span>\n        <span class=\"n\">unixtime_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_image_unixtimes</span><span class=\"p\">(</span><span class=\"n\">aid_list_</span><span class=\"p\">)</span>\n        <span class=\"n\">gps_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_image_gps</span><span class=\"p\">(</span><span class=\"n\">aid_list_</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Find closest</span>\n        <span class=\"n\">closest_diff</span><span class=\"p\">,</span> <span class=\"n\">closest_gps</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">inf</span><span class=\"p\">,</span> <span class=\"kc\">None</span>\n        <span class=\"k\">for</span> <span class=\"n\">unixtime_</span><span class=\"p\">,</span> <span class=\"n\">gps_</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">unixtime_list</span><span class=\"p\">,</span> <span class=\"n\">gps_list</span><span class=\"p\">):</span>\n            <span class=\"n\">diff</span> <span class=\"o\">=</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">unixtime</span> <span class=\"o\">-</span> <span class=\"n\">unixtime_</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">diff</span> <span class=\"o\">&lt;</span> <span class=\"n\">closest_diff</span> <span class=\"ow\">and</span> <span class=\"n\">gps_</span> <span class=\"o\">!=</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n                <span class=\"n\">closest_diff</span> <span class=\"o\">=</span> <span class=\"n\">diff</span>\n                <span class=\"n\">closest_gps</span> <span class=\"o\">=</span> <span class=\"n\">gps_</span>\n        <span class=\"c1\"># Assign closest</span>\n        <span class=\"k\">if</span> <span class=\"n\">closest_gps</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">closest_diff</span> <span class=\"o\">&lt;=</span> <span class=\"n\">min_diff</span><span class=\"p\">:</span>\n            <span class=\"n\">recovered_aid_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">aid</span><span class=\"p\">)</span>\n            <span class=\"n\">recovered_gps_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">closest_gps</span><span class=\"p\">)</span>\n            <span class=\"n\">recovered_dist_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">closest_diff</span><span class=\"p\">)</span>\n            <span class=\"n\">num_found</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n            <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"n\">closest_diff</span> <span class=\"o\">//</span> <span class=\"mi\">3600</span>\n            <span class=\"n\">closest_diff</span> <span class=\"o\">%=</span> <span class=\"mi\">3600</span>\n            <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">closest_diff</span> <span class=\"o\">//</span> <span class=\"mi\">60</span>\n            <span class=\"n\">closest_diff</span> <span class=\"o\">%=</span> <span class=\"mi\">60</span>\n            <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">closest_diff</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;FOUND LOCATION FOR AID </span><span class=\"si\">%d</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">aid</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\t</span><span class=\"s1\">DIFF   : </span><span class=\"si\">%d</span><span class=\"s1\"> H, </span><span class=\"si\">%d</span><span class=\"s1\"> M, </span><span class=\"si\">%d</span><span class=\"s1\"> S&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\t</span><span class=\"s1\">NEW GPS: </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">closest_gps</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"si\">%d</span><span class=\"s1\"> \\ </span><span class=\"si\">%d</span><span class=\"s1\"> \\ </span><span class=\"si\">%d</span><span class=\"s1\"> \\ </span><span class=\"si\">%d</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">num_all</span><span class=\"p\">,</span> <span class=\"n\">num_bad</span><span class=\"p\">,</span> <span class=\"n\">num_known</span><span class=\"p\">,</span> <span class=\"n\">num_found</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">recovered_aid_list</span><span class=\"p\">,</span> <span class=\"n\">recovered_gps_list</span><span class=\"p\">,</span> <span class=\"n\">recovered_dist_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"parse_ggr_name\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.parse_ggr_name\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">parse_ggr_name</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">imageset_text</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">allow_short</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">require_short</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"n\">imageset_text</span> <span class=\"o\">=</span> <span class=\"n\">imageset_text</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">verbose</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Processing </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">imageset_text</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n\n    <span class=\"n\">imageset_text_</span> <span class=\"o\">=</span> <span class=\"n\">imageset_text</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;,&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"n\">valid_lengths</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n    <span class=\"k\">if</span> <span class=\"n\">allow_short</span><span class=\"p\">:</span>\n        <span class=\"n\">valid_lengths</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">require_short</span><span class=\"p\">:</span>\n        <span class=\"n\">valid_lengths</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">imageset_text_</span><span class=\"p\">)</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">valid_lengths</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">dataset</span><span class=\"p\">,</span> <span class=\"n\">number</span><span class=\"p\">,</span> <span class=\"n\">letter</span> <span class=\"o\">=</span> <span class=\"n\">imageset_text_</span>\n    <span class=\"k\">except</span><span class=\"p\">:</span>\n        <span class=\"k\">assert</span> <span class=\"n\">allow_short</span> <span class=\"ow\">or</span> <span class=\"n\">require_short</span>\n        <span class=\"n\">dataset</span><span class=\"p\">,</span> <span class=\"n\">number</span> <span class=\"o\">=</span> <span class=\"n\">imageset_text_</span>\n        <span class=\"n\">letter</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">dataset</span> <span class=\"o\">!=</span> <span class=\"s1\">&#39;GGR2&#39;</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n    <span class=\"n\">number</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">letter</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;C&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;D&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;E&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;F&#39;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]:</span>\n        <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">verbose</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\t</span><span class=\"s1\">Dataset: </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">dataset</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\t</span><span class=\"s1\">Letter : </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">letter</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\t</span><span class=\"s1\">Number : </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">dataset</span><span class=\"p\">,</span> <span class=\"n\">letter</span><span class=\"p\">,</span> <span class=\"n\">number</span></div>\n\n\n<div class=\"viewcode-block\" id=\"search_ggr_qr_codes_worker\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.search_ggr_qr_codes_worker\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">search_ggr_qr_codes_worker</span><span class=\"p\">(</span><span class=\"n\">imageset_rowid</span><span class=\"p\">,</span> <span class=\"n\">imageset_text</span><span class=\"p\">,</span> <span class=\"n\">values</span><span class=\"p\">,</span> <span class=\"n\">gid_list</span><span class=\"p\">,</span> <span class=\"n\">filepath_list</span><span class=\"p\">,</span> <span class=\"n\">note_list</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"p\">):</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">pyzbar.pyzbar</span> <span class=\"k\">as</span> <span class=\"nn\">pyzbar</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">cv2</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">values</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">imageset_text</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">values</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span>\n    <span class=\"n\">dataset</span><span class=\"p\">,</span> <span class=\"n\">letter</span><span class=\"p\">,</span> <span class=\"n\">number</span> <span class=\"o\">=</span> <span class=\"n\">values</span>\n\n    <span class=\"n\">ret_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">match</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n    <span class=\"k\">for</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">gid</span><span class=\"p\">,</span> <span class=\"n\">filepath</span><span class=\"p\">,</span> <span class=\"n\">note</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">,</span> <span class=\"n\">filepath_list</span><span class=\"p\">,</span> <span class=\"n\">note_list</span><span class=\"p\">)):</span>\n        <span class=\"k\">if</span> <span class=\"n\">timeout</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">index</span> <span class=\"o\">&gt;</span> <span class=\"n\">timeout</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\t</span><span class=\"s1\">Timeout exceeded&#39;</span><span class=\"p\">)</span>\n            <span class=\"k\">break</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">match</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\t</span><span class=\"s1\">Match was found&#39;</span><span class=\"p\">)</span>\n            <span class=\"k\">break</span>\n\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\t</span><span class=\"s1\">Processing </span><span class=\"si\">%r</span><span class=\"s1\"> (</span><span class=\"si\">%s</span><span class=\"s1\">)&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">filepath</span><span class=\"p\">,</span> <span class=\"n\">note</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n\n        <span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">imread</span><span class=\"p\">(</span><span class=\"n\">filepath</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"n\">qr_list</span> <span class=\"o\">=</span> <span class=\"n\">pyzbar</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">pyzbar</span><span class=\"o\">.</span><span class=\"n\">ZBarSymbol</span><span class=\"o\">.</span><span class=\"n\">QRCODE</span><span class=\"p\">])</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">qr_list</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\t\\t</span><span class=\"s1\">Found...&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">qr</span> <span class=\"o\">=</span> <span class=\"n\">qr_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">qr</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s1\">&#39;utf-8&#39;</span><span class=\"p\">)</span>\n\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;/&#39;</span><span class=\"p\">)[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">(</span><span class=\"s1\">&#39;?&#39;</span><span class=\"p\">)</span>\n                <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;&amp;&#39;</span><span class=\"p\">)</span>\n                <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\t\\t</span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n\n                <span class=\"k\">assert</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;car=</span><span class=\"si\">%d</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n                <span class=\"k\">assert</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;event=ggr2018&#39;</span>\n                <span class=\"k\">assert</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;person=</span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">letter</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">(),</span> <span class=\"p\">)</span>\n\n                <span class=\"n\">match</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\t\\t</span><span class=\"s1\">Passed!&#39;</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span><span class=\"p\">:</span>\n                <span class=\"k\">pass</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\t\\t</span><span class=\"s1\">Failed!&#39;</span><span class=\"p\">)</span>\n\n            <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">imageset_text</span><span class=\"p\">,</span> <span class=\"n\">gid</span><span class=\"p\">,</span> <span class=\"n\">match</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n            <span class=\"n\">ret_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">imageset_rowid</span><span class=\"p\">,</span> <span class=\"n\">ret_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"search_ggr_qr_codes\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.search_ggr_qr_codes\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">search_ggr_qr_codes</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">imageset_rowid_list</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Search for QR codes in each imageset.</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (IBEISController):  ibeis controller object</span>\n<span class=\"sd\">        imageset_rowid_list (list):  imageset rowid list</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs search_ggr_qr_codes</span>\n\n<span class=\"sd\">    Reference:</span>\n<span class=\"sd\">        https://www.learnopencv.com/barcode-and-qr-code-scanner-using-zbar-and-opencv/</span>\n\n<span class=\"sd\">        macOS:</span>\n<span class=\"sd\">            brew install zbar</span>\n\n<span class=\"sd\">            or</span>\n\n<span class=\"sd\">            curl -O https://ayera.dl.sourceforge.net/project/zbar/zbar/0.10/zbar-0.10.tar.bz2</span>\n<span class=\"sd\">            tar -xvjf zbar-0.10.tar.bz2</span>\n<span class=\"sd\">            cd zbar-0.10/</span>\n<span class=\"sd\">            CPPFLAGS=&quot;-I/opt/local/include&quot; LDFLAGS=&quot;-L/opt/local/lib&quot; ./configure --disable-video --without-qt --without-python --without-gtk --with-libiconv-prefix=/opt/local --with-jpeg=yes --prefix=$VIRTUAL_ENV</span>\n<span class=\"sd\">            make</span>\n<span class=\"sd\">            make install</span>\n<span class=\"sd\">            sudo ln $VIRTUAL_ENV/lib/libzbar.dylib /opt/local/lib/libzbar.dylib</span>\n<span class=\"sd\">            sudo ln $VIRTUAL_ENV/include/zbar.h /opt/local/include/zbar.h</span>\n\n<span class=\"sd\">        Ubuntu:</span>\n<span class=\"sd\">            sudo apt-get install libzbar-dev libzbar0</span>\n\n<span class=\"sd\">        pip install pyzbar</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; default_dbdir = join(&#39;/&#39;, &#39;data&#39;, &#39;ibeis&#39;, &#39;GGR2-IBEIS&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; dbdir = ut.get_argval(&#39;--dbdir&#39;, type_=str, default=default_dbdir)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(dbdir=dbdir)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs.search_ggr_qr_codes()</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">imageset_rowid_list</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">delete_empty_imgsetids</span><span class=\"p\">()</span>\n        <span class=\"n\">imageset_rowid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_imgsetids</span><span class=\"p\">(</span><span class=\"n\">is_special</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n    <span class=\"n\">imageset_text_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_imageset_text</span><span class=\"p\">(</span><span class=\"n\">imageset_rowid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">values_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">parse_ggr_name</span><span class=\"p\">(</span><span class=\"n\">imageset_text</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">imageset_text</span> <span class=\"ow\">in</span> <span class=\"n\">imageset_text_list</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">gids_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_imageset_gids</span><span class=\"p\">(</span><span class=\"n\">imageset_rowid</span><span class=\"p\">))</span>\n        <span class=\"k\">for</span> <span class=\"n\">imageset_rowid</span> <span class=\"ow\">in</span> <span class=\"n\">imageset_rowid_list</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">filepaths_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_paths</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">gid_list</span> <span class=\"ow\">in</span> <span class=\"n\">gids_list</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">notes_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_notes</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">gid_list</span> <span class=\"ow\">in</span> <span class=\"n\">gids_list</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">timeouts_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">timeout</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">imageset_rowid_list</span><span class=\"p\">)</span>\n\n    <span class=\"n\">arg_iter</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span>\n        <span class=\"n\">imageset_rowid_list</span><span class=\"p\">,</span>\n        <span class=\"n\">imageset_text_list</span><span class=\"p\">,</span>\n        <span class=\"n\">values_list</span><span class=\"p\">,</span>\n        <span class=\"n\">gids_list</span><span class=\"p\">,</span>\n        <span class=\"n\">filepaths_list</span><span class=\"p\">,</span>\n        <span class=\"n\">notes_list</span><span class=\"p\">,</span>\n        <span class=\"n\">timeouts_list</span>\n    <span class=\"p\">))</span>\n    <span class=\"n\">result_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">util_parallel</span><span class=\"o\">.</span><span class=\"n\">generate2</span><span class=\"p\">(</span><span class=\"n\">search_ggr_qr_codes_worker</span><span class=\"p\">,</span> <span class=\"n\">arg_iter</span><span class=\"p\">)</span>\n    <span class=\"n\">result_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">result_list</span><span class=\"p\">)</span>\n\n    <span class=\"n\">imageset_dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"k\">for</span> <span class=\"n\">imageset_rowid</span><span class=\"p\">,</span> <span class=\"n\">qr_list</span> <span class=\"ow\">in</span> <span class=\"n\">result_list</span><span class=\"p\">:</span>\n        <span class=\"n\">imageset_dict</span><span class=\"p\">[</span><span class=\"n\">imageset_rowid</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">qr_list</span>\n\n    <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">imageset_dict</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()))</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">imageset_rowid_list</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">imageset_dict</span></div>\n\n\n<div class=\"viewcode-block\" id=\"fix_ggr_rq_codes\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.fix_ggr_rq_codes\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">fix_ggr_rq_codes</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">imageset_qr_dict</span><span class=\"p\">):</span>\n\n    <span class=\"n\">qr_fix_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">&#39;5B&#39;</span>   <span class=\"p\">:</span> <span class=\"mi\">1179</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;6A&#39;</span>   <span class=\"p\">:</span> <span class=\"mi\">1359</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;8B&#39;</span>   <span class=\"p\">:</span> <span class=\"mi\">2886</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;8C&#39;</span>   <span class=\"p\">:</span> <span class=\"mi\">3072</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;8D&#39;</span>   <span class=\"p\">:</span> <span class=\"mi\">3843</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;9A&#39;</span>   <span class=\"p\">:</span> <span class=\"mi\">4128</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;14B&#39;</span>  <span class=\"p\">:</span> <span class=\"mi\">4599</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;21A&#39;</span>  <span class=\"p\">:</span> <span class=\"mi\">5027</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;21B&#39;</span>  <span class=\"p\">:</span> <span class=\"mi\">5228</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;25A&#39;</span>  <span class=\"p\">:</span> <span class=\"mi\">6291</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;26A&#39;</span>  <span class=\"p\">:</span> <span class=\"mi\">6467</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;26B&#39;</span>  <span class=\"p\">:</span> <span class=\"mi\">6655</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;27B&#39;</span>  <span class=\"p\">:</span> <span class=\"mi\">8587</span><span class=\"p\">,</span>  <span class=\"c1\"># Three separate GPS records, using most prevalent</span>\n        <span class=\"s1\">&#39;33B&#39;</span>  <span class=\"p\">:</span> <span class=\"mi\">10168</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;40A&#39;</span>  <span class=\"p\">:</span> <span class=\"mi\">11189</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;42A&#39;</span>  <span class=\"p\">:</span> <span class=\"mi\">13350</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;45B&#39;</span>  <span class=\"p\">:</span> <span class=\"mi\">14338</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;45D&#39;</span>  <span class=\"p\">:</span> <span class=\"mi\">14670</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;45E&#39;</span>  <span class=\"p\">:</span> <span class=\"mi\">15217</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;49A&#39;</span>  <span class=\"p\">:</span> <span class=\"mi\">16483</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;54A&#39;</span>  <span class=\"p\">:</span> <span class=\"mi\">16815</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;54B&#39;</span>  <span class=\"p\">:</span> <span class=\"mi\">18018</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;56A&#39;</span>  <span class=\"p\">:</span> <span class=\"mi\">18204</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;59A&#39;</span>  <span class=\"p\">:</span> <span class=\"mi\">18369</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;63B&#39;</span>  <span class=\"p\">:</span> <span class=\"mi\">19465</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;76A&#39;</span>  <span class=\"p\">:</span> <span class=\"mi\">21858</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;76B&#39;</span>  <span class=\"p\">:</span> <span class=\"mi\">22233</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;76C&#39;</span>  <span class=\"p\">:</span> <span class=\"mi\">22410</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;78A&#39;</span>  <span class=\"p\">:</span> <span class=\"mi\">22734</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;82D&#39;</span>  <span class=\"p\">:</span> <span class=\"mi\">24683</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;85B&#39;</span>  <span class=\"p\">:</span> <span class=\"mi\">25746</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;87A&#39;</span>  <span class=\"p\">:</span> <span class=\"mi\">26274</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;90A&#39;</span>  <span class=\"p\">:</span> <span class=\"mi\">27221</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;91A&#39;</span>  <span class=\"p\">:</span> <span class=\"mi\">27287</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;92C&#39;</span>  <span class=\"p\">:</span> <span class=\"mi\">28700</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;92D&#39;</span>  <span class=\"p\">:</span> <span class=\"mi\">29216</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;94A&#39;</span>  <span class=\"p\">:</span> <span class=\"mi\">29632</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;94B&#39;</span>  <span class=\"p\">:</span> <span class=\"mi\">30659</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;95A&#39;</span>  <span class=\"p\">:</span> <span class=\"mi\">31961</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;100A&#39;</span> <span class=\"p\">:</span> <span class=\"mi\">32224</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;100B&#39;</span> <span class=\"p\">:</span> <span class=\"mi\">32615</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;100C&#39;</span> <span class=\"p\">:</span> <span class=\"mi\">33034</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;100E&#39;</span> <span class=\"p\">:</span> <span class=\"mi\">33688</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;108B&#39;</span> <span class=\"p\">:</span> <span class=\"mi\">34524</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;114A&#39;</span> <span class=\"p\">:</span> <span class=\"mi\">34963</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;115A&#39;</span> <span class=\"p\">:</span> <span class=\"mi\">34969</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;116A&#39;</span> <span class=\"p\">:</span> <span class=\"mi\">35569</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;122A&#39;</span> <span class=\"p\">:</span> <span class=\"mi\">35737</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;122B&#39;</span> <span class=\"p\">:</span> <span class=\"mi\">36134</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;126B&#39;</span> <span class=\"p\">:</span> <span class=\"mi\">37333</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;126D&#39;</span> <span class=\"p\">:</span> <span class=\"mi\">37791</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;130A&#39;</span> <span class=\"p\">:</span> <span class=\"mi\">37877</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;133A&#39;</span> <span class=\"p\">:</span> <span class=\"mi\">38113</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;136A&#39;</span> <span class=\"p\">:</span> <span class=\"mi\">38184</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;136B&#39;</span> <span class=\"p\">:</span> <span class=\"mi\">38462</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;137A&#39;</span> <span class=\"p\">:</span> <span class=\"mi\">38548</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;137B&#39;</span> <span class=\"p\">:</span> <span class=\"mi\">38559</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;137C&#39;</span> <span class=\"p\">:</span> <span class=\"mi\">38831</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;138A&#39;</span> <span class=\"p\">:</span> <span class=\"mi\">38919</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;138B&#39;</span> <span class=\"p\">:</span> <span class=\"mi\">39124</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;149A&#39;</span> <span class=\"p\">:</span> <span class=\"mi\">41079</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;155A&#39;</span> <span class=\"p\">:</span> <span class=\"mi\">41886</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;159A&#39;</span> <span class=\"p\">:</span> <span class=\"mi\">43129</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;160E&#39;</span> <span class=\"p\">:</span> <span class=\"mi\">46284</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;160F&#39;</span> <span class=\"p\">:</span> <span class=\"mi\">46823</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;163B&#39;</span> <span class=\"p\">:</span> <span class=\"mi\">49228</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;163C&#39;</span> <span class=\"p\">:</span> <span class=\"mi\">49544</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;164A&#39;</span> <span class=\"p\">:</span> <span class=\"mi\">49730</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;169C&#39;</span> <span class=\"p\">:</span> <span class=\"mi\">50387</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;189A&#39;</span> <span class=\"p\">:</span> <span class=\"mi\">50961</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;190A&#39;</span> <span class=\"p\">:</span> <span class=\"mi\">51382</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;191A&#39;</span> <span class=\"p\">:</span> <span class=\"mi\">51626</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;192A&#39;</span> <span class=\"p\">:</span> <span class=\"mi\">51843</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;201E&#39;</span> <span class=\"p\">:</span> <span class=\"mi\">52494</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;202B&#39;</span> <span class=\"p\">:</span> <span class=\"mi\">52525</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;222A&#39;</span> <span class=\"p\">:</span> <span class=\"mi\">52907</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;222B&#39;</span> <span class=\"p\">:</span> <span class=\"mi\">54182</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;223B&#39;</span> <span class=\"p\">:</span> <span class=\"mi\">55114</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;225A&#39;</span> <span class=\"p\">:</span> <span class=\"mi\">55968</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;226A&#39;</span> <span class=\"p\">:</span> <span class=\"mi\">56005</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">ggr_name</span> <span class=\"ow\">in</span> <span class=\"n\">qr_fix_dict</span><span class=\"p\">:</span>\n        <span class=\"n\">number</span> <span class=\"o\">=</span> <span class=\"n\">ggr_name</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"n\">letter</span> <span class=\"o\">=</span> <span class=\"n\">ggr_name</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">()</span>\n        <span class=\"n\">qr_gid</span> <span class=\"o\">=</span> <span class=\"n\">qr_fix_dict</span><span class=\"p\">[</span><span class=\"n\">ggr_name</span><span class=\"p\">]</span>\n\n        <span class=\"n\">number</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"n\">letter</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;C&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;D&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;E&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;F&#39;</span><span class=\"p\">]</span>\n\n        <span class=\"n\">imageset_name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;GGR2,</span><span class=\"si\">%d</span><span class=\"s1\">,</span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">,</span> <span class=\"n\">letter</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n        <span class=\"n\">imageset_id</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_imageset_imgsetids_from_text</span><span class=\"p\">(</span><span class=\"n\">imageset_name</span><span class=\"p\">)</span>\n        <span class=\"n\">gid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_imageset_gids</span><span class=\"p\">(</span><span class=\"n\">imageset_id</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"n\">qr_gid</span> <span class=\"ow\">in</span> <span class=\"n\">gid_list</span>\n\n        <span class=\"k\">assert</span> <span class=\"n\">imageset_id</span> <span class=\"ow\">in</span> <span class=\"n\">imageset_qr_dict</span>\n        <span class=\"n\">imageset_list</span> <span class=\"o\">=</span> <span class=\"n\">imageset_qr_dict</span><span class=\"p\">[</span><span class=\"n\">imageset_id</span><span class=\"p\">]</span>\n\n        <span class=\"n\">tag</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;GGR2,</span><span class=\"si\">%d</span><span class=\"s1\">,</span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">,</span> <span class=\"n\">letter</span><span class=\"p\">)</span>\n        <span class=\"n\">imageset_list_</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">imageset</span> <span class=\"ow\">in</span> <span class=\"n\">imageset_list</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">tag</span> <span class=\"o\">==</span> <span class=\"n\">imageset</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]:</span>\n                <span class=\"k\">continue</span>\n            <span class=\"n\">imageset_list_</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">imageset</span><span class=\"p\">)</span>\n\n        <span class=\"n\">imageset</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"n\">imageset_name</span><span class=\"p\">,</span>\n            <span class=\"n\">qr_gid</span><span class=\"p\">,</span>\n            <span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"p\">[</span>\n                <span class=\"s1\">&#39;car=</span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">,</span> <span class=\"p\">),</span>\n                <span class=\"s1\">&#39;event=ggr2018&#39;</span><span class=\"p\">,</span>\n                <span class=\"s1\">&#39;person=</span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">letter</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">(),</span> <span class=\"p\">),</span>\n            <span class=\"p\">],</span>\n        <span class=\"p\">]</span>\n        <span class=\"n\">imageset_list_</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">imageset</span><span class=\"p\">)</span>\n\n        <span class=\"n\">imageset_qr_dict</span><span class=\"p\">[</span><span class=\"n\">imageset_id</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">imageset_list_</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">imageset_qr_dict</span></div>\n\n\n<div class=\"viewcode-block\" id=\"inspect_ggr_qr_codes\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.inspect_ggr_qr_codes\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">inspect_ggr_qr_codes</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Inspect QR codes in each imageset.</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (IBEISController):  ibeis controller object</span>\n<span class=\"sd\">        imageset_rowid_list (list):  imageset rowid list</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs inspect_ggr_qr_codes</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; default_dbdir = join(&#39;/&#39;, &#39;data&#39;, &#39;ibeis&#39;, &#39;GGR2-IBEIS&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; dbdir = ut.get_argval(&#39;--dbdir&#39;, type_=str, default=default_dbdir)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(dbdir=dbdir)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs.inspect_ggr_qr_codes()</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">filename_qr_json</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">dbdir</span><span class=\"p\">,</span> <span class=\"s1\">&#39;imageset_qr_dict.json&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">filename_qr_json</span><span class=\"p\">):</span>\n        <span class=\"n\">imageset_dict</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">search_ggr_qr_codes</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">filename_qr_json</span><span class=\"p\">)</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">save_json</span><span class=\"p\">(</span><span class=\"n\">filename_qr_json</span><span class=\"p\">,</span> <span class=\"n\">imageset_dict</span><span class=\"p\">)</span>\n\n    <span class=\"n\">imageset_qr_dict</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">load_json</span><span class=\"p\">(</span><span class=\"n\">filename_qr_json</span><span class=\"p\">)</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">imageset_qr_dict</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()):</span>\n        <span class=\"n\">imageset_qr_dict</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"n\">imageset_qr_dict</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span>\n\n    <span class=\"n\">imageset_qr_dict</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">fix_ggr_rq_codes</span><span class=\"p\">(</span><span class=\"n\">imageset_qr_dict</span><span class=\"p\">)</span>\n\n    <span class=\"n\">ggr_qr_dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"k\">for</span> <span class=\"n\">imageset_rowid</span> <span class=\"ow\">in</span> <span class=\"n\">imageset_qr_dict</span><span class=\"p\">:</span>\n        <span class=\"n\">imageset_text</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_imageset_text</span><span class=\"p\">(</span><span class=\"n\">imageset_rowid</span><span class=\"p\">)</span>\n        <span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">parse_ggr_name</span><span class=\"p\">(</span><span class=\"n\">imageset_text</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"n\">values</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span>\n        <span class=\"n\">dataset</span><span class=\"p\">,</span> <span class=\"n\">letter</span><span class=\"p\">,</span> <span class=\"n\">number</span> <span class=\"o\">=</span> <span class=\"n\">values</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">number</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">ggr_qr_dict</span><span class=\"p\">:</span>\n            <span class=\"n\">ggr_qr_dict</span><span class=\"p\">[</span><span class=\"n\">number</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n        <span class=\"k\">assert</span> <span class=\"n\">letter</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">ggr_qr_dict</span><span class=\"p\">[</span><span class=\"n\">number</span><span class=\"p\">]</span>\n        <span class=\"n\">ggr_qr_dict</span><span class=\"p\">[</span><span class=\"n\">number</span><span class=\"p\">][</span><span class=\"n\">letter</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"n\">imageset_rowid</span><span class=\"p\">,</span>\n            <span class=\"n\">imageset_qr_dict</span><span class=\"p\">[</span><span class=\"n\">imageset_rowid</span><span class=\"p\">],</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"n\">cleared_imageset_rowid_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"mi\">2</span><span class=\"p\">,</span>    <span class=\"c1\"># NO QR AT ALL</span>\n        <span class=\"mi\">63</span><span class=\"p\">,</span>   <span class=\"c1\"># INDIVIDUAL WITH NO QR (BUT HAS GPS)</span>\n        <span class=\"mi\">77</span><span class=\"p\">,</span>   <span class=\"c1\"># INDIVIDUAL WITH NO QR (BUT HAS GPS)</span>\n        <span class=\"mi\">107</span><span class=\"p\">,</span>  <span class=\"c1\"># NO QR AT ALL</span>\n        <span class=\"mi\">185</span><span class=\"p\">,</span>  <span class=\"c1\"># INDIVIDUAL WITH NO QR (BUT HAS GPS)</span>\n        <span class=\"mi\">216</span><span class=\"p\">,</span>  <span class=\"c1\"># NO QR AT ALL</span>\n        <span class=\"mi\">217</span><span class=\"p\">,</span>  <span class=\"c1\"># NO QR AT ALL</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"n\">sync_dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n    <span class=\"c1\"># Find all others and run checks</span>\n    <span class=\"k\">for</span> <span class=\"n\">number</span> <span class=\"ow\">in</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">ggr_qr_dict</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())):</span>\n        <span class=\"n\">qr_dict</span> <span class=\"o\">=</span> <span class=\"n\">ggr_qr_dict</span><span class=\"p\">[</span><span class=\"n\">number</span><span class=\"p\">]</span>\n        <span class=\"n\">letter_list</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">qr_dict</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()))</span>\n        <span class=\"n\">num_letters</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">letter_list</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">num_letters</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Empty car: </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n            <span class=\"k\">break</span>\n        <span class=\"k\">elif</span> <span class=\"n\">num_letters</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"n\">letter</span> <span class=\"o\">=</span> <span class=\"n\">letter_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"n\">imageset_rowid</span><span class=\"p\">,</span> <span class=\"n\">qr_list</span> <span class=\"o\">=</span> <span class=\"n\">qr_dict</span><span class=\"p\">[</span><span class=\"n\">letter</span><span class=\"p\">]</span>\n\n            <span class=\"n\">match_gid</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">letter</span> <span class=\"o\">!=</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">:</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Individual car missing A: </span><span class=\"si\">%r</span><span class=\"s1\"> (</span><span class=\"si\">%r</span><span class=\"s1\">)&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">,</span> <span class=\"n\">letter</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n                <span class=\"n\">match_gid</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">qr_list</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Individual car missing QR: </span><span class=\"si\">%r</span><span class=\"s1\"> </span><span class=\"si\">%r</span><span class=\"s1\"> (imageset_rowid = </span><span class=\"si\">%r</span><span class=\"s1\">)&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">,</span> <span class=\"n\">letter</span><span class=\"p\">,</span> <span class=\"n\">imageset_rowid</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">for</span> <span class=\"n\">qr</span> <span class=\"ow\">in</span> <span class=\"n\">qr_list</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"n\">qr</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span>\n                        <span class=\"n\">match_gid</span> <span class=\"o\">=</span> <span class=\"n\">qr</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n                        <span class=\"k\">break</span>\n\n                <span class=\"k\">if</span> <span class=\"n\">match_gid</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]:</span>\n                    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Individual car incorrect QR: </span><span class=\"si\">%r</span><span class=\"s1\"> </span><span class=\"si\">%r</span><span class=\"s1\"> (imageset_rowid = </span><span class=\"si\">%r</span><span class=\"s1\">)&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">,</span> <span class=\"n\">letter</span><span class=\"p\">,</span> <span class=\"n\">imageset_rowid</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n                    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\t</span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">qr_list</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">imageset_rowid</span> <span class=\"ow\">in</span> <span class=\"n\">cleared_imageset_rowid_list</span><span class=\"p\">:</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\t</span><span class=\"s1\">Cleared Imageset: </span><span class=\"si\">%d</span><span class=\"s1\"> </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">,</span> <span class=\"n\">letter</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n\n            <span class=\"n\">sync_dict</span><span class=\"p\">[</span><span class=\"n\">imageset_rowid</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">match_gid</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">failed_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"n\">missing_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">for</span> <span class=\"n\">letter</span> <span class=\"ow\">in</span> <span class=\"n\">letter_list</span><span class=\"p\">:</span>\n                <span class=\"n\">imageset_rowid</span><span class=\"p\">,</span> <span class=\"n\">qr_list</span> <span class=\"o\">=</span> <span class=\"n\">qr_dict</span><span class=\"p\">[</span><span class=\"n\">letter</span><span class=\"p\">]</span>\n\n                <span class=\"n\">match_gid</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n                <span class=\"k\">if</span> <span class=\"n\">imageset_rowid</span> <span class=\"ow\">in</span> <span class=\"n\">sync_dict</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"n\">sync_dict</span><span class=\"p\">[</span><span class=\"n\">imageset_rowid</span><span class=\"p\">]</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                        <span class=\"k\">continue</span>\n\n                <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">qr_list</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                    <span class=\"n\">missing_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">letter</span><span class=\"p\">,</span> <span class=\"n\">imageset_rowid</span><span class=\"p\">))</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"k\">for</span> <span class=\"n\">qr</span> <span class=\"ow\">in</span> <span class=\"n\">qr_list</span><span class=\"p\">:</span>\n                        <span class=\"k\">if</span> <span class=\"n\">qr</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span>\n                            <span class=\"n\">match_gid</span> <span class=\"o\">=</span> <span class=\"n\">qr</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n                            <span class=\"k\">break</span>\n\n                    <span class=\"k\">if</span> <span class=\"n\">match_gid</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                        <span class=\"n\">failed_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">letter</span><span class=\"p\">,</span> <span class=\"n\">imageset_rowid</span><span class=\"p\">))</span>\n\n                <span class=\"k\">if</span> <span class=\"n\">imageset_rowid</span> <span class=\"ow\">in</span> <span class=\"n\">cleared_imageset_rowid_list</span><span class=\"p\">:</span>\n                    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\t</span><span class=\"s1\">Cleared Imageset: </span><span class=\"si\">%d</span><span class=\"s1\"> </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">,</span> <span class=\"n\">letter</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n\n                <span class=\"n\">sync_dict</span><span class=\"p\">[</span><span class=\"n\">imageset_rowid</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">match_gid</span>\n\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">missing_list</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Group car missing QR: </span><span class=\"si\">%r</span><span class=\"s1\"> (</span><span class=\"si\">%r</span><span class=\"s1\">)&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">,</span> <span class=\"n\">letter_list</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n                <span class=\"k\">for</span> <span class=\"n\">missing</span><span class=\"p\">,</span> <span class=\"n\">imageset_rowid</span> <span class=\"ow\">in</span> <span class=\"n\">missing_list</span><span class=\"p\">:</span>\n                    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\t</span><span class=\"s1\">No QR for </span><span class=\"si\">%r</span><span class=\"s1\"> </span><span class=\"si\">%r</span><span class=\"s1\"> (imageset_rowid = </span><span class=\"si\">%r</span><span class=\"s1\">)&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">,</span> <span class=\"n\">missing</span><span class=\"p\">,</span> <span class=\"n\">imageset_rowid</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">failed_list</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Group car incorrect QR: </span><span class=\"si\">%r</span><span class=\"s1\"> (</span><span class=\"si\">%r</span><span class=\"s1\">)&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">,</span> <span class=\"n\">letter_list</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n                <span class=\"k\">for</span> <span class=\"n\">failed</span><span class=\"p\">,</span> <span class=\"n\">imageset_rowid</span> <span class=\"ow\">in</span> <span class=\"n\">failed_list</span><span class=\"p\">:</span>\n                    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\t</span><span class=\"s1\">Bad QR for </span><span class=\"si\">%r</span><span class=\"s1\"> </span><span class=\"si\">%r</span><span class=\"s1\"> (imageset_rowid = </span><span class=\"si\">%r</span><span class=\"s1\">)&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">,</span> <span class=\"n\">failed</span><span class=\"p\">,</span> <span class=\"n\">imageset_rowid</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n\n    <span class=\"n\">filename_qr_json</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">dbdir</span><span class=\"p\">,</span> <span class=\"s1\">&#39;imageset_qr_dict.final.json&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">save_json</span><span class=\"p\">(</span><span class=\"n\">filename_qr_json</span><span class=\"p\">,</span> <span class=\"n\">imageset_qr_dict</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">sync_dict</span></div>\n\n\n<div class=\"viewcode-block\" id=\"overwrite_ggr_unixtimes_from_gps\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.overwrite_ggr_unixtimes_from_gps\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">overwrite_ggr_unixtimes_from_gps</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">gmt_offset</span><span class=\"o\">=</span><span class=\"mf\">3.0</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Sync image time offsets using QR codes sync data</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (IBEISController):  ibeis controller object</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs overwrite_ggr_unixtimes_from_gps</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; default_dbdir = join(&#39;/&#39;, &#39;data&#39;, &#39;ibeis&#39;, &#39;GGR2-IBEIS&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; dbdir = ut.get_argval(&#39;--dbdir&#39;, type_=str, default=default_dbdir)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(dbdir=dbdir)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs.overwrite_ggr_unixtimes_from_gps()</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">sync_dict</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">inspect_ggr_qr_codes</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    <span class=\"n\">imageset_rowid_list</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">sync_dict</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n\n    <span class=\"n\">car_dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"k\">for</span> <span class=\"n\">imageset_rowid</span> <span class=\"ow\">in</span> <span class=\"n\">imageset_rowid_list</span><span class=\"p\">:</span>\n        <span class=\"n\">imageset_text</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_imageset_text</span><span class=\"p\">(</span><span class=\"n\">imageset_rowid</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">imageset_text</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">continue</span>\n        <span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">parse_ggr_name</span><span class=\"p\">(</span><span class=\"n\">imageset_text</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"n\">values</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span>\n        <span class=\"n\">dataset</span><span class=\"p\">,</span> <span class=\"n\">letter</span><span class=\"p\">,</span> <span class=\"n\">number</span> <span class=\"o\">=</span> <span class=\"n\">values</span>\n\n        <span class=\"n\">qr_gid</span> <span class=\"o\">=</span> <span class=\"n\">sync_dict</span><span class=\"p\">[</span><span class=\"n\">imageset_rowid</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">letter</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">qr_gid</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">car_dict</span><span class=\"p\">[</span><span class=\"n\">number</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">qr_gid</span>\n\n            <span class=\"n\">gid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_imageset_gids</span><span class=\"p\">(</span><span class=\"n\">imageset_rowid</span><span class=\"p\">)</span>\n            <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">overwrite_unixtimes_from_gps</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">gid_list</span><span class=\"p\">,</span> <span class=\"n\">gmt_offset</span><span class=\"o\">=</span><span class=\"n\">gmt_offset</span><span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">count</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Overwrote </span><span class=\"si\">%d</span><span class=\"s1\"> image unixtimes from GPS for </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">count</span><span class=\"p\">,</span> <span class=\"n\">values</span><span class=\"p\">))</span></div>\n\n\n<div class=\"viewcode-block\" id=\"overwrite_unixtimes_from_gps_worker\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.overwrite_unixtimes_from_gps_worker\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">overwrite_unixtimes_from_gps_worker</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">):</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">vtool.exif</span> <span class=\"k\">import</span> <span class=\"n\">parse_exif_unixtime_gps</span>\n    <span class=\"n\">unixtime_gps</span> <span class=\"o\">=</span> <span class=\"n\">parse_exif_unixtime_gps</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">unixtime_gps</span></div>\n\n\n<div class=\"viewcode-block\" id=\"overwrite_unixtimes_from_gps\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.overwrite_unixtimes_from_gps\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">overwrite_unixtimes_from_gps</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">gid_list</span><span class=\"p\">,</span> <span class=\"n\">gmt_offset</span><span class=\"o\">=</span><span class=\"mf\">3.0</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Sync image time offsets using QR codes sync data</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (IBEISController):  ibeis controller object</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs overwrite_unixtimes_from_gps</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; default_dbdir = join(&#39;/&#39;, &#39;data&#39;, &#39;ibeis&#39;, &#39;GGR2-IBEIS&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; dbdir = ut.get_argval(&#39;--dbdir&#39;, type_=str, default=default_dbdir)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(dbdir=dbdir)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs.overwrite_unixtimes_from_gps()</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\"># Check for GPS dates and use if available</span>\n    <span class=\"n\">path_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_paths</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">arg_iter</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">path_list</span><span class=\"p\">))</span>\n    <span class=\"n\">unixtime_gps_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">util_parallel</span><span class=\"o\">.</span><span class=\"n\">generate2</span><span class=\"p\">(</span><span class=\"n\">overwrite_unixtimes_from_gps_worker</span><span class=\"p\">,</span> <span class=\"n\">arg_iter</span><span class=\"p\">,</span>\n                                   <span class=\"n\">ordered</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">unixtime_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_unixtime</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n\n    <span class=\"n\">zipped_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">,</span> <span class=\"n\">path_list</span><span class=\"p\">,</span> <span class=\"n\">unixtime_list</span><span class=\"p\">,</span> <span class=\"n\">unixtime_gps_list</span><span class=\"p\">))</span>\n\n    <span class=\"n\">gid_list_</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">offset_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">gid</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">unixtime</span><span class=\"p\">,</span> <span class=\"n\">unixtime_gps</span> <span class=\"ow\">in</span> <span class=\"n\">zipped_list</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">unixtime_gps</span> <span class=\"o\">!=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"n\">unixtime_gps</span> <span class=\"o\">+=</span> <span class=\"n\">gmt_offset</span> <span class=\"o\">*</span> <span class=\"mi\">60</span> <span class=\"o\">*</span> <span class=\"mi\">60</span>\n\n            <span class=\"n\">offset</span> <span class=\"o\">=</span> <span class=\"n\">unixtime_gps</span> <span class=\"o\">-</span> <span class=\"n\">unixtime</span>\n            <span class=\"k\">if</span> <span class=\"n\">offset</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"n\">current_offset</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_timedelta_posix</span><span class=\"p\">([</span><span class=\"n\">gid</span><span class=\"p\">])[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                <span class=\"n\">offset</span> <span class=\"o\">+=</span> <span class=\"n\">current_offset</span>\n                <span class=\"n\">gid_list_</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">gid</span><span class=\"p\">)</span>\n                <span class=\"n\">offset_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">offset</span><span class=\"p\">)</span>\n\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_image_timedelta_posix</span><span class=\"p\">(</span><span class=\"n\">gid_list_</span><span class=\"p\">,</span> <span class=\"n\">offset_list</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">gid_list_</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"sync_ggr_with_qr_codes\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.sync_ggr_with_qr_codes\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">sync_ggr_with_qr_codes</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">local_offset</span><span class=\"o\">=-</span><span class=\"mf\">8.0</span><span class=\"p\">,</span> <span class=\"n\">gmt_offset</span><span class=\"o\">=</span><span class=\"mf\">3.0</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Sync image time offsets using QR codes sync data</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (IBEISController):  ibeis controller object</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs sync_ggr_with_qr_codes</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; default_dbdir = join(&#39;/&#39;, &#39;data&#39;, &#39;ibeis&#39;, &#39;GGR2-IBEIS&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; dbdir = ut.get_argval(&#39;--dbdir&#39;, type_=str, default=default_dbdir)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(dbdir=dbdir)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs.sync_ggr_with_qr_codes()</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n\n    <span class=\"n\">lower_posix</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">datetime_to_posixtime</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">date_to_datetime</span><span class=\"p\">(</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2018</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">24</span><span class=\"p\">)))</span>\n    <span class=\"n\">upper_posix</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">datetime_to_posixtime</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">date_to_datetime</span><span class=\"p\">(</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2018</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)))</span>\n\n    <span class=\"n\">lower_posix</span> <span class=\"o\">+=</span> <span class=\"n\">local_offset</span> <span class=\"o\">*</span> <span class=\"mi\">60</span> <span class=\"o\">*</span> <span class=\"mi\">60</span>\n    <span class=\"n\">upper_posix</span> <span class=\"o\">+=</span> <span class=\"n\">local_offset</span> <span class=\"o\">*</span> <span class=\"mi\">60</span> <span class=\"o\">*</span> <span class=\"mi\">60</span>\n\n    <span class=\"n\">lower_posix</span> <span class=\"o\">-=</span> <span class=\"n\">gmt_offset</span> <span class=\"o\">*</span> <span class=\"mi\">60</span> <span class=\"o\">*</span> <span class=\"mi\">60</span>\n    <span class=\"n\">upper_posix</span> <span class=\"o\">-=</span> <span class=\"n\">gmt_offset</span> <span class=\"o\">*</span> <span class=\"mi\">60</span> <span class=\"o\">*</span> <span class=\"mi\">60</span>\n\n    <span class=\"n\">sync_dict</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">inspect_ggr_qr_codes</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    <span class=\"n\">imageset_rowid_list</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">sync_dict</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n    <span class=\"n\">delete_gid_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n    <span class=\"n\">car_dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"k\">for</span> <span class=\"n\">imageset_rowid</span> <span class=\"ow\">in</span> <span class=\"n\">imageset_rowid_list</span><span class=\"p\">:</span>\n        <span class=\"n\">imageset_text</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_imageset_text</span><span class=\"p\">(</span><span class=\"n\">imageset_rowid</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">imageset_text</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">continue</span>\n        <span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">parse_ggr_name</span><span class=\"p\">(</span><span class=\"n\">imageset_text</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"n\">values</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span>\n        <span class=\"n\">dataset</span><span class=\"p\">,</span> <span class=\"n\">letter</span><span class=\"p\">,</span> <span class=\"n\">number</span> <span class=\"o\">=</span> <span class=\"n\">values</span>\n\n        <span class=\"n\">qr_gid</span> <span class=\"o\">=</span> <span class=\"n\">sync_dict</span><span class=\"p\">[</span><span class=\"n\">imageset_rowid</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">letter</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">qr_gid</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">car_dict</span><span class=\"p\">[</span><span class=\"n\">number</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">qr_gid</span>\n\n            <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n            <span class=\"n\">gid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_imageset_gids</span><span class=\"p\">(</span><span class=\"n\">imageset_rowid</span><span class=\"p\">)</span>\n            <span class=\"n\">unixtime_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_unixtime</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">gid</span><span class=\"p\">,</span> <span class=\"n\">unixtime</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">,</span> <span class=\"n\">unixtime_list</span><span class=\"p\">):</span>\n                <span class=\"k\">if</span> <span class=\"n\">unixtime</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"n\">unixtime</span> <span class=\"o\">&lt;</span> <span class=\"n\">lower_posix</span> <span class=\"ow\">or</span> <span class=\"n\">upper_posix</span> <span class=\"o\">&lt;</span> <span class=\"n\">unixtime</span><span class=\"p\">:</span>\n                    <span class=\"n\">delete_gid_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">gid</span><span class=\"p\">)</span>\n                    <span class=\"n\">count</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">count</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Found </span><span class=\"si\">%d</span><span class=\"s1\"> images to delete for </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">count</span><span class=\"p\">,</span> <span class=\"n\">values</span><span class=\"p\">))</span>\n\n    <span class=\"n\">cleared_imageset_rowid_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"mi\">187</span><span class=\"p\">,</span>  <span class=\"c1\"># Images from GGR2 but from 2015 with valid GPS coordinates</span>\n        <span class=\"mi\">188</span><span class=\"p\">,</span>  <span class=\"c1\"># Images from GGR2 but from 2015 with valid GPS coordinates</span>\n        <span class=\"mi\">189</span><span class=\"p\">,</span>  <span class=\"c1\"># Images from GGR2 but from 2015 with valid GPS coordinates</span>\n    <span class=\"p\">]</span>\n    <span class=\"k\">for</span> <span class=\"n\">imageset_rowid</span> <span class=\"ow\">in</span> <span class=\"n\">imageset_rowid_list</span><span class=\"p\">:</span>\n        <span class=\"n\">imageset_text</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_imageset_text</span><span class=\"p\">(</span><span class=\"n\">imageset_rowid</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">imageset_text</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">continue</span>\n\n        <span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">parse_ggr_name</span><span class=\"p\">(</span><span class=\"n\">imageset_text</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"n\">values</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span>\n        <span class=\"n\">dataset</span><span class=\"p\">,</span> <span class=\"n\">letter</span><span class=\"p\">,</span> <span class=\"n\">number</span> <span class=\"o\">=</span> <span class=\"n\">values</span>\n\n        <span class=\"n\">qr_gid</span> <span class=\"o\">=</span> <span class=\"n\">sync_dict</span><span class=\"p\">[</span><span class=\"n\">imageset_rowid</span><span class=\"p\">]</span>\n        <span class=\"n\">gid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_imageset_gids</span><span class=\"p\">(</span><span class=\"n\">imageset_rowid</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">letter</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">:</span>\n            <span class=\"k\">continue</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">qr_gid</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Skipping None QR </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n            <span class=\"k\">continue</span>\n\n        <span class=\"k\">assert</span> <span class=\"n\">qr_gid</span> <span class=\"ow\">in</span> <span class=\"n\">gid_list</span>\n\n        <span class=\"n\">anchor_gid</span> <span class=\"o\">=</span> <span class=\"n\">car_dict</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"n\">anchor_gid</span> <span class=\"o\">!=</span> <span class=\"n\">qr_gid</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">anchor_gid</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Skipping None Anchor </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n            <span class=\"k\">continue</span>\n\n        <span class=\"n\">qr_time</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_unixtime</span><span class=\"p\">(</span><span class=\"n\">qr_gid</span><span class=\"p\">)</span>\n        <span class=\"n\">anchor_time</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_unixtime</span><span class=\"p\">(</span><span class=\"n\">anchor_gid</span><span class=\"p\">)</span>\n        <span class=\"n\">offset</span> <span class=\"o\">=</span> <span class=\"n\">anchor_time</span> <span class=\"o\">-</span> <span class=\"n\">qr_time</span>\n        <span class=\"k\">if</span> <span class=\"n\">offset</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">current_offset</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_timedelta_posix</span><span class=\"p\">([</span><span class=\"n\">qr_gid</span><span class=\"p\">])[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"n\">offset</span> <span class=\"o\">+=</span> <span class=\"n\">current_offset</span>\n            <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_image_timedelta_posix</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">offset</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">))</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Correcting offset for </span><span class=\"si\">%r</span><span class=\"s1\">: </span><span class=\"si\">%d</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">,</span> <span class=\"n\">offset</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">qr_time</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_unixtime</span><span class=\"p\">(</span><span class=\"n\">qr_gid</span><span class=\"p\">)</span>\n            <span class=\"n\">anchor_time</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_unixtime</span><span class=\"p\">(</span><span class=\"n\">anchor_gid</span><span class=\"p\">)</span>\n            <span class=\"n\">offset</span> <span class=\"o\">=</span> <span class=\"n\">anchor_time</span> <span class=\"o\">-</span> <span class=\"n\">qr_time</span>\n            <span class=\"k\">assert</span> <span class=\"n\">offset</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n        <span class=\"k\">except</span> <span class=\"ne\">AssertionError</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\t</span><span class=\"s1\">Failed to correct offset for </span><span class=\"si\">%r</span><span class=\"s1\">: </span><span class=\"si\">%d</span><span class=\"s1\"> &#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">,</span> <span class=\"n\">offset</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">imageset_rowid</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">cleared_imageset_rowid_list</span><span class=\"p\">:</span>\n            <span class=\"k\">assert</span> <span class=\"n\">lower_posix</span> <span class=\"o\">&lt;=</span> <span class=\"n\">qr_time</span> <span class=\"ow\">and</span> <span class=\"n\">qr_time</span> <span class=\"o\">&lt;=</span> <span class=\"n\">upper_posix</span>\n            <span class=\"k\">assert</span> <span class=\"n\">lower_posix</span> <span class=\"o\">&lt;=</span> <span class=\"n\">anchor_time</span> <span class=\"ow\">and</span> <span class=\"n\">anchor_time</span> <span class=\"o\">&lt;=</span> <span class=\"n\">upper_posix</span>\n\n        <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">unixtime_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_unixtime</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">gid</span><span class=\"p\">,</span> <span class=\"n\">unixtime</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">,</span> <span class=\"n\">unixtime_list</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">unixtime</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"n\">unixtime</span> <span class=\"o\">&lt;</span> <span class=\"n\">lower_posix</span> <span class=\"ow\">or</span> <span class=\"n\">upper_posix</span> <span class=\"o\">&lt;</span> <span class=\"n\">unixtime</span><span class=\"p\">:</span>\n                <span class=\"n\">delete_gid_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">gid</span><span class=\"p\">)</span>\n\n                <span class=\"n\">count</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">count</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Found </span><span class=\"si\">%d</span><span class=\"s1\"> images to delete from </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">count</span><span class=\"p\">,</span> <span class=\"n\">values</span><span class=\"p\">))</span>\n\n    <span class=\"n\">delete_gid_list</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">delete_gid_list</span><span class=\"p\">)))</span>\n    <span class=\"k\">return</span> <span class=\"n\">delete_gid_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"query_ggr_gids_between_dates\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.query_ggr_gids_between_dates\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">query_ggr_gids_between_dates</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">gid_list</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">date1</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">2018</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">27</span><span class=\"p\">),</span> <span class=\"n\">date2</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">2018</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">29</span><span class=\"p\">),</span>\n                                 <span class=\"n\">local_offset</span><span class=\"o\">=-</span><span class=\"mf\">8.0</span><span class=\"p\">,</span> <span class=\"n\">gmt_offset</span><span class=\"o\">=</span><span class=\"mf\">3.0</span><span class=\"p\">):</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n\n    <span class=\"n\">date1y</span><span class=\"p\">,</span> <span class=\"n\">date1m</span><span class=\"p\">,</span> <span class=\"n\">date1d</span> <span class=\"o\">=</span> <span class=\"n\">date1</span>\n    <span class=\"n\">date2y</span><span class=\"p\">,</span> <span class=\"n\">date2m</span><span class=\"p\">,</span> <span class=\"n\">date2d</span> <span class=\"o\">=</span> <span class=\"n\">date2</span>\n\n    <span class=\"n\">lower_posix</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">datetime_to_posixtime</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">date_to_datetime</span><span class=\"p\">(</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"n\">date1y</span><span class=\"p\">,</span> <span class=\"n\">date1m</span><span class=\"p\">,</span> <span class=\"n\">date1d</span><span class=\"p\">)))</span>\n    <span class=\"n\">upper_posix</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">datetime_to_posixtime</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">date_to_datetime</span><span class=\"p\">(</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"n\">date2y</span><span class=\"p\">,</span> <span class=\"n\">date2m</span><span class=\"p\">,</span> <span class=\"n\">date2d</span><span class=\"p\">)))</span>\n\n    <span class=\"n\">lower_posix</span> <span class=\"o\">+=</span> <span class=\"n\">local_offset</span> <span class=\"o\">*</span> <span class=\"mi\">60</span> <span class=\"o\">*</span> <span class=\"mi\">60</span>\n    <span class=\"n\">upper_posix</span> <span class=\"o\">+=</span> <span class=\"n\">local_offset</span> <span class=\"o\">*</span> <span class=\"mi\">60</span> <span class=\"o\">*</span> <span class=\"mi\">60</span>\n\n    <span class=\"n\">lower_posix</span> <span class=\"o\">-=</span> <span class=\"n\">gmt_offset</span> <span class=\"o\">*</span> <span class=\"mi\">60</span> <span class=\"o\">*</span> <span class=\"mi\">60</span>\n    <span class=\"n\">upper_posix</span> <span class=\"o\">-=</span> <span class=\"n\">gmt_offset</span> <span class=\"o\">*</span> <span class=\"mi\">60</span> <span class=\"o\">*</span> <span class=\"mi\">60</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">gid_list</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">gid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_gids</span><span class=\"p\">()</span>\n\n    <span class=\"n\">unixtime_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_unixtime</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">gid_list_</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">gid</span><span class=\"p\">,</span> <span class=\"n\">unixtime</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">,</span> <span class=\"n\">unixtime_list</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">unixtime</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">lower_posix</span> <span class=\"o\">&lt;=</span> <span class=\"n\">unixtime</span> <span class=\"ow\">and</span> <span class=\"n\">unixtime</span> <span class=\"o\">&lt;=</span> <span class=\"n\">upper_posix</span><span class=\"p\">:</span>\n            <span class=\"n\">gid_list_</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">gid</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">gid_list_</span></div>\n\n\n<div class=\"viewcode-block\" id=\"purge_ggr_unixtime_out_of_bounds\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.purge_ggr_unixtime_out_of_bounds\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">purge_ggr_unixtime_out_of_bounds</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"n\">delete_gid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">sync_ggr_with_qr_codes</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Deleting </span><span class=\"si\">%d</span><span class=\"s1\"> gids&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">delete_gid_list</span><span class=\"p\">),</span> <span class=\"p\">))</span>\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">delete_images</span><span class=\"p\">(</span><span class=\"n\">delete_gid_list</span><span class=\"p\">)</span></div>\n    <span class=\"c1\"># ibs.delete_empty_imgsetids()</span>\n\n\n<div class=\"viewcode-block\" id=\"compute_ggr_fix_gps_contributors_gids\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.compute_ggr_fix_gps_contributors_gids\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">compute_ggr_fix_gps_contributors_gids</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">min_diff</span><span class=\"o\">=</span><span class=\"mi\">600</span><span class=\"p\">,</span> <span class=\"n\">individual</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Get all gids</span>\n    <span class=\"n\">gid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_gids</span><span class=\"p\">()</span>\n    <span class=\"n\">num_all</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">gps_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_gps</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">flag_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"n\">gps</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">gps</span> <span class=\"ow\">in</span> <span class=\"n\">gps_list</span> <span class=\"p\">]</span>\n    <span class=\"c1\"># Get bad GPS gids</span>\n    <span class=\"n\">gid_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">filter_items</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">,</span> <span class=\"n\">flag_list</span><span class=\"p\">)</span>\n    <span class=\"n\">num_bad</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n\n    <span class=\"n\">recovered_gid_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">recovered_gps_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">recovered_dist_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n    <span class=\"n\">unrecovered_gid_list</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)))</span>\n    <span class=\"n\">num_unrecovered</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">unrecovered_gid_list</span><span class=\"p\">)</span>\n\n    <span class=\"n\">gid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_gids</span><span class=\"p\">()</span>\n    <span class=\"n\">note_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_notes</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"k\">if</span> <span class=\"n\">individual</span> <span class=\"k\">else</span> <span class=\"o\">-</span><span class=\"mi\">2</span>\n    <span class=\"n\">note_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"s1\">&#39;,&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">note</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;,&#39;</span><span class=\"p\">)[:</span><span class=\"n\">temp</span><span class=\"p\">])</span>\n        <span class=\"k\">for</span> <span class=\"n\">note</span> <span class=\"ow\">in</span> <span class=\"n\">note_list</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"n\">not_found</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">([])</span>\n    <span class=\"n\">num_found</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">for</span> <span class=\"n\">gid</span> <span class=\"ow\">in</span> <span class=\"n\">unrecovered_gid_list</span><span class=\"p\">:</span>\n        <span class=\"n\">unixtime</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_unixtime</span><span class=\"p\">(</span><span class=\"n\">gid</span><span class=\"p\">)</span>\n        <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">gid_list</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">gid</span><span class=\"p\">)</span>\n        <span class=\"n\">note</span> <span class=\"o\">=</span> <span class=\"n\">note_list</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span>\n\n        <span class=\"c1\"># Find siblings in the same car</span>\n        <span class=\"n\">sibling_gid_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"n\">gid_</span>\n            <span class=\"k\">for</span> <span class=\"n\">gid_</span><span class=\"p\">,</span> <span class=\"n\">note_</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">,</span> <span class=\"n\">note_list</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">note_</span> <span class=\"o\">==</span> <span class=\"n\">note</span>\n        <span class=\"p\">]</span>\n\n        <span class=\"c1\"># Get valid GPS</span>\n        <span class=\"n\">gps_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_gps</span><span class=\"p\">(</span><span class=\"n\">sibling_gid_list</span><span class=\"p\">)</span>\n        <span class=\"n\">flag_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"n\">gps</span> <span class=\"o\">!=</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">gps</span> <span class=\"ow\">in</span> <span class=\"n\">gps_list</span> <span class=\"p\">]</span>\n        <span class=\"n\">gid_list_</span>  <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">sibling_gid_list</span><span class=\"p\">,</span> <span class=\"n\">flag_list</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># If found, get closest image</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">gid_list_</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">gps_list_</span>  <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_gps</span><span class=\"p\">(</span><span class=\"n\">gid_list_</span><span class=\"p\">)</span>\n            <span class=\"n\">unixtime_list_</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_unixtime</span><span class=\"p\">(</span><span class=\"n\">gid_list_</span><span class=\"p\">)</span>\n            <span class=\"c1\"># Find closest</span>\n            <span class=\"n\">closest_diff</span><span class=\"p\">,</span> <span class=\"n\">closest_gps</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">inf</span><span class=\"p\">,</span> <span class=\"kc\">None</span>\n            <span class=\"k\">for</span> <span class=\"n\">unixtime_</span><span class=\"p\">,</span> <span class=\"n\">gps_</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">unixtime_list_</span><span class=\"p\">,</span> <span class=\"n\">gps_list_</span><span class=\"p\">):</span>\n                <span class=\"n\">diff</span> <span class=\"o\">=</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">unixtime</span> <span class=\"o\">-</span> <span class=\"n\">unixtime_</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">diff</span> <span class=\"o\">&lt;</span> <span class=\"n\">closest_diff</span> <span class=\"ow\">and</span> <span class=\"n\">gps_</span> <span class=\"o\">!=</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n                    <span class=\"n\">closest_diff</span> <span class=\"o\">=</span> <span class=\"n\">diff</span>\n                    <span class=\"n\">closest_gps</span> <span class=\"o\">=</span> <span class=\"n\">gps_</span>\n            <span class=\"c1\"># Assign closest</span>\n            <span class=\"k\">if</span> <span class=\"n\">closest_gps</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">closest_diff</span> <span class=\"o\">&lt;=</span> <span class=\"n\">min_diff</span><span class=\"p\">:</span>\n                <span class=\"n\">recovered_gid_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">gid</span><span class=\"p\">)</span>\n                <span class=\"n\">recovered_gps_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">closest_gps</span><span class=\"p\">)</span>\n                <span class=\"n\">recovered_dist_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">closest_diff</span><span class=\"p\">)</span>\n                <span class=\"n\">num_found</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"n\">closest_diff</span> <span class=\"o\">//</span> <span class=\"mi\">3600</span>\n                <span class=\"n\">closest_diff</span> <span class=\"o\">%=</span> <span class=\"mi\">3600</span>\n                <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">closest_diff</span> <span class=\"o\">//</span> <span class=\"mi\">60</span>\n                <span class=\"n\">closest_diff</span> <span class=\"o\">%=</span> <span class=\"mi\">60</span>\n                <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">closest_diff</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;FOUND LOCATION FOR GID </span><span class=\"si\">%d</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">gid</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\t</span><span class=\"s1\">DIFF   : </span><span class=\"si\">%d</span><span class=\"s1\"> H, </span><span class=\"si\">%d</span><span class=\"s1\"> M, </span><span class=\"si\">%d</span><span class=\"s1\"> S&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\t</span><span class=\"s1\">NEW GPS: </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">closest_gps</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">not_found</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">note</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">not_found</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">note</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"si\">%d</span><span class=\"s1\"> \\ </span><span class=\"si\">%d</span><span class=\"s1\"> \\ </span><span class=\"si\">%d</span><span class=\"s1\"> \\ </span><span class=\"si\">%d</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">num_all</span><span class=\"p\">,</span> <span class=\"n\">num_bad</span><span class=\"p\">,</span> <span class=\"n\">num_unrecovered</span><span class=\"p\">,</span> <span class=\"n\">num_found</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n    <span class=\"n\">num_recovered</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">recovered_gid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">num_unrecovered</span> <span class=\"o\">=</span> <span class=\"n\">num_bad</span> <span class=\"o\">-</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">recovered_gid_list</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Missing GPS: </span><span class=\"si\">%d</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">num_bad</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Recovered  : </span><span class=\"si\">%d</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">num_recovered</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Unrecovered: </span><span class=\"si\">%d</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">num_unrecovered</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Not Found  : </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">not_found</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">recovered_gid_list</span><span class=\"p\">,</span> <span class=\"n\">recovered_gps_list</span><span class=\"p\">,</span> <span class=\"n\">recovered_dist_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"compute_ggr_fix_gps_contributors_aids\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.compute_ggr_fix_gps_contributors_aids\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">compute_ggr_fix_gps_contributors_aids</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">min_diff</span><span class=\"o\">=</span><span class=\"mi\">600</span><span class=\"p\">,</span> <span class=\"n\">individual</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Get all aids</span>\n    <span class=\"n\">aid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_aids</span><span class=\"p\">()</span>\n    <span class=\"n\">num_all</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">gps_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_image_gps</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">flag_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"n\">gps</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">gps</span> <span class=\"ow\">in</span> <span class=\"n\">gps_list</span> <span class=\"p\">]</span>\n    <span class=\"c1\"># Get bad GPS aids</span>\n    <span class=\"n\">aid_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">filter_items</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">flag_list</span><span class=\"p\">)</span>\n    <span class=\"n\">num_bad</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Get found GPS list via naming</span>\n    <span class=\"n\">vals</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">compute_ggr_fix_gps_names</span><span class=\"p\">(</span><span class=\"n\">min_diff</span><span class=\"o\">=</span><span class=\"n\">min_diff</span><span class=\"p\">)</span>\n    <span class=\"n\">recovered_aid_list</span><span class=\"p\">,</span> <span class=\"n\">recovered_gps_list</span><span class=\"p\">,</span> <span class=\"n\">recovered_dist_list</span> <span class=\"o\">=</span> <span class=\"n\">vals</span>\n    <span class=\"n\">unrecovered_aid_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">recovered_aid_list</span><span class=\"p\">))</span>\n    <span class=\"n\">num_unrecovered</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">unrecovered_aid_list</span><span class=\"p\">)</span>\n\n    <span class=\"n\">gid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_gids</span><span class=\"p\">()</span>\n    <span class=\"n\">note_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_notes</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"k\">if</span> <span class=\"n\">individual</span> <span class=\"k\">else</span> <span class=\"o\">-</span><span class=\"mi\">2</span>\n    <span class=\"n\">note_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"s1\">&#39;,&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">note</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;,&#39;</span><span class=\"p\">)[:</span><span class=\"n\">temp</span><span class=\"p\">])</span>\n        <span class=\"k\">for</span> <span class=\"n\">note</span> <span class=\"ow\">in</span> <span class=\"n\">note_list</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"n\">not_found</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">([])</span>\n    <span class=\"n\">num_found</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">for</span> <span class=\"n\">aid</span> <span class=\"ow\">in</span> <span class=\"n\">unrecovered_aid_list</span><span class=\"p\">:</span>\n        <span class=\"n\">gid</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_gids</span><span class=\"p\">(</span><span class=\"n\">aid</span><span class=\"p\">)</span>\n        <span class=\"n\">unixtime</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_unixtime</span><span class=\"p\">(</span><span class=\"n\">gid</span><span class=\"p\">)</span>\n        <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">gid_list</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">gid</span><span class=\"p\">)</span>\n        <span class=\"n\">note</span> <span class=\"o\">=</span> <span class=\"n\">note_list</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span>\n\n        <span class=\"c1\"># Find siblings in the same car</span>\n        <span class=\"n\">sibling_gid_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"n\">gid_</span>\n            <span class=\"k\">for</span> <span class=\"n\">gid_</span><span class=\"p\">,</span> <span class=\"n\">note_</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">,</span> <span class=\"n\">note_list</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">note_</span> <span class=\"o\">==</span> <span class=\"n\">note</span>\n        <span class=\"p\">]</span>\n\n        <span class=\"c1\"># Get valid GPS</span>\n        <span class=\"n\">gps_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_gps</span><span class=\"p\">(</span><span class=\"n\">sibling_gid_list</span><span class=\"p\">)</span>\n        <span class=\"n\">flag_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"n\">gps</span> <span class=\"o\">!=</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">gps</span> <span class=\"ow\">in</span> <span class=\"n\">gps_list</span> <span class=\"p\">]</span>\n        <span class=\"n\">gid_list_</span>  <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">sibling_gid_list</span><span class=\"p\">,</span> <span class=\"n\">flag_list</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># If found, get closest image</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">gid_list_</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">gps_list_</span>  <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_gps</span><span class=\"p\">(</span><span class=\"n\">gid_list_</span><span class=\"p\">)</span>\n            <span class=\"n\">unixtime_list_</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_unixtime</span><span class=\"p\">(</span><span class=\"n\">gid_list_</span><span class=\"p\">)</span>\n            <span class=\"c1\"># Find closest</span>\n            <span class=\"n\">closest_diff</span><span class=\"p\">,</span> <span class=\"n\">closest_gps</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">inf</span><span class=\"p\">,</span> <span class=\"kc\">None</span>\n            <span class=\"k\">for</span> <span class=\"n\">unixtime_</span><span class=\"p\">,</span> <span class=\"n\">gps_</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">unixtime_list_</span><span class=\"p\">,</span> <span class=\"n\">gps_list_</span><span class=\"p\">):</span>\n                <span class=\"n\">diff</span> <span class=\"o\">=</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">unixtime</span> <span class=\"o\">-</span> <span class=\"n\">unixtime_</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">diff</span> <span class=\"o\">&lt;</span> <span class=\"n\">closest_diff</span> <span class=\"ow\">and</span> <span class=\"n\">gps_</span> <span class=\"o\">!=</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n                    <span class=\"n\">closest_diff</span> <span class=\"o\">=</span> <span class=\"n\">diff</span>\n                    <span class=\"n\">closest_gps</span> <span class=\"o\">=</span> <span class=\"n\">gps_</span>\n            <span class=\"c1\"># Assign closest</span>\n            <span class=\"k\">if</span> <span class=\"n\">closest_gps</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">closest_diff</span> <span class=\"o\">&lt;=</span> <span class=\"n\">min_diff</span><span class=\"p\">:</span>\n                <span class=\"n\">recovered_aid_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">aid</span><span class=\"p\">)</span>\n                <span class=\"n\">recovered_gps_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">closest_gps</span><span class=\"p\">)</span>\n                <span class=\"n\">recovered_dist_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">closest_diff</span><span class=\"p\">)</span>\n                <span class=\"n\">num_found</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"n\">closest_diff</span> <span class=\"o\">//</span> <span class=\"mi\">3600</span>\n                <span class=\"n\">closest_diff</span> <span class=\"o\">%=</span> <span class=\"mi\">3600</span>\n                <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">closest_diff</span> <span class=\"o\">//</span> <span class=\"mi\">60</span>\n                <span class=\"n\">closest_diff</span> <span class=\"o\">%=</span> <span class=\"mi\">60</span>\n                <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">closest_diff</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;FOUND LOCATION FOR AID </span><span class=\"si\">%d</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">aid</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\t</span><span class=\"s1\">DIFF   : </span><span class=\"si\">%d</span><span class=\"s1\"> H, </span><span class=\"si\">%d</span><span class=\"s1\"> M, </span><span class=\"si\">%d</span><span class=\"s1\"> S&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\t</span><span class=\"s1\">NEW GPS: </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">closest_gps</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">not_found</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">note</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">not_found</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">note</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"si\">%d</span><span class=\"s1\"> \\ </span><span class=\"si\">%d</span><span class=\"s1\"> \\ </span><span class=\"si\">%d</span><span class=\"s1\"> \\ </span><span class=\"si\">%d</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">num_all</span><span class=\"p\">,</span> <span class=\"n\">num_bad</span><span class=\"p\">,</span> <span class=\"n\">num_unrecovered</span><span class=\"p\">,</span> <span class=\"n\">num_found</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n    <span class=\"n\">num_recovered</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">recovered_aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">num_unrecovered</span> <span class=\"o\">=</span> <span class=\"n\">num_bad</span> <span class=\"o\">-</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">recovered_aid_list</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Missing GPS: </span><span class=\"si\">%d</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">num_bad</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Recovered  : </span><span class=\"si\">%d</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">num_recovered</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Unrecovered: </span><span class=\"si\">%d</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">num_unrecovered</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Not Found  : </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">not_found</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">recovered_aid_list</span><span class=\"p\">,</span> <span class=\"n\">recovered_gps_list</span><span class=\"p\">,</span> <span class=\"n\">recovered_dist_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"commit_ggr_fix_gps\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.commit_ggr_fix_gps\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">commit_ggr_fix_gps</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"kc\">False</span><span class=\"p\">:</span>\n        <span class=\"n\">vals</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">compute_ggr_fix_gps_contributors_aids</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"n\">recovered_aid_list</span><span class=\"p\">,</span> <span class=\"n\">recovered_gps_list</span><span class=\"p\">,</span> <span class=\"n\">recovered_dist_list</span> <span class=\"o\">=</span> <span class=\"n\">vals</span>\n        <span class=\"n\">recovered_gid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_gids</span><span class=\"p\">(</span><span class=\"n\">recovered_aid_list</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">vals</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">compute_ggr_fix_gps_contributors_gids</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"n\">recovered_gid_list</span><span class=\"p\">,</span> <span class=\"n\">recovered_gps_list</span><span class=\"p\">,</span> <span class=\"n\">recovered_dist_list</span> <span class=\"o\">=</span> <span class=\"n\">vals</span>\n\n    <span class=\"n\">zipped</span> <span class=\"o\">=</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">recovered_gid_list</span><span class=\"p\">,</span> <span class=\"n\">recovered_gps_list</span><span class=\"p\">,</span> <span class=\"n\">recovered_dist_list</span><span class=\"p\">)</span>\n    <span class=\"n\">assignment_dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"k\">for</span> <span class=\"n\">gid</span><span class=\"p\">,</span> <span class=\"n\">gps</span><span class=\"p\">,</span> <span class=\"n\">dist</span> <span class=\"ow\">in</span> <span class=\"n\">zipped</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">gid</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">assignment_dict</span><span class=\"p\">:</span>\n            <span class=\"n\">assignment_dict</span><span class=\"p\">[</span><span class=\"n\">gid</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">assignment_dict</span><span class=\"p\">[</span><span class=\"n\">gid</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">dist</span><span class=\"p\">,</span> <span class=\"n\">gps</span><span class=\"p\">))</span>\n\n    <span class=\"n\">assignment_gid_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">assignment_gps_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">assignment_gid</span> <span class=\"ow\">in</span> <span class=\"n\">assignment_dict</span><span class=\"p\">:</span>\n        <span class=\"n\">assignment_list</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">assignment_dict</span><span class=\"p\">[</span><span class=\"n\">assignment_gid</span><span class=\"p\">])</span>\n        <span class=\"n\">assignment_gps</span> <span class=\"o\">=</span> <span class=\"n\">assignment_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"n\">assignment_gid_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">assignment_gid</span><span class=\"p\">)</span>\n        <span class=\"n\">assignment_gps_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">assignment_gps</span><span class=\"p\">)</span>\n\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_image_gps</span><span class=\"p\">(</span><span class=\"n\">assignment_gid_list</span><span class=\"p\">,</span> <span class=\"n\">assignment_gps_list</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"merge_ggr_staged_annots_marriage\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.merge_ggr_staged_annots_marriage\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">merge_ggr_staged_annots_marriage</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">user_id_list</span><span class=\"p\">,</span> <span class=\"n\">user_dict</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">index_list</span><span class=\"p\">,</span> <span class=\"n\">min_overlap</span><span class=\"o\">=</span><span class=\"mf\">0.10</span><span class=\"p\">):</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">itertools</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.other.detectfuncs</span> <span class=\"k\">import</span> <span class=\"n\">general_parse_gt_annots</span><span class=\"p\">,</span> <span class=\"n\">general_overlap</span>\n\n    <span class=\"n\">gt_dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"k\">for</span> <span class=\"n\">aid</span> <span class=\"ow\">in</span> <span class=\"n\">aid_list</span><span class=\"p\">:</span>\n        <span class=\"n\">gt</span> <span class=\"o\">=</span> <span class=\"n\">general_parse_gt_annots</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">aid</span><span class=\"p\">])[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">gt_dict</span><span class=\"p\">[</span><span class=\"n\">aid</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">gt</span>\n\n    <span class=\"n\">marriage_user_id_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">length</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">user_id_list</span><span class=\"p\">),</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span class=\"n\">padding</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">user_id_list</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">length</span>\n        <span class=\"n\">combination_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">itertools</span><span class=\"o\">.</span><span class=\"n\">combinations</span><span class=\"p\">(</span><span class=\"n\">user_id_list</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"p\">))</span>\n        <span class=\"k\">for</span> <span class=\"n\">combination</span> <span class=\"ow\">in</span> <span class=\"n\">combination_list</span><span class=\"p\">:</span>\n            <span class=\"n\">combination</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">combination</span><span class=\"p\">)</span>\n            <span class=\"n\">combination</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">padding</span>\n            <span class=\"n\">marriage_user_id_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"n\">combination</span><span class=\"p\">))</span>\n\n    <span class=\"n\">marriage_aid_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">user_id1</span><span class=\"p\">,</span> <span class=\"n\">user_id2</span><span class=\"p\">,</span> <span class=\"n\">user_id3</span> <span class=\"ow\">in</span> <span class=\"n\">marriage_user_id_list</span><span class=\"p\">:</span>\n        <span class=\"n\">aid_list1</span> <span class=\"o\">=</span> <span class=\"n\">user_dict</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">user_id1</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">])</span>\n        <span class=\"n\">aid_list2</span> <span class=\"o\">=</span> <span class=\"n\">user_dict</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">user_id2</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">])</span>\n        <span class=\"n\">aid_list3</span> <span class=\"o\">=</span> <span class=\"n\">user_dict</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">user_id3</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">])</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">aid1</span> <span class=\"ow\">in</span> <span class=\"n\">aid_list1</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">aid2</span> <span class=\"ow\">in</span> <span class=\"n\">aid_list2</span><span class=\"p\">:</span>\n                <span class=\"k\">for</span> <span class=\"n\">aid3</span> <span class=\"ow\">in</span> <span class=\"n\">aid_list3</span><span class=\"p\">:</span>\n                    <span class=\"n\">marriage</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">,</span> <span class=\"n\">aid3</span><span class=\"p\">]</span>\n                    <span class=\"n\">padding</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">marriage</span><span class=\"p\">)</span>\n                    <span class=\"n\">marriage</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">aid</span> <span class=\"k\">for</span> <span class=\"n\">aid</span> <span class=\"ow\">in</span> <span class=\"n\">marriage</span> <span class=\"k\">if</span> <span class=\"n\">aid</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">]</span>\n                    <span class=\"n\">marriage</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">marriage</span><span class=\"p\">)</span>\n                    <span class=\"n\">padding</span> <span class=\"o\">-=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">marriage</span><span class=\"p\">)</span>\n                    <span class=\"n\">marriage</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">marriage</span><span class=\"p\">)</span>\n                    <span class=\"n\">marriage</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">padding</span>\n                    <span class=\"n\">marriage_aid_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"n\">marriage</span><span class=\"p\">))</span>\n\n    <span class=\"n\">marriage_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">marriage_aids</span> <span class=\"ow\">in</span> <span class=\"n\">marriage_aid_list</span><span class=\"p\">:</span>\n        <span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">,</span> <span class=\"n\">aid3</span> <span class=\"o\">=</span> <span class=\"n\">marriage_aids</span>\n        <span class=\"k\">assert</span> <span class=\"n\">aid1</span> <span class=\"ow\">in</span> <span class=\"n\">aid_list</span> <span class=\"ow\">and</span> <span class=\"n\">aid1</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span>\n        <span class=\"k\">assert</span> <span class=\"n\">aid2</span> <span class=\"ow\">in</span> <span class=\"n\">aid_list</span> <span class=\"ow\">or</span>  <span class=\"n\">aid2</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n        <span class=\"k\">assert</span> <span class=\"n\">aid3</span> <span class=\"ow\">in</span> <span class=\"n\">aid_list</span> <span class=\"ow\">or</span>  <span class=\"n\">aid3</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n\n        <span class=\"n\">aid_list_</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">,</span> <span class=\"n\">aid3</span><span class=\"p\">]</span>\n        <span class=\"n\">missing</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aid_list_</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">aid_list_</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n\n        <span class=\"n\">gt1</span> <span class=\"o\">=</span> <span class=\"n\">gt_dict</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"n\">gt2</span> <span class=\"o\">=</span> <span class=\"n\">gt_dict</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">aid2</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"n\">gt3</span> <span class=\"o\">=</span> <span class=\"n\">gt_dict</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">aid3</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n\n        <span class=\"n\">overlap1</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span> <span class=\"k\">if</span> <span class=\"kc\">None</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"n\">gt1</span><span class=\"p\">,</span> <span class=\"n\">gt2</span><span class=\"p\">]</span> <span class=\"k\">else</span> <span class=\"n\">general_overlap</span><span class=\"p\">([</span><span class=\"n\">gt1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"n\">gt2</span><span class=\"p\">])[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">overlap2</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span> <span class=\"k\">if</span> <span class=\"kc\">None</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"n\">gt1</span><span class=\"p\">,</span> <span class=\"n\">gt3</span><span class=\"p\">]</span> <span class=\"k\">else</span> <span class=\"n\">general_overlap</span><span class=\"p\">([</span><span class=\"n\">gt1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"n\">gt3</span><span class=\"p\">])[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">overlap3</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span> <span class=\"k\">if</span> <span class=\"kc\">None</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"n\">gt2</span><span class=\"p\">,</span> <span class=\"n\">gt3</span><span class=\"p\">]</span> <span class=\"k\">else</span> <span class=\"n\">general_overlap</span><span class=\"p\">([</span><span class=\"n\">gt2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"n\">gt3</span><span class=\"p\">])[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n        <span class=\"c1\"># Assert min_overlap conditions</span>\n        <span class=\"n\">overlap1</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span> <span class=\"k\">if</span> <span class=\"n\">overlap1</span> <span class=\"o\">&lt;</span> <span class=\"n\">min_overlap</span> <span class=\"k\">else</span> <span class=\"n\">overlap1</span>\n        <span class=\"n\">overlap2</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span> <span class=\"k\">if</span> <span class=\"n\">overlap2</span> <span class=\"o\">&lt;</span> <span class=\"n\">min_overlap</span> <span class=\"k\">else</span> <span class=\"n\">overlap2</span>\n        <span class=\"n\">overlap3</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span> <span class=\"k\">if</span> <span class=\"n\">overlap3</span> <span class=\"o\">&lt;</span> <span class=\"n\">min_overlap</span> <span class=\"k\">else</span> <span class=\"n\">overlap3</span>\n\n        <span class=\"n\">score</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">overlap1</span> <span class=\"o\">+</span> <span class=\"n\">overlap2</span> <span class=\"o\">+</span> <span class=\"n\">overlap3</span><span class=\"p\">)</span>\n\n        <span class=\"n\">marriage</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">missing</span><span class=\"p\">,</span> <span class=\"n\">score</span><span class=\"p\">,</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">marriage_aids</span><span class=\"p\">)]</span>\n        <span class=\"n\">marriage_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">marriage</span><span class=\"p\">)</span>\n\n    <span class=\"n\">marriage_list</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">marriage_list</span><span class=\"p\">,</span> <span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"n\">segment_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">married_aid_set</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">([])</span>\n    <span class=\"k\">for</span> <span class=\"n\">missing</span><span class=\"p\">,</span> <span class=\"n\">score</span><span class=\"p\">,</span> <span class=\"n\">marriage_aids</span> <span class=\"ow\">in</span> <span class=\"n\">marriage_list</span><span class=\"p\">:</span>\n        <span class=\"n\">polygamy</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">married_aid_set</span> <span class=\"o\">&amp;</span> <span class=\"n\">marriage_aids</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">polygamy</span><span class=\"p\">:</span>\n            <span class=\"n\">marriage_aids</span> <span class=\"o\">=</span> <span class=\"n\">marriage_aids</span> <span class=\"o\">-</span> <span class=\"p\">{</span><span class=\"kc\">None</span><span class=\"p\">}</span>\n            <span class=\"n\">married_aid_set</span> <span class=\"o\">=</span> <span class=\"n\">married_aid_set</span> <span class=\"o\">|</span> <span class=\"n\">marriage_aids</span>\n            <span class=\"n\">segment_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">marriage_aids</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">segment_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"merge_ggr_staged_annots_cluster\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.merge_ggr_staged_annots_cluster\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">merge_ggr_staged_annots_cluster</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">user_id_list</span><span class=\"p\">,</span> <span class=\"n\">user_dict</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">index_list</span><span class=\"p\">,</span> <span class=\"n\">min_overlap</span><span class=\"o\">=</span><span class=\"mf\">0.25</span><span class=\"p\">):</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.other.detectfuncs</span> <span class=\"k\">import</span> <span class=\"n\">general_parse_gt_annots</span><span class=\"p\">,</span> <span class=\"n\">general_overlap</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">sklearn</span> <span class=\"k\">import</span> <span class=\"n\">cluster</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">scipy</span> <span class=\"k\">import</span> <span class=\"n\">sparse</span>\n\n    <span class=\"n\">num_clusters</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">around</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">user_id_list</span><span class=\"p\">)))</span>\n\n    <span class=\"c1\">##############</span>\n\n    <span class=\"n\">gt_list</span><span class=\"p\">,</span> <span class=\"n\">species_set</span> <span class=\"o\">=</span> <span class=\"n\">general_parse_gt_annots</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">connectivity</span> <span class=\"o\">=</span> <span class=\"n\">general_overlap</span><span class=\"p\">(</span><span class=\"n\">gt_list</span><span class=\"p\">,</span> <span class=\"n\">gt_list</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Cannot match with little overlap</span>\n    <span class=\"n\">connectivity</span><span class=\"p\">[</span><span class=\"n\">connectivity</span> <span class=\"o\">&lt;</span> <span class=\"n\">min_overlap</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n    <span class=\"c1\"># Cannot match against your own aid</span>\n    <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">fill_diagonal</span><span class=\"p\">(</span><span class=\"n\">connectivity</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Cannot match against your own reviewer</span>\n    <span class=\"k\">for</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">finish</span> <span class=\"ow\">in</span> <span class=\"n\">index_list</span><span class=\"p\">:</span>\n        <span class=\"n\">connectivity</span><span class=\"p\">[</span><span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">finish</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">finish</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n    <span class=\"c1\"># Ensure that the matrix is symmetric, which it should always be</span>\n    <span class=\"n\">connectivity</span> <span class=\"o\">=</span> <span class=\"n\">sparse</span><span class=\"o\">.</span><span class=\"n\">csr_matrix</span><span class=\"p\">(</span><span class=\"n\">connectivity</span><span class=\"p\">)</span>\n\n    <span class=\"n\">algorithm</span> <span class=\"o\">=</span> <span class=\"n\">cluster</span><span class=\"o\">.</span><span class=\"n\">AgglomerativeClustering</span><span class=\"p\">(</span>\n        <span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"n\">num_clusters</span><span class=\"p\">,</span>\n        <span class=\"n\">linkage</span><span class=\"o\">=</span><span class=\"s2\">&quot;average&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">affinity</span><span class=\"o\">=</span><span class=\"s2\">&quot;cityblock&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">connectivity</span><span class=\"o\">=</span><span class=\"n\">connectivity</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"n\">bbox_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_bboxes</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">vstack</span><span class=\"p\">(</span><span class=\"n\">bbox_list</span><span class=\"p\">)</span>\n    <span class=\"n\">algorithm</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">algorithm</span><span class=\"p\">,</span> <span class=\"s1\">&#39;labels_&#39;</span><span class=\"p\">):</span>\n        <span class=\"n\">prediction_list</span> <span class=\"o\">=</span> <span class=\"n\">algorithm</span><span class=\"o\">.</span><span class=\"n\">labels_</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">int</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">prediction_list</span> <span class=\"o\">=</span> <span class=\"n\">algorithm</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)</span>\n\n    <span class=\"c1\">##############</span>\n\n    <span class=\"n\">segment_dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"k\">for</span> <span class=\"n\">aid</span><span class=\"p\">,</span> <span class=\"n\">prediction</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">prediction_list</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">prediction</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">segment_dict</span><span class=\"p\">:</span>\n            <span class=\"n\">segment_dict</span><span class=\"p\">[</span><span class=\"n\">prediction</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">([])</span>\n        <span class=\"n\">segment_dict</span><span class=\"p\">[</span><span class=\"n\">prediction</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">aid</span><span class=\"p\">)</span>\n    <span class=\"n\">segment_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">segment_dict</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">())</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">segment_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"merge_ggr_staged_annots\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.merge_ggr_staged_annots\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">merge_ggr_staged_annots</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">min_overlap</span><span class=\"o\">=</span><span class=\"mf\">0.25</span><span class=\"p\">,</span> <span class=\"n\">reviews_required</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">liberal_aoi</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Merge the staged annotations into a single set of actual annotations (with AoI)</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (IBEISController):  ibeis controller object</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs merge_ggr_staged_annots</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; from os.path import expanduser</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; # default_dbdir = join(&#39;/&#39;, &#39;data&#39;, &#39;ibeis&#39;, &#39;GGR2-IBEIS&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; default_dbdir = expanduser(join(&#39;~&#39;, &#39;data&#39;, &#39;GGR2-IBEIS&#39;))</span>\n<span class=\"sd\">        &gt;&gt;&gt; dbdir = ut.get_argval(&#39;--dbdir&#39;, type_=str, default=default_dbdir)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(dbdir=dbdir)</span>\n<span class=\"sd\">        &gt;&gt;&gt; new_aid_list, broken_gid_list = ibs.merge_ggr_staged_annots()</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&#39;Encountered %d invalid gids: %r&#39; % (len(broken_gid_list), broken_gid_list, ))</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_normalize_confidences</span><span class=\"p\">(</span><span class=\"n\">gt_list</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">index</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">gt_list</span><span class=\"p\">)):</span>\n            <span class=\"n\">gt</span> <span class=\"o\">=</span> <span class=\"n\">gt_list</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span>\n            <span class=\"n\">area</span> <span class=\"o\">=</span> <span class=\"n\">gt</span><span class=\"p\">[</span><span class=\"s1\">&#39;width&#39;</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">gt</span><span class=\"p\">[</span><span class=\"s1\">&#39;height&#39;</span><span class=\"p\">]</span>\n            <span class=\"n\">gt</span><span class=\"p\">[</span><span class=\"s1\">&#39;confidence&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">area</span>\n            <span class=\"n\">gt_list</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">gt</span>\n        <span class=\"k\">return</span> <span class=\"n\">gt_list</span>\n\n    <span class=\"n\">imageset_rowid</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_imageset_imgsetids_from_text</span><span class=\"p\">(</span><span class=\"s1\">&#39;DETECT&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">gid_list</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_imageset_gids</span><span class=\"p\">(</span><span class=\"n\">imageset_rowid</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># reviewed_list = ibs.get_image_reviewed(gid_list)</span>\n    <span class=\"c1\"># gid_list = ut.filter_items(gid_list, reviewed_list)</span>\n\n    <span class=\"n\">metadata_dict_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_metadata</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">aids_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_aids</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">,</span> <span class=\"n\">is_staged</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"n\">existing_aid_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">new_gid_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">new_bbox_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">new_interest_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n    <span class=\"n\">zipped</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">,</span> <span class=\"n\">metadata_dict_list</span><span class=\"p\">,</span> <span class=\"n\">aids_list</span><span class=\"p\">))</span>\n    <span class=\"c1\"># zipped = zipped[:10]</span>\n\n    <span class=\"n\">broken_gid_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">gid</span><span class=\"p\">,</span> <span class=\"n\">metadata_dict</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span> <span class=\"ow\">in</span> <span class=\"n\">zipped</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Processing gid = </span><span class=\"si\">%r</span><span class=\"s1\"> with </span><span class=\"si\">%d</span><span class=\"s1\"> annots&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">gid</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">),</span> <span class=\"p\">))</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n            <span class=\"k\">continue</span>\n\n        <span class=\"n\">staged</span> <span class=\"o\">=</span> <span class=\"n\">metadata_dict</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;staged&#39;</span><span class=\"p\">,</span> <span class=\"p\">{})</span>\n        <span class=\"n\">sessions</span> <span class=\"o\">=</span> <span class=\"n\">staged</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;sessions&#39;</span><span class=\"p\">,</span> <span class=\"p\">{})</span>\n        <span class=\"n\">user_id_list</span> <span class=\"o\">=</span> <span class=\"n\">sessions</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;user_ids&#39;</span><span class=\"p\">,</span> <span class=\"p\">[])</span>\n        <span class=\"n\">user_id_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">user_id_list</span><span class=\"p\">))</span>\n        <span class=\"n\">user_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"n\">user_id</span><span class=\"p\">:</span> <span class=\"p\">[]</span>\n            <span class=\"k\">for</span> <span class=\"n\">user_id</span> <span class=\"ow\">in</span> <span class=\"n\">user_id_list</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"n\">user_id_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_staged_user_ids</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">aid</span><span class=\"p\">,</span> <span class=\"n\">user_id</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">user_id_list</span><span class=\"p\">):</span>\n                <span class=\"k\">assert</span> <span class=\"n\">user_id</span> <span class=\"ow\">in</span> <span class=\"n\">user_dict</span>\n                <span class=\"n\">user_dict</span><span class=\"p\">[</span><span class=\"n\">user_id</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">aid</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">AssertionError</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\t</span><span class=\"s1\">Bad GID&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">broken_gid_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">gid</span><span class=\"p\">)</span>\n            <span class=\"k\">continue</span>\n\n        <span class=\"n\">user_id_list</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">user_dict</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()))</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">user_id_list</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">reviews_required</span><span class=\"p\">:</span>\n            <span class=\"k\">continue</span>\n\n        <span class=\"c1\">##############</span>\n        <span class=\"n\">index_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">aid_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">user_id</span> <span class=\"ow\">in</span> <span class=\"n\">user_id_list</span><span class=\"p\">:</span>\n            <span class=\"n\">aid_list_</span> <span class=\"o\">=</span> <span class=\"n\">user_dict</span><span class=\"p\">[</span><span class=\"n\">user_id</span><span class=\"p\">]</span>\n            <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n            <span class=\"n\">aid_list</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">aid_list_</span><span class=\"p\">)</span>\n            <span class=\"n\">finish</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n            <span class=\"n\">index_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">finish</span><span class=\"p\">))</span>\n\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"kc\">False</span><span class=\"p\">:</span>\n                <span class=\"n\">segment_list</span> <span class=\"o\">=</span> <span class=\"n\">merge_ggr_staged_annots_cluster</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">user_id_list</span><span class=\"p\">,</span> <span class=\"n\">user_dict</span><span class=\"p\">,</span>\n                                                               <span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">index_list</span><span class=\"p\">,</span>\n                                                               <span class=\"n\">min_overlap</span><span class=\"o\">=</span><span class=\"n\">min_overlap</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">segment_list</span> <span class=\"o\">=</span> <span class=\"n\">merge_ggr_staged_annots_marriage</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">user_id_list</span><span class=\"p\">,</span> <span class=\"n\">user_dict</span><span class=\"p\">,</span>\n                                                                <span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">index_list</span><span class=\"p\">,</span>\n                                                                <span class=\"n\">min_overlap</span><span class=\"o\">=</span><span class=\"n\">min_overlap</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\t</span><span class=\"s1\">Invalid GID&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">broken_gid_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">gid</span><span class=\"p\">)</span>\n            <span class=\"k\">continue</span>\n\n        <span class=\"c1\">##############</span>\n\n        <span class=\"n\">existing_aid_list_</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_aids</span><span class=\"p\">(</span><span class=\"n\">gid</span><span class=\"p\">,</span> <span class=\"n\">is_staged</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"n\">existing_aid_list</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">existing_aid_list_</span><span class=\"p\">)</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">aid_set</span> <span class=\"ow\">in</span> <span class=\"n\">segment_list</span><span class=\"p\">:</span>\n            <span class=\"n\">aid_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">aid_set</span><span class=\"p\">)</span>\n            <span class=\"n\">bbox_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_bboxes</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n            <span class=\"n\">interest_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_interest</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n\n            <span class=\"n\">xtl_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"n\">ytl_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"n\">w_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"n\">h_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"n\">aoi_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">xtl</span><span class=\"p\">,</span> <span class=\"n\">ytl</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">h</span><span class=\"p\">),</span> <span class=\"n\">interest</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">bbox_list</span><span class=\"p\">,</span> <span class=\"n\">interest_list</span><span class=\"p\">):</span>\n                <span class=\"n\">xtl_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">xtl</span><span class=\"p\">)</span>\n                <span class=\"n\">ytl_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ytl</span><span class=\"p\">)</span>\n                <span class=\"n\">w_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"p\">)</span>\n                <span class=\"n\">h_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">h</span><span class=\"p\">)</span>\n                <span class=\"n\">aoi_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">interest</span><span class=\"p\">)</span>\n\n            <span class=\"n\">xtl</span> <span class=\"o\">=</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">xtl_list</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">xtl_list</span><span class=\"p\">)</span>\n            <span class=\"n\">ytl</span> <span class=\"o\">=</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">ytl_list</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">ytl_list</span><span class=\"p\">)</span>\n            <span class=\"n\">w</span>   <span class=\"o\">=</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">w_list</span><span class=\"p\">)</span>   <span class=\"o\">/</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">w_list</span><span class=\"p\">)</span>\n            <span class=\"n\">h</span>   <span class=\"o\">=</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">h_list</span><span class=\"p\">)</span>   <span class=\"o\">/</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">h_list</span><span class=\"p\">)</span>\n            <span class=\"n\">bbox</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">xtl</span><span class=\"p\">,</span> <span class=\"n\">ytl</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">h</span><span class=\"p\">)</span>\n            <span class=\"n\">aoi</span> <span class=\"o\">=</span> <span class=\"n\">aoi_list</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n            <span class=\"n\">majority</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"k\">if</span> <span class=\"n\">liberal_aoi</span> <span class=\"k\">else</span> <span class=\"p\">((</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">h_list</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">//</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n            <span class=\"n\">interest</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"k\">if</span> <span class=\"n\">aoi</span> <span class=\"o\">&gt;=</span> <span class=\"n\">majority</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n\n            <span class=\"n\">new_gid_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">gid</span><span class=\"p\">)</span>\n            <span class=\"n\">new_bbox_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">bbox</span><span class=\"p\">)</span>\n            <span class=\"n\">new_interest_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">interest</span><span class=\"p\">)</span>\n\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\t</span><span class=\"s1\">Segments = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">segment_list</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\t</span><span class=\"s1\">AIDS = </span><span class=\"si\">%d</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">segment_list</span><span class=\"p\">),</span> <span class=\"p\">))</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Performing delete of </span><span class=\"si\">%d</span><span class=\"s1\"> existing non-staged AIDS&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">existing_aid_list</span><span class=\"p\">),</span> <span class=\"p\">))</span>\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">delete_annots</span><span class=\"p\">(</span><span class=\"n\">existing_aid_list</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Adding </span><span class=\"si\">%d</span><span class=\"s1\"> new non-staged AIDS&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">new_gid_list</span><span class=\"p\">),</span> <span class=\"p\">))</span>\n    <span class=\"n\">new_aid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">add_annots</span><span class=\"p\">(</span><span class=\"n\">new_gid_list</span><span class=\"p\">,</span> <span class=\"n\">bbox_list</span><span class=\"o\">=</span><span class=\"n\">new_bbox_list</span><span class=\"p\">,</span>\n                                  <span class=\"n\">interest_list</span><span class=\"o\">=</span><span class=\"n\">new_interest_list</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">new_aid_list</span><span class=\"p\">,</span> <span class=\"n\">broken_gid_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"check_ggr_valid_aids\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.check_ggr_valid_aids\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">check_ggr_valid_aids</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">species</span><span class=\"o\">=</span><span class=\"s1\">&#39;zebra_grevys&#39;</span><span class=\"p\">,</span> <span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"mf\">0.75</span><span class=\"p\">,</span>\n                         <span class=\"n\">enable_grid</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n    <span class=\"n\">num_start</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Filter by species</span>\n    <span class=\"n\">aid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">filter_annotation_set</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">species</span><span class=\"o\">=</span><span class=\"n\">species</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Filter by viewpoint</span>\n    <span class=\"n\">viewpoint_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_viewpoints</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">aid_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">aid</span>\n        <span class=\"k\">for</span> <span class=\"n\">aid</span><span class=\"p\">,</span> <span class=\"n\">viewpoint</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">viewpoint_list</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">viewpoint</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"s1\">&#39;right&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">viewpoint</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"c1\"># Filter by confidence or AoI</span>\n    <span class=\"n\">interest_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_interest</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">metadata_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_metadata</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">confidence_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">metadata</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;confidence&#39;</span><span class=\"p\">,</span> <span class=\"p\">{})</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;localization&#39;</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">metadata</span> <span class=\"ow\">in</span> <span class=\"n\">metadata_list</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">excluded_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">metadata</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;excluded&#39;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">metadata</span> <span class=\"ow\">in</span> <span class=\"n\">metadata_list</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"n\">grid_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">metadata</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;turk&#39;</span><span class=\"p\">,</span> <span class=\"p\">{})</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;grid&#39;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">metadata</span> <span class=\"ow\">in</span> <span class=\"n\">metadata_list</span>\n    <span class=\"p\">]</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">enable_grid</span><span class=\"p\">:</span>\n        <span class=\"n\">grid_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kc\">False</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">grid_list</span><span class=\"p\">)</span>\n\n    <span class=\"n\">zipped</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">interest_list</span><span class=\"p\">,</span> <span class=\"n\">confidence_list</span><span class=\"p\">,</span> <span class=\"n\">excluded_list</span><span class=\"p\">,</span> <span class=\"n\">grid_list</span><span class=\"p\">))</span>\n    <span class=\"n\">aid_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">aid</span>\n        <span class=\"k\">for</span> <span class=\"n\">aid</span><span class=\"p\">,</span> <span class=\"n\">interest</span><span class=\"p\">,</span> <span class=\"n\">confidence</span><span class=\"p\">,</span> <span class=\"n\">excluded</span><span class=\"p\">,</span> <span class=\"n\">grid</span> <span class=\"ow\">in</span> <span class=\"n\">zipped</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">excluded</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">grid</span> <span class=\"ow\">and</span> <span class=\"p\">(</span><span class=\"n\">interest</span> <span class=\"ow\">or</span> <span class=\"n\">confidence</span> <span class=\"o\">&gt;</span> <span class=\"n\">threshold</span><span class=\"p\">)</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"n\">num_finish</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">num_difference</span> <span class=\"o\">=</span> <span class=\"n\">num_start</span> <span class=\"o\">-</span> <span class=\"n\">num_finish</span>\n    <span class=\"k\">if</span> <span class=\"n\">verbose</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Filtered out </span><span class=\"si\">%d</span><span class=\"s1\"> annotations from </span><span class=\"si\">%d</span><span class=\"s1\"> / </span><span class=\"si\">%d</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">num_difference</span><span class=\"p\">,</span> <span class=\"n\">num_finish</span><span class=\"p\">,</span> <span class=\"n\">num_start</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">aid_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"create_ggr_match_trees\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.create_ggr_match_trees\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">create_ggr_match_trees</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs create_ggr_match_trees</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; from os.path import expanduser</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; default_dbdir = join(&#39;/&#39;, &#39;data&#39;, &#39;ibeis&#39;, &#39;GGR2-IBEIS&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; # default_dbdir = expanduser(join(&#39;~&#39;, &#39;data&#39;, &#39;GGR2-IBEIS&#39;))</span>\n<span class=\"sd\">        &gt;&gt;&gt; dbdir = ut.get_argval(&#39;--dbdir&#39;, type_=str, default=default_dbdir)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(dbdir=dbdir)</span>\n<span class=\"sd\">        &gt;&gt;&gt; imageset_rowid_list = ibs.create_ggr_match_trees()</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">imageset_rowid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_imgsetids</span><span class=\"p\">()</span>\n    <span class=\"n\">imageset_text_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_imageset_text</span><span class=\"p\">(</span><span class=\"n\">imageset_rowid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">tag_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">parse_ggr_name</span><span class=\"p\">(</span><span class=\"n\">imageset_text</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">imageset_text</span> <span class=\"ow\">in</span> <span class=\"n\">imageset_text_list</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"c1\"># Check that merged cars exist</span>\n    <span class=\"n\">value_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">(</span><span class=\"n\">tag</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">tag</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">imageset_rowid</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">imageset_rowid</span><span class=\"p\">,</span> <span class=\"n\">tag</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">imageset_rowid_list</span><span class=\"p\">,</span> <span class=\"n\">tag_list</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">tag</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">car_dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"k\">for</span> <span class=\"n\">number</span><span class=\"p\">,</span> <span class=\"n\">letter</span><span class=\"p\">,</span> <span class=\"n\">imageset_rowid</span> <span class=\"ow\">in</span> <span class=\"n\">value_list</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">number</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">car_dict</span><span class=\"p\">:</span>\n            <span class=\"n\">car_dict</span><span class=\"p\">[</span><span class=\"n\">number</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">car_dict</span><span class=\"p\">[</span><span class=\"n\">number</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">imageset_rowid</span><span class=\"p\">)</span>\n\n    <span class=\"n\">car_key_list</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">car_dict</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()))</span>\n    <span class=\"k\">for</span> <span class=\"n\">car_key</span> <span class=\"ow\">in</span> <span class=\"n\">car_key_list</span><span class=\"p\">:</span>\n        <span class=\"n\">imageset_rowid_list_</span> <span class=\"o\">=</span> <span class=\"n\">car_dict</span><span class=\"p\">[</span><span class=\"n\">car_key</span><span class=\"p\">]</span>\n        <span class=\"n\">gids_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_imageset_gids</span><span class=\"p\">(</span><span class=\"n\">imageset_rowid_list_</span><span class=\"p\">)</span>\n        <span class=\"n\">gid_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">gids_list</span><span class=\"p\">)</span>\n        <span class=\"n\">imageset_text_</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;GGR2,</span><span class=\"si\">%d</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">car_key</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">imageset_text_</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">imageset_text_list</span><span class=\"p\">:</span>\n            <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_image_imagesettext</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">imageset_text_</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># Partition Cars</span>\n    <span class=\"n\">imageset_rowid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_imgsetids</span><span class=\"p\">()</span>\n    <span class=\"n\">imageset_text_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_imageset_text</span><span class=\"p\">(</span><span class=\"n\">imageset_rowid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">tag_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">parse_ggr_name</span><span class=\"p\">(</span><span class=\"n\">imageset_text</span><span class=\"p\">,</span> <span class=\"n\">require_short</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">imageset_text</span> <span class=\"ow\">in</span> <span class=\"n\">imageset_text_list</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">value_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">(</span><span class=\"n\">tag</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">imageset_rowid</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">imageset_rowid</span><span class=\"p\">,</span> <span class=\"n\">tag</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">imageset_rowid_list</span><span class=\"p\">,</span> <span class=\"n\">tag_list</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">tag</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">value_list</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">value_list</span><span class=\"p\">)</span>\n\n    <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n    <span class=\"n\">species_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">(</span><span class=\"s1\">&#39;Zebra High&#39;</span><span class=\"p\">,</span>   <span class=\"s1\">&#39;zebra_grevys&#39;</span><span class=\"p\">,</span>        <span class=\"mf\">0.75</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s1\">&#39;Zebra Low&#39;</span><span class=\"p\">,</span>    <span class=\"s1\">&#39;zebra_grevys&#39;</span><span class=\"p\">,</span>        <span class=\"mf\">0.0</span><span class=\"p\">,</span>  <span class=\"mi\">6</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s1\">&#39;Giraffe High&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;giraffe_reticulated&#39;</span><span class=\"p\">,</span> <span class=\"mf\">0.75</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s1\">&#39;Giraffe Low&#39;</span><span class=\"p\">,</span>  <span class=\"s1\">&#39;giraffe_reticulated&#39;</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span>  <span class=\"mi\">5</span><span class=\"p\">),</span>\n    <span class=\"p\">]</span>\n    <span class=\"k\">for</span> <span class=\"n\">tag</span><span class=\"p\">,</span> <span class=\"n\">species</span><span class=\"p\">,</span> <span class=\"n\">threshold</span><span class=\"p\">,</span> <span class=\"n\">levels</span> <span class=\"ow\">in</span> <span class=\"n\">species_list</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Processing Tag: </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">tag</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n        <span class=\"n\">len_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">imageset_rowid_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">number</span><span class=\"p\">,</span> <span class=\"n\">imageset_rowid</span> <span class=\"ow\">in</span> <span class=\"n\">value_list</span><span class=\"p\">:</span>\n            <span class=\"c1\"># print(&#39;Processing car %r (ImageSet ID: %r)&#39; % (number, imageset_rowid, ))</span>\n            <span class=\"n\">aid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_imageset_aids</span><span class=\"p\">(</span><span class=\"n\">imageset_rowid</span><span class=\"p\">)</span>\n            <span class=\"n\">aid_list_</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">check_ggr_valid_aids</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">species</span><span class=\"o\">=</span><span class=\"n\">species</span><span class=\"p\">,</span> <span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"n\">threshold</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aid_list_</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"n\">imageset_rowid_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">imageset_rowid</span><span class=\"p\">)</span>\n                <span class=\"n\">len_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aid_list_</span><span class=\"p\">))</span>\n\n        <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"n\">partition_ordered_list_equal_sum_recursive</span><span class=\"p\">(</span><span class=\"n\">len_list</span><span class=\"p\">,</span> <span class=\"n\">imageset_rowid_list</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">levels</span><span class=\"p\">)</span>\n        <span class=\"n\">len_list_</span><span class=\"p\">,</span> <span class=\"n\">imageset_rowid_list_</span> <span class=\"o\">=</span> <span class=\"n\">args</span>\n        <span class=\"n\">print_partition_sizes_recursive</span><span class=\"p\">(</span><span class=\"n\">len_list_</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">)</span>\n        <span class=\"n\">create_ggr_match_leaves_recursive</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">tag</span><span class=\"p\">,</span> <span class=\"n\">imageset_rowid_list_</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"print_partition_sizes_recursive\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.print_partition_sizes_recursive\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">print_partition_sizes_recursive</span><span class=\"p\">(</span><span class=\"n\">vals</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">vals</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"mi\">0</span>\n\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">vals</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"mi\">0</span>\n\n    <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">vals</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">vals</span><span class=\"p\">)</span>\n\n    <span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">for</span> <span class=\"n\">idx</span><span class=\"p\">,</span> <span class=\"n\">val</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">vals</span><span class=\"p\">):</span>\n        <span class=\"n\">length</span> <span class=\"o\">+=</span> <span class=\"n\">print_partition_sizes_recursive</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">level</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">*</span> <span class=\"n\">index</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">idx</span><span class=\"p\">)</span>\n\n    <span class=\"n\">prefix</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\t</span><span class=\"s1\">&#39;</span> <span class=\"o\">*</span> <span class=\"n\">level</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"si\">%s</span><span class=\"s1\">Level </span><span class=\"si\">%d</span><span class=\"s1\">, </span><span class=\"si\">%d</span><span class=\"s1\"> - </span><span class=\"si\">%d</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">prefix</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">length</span></div>\n\n\n<div class=\"viewcode-block\" id=\"create_ggr_match_leaves_recursive\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.create_ggr_match_leaves_recursive\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">create_ggr_match_leaves_recursive</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">tag</span><span class=\"p\">,</span> <span class=\"n\">imageset_rowid_list</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">):</span>\n    <span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">imageset_rowid_list</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">imageset_rowid_list</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span>\n\n    <span class=\"n\">imageset_rowid</span> <span class=\"o\">=</span> <span class=\"n\">imageset_rowid_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">imageset_rowid</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">imageset_rowid_list</span>\n\n    <span class=\"n\">imageset_rowid_list_</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">idx</span><span class=\"p\">,</span> <span class=\"n\">val</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">imageset_rowid_list</span><span class=\"p\">):</span>\n        <span class=\"n\">imageset_rowid_list_</span> <span class=\"o\">+=</span> <span class=\"n\">create_ggr_match_leaves_recursive</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">tag</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">level</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">*</span> <span class=\"n\">index</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">idx</span><span class=\"p\">)</span>\n\n    <span class=\"n\">gid_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_imageset_gids</span><span class=\"p\">(</span><span class=\"n\">imageset_rowid_list_</span><span class=\"p\">))</span>\n    <span class=\"n\">imageset_text_</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Leaf - </span><span class=\"si\">%s</span><span class=\"s1\"> - </span><span class=\"si\">%d</span><span class=\"s1\"> - </span><span class=\"si\">%d</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">tag</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Setting </span><span class=\"si\">%d</span><span class=\"s1\"> for </span><span class=\"si\">%d</span><span class=\"s1\"> to </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">imageset_rowid_list_</span><span class=\"p\">),</span> <span class=\"n\">imageset_text_</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n    <span class=\"n\">imageset_text_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_imageset_text</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_imgsetids</span><span class=\"p\">())</span>\n    <span class=\"k\">if</span> <span class=\"n\">imageset_text_</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">imageset_text_list</span><span class=\"p\">:</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_image_imagesettext</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">imageset_text_</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">))</span>\n        <span class=\"n\">imageset_rowid</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_imageset_imgsetids_from_text</span><span class=\"p\">(</span><span class=\"n\">imageset_text_</span><span class=\"p\">)</span>\n        <span class=\"n\">metadata</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_imageset_metadata</span><span class=\"p\">(</span><span class=\"n\">imageset_rowid</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"s1\">&#39;leaf&#39;</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">metadata</span>\n        <span class=\"n\">metadata</span><span class=\"p\">[</span><span class=\"s1\">&#39;leaf&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;imageset_rowid_list&#39;</span><span class=\"p\">:</span> <span class=\"n\">imageset_rowid_list_</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_imageset_metadata</span><span class=\"p\">([</span><span class=\"n\">imageset_rowid</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"n\">metadata</span><span class=\"p\">])</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">imageset_rowid_list_</span></div>\n\n\n<div class=\"viewcode-block\" id=\"partition_ordered_list_equal_sum_recursive\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.partition_ordered_list_equal_sum_recursive\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">partition_ordered_list_equal_sum_recursive</span><span class=\"p\">(</span><span class=\"n\">vals</span><span class=\"p\">,</span> <span class=\"n\">ids</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">level</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">vals</span><span class=\"p\">,</span> <span class=\"n\">ids</span>\n\n    <span class=\"n\">vals_</span> <span class=\"o\">=</span> <span class=\"n\">partition_ordered_list_equal_sum</span><span class=\"p\">(</span><span class=\"n\">vals</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">)</span>\n\n    <span class=\"n\">ids_</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">for</span> <span class=\"n\">val_</span> <span class=\"ow\">in</span> <span class=\"n\">vals_</span><span class=\"p\">:</span>\n        <span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">start</span> <span class=\"o\">+</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">val_</span><span class=\"p\">)</span>\n        <span class=\"n\">id_</span> <span class=\"o\">=</span> <span class=\"n\">ids</span><span class=\"p\">[</span><span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">end</span><span class=\"p\">]</span>\n        <span class=\"n\">ids_</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">id_</span><span class=\"p\">)</span>\n        <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">end</span>\n\n    <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">vals_</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">ids_</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">index</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">vals_</span><span class=\"p\">)):</span>\n        <span class=\"n\">temp_vals_</span> <span class=\"o\">=</span> <span class=\"n\">vals_</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span>\n        <span class=\"n\">temp_ids_</span> <span class=\"o\">=</span> <span class=\"n\">ids_</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span>\n\n        <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">temp_vals_</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">temp_ids_</span><span class=\"p\">)</span>\n        <span class=\"n\">temp_vals_</span><span class=\"p\">,</span> <span class=\"n\">temp_ids_</span> <span class=\"o\">=</span> <span class=\"n\">partition_ordered_list_equal_sum_recursive</span><span class=\"p\">(</span><span class=\"n\">temp_vals_</span><span class=\"p\">,</span> <span class=\"n\">temp_ids_</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">level</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n        <span class=\"n\">vals_</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">temp_vals_</span>\n        <span class=\"n\">ids_</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">temp_ids_</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">vals_</span><span class=\"p\">,</span> <span class=\"n\">ids_</span></div>\n\n\n<div class=\"viewcode-block\" id=\"partition_ordered_list_equal_sum\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.partition_ordered_list_equal_sum\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">partition_ordered_list_equal_sum</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Partition a sorted list a into k partitions</span>\n\n<span class=\"sd\">    Reference:</span>\n<span class=\"sd\">        https://stackoverflow.com/a/35518205</span>\n<span class=\"sd\">        https://gist.github.com/laowantong/ee675108eee64640e5f94f00d8edbcb4</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs partition_ordered_list_equal_sum</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; import random</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.ibsfuncs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; a = [random.randint(0,20) for x in range(50)]</span>\n<span class=\"sd\">        &gt;&gt;&gt; k = 10</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&#39;Partitioning {0} into {1} partitions&#39;.format(a, k))</span>\n<span class=\"sd\">        &gt;&gt;&gt; b = partition_ordered_list_equal_sum(a, k)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&#39;The best partitioning is {0}\\n    With heights {1}\\n&#39;.format(b, list(map(sum, b))))</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">]</span>\n    <span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"o\">&gt;=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">[[</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">a</span><span class=\"p\">]</span>\n    <span class=\"n\">partition_between</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"o\">//</span> <span class=\"n\">k</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)]</span>\n    <span class=\"n\">average_height</span> <span class=\"o\">=</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">))</span> <span class=\"o\">/</span> <span class=\"n\">k</span>\n    <span class=\"n\">best_score</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"n\">best_partitions</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"n\">starts</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">partition_between</span>\n        <span class=\"n\">ends</span> <span class=\"o\">=</span> <span class=\"n\">partition_between</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)]</span>\n        <span class=\"n\">partitions</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">starts</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]:</span><span class=\"n\">ends</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]]</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">)]</span>\n        <span class=\"n\">heights</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">sum</span><span class=\"p\">,</span> <span class=\"n\">partitions</span><span class=\"p\">))</span>\n\n        <span class=\"n\">abs_height_diffs</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">average_height</span> <span class=\"o\">-</span> <span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">heights</span><span class=\"p\">))</span>\n        <span class=\"n\">worst_partition_index</span> <span class=\"o\">=</span> <span class=\"n\">abs_height_diffs</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">abs_height_diffs</span><span class=\"p\">))</span>\n        <span class=\"n\">worst_height_diff</span> <span class=\"o\">=</span> <span class=\"n\">average_height</span> <span class=\"o\">-</span> <span class=\"n\">heights</span><span class=\"p\">[</span><span class=\"n\">worst_partition_index</span><span class=\"p\">]</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">best_score</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">worst_height_diff</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">best_score</span><span class=\"p\">:</span>\n            <span class=\"n\">best_score</span> <span class=\"o\">=</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">worst_height_diff</span><span class=\"p\">)</span>\n            <span class=\"n\">best_partitions</span> <span class=\"o\">=</span> <span class=\"n\">partitions</span>\n            <span class=\"n\">no_improvements_count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">no_improvements_count</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">worst_height_diff</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"ow\">or</span> <span class=\"n\">no_improvements_count</span> <span class=\"o\">&gt;</span> <span class=\"mi\">5</span> <span class=\"ow\">or</span> <span class=\"n\">count</span> <span class=\"o\">&gt;</span> <span class=\"mi\">100</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">best_partitions</span>\n        <span class=\"n\">count</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n        <span class=\"n\">move</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"k\">if</span> <span class=\"n\">worst_height_diff</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"mi\">1</span>\n        <span class=\"n\">bound_to_move</span> <span class=\"o\">=</span> <span class=\"mi\">0</span> <span class=\"k\">if</span> <span class=\"n\">worst_partition_index</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> \\\n                        <span class=\"k\">else</span> <span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"mi\">2</span> <span class=\"k\">if</span> <span class=\"n\">worst_partition_index</span> <span class=\"o\">==</span> <span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"mi\">1</span> \\\n                        <span class=\"k\">else</span> <span class=\"n\">worst_partition_index</span> <span class=\"o\">-</span> <span class=\"mi\">1</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">worst_height_diff</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">^</span> <span class=\"p\">(</span><span class=\"n\">heights</span><span class=\"p\">[</span><span class=\"n\">worst_partition_index</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">heights</span><span class=\"p\">[</span><span class=\"n\">worst_partition_index</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">])</span> \\\n                        <span class=\"k\">else</span> <span class=\"n\">worst_partition_index</span>\n        <span class=\"n\">direction</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"k\">if</span> <span class=\"n\">bound_to_move</span> <span class=\"o\">&lt;</span> <span class=\"n\">worst_partition_index</span> <span class=\"k\">else</span> <span class=\"mi\">1</span>\n        <span class=\"n\">partition_between</span><span class=\"p\">[</span><span class=\"n\">bound_to_move</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">move</span> <span class=\"o\">*</span> <span class=\"n\">direction</span></div>\n\n\n<div class=\"viewcode-block\" id=\"alias_common_coco_species\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.alias_common_coco_species\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">alias_common_coco_species</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"n\">aid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_aids</span><span class=\"p\">()</span>\n    <span class=\"n\">species_text_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_species_texts</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">alias_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">&#39;cat&#39;</span>                 <span class=\"p\">:</span> <span class=\"s1\">&#39;cat_domestic&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;cow&#39;</span>                 <span class=\"p\">:</span> <span class=\"s1\">&#39;cow_domestic&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;dog&#39;</span>                 <span class=\"p\">:</span> <span class=\"s1\">&#39;dog_domestic&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;horse&#39;</span>               <span class=\"p\">:</span> <span class=\"s1\">&#39;horse_domestic&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;sheep&#39;</span>               <span class=\"p\">:</span> <span class=\"s1\">&#39;sheep_domestic&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;elephant&#39;</span>            <span class=\"p\">:</span> <span class=\"s1\">&#39;elephant_savannah&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;giraffe&#39;</span>             <span class=\"p\">:</span> <span class=\"s1\">&#39;giraffe_reticulated&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;turtles&#39;</span>             <span class=\"p\">:</span> <span class=\"s1\">&#39;turtle_sea&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;wild_dog&#39;</span>            <span class=\"p\">:</span> <span class=\"s1\">&#39;dog_wild&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;whale_sharkbodyhalf&#39;</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;whale_shark&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;whale_sharkpart&#39;</span>     <span class=\"p\">:</span> <span class=\"s1\">&#39;whale_shark&#39;</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">species_fixed_text_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">alias_dict</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">species_text</span><span class=\"p\">,</span> <span class=\"n\">species_text</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">species_text</span> <span class=\"ow\">in</span> <span class=\"n\">species_text_list</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_annot_species</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">species_fixed_text_list</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"fix_coco_species\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.fix_coco_species\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">fix_coco_species</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">alias_common_coco_species</span><span class=\"p\">()</span>\n    <span class=\"n\">aid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_aids</span><span class=\"p\">()</span>\n    <span class=\"n\">species_text_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_species_texts</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">depc</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">depc_annot</span>\n    <span class=\"n\">species_text_list_</span> <span class=\"o\">=</span> <span class=\"n\">depc</span><span class=\"o\">.</span><span class=\"n\">get_property</span><span class=\"p\">(</span><span class=\"s1\">&#39;labeler&#39;</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"s1\">&#39;species&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">species_set</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">([</span><span class=\"s1\">&#39;zebra_grevys&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;zebra_plains&#39;</span><span class=\"p\">])</span>\n    <span class=\"n\">zipped</span> <span class=\"o\">=</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">species_text_list</span><span class=\"p\">,</span> <span class=\"n\">species_text_list_</span><span class=\"p\">)</span>\n    <span class=\"n\">species_fixed_text_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">species_text_</span> <span class=\"k\">if</span> <span class=\"n\">species_text</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;zebra&#39;</span> <span class=\"ow\">and</span> <span class=\"n\">species_text_</span> <span class=\"ow\">in</span> <span class=\"n\">species_set</span> <span class=\"k\">else</span> <span class=\"n\">species_text</span>\n        <span class=\"k\">for</span> <span class=\"n\">species_text</span><span class=\"p\">,</span> <span class=\"n\">species_text_</span> <span class=\"ow\">in</span> <span class=\"n\">zipped</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">species_fixed_text_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"s1\">&#39;zebra_plains&#39;</span> <span class=\"k\">if</span> <span class=\"n\">species_fixed_text</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;zebra&#39;</span> <span class=\"k\">else</span> <span class=\"n\">species_fixed_text</span>\n        <span class=\"k\">for</span> <span class=\"n\">species_fixed_text</span> <span class=\"ow\">in</span> <span class=\"n\">species_fixed_text_list</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_annot_species</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">species_fixed_text_list</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"princeton_process_encounters\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.princeton_process_encounters\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">princeton_process_encounters</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">input_file_path</span><span class=\"p\">,</span> <span class=\"n\">assert_valid</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"k\">assert</span> <span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">input_file_path</span><span class=\"p\">)</span>\n\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">input_file_path</span><span class=\"p\">,</span> <span class=\"s1\">&#39;r&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">input_file</span><span class=\"p\">:</span>\n        <span class=\"n\">header_line</span> <span class=\"o\">=</span> <span class=\"n\">input_file</span><span class=\"o\">.</span><span class=\"n\">readline</span><span class=\"p\">()</span>\n        <span class=\"n\">header_list</span> <span class=\"o\">=</span> <span class=\"n\">header_line</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;,&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">line_list</span> <span class=\"o\">=</span> <span class=\"n\">input_file</span><span class=\"o\">.</span><span class=\"n\">readlines</span><span class=\"p\">()</span>\n        <span class=\"n\">lines_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"n\">line</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;,&#39;</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">line_list</span>\n        <span class=\"p\">]</span>\n\n    <span class=\"n\">header_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"n\">_</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"n\">header_list</span> <span class=\"p\">]</span>\n    <span class=\"n\">imageset_text_set</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_imageset_text</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_imgsetids</span><span class=\"p\">(</span><span class=\"n\">is_special</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)))</span>\n\n    <span class=\"n\">seen_set</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">([])</span>\n    <span class=\"n\">invalid_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">duplicate_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n    <span class=\"n\">imageset_rowid_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">metadata_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">line_list</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">lines_list</span><span class=\"p\">):</span>\n        <span class=\"n\">metadata_dict</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">header_list</span><span class=\"p\">,</span> <span class=\"n\">line_list</span><span class=\"p\">))</span>\n        <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">metadata_dict</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">metadata_dict</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">:</span>\n                <span class=\"n\">metadata_dict</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"c1\"># Get primitives</span>\n        <span class=\"n\">imageset_text</span> <span class=\"o\">=</span> <span class=\"n\">metadata_dict</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s1\">&#39;Image_Set&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">found</span> <span class=\"o\">=</span> <span class=\"n\">imageset_text</span> <span class=\"ow\">in</span> <span class=\"n\">imageset_text_set</span>\n        <span class=\"c1\"># print(&#39;Processing %r (Found %s)&#39; % (imageset_text, found, ))</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">found</span><span class=\"p\">:</span>\n            <span class=\"n\">invalid_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">imageset_text</span><span class=\"p\">)</span>\n            <span class=\"k\">continue</span>\n        <span class=\"k\">if</span> <span class=\"n\">imageset_text</span> <span class=\"ow\">in</span> <span class=\"n\">seen_set</span><span class=\"p\">:</span>\n            <span class=\"n\">duplicate_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">imageset_text</span><span class=\"p\">)</span>\n            <span class=\"k\">continue</span>\n        <span class=\"n\">imageset_rowid</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_imageset_imgsetids_from_text</span><span class=\"p\">(</span><span class=\"n\">imageset_text</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Check ImageSetIDs</span>\n        <span class=\"n\">imageset_rowid_</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">metadata_dict</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s1\">&#39;ImageSetID&#39;</span><span class=\"p\">))</span>\n        <span class=\"k\">if</span> <span class=\"n\">imageset_rowid</span> <span class=\"o\">!=</span> <span class=\"n\">imageset_rowid_</span><span class=\"p\">:</span>\n            <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">imageset_text</span><span class=\"p\">,</span> <span class=\"n\">imageset_rowid</span><span class=\"p\">,</span> <span class=\"n\">imageset_rowid_</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Invalid ImageSetID for </span><span class=\"si\">%r</span><span class=\"s1\"> - WANTED: </span><span class=\"si\">%r</span><span class=\"s1\">, GAVE: </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Check #Imgs</span>\n        <span class=\"n\">imageset_num_images</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_imageset_gids</span><span class=\"p\">(</span><span class=\"n\">imageset_rowid</span><span class=\"p\">))</span>\n        <span class=\"n\">imageset_num_images_</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">metadata_dict</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s1\">&#39;#Imgs&#39;</span><span class=\"p\">))</span>\n        <span class=\"k\">if</span> <span class=\"n\">imageset_num_images</span> <span class=\"o\">!=</span> <span class=\"n\">imageset_num_images_</span><span class=\"p\">:</span>\n            <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">imageset_text</span><span class=\"p\">,</span> <span class=\"n\">imageset_num_images</span><span class=\"p\">,</span> <span class=\"n\">imageset_num_images_</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Invalid #Imgs for </span><span class=\"si\">%r</span><span class=\"s1\"> - WANTED: </span><span class=\"si\">%r</span><span class=\"s1\">, GAVE: </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n        <span class=\"c1\"># ADD TO TRACKER</span>\n        <span class=\"n\">seen_set</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">imageset_text</span><span class=\"p\">)</span>\n        <span class=\"n\">imageset_rowid_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">imageset_rowid</span><span class=\"p\">)</span>\n        <span class=\"n\">metadata_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">metadata_dict</span><span class=\"p\">)</span>\n    <span class=\"n\">valid_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">seen_set</span><span class=\"p\">)</span>\n    <span class=\"n\">missing_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">imageset_text_set</span> <span class=\"o\">-</span> <span class=\"n\">seen_set</span><span class=\"p\">)</span>\n\n    <span class=\"n\">invalid</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">invalid_list</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">duplicate_list</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">missing_list</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">invalid</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;VALID:     </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">valid_list</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;INVALID:   </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">invalid_list</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;DUPLICATE: </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">duplicate_list</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;MISSING:   </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">missing_list</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_imageset_metadata</span><span class=\"p\">(</span><span class=\"n\">imageset_rowid_list</span><span class=\"p\">,</span> <span class=\"n\">metadata_list</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"princeton_process_individuals\"><a class=\"viewcode-back\" href=\"../../../../ibeis.other/#ibeis.other.ibsfuncs.princeton_process_individuals\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">princeton_process_individuals</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">input_file_path</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"k\">assert</span> <span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">input_file_path</span><span class=\"p\">)</span>\n\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">input_file_path</span><span class=\"p\">,</span> <span class=\"s1\">&#39;r&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">input_file</span><span class=\"p\">:</span>\n        <span class=\"n\">header_line</span> <span class=\"o\">=</span> <span class=\"n\">input_file</span><span class=\"o\">.</span><span class=\"n\">readline</span><span class=\"p\">()</span>\n        <span class=\"n\">header_list</span> <span class=\"o\">=</span> <span class=\"n\">header_line</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;,&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">line_list</span> <span class=\"o\">=</span> <span class=\"n\">input_file</span><span class=\"o\">.</span><span class=\"n\">readlines</span><span class=\"p\">()</span>\n        <span class=\"n\">lines_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"n\">line</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;,&#39;</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">line_list</span>\n        <span class=\"p\">]</span>\n\n    <span class=\"n\">header_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"n\">_</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"n\">header_list</span> <span class=\"p\">]</span>\n    <span class=\"n\">aid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_aids</span><span class=\"p\">()</span>\n    <span class=\"c1\"># aid_set = set(aid_list)</span>\n    <span class=\"n\">gid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_gids</span><span class=\"p\">()</span>\n    <span class=\"n\">gname_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_gnames</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n\n    <span class=\"n\">seen_aid_set</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">([])</span>\n    <span class=\"c1\"># seen_nid_set = set([])</span>\n    <span class=\"n\">invalid_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">duplicate_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n    <span class=\"n\">annot_rowid_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">metadata_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">line_list</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">lines_list</span><span class=\"p\">):</span>\n        <span class=\"n\">primary_header_list</span> <span class=\"o\">=</span> <span class=\"n\">header_list</span><span class=\"p\">[:</span><span class=\"mi\">8</span><span class=\"p\">]</span>\n        <span class=\"n\">primary_line_list</span> <span class=\"o\">=</span> <span class=\"n\">line_list</span><span class=\"p\">[:</span><span class=\"mi\">8</span><span class=\"p\">]</span>\n        <span class=\"n\">secondary_line_list</span> <span class=\"o\">=</span> <span class=\"n\">line_list</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">:]</span>\n        <span class=\"n\">metadata_dict</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">primary_header_list</span><span class=\"p\">,</span> <span class=\"n\">primary_line_list</span><span class=\"p\">))</span>\n        <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">metadata_dict</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">metadata_dict</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">:</span>\n                <span class=\"n\">metadata_dict</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"c1\"># Get primitives</span>\n        <span class=\"n\">aid</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">metadata_dict</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s1\">&#39;AnnotationID&#39;</span><span class=\"p\">))</span>\n        <span class=\"n\">nid</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_nids</span><span class=\"p\">(</span><span class=\"n\">aid</span><span class=\"p\">)</span>\n        <span class=\"c1\"># gid = ibs.get_annot_gids(aid)</span>\n        <span class=\"n\">gname</span> <span class=\"o\">=</span> <span class=\"n\">metadata_dict</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s1\">&#39;Photo#&#39;</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Check if found</span>\n        <span class=\"n\">found1</span> <span class=\"o\">=</span> <span class=\"n\">aid</span> <span class=\"ow\">in</span> <span class=\"n\">aid_list</span>\n        <span class=\"n\">found2</span> <span class=\"o\">=</span> <span class=\"n\">gname</span> <span class=\"ow\">in</span> <span class=\"n\">gname_list</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"n\">found1</span> <span class=\"ow\">and</span> <span class=\"n\">found2</span><span class=\"p\">):</span>\n            <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">gname</span><span class=\"p\">,</span> <span class=\"n\">aid</span><span class=\"p\">,</span> <span class=\"n\">found1</span><span class=\"p\">,</span> <span class=\"n\">found2</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Invalid Gname </span><span class=\"si\">%r</span><span class=\"s1\"> AID </span><span class=\"si\">%r</span><span class=\"s1\"> (aid </span><span class=\"si\">%s</span><span class=\"s1\">, gname </span><span class=\"si\">%s</span><span class=\"s1\">)&#39;</span> <span class=\"o\">%</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">found2</span><span class=\"p\">:</span>\n                <span class=\"n\">zip_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                    <span class=\"n\">value</span>\n                    <span class=\"k\">for</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">gname_list</span><span class=\"p\">,</span> <span class=\"n\">gid_list</span><span class=\"p\">))</span>\n                    <span class=\"k\">if</span> <span class=\"n\">value</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">gname</span>\n                <span class=\"p\">]</span>\n                <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">zip_list</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n                <span class=\"n\">gid_</span> <span class=\"o\">=</span> <span class=\"n\">zip_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n                <span class=\"n\">aid_list_</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_aids</span><span class=\"p\">(</span><span class=\"n\">gid_</span><span class=\"p\">)</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\t</span><span class=\"s1\"> AID_LIST: </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">aid_list_</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n            <span class=\"n\">invalid_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">aid</span><span class=\"p\">)</span>\n            <span class=\"k\">continue</span>\n        <span class=\"k\">if</span> <span class=\"n\">aid</span> <span class=\"ow\">in</span> <span class=\"n\">seen_aid_set</span><span class=\"p\">:</span>\n            <span class=\"n\">duplicate_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">aid</span><span class=\"p\">)</span>\n            <span class=\"k\">continue</span>\n        <span class=\"c1\"># if nid in seen_nid_set:</span>\n        <span class=\"c1\">#     args = (nid, gname, aid, )</span>\n        <span class=\"c1\">#     print(&#39;Duplicate NID %r for Gname %r AID %r&#39; % args)</span>\n        <span class=\"c1\">#     continue</span>\n        <span class=\"c1\"># if nid is not None:</span>\n        <span class=\"c1\">#     seen_nid_set.add(nid)</span>\n        <span class=\"c1\"># Check gname</span>\n        <span class=\"n\">gname_</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_image_names</span><span class=\"p\">(</span><span class=\"n\">aid</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">gname</span> <span class=\"o\">!=</span> <span class=\"n\">gname_</span><span class=\"p\">:</span>\n            <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">gname</span><span class=\"p\">,</span> <span class=\"n\">aid</span><span class=\"p\">,</span> <span class=\"n\">gname_</span><span class=\"p\">,</span> <span class=\"n\">gname</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Invalid Photo# </span><span class=\"si\">%r</span><span class=\"s1\"> for AnnotationID for </span><span class=\"si\">%r</span><span class=\"s1\"> - WANTED: </span><span class=\"si\">%r</span><span class=\"s1\">, GAVE: </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n            <span class=\"n\">zip_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                <span class=\"n\">value</span>\n                <span class=\"k\">for</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">gname_list</span><span class=\"p\">,</span> <span class=\"n\">gid_list</span><span class=\"p\">))</span>\n                <span class=\"k\">if</span> <span class=\"n\">value</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">gname</span>\n            <span class=\"p\">]</span>\n            <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">zip_list</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n            <span class=\"n\">gid_</span> <span class=\"o\">=</span> <span class=\"n\">zip_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"n\">aid_list_</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_aids</span><span class=\"p\">(</span><span class=\"n\">gid_</span><span class=\"p\">)</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\t</span><span class=\"s1\"> AID_LIST: </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">aid_list_</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n        <span class=\"n\">seen_aid_set</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">aid</span><span class=\"p\">)</span>\n        <span class=\"n\">annot_rowid_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">aid</span><span class=\"p\">)</span>\n        <span class=\"n\">metadata_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">metadata_dict</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Check associated aids</span>\n        <span class=\"n\">aid2_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_name_aids</span><span class=\"p\">([</span><span class=\"n\">nid</span><span class=\"p\">]))</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">index</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">secondary_line_list</span><span class=\"p\">)</span> <span class=\"o\">//</span> <span class=\"mi\">2</span><span class=\"p\">):</span>\n                <span class=\"n\">gname2</span> <span class=\"o\">=</span> <span class=\"n\">secondary_line_list</span><span class=\"p\">[(</span><span class=\"n\">index</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n                <span class=\"k\">if</span> <span class=\"n\">gname2</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">:</span>\n                    <span class=\"k\">continue</span>\n                <span class=\"n\">aid2</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">secondary_line_list</span><span class=\"p\">[(</span><span class=\"n\">index</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n                <span class=\"n\">nid2</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_nids</span><span class=\"p\">(</span><span class=\"n\">aid2</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">nid</span> <span class=\"o\">!=</span> <span class=\"n\">nid2</span><span class=\"p\">:</span>\n                    <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">nid2</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">,</span> <span class=\"n\">found1</span><span class=\"p\">,</span> <span class=\"n\">found2</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n                    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Invalid NID </span><span class=\"si\">%r</span><span class=\"s1\"> for Secondary AID2 </span><span class=\"si\">%r</span><span class=\"s1\"> (aid </span><span class=\"si\">%s</span><span class=\"s1\">, gname </span><span class=\"si\">%s</span><span class=\"s1\">)&#39;</span> <span class=\"o\">%</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n                    <span class=\"k\">if</span> <span class=\"n\">nid</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"n\">nid</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\t</span><span class=\"s1\">fixing to </span><span class=\"si\">%r</span><span class=\"s1\">...&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">nid</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n                        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_annot_name_rowids</span><span class=\"p\">([</span><span class=\"n\">aid2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"n\">nid</span><span class=\"p\">])</span>\n                        <span class=\"n\">aid2_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_name_aids</span><span class=\"p\">([</span><span class=\"n\">nid</span><span class=\"p\">]))</span>\n                <span class=\"c1\"># Check if found</span>\n                <span class=\"n\">found1</span> <span class=\"o\">=</span> <span class=\"n\">aid2</span> <span class=\"ow\">in</span> <span class=\"n\">aid2_list</span>\n                <span class=\"n\">found2</span> <span class=\"o\">=</span> <span class=\"n\">gname2</span> <span class=\"ow\">in</span> <span class=\"n\">gname_list</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"n\">found1</span> <span class=\"ow\">and</span> <span class=\"n\">found2</span><span class=\"p\">):</span>\n                    <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">aid2</span><span class=\"p\">,</span> <span class=\"n\">found1</span><span class=\"p\">,</span> <span class=\"n\">found2</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n                    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Invalid Secondary AID2 </span><span class=\"si\">%r</span><span class=\"s1\"> (aid </span><span class=\"si\">%s</span><span class=\"s1\">, gname </span><span class=\"si\">%s</span><span class=\"s1\">)&#39;</span> <span class=\"o\">%</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n                    <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">gname</span><span class=\"p\">,</span> <span class=\"n\">aid</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n                    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\t</span><span class=\"s1\">Gname </span><span class=\"si\">%r</span><span class=\"s1\"> AID </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n                    <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">nid2</span><span class=\"p\">,</span> <span class=\"n\">nid</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n                    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\t</span><span class=\"s1\">NIDs - WANTED: </span><span class=\"si\">%r</span><span class=\"s1\">, GAVE: </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n                    <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">aid2_list</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n                    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\t</span><span class=\"s1\">AID2_LIST: </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n                    <span class=\"n\">invalid_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">aid2</span><span class=\"p\">)</span>\n                    <span class=\"k\">continue</span>\n                <span class=\"n\">seen_aid_set</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">aid2</span><span class=\"p\">)</span>\n                <span class=\"n\">annot_rowid_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">aid2</span><span class=\"p\">)</span>\n                <span class=\"n\">metadata_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">metadata_dict</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n            <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">gname</span><span class=\"p\">,</span> <span class=\"n\">aid</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Invalid secondary list for Gname </span><span class=\"si\">%r</span><span class=\"s1\"> AID </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span>\n\n    <span class=\"n\">valid_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">seen_aid_set</span><span class=\"p\">)</span>\n    <span class=\"c1\"># missing_list = list(aid_set - seen_aid_set)</span>\n\n    <span class=\"n\">invalid</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">invalid_list</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">duplicate_list</span><span class=\"p\">)</span>  <span class=\"c1\"># + len(missing_list)</span>\n    <span class=\"k\">if</span> <span class=\"n\">invalid</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;VALID:     </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">valid_list</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;INVALID:   </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">invalid_list</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;DUPLICATE: </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">duplicate_list</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n        <span class=\"c1\"># print(&#39;MISSING:   %r&#39; % (missing_list, ))</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_annot_metadata</span><span class=\"p\">(</span><span class=\"n\">annot_rowid_list</span><span class=\"p\">,</span> <span class=\"n\">metadata_list</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Set demographics to names</span>\n        <span class=\"n\">name_sex_dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"n\">name_species_dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"n\">name_age_dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">for</span> <span class=\"n\">annot_rowid</span><span class=\"p\">,</span> <span class=\"n\">metadata_dict</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">annot_rowid_list</span><span class=\"p\">,</span> <span class=\"n\">metadata_list</span><span class=\"p\">):</span>\n            <span class=\"n\">name_rowid</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_nids</span><span class=\"p\">(</span><span class=\"n\">annot_rowid</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">name_rowid</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"n\">new_nid</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">make_next_nids</span><span class=\"p\">()</span>\n                <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_annot_name_rowids</span><span class=\"p\">([</span><span class=\"n\">annot_rowid</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"n\">new_nid</span><span class=\"p\">])</span>\n            <span class=\"n\">sex_symbol</span> <span class=\"o\">=</span> <span class=\"n\">metadata_dict</span><span class=\"p\">[</span><span class=\"s1\">&#39;Sex&#39;</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"n\">sex_symbol</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">sex_symbol</span> <span class=\"o\">=</span> <span class=\"n\">sex_symbol</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">()</span>\n            <span class=\"n\">species_symbol</span> <span class=\"o\">=</span> <span class=\"n\">metadata_dict</span><span class=\"p\">[</span><span class=\"s1\">&#39;Species&#39;</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"n\">species_symbol</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">species_symbol</span> <span class=\"o\">=</span> <span class=\"n\">species_symbol</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">()</span>\n            <span class=\"n\">age_symbol</span> <span class=\"o\">=</span> <span class=\"n\">metadata_dict</span><span class=\"p\">[</span><span class=\"s1\">&#39;Age&#39;</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"n\">age_symbol</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">age_symbol</span> <span class=\"o\">=</span> <span class=\"n\">age_symbol</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">()</span>\n            <span class=\"c1\"># Get names</span>\n            <span class=\"k\">if</span> <span class=\"n\">name_rowid</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">name_sex_dict</span><span class=\"p\">:</span>\n                <span class=\"n\">name_sex_dict</span><span class=\"p\">[</span><span class=\"n\">name_rowid</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">if</span> <span class=\"n\">sex_symbol</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s1\">&#39;M&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;F&#39;</span><span class=\"p\">]:</span>\n                <span class=\"n\">name_sex_dict</span><span class=\"p\">[</span><span class=\"n\">name_rowid</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">sex_symbol</span><span class=\"p\">)</span>\n            <span class=\"k\">elif</span> <span class=\"n\">sex_symbol</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">]:</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s1\">&#39;INVALID SEX: </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">sex_symbol</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n            <span class=\"c1\"># Get species</span>\n            <span class=\"k\">if</span> <span class=\"n\">name_rowid</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">name_species_dict</span><span class=\"p\">:</span>\n                <span class=\"n\">name_species_dict</span><span class=\"p\">[</span><span class=\"n\">name_rowid</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">if</span> <span class=\"n\">species_symbol</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s1\">&#39;PLAINS&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;GREVY_S&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;GREVYS&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;HYBRID&#39;</span><span class=\"p\">]:</span>\n                <span class=\"n\">name_species_dict</span><span class=\"p\">[</span><span class=\"n\">name_rowid</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">species_symbol</span><span class=\"p\">)</span>\n            <span class=\"k\">elif</span> <span class=\"n\">sex_symbol</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">]:</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s1\">&#39;INVALID SPECIES: </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">species_symbol</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n            <span class=\"c1\"># Get age</span>\n            <span class=\"k\">if</span> <span class=\"n\">name_rowid</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">name_age_dict</span><span class=\"p\">:</span>\n                <span class=\"n\">name_age_dict</span><span class=\"p\">[</span><span class=\"n\">name_rowid</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">if</span> <span class=\"n\">age_symbol</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s1\">&#39;ADULT&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;JUVENILE&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;JUVENILE (6-9MO)&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;JUVENILE (1-1.5YR)&#39;</span><span class=\"p\">]:</span>\n                <span class=\"n\">name_age_dict</span><span class=\"p\">[</span><span class=\"n\">name_rowid</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">age_symbol</span><span class=\"p\">)</span>\n            <span class=\"k\">elif</span> <span class=\"n\">age_symbol</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">]:</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s1\">&#39;INVALID AGE: </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">age_symbol</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n\n        <span class=\"n\">aid_list_</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">species_text_</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">name_rowid</span> <span class=\"ow\">in</span> <span class=\"n\">name_sex_dict</span><span class=\"p\">:</span>\n            <span class=\"n\">name_sex_list</span> <span class=\"o\">=</span> <span class=\"n\">name_sex_dict</span><span class=\"p\">[</span><span class=\"n\">name_rowid</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">name_sex_list</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"n\">sex_text</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;UNKNOWN SEX&#39;</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">sex_mode</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">name_sex_list</span><span class=\"p\">),</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"n\">name_sex_list</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">)</span>\n                <span class=\"k\">assert</span> <span class=\"n\">sex_mode</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s1\">&#39;M&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;F&#39;</span><span class=\"p\">]</span>\n                <span class=\"n\">sex_text</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Male&#39;</span> <span class=\"k\">if</span> <span class=\"n\">sex_mode</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;M&#39;</span> <span class=\"k\">else</span> <span class=\"s1\">&#39;Female&#39;</span>\n            <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_name_sex_text</span><span class=\"p\">([</span><span class=\"n\">name_rowid</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"n\">sex_text</span><span class=\"p\">])</span>\n\n            <span class=\"n\">name_species_list</span> <span class=\"o\">=</span> <span class=\"n\">name_species_dict</span><span class=\"p\">[</span><span class=\"n\">name_rowid</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">name_species_list</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"n\">species_text</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">UNKNOWN</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">species_mode</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">name_species_list</span><span class=\"p\">),</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"n\">name_species_list</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">)</span>\n                <span class=\"k\">assert</span> <span class=\"n\">species_mode</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s1\">&#39;PLAINS&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;GREVY_S&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;GREVYS&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;HYBRID&#39;</span><span class=\"p\">]</span>\n                <span class=\"k\">if</span> <span class=\"n\">species_mode</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;PLAINS&#39;</span><span class=\"p\">:</span>\n                    <span class=\"n\">species_text</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;zebra_plains&#39;</span>\n                <span class=\"k\">elif</span> <span class=\"n\">species_mode</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;HYBRID&#39;</span><span class=\"p\">:</span>\n                    <span class=\"n\">species_text</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;zebra_hybrid&#39;</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">species_text</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;zebra_grevys&#39;</span>\n            <span class=\"n\">aid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_name_aids</span><span class=\"p\">(</span><span class=\"n\">name_rowid</span><span class=\"p\">)</span>\n            <span class=\"n\">aid_list_</span> <span class=\"o\">+=</span> <span class=\"n\">aid_list</span>\n            <span class=\"n\">species_text_</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">species_text</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n\n            <span class=\"n\">name_age_list</span> <span class=\"o\">=</span> <span class=\"n\">name_age_dict</span><span class=\"p\">[</span><span class=\"n\">name_rowid</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">name_age_list</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"n\">age_tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"s1\">&#39;JUVENILE (6-9MO)&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">name_age_list</span><span class=\"p\">:</span>\n                    <span class=\"k\">assert</span> <span class=\"s1\">&#39;JUVENILE (1-1.5YR)&#39;</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">name_age_list</span>\n                    <span class=\"n\">age_tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n                <span class=\"k\">elif</span> <span class=\"s1\">&#39;JUVENILE (1-1.5YR)&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">name_age_list</span><span class=\"p\">:</span>\n                    <span class=\"k\">assert</span> <span class=\"s1\">&#39;JUVENILE (6-9MO)&#39;</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">name_age_list</span>\n                    <span class=\"n\">age_tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">24</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">age_tag</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">name_age_list</span><span class=\"p\">),</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"n\">name_age_list</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">)</span>\n                    <span class=\"k\">assert</span> <span class=\"n\">age_tag</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s1\">&#39;ADULT&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;JUVENILE&#39;</span><span class=\"p\">]</span>\n                    <span class=\"k\">if</span> <span class=\"n\">age_tag</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;ADULT&#39;</span><span class=\"p\">:</span>\n                        <span class=\"n\">age_tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">36</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"n\">age_tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n            <span class=\"n\">aid_list_</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_name_aids</span><span class=\"p\">(</span><span class=\"n\">name_rowid</span><span class=\"p\">)</span>\n            <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_annot_age_months_est_min</span><span class=\"p\">(</span><span class=\"n\">aid_list_</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">age_tuple</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aid_list_</span><span class=\"p\">))</span>\n            <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_annot_age_months_est_max</span><span class=\"p\">(</span><span class=\"n\">aid_list_</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">age_tuple</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aid_list_</span><span class=\"p\">))</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_annot_species</span><span class=\"p\">(</span><span class=\"n\">aid_list_</span><span class=\"p\">,</span> <span class=\"n\">species_text_</span><span class=\"p\">)</span></div>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --allexamples</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --allexamples --noface --nosrc</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">multiprocessing</span>\n    <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">freeze_support</span><span class=\"p\">()</span>  <span class=\"c1\"># for win32</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">doctest_funcs</span><span class=\"p\">()</span>\n</pre></div>", "current_page_name": "_modules/ibeis/other/ibsfuncs", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}