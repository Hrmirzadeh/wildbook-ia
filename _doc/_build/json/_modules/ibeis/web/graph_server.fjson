{"parents": [{"link": "../../../", "title": "Module code"}, {"link": "../../", "title": "ibeis"}], "title": "ibeis.web.graph_server", "body": "<h1>Source code for ibeis.web.graph_server</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"k\">import</span> <span class=\"n\">absolute_import</span><span class=\"p\">,</span> <span class=\"n\">division</span><span class=\"p\">,</span> <span class=\"n\">print_function</span><span class=\"p\">,</span> <span class=\"n\">unicode_literals</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.control</span> <span class=\"k\">import</span> <span class=\"n\">controller_inject</span>\n<span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n<span class=\"kn\">import</span> <span class=\"nn\">concurrent</span>\n<span class=\"kn\">import</span> <span class=\"nn\">random</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"c1\"># from ibeis.web import futures_utils as futures_actors</span>\n<span class=\"kn\">import</span> <span class=\"nn\">futures_actors</span>\n<span class=\"nb\">print</span><span class=\"p\">,</span> <span class=\"n\">rrr</span><span class=\"p\">,</span> <span class=\"n\">profile</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">inject2</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"double_review_test\"><a class=\"viewcode-back\" href=\"../../../../ibeis.web/#ibeis.web.graph_server.double_review_test\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">double_review_test</span><span class=\"p\">():</span>\n    <span class=\"c1\"># from ibeis.web.graph_server import *</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">ibeis</span>\n    <span class=\"n\">actor</span> <span class=\"o\">=</span> <span class=\"n\">GraphActor</span><span class=\"p\">()</span>\n    <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">&#39;manual.n_peek&#39;</span>   <span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;manual.autosave&#39;</span> <span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;ranking.enabled&#39;</span> <span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;autoreview.enabled&#39;</span> <span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;redun.enabled&#39;</span>   <span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;queue.conf.thresh&#39;</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;absolutely_sure&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;algo.hardcase&#39;</span> <span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n    <span class=\"c1\"># Start the process</span>\n    <span class=\"n\">dbdir</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">sysres</span><span class=\"o\">.</span><span class=\"n\">db_to_dbdir</span><span class=\"p\">(</span><span class=\"s1\">&#39;PZ_MTEST&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">payload</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;action&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;start&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;dbdir&#39;</span><span class=\"p\">:</span> <span class=\"n\">dbdir</span><span class=\"p\">,</span> <span class=\"s1\">&#39;aids&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;all&#39;</span><span class=\"p\">,</span>\n               <span class=\"s1\">&#39;config&#39;</span><span class=\"p\">:</span> <span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"s1\">&#39;init&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;annotmatch&#39;</span><span class=\"p\">}</span>\n    <span class=\"n\">start_resp</span> <span class=\"o\">=</span> <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">handle</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;start_resp = </span><span class=\"si\">{!r}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">start_resp</span><span class=\"p\">))</span>\n    <span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">infr</span>\n\n    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">verbose</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n\n    <span class=\"n\">user_resp</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">continue_review</span><span class=\"p\">()</span>\n    <span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">user_resp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;edge = </span><span class=\"si\">{!r}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">))</span>\n\n    <span class=\"n\">last</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">edge_decision</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">))</span>\n        <span class=\"n\">user_resp</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">continue_review</span><span class=\"p\">()</span>\n        <span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">user_resp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;edge = </span><span class=\"si\">{!r}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">))</span>\n        <span class=\"k\">assert</span> <span class=\"n\">last</span> <span class=\"o\">!=</span> <span class=\"n\">edge</span>\n        <span class=\"n\">last</span> <span class=\"o\">=</span> <span class=\"n\">edge</span></div>\n\n    <span class=\"c1\"># Respond with a user decision</span>\n\n\n<div class=\"viewcode-block\" id=\"ut_to_json_encode\"><a class=\"viewcode-back\" href=\"../../../../ibeis.web/#ibeis.web.graph_server.ut_to_json_encode\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">ut_to_json_encode</span><span class=\"p\">(</span><span class=\"n\">dict_</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Encode correctly for UUIDs and other information</span>\n    <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">dict_</span><span class=\"p\">:</span>\n        <span class=\"n\">dict_</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">to_json</span><span class=\"p\">(</span><span class=\"n\">dict_</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">])</span>\n    <span class=\"k\">return</span> <span class=\"n\">dict_</span></div>\n\n\n<div class=\"viewcode-block\" id=\"testdata_start_payload\"><a class=\"viewcode-back\" href=\"../../../../ibeis.web/#ibeis.web.graph_server.testdata_start_payload\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">testdata_start_payload</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"o\">=</span><span class=\"s1\">&#39;all&#39;</span><span class=\"p\">):</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">ibeis</span>\n    <span class=\"n\">payload</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">&#39;action&#39;</span>       <span class=\"p\">:</span> <span class=\"s1\">&#39;start&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;dbdir&#39;</span>        <span class=\"p\">:</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">sysres</span><span class=\"o\">.</span><span class=\"n\">db_to_dbdir</span><span class=\"p\">(</span><span class=\"s1\">&#39;PZ_MTEST&#39;</span><span class=\"p\">),</span>\n        <span class=\"s1\">&#39;aids&#39;</span>         <span class=\"p\">:</span> <span class=\"n\">aids</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;config&#39;</span>       <span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;manual.n_peek&#39;</span>   <span class=\"p\">:</span> <span class=\"mi\">50</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;manual.autosave&#39;</span> <span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">payload</span></div>\n\n\n<div class=\"viewcode-block\" id=\"testdata_feedback_payload\"><a class=\"viewcode-back\" href=\"../../../../ibeis.web/#ibeis.web.graph_server.testdata_feedback_payload\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">testdata_feedback_payload</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">decision</span><span class=\"p\">):</span>\n    <span class=\"n\">payload</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">&#39;action&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;add_feedback&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;edge&#39;</span><span class=\"p\">:</span> <span class=\"n\">edge</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">decision</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;meta_decision&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;null&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;tags&#39;</span><span class=\"p\">:</span> <span class=\"p\">[],</span>\n        <span class=\"s1\">&#39;user_id&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;user:doctest&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;confidence&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;pretty_sure&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;timestamp_s1&#39;</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;timestamp_c1&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;timestamp_c2&#39;</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;timestamp&#39;</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">payload</span></div>\n\n\n<div class=\"viewcode-block\" id=\"test_foo\"><a class=\"viewcode-back\" href=\"../../../../ibeis.web/#ibeis.web.graph_server.test_foo\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">test_foo</span><span class=\"p\">(</span><span class=\"n\">future</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;FOO </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">future</span><span class=\"p\">,</span> <span class=\"p\">))</span></div>\n\n\n<span class=\"n\">GRAPH_ACTOR_CLASS</span> <span class=\"o\">=</span> <span class=\"n\">futures_actors</span><span class=\"o\">.</span><span class=\"n\">ProcessActor</span> <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">LINUX</span> <span class=\"ow\">or</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">WIN32</span> <span class=\"k\">else</span> <span class=\"n\">futures_actors</span><span class=\"o\">.</span><span class=\"n\">ThreadActor</span>\n\n\n<div class=\"viewcode-block\" id=\"GraphActor\"><a class=\"viewcode-back\" href=\"../../../../ibeis.web/#ibeis.web.graph_server.GraphActor\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">GraphActor</span><span class=\"p\">(</span><span class=\"n\">GRAPH_ACTOR_CLASS</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.web.graph_server GraphActor</span>\n\n<span class=\"sd\">    Doctest:</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.web.graph_server import *</span>\n<span class=\"sd\">        &gt;&gt;&gt; actor = GraphActor()</span>\n<span class=\"sd\">        &gt;&gt;&gt; payload = testdata_start_payload()</span>\n<span class=\"sd\">        &gt;&gt;&gt; # Start the process</span>\n<span class=\"sd\">        &gt;&gt;&gt; start_resp = actor.handle(payload)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&#39;start_resp = {!r}&#39;.format(start_resp))</span>\n<span class=\"sd\">        &gt;&gt;&gt; # Respond with a user decision</span>\n<span class=\"sd\">        &gt;&gt;&gt; user_request = actor.handle({&#39;action&#39;: &#39;continue_review&#39;})</span>\n<span class=\"sd\">        &gt;&gt;&gt; # Wait for a response and  the GraphActor in another proc</span>\n<span class=\"sd\">        &gt;&gt;&gt; edge, priority, edge_data = user_request[0]</span>\n<span class=\"sd\">        &gt;&gt;&gt; user_resp_payload = testdata_feedback_payload(edge, &#39;match&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; content = actor.handle(user_resp_payload)</span>\n<span class=\"sd\">        &gt;&gt;&gt; actor.infr.dump_logs()</span>\n\n\n<span class=\"sd\">    Doctest:</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.web.graph_server import *</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; actor = GraphActor()</span>\n<span class=\"sd\">        &gt;&gt;&gt; config = {</span>\n<span class=\"sd\">        &gt;&gt;&gt;     &#39;manual.n_peek&#39;   : 1,</span>\n<span class=\"sd\">        &gt;&gt;&gt;     &#39;manual.autosave&#39; : False,</span>\n<span class=\"sd\">        &gt;&gt;&gt;     &#39;ranking.enabled&#39; : False,</span>\n<span class=\"sd\">        &gt;&gt;&gt;     &#39;autoreview.enabled&#39; : False,</span>\n<span class=\"sd\">        &gt;&gt;&gt;     &#39;redun.enabled&#39;   : False,</span>\n<span class=\"sd\">        &gt;&gt;&gt;     &#39;redun.enabled&#39;   : False,</span>\n<span class=\"sd\">        &gt;&gt;&gt;     &#39;queue.conf.thresh&#39; : &#39;absolutely_sure&#39;,</span>\n<span class=\"sd\">        &gt;&gt;&gt;     &#39;algo.hardcase&#39; : True,</span>\n<span class=\"sd\">        &gt;&gt;&gt; }</span>\n<span class=\"sd\">        &gt;&gt;&gt; # Start the process</span>\n<span class=\"sd\">        &gt;&gt;&gt; dbdir = ibeis.sysres.db_to_dbdir(&#39;PZ_MTEST&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; payload = {&#39;action&#39;: &#39;start&#39;, &#39;dbdir&#39;: dbdir, &#39;aids&#39;: &#39;all&#39;,</span>\n<span class=\"sd\">        &gt;&gt;&gt;            &#39;config&#39;: config, &#39;init&#39;: &#39;annotmatch&#39;}</span>\n<span class=\"sd\">        &gt;&gt;&gt; start_resp = actor.handle(payload)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&#39;start_resp = {!r}&#39;.format(start_resp))</span>\n<span class=\"sd\">        &gt;&gt;&gt; # Respond with a user decision</span>\n<span class=\"sd\">        &gt;&gt;&gt; user_request = actor.handle({&#39;action&#39;: &#39;continue_review&#39;})</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&#39;user_request = {!r}&#39;.format(user_request))</span>\n<span class=\"sd\">        &gt;&gt;&gt; # Wait for a response and  the GraphActor in another proc</span>\n<span class=\"sd\">        &gt;&gt;&gt; edge, priority, edge_data = user_request[0]</span>\n<span class=\"sd\">        &gt;&gt;&gt; user_resp_payload = testdata_feedback_payload(edge, &#39;match&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; content = actor.handle(user_resp_payload)</span>\n<span class=\"sd\">        &gt;&gt;&gt; actor.infr.dump_logs()</span>\n<span class=\"sd\">        &gt;&gt;&gt; actor.infr.status()</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">actor</span><span class=\"p\">):</span>\n        <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n<div class=\"viewcode-block\" id=\"GraphActor.handle\"><a class=\"viewcode-back\" href=\"../../../../ibeis.web/#ibeis.web.graph_server.GraphActor.handle\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">handle</span><span class=\"p\">(</span><span class=\"n\">actor</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s1\">&#39;Commands must be passed in a message dict&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"n\">message</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n        <span class=\"n\">action</span> <span class=\"o\">=</span> <span class=\"n\">message</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s1\">&#39;action&#39;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">action</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s1\">&#39;Payload must have an action item&#39;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">action</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;wait&#39;</span><span class=\"p\">:</span>\n            <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"n\">message</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;num&#39;</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">message</span>\n        <span class=\"k\">elif</span> <span class=\"n\">action</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;debug&#39;</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">actor</span>\n        <span class=\"k\">elif</span> <span class=\"n\">action</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;error&#39;</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"s1\">&#39;FOOBAR&#39;</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"n\">action</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;latest_logs&#39;</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">latest_logs</span><span class=\"p\">(</span><span class=\"n\">colored</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"n\">action</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;logs&#39;</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">logs</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">func</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">actor</span><span class=\"p\">,</span> <span class=\"n\">action</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">func</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s1\">&#39;Unknown action=</span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">action</span><span class=\"p\">,))</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"k\">return</span> <span class=\"n\">func</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">message</span><span class=\"p\">)</span>\n                <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n                    <span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n                    <span class=\"kn\">import</span> <span class=\"nn\">traceback</span>\n\n                    <span class=\"n\">traceback</span><span class=\"o\">.</span><span class=\"n\">print_exc</span><span class=\"p\">()</span>\n                    <span class=\"n\">trace</span> <span class=\"o\">=</span> <span class=\"n\">traceback</span><span class=\"o\">.</span><span class=\"n\">format_exc</span><span class=\"p\">()</span>\n\n                    <span class=\"k\">if</span> <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">infr</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                        <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Actor Server Error: </span><span class=\"si\">{!r}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n                        <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Actor Server Traceback: </span><span class=\"si\">{!r}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">trace</span><span class=\"p\">))</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">)</span>\n                        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">trace</span><span class=\"p\">)</span>\n\n                    <span class=\"k\">raise</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exc_info</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">](</span><span class=\"n\">trace</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"GraphActor.start\"><a class=\"viewcode-back\" href=\"../../../../ibeis.web/#ibeis.web.graph_server.GraphActor.start\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">start</span><span class=\"p\">(</span><span class=\"n\">actor</span><span class=\"p\">,</span> <span class=\"n\">dbdir</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"o\">=</span><span class=\"s1\">&#39;all&#39;</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"p\">{},</span>\n              <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">ibeis</span>\n        <span class=\"k\">assert</span> <span class=\"n\">dbdir</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">&#39;must specify dbdir&#39;</span>\n        <span class=\"k\">assert</span> <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">infr</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s1\">&#39;AnnotInference already running&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">opendb</span><span class=\"p\">(</span><span class=\"n\">dbdir</span><span class=\"o\">=</span><span class=\"n\">dbdir</span><span class=\"p\">,</span> <span class=\"n\">use_cache</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">web</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                           <span class=\"n\">force_serial</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Create the AnnotInference</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;starting via actor with ibs = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n        <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">AnnotInference</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">=</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"o\">=</span><span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"n\">autoinit</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;started via actor&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;config = </span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr3</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">)))</span>\n        <span class=\"c1\"># Configure query_annot_infr</span>\n        <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">config</span><span class=\"p\">:</span>\n            <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span>\n        <span class=\"c1\"># Initialize</span>\n        <span class=\"c1\"># TODO: Initialize state from staging reviews after annotmatch</span>\n        <span class=\"c1\"># timestamps (in case of crash)</span>\n\n        <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Initializing infr tables&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;init&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;staging&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">reset_feedback</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">,</span> <span class=\"n\">apply</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">ensure_mst</span><span class=\"p\">()</span>\n        <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">apply_nondynamic_update</span><span class=\"p\">()</span>\n\n        <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;infr.status() = </span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr4</span><span class=\"p\">(</span><span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"p\">())))</span>\n\n        <span class=\"c1\"># Load random forests (TODO: should this be config specifiable?)</span>\n        <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;loading published models&#39;</span><span class=\"p\">)</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">load_published</span><span class=\"p\">()</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"k\">pass</span>\n\n        <span class=\"c1\"># Start actor.infr Main Loop</span>\n        <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;start id review&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">start_id_review</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"s1\">&#39;initialized&#39;</span></div>\n\n<div class=\"viewcode-block\" id=\"GraphActor.continue_review\"><a class=\"viewcode-back\" href=\"../../../../ibeis.web/#ibeis.web.graph_server.GraphActor.continue_review\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">continue_review</span><span class=\"p\">(</span><span class=\"n\">actor</span><span class=\"p\">):</span>\n        <span class=\"c1\"># This will signal on_request_review with the same data</span>\n        <span class=\"n\">user_request</span> <span class=\"o\">=</span> <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">continue_review</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">user_request</span></div>\n\n<div class=\"viewcode-block\" id=\"GraphActor.add_feedback\"><a class=\"viewcode-back\" href=\"../../../../ibeis.web/#ibeis.web.graph_server.GraphActor.add_feedback\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">add_feedback</span><span class=\"p\">(</span><span class=\"n\">actor</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">feedback</span><span class=\"p\">):</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">accept</span><span class=\"p\">(</span><span class=\"n\">feedback</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">response</span></div>\n\n<div class=\"viewcode-block\" id=\"GraphActor.remove_annots\"><a class=\"viewcode-back\" href=\"../../../../ibeis.web/#ibeis.web.graph_server.GraphActor.remove_annots\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">remove_annots</span><span class=\"p\">(</span><span class=\"n\">actor</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Removing aids=</span><span class=\"si\">%r</span><span class=\"s1\"> from AnnotInference&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">remove_aids</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\t</span><span class=\"s1\"> got response = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Applying NonDynamic Update to AnnotInference&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">apply_nondynamic_update</span><span class=\"p\">()</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\t</span><span class=\"s1\"> ...applied&#39;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"s1\">&#39;removed&#39;</span></div>\n\n<div class=\"viewcode-block\" id=\"GraphActor.update_task_thresh\"><a class=\"viewcode-back\" href=\"../../../../ibeis.web/#ibeis.web.graph_server.GraphActor.update_task_thresh\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">update_task_thresh</span><span class=\"p\">(</span><span class=\"n\">actor</span><span class=\"p\">,</span> <span class=\"n\">task</span><span class=\"p\">,</span> <span class=\"n\">decision</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Updating actor.infr.task_thresh with </span><span class=\"si\">%r</span><span class=\"s1\"> </span><span class=\"si\">%r</span><span class=\"s1\"> </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">task</span><span class=\"p\">,</span> <span class=\"n\">decision</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n        <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">task_thresh</span><span class=\"p\">[</span><span class=\"n\">task</span><span class=\"p\">][</span><span class=\"n\">decision</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Updated actor.infr.task_thresh = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">task_thresh</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"s1\">&#39;updated&#39;</span></div>\n\n<div class=\"viewcode-block\" id=\"GraphActor.add_annots\"><a class=\"viewcode-back\" href=\"../../../../ibeis.web/#ibeis.web.graph_server.GraphActor.add_annots\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">add_annots</span><span class=\"p\">(</span><span class=\"n\">actor</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_annots</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"s1\">&#39;added&#39;</span></div>\n\n<div class=\"viewcode-block\" id=\"GraphActor.get_infr_status\"><a class=\"viewcode-back\" href=\"../../../../ibeis.web/#ibeis.web.graph_server.GraphActor.get_infr_status\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_infr_status</span><span class=\"p\">(</span><span class=\"n\">actor</span><span class=\"p\">):</span>\n        <span class=\"n\">infr_status</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">infr_status</span><span class=\"p\">[</span><span class=\"s1\">&#39;phase&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">phase</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"k\">pass</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">infr_status</span><span class=\"p\">[</span><span class=\"s1\">&#39;loop_phase&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">loop_phase</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"k\">pass</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">infr_status</span><span class=\"p\">[</span><span class=\"s1\">&#39;is_inconsistent&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">nid_to_errors</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"k\">pass</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">infr_status</span><span class=\"p\">[</span><span class=\"s1\">&#39;is_converged&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">phase</span> <span class=\"o\">==</span> <span class=\"mi\">4</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"k\">pass</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">infr_status</span><span class=\"p\">[</span><span class=\"s1\">&#39;num_meaningful&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">refresh</span><span class=\"o\">.</span><span class=\"n\">num_meaningful</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"k\">pass</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">infr_status</span><span class=\"p\">[</span><span class=\"s1\">&#39;num_pccs&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">queue</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"k\">pass</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">infr_status</span><span class=\"p\">[</span><span class=\"s1\">&#39;num_inconsistent_ccs&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">nid_to_errors</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"k\">pass</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">infr_status</span><span class=\"p\">[</span><span class=\"s1\">&#39;cc_status&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">connected_component_status</span><span class=\"p\">()</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"k\">pass</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">infr_status</span></div>\n\n<div class=\"viewcode-block\" id=\"GraphActor.get_feat_extractor\"><a class=\"viewcode-back\" href=\"../../../../ibeis.web/#ibeis.web.graph_server.GraphActor.get_feat_extractor\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_feat_extractor</span><span class=\"p\">(</span><span class=\"n\">actor</span><span class=\"p\">):</span>\n        <span class=\"n\">match_state_verifier</span> <span class=\"o\">=</span> <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">verifiers</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;match_state&#39;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">match_state_verifier</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">match_state_verifier</span><span class=\"o\">.</span><span class=\"n\">extr</span></div></div>\n\n\n<div class=\"viewcode-block\" id=\"GraphClient\"><a class=\"viewcode-back\" href=\"../../../../ibeis.web/#ibeis.web.graph_server.GraphClient\">[docs]</a><span class=\"nd\">@ut</span><span class=\"o\">.</span><span class=\"n\">reloadable_class</span>\n<span class=\"k\">class</span> <span class=\"nc\">GraphClient</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.web.graph_server GraphClient</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.web.graph_server import *</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; client = GraphClient(autoinit=True)</span>\n<span class=\"sd\">        &gt;&gt;&gt; # Start the GraphActor in another proc</span>\n<span class=\"sd\">        &gt;&gt;&gt; payload = testdata_start_payload()</span>\n<span class=\"sd\">        &gt;&gt;&gt; client.post(payload).result()</span>\n<span class=\"sd\">        &gt;&gt;&gt; f1 = client.post({&#39;action&#39;: &#39;continue_review&#39;})</span>\n<span class=\"sd\">        &gt;&gt;&gt; f1.add_done_callback(test_foo)</span>\n<span class=\"sd\">        &gt;&gt;&gt; user_request = f1.result()</span>\n<span class=\"sd\">        &gt;&gt;&gt; # Wait for a response and  the GraphActor in another proc</span>\n<span class=\"sd\">        &gt;&gt;&gt; edge, priority, edge_data = user_request[0]</span>\n<span class=\"sd\">        &gt;&gt;&gt; user_resp_payload = testdata_feedback_payload(edge, &#39;match&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; f2 = client.post(user_resp_payload)</span>\n<span class=\"sd\">        &gt;&gt;&gt; f2.result()</span>\n<span class=\"sd\">        &gt;&gt;&gt; # Debug by getting the actor over a mp.Pipe</span>\n<span class=\"sd\">        &gt;&gt;&gt; f3 = client.post({&#39;action&#39;: &#39;debug&#39;})</span>\n<span class=\"sd\">        &gt;&gt;&gt; actor = f3.result()</span>\n<span class=\"sd\">        &gt;&gt;&gt; actor.infr.dump_logs()</span>\n<span class=\"sd\">        &gt;&gt;&gt; #print(client.post({&#39;action&#39;: &#39;logs&#39;}).result())</span>\n\n<span class=\"sd\">    # Ignore:</span>\n<span class=\"sd\">    #     &gt;&gt;&gt; from ibeis.web.graph_server import *</span>\n<span class=\"sd\">    #     &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">    #     &gt;&gt;&gt; client = GraphClient(autoinit=True)</span>\n<span class=\"sd\">    #     &gt;&gt;&gt; # Start the GraphActor in another proc</span>\n<span class=\"sd\">    #     &gt;&gt;&gt; client.post(testdata_start_payload(list(range(1, 10)))).result()</span>\n<span class=\"sd\">    #     &gt;&gt;&gt; #</span>\n<span class=\"sd\">    #     &gt;&gt;&gt; f1 = client.post({&#39;action&#39;: &#39;continue_review&#39;})</span>\n<span class=\"sd\">    #     &gt;&gt;&gt; user_request = f1.result()</span>\n<span class=\"sd\">    #     &gt;&gt;&gt; # The infr algorithm needs a review</span>\n<span class=\"sd\">    #     &gt;&gt;&gt; edge, priority, edge_data = user_request[0]</span>\n<span class=\"sd\">    #     &gt;&gt;&gt; #</span>\n<span class=\"sd\">    #     &gt;&gt;&gt; client.post(testdata_feedback_payload(edge, &#39;match&#39;))</span>\n<span class=\"sd\">    #     &gt;&gt;&gt; client.post({&#39;action&#39;: &#39;continue_review&#39;})</span>\n<span class=\"sd\">    #     &gt;&gt;&gt; client.post(testdata_feedback_payload(edge, &#39;match&#39;))</span>\n<span class=\"sd\">    #     &gt;&gt;&gt; client.post(testdata_feedback_payload(edge, &#39;match&#39;))</span>\n<span class=\"sd\">    #     &gt;&gt;&gt; client.post({&#39;action&#39;: &#39;continue_review&#39;})</span>\n<span class=\"sd\">    #     &gt;&gt;&gt; client.post(testdata_feedback_payload(edge, &#39;match&#39;))</span>\n<span class=\"sd\">    #     &gt;&gt;&gt; client.post({&#39;action&#39;: &#39;wait&#39;, &#39;num&#39;: float(30)})</span>\n<span class=\"sd\">    #     &gt;&gt;&gt; client.post({&#39;action&#39;: &#39;continue_review&#39;})</span>\n<span class=\"sd\">    #     &gt;&gt;&gt; client.post(testdata_feedback_payload(edge, &#39;match&#39;))</span>\n<span class=\"sd\">    #     &gt;&gt;&gt; client.post(testdata_feedback_payload(edge, &#39;match&#39;))</span>\n<span class=\"sd\">    #     &gt;&gt;&gt; client.post({&#39;action&#39;: &#39;continue_review&#39;})</span>\n<span class=\"sd\">    #     &gt;&gt;&gt; client.post(testdata_feedback_payload(edge, &#39;match&#39;))</span>\n<span class=\"sd\">    #     &gt;&gt;&gt; client.post({&#39;action&#39;: &#39;continue_review&#39;})</span>\n<span class=\"sd\">    #     &gt;&gt;&gt; client.post(testdata_feedback_payload(edge, &#39;match&#39;))</span>\n<span class=\"sd\">    #     &gt;&gt;&gt; client.post({&#39;action&#39;: &#39;continue_review&#39;})</span>\n<span class=\"sd\">    #     &gt;&gt;&gt; client.post(testdata_feedback_payload(edge, &#39;match&#39;))</span>\n<span class=\"sd\">    #     &gt;&gt;&gt; client.post(testdata_feedback_payload(edge, &#39;match&#39;))</span>\n<span class=\"sd\">    #     &gt;&gt;&gt; client.post({&#39;action&#39;: &#39;continue_review&#39;})</span>\n<span class=\"sd\">    #     &gt;&gt;&gt; client.post(testdata_feedback_payload(edge, &#39;match&#39;))</span>\n<span class=\"sd\">    #     &gt;&gt;&gt; client.post({&#39;action&#39;: &#39;continue_review&#39;})</span>\n<span class=\"sd\">    #     &gt;&gt;&gt; client.post(testdata_feedback_payload(edge, &#39;match&#39;))</span>\n<span class=\"sd\">    #     &gt;&gt;&gt; client.post({&#39;action&#39;: &#39;continue_review&#39;})</span>\n<span class=\"sd\">    #     &gt;&gt;&gt; client.post(testdata_feedback_payload(edge, &#39;match&#39;))</span>\n<span class=\"sd\">    #     &gt;&gt;&gt; client.post(testdata_feedback_payload(edge, &#39;match&#39;))</span>\n<span class=\"sd\">    #     &gt;&gt;&gt; client.post({&#39;action&#39;: &#39;continue_review&#39;})</span>\n<span class=\"sd\">    #     &gt;&gt;&gt; client.post(testdata_feedback_payload(edge, &#39;match&#39;))</span>\n<span class=\"sd\">    #     &gt;&gt;&gt; client.post({&#39;action&#39;: &#39;continue_review&#39;})</span>\n<span class=\"sd\">    #     &gt;&gt;&gt; client.post(testdata_feedback_payload(edge, &#39;match&#39;))</span>\n<span class=\"sd\">    #     &gt;&gt;&gt; client.post({&#39;action&#39;: &#39;continue_review&#39;})</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">graph_uuid</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">callbacks</span><span class=\"o\">=</span><span class=\"p\">{},</span> <span class=\"n\">autoinit</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">graph_uuid</span> <span class=\"o\">=</span> <span class=\"n\">graph_uuid</span>\n        <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">callbacks</span> <span class=\"o\">=</span> <span class=\"n\">callbacks</span>\n        <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">executor</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">review_dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">review_vip</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">futures</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n        <span class=\"c1\"># Hack around the double review problem</span>\n        <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">prev_vip</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n        <span class=\"c1\"># Save status of the client (the status of the futures)</span>\n        <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Initialized&#39;</span>\n        <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">infr_status</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">exception</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n        <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">aids</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">imagesets</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">extr</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">autoinit</span><span class=\"p\">:</span>\n            <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">initialize</span><span class=\"p\">()</span>\n\n<div class=\"viewcode-block\" id=\"GraphClient.initialize\"><a class=\"viewcode-back\" href=\"../../../../ibeis.web/#ibeis.web.graph_server.GraphClient.initialize\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">initialize</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">):</span>\n        <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">executor</span> <span class=\"o\">=</span> <span class=\"n\">GraphActor</span><span class=\"o\">.</span><span class=\"n\">executor</span><span class=\"p\">()</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__del__</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">):</span>\n        <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">shutdown</span><span class=\"p\">()</span>\n\n<div class=\"viewcode-block\" id=\"GraphClient.shutdown\"><a class=\"viewcode-back\" href=\"../../../../ibeis.web/#ibeis.web.graph_server.GraphClient.shutdown\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">shutdown</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">action</span><span class=\"p\">,</span> <span class=\"n\">future</span> <span class=\"ow\">in</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">futures</span><span class=\"p\">:</span>\n            <span class=\"n\">future</span><span class=\"o\">.</span><span class=\"n\">cancel</span><span class=\"p\">()</span>\n        <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">futures</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Shutdown&#39;</span>\n        <span class=\"k\">if</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">executor</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">executor</span><span class=\"o\">.</span><span class=\"n\">shutdown</span><span class=\"p\">(</span><span class=\"n\">wait</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">executor</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></div>\n\n<div class=\"viewcode-block\" id=\"GraphClient.post\"><a class=\"viewcode-back\" href=\"../../../../ibeis.web/#ibeis.web.graph_server.GraphClient.post\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">post</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">payload</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"s1\">&#39;action&#39;</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">payload</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s1\">&#39;payload must be a dict with an action&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">future</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">executor</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">)</span>\n        <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">futures</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">payload</span><span class=\"p\">[</span><span class=\"s1\">&#39;action&#39;</span><span class=\"p\">],</span> <span class=\"n\">future</span><span class=\"p\">))</span>\n\n        <span class=\"c1\"># Update graph_client infr_status for all external calls</span>\n        <span class=\"n\">payload_</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;action&#39;</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;get_infr_status&#39;</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">future_</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">executor</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"n\">payload_</span><span class=\"p\">)</span>\n        <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">futures</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">payload_</span><span class=\"p\">[</span><span class=\"s1\">&#39;action&#39;</span><span class=\"p\">],</span> <span class=\"n\">future_</span><span class=\"p\">))</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">future</span></div>\n\n<div class=\"viewcode-block\" id=\"GraphClient.cleanup\"><a class=\"viewcode-back\" href=\"../../../../ibeis.web/#ibeis.web.graph_server.GraphClient.cleanup\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">cleanup</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">):</span>\n        <span class=\"c1\"># remove done items from our list</span>\n        <span class=\"n\">latest_infr_status</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">new_futures</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">action</span><span class=\"p\">,</span> <span class=\"n\">future</span> <span class=\"ow\">in</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">futures</span><span class=\"p\">:</span>\n            <span class=\"n\">exception</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n            <span class=\"k\">if</span> <span class=\"n\">future</span><span class=\"o\">.</span><span class=\"n\">done</span><span class=\"p\">():</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"n\">action</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;get_infr_status&#39;</span><span class=\"p\">:</span>\n                        <span class=\"n\">latest_infr_status</span> <span class=\"o\">=</span> <span class=\"n\">future</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">()</span>\n                    <span class=\"n\">exception</span> <span class=\"o\">=</span> <span class=\"n\">future</span><span class=\"o\">.</span><span class=\"n\">exception</span><span class=\"p\">()</span>\n                <span class=\"k\">except</span> <span class=\"n\">concurrent</span><span class=\"o\">.</span><span class=\"n\">futures</span><span class=\"o\">.</span><span class=\"n\">CancelledError</span><span class=\"p\">:</span>\n                    <span class=\"k\">pass</span>\n                <span class=\"k\">if</span> <span class=\"n\">exception</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                    <span class=\"n\">new_futures</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">action</span><span class=\"p\">,</span> <span class=\"n\">future</span><span class=\"p\">))</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">future</span><span class=\"o\">.</span><span class=\"n\">running</span><span class=\"p\">():</span>\n                    <span class=\"n\">new_futures</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">action</span><span class=\"p\">,</span> <span class=\"n\">future</span><span class=\"p\">))</span>\n                <span class=\"k\">elif</span> <span class=\"n\">action</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;continue_review&#39;</span><span class=\"p\">:</span>\n                    <span class=\"n\">future</span><span class=\"o\">.</span><span class=\"n\">cancel</span><span class=\"p\">()</span>\n                <span class=\"k\">elif</span> <span class=\"n\">action</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;latest_logs&#39;</span><span class=\"p\">:</span>\n                    <span class=\"n\">future</span><span class=\"o\">.</span><span class=\"n\">cancel</span><span class=\"p\">()</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">new_futures</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">action</span><span class=\"p\">,</span> <span class=\"n\">future</span><span class=\"p\">))</span>\n        <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">futures</span> <span class=\"o\">=</span> <span class=\"n\">new_futures</span>\n        <span class=\"k\">return</span> <span class=\"n\">latest_infr_status</span></div>\n\n<div class=\"viewcode-block\" id=\"GraphClient.refresh_status\"><a class=\"viewcode-back\" href=\"../../../../ibeis.web/#ibeis.web.graph_server.GraphClient.refresh_status\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">refresh_status</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">):</span>\n        <span class=\"n\">latest_infr_status</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">cleanup</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">latest_infr_status</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">infr_status</span> <span class=\"o\">=</span> <span class=\"n\">latest_infr_status</span>\n\n        <span class=\"n\">num_futures</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">futures</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">review_dict</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Finished&#39;</span>\n        <span class=\"k\">elif</span> <span class=\"n\">num_futures</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Waiting (Empty Queue)&#39;</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">action</span><span class=\"p\">,</span> <span class=\"n\">future</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">futures</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"n\">exception</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n            <span class=\"k\">if</span> <span class=\"n\">future</span><span class=\"o\">.</span><span class=\"n\">done</span><span class=\"p\">():</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"n\">exception</span> <span class=\"o\">=</span> <span class=\"n\">future</span><span class=\"o\">.</span><span class=\"n\">exception</span><span class=\"p\">()</span>\n                <span class=\"k\">except</span> <span class=\"n\">concurrent</span><span class=\"o\">.</span><span class=\"n\">futures</span><span class=\"o\">.</span><span class=\"n\">CancelledError</span><span class=\"p\">:</span>\n                    <span class=\"k\">pass</span>\n            <span class=\"k\">if</span> <span class=\"n\">exception</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Working&#39;</span>\n                <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">exception</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Exception&#39;</span>\n                <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">exception</span> <span class=\"o\">=</span> <span class=\"n\">exception</span>\n            <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"si\">%s</span><span class=\"s1\"> (</span><span class=\"si\">%d</span><span class=\"s1\"> in Futures Queue)&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">status</span><span class=\"p\">,</span> <span class=\"n\">num_futures</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"p\">,</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">exception</span></div>\n\n<div class=\"viewcode-block\" id=\"GraphClient.add_annots\"><a class=\"viewcode-back\" href=\"../../../../ibeis.web/#ibeis.web.graph_server.GraphClient.add_annots\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">add_annots</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span><span class=\"s1\">&#39;not done yet&#39;</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"GraphClient.update\"><a class=\"viewcode-back\" href=\"../../../../ibeis.web/#ibeis.web.graph_server.GraphClient.update\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">data_list</span><span class=\"p\">):</span>\n        <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">review_vip</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">data_list</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;GRAPH CLIENT GOT NONE UPDATE&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">review_dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">data_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">data_list</span><span class=\"p\">)</span>\n            <span class=\"n\">num_samples</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n            <span class=\"n\">num_items</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">data_list</span><span class=\"p\">)</span>\n            <span class=\"n\">num_samples</span> <span class=\"o\">=</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">num_samples</span><span class=\"p\">,</span> <span class=\"n\">num_items</span><span class=\"p\">)</span>\n            <span class=\"n\">first</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">data_list</span><span class=\"p\">[:</span><span class=\"n\">num_samples</span><span class=\"p\">])</span>\n\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;UPDATING GRAPH CLIENT WITH </span><span class=\"si\">{}</span><span class=\"s1\"> ITEM(S):&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">num_items</span><span class=\"p\">))</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;First few are: &#39;</span> <span class=\"o\">+</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr4</span><span class=\"p\">(</span><span class=\"n\">first</span><span class=\"p\">,</span> <span class=\"n\">si</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">precision</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">))</span>\n            <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">review_dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">priority</span><span class=\"p\">,</span> <span class=\"n\">edge_data_dict</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"n\">data_list</span><span class=\"p\">:</span>\n                <span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span> <span class=\"o\">=</span> <span class=\"n\">edge</span>\n                <span class=\"k\">if</span> <span class=\"n\">aid2</span> <span class=\"o\">&lt;</span> <span class=\"n\">aid1</span><span class=\"p\">:</span>\n                    <span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span> <span class=\"o\">=</span> <span class=\"n\">aid2</span><span class=\"p\">,</span> <span class=\"n\">aid1</span>\n                <span class=\"n\">edge</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">review_vip</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                    <span class=\"c1\"># Hack around the double review problem</span>\n                    <span class=\"k\">if</span> <span class=\"n\">edge</span> <span class=\"o\">!=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">prev_vip</span><span class=\"p\">:</span>\n                        <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">review_vip</span> <span class=\"o\">=</span> <span class=\"n\">edge</span>\n                <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">review_dict</span><span class=\"p\">[</span><span class=\"n\">edge</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">priority</span><span class=\"p\">,</span> <span class=\"n\">edge_data_dict</span><span class=\"p\">,</span> <span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"GraphClient.check\"><a class=\"viewcode-back\" href=\"../../../../ibeis.web/#ibeis.web.graph_server.GraphClient.check\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">check</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">edge</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">edge</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">review_dict</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>\n        <span class=\"n\">priority</span><span class=\"p\">,</span> <span class=\"n\">data_dict</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">review_dict</span><span class=\"p\">[</span><span class=\"n\">edge</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">priority</span><span class=\"p\">,</span> <span class=\"n\">data_dict</span></div>\n\n<div class=\"viewcode-block\" id=\"GraphClient.sample\"><a class=\"viewcode-back\" href=\"../../../../ibeis.web/#ibeis.web.graph_server.GraphClient.sample\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">sample</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">previous_edge_list</span><span class=\"o\">=</span><span class=\"p\">[],</span> <span class=\"n\">max_previous_edges</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">review_dict</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">controller_inject</span><span class=\"o\">.</span><span class=\"n\">WebReviewFinishedException</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">graph_uuid</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;SAMPLING&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">edge_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">review_dict</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">edge_list</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n        <span class=\"n\">edge</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">if</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">review_vip</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">review_vip</span> <span class=\"ow\">in</span> <span class=\"n\">edge_list</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">edge_list</span><span class=\"p\">)</span> <span class=\"o\">&gt;=</span> <span class=\"n\">max_previous_edges</span><span class=\"p\">:</span>\n                <span class=\"n\">vip_1</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">review_vip</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n                <span class=\"n\">vip_2</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">review_vip</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n\n                <span class=\"n\">found</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n                <span class=\"k\">for</span> <span class=\"n\">edge_1</span><span class=\"p\">,</span> <span class=\"n\">edge_2</span> <span class=\"ow\">in</span> <span class=\"n\">previous_edge_list</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"n\">edge_1</span> <span class=\"o\">==</span> <span class=\"n\">vip_1</span> <span class=\"ow\">and</span> <span class=\"n\">edge_2</span> <span class=\"o\">==</span> <span class=\"n\">vip_2</span><span class=\"p\">:</span>\n                        <span class=\"n\">found</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n                        <span class=\"k\">break</span>\n\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">found</span><span class=\"p\">:</span>\n                    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;SHOWING VIP TO USER!!!&#39;</span><span class=\"p\">)</span>\n                    <span class=\"n\">edge</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">review_vip</span>\n                    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">prev_vip</span> <span class=\"o\">=</span> <span class=\"n\">edge</span>\n                    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">review_vip</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;VIP ALREADY SHOWN TO THIS USER!!! (PROBABLY A RACE CONDITION, SAMPLE RANDOMLY INSTEAD)&#39;</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;GETTING TOO LOW FOR VIP RACE CONDITION CHECK!!!&#39;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">edge</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;VIP ALREADY SHOWN!!!&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">edge</span> <span class=\"o\">=</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">choice</span><span class=\"p\">(</span><span class=\"n\">edge_list</span><span class=\"p\">)</span>\n\n        <span class=\"n\">priority</span><span class=\"p\">,</span> <span class=\"n\">data_dict</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">review_dict</span><span class=\"p\">[</span><span class=\"n\">edge</span><span class=\"p\">]</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;SAMPLED edge = </span><span class=\"si\">{!r}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">priority</span><span class=\"p\">,</span> <span class=\"n\">data_dict</span></div></div>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.web.graph_server</span>\n<span class=\"sd\">        python -m ibeis.web.graph_server --allexamples</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">multiprocessing</span>\n    <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">freeze_support</span><span class=\"p\">()</span>  <span class=\"c1\"># for win32</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>  <span class=\"c1\"># NOQA</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">doctest_funcs</span><span class=\"p\">()</span>\n</pre></div>", "current_page_name": "_modules/ibeis/web/graph_server", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}