{"parents": [{"link": "../../../", "title": "Module code"}, {"link": "../../", "title": "ibeis"}], "title": "ibeis.web.apis_query", "body": "<h1>Source code for ibeis.web.apis_query</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">Dependencies: flask, tornado</span>\n\n<span class=\"sd\">SeeAlso:</span>\n<span class=\"sd\">    routes.turk_identification</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"k\">import</span> <span class=\"n\">absolute_import</span><span class=\"p\">,</span> <span class=\"n\">division</span><span class=\"p\">,</span> <span class=\"n\">print_function</span><span class=\"p\">,</span> <span class=\"n\">unicode_literals</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.control</span> <span class=\"k\">import</span> <span class=\"n\">accessor_decors</span><span class=\"p\">,</span> <span class=\"n\">controller_inject</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.hots</span> <span class=\"k\">import</span> <span class=\"n\">pipeline</span>\n<span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"k\">import</span> <span class=\"n\">url_for</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">current_app</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"kn\">from</span> <span class=\"nn\">os.path</span> <span class=\"k\">import</span> <span class=\"n\">join</span><span class=\"p\">,</span> <span class=\"n\">dirname</span><span class=\"p\">,</span> <span class=\"n\">abspath</span><span class=\"p\">,</span> <span class=\"n\">exists</span>\n<span class=\"kn\">import</span> <span class=\"nn\">cv2</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>   <span class=\"c1\"># NOQA</span>\n<span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.web</span> <span class=\"k\">import</span> <span class=\"n\">appfuncs</span> <span class=\"k\">as</span> <span class=\"n\">appf</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis</span> <span class=\"k\">import</span> <span class=\"n\">constants</span> <span class=\"k\">as</span> <span class=\"n\">const</span>\n<span class=\"kn\">import</span> <span class=\"nn\">traceback</span>\n<span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"kn\">import</span> <span class=\"nn\">six</span>\n<span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"k\">import</span> <span class=\"n\">datetime</span>\n<span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">noinject</span><span class=\"p\">(</span><span class=\"s1\">&#39;[apis_query]&#39;</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">CLASS_INJECT_KEY</span><span class=\"p\">,</span> <span class=\"n\">register_ibs_method</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"n\">controller_inject</span><span class=\"o\">.</span><span class=\"n\">make_ibs_register_decorator</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">))</span>\n<span class=\"n\">register_api</span>   <span class=\"o\">=</span> <span class=\"n\">controller_inject</span><span class=\"o\">.</span><span class=\"n\">get_ibeis_flask_api</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"n\">register_route</span> <span class=\"o\">=</span> <span class=\"n\">controller_inject</span><span class=\"o\">.</span><span class=\"n\">get_ibeis_flask_route</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">GRAPH_CLIENT_PEEK</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n\n\n<span class=\"n\">ANNOT_INFR_PEAK_MAX</span> <span class=\"o\">=</span> <span class=\"mi\">50</span>\n\n\n<div class=\"viewcode-block\" id=\"get_recognition_query_aids\"><a class=\"viewcode-back\" href=\"../../../../ibeis.web/#ibeis.web.apis_query.get_recognition_query_aids\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"nd\">@accessor_decors</span><span class=\"o\">.</span><span class=\"n\">default_decorator</span>\n<span class=\"nd\">@register_api</span><span class=\"p\">(</span><span class=\"s1\">&#39;/api/query/annot/rowid/&#39;</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;GET&#39;</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_recognition_query_aids</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">is_known</span><span class=\"p\">,</span> <span class=\"n\">species</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    DEPCIRATE</span>\n\n<span class=\"sd\">    RESTful:</span>\n<span class=\"sd\">        Method: GET</span>\n<span class=\"sd\">        URL:    /api/query/annot/rowid/</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">qaid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_aids</span><span class=\"p\">(</span><span class=\"n\">is_known</span><span class=\"o\">=</span><span class=\"n\">is_known</span><span class=\"p\">,</span> <span class=\"n\">species</span><span class=\"o\">=</span><span class=\"n\">species</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">qaid_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"query_chips_simple_dict\"><a class=\"viewcode-back\" href=\"../../../../ibeis.web/#ibeis.web.apis_query.query_chips_simple_dict\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"nd\">@register_api</span><span class=\"p\">(</span><span class=\"s1\">&#39;/api/query/chip/dict/simple/&#39;</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;GET&#39;</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">query_chips_simple_dict</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Runs query_chips, but returns a json compatible dictionary</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        same as query_chips</span>\n\n<span class=\"sd\">    RESTful:</span>\n<span class=\"sd\">        Method: GET</span>\n<span class=\"sd\">        URL:    /api/query/chip/dict/simple/</span>\n\n<span class=\"sd\">    SeeAlso:</span>\n<span class=\"sd\">        query_chips</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.web.apis_query --test-query_chips_simple_dict:0</span>\n<span class=\"sd\">        python -m ibeis.web.apis_query --test-query_chips_simple_dict:1</span>\n\n<span class=\"sd\">        python -m ibeis.web.apis_query --test-query_chips_simple_dict:0 --humpbacks</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # WEB_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.control.IBEISControl import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(defaultdb=&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; #qaid = ibs.get_valid_aids()[0:3]</span>\n<span class=\"sd\">        &gt;&gt;&gt; qaids = ibs.get_valid_aids()</span>\n<span class=\"sd\">        &gt;&gt;&gt; daids = ibs.get_valid_aids()</span>\n<span class=\"sd\">        &gt;&gt;&gt; dict_list = ibs.query_chips_simple_dict(qaids, daids)</span>\n<span class=\"sd\">        &gt;&gt;&gt; qgids = ibs.get_annot_image_rowids(qaids)</span>\n<span class=\"sd\">        &gt;&gt;&gt; qnids = ibs.get_annot_name_rowids(qaids)</span>\n<span class=\"sd\">        &gt;&gt;&gt; for dict_, qgid, qnid in list(zip(dict_list, qgids, qnids)):</span>\n<span class=\"sd\">        &gt;&gt;&gt;     dict_[&#39;qgid&#39;] = qgid</span>\n<span class=\"sd\">        &gt;&gt;&gt;     dict_[&#39;qnid&#39;] = qnid</span>\n<span class=\"sd\">        &gt;&gt;&gt;     dict_[&#39;dgid_list&#39;] = ibs.get_annot_image_rowids(dict_[&#39;daid_list&#39;])</span>\n<span class=\"sd\">        &gt;&gt;&gt;     dict_[&#39;dnid_list&#39;] = ibs.get_annot_name_rowids(dict_[&#39;daid_list&#39;])</span>\n<span class=\"sd\">        &gt;&gt;&gt;     dict_[&#39;dgname_list&#39;] = ibs.get_image_gnames(dict_[&#39;dgid_list&#39;])</span>\n<span class=\"sd\">        &gt;&gt;&gt;     dict_[&#39;qgname&#39;] = ibs.get_image_gnames(dict_[&#39;qgid&#39;])</span>\n<span class=\"sd\">        &gt;&gt;&gt; result  = ut.repr2(dict_list, nl=2, precision=2, hack_liststr=True)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = result.replace(&#39;u\\&#39;&#39;, &#39;&quot;&#39;).replace(&#39;\\&#39;&#39;, &#39;&quot;&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # WEB_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.control.IBEISControl import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import time</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; import requests</span>\n<span class=\"sd\">        &gt;&gt;&gt; # Start up the web instance</span>\n<span class=\"sd\">        &gt;&gt;&gt; web_instance = ibeis.opendb_in_background(db=&#39;testdb1&#39;, web=True, browser=False)</span>\n<span class=\"sd\">        &gt;&gt;&gt; time.sleep(10)</span>\n<span class=\"sd\">        &gt;&gt;&gt; web_port = ibs.get_web_port_via_scan()</span>\n<span class=\"sd\">        &gt;&gt;&gt; if web_port is None:</span>\n<span class=\"sd\">        &gt;&gt;&gt;     raise ValueError(&#39;IA web server is not running on any expected port&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; baseurl = &#39;http://127.0.1.1:%s&#39; % (web_port, )</span>\n<span class=\"sd\">        &gt;&gt;&gt; data = dict(qaid_list=[1])</span>\n<span class=\"sd\">        &gt;&gt;&gt; resp = requests.get(baseurl + &#39;/api/query/chip/simple/dict/&#39;, data=data)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(resp)</span>\n<span class=\"sd\">        &gt;&gt;&gt; web_instance.terminate()</span>\n<span class=\"sd\">        &gt;&gt;&gt; json_dict = resp.json()</span>\n<span class=\"sd\">        &gt;&gt;&gt; cmdict_list = json_dict[&#39;response&#39;]</span>\n<span class=\"sd\">        &gt;&gt;&gt; assert &#39;score_list&#39; in cmdict_list[0]</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s1\">&#39;return_cm_simple_dict&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"k\">return</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">query_chips</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"query_chips_dict\"><a class=\"viewcode-back\" href=\"../../../../ibeis.web/#ibeis.web.apis_query.query_chips_dict\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"nd\">@register_api</span><span class=\"p\">(</span><span class=\"s1\">&#39;/api/query/chip/dict/&#39;</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;GET&#39;</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">query_chips_dict</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Runs query_chips, but returns a json compatible dictionary</span>\n\n<span class=\"sd\">    RESTful:</span>\n<span class=\"sd\">        Method: GET</span>\n<span class=\"sd\">        URL:    /api/query/chip/dict/</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s1\">&#39;return_cm_dict&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"k\">return</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">query_chips</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"process_graph_match_html\"><a class=\"viewcode-back\" href=\"../../../../ibeis.web/#ibeis.web.apis_query.process_graph_match_html\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"nd\">@register_api</span><span class=\"p\">(</span><span class=\"s1\">&#39;/api/review/query/graph/&#39;</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;POST&#39;</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">process_graph_match_html</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    RESTful:</span>\n<span class=\"sd\">        Method: POST</span>\n<span class=\"sd\">        URL:    /api/review/query/graph/</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">def</span> <span class=\"nf\">sanitize</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">):</span>\n        <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span>\n        <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">())</span>\n        <span class=\"k\">return</span> <span class=\"n\">state</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">uuid</span>\n    <span class=\"n\">map_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">&#39;sameanimal&#39;</span>       <span class=\"p\">:</span> <span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">EVIDENCE_DECISION</span><span class=\"o\">.</span><span class=\"n\">INT_TO_CODE</span><span class=\"p\">[</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">EVIDENCE_DECISION</span><span class=\"o\">.</span><span class=\"n\">POSITIVE</span><span class=\"p\">],</span>\n        <span class=\"s1\">&#39;differentanimals&#39;</span> <span class=\"p\">:</span> <span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">EVIDENCE_DECISION</span><span class=\"o\">.</span><span class=\"n\">INT_TO_CODE</span><span class=\"p\">[</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">EVIDENCE_DECISION</span><span class=\"o\">.</span><span class=\"n\">NEGATIVE</span><span class=\"p\">],</span>\n        <span class=\"s1\">&#39;cannottell&#39;</span>       <span class=\"p\">:</span> <span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">EVIDENCE_DECISION</span><span class=\"o\">.</span><span class=\"n\">INT_TO_CODE</span><span class=\"p\">[</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">EVIDENCE_DECISION</span><span class=\"o\">.</span><span class=\"n\">INCOMPARABLE</span><span class=\"p\">],</span>\n        <span class=\"s1\">&#39;unreviewed&#39;</span>       <span class=\"p\">:</span> <span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">EVIDENCE_DECISION</span><span class=\"o\">.</span><span class=\"n\">INT_TO_CODE</span><span class=\"p\">[</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">EVIDENCE_DECISION</span><span class=\"o\">.</span><span class=\"n\">UNREVIEWED</span><span class=\"p\">],</span>\n        <span class=\"s1\">&#39;unknown&#39;</span>          <span class=\"p\">:</span> <span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">EVIDENCE_DECISION</span><span class=\"o\">.</span><span class=\"n\">INT_TO_CODE</span><span class=\"p\">[</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">EVIDENCE_DECISION</span><span class=\"o\">.</span><span class=\"n\">UNKNOWN</span><span class=\"p\">],</span>\n        <span class=\"s1\">&#39;photobomb&#39;</span>        <span class=\"p\">:</span> <span class=\"s1\">&#39;photobomb&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;scenerymatch&#39;</span>     <span class=\"p\">:</span> <span class=\"s1\">&#39;scenerymatch&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;excludetop&#39;</span>       <span class=\"p\">:</span> <span class=\"s1\">&#39;excludetop&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;excludebottom&#39;</span>    <span class=\"p\">:</span> <span class=\"s1\">&#39;excludebottom&#39;</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">annot_uuid_1</span> <span class=\"o\">=</span> <span class=\"n\">uuid</span><span class=\"o\">.</span><span class=\"n\">UUID</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">form</span><span class=\"p\">[</span><span class=\"s1\">&#39;identification-annot-uuid-1&#39;</span><span class=\"p\">])</span>\n    <span class=\"n\">annot_uuid_2</span> <span class=\"o\">=</span> <span class=\"n\">uuid</span><span class=\"o\">.</span><span class=\"n\">UUID</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">form</span><span class=\"p\">[</span><span class=\"s1\">&#39;identification-annot-uuid-2&#39;</span><span class=\"p\">])</span>\n    <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">form</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;identification-submit&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"n\">sanitize</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">)</span>\n    <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"n\">map_dict</span><span class=\"p\">[</span><span class=\"n\">state</span><span class=\"p\">]</span>\n    <span class=\"n\">tag_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">if</span> <span class=\"n\">state</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s1\">&#39;photobomb&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;scenerymatch&#39;</span><span class=\"p\">]:</span>\n        <span class=\"n\">tag_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">)</span>\n        <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">EVIDENCE_DECISION</span><span class=\"o\">.</span><span class=\"n\">NEGATIVE</span>\n    <span class=\"k\">assert</span> <span class=\"n\">state</span> <span class=\"ow\">in</span> <span class=\"n\">map_dict</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">(),</span> <span class=\"s1\">&#39;matching state is unrecognized&#39;</span>\n    <span class=\"c1\"># Get checbox tags</span>\n    <span class=\"n\">checbox_tag_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;photobomb&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;scenerymatch&#39;</span><span class=\"p\">]</span>\n    <span class=\"k\">for</span> <span class=\"n\">checbox_tag</span> <span class=\"ow\">in</span> <span class=\"n\">checbox_tag_list</span><span class=\"p\">:</span>\n        <span class=\"n\">checkbox_name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;ia-</span><span class=\"si\">%s</span><span class=\"s1\">-value&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">checbox_tag</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">checkbox_name</span> <span class=\"ow\">in</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">form</span><span class=\"p\">:</span>\n            <span class=\"n\">tag_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">checbox_tag</span><span class=\"p\">)</span>\n    <span class=\"n\">tag_list</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">tag_list</span><span class=\"p\">))</span>\n    <span class=\"n\">confidence_default</span> <span class=\"o\">=</span> <span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">CONFIDENCE</span><span class=\"o\">.</span><span class=\"n\">INT_TO_CODE</span><span class=\"p\">[</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">CONFIDENCE</span><span class=\"o\">.</span><span class=\"n\">UNKNOWN</span><span class=\"p\">]</span>\n    <span class=\"n\">confidence</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">form</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;ia-turk-confidence&#39;</span><span class=\"p\">,</span> <span class=\"n\">confidence_default</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">confidence</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">CONFIDENCE</span><span class=\"o\">.</span><span class=\"n\">CODE_TO_INT</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">():</span>\n        <span class=\"n\">confidence</span> <span class=\"o\">=</span> <span class=\"n\">confidence_default</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">tag_list</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"n\">tag_str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">tag_str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;;&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">tag_list</span><span class=\"p\">)</span>\n    <span class=\"n\">user_times</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">&#39;server_time_start&#39;</span> <span class=\"p\">:</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">form</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;server_time_start&#39;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">),</span>\n        <span class=\"s1\">&#39;client_time_start&#39;</span> <span class=\"p\">:</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">form</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;client_time_start&#39;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">),</span>\n        <span class=\"s1\">&#39;client_time_end&#39;</span>   <span class=\"p\">:</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">form</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;client_time_end&#39;</span><span class=\"p\">,</span>   <span class=\"kc\">None</span><span class=\"p\">),</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">annot_uuid_1</span><span class=\"p\">,</span> <span class=\"n\">annot_uuid_2</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"n\">tag_str</span><span class=\"p\">,</span> <span class=\"s1\">&#39;web-api&#39;</span><span class=\"p\">,</span> <span class=\"n\">confidence</span><span class=\"p\">,</span> <span class=\"n\">user_times</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"ensure_review_image\"><a class=\"viewcode-back\" href=\"../../../../ibeis.web/#ibeis.web.apis_query.ensure_review_image\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">ensure_review_image</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid</span><span class=\"p\">,</span> <span class=\"n\">cm</span><span class=\"p\">,</span> <span class=\"n\">qreq_</span><span class=\"p\">,</span> <span class=\"n\">view_orientation</span><span class=\"o\">=</span><span class=\"s1\">&#39;vertical&#39;</span><span class=\"p\">,</span>\n                        <span class=\"n\">draw_matches</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">draw_heatmask</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;&quot;</span>\n<span class=\"sd\">    Create the review image for a pair of annotations</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.web.apis_query ensure_review_image --show</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # SCRIPT</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.web.apis_query import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; cm, qreq_ = ibeis.testdata_cm(&#39;PZ_MTEST&#39;, a=&#39;default:dindex=0:10,qindex=0:1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = qreq_.ibs</span>\n<span class=\"sd\">        &gt;&gt;&gt; aid = cm.get_top_aids()[0]</span>\n<span class=\"sd\">        &gt;&gt;&gt; tt = ut.tic(&#39;make image&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; image, _ = ensure_review_image(ibs, aid, cm, qreq_)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.toc(tt)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.quit_if_noshow()</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&#39;image.shape = %r&#39; % (image.shape,))</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&#39;image.dtype = %r&#39; % (image.dtype,))</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.print_object_size(image)</span>\n<span class=\"sd\">        &gt;&gt;&gt; import plottool as pt</span>\n<span class=\"sd\">        &gt;&gt;&gt; pt.imshow(image)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.show_if_requested()</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.gui</span> <span class=\"k\">import</span> <span class=\"n\">id_review_api</span>\n    <span class=\"c1\"># Get thumb path</span>\n    <span class=\"n\">match_thumb_path</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_match_thumbdir</span><span class=\"p\">()</span>\n    <span class=\"n\">match_thumb_filename</span> <span class=\"o\">=</span> <span class=\"n\">id_review_api</span><span class=\"o\">.</span><span class=\"n\">get_match_thumb_fname</span><span class=\"p\">(</span><span class=\"n\">cm</span><span class=\"p\">,</span> <span class=\"n\">aid</span><span class=\"p\">,</span> <span class=\"n\">qreq_</span><span class=\"p\">,</span>\n                                                               <span class=\"n\">view_orientation</span><span class=\"o\">=</span><span class=\"n\">view_orientation</span><span class=\"p\">,</span>\n                                                               <span class=\"n\">draw_matches</span><span class=\"o\">=</span><span class=\"n\">draw_matches</span><span class=\"p\">,</span>\n                                                               <span class=\"n\">draw_heatmask</span><span class=\"o\">=</span><span class=\"n\">draw_heatmask</span><span class=\"p\">)</span>\n    <span class=\"n\">match_thumb_filepath</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">match_thumb_path</span><span class=\"p\">,</span> <span class=\"n\">match_thumb_filename</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">verbose</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Checking: </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">match_thumb_filepath</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">match_thumb_filepath</span><span class=\"p\">):</span>\n        <span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">imread</span><span class=\"p\">(</span><span class=\"n\">match_thumb_filepath</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">render_config</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;dpi&#39;</span>              <span class=\"p\">:</span> <span class=\"mi\">300</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;overlay&#39;</span>          <span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;draw_fmatches&#39;</span>    <span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;draw_fmatch&#39;</span>      <span class=\"p\">:</span> <span class=\"n\">draw_matches</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;show_matches&#39;</span>     <span class=\"p\">:</span> <span class=\"n\">draw_matches</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;show_ell&#39;</span>         <span class=\"p\">:</span> <span class=\"n\">draw_matches</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;show_lines&#39;</span>       <span class=\"p\">:</span> <span class=\"n\">draw_matches</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;show_ori&#39;</span>         <span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;heatmask&#39;</span>         <span class=\"p\">:</span> <span class=\"n\">draw_heatmask</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;vert&#39;</span>             <span class=\"p\">:</span> <span class=\"n\">view_orientation</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;vertical&#39;</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;show_aidstr&#39;</span>      <span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;show_name&#39;</span>        <span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;show_exemplar&#39;</span>    <span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;show_num_gt&#39;</span>      <span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;show_timedelta&#39;</span>   <span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;show_name_rank&#39;</span>   <span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;show_score&#39;</span>       <span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;show_annot_score&#39;</span> <span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;show_name_score&#39;</span>  <span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;draw_lbl&#39;</span>         <span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;draw_border&#39;</span>      <span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;white_background&#39;</span> <span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"p\">,</span> <span class=\"s1\">&#39;render_single_result&#39;</span><span class=\"p\">):</span>\n            <span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">render_single_result</span><span class=\"p\">(</span><span class=\"n\">cm</span><span class=\"p\">,</span> <span class=\"n\">aid</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">render_config</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">render_single_annotmatch</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"p\">,</span> <span class=\"n\">aid</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">render_config</span><span class=\"p\">)</span>\n        <span class=\"c1\">#image = vt.crop_out_imgfill(image, fillval=(255, 255, 255), thresh=64)</span>\n        <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">imwrite</span><span class=\"p\">(</span><span class=\"n\">match_thumb_filepath</span><span class=\"p\">,</span> <span class=\"n\">image</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"n\">match_thumb_filepath</span></div>\n\n\n<div class=\"viewcode-block\" id=\"review_graph_match_html_alias\"><a class=\"viewcode-back\" href=\"../../../../ibeis.web/#ibeis.web.apis_query.review_graph_match_html_alias\">[docs]</a><span class=\"nd\">@register_api</span><span class=\"p\">(</span><span class=\"s1\">&#39;/api/review/query/graph/alias/&#39;</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;POST&#39;</span><span class=\"p\">],</span> <span class=\"n\">__api_plural_check__</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">review_graph_match_html_alias</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"n\">review_graph_match_html</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"review_graph_match_html\"><a class=\"viewcode-back\" href=\"../../../../ibeis.web/#ibeis.web.apis_query.review_graph_match_html\">[docs]</a><span class=\"nd\">@register_api</span><span class=\"p\">(</span><span class=\"s1\">&#39;/api/review/query/graph/&#39;</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;GET&#39;</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">review_graph_match_html</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">review_pair</span><span class=\"p\">,</span> <span class=\"n\">cm_dict</span><span class=\"p\">,</span> <span class=\"n\">query_config_dict</span><span class=\"p\">,</span>\n                            <span class=\"n\">_internal_state</span><span class=\"p\">,</span> <span class=\"n\">callback_url</span><span class=\"p\">,</span>\n                            <span class=\"n\">callback_method</span><span class=\"o\">=</span><span class=\"s1\">&#39;POST&#39;</span><span class=\"p\">,</span>\n                            <span class=\"n\">view_orientation</span><span class=\"o\">=</span><span class=\"s1\">&#39;vertical&#39;</span><span class=\"p\">,</span> <span class=\"n\">include_jquery</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (ibeis.IBEISController):  image analysis api</span>\n<span class=\"sd\">        review_pair (dict): pair of annot uuids</span>\n<span class=\"sd\">        cm_dict (dict):</span>\n<span class=\"sd\">        query_config_dict (dict):</span>\n<span class=\"sd\">        _internal_state (?):</span>\n<span class=\"sd\">        callback_url (str):</span>\n<span class=\"sd\">        callback_method (unicode): (default = u&#39;POST&#39;)</span>\n<span class=\"sd\">        view_orientation (unicode): (default = u&#39;vertical&#39;)</span>\n<span class=\"sd\">        include_jquery (bool): (default = False)</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.web.apis_query review_graph_match_html --show</span>\n\n<span class=\"sd\">        ibeis --web</span>\n<span class=\"sd\">        python -m ibeis.web.apis_query review_graph_match_html --show --domain=localhost</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # WEB_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.web.apis_query import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; web_ibs = ibeis.opendb_bg_web(&#39;testdb1&#39;)  # , domain=&#39;http://52.33.105.88&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; aids = web_ibs.send_ibeis_request(&#39;/api/annot/&#39;, &#39;get&#39;)[0:2]</span>\n<span class=\"sd\">        &gt;&gt;&gt; uuid_list = web_ibs.send_ibeis_request(&#39;/api/annot/uuid/&#39;, type_=&#39;get&#39;, aid_list=aids)</span>\n<span class=\"sd\">        &gt;&gt;&gt; quuid_list = uuid_list[0:1]</span>\n<span class=\"sd\">        &gt;&gt;&gt; duuid_list = uuid_list</span>\n<span class=\"sd\">        &gt;&gt;&gt; query_config_dict = {</span>\n<span class=\"sd\">        &gt;&gt;&gt;    # &#39;pipeline_root&#39; : &#39;BC_DTW&#39;</span>\n<span class=\"sd\">        &gt;&gt;&gt; }</span>\n<span class=\"sd\">        &gt;&gt;&gt; data = dict(</span>\n<span class=\"sd\">        &gt;&gt;&gt;     query_annot_uuid_list=quuid_list, database_annot_uuid_list=duuid_list,</span>\n<span class=\"sd\">        &gt;&gt;&gt;     query_config_dict=query_config_dict,</span>\n<span class=\"sd\">        &gt;&gt;&gt; )</span>\n<span class=\"sd\">        &gt;&gt;&gt; jobid = web_ibs.send_ibeis_request(&#39;/api/engine/query/graph/&#39;, **data)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&#39;jobid = %r&#39; % (jobid,))</span>\n<span class=\"sd\">        &gt;&gt;&gt; status_response = web_ibs.wait_for_results(jobid)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result_response = web_ibs.read_engine_results(jobid)</span>\n<span class=\"sd\">        &gt;&gt;&gt; inference_result = result_response[&#39;json_result&#39;]</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&#39;inference_result = %r&#39; % (inference_result,))</span>\n<span class=\"sd\">        &gt;&gt;&gt; auuid2_cm = inference_result[&#39;cm_dict&#39;]</span>\n<span class=\"sd\">        &gt;&gt;&gt; quuid = quuid_list[0]</span>\n<span class=\"sd\">        &gt;&gt;&gt; class_dict = auuid2_cm[str(quuid)]</span>\n<span class=\"sd\">        &gt;&gt;&gt; # Get information in frontend</span>\n<span class=\"sd\">        &gt;&gt;&gt; #ibs = ibeis.opendb(&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; #cm = match_obj = ibeis.ChipMatch.from_dict(class_dict, ibs=ibs)</span>\n<span class=\"sd\">        &gt;&gt;&gt; #match_obj.print_rawinfostr()</span>\n<span class=\"sd\">        &gt;&gt;&gt; # Make the dictionary a bit more managable</span>\n<span class=\"sd\">        &gt;&gt;&gt; #match_obj.compress_top_feature_matches(num=2)</span>\n<span class=\"sd\">        &gt;&gt;&gt; #class_dict = match_obj.to_dict(ibs=ibs)</span>\n<span class=\"sd\">        &gt;&gt;&gt; cm_dict = class_dict</span>\n<span class=\"sd\">        &gt;&gt;&gt; # Package for review</span>\n<span class=\"sd\">        &gt;&gt;&gt; review_pair = {&#39;annot_uuid_1&#39;: quuid, &#39;annot_uuid_2&#39;: duuid_list[1]}</span>\n<span class=\"sd\">        &gt;&gt;&gt; callback_method = u&#39;POST&#39;</span>\n<span class=\"sd\">        &gt;&gt;&gt; view_orientation = u&#39;vertical&#39;</span>\n<span class=\"sd\">        &gt;&gt;&gt; include_jquery = False</span>\n<span class=\"sd\">        &gt;&gt;&gt; kw = dict(</span>\n<span class=\"sd\">        &gt;&gt;&gt;     review_pair=review_pair,</span>\n<span class=\"sd\">        &gt;&gt;&gt;     cm_dict=cm_dict,</span>\n<span class=\"sd\">        &gt;&gt;&gt;     query_config_dict=query_config_dict,</span>\n<span class=\"sd\">        &gt;&gt;&gt;     _internal_state=None,</span>\n<span class=\"sd\">        &gt;&gt;&gt;     callback_url = None,</span>\n<span class=\"sd\">        &gt;&gt;&gt; )</span>\n<span class=\"sd\">        &gt;&gt;&gt; html_str = web_ibs.send_ibeis_request(&#39;/api/review/query/graph/&#39;, type_=&#39;get&#39;, **kw)</span>\n<span class=\"sd\">        &gt;&gt;&gt; web_ibs.terminate2()</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.quit_if_noshow()</span>\n<span class=\"sd\">        &gt;&gt;&gt; import plottool as pt</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.render_html(html_str)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.show_if_requested()</span>\n\n<span class=\"sd\">    Example2:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; # This starts off using web to get information, but finishes the rest in python</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.web.apis_query import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.exec_funckw(review_graph_match_html, globals())</span>\n<span class=\"sd\">        &gt;&gt;&gt; web_ibs = ibeis.opendb_bg_web(&#39;testdb1&#39;)  # , domain=&#39;http://52.33.105.88&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; aids = web_ibs.send_ibeis_request(&#39;/api/annot/&#39;, &#39;get&#39;)[0:2]</span>\n<span class=\"sd\">        &gt;&gt;&gt; uuid_list = web_ibs.send_ibeis_request(&#39;/api/annot/uuid/&#39;, type_=&#39;get&#39;, aid_list=aids)</span>\n<span class=\"sd\">        &gt;&gt;&gt; quuid_list = uuid_list[0:1]</span>\n<span class=\"sd\">        &gt;&gt;&gt; duuid_list = uuid_list</span>\n<span class=\"sd\">        &gt;&gt;&gt; query_config_dict = {</span>\n<span class=\"sd\">        &gt;&gt;&gt;    # &#39;pipeline_root&#39; : &#39;BC_DTW&#39;</span>\n<span class=\"sd\">        &gt;&gt;&gt; }</span>\n<span class=\"sd\">        &gt;&gt;&gt; data = dict(</span>\n<span class=\"sd\">        &gt;&gt;&gt;     query_annot_uuid_list=quuid_list, database_annot_uuid_list=duuid_list,</span>\n<span class=\"sd\">        &gt;&gt;&gt;     query_config_dict=query_config_dict,</span>\n<span class=\"sd\">        &gt;&gt;&gt; )</span>\n<span class=\"sd\">        &gt;&gt;&gt; jobid = web_ibs.send_ibeis_request(&#39;/api/engine/query/graph/&#39;, **data)</span>\n<span class=\"sd\">        &gt;&gt;&gt; status_response = web_ibs.wait_for_results(jobid)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result_response = web_ibs.read_engine_results(jobid)</span>\n<span class=\"sd\">        &gt;&gt;&gt; web_ibs.terminate2()</span>\n<span class=\"sd\">        &gt;&gt;&gt; # NOW WORK IN THE FRONTEND</span>\n<span class=\"sd\">        &gt;&gt;&gt; inference_result = result_response[&#39;json_result&#39;]</span>\n<span class=\"sd\">        &gt;&gt;&gt; auuid2_cm = inference_result[&#39;cm_dict&#39;]</span>\n<span class=\"sd\">        &gt;&gt;&gt; quuid = quuid_list[0]</span>\n<span class=\"sd\">        &gt;&gt;&gt; class_dict = auuid2_cm[str(quuid)]</span>\n<span class=\"sd\">        &gt;&gt;&gt; # Get information in frontend</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; cm = ibeis.ChipMatch.from_dict(class_dict, ibs=ibs)</span>\n<span class=\"sd\">        &gt;&gt;&gt; cm.print_rawinfostr()</span>\n<span class=\"sd\">        &gt;&gt;&gt; # Make the dictionary a bit more managable</span>\n<span class=\"sd\">        &gt;&gt;&gt; cm.compress_top_feature_matches(num=1)</span>\n<span class=\"sd\">        &gt;&gt;&gt; cm.print_rawinfostr()</span>\n<span class=\"sd\">        &gt;&gt;&gt; class_dict = cm.to_dict(ibs=ibs)</span>\n<span class=\"sd\">        &gt;&gt;&gt; cm_dict = class_dict</span>\n<span class=\"sd\">        &gt;&gt;&gt; # Package for review ( CANT CALL DIRECTLY BECAUSE OF OUT OF CONTEXT )</span>\n<span class=\"sd\">        &gt;&gt;&gt; review_pair = {&#39;annot_uuid_1&#39;: quuid, &#39;annot_uuid_2&#39;: duuid_list[1]}</span>\n<span class=\"sd\">        &gt;&gt;&gt; x = review_graph_match_html(ibs, review_pair, cm_dict,</span>\n<span class=\"sd\">        &gt;&gt;&gt;                             query_config_dict, _internal_state=None,</span>\n<span class=\"sd\">        &gt;&gt;&gt;                             callback_url=None)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.quit_if_noshow()</span>\n<span class=\"sd\">        &gt;&gt;&gt; import plottool as pt</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.render_html(html_str)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.show_if_requested()</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.hots</span> <span class=\"k\">import</span> <span class=\"n\">chip_match</span>\n    <span class=\"c1\"># from ibeis.algo.hots.query_request import QueryRequest</span>\n\n    <span class=\"n\">proot</span> <span class=\"o\">=</span> <span class=\"n\">query_config_dict</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;pipeline_root&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;vsmany&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">proot</span> <span class=\"o\">=</span> <span class=\"n\">query_config_dict</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;proot&#39;</span><span class=\"p\">,</span> <span class=\"n\">proot</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">proot</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"s1\">&#39;bc_dtw&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;oc_wdtw&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;curvrankdorsal&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;curvrankfluke&#39;</span><span class=\"p\">):</span>\n        <span class=\"bp\">cls</span> <span class=\"o\">=</span> <span class=\"n\">chip_match</span><span class=\"o\">.</span><span class=\"n\">AnnotMatch</span>  <span class=\"c1\"># ibs.depc_annot.requestclass_dict[&#39;BC_DTW&#39;]</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"bp\">cls</span> <span class=\"o\">=</span> <span class=\"n\">chip_match</span><span class=\"o\">.</span><span class=\"n\">ChipMatch</span>\n\n    <span class=\"n\">view_orientation</span> <span class=\"o\">=</span> <span class=\"n\">view_orientation</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"n\">view_orientation</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s1\">&#39;vertical&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;horizontal&#39;</span><span class=\"p\">]:</span>\n        <span class=\"n\">view_orientation</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;horizontal&#39;</span>\n\n    <span class=\"c1\"># unpack info</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">annot_uuid_1</span> <span class=\"o\">=</span> <span class=\"n\">review_pair</span><span class=\"p\">[</span><span class=\"s1\">&#39;annot_uuid_1&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">annot_uuid_2</span> <span class=\"o\">=</span> <span class=\"n\">review_pair</span><span class=\"p\">[</span><span class=\"s1\">&#39;annot_uuid_2&#39;</span><span class=\"p\">]</span>\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span><span class=\"p\">:</span>\n        <span class=\"c1\">#??? HACK</span>\n        <span class=\"c1\"># FIXME:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[!!!!] review_pair = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">review_pair</span><span class=\"p\">,))</span>\n        <span class=\"n\">review_pair</span> <span class=\"o\">=</span> <span class=\"n\">review_pair</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">annot_uuid_1</span> <span class=\"o\">=</span> <span class=\"n\">review_pair</span><span class=\"p\">[</span><span class=\"s1\">&#39;annot_uuid_1&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">annot_uuid_2</span> <span class=\"o\">=</span> <span class=\"n\">review_pair</span><span class=\"p\">[</span><span class=\"s1\">&#39;annot_uuid_2&#39;</span><span class=\"p\">]</span>\n\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">web_check_uuids</span><span class=\"p\">(</span><span class=\"n\">qannot_uuid_list</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">annot_uuid_1</span><span class=\"p\">],</span>\n                        <span class=\"n\">dannot_uuid_list</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">annot_uuid_2</span><span class=\"p\">])</span>\n\n    <span class=\"n\">aid_1</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_aids_from_uuid</span><span class=\"p\">(</span><span class=\"n\">annot_uuid_1</span><span class=\"p\">)</span>\n    <span class=\"n\">aid_2</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_aids_from_uuid</span><span class=\"p\">(</span><span class=\"n\">annot_uuid_2</span><span class=\"p\">)</span>\n\n    <span class=\"n\">cm</span> <span class=\"o\">=</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">from_dict</span><span class=\"p\">(</span><span class=\"n\">cm_dict</span><span class=\"p\">,</span> <span class=\"n\">ibs</span><span class=\"o\">=</span><span class=\"n\">ibs</span><span class=\"p\">)</span>\n    <span class=\"n\">qreq_</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">new_query_request</span><span class=\"p\">([</span><span class=\"n\">aid_1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"n\">aid_2</span><span class=\"p\">],</span>\n                                  <span class=\"n\">cfgdict</span><span class=\"o\">=</span><span class=\"n\">query_config_dict</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Get score</span>\n    <span class=\"n\">idx</span> <span class=\"o\">=</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">daid2_idx</span><span class=\"p\">[</span><span class=\"n\">aid_2</span><span class=\"p\">]</span>\n    <span class=\"n\">match_score</span> <span class=\"o\">=</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">name_score_list</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span>\n    <span class=\"c1\">#match_score = cm.aid2_score[aid_2]</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">image_matches</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">ensure_review_image</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_2</span><span class=\"p\">,</span> <span class=\"n\">cm</span><span class=\"p\">,</span> <span class=\"n\">qreq_</span><span class=\"p\">,</span>\n                                               <span class=\"n\">view_orientation</span><span class=\"o\">=</span><span class=\"n\">view_orientation</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n        <span class=\"n\">image_matches</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">((</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">uint8</span><span class=\"p\">)</span>\n        <span class=\"n\">traceback</span><span class=\"o\">.</span><span class=\"n\">print_exc</span><span class=\"p\">()</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">image_clean</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">ensure_review_image</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_2</span><span class=\"p\">,</span> <span class=\"n\">cm</span><span class=\"p\">,</span> <span class=\"n\">qreq_</span><span class=\"p\">,</span>\n                                             <span class=\"n\">view_orientation</span><span class=\"o\">=</span><span class=\"n\">view_orientation</span><span class=\"p\">,</span>\n                                             <span class=\"n\">draw_matches</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n        <span class=\"n\">image_clean</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">((</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">uint8</span><span class=\"p\">)</span>\n        <span class=\"n\">traceback</span><span class=\"o\">.</span><span class=\"n\">print_exc</span><span class=\"p\">()</span>\n\n    <span class=\"n\">image_matches_src</span> <span class=\"o\">=</span> <span class=\"n\">appf</span><span class=\"o\">.</span><span class=\"n\">embed_image_html</span><span class=\"p\">(</span><span class=\"n\">image_matches</span><span class=\"p\">)</span>\n    <span class=\"n\">image_clean_src</span> <span class=\"o\">=</span> <span class=\"n\">appf</span><span class=\"o\">.</span><span class=\"n\">embed_image_html</span><span class=\"p\">(</span><span class=\"n\">image_clean</span><span class=\"p\">)</span>\n\n    <span class=\"n\">confidence_dict</span> <span class=\"o\">=</span> <span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">CONFIDENCE</span><span class=\"o\">.</span><span class=\"n\">NICE_TO_CODE</span>\n    <span class=\"n\">confidence_nice_list</span> <span class=\"o\">=</span> <span class=\"n\">confidence_dict</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span>\n    <span class=\"n\">confidence_text_list</span> <span class=\"o\">=</span> <span class=\"n\">confidence_dict</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()</span>\n    <span class=\"n\">confidence_selected_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">confidence_text</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;unspecified&#39;</span>\n        <span class=\"k\">for</span> <span class=\"n\">confidence_text</span> <span class=\"ow\">in</span> <span class=\"n\">confidence_text_list</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">confidence_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">confidence_nice_list</span><span class=\"p\">,</span> <span class=\"n\">confidence_text_list</span><span class=\"p\">,</span> <span class=\"n\">confidence_selected_list</span><span class=\"p\">))</span>\n\n    <span class=\"k\">if</span> <span class=\"kc\">False</span><span class=\"p\">:</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">ibeis.web</span> <span class=\"k\">import</span> <span class=\"n\">apis_query</span>\n        <span class=\"n\">root_path</span> <span class=\"o\">=</span> <span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"n\">apis_query</span><span class=\"o\">.</span><span class=\"vm\">__file__</span><span class=\"p\">))</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">root_path</span> <span class=\"o\">=</span> <span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">))</span>\n    <span class=\"n\">css_file_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">[</span><span class=\"s1\">&#39;css&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;style.css&#39;</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"s1\">&#39;include&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bootstrap&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;css&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bootstrap.css&#39;</span><span class=\"p\">],</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">json_file_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">[</span><span class=\"s1\">&#39;javascript&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;script.js&#39;</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"s1\">&#39;include&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bootstrap&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;js&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bootstrap.js&#39;</span><span class=\"p\">],</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">include_jquery</span><span class=\"p\">:</span>\n        <span class=\"n\">json_file_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"p\">[</span><span class=\"s1\">&#39;javascript&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;jquery.min.js&#39;</span><span class=\"p\">],</span>\n        <span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">json_file_list</span>\n\n    <span class=\"n\">EMBEDDED_CSS</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>\n    <span class=\"n\">EMBEDDED_JAVASCRIPT</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>\n\n    <span class=\"n\">css_template_fmtstr</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&lt;style type=&quot;text/css&quot; ia-dependency=&quot;css&quot;&gt;</span><span class=\"si\">%s</span><span class=\"s1\">&lt;/style&gt;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span>\n    <span class=\"n\">json_template_fmtstr</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&lt;script type=&quot;text/javascript&quot; ia-dependency=&quot;javascript&quot;&gt;</span><span class=\"si\">%s</span><span class=\"s1\">&lt;/script&gt;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span>\n    <span class=\"k\">for</span> <span class=\"n\">css_file</span> <span class=\"ow\">in</span> <span class=\"n\">css_file_list</span><span class=\"p\">:</span>\n        <span class=\"n\">css_filepath_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">root_path</span><span class=\"p\">,</span> <span class=\"s1\">&#39;static&#39;</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">css_file</span>\n        <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">css_filepath_list</span><span class=\"p\">))</span> <span class=\"k\">as</span> <span class=\"n\">css_file</span><span class=\"p\">:</span>\n            <span class=\"n\">EMBEDDED_CSS</span> <span class=\"o\">+=</span> <span class=\"n\">css_template_fmtstr</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">css_file</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(),</span> <span class=\"p\">)</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">json_file</span> <span class=\"ow\">in</span> <span class=\"n\">json_file_list</span><span class=\"p\">:</span>\n        <span class=\"n\">json_filepath_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">root_path</span><span class=\"p\">,</span> <span class=\"s1\">&#39;static&#39;</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">json_file</span>\n        <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">json_filepath_list</span><span class=\"p\">))</span> <span class=\"k\">as</span> <span class=\"n\">json_file</span><span class=\"p\">:</span>\n            <span class=\"n\">EMBEDDED_JAVASCRIPT</span> <span class=\"o\">+=</span> <span class=\"n\">json_template_fmtstr</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">json_file</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(),</span> <span class=\"p\">)</span>\n\n    <span class=\"n\">annot_uuid_1</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">annot_uuid_1</span><span class=\"p\">)</span>\n    <span class=\"n\">annot_uuid_2</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">annot_uuid_2</span><span class=\"p\">)</span>\n\n    <span class=\"n\">embedded</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">globals</span><span class=\"p\">(),</span> <span class=\"o\">**</span><span class=\"nb\">locals</span><span class=\"p\">())</span>\n    <span class=\"k\">return</span> <span class=\"n\">appf</span><span class=\"o\">.</span><span class=\"n\">template</span><span class=\"p\">(</span><span class=\"s1\">&#39;turk&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;identification_insert&#39;</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">embedded</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"review_query_chips_test\"><a class=\"viewcode-back\" href=\"../../../../ibeis.web/#ibeis.web.apis_query.review_query_chips_test\">[docs]</a><span class=\"nd\">@register_route</span><span class=\"p\">(</span><span class=\"s1\">&#39;/test/review/query/chip/&#39;</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;GET&#39;</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">review_query_chips_test</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.web.apis_query review_query_chips_test --show</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # SCRIPT</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; web_ibs = ibeis.opendb_bg_web(</span>\n<span class=\"sd\">        &gt;&gt;&gt;     browser=True, url_suffix=&#39;/test/review/query/chip/?__format__=true&#39;)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">current_app</span><span class=\"o\">.</span><span class=\"n\">ibs</span>\n\n    <span class=\"c1\"># the old block curvature dtw</span>\n    <span class=\"k\">if</span> <span class=\"s1\">&#39;use_bc_dtw&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">:</span>\n        <span class=\"n\">query_config_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;pipeline_root&#39;</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;BC_DTW&#39;</span>\n        <span class=\"p\">}</span>\n    <span class=\"c1\"># the new oriented curvature dtw</span>\n    <span class=\"k\">elif</span> <span class=\"s1\">&#39;use_oc_wdtw&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">:</span>\n        <span class=\"n\">query_config_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;pipeline_root&#39;</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;OC_WDTW&#39;</span>\n        <span class=\"p\">}</span>\n    <span class=\"k\">elif</span> <span class=\"s1\">&#39;use_curvrank_dorsal&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">:</span>\n        <span class=\"n\">query_config_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;pipeline_root&#39;</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;CurvRankDorsal&#39;</span>\n        <span class=\"p\">}</span>\n    <span class=\"k\">elif</span> <span class=\"s1\">&#39;use_curvrank_fluke&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">:</span>\n        <span class=\"n\">query_config_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;pipeline_root&#39;</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;CurvRankFluke&#39;</span>\n        <span class=\"p\">}</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">query_config_dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"n\">result_dict</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">query_chips_test</span><span class=\"p\">(</span><span class=\"n\">query_config_dict</span><span class=\"o\">=</span><span class=\"n\">query_config_dict</span><span class=\"p\">)</span>\n\n    <span class=\"n\">review_pair</span> <span class=\"o\">=</span> <span class=\"n\">result_dict</span><span class=\"p\">[</span><span class=\"s1\">&#39;inference_dict&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;annot_pair_dict&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;review_pair_list&#39;</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"n\">annot_uuid_key</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">review_pair</span><span class=\"p\">[</span><span class=\"s1\">&#39;annot_uuid_key&#39;</span><span class=\"p\">])</span>\n    <span class=\"n\">cm_dict</span> <span class=\"o\">=</span> <span class=\"n\">result_dict</span><span class=\"p\">[</span><span class=\"s1\">&#39;cm_dict&#39;</span><span class=\"p\">][</span><span class=\"n\">annot_uuid_key</span><span class=\"p\">]</span>\n    <span class=\"n\">query_config_dict</span> <span class=\"o\">=</span> <span class=\"n\">result_dict</span><span class=\"p\">[</span><span class=\"s1\">&#39;query_config_dict&#39;</span><span class=\"p\">]</span>\n    <span class=\"n\">_internal_state</span> <span class=\"o\">=</span> <span class=\"n\">result_dict</span><span class=\"p\">[</span><span class=\"s1\">&#39;inference_dict&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;_internal_state&#39;</span><span class=\"p\">]</span>\n    <span class=\"n\">callback_url</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;callback_url&#39;</span><span class=\"p\">,</span> <span class=\"n\">url_for</span><span class=\"p\">(</span><span class=\"s1\">&#39;process_graph_match_html&#39;</span><span class=\"p\">))</span>\n    <span class=\"n\">callback_method</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;callback_method&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;POST&#39;</span><span class=\"p\">)</span>\n    <span class=\"c1\"># view_orientation = request.args.get(&#39;view_orientation&#39;, &#39;vertical&#39;)</span>\n    <span class=\"n\">view_orientation</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;view_orientation&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;horizontal&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"n\">template_html</span> <span class=\"o\">=</span> <span class=\"n\">review_graph_match_html</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">review_pair</span><span class=\"p\">,</span> <span class=\"n\">cm_dict</span><span class=\"p\">,</span>\n                                            <span class=\"n\">query_config_dict</span><span class=\"p\">,</span> <span class=\"n\">_internal_state</span><span class=\"p\">,</span>\n                                            <span class=\"n\">callback_url</span><span class=\"p\">,</span> <span class=\"n\">callback_method</span><span class=\"p\">,</span>\n                                            <span class=\"n\">view_orientation</span><span class=\"p\">,</span>\n                                            <span class=\"n\">include_jquery</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">template_html</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;&#39;</span>\n<span class=\"s1\">        &lt;script src=&quot;http://code.jquery.com/jquery-2.2.1.min.js&quot; ia-dependency=&quot;javascript&quot;&gt;&lt;/script&gt;</span>\n<span class=\"s1\">        </span><span class=\"si\">%s</span><span class=\"s1\"></span>\n<span class=\"s1\">    &#39;&#39;&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">template_html</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">template_html</span>\n    <span class=\"k\">return</span> <span class=\"s1\">&#39;done&#39;</span></div>\n\n\n<div class=\"viewcode-block\" id=\"review_query_chips_best\"><a class=\"viewcode-back\" href=\"../../../../ibeis.web/#ibeis.web.apis_query.review_query_chips_best\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"nd\">@register_api</span><span class=\"p\">(</span><span class=\"s1\">&#39;/api/review/query/chip/best/&#39;</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;GET&#39;</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">review_query_chips_best</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"c1\"># from ibeis.algo.hots import chip_match</span>\n\n    <span class=\"c1\"># query_config_dict = {}</span>\n\n    <span class=\"c1\"># Compile test data</span>\n    <span class=\"n\">qaid_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">aid</span><span class=\"p\">]</span>\n    <span class=\"n\">daid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_aids</span><span class=\"p\">()</span>\n    <span class=\"n\">result_dict</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">query_chips_graph</span><span class=\"p\">(</span><span class=\"n\">qaid_list</span><span class=\"p\">,</span> <span class=\"n\">daid_list</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n    <span class=\"n\">uuid</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">result_dict</span><span class=\"p\">[</span><span class=\"s1\">&#39;cm_dict&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">result_dict</span><span class=\"p\">[</span><span class=\"s1\">&#39;cm_dict&#39;</span><span class=\"p\">][</span><span class=\"n\">uuid</span><span class=\"p\">]</span>\n\n    <span class=\"n\">scores</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s1\">&#39;name_score_list&#39;</span><span class=\"p\">]</span>\n    <span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s1\">&#39;unique_name_list&#39;</span><span class=\"p\">]</span>\n    <span class=\"n\">best_index</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">argmax</span><span class=\"p\">(</span><span class=\"n\">scores</span><span class=\"p\">)</span>\n\n    <span class=\"n\">best_name</span> <span class=\"o\">=</span> <span class=\"n\">names</span><span class=\"p\">[</span><span class=\"n\">best_index</span><span class=\"p\">]</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">best_name</span></div>\n\n    <span class=\"c1\"># review_pair = result_dict[&#39;inference_dict&#39;][&#39;annot_pair_dict&#39;][&#39;review_pair_list&#39;][0]</span>\n\n    <span class=\"c1\"># annot_uuid_key = str(review_pair[&#39;annot_uuid_key&#39;])</span>\n    <span class=\"c1\"># cm_dict = result_dict[&#39;cm_dict&#39;][annot_uuid_key]</span>\n    <span class=\"c1\"># query_config_dict = result_dict[&#39;query_config_dict&#39;]</span>\n\n    <span class=\"c1\"># proot = query_config_dict.get(&#39;pipeline_root&#39;, &#39;vsmany&#39;)</span>\n    <span class=\"c1\"># proot = query_config_dict.get(&#39;proot&#39;, proot)</span>\n\n    <span class=\"c1\"># view_orientation = &#39;horizontal&#39;</span>\n\n    <span class=\"c1\"># # unpack info</span>\n    <span class=\"c1\"># try:</span>\n    <span class=\"c1\">#     annot_uuid_1 = review_pair[&#39;annot_uuid_1&#39;]</span>\n    <span class=\"c1\">#     annot_uuid_2 = review_pair[&#39;annot_uuid_2&#39;]</span>\n    <span class=\"c1\"># except Exception:</span>\n    <span class=\"c1\">#     #??? HACK</span>\n    <span class=\"c1\">#     # FIXME:</span>\n    <span class=\"c1\">#     print(&#39;[!!!!] review_pair = %r&#39; % (review_pair,))</span>\n    <span class=\"c1\">#     review_pair = review_pair[0]</span>\n    <span class=\"c1\">#     annot_uuid_1 = review_pair[&#39;annot_uuid_1&#39;]</span>\n    <span class=\"c1\">#     annot_uuid_2 = review_pair[&#39;annot_uuid_2&#39;]</span>\n\n    <span class=\"c1\"># ibs.web_check_uuids(qannot_uuid_list=[annot_uuid_1],</span>\n    <span class=\"c1\">#                     dannot_uuid_list=[annot_uuid_2])</span>\n\n    <span class=\"c1\"># aid_1 = ibs.get_annot_aids_from_uuid(annot_uuid_1)</span>\n    <span class=\"c1\"># aid_2 = ibs.get_annot_aids_from_uuid(annot_uuid_2)</span>\n\n    <span class=\"c1\"># cm = chip_match.ChipMatch.from_dict(cm_dict, ibs=ibs)</span>\n    <span class=\"c1\"># qreq_ = ibs.new_query_request([aid_1], [aid_2],</span>\n    <span class=\"c1\">#                               cfgdict=query_config_dict)</span>\n\n    <span class=\"c1\"># # Get score</span>\n    <span class=\"c1\"># # idx = cm.daid2_idx[aid_2]</span>\n    <span class=\"c1\"># # match_score = cm.name_score_list[idx]</span>\n    <span class=\"c1\"># match_score = cm.aid2_score[aid_2]</span>\n\n    <span class=\"c1\"># try:</span>\n    <span class=\"c1\">#     image_matches, _ = ensure_review_image(ibs, aid_2, cm, qreq_,</span>\n    <span class=\"c1\">#                                         view_orientation=view_orientation)</span>\n    <span class=\"c1\"># except KeyError:</span>\n    <span class=\"c1\">#     image_matches = np.zeros((100, 100, 3), dtype=np.uint8)</span>\n    <span class=\"c1\">#     traceback.print_exc()</span>\n    <span class=\"c1\"># try:</span>\n    <span class=\"c1\">#     image_clean, _ = ensure_review_image(ibs, aid_2, cm, qreq_,</span>\n    <span class=\"c1\">#                                       view_orientation=view_orientation,</span>\n    <span class=\"c1\">#                                       draw_matches=False)</span>\n    <span class=\"c1\"># except KeyError:</span>\n    <span class=\"c1\">#     image_clean = np.zeros((100, 100, 3), dtype=np.uint8)</span>\n    <span class=\"c1\">#     traceback.print_exc()</span>\n\n    <span class=\"c1\"># image_matches_src = appf.embed_image_html(image_matches)</span>\n    <span class=\"c1\"># image_clean_src = appf.embed_image_html(image_clean)</span>\n\n    <span class=\"c1\"># return_dict = {</span>\n    <span class=\"c1\">#     &#39;match&#39;: image_matches_src,</span>\n    <span class=\"c1\">#     &#39;clean&#39;: image_clean_src,</span>\n    <span class=\"c1\">#     &#39;score&#39;: match_score,</span>\n    <span class=\"c1\"># }</span>\n    <span class=\"c1\"># return return_dict</span>\n\n\n<div class=\"viewcode-block\" id=\"query_chips_test\"><a class=\"viewcode-back\" href=\"../../../../ibeis.web/#ibeis.web.apis_query.query_chips_test\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"nd\">@register_api</span><span class=\"p\">(</span><span class=\"s1\">&#39;/test/query/chip/&#39;</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;GET&#39;</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">query_chips_test</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">limited</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.web.apis_query query_chips_test</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # SLOW_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; # xdoctest: +SKIP</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.control.IBEISControl import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; qreq_ = ibeis.testdata_qreq_(defaultdb=&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = qreq_.ibs</span>\n<span class=\"sd\">        &gt;&gt;&gt; result_dict = ibs.query_chips_test()</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result_dict)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">random</span> <span class=\"k\">import</span> <span class=\"n\">shuffle</span>  <span class=\"c1\"># NOQA</span>\n    <span class=\"c1\"># Compile test data</span>\n    <span class=\"n\">aid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_aids</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"n\">aid</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">shuffle</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n        <span class=\"n\">qaid_list</span> <span class=\"o\">=</span> <span class=\"n\">aid_list</span><span class=\"p\">[:</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">qaid_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">aid</span><span class=\"p\">]</span>\n    <span class=\"n\">daid_list</span> <span class=\"o\">=</span> <span class=\"n\">aid_list</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">limited</span><span class=\"p\">:</span>\n        <span class=\"n\">daid_list</span> <span class=\"o\">=</span> <span class=\"n\">daid_list</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"p\">:]</span>\n\n    <span class=\"n\">result_dict</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">query_chips_graph</span><span class=\"p\">(</span><span class=\"n\">qaid_list</span><span class=\"p\">,</span> <span class=\"n\">daid_list</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">result_dict</span></div>\n\n\n<div class=\"viewcode-block\" id=\"query_chips_graph_complete\"><a class=\"viewcode-back\" href=\"../../../../ibeis.web/#ibeis.web.apis_query.query_chips_graph_complete\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"nd\">@register_api</span><span class=\"p\">(</span><span class=\"s1\">&#39;/api/query/graph/complete/&#39;</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;GET&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;POST&#39;</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">query_chips_graph_complete</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">query_config_dict</span><span class=\"o\">=</span><span class=\"p\">{},</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">theano</span>  <span class=\"c1\"># NOQA</span>\n\n    <span class=\"n\">cm_list</span><span class=\"p\">,</span> <span class=\"n\">qreq_</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">query_chips</span><span class=\"p\">(</span><span class=\"n\">qaid_list</span><span class=\"o\">=</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">daid_list</span><span class=\"o\">=</span><span class=\"n\">aid_list</span><span class=\"p\">,</span>\n                                     <span class=\"n\">cfgdict</span><span class=\"o\">=</span><span class=\"n\">query_config_dict</span><span class=\"p\">,</span> <span class=\"n\">return_request</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"n\">result_dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"k\">for</span> <span class=\"n\">cm</span> <span class=\"ow\">in</span> <span class=\"n\">cm_list</span><span class=\"p\">:</span>\n        <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_uuids</span><span class=\"p\">(</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">qaid</span><span class=\"p\">))</span>\n        <span class=\"n\">id_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_uuids</span><span class=\"p\">(</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">daid_list</span><span class=\"p\">)</span>\n        <span class=\"n\">score_list</span> <span class=\"o\">=</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">annot_score_list</span>\n        <span class=\"n\">value_list</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">score_list</span><span class=\"p\">,</span> <span class=\"n\">id_list</span><span class=\"p\">),</span> <span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">k_</span> <span class=\"o\">=</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">value_list</span><span class=\"p\">))</span>\n        <span class=\"n\">value_list</span> <span class=\"o\">=</span> <span class=\"n\">value_list</span><span class=\"p\">[:</span><span class=\"n\">k_</span><span class=\"p\">]</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">id_</span><span class=\"p\">):</span> <span class=\"n\">score</span>\n            <span class=\"k\">for</span> <span class=\"n\">score</span><span class=\"p\">,</span> <span class=\"n\">id_</span> <span class=\"ow\">in</span> <span class=\"n\">value_list</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">result_dict</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">result</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">result_dict</span></div>\n\n\n<div class=\"viewcode-block\" id=\"query_chips_graph\"><a class=\"viewcode-back\" href=\"../../../../ibeis.web/#ibeis.web.apis_query.query_chips_graph\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"nd\">@register_api</span><span class=\"p\">(</span><span class=\"s1\">&#39;/api/query/graph/&#39;</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;GET&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;POST&#39;</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">query_chips_graph</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">qaid_list</span><span class=\"p\">,</span> <span class=\"n\">daid_list</span><span class=\"p\">,</span> <span class=\"n\">user_feedback</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                      <span class=\"n\">query_config_dict</span><span class=\"o\">=</span><span class=\"p\">{},</span> <span class=\"n\">echo_query_params</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                      <span class=\"n\">cache_images</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"n\">view_orientation</span><span class=\"o\">=</span><span class=\"s1\">&#39;horizontal&#39;</span><span class=\"p\">,</span>\n                      <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.unstable.orig_graph_iden</span> <span class=\"k\">import</span> <span class=\"n\">OrigAnnotInference</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">theano</span>  <span class=\"c1\"># NOQA</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">uuid</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">convert_to_uuid</span><span class=\"p\">(</span><span class=\"n\">nid</span><span class=\"p\">):</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_name_texts</span><span class=\"p\">(</span><span class=\"n\">nid</span><span class=\"p\">)</span>\n            <span class=\"n\">uuid_</span> <span class=\"o\">=</span> <span class=\"n\">uuid</span><span class=\"o\">.</span><span class=\"n\">UUID</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n            <span class=\"n\">uuid_</span> <span class=\"o\">=</span> <span class=\"n\">nid</span>\n        <span class=\"k\">return</span> <span class=\"n\">uuid_</span>\n\n    <span class=\"n\">cm_list</span><span class=\"p\">,</span> <span class=\"n\">qreq_</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">query_chips</span><span class=\"p\">(</span><span class=\"n\">qaid_list</span><span class=\"o\">=</span><span class=\"n\">qaid_list</span><span class=\"p\">,</span> <span class=\"n\">daid_list</span><span class=\"o\">=</span><span class=\"n\">daid_list</span><span class=\"p\">,</span>\n                                     <span class=\"n\">cfgdict</span><span class=\"o\">=</span><span class=\"n\">query_config_dict</span><span class=\"p\">,</span> <span class=\"n\">return_request</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"n\">annot_inference</span> <span class=\"o\">=</span> <span class=\"n\">OrigAnnotInference</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"p\">,</span> <span class=\"n\">cm_list</span><span class=\"p\">,</span> <span class=\"n\">user_feedback</span><span class=\"p\">)</span>\n    <span class=\"n\">inference_dict</span> <span class=\"o\">=</span> <span class=\"n\">annot_inference</span><span class=\"o\">.</span><span class=\"n\">make_annot_inference_dict</span><span class=\"p\">()</span>\n\n    <span class=\"n\">cache_dir</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">cachedir</span><span class=\"p\">,</span> <span class=\"s1\">&#39;query_match&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ensuredir</span><span class=\"p\">(</span><span class=\"n\">cache_dir</span><span class=\"p\">)</span>\n\n    <span class=\"n\">cache_path</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"n\">reference</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"k\">if</span> <span class=\"n\">cache_images</span><span class=\"p\">:</span>\n        <span class=\"n\">reference</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">hashstr27</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">get_cfgstr</span><span class=\"p\">())</span>\n        <span class=\"n\">cache_path</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">cache_dir</span><span class=\"p\">,</span> <span class=\"s1\">&#39;qreq_cfgstr_</span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">reference</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ensuredir</span><span class=\"p\">(</span><span class=\"n\">cache_path</span><span class=\"p\">)</span>\n\n    <span class=\"n\">cm_dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"k\">for</span> <span class=\"n\">cm</span> <span class=\"ow\">in</span> <span class=\"n\">cm_list</span><span class=\"p\">:</span>\n        <span class=\"n\">quuid</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_uuids</span><span class=\"p\">(</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">qaid</span><span class=\"p\">)</span>\n        <span class=\"n\">cm_key</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">quuid</span><span class=\"p\">)</span>\n\n        <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">quuid</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n        <span class=\"n\">qannot_cache_filepath</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">cache_path</span><span class=\"p\">,</span> <span class=\"s1\">&#39;qannot_uuid_</span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ensuredir</span><span class=\"p\">(</span><span class=\"n\">qannot_cache_filepath</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">cache_images</span><span class=\"p\">:</span>\n            <span class=\"k\">assert</span> <span class=\"n\">cache_path</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span>\n\n            <span class=\"n\">score_list</span> <span class=\"o\">=</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">score_list</span>\n            <span class=\"n\">daid_list</span> <span class=\"o\">=</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">daid_list</span>\n\n            <span class=\"n\">zipped</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">score_list</span><span class=\"p\">,</span> <span class=\"n\">daid_list</span><span class=\"p\">),</span> <span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"n\">n_</span> <span class=\"o\">=</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">zipped</span><span class=\"p\">))</span>\n            <span class=\"n\">zipped</span> <span class=\"o\">=</span> <span class=\"n\">zipped</span><span class=\"p\">[:</span><span class=\"n\">n_</span><span class=\"p\">]</span>\n            <span class=\"n\">daid_set</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take_column</span><span class=\"p\">(</span><span class=\"n\">zipped</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n\n            <span class=\"n\">extern_flag_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">for</span> <span class=\"n\">daid</span> <span class=\"ow\">in</span> <span class=\"n\">daid_list</span><span class=\"p\">:</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Rendering match images to disk for daid=</span><span class=\"si\">%d</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">daid</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n                <span class=\"n\">extern_flag</span> <span class=\"o\">=</span> <span class=\"n\">daid</span> <span class=\"ow\">in</span> <span class=\"n\">daid_set</span>\n\n                <span class=\"k\">if</span> <span class=\"n\">extern_flag</span><span class=\"p\">:</span>\n                    <span class=\"n\">duuid</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_uuids</span><span class=\"p\">(</span><span class=\"n\">daid</span><span class=\"p\">)</span>\n\n                    <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">duuid</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n                    <span class=\"n\">dannot_cache_filepath</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">qannot_cache_filepath</span><span class=\"p\">,</span> <span class=\"s1\">&#39;dannot_uuid_</span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n                    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ensuredir</span><span class=\"p\">(</span><span class=\"n\">dannot_cache_filepath</span><span class=\"p\">)</span>\n\n                    <span class=\"n\">cache_filepath_fmtstr</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">dannot_cache_filepath</span><span class=\"p\">,</span> <span class=\"s1\">&#39;version_</span><span class=\"si\">%s</span><span class=\"s1\">_orient_</span><span class=\"si\">%s</span><span class=\"s1\">.png&#39;</span><span class=\"p\">)</span>\n\n                    <span class=\"k\">try</span><span class=\"p\">:</span>\n                        <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">filepath_matches</span> <span class=\"o\">=</span> <span class=\"n\">ensure_review_image</span><span class=\"p\">(</span>\n                            <span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">daid</span><span class=\"p\">,</span> <span class=\"n\">cm</span><span class=\"p\">,</span> <span class=\"n\">qreq_</span><span class=\"p\">,</span>\n                            <span class=\"n\">view_orientation</span><span class=\"o\">=</span><span class=\"n\">view_orientation</span><span class=\"p\">,</span>\n                            <span class=\"n\">draw_matches</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                            <span class=\"n\">draw_heatmask</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n                    <span class=\"k\">except</span><span class=\"p\">:</span>\n                        <span class=\"n\">filepath_matches</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n                        <span class=\"n\">extern_flag</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;error&#39;</span>\n                    <span class=\"k\">try</span><span class=\"p\">:</span>\n                        <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">filepath_heatmask</span> <span class=\"o\">=</span> <span class=\"n\">ensure_review_image</span><span class=\"p\">(</span>\n                            <span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">daid</span><span class=\"p\">,</span> <span class=\"n\">cm</span><span class=\"p\">,</span> <span class=\"n\">qreq_</span><span class=\"p\">,</span>\n                            <span class=\"n\">view_orientation</span><span class=\"o\">=</span><span class=\"n\">view_orientation</span><span class=\"p\">,</span>\n                            <span class=\"n\">draw_matches</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                            <span class=\"n\">draw_heatmask</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n                    <span class=\"k\">except</span><span class=\"p\">:</span>\n                        <span class=\"n\">filepath_heatmask</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n                        <span class=\"n\">extern_flag</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;error&#39;</span>\n                    <span class=\"k\">try</span><span class=\"p\">:</span>\n                        <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">filepath_clean</span> <span class=\"o\">=</span> <span class=\"n\">ensure_review_image</span><span class=\"p\">(</span>\n                            <span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">daid</span><span class=\"p\">,</span> <span class=\"n\">cm</span><span class=\"p\">,</span> <span class=\"n\">qreq_</span><span class=\"p\">,</span>\n                            <span class=\"n\">view_orientation</span><span class=\"o\">=</span><span class=\"n\">view_orientation</span><span class=\"p\">,</span>\n                            <span class=\"n\">draw_matches</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                            <span class=\"n\">draw_heatmask</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n                    <span class=\"k\">except</span><span class=\"p\">:</span>\n                        <span class=\"n\">filepath_clean</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n                        <span class=\"n\">extern_flag</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;error&#39;</span>\n\n                    <span class=\"k\">if</span> <span class=\"n\">filepath_matches</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                        <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;matches&#39;</span><span class=\"p\">,</span> <span class=\"n\">view_orientation</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n                        <span class=\"n\">cache_filepath</span> <span class=\"o\">=</span> <span class=\"n\">cache_filepath_fmtstr</span> <span class=\"o\">%</span> <span class=\"n\">args</span>\n                        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">symlink</span><span class=\"p\">(</span><span class=\"n\">filepath_matches</span><span class=\"p\">,</span> <span class=\"n\">cache_filepath</span><span class=\"p\">)</span>\n\n                    <span class=\"k\">if</span> <span class=\"n\">filepath_heatmask</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                        <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;heatmask&#39;</span><span class=\"p\">,</span> <span class=\"n\">view_orientation</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n                        <span class=\"n\">cache_filepath</span> <span class=\"o\">=</span> <span class=\"n\">cache_filepath_fmtstr</span> <span class=\"o\">%</span> <span class=\"n\">args</span>\n                        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">symlink</span><span class=\"p\">(</span><span class=\"n\">filepath_heatmask</span><span class=\"p\">,</span> <span class=\"n\">cache_filepath</span><span class=\"p\">)</span>\n\n                    <span class=\"k\">if</span> <span class=\"n\">filepath_clean</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                        <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;clean&#39;</span><span class=\"p\">,</span> <span class=\"n\">view_orientation</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n                        <span class=\"n\">cache_filepath</span> <span class=\"o\">=</span> <span class=\"n\">cache_filepath_fmtstr</span> <span class=\"o\">%</span> <span class=\"n\">args</span>\n                        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">symlink</span><span class=\"p\">(</span><span class=\"n\">filepath_clean</span><span class=\"p\">,</span> <span class=\"n\">cache_filepath</span><span class=\"p\">)</span>\n\n                <span class=\"n\">extern_flag_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">extern_flag</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">extern_flag_list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n        <span class=\"n\">cm_dict</span><span class=\"p\">[</span><span class=\"n\">cm_key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"c1\"># &#39;qaid&#39;                    : cm.qaid,</span>\n            <span class=\"s1\">&#39;qannot_uuid&#39;</span>             <span class=\"p\">:</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_uuids</span><span class=\"p\">(</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">qaid</span><span class=\"p\">),</span>\n            <span class=\"c1\"># &#39;qnid&#39;                    : cm.qnid,</span>\n            <span class=\"s1\">&#39;qname_uuid&#39;</span>              <span class=\"p\">:</span> <span class=\"n\">convert_to_uuid</span><span class=\"p\">(</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">qnid</span><span class=\"p\">),</span>\n            <span class=\"s1\">&#39;qname&#39;</span>                   <span class=\"p\">:</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_name_texts</span><span class=\"p\">(</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">qnid</span><span class=\"p\">),</span>\n            <span class=\"c1\"># &#39;daid_list&#39;               : cm.daid_list,</span>\n            <span class=\"s1\">&#39;dannot_uuid_list&#39;</span>        <span class=\"p\">:</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_uuids</span><span class=\"p\">(</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">daid_list</span><span class=\"p\">),</span>\n            <span class=\"c1\"># &#39;dnid_list&#39;               : cm.dnid_list,</span>\n            <span class=\"s1\">&#39;dname_uuid_list&#39;</span>         <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">convert_to_uuid</span><span class=\"p\">(</span><span class=\"n\">nid</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">nid</span> <span class=\"ow\">in</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">dnid_list</span><span class=\"p\">],</span>\n            <span class=\"c1\"># FIXME: use qreq_ state not ibeis state</span>\n            <span class=\"s1\">&#39;dname_list&#39;</span>              <span class=\"p\">:</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_name_texts</span><span class=\"p\">(</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">dnid_list</span><span class=\"p\">),</span>\n            <span class=\"s1\">&#39;score_list&#39;</span>              <span class=\"p\">:</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">score_list</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;annot_score_list&#39;</span>        <span class=\"p\">:</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">annot_score_list</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;fm_list&#39;</span>                 <span class=\"p\">:</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">fm_list</span> <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">cm</span><span class=\"p\">,</span> <span class=\"s1\">&#39;fm_list&#39;</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;fsv_list&#39;</span>                <span class=\"p\">:</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">fsv_list</span> <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">cm</span><span class=\"p\">,</span> <span class=\"s1\">&#39;fsv_list&#39;</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n            <span class=\"c1\"># Non-corresponding lists to above</span>\n            <span class=\"c1\"># &#39;unique_nids&#39;             : cm.unique_nids,</span>\n            <span class=\"s1\">&#39;unique_name_uuid_list&#39;</span>   <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">convert_to_uuid</span><span class=\"p\">(</span><span class=\"n\">nid</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">nid</span> <span class=\"ow\">in</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">unique_nids</span><span class=\"p\">],</span>\n            <span class=\"c1\"># FIXME: use qreq_ state not ibeis state</span>\n            <span class=\"s1\">&#39;unique_name_list&#39;</span>        <span class=\"p\">:</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_name_texts</span><span class=\"p\">(</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">unique_nids</span><span class=\"p\">),</span>\n            <span class=\"s1\">&#39;name_score_list&#39;</span>         <span class=\"p\">:</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">name_score_list</span><span class=\"p\">,</span>\n            <span class=\"c1\"># Placeholders for the reinitialization of the ChipMatch object</span>\n            <span class=\"s1\">&#39;fk_list&#39;</span>                 <span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;H_list&#39;</span>                  <span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;fsv_col_lbls&#39;</span>            <span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;filtnorm_aids&#39;</span>           <span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;filtnorm_fxs&#39;</span>            <span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;dannot_extern_reference&#39;</span> <span class=\"p\">:</span> <span class=\"n\">reference</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;dannot_extern_list&#39;</span>      <span class=\"p\">:</span> <span class=\"n\">extern_flag_list</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"n\">result_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">&#39;cm_dict&#39;</span>        <span class=\"p\">:</span> <span class=\"n\">cm_dict</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;inference_dict&#39;</span> <span class=\"p\">:</span> <span class=\"n\">inference_dict</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">echo_query_params</span><span class=\"p\">:</span>\n        <span class=\"n\">result_dict</span><span class=\"p\">[</span><span class=\"s1\">&#39;query_annot_uuid_list&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_uuids</span><span class=\"p\">(</span><span class=\"n\">qaid_list</span><span class=\"p\">)</span>\n        <span class=\"n\">result_dict</span><span class=\"p\">[</span><span class=\"s1\">&#39;database_annot_uuid_list&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_uuids</span><span class=\"p\">(</span><span class=\"n\">daid_list</span><span class=\"p\">)</span>\n        <span class=\"n\">result_dict</span><span class=\"p\">[</span><span class=\"s1\">&#39;query_config_dict&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">query_config_dict</span>\n    <span class=\"k\">return</span> <span class=\"n\">result_dict</span></div>\n\n\n<div class=\"viewcode-block\" id=\"query_chips_graph_match_thumb\"><a class=\"viewcode-back\" href=\"../../../../ibeis.web/#ibeis.web.apis_query.query_chips_graph_match_thumb\">[docs]</a><span class=\"nd\">@register_route</span><span class=\"p\">(</span><span class=\"s1\">&#39;/api/query/graph/match/thumb/&#39;</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;GET&#39;</span><span class=\"p\">],</span> <span class=\"n\">__route_prefix_check__</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">__route_authenticate__</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">query_chips_graph_match_thumb</span><span class=\"p\">(</span><span class=\"n\">extern_reference</span><span class=\"p\">,</span> <span class=\"n\">query_annot_uuid</span><span class=\"p\">,</span>\n                                  <span class=\"n\">database_annot_uuid</span><span class=\"p\">,</span> <span class=\"n\">version</span><span class=\"p\">):</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">PIL</span> <span class=\"k\">import</span> <span class=\"n\">Image</span>  <span class=\"c1\"># NOQA</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">vtool</span> <span class=\"k\">as</span> <span class=\"nn\">vt</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">io</span> <span class=\"k\">import</span> <span class=\"n\">BytesIO</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">six.moves</span> <span class=\"k\">import</span> <span class=\"n\">cStringIO</span> <span class=\"k\">as</span> <span class=\"n\">StringIO</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"k\">import</span> <span class=\"n\">send_file</span>\n\n    <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">current_app</span><span class=\"o\">.</span><span class=\"n\">ibs</span>\n    <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">extern_reference</span><span class=\"p\">,</span> <span class=\"n\">query_annot_uuid</span><span class=\"p\">,</span> <span class=\"n\">database_annot_uuid</span><span class=\"p\">,</span> <span class=\"n\">version</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n\n    <span class=\"n\">cache_dir</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">cachedir</span><span class=\"p\">,</span> <span class=\"s1\">&#39;query_match&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"n\">reference_path</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">cache_dir</span><span class=\"p\">,</span> <span class=\"s1\">&#39;qreq_cfgstr_</span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">extern_reference</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">reference_path</span><span class=\"p\">):</span>\n        <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;dannot_extern_reference is unknown&#39;</span>\n        <span class=\"k\">raise</span> <span class=\"n\">controller_inject</span><span class=\"o\">.</span><span class=\"n\">WebMatchThumbException</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"n\">message</span><span class=\"p\">)</span>\n\n    <span class=\"n\">qannot_path</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">reference_path</span><span class=\"p\">,</span> <span class=\"s1\">&#39;qannot_uuid_</span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">query_annot_uuid</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">qannot_path</span><span class=\"p\">):</span>\n        <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;query_annot_uuid is unknown for the given reference </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">extern_reference</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n        <span class=\"k\">raise</span> <span class=\"n\">controller_inject</span><span class=\"o\">.</span><span class=\"n\">WebMatchThumbException</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"n\">message</span><span class=\"p\">)</span>\n\n    <span class=\"n\">dannot_path</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">qannot_path</span><span class=\"p\">,</span> <span class=\"s1\">&#39;dannot_uuid_</span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">database_annot_uuid</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">dannot_path</span><span class=\"p\">):</span>\n        <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;database_annot_uuid is unknown for the given reference </span><span class=\"si\">%s</span><span class=\"s1\"> and query_annot_uuid </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">extern_reference</span><span class=\"p\">,</span> <span class=\"n\">query_annot_uuid</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n        <span class=\"k\">raise</span> <span class=\"n\">controller_inject</span><span class=\"o\">.</span><span class=\"n\">WebMatchThumbException</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"n\">message</span><span class=\"p\">)</span>\n\n    <span class=\"n\">version</span> <span class=\"o\">=</span> <span class=\"n\">version</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span>\n\n    <span class=\"n\">alias_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"kc\">None</span>    <span class=\"p\">:</span> <span class=\"s1\">&#39;clean&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;match&#39;</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;matches&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;mask&#39;</span>  <span class=\"p\">:</span> <span class=\"s1\">&#39;heatmask&#39;</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">for</span> <span class=\"n\">alias</span> <span class=\"ow\">in</span> <span class=\"n\">alias_dict</span><span class=\"p\">:</span>\n        <span class=\"n\">version</span> <span class=\"o\">=</span> <span class=\"n\">alias_dict</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">version</span><span class=\"p\">,</span> <span class=\"n\">version</span><span class=\"p\">)</span>\n\n    <span class=\"k\">assert</span> <span class=\"n\">version</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s1\">&#39;clean&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;matches&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;heatmask&#39;</span><span class=\"p\">]</span>\n\n    <span class=\"n\">version_path</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">dannot_path</span><span class=\"p\">,</span> <span class=\"s1\">&#39;version_</span><span class=\"si\">%s</span><span class=\"s1\">_orient_horizontal.png&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">version</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">version_path</span><span class=\"p\">):</span>\n        <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;match thumb version is unknown for the given reference </span><span class=\"si\">%s</span><span class=\"s1\">, query_annot_uuid </span><span class=\"si\">%s</span><span class=\"s1\">, database_annot_uuid </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">extern_reference</span><span class=\"p\">,</span> <span class=\"n\">query_annot_uuid</span><span class=\"p\">,</span> <span class=\"n\">database_annot_uuid</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n        <span class=\"k\">raise</span> <span class=\"n\">controller_inject</span><span class=\"o\">.</span><span class=\"n\">WebMatchThumbException</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"n\">message</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Load image</span>\n    <span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">imread</span><span class=\"p\">(</span><span class=\"n\">version_path</span><span class=\"p\">,</span> <span class=\"n\">orient</span><span class=\"o\">=</span><span class=\"s1\">&#39;auto&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">image</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"p\">::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n    <span class=\"c1\"># Encode image</span>\n    <span class=\"n\">image_pil</span> <span class=\"o\">=</span> <span class=\"n\">Image</span><span class=\"o\">.</span><span class=\"n\">fromarray</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">six</span><span class=\"o\">.</span><span class=\"n\">PY2</span><span class=\"p\">:</span>\n        <span class=\"n\">img_io</span> <span class=\"o\">=</span> <span class=\"n\">StringIO</span><span class=\"p\">()</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">img_io</span> <span class=\"o\">=</span> <span class=\"n\">BytesIO</span><span class=\"p\">()</span>\n    <span class=\"n\">image_pil</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">img_io</span><span class=\"p\">,</span> <span class=\"s1\">&#39;JPEG&#39;</span><span class=\"p\">,</span> <span class=\"n\">quality</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n    <span class=\"n\">img_io</span><span class=\"o\">.</span><span class=\"n\">seek</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">send_file</span><span class=\"p\">(</span><span class=\"n\">img_io</span><span class=\"p\">,</span> <span class=\"n\">mimetype</span><span class=\"o\">=</span><span class=\"s1\">&#39;image/jpeg&#39;</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"query_chips\"><a class=\"viewcode-back\" href=\"../../../../ibeis.web/#ibeis.web.apis_query.query_chips\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"nd\">@register_api</span><span class=\"p\">(</span><span class=\"s1\">&#39;/api/query/chip/&#39;</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;GET&#39;</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">query_chips</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">qaid_list</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">daid_list</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">cfgdict</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                <span class=\"n\">use_cache</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">use_bigcache</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">qreq_</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                <span class=\"n\">return_request</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">pipeline</span><span class=\"o\">.</span><span class=\"n\">VERB_PIPELINE</span><span class=\"p\">,</span>\n                <span class=\"n\">save_qcache</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">prog_hook</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">return_cm_dict</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                <span class=\"n\">return_cm_simple_dict</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Submits a query request to the hotspotter recognition pipeline. Returns</span>\n<span class=\"sd\">    a list of QueryResult objects.</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        qaid_list (list): a list of annotation ids to be submitted as</span>\n<span class=\"sd\">            queries</span>\n<span class=\"sd\">        daid_list (list): a list of annotation ids used as the database</span>\n<span class=\"sd\">            that will be searched</span>\n<span class=\"sd\">        cfgdict (dict): dictionary of configuration options used to create</span>\n<span class=\"sd\">            a new QueryRequest if not already specified</span>\n<span class=\"sd\">        use_cache (bool): turns on/off chip match cache (default: True)</span>\n<span class=\"sd\">        use_bigcache (bool): turns one/off chunked chip match cache (default:</span>\n<span class=\"sd\">            True)</span>\n<span class=\"sd\">        qreq_ (QueryRequest): optional, a QueryRequest object that</span>\n<span class=\"sd\">            overrides all previous settings</span>\n<span class=\"sd\">        return_request (bool): returns the request which will be created if</span>\n<span class=\"sd\">            one is not already specified</span>\n<span class=\"sd\">        verbose (bool): default=False, turns on verbose printing</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        list: a list of ChipMatch objects containing the matching</span>\n<span class=\"sd\">            annotations, scores, and feature matches</span>\n\n<span class=\"sd\">    Returns(2):</span>\n<span class=\"sd\">        tuple: (cm_list, qreq_) - a list of query results and optionally the</span>\n<span class=\"sd\">            QueryRequest object used</span>\n\n<span class=\"sd\">    RESTful:</span>\n<span class=\"sd\">        Method: PUT</span>\n<span class=\"sd\">        URL:    /api/query/chip/</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.web.apis_query --test-query_chips</span>\n\n<span class=\"sd\">        # Test speed of single query</span>\n<span class=\"sd\">        python -m ibeis --tf IBEISController.query_chips --db PZ_Master1 \\</span>\n<span class=\"sd\">            -a default:qindex=0:1,dindex=0:500 --nocache-hs</span>\n\n<span class=\"sd\">        python -m ibeis --tf IBEISController.query_chips --db PZ_Master1 \\</span>\n<span class=\"sd\">            -a default:qindex=0:1,dindex=0:3000 --nocache-hs</span>\n\n<span class=\"sd\">        python -m ibeis.web.apis_query --test-query_chips:1 --show</span>\n<span class=\"sd\">        python -m ibeis.web.apis_query --test-query_chips:2 --show</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # SLOW_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; # xdoctest: +SKIP</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.control.IBEISControl import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; qreq_ = ibeis.testdata_qreq_()</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = qreq_.ibs</span>\n<span class=\"sd\">        &gt;&gt;&gt; cm_list = qreq_.execute()</span>\n<span class=\"sd\">        &gt;&gt;&gt; cm = cm_list[0]</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.quit_if_noshow()</span>\n<span class=\"sd\">        &gt;&gt;&gt; cm.ishow_analysis(qreq_)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.show_if_requested()</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # SLOW_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; # xdoctest: +SKIP</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.control.IBEISControl import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; qaid_list = [1]</span>\n<span class=\"sd\">        &gt;&gt;&gt; daid_list = [1, 2, 3, 4, 5]</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb_test(db=&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; qreq_ = ibs.new_query_request(qaid_list, daid_list)</span>\n<span class=\"sd\">        &gt;&gt;&gt; cm = ibs.query_chips(qaid_list, daid_list, use_cache=False, qreq_=qreq_)[0]</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.quit_if_noshow()</span>\n<span class=\"sd\">        &gt;&gt;&gt; cm.ishow_analysis(qreq_)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.show_if_requested()</span>\n\n<span class=\"sd\">    Example1:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # SLOW_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; # xdoctest: +SKIP</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.control.IBEISControl import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; qaid_list = [1]</span>\n<span class=\"sd\">        &gt;&gt;&gt; daid_list = [1, 2, 3, 4, 5]</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb_test(db=&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; cfgdict = {&#39;pipeline_root&#39;:&#39;BC_DTW&#39;}</span>\n<span class=\"sd\">        &gt;&gt;&gt; qreq_ = ibs.new_query_request(qaid_list, daid_list, cfgdict=cfgdict, verbose=True)</span>\n<span class=\"sd\">        &gt;&gt;&gt; cm = ibs.query_chips(qreq_=qreq_)[0]</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.quit_if_noshow()</span>\n<span class=\"sd\">        &gt;&gt;&gt; cm.ishow_analysis(qreq_)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.show_if_requested()</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\"># The qaid and daid objects are allowed to be None if qreq_ is</span>\n    <span class=\"c1\"># specified</span>\n    <span class=\"k\">if</span> <span class=\"n\">qreq_</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">assert</span> <span class=\"n\">qaid_list</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">&#39;do not specify qaids and qreq&#39;</span>\n        <span class=\"k\">assert</span> <span class=\"n\">daid_list</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">&#39;do not specify daids and qreq&#39;</span>\n        <span class=\"n\">qaid_list</span><span class=\"p\">,</span> <span class=\"n\">was_scalar</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">wrap_iterable</span><span class=\"p\">(</span><span class=\"n\">qaid_list</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">daid_list</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">daid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_aids</span><span class=\"p\">()</span>\n        <span class=\"n\">qreq_</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">new_query_request</span><span class=\"p\">(</span><span class=\"n\">qaid_list</span><span class=\"p\">,</span> <span class=\"n\">daid_list</span><span class=\"p\">,</span>\n                                      <span class=\"n\">cfgdict</span><span class=\"o\">=</span><span class=\"n\">cfgdict</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">verbose</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">assert</span> <span class=\"n\">qaid_list</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">&#39;do not specify qreq and qaids&#39;</span>\n        <span class=\"k\">assert</span> <span class=\"n\">daid_list</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">&#39;do not specify qreq and daids&#39;</span>\n        <span class=\"n\">was_scalar</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n    <span class=\"n\">cm_list</span> <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">()</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">cm_list</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">),</span> <span class=\"p\">(</span>\n        <span class=\"s1\">&#39;Chip matches were not returned as a list&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Convert to cm_list</span>\n    <span class=\"k\">if</span> <span class=\"n\">return_cm_simple_dict</span><span class=\"p\">:</span>\n        <span class=\"k\">for</span> <span class=\"n\">cm</span> <span class=\"ow\">in</span> <span class=\"n\">cm_list</span><span class=\"p\">:</span>\n            <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">qauuid</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_uuids</span><span class=\"p\">(</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">qaid</span><span class=\"p\">)</span>\n            <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">dauuid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_uuids</span><span class=\"p\">(</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">daid_list</span><span class=\"p\">)</span>\n        <span class=\"n\">keys</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;qaid&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;daid_list&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;score_list&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;qauuid&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;dauuid_list&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">cm_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dict_subset</span><span class=\"p\">(</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">(),</span> <span class=\"n\">keys</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">cm</span> <span class=\"ow\">in</span> <span class=\"n\">cm_list</span><span class=\"p\">]</span>\n    <span class=\"k\">elif</span> <span class=\"n\">return_cm_dict</span><span class=\"p\">:</span>\n        <span class=\"n\">cm_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">cm</span> <span class=\"ow\">in</span> <span class=\"n\">cm_list</span><span class=\"p\">]</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">was_scalar</span><span class=\"p\">:</span>\n        <span class=\"c1\"># hack for scalar input</span>\n        <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cm_list</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n        <span class=\"n\">cm_list</span> <span class=\"o\">=</span> <span class=\"n\">cm_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">return_request</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">cm_list</span><span class=\"p\">,</span> <span class=\"n\">qreq_</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">cm_list</span></div>\n\n\n<span class=\"c1\">##########################################################################################</span>\n\n\n<div class=\"viewcode-block\" id=\"get_graph_client_query_chips_graph_v2\"><a class=\"viewcode-back\" href=\"../../../../ibeis.web/#ibeis.web.apis_query.get_graph_client_query_chips_graph_v2\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_graph_client_query_chips_graph_v2</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">graph_uuid</span><span class=\"p\">):</span>\n    <span class=\"n\">graph_client</span> <span class=\"o\">=</span> <span class=\"n\">current_app</span><span class=\"o\">.</span><span class=\"n\">GRAPH_CLIENT_DICT</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">graph_uuid</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n    <span class=\"c1\"># We could be redirecting to a newer graph_client</span>\n    <span class=\"n\">graph_uuid_chain</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">graph_uuid</span><span class=\"p\">]</span>\n    <span class=\"k\">while</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">graph_client</span><span class=\"p\">,</span> <span class=\"n\">six</span><span class=\"o\">.</span><span class=\"n\">string_types</span><span class=\"p\">):</span>\n        <span class=\"n\">graph_uuid_chain</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">graph_client</span><span class=\"p\">)</span>\n        <span class=\"n\">graph_client</span> <span class=\"o\">=</span> <span class=\"n\">current_app</span><span class=\"o\">.</span><span class=\"n\">GRAPH_CLIENT_DICT</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">graph_client</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">graph_client</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"n\">controller_inject</span><span class=\"o\">.</span><span class=\"n\">WebUnknownUUIDException</span><span class=\"p\">([</span><span class=\"s1\">&#39;graph_uuid&#39;</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"n\">graph_uuid</span><span class=\"p\">])</span>\n    <span class=\"k\">return</span> <span class=\"n\">graph_client</span><span class=\"p\">,</span> <span class=\"n\">graph_uuid_chain</span></div>\n\n\n<div class=\"viewcode-block\" id=\"ensure_review_image_v2\"><a class=\"viewcode-back\" href=\"../../../../ibeis.web/#ibeis.web.apis_query.ensure_review_image_v2\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">ensure_review_image_v2</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">match</span><span class=\"p\">,</span> <span class=\"n\">draw_matches</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">draw_heatmask</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                           <span class=\"n\">view_orientation</span><span class=\"o\">=</span><span class=\"s1\">&#39;vertical&#39;</span><span class=\"p\">,</span> <span class=\"n\">overlay</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">plottool</span> <span class=\"k\">as</span> <span class=\"nn\">pt</span>\n    <span class=\"n\">render_config</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">&#39;overlay&#39;</span>    <span class=\"p\">:</span> <span class=\"n\">overlay</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;show_ell&#39;</span>   <span class=\"p\">:</span> <span class=\"n\">draw_matches</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;show_lines&#39;</span> <span class=\"p\">:</span> <span class=\"n\">draw_matches</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;show_ori&#39;</span>   <span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;heatmask&#39;</span>   <span class=\"p\">:</span> <span class=\"n\">draw_heatmask</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;vert&#39;</span>       <span class=\"p\">:</span> <span class=\"n\">view_orientation</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;vertical&#39;</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">with</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">RenderingContext</span><span class=\"p\">(</span><span class=\"n\">dpi</span><span class=\"o\">=</span><span class=\"mi\">150</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">ctx</span><span class=\"p\">:</span>\n        <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">render_config</span><span class=\"p\">)</span>\n    <span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">image</span>\n    <span class=\"k\">return</span> <span class=\"n\">image</span></div>\n\n\n<div class=\"viewcode-block\" id=\"query_graph_v2_callback\"><a class=\"viewcode-back\" href=\"../../../../ibeis.web/#ibeis.web.apis_query.query_graph_v2_callback\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">query_graph_v2_callback</span><span class=\"p\">(</span><span class=\"n\">graph_client</span><span class=\"p\">,</span> <span class=\"n\">callback_type</span><span class=\"p\">):</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.web.graph_server</span> <span class=\"k\">import</span> <span class=\"n\">ut_to_json_encode</span>\n    <span class=\"k\">assert</span> <span class=\"n\">callback_type</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s1\">&#39;review&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;finished&#39;</span><span class=\"p\">]</span>\n    <span class=\"n\">callback_tuple</span> <span class=\"o\">=</span> <span class=\"n\">graph_client</span><span class=\"o\">.</span><span class=\"n\">callbacks</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">callback_type</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">callback_tuple</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">callback_url</span><span class=\"p\">,</span> <span class=\"n\">callback_method</span> <span class=\"o\">=</span> <span class=\"n\">callback_tuple</span>\n        <span class=\"k\">if</span> <span class=\"n\">callback_url</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">callback_method</span> <span class=\"o\">=</span> <span class=\"n\">callback_method</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span>\n            <span class=\"n\">data_dict</span> <span class=\"o\">=</span> <span class=\"n\">ut_to_json_encode</span><span class=\"p\">({</span>\n                <span class=\"s1\">&#39;graph_uuid&#39;</span><span class=\"p\">:</span> <span class=\"n\">graph_client</span><span class=\"o\">.</span><span class=\"n\">graph_uuid</span><span class=\"p\">,</span>\n            <span class=\"p\">})</span>\n            <span class=\"k\">if</span> <span class=\"n\">callback_method</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;post&#39;</span><span class=\"p\">:</span>\n                <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"n\">callback_url</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">data_dict</span><span class=\"p\">)</span>\n            <span class=\"k\">elif</span> <span class=\"n\">callback_method</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;get&#39;</span><span class=\"p\">:</span>\n                <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">callback_url</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"o\">=</span><span class=\"n\">data_dict</span><span class=\"p\">)</span>\n            <span class=\"k\">elif</span> <span class=\"n\">callback_method</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;put&#39;</span><span class=\"p\">:</span>\n                <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"n\">callback_url</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">data_dict</span><span class=\"p\">)</span>\n            <span class=\"k\">elif</span> <span class=\"n\">callback_method</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;delete&#39;</span><span class=\"p\">:</span>\n                <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">callback_url</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">data_dict</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">KeyError</span><span class=\"p\">(</span><span class=\"s1\">&#39;Unsupported HTTP callback method&#39;</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"query_chips_graph_v2\"><a class=\"viewcode-back\" href=\"../../../../ibeis.web/#ibeis.web.apis_query.query_chips_graph_v2\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"nd\">@register_api</span><span class=\"p\">(</span><span class=\"s1\">&#39;/api/query/graph/v2/&#39;</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;POST&#39;</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">query_chips_graph_v2</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">annot_uuid_list</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                         <span class=\"n\">query_config_dict</span><span class=\"o\">=</span><span class=\"p\">{},</span>\n                         <span class=\"n\">review_callback_url</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                         <span class=\"n\">review_callback_method</span><span class=\"o\">=</span><span class=\"s1\">&#39;POST&#39;</span><span class=\"p\">,</span>\n                         <span class=\"n\">finished_callback_url</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                         <span class=\"n\">finished_callback_method</span><span class=\"o\">=</span><span class=\"s1\">&#39;POST&#39;</span><span class=\"p\">,</span>\n                         <span class=\"n\">creation_imageset_rowid_list</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                         <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.web.apis_query --test-query_chips_graph_v2:0</span>\n\n<span class=\"sd\">        python -m ibeis reset_mtest_graph</span>\n\n<span class=\"sd\">        python -m ibeis --db PZ_MTEST --web --browser --url=/turk/identification/hardcase/</span>\n<span class=\"sd\">        python -m ibeis --db PZ_MTEST --web --browser --url=/turk/identification/graph/</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # WEB_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.web.apis_query import *</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; # Open local instance</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(&#39;PZ_MTEST&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; uuid_list = ibs.annots().uuids[0:10]</span>\n<span class=\"sd\">        &gt;&gt;&gt; # Start up the web instance</span>\n<span class=\"sd\">        &gt;&gt;&gt; web_ibs = ibeis.opendb_bg_web(db=&#39;PZ_MTEST&#39;, web=True, browser=False)</span>\n<span class=\"sd\">        &gt;&gt;&gt; data = dict(annot_uuid_list=uuid_list)</span>\n<span class=\"sd\">        &gt;&gt;&gt; resp = web_ibs.send_ibeis_request(&#39;/api/query/graph/v2/&#39;, **data)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&#39;resp = %r&#39; % (resp,))</span>\n<span class=\"sd\">        &gt;&gt;&gt; #cmdict_list = json_dict[&#39;response&#39;]</span>\n<span class=\"sd\">        &gt;&gt;&gt; #assert &#39;score_list&#39; in cmdict_list[0]</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # DEBUG_SCRIPT</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.web.apis_query import *</span>\n<span class=\"sd\">        &gt;&gt;&gt; # Hack a flask context</span>\n<span class=\"sd\">        &gt;&gt;&gt; current_app = ut.DynStruct()</span>\n<span class=\"sd\">        &gt;&gt;&gt; current_app.GRAPH_CLIENT_DICT = {}</span>\n<span class=\"sd\">        &gt;&gt;&gt; old = query_chips_graph_v2.__globals__.get(&#39;current_app&#39;, None)</span>\n<span class=\"sd\">        &gt;&gt;&gt; query_chips_graph_v2.__globals__[&#39;current_app&#39;] = current_app</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(&#39;PZ_MTEST&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; #ut.exec_funckw(query_chips_graph_v2, globals())</span>\n<span class=\"sd\">        &gt;&gt;&gt; # Run function in main process</span>\n<span class=\"sd\">        &gt;&gt;&gt; query_chips_graph_v2(ibs)</span>\n<span class=\"sd\">        &gt;&gt;&gt; # Reset context</span>\n<span class=\"sd\">        &gt;&gt;&gt; query_chips_graph_v2.__globals__[&#39;current_app&#39;] = old</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.web.graph_server</span> <span class=\"k\">import</span> <span class=\"n\">GraphClient</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[apis_query] Creating GraphClient&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">annot_uuid_list</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">annot_uuid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_uuids</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_aids</span><span class=\"p\">())</span>\n\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">web_check_uuids</span><span class=\"p\">(</span><span class=\"n\">qannot_uuid_list</span><span class=\"o\">=</span><span class=\"n\">annot_uuid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">aid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_aids_from_uuid</span><span class=\"p\">(</span><span class=\"n\">annot_uuid_list</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># FILTER FOR GGR2</span>\n    <span class=\"k\">if</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"n\">aid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">check_ggr_valid_aids</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n    <span class=\"n\">graph_uuid</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">hashable_to_uuid</span><span class=\"p\">(</span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">))</span>\n    <span class=\"k\">if</span> <span class=\"n\">graph_uuid</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">current_app</span><span class=\"o\">.</span><span class=\"n\">GRAPH_CLIENT_DICT</span><span class=\"p\">:</span>\n        <span class=\"k\">for</span> <span class=\"n\">graph_uuid_</span> <span class=\"ow\">in</span> <span class=\"n\">current_app</span><span class=\"o\">.</span><span class=\"n\">GRAPH_CLIENT_DICT</span><span class=\"p\">:</span>\n            <span class=\"n\">graph_client_</span> <span class=\"o\">=</span> <span class=\"n\">current_app</span><span class=\"o\">.</span><span class=\"n\">GRAPH_CLIENT_DICT</span><span class=\"p\">[</span><span class=\"n\">graph_uuid_</span><span class=\"p\">]</span>\n            <span class=\"n\">aid_list_</span> <span class=\"o\">=</span> <span class=\"n\">graph_client_</span><span class=\"o\">.</span><span class=\"n\">aids</span>\n            <span class=\"k\">assert</span> <span class=\"n\">aid_list_</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span>\n            <span class=\"n\">overlap_aid_set</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">aid_list_</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">overlap_aid_set</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"n\">overlap_aid_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">overlap_aid_set</span><span class=\"p\">)</span>\n                <span class=\"n\">overlap_annot_uuid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_uuids</span><span class=\"p\">(</span><span class=\"n\">overlap_aid_list</span><span class=\"p\">)</span>\n                <span class=\"k\">raise</span> <span class=\"n\">controller_inject</span><span class=\"o\">.</span><span class=\"n\">WebUnavailableUUIDException</span><span class=\"p\">(</span>\n                    <span class=\"n\">overlap_annot_uuid_list</span><span class=\"p\">,</span> <span class=\"n\">graph_uuid_</span><span class=\"p\">)</span>\n\n        <span class=\"n\">callback_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;review&#39;</span>   <span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">review_callback_url</span><span class=\"p\">,</span>   <span class=\"n\">review_callback_method</span><span class=\"p\">),</span>\n            <span class=\"s1\">&#39;finished&#39;</span> <span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">finished_callback_url</span><span class=\"p\">,</span> <span class=\"n\">finished_callback_method</span><span class=\"p\">),</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">graph_client</span> <span class=\"o\">=</span> <span class=\"n\">GraphClient</span><span class=\"p\">(</span><span class=\"n\">graph_uuid</span><span class=\"p\">,</span> <span class=\"n\">callbacks</span><span class=\"o\">=</span><span class=\"n\">callback_dict</span><span class=\"p\">,</span>\n                                   <span class=\"n\">autoinit</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">creation_imageset_rowid_list</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">graph_client</span><span class=\"o\">.</span><span class=\"n\">imagesets</span> <span class=\"o\">=</span> <span class=\"n\">creation_imageset_rowid_list</span>\n        <span class=\"n\">graph_client</span><span class=\"o\">.</span><span class=\"n\">aids</span> <span class=\"o\">=</span> <span class=\"n\">aid_list</span>\n\n        <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;manual.n_peek&#39;</span>   <span class=\"p\">:</span> <span class=\"n\">GRAPH_CLIENT_PEEK</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;manual.autosave&#39;</span> <span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;redun.pos&#39;</span>       <span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;redun.neg&#39;</span>       <span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;algo.quickstart&#39;</span> <span class=\"p\">:</span> <span class=\"kc\">False</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">query_config_dict</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[apis_query] graph_client.config = </span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr3</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">)))</span>\n        <span class=\"n\">graph_client</span><span class=\"o\">.</span><span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">config</span>\n\n        <span class=\"c1\"># Ensure no race-conditions</span>\n        <span class=\"n\">current_app</span><span class=\"o\">.</span><span class=\"n\">GRAPH_CLIENT_DICT</span><span class=\"p\">[</span><span class=\"n\">graph_uuid</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">graph_client</span>\n\n        <span class=\"c1\"># Start (create the Graph Inference object)</span>\n        <span class=\"n\">payload</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;action&#39;</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;start&#39;</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;dbdir&#39;</span>  <span class=\"p\">:</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">dbdir</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;aids&#39;</span>   <span class=\"p\">:</span> <span class=\"n\">graph_client</span><span class=\"o\">.</span><span class=\"n\">aids</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;config&#39;</span> <span class=\"p\">:</span> <span class=\"n\">graph_client</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">future</span> <span class=\"o\">=</span> <span class=\"n\">graph_client</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">)</span>\n        <span class=\"n\">future</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">()</span>  <span class=\"c1\"># Guarantee that this has happened before calling refresh</span>\n\n        <span class=\"n\">f2</span> <span class=\"o\">=</span> <span class=\"n\">graph_client</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">({</span><span class=\"s1\">&#39;action&#39;</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;latest_logs&#39;</span><span class=\"p\">})</span>\n        <span class=\"n\">f2</span><span class=\"o\">.</span><span class=\"n\">graph_client</span> <span class=\"o\">=</span> <span class=\"n\">graph_client</span>\n        <span class=\"n\">f2</span><span class=\"o\">.</span><span class=\"n\">add_done_callback</span><span class=\"p\">(</span><span class=\"n\">query_graph_v2_latest_logs</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Start (create the Graph Inference object)</span>\n        <span class=\"n\">payload</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;action&#39;</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;get_feat_extractor&#39;</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">future</span> <span class=\"o\">=</span> <span class=\"n\">graph_client</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">)</span>\n        <span class=\"n\">graph_client</span><span class=\"o\">.</span><span class=\"n\">extr</span> <span class=\"o\">=</span> <span class=\"n\">future</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Start main loop</span>\n        <span class=\"n\">future</span> <span class=\"o\">=</span> <span class=\"n\">graph_client</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">({</span><span class=\"s1\">&#39;action&#39;</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;continue_review&#39;</span><span class=\"p\">})</span>\n        <span class=\"n\">future</span><span class=\"o\">.</span><span class=\"n\">graph_client</span> <span class=\"o\">=</span> <span class=\"n\">graph_client</span>\n        <span class=\"n\">future</span><span class=\"o\">.</span><span class=\"n\">add_done_callback</span><span class=\"p\">(</span><span class=\"n\">query_graph_v2_on_request_review</span><span class=\"p\">)</span>\n\n        <span class=\"n\">f2</span> <span class=\"o\">=</span> <span class=\"n\">graph_client</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">({</span><span class=\"s1\">&#39;action&#39;</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;latest_logs&#39;</span><span class=\"p\">})</span>\n        <span class=\"n\">f2</span><span class=\"o\">.</span><span class=\"n\">graph_client</span> <span class=\"o\">=</span> <span class=\"n\">graph_client</span>\n        <span class=\"n\">f2</span><span class=\"o\">.</span><span class=\"n\">add_done_callback</span><span class=\"p\">(</span><span class=\"n\">query_graph_v2_latest_logs</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">graph_uuid</span></div>\n\n\n<div class=\"viewcode-block\" id=\"review_graph_match_config_v2\"><a class=\"viewcode-back\" href=\"../../../../ibeis.web/#ibeis.web.apis_query.review_graph_match_config_v2\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">review_graph_match_config_v2</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">graph_uuid</span><span class=\"p\">,</span> <span class=\"n\">aid1</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                                 <span class=\"n\">view_orientation</span><span class=\"o\">=</span><span class=\"s1\">&#39;vertical&#39;</span><span class=\"p\">,</span> <span class=\"n\">view_version</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.verif</span> <span class=\"k\">import</span> <span class=\"n\">pairfeat</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"k\">import</span> <span class=\"n\">session</span>\n\n    <span class=\"n\">EDGES_KEY</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;_EDGES_&#39;</span>\n    <span class=\"n\">EDGES_MAX</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n\n    <span class=\"n\">user_id</span> <span class=\"o\">=</span> <span class=\"n\">controller_inject</span><span class=\"o\">.</span><span class=\"n\">get_user</span><span class=\"p\">()</span>\n    <span class=\"n\">graph_client</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_graph_client_query_chips_graph_v2</span><span class=\"p\">(</span><span class=\"n\">graph_uuid</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">aid1</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">aid2</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">previous_edge_list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">if</span> <span class=\"n\">aid1</span> <span class=\"o\">&gt;</span> <span class=\"n\">aid2</span><span class=\"p\">:</span>\n            <span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span> <span class=\"o\">=</span> <span class=\"n\">aid2</span><span class=\"p\">,</span> <span class=\"n\">aid1</span>\n        <span class=\"n\">edge</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">)</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">graph_client</span><span class=\"o\">.</span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">data</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                <span class=\"n\">edge</span><span class=\"p\">,</span>\n                <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">,</span>\n                <span class=\"p\">{},</span>\n            <span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">EDGES_KEY</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">session</span><span class=\"p\">:</span>\n            <span class=\"n\">session</span><span class=\"p\">[</span><span class=\"n\">EDGES_KEY</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">previous_edge_list</span> <span class=\"o\">=</span> <span class=\"n\">session</span><span class=\"p\">[</span><span class=\"n\">EDGES_KEY</span><span class=\"p\">]</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Using previous_edge_list</span><span class=\"se\">\\n\\t</span><span class=\"s1\">User: </span><span class=\"si\">%s</span><span class=\"se\">\\n\\t</span><span class=\"s1\">List: </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">,</span> <span class=\"n\">previous_edge_list</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">graph_client</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">(</span><span class=\"n\">previous_edge_list</span><span class=\"o\">=</span><span class=\"n\">previous_edge_list</span><span class=\"p\">,</span> <span class=\"n\">max_previous_edges</span><span class=\"o\">=</span><span class=\"n\">EDGES_MAX</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">data</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">controller_inject</span><span class=\"o\">.</span><span class=\"n\">WebReviewNotReadyException</span><span class=\"p\">(</span><span class=\"n\">graph_uuid</span><span class=\"p\">)</span>\n\n    <span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">priority</span><span class=\"p\">,</span> <span class=\"n\">data_dict</span> <span class=\"o\">=</span> <span class=\"n\">data</span>\n\n    <span class=\"n\">edge_</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]),</span>\n        <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]),</span>\n    <span class=\"p\">]</span>\n    <span class=\"k\">if</span> <span class=\"n\">previous_edge_list</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">previous_edge_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">edge_</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">previous_edge_list</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"n\">EDGES_MAX</span><span class=\"p\">:</span>\n            <span class=\"n\">cutoff</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">1.0</span> <span class=\"o\">*</span> <span class=\"n\">EDGES_MAX</span><span class=\"p\">)</span>\n            <span class=\"n\">previous_edge_list</span> <span class=\"o\">=</span> <span class=\"n\">previous_edge_list</span><span class=\"p\">[</span><span class=\"n\">cutoff</span><span class=\"p\">:]</span>\n        <span class=\"n\">session</span><span class=\"p\">[</span><span class=\"n\">EDGES_KEY</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">previous_edge_list</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Updating previous_edge_list</span><span class=\"se\">\\n\\t</span><span class=\"s1\">User: </span><span class=\"si\">%s</span><span class=\"se\">\\n\\t</span><span class=\"s1\">List: </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">,</span> <span class=\"n\">previous_edge_list</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n\n    <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">priority</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Sampled edge </span><span class=\"si\">%r</span><span class=\"s1\"> with priority </span><span class=\"si\">%0.02f</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Data: &#39;</span> <span class=\"o\">+</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr4</span><span class=\"p\">(</span><span class=\"n\">data_dict</span><span class=\"p\">))</span>\n\n    <span class=\"n\">aid_1</span><span class=\"p\">,</span> <span class=\"n\">aid_2</span> <span class=\"o\">=</span> <span class=\"n\">edge</span>\n    <span class=\"n\">annot_uuid_1</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_uuids</span><span class=\"p\">(</span><span class=\"n\">aid_1</span><span class=\"p\">))</span>\n    <span class=\"n\">annot_uuid_2</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_uuids</span><span class=\"p\">(</span><span class=\"n\">aid_2</span><span class=\"p\">))</span>\n\n    <span class=\"n\">feat_extract_config</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">&#39;match_config&#39;</span><span class=\"p\">:</span> <span class=\"p\">({}</span> <span class=\"k\">if</span> <span class=\"n\">graph_client</span><span class=\"o\">.</span><span class=\"n\">extr</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"k\">else</span>\n                         <span class=\"n\">graph_client</span><span class=\"o\">.</span><span class=\"n\">extr</span><span class=\"o\">.</span><span class=\"n\">match_config</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">extr</span> <span class=\"o\">=</span> <span class=\"n\">pairfeat</span><span class=\"o\">.</span><span class=\"n\">PairwiseFeatureExtractor</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">feat_extract_config</span><span class=\"p\">)</span>\n\n    <span class=\"n\">match</span> <span class=\"o\">=</span> <span class=\"n\">extr</span><span class=\"o\">.</span><span class=\"n\">_exec_pairwise_match</span><span class=\"p\">([</span><span class=\"n\">edge</span><span class=\"p\">])[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n    <span class=\"n\">image_clean</span> <span class=\"o\">=</span> <span class=\"n\">ensure_review_image_v2</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">match</span><span class=\"p\">,</span>\n                                         <span class=\"n\">view_orientation</span><span class=\"o\">=</span><span class=\"n\">view_orientation</span><span class=\"p\">,</span>\n                                         <span class=\"n\">overlay</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"c1\"># image_matches = ensure_review_image_v2(ibs, match, draw_matches=True,</span>\n    <span class=\"c1\">#                                        view_orientation=view_orientation)</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Using View Version: </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">view_version</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n    <span class=\"k\">if</span> <span class=\"n\">view_version</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n        <span class=\"n\">image_heatmask</span> <span class=\"o\">=</span> <span class=\"n\">ensure_review_image_v2</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">match</span><span class=\"p\">,</span> <span class=\"n\">draw_heatmask</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                                                <span class=\"n\">view_orientation</span><span class=\"o\">=</span><span class=\"n\">view_orientation</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">image_heatmask</span> <span class=\"o\">=</span> <span class=\"n\">ensure_review_image_v2</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">match</span><span class=\"p\">,</span> <span class=\"n\">draw_matches</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                                                <span class=\"n\">view_orientation</span><span class=\"o\">=</span><span class=\"n\">view_orientation</span><span class=\"p\">)</span>\n\n    <span class=\"n\">image_clean_src</span> <span class=\"o\">=</span> <span class=\"n\">appf</span><span class=\"o\">.</span><span class=\"n\">embed_image_html</span><span class=\"p\">(</span><span class=\"n\">image_clean</span><span class=\"p\">)</span>\n    <span class=\"c1\"># image_matches_src = appf.embed_image_html(image_matches)</span>\n    <span class=\"n\">image_heatmask_src</span> <span class=\"o\">=</span> <span class=\"n\">appf</span><span class=\"o\">.</span><span class=\"n\">embed_image_html</span><span class=\"p\">(</span><span class=\"n\">image_heatmask</span><span class=\"p\">)</span>\n\n    <span class=\"n\">now</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">utcnow</span><span class=\"p\">()</span>\n    <span class=\"n\">server_time_start</span> <span class=\"o\">=</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">now</span><span class=\"o\">.</span><span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\">.</span><span class=\"si\">%f</span><span class=\"s2\">&quot;</span><span class=\"p\">))</span>\n\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">priority</span><span class=\"p\">,</span> <span class=\"n\">data_dict</span><span class=\"p\">,</span> <span class=\"n\">aid_1</span><span class=\"p\">,</span> <span class=\"n\">aid_2</span><span class=\"p\">,</span> <span class=\"n\">annot_uuid_1</span><span class=\"p\">,</span> <span class=\"n\">annot_uuid_2</span><span class=\"p\">,</span>\n            <span class=\"n\">image_clean_src</span><span class=\"p\">,</span> <span class=\"n\">image_heatmask_src</span><span class=\"p\">,</span> <span class=\"n\">image_heatmask_src</span><span class=\"p\">,</span>\n            <span class=\"n\">server_time_start</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"review_graph_match_html_v2\"><a class=\"viewcode-back\" href=\"../../../../ibeis.web/#ibeis.web.apis_query.review_graph_match_html_v2\">[docs]</a><span class=\"nd\">@register_api</span><span class=\"p\">(</span><span class=\"s1\">&#39;/api/review/query/graph/v2/&#39;</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;GET&#39;</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">review_graph_match_html_v2</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">graph_uuid</span><span class=\"p\">,</span> <span class=\"n\">callback_url</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                               <span class=\"n\">callback_method</span><span class=\"o\">=</span><span class=\"s1\">&#39;POST&#39;</span><span class=\"p\">,</span>\n                               <span class=\"n\">view_orientation</span><span class=\"o\">=</span><span class=\"s1\">&#39;vertical&#39;</span><span class=\"p\">,</span>\n                               <span class=\"n\">view_version</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n                               <span class=\"n\">include_jquery</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">review_graph_match_config_v2</span><span class=\"p\">(</span><span class=\"n\">graph_uuid</span><span class=\"p\">,</span>\n                                              <span class=\"n\">view_orientation</span><span class=\"o\">=</span><span class=\"n\">view_orientation</span><span class=\"p\">,</span>\n                                              <span class=\"n\">view_version</span><span class=\"o\">=</span><span class=\"n\">view_version</span><span class=\"p\">)</span>\n\n    <span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">priority</span><span class=\"p\">,</span> <span class=\"n\">data_dict</span><span class=\"p\">,</span> <span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">,</span> <span class=\"n\">annot_uuid_1</span><span class=\"p\">,</span> <span class=\"n\">annot_uuid_2</span><span class=\"p\">,</span>\n        <span class=\"n\">image_clean_src</span><span class=\"p\">,</span> <span class=\"n\">image_matches_src</span><span class=\"p\">,</span> <span class=\"n\">image_heatmask_src</span><span class=\"p\">,</span>\n        <span class=\"n\">server_time_start</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">values</span>\n\n    <span class=\"n\">confidence_dict</span> <span class=\"o\">=</span> <span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">CONFIDENCE</span><span class=\"o\">.</span><span class=\"n\">NICE_TO_CODE</span>\n    <span class=\"n\">confidence_nice_list</span> <span class=\"o\">=</span> <span class=\"n\">confidence_dict</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span>\n    <span class=\"n\">confidence_text_list</span> <span class=\"o\">=</span> <span class=\"n\">confidence_dict</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()</span>\n    <span class=\"n\">confidence_selected_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">confidence_text</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;unspecified&#39;</span>\n        <span class=\"k\">for</span> <span class=\"n\">confidence_text</span> <span class=\"ow\">in</span> <span class=\"n\">confidence_text_list</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">confidence_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">confidence_nice_list</span><span class=\"p\">,</span> <span class=\"n\">confidence_text_list</span><span class=\"p\">,</span> <span class=\"n\">confidence_selected_list</span><span class=\"p\">))</span>\n\n    <span class=\"k\">if</span> <span class=\"kc\">False</span><span class=\"p\">:</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">ibeis.web</span> <span class=\"k\">import</span> <span class=\"n\">apis_query</span>\n        <span class=\"n\">root_path</span> <span class=\"o\">=</span> <span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"n\">apis_query</span><span class=\"o\">.</span><span class=\"vm\">__file__</span><span class=\"p\">))</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">root_path</span> <span class=\"o\">=</span> <span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">))</span>\n    <span class=\"n\">css_file_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">[</span><span class=\"s1\">&#39;css&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;style.css&#39;</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"s1\">&#39;include&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bootstrap&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;css&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bootstrap.css&#39;</span><span class=\"p\">],</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">json_file_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">[</span><span class=\"s1\">&#39;javascript&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;script.js&#39;</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"s1\">&#39;include&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bootstrap&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;js&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bootstrap.js&#39;</span><span class=\"p\">],</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">include_jquery</span><span class=\"p\">:</span>\n        <span class=\"n\">json_file_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"p\">[</span><span class=\"s1\">&#39;javascript&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;jquery.min.js&#39;</span><span class=\"p\">],</span>\n        <span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">json_file_list</span>\n\n    <span class=\"n\">EMBEDDED_CSS</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>\n    <span class=\"n\">EMBEDDED_JAVASCRIPT</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>\n\n    <span class=\"n\">css_template_fmtstr</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&lt;style type=&quot;text/css&quot; ia-dependency=&quot;css&quot;&gt;</span><span class=\"si\">%s</span><span class=\"s1\">&lt;/style&gt;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span>\n    <span class=\"n\">json_template_fmtstr</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&lt;script type=&quot;text/javascript&quot; ia-dependency=&quot;javascript&quot;&gt;</span><span class=\"si\">%s</span><span class=\"s1\">&lt;/script&gt;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span>\n    <span class=\"k\">for</span> <span class=\"n\">css_file</span> <span class=\"ow\">in</span> <span class=\"n\">css_file_list</span><span class=\"p\">:</span>\n        <span class=\"n\">css_filepath_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">root_path</span><span class=\"p\">,</span> <span class=\"s1\">&#39;static&#39;</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">css_file</span>\n        <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">css_filepath_list</span><span class=\"p\">))</span> <span class=\"k\">as</span> <span class=\"n\">css_file</span><span class=\"p\">:</span>\n            <span class=\"n\">EMBEDDED_CSS</span> <span class=\"o\">+=</span> <span class=\"n\">css_template_fmtstr</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">css_file</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(),</span> <span class=\"p\">)</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">json_file</span> <span class=\"ow\">in</span> <span class=\"n\">json_file_list</span><span class=\"p\">:</span>\n        <span class=\"n\">json_filepath_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">root_path</span><span class=\"p\">,</span> <span class=\"s1\">&#39;static&#39;</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">json_file</span>\n        <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">json_filepath_list</span><span class=\"p\">))</span> <span class=\"k\">as</span> <span class=\"n\">json_file</span><span class=\"p\">:</span>\n            <span class=\"n\">EMBEDDED_JAVASCRIPT</span> <span class=\"o\">+=</span> <span class=\"n\">json_template_fmtstr</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">json_file</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(),</span> <span class=\"p\">)</span>\n\n    <span class=\"n\">embedded</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">globals</span><span class=\"p\">(),</span> <span class=\"o\">**</span><span class=\"nb\">locals</span><span class=\"p\">())</span>\n    <span class=\"k\">return</span> <span class=\"n\">appf</span><span class=\"o\">.</span><span class=\"n\">template</span><span class=\"p\">(</span><span class=\"s1\">&#39;turk&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;identification_insert&#39;</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">embedded</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"view_graphs_status\"><a class=\"viewcode-back\" href=\"../../../../ibeis.web/#ibeis.web.apis_query.view_graphs_status\">[docs]</a><span class=\"nd\">@register_api</span><span class=\"p\">(</span><span class=\"s1\">&#39;/api/status/query/graph/v2/&#39;</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;GET&#39;</span><span class=\"p\">],</span> <span class=\"n\">__api_plural_check__</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">view_graphs_status</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">):</span>\n    <span class=\"n\">graph_dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"k\">for</span> <span class=\"n\">graph_uuid</span> <span class=\"ow\">in</span> <span class=\"n\">current_app</span><span class=\"o\">.</span><span class=\"n\">GRAPH_CLIENT_DICT</span><span class=\"p\">:</span>\n        <span class=\"n\">graph_client</span> <span class=\"o\">=</span> <span class=\"n\">current_app</span><span class=\"o\">.</span><span class=\"n\">GRAPH_CLIENT_DICT</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">graph_uuid</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">graph_client</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">continue</span>\n        <span class=\"n\">graph_status</span><span class=\"p\">,</span> <span class=\"n\">graph_exception</span> <span class=\"o\">=</span> <span class=\"n\">graph_client</span><span class=\"o\">.</span><span class=\"n\">refresh_status</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">graph_client</span><span class=\"o\">.</span><span class=\"n\">review_dict</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">num_edges</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">edge_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">graph_client</span><span class=\"o\">.</span><span class=\"n\">review_dict</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n            <span class=\"n\">num_edges</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">edge_list</span><span class=\"p\">)</span>\n        <span class=\"n\">graph_uuid</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">graph_uuid</span><span class=\"p\">)</span>\n        <span class=\"n\">graph_dict</span><span class=\"p\">[</span><span class=\"n\">graph_uuid</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;status&#39;</span><span class=\"p\">:</span> <span class=\"n\">graph_status</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;num_aids&#39;</span><span class=\"p\">:</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">graph_client</span><span class=\"o\">.</span><span class=\"n\">aids</span><span class=\"p\">),</span>\n            <span class=\"s1\">&#39;num_reviews&#39;</span><span class=\"p\">:</span> <span class=\"n\">num_edges</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">graph_dict</span></div>\n\n\n<div class=\"viewcode-block\" id=\"process_graph_match_html_v2\"><a class=\"viewcode-back\" href=\"../../../../ibeis.web/#ibeis.web.apis_query.process_graph_match_html_v2\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"nd\">@register_api</span><span class=\"p\">(</span><span class=\"s1\">&#39;/api/review/query/graph/v2/&#39;</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;POST&#39;</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">process_graph_match_html_v2</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">graph_uuid</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"n\">graph_client</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_graph_client_query_chips_graph_v2</span><span class=\"p\">(</span><span class=\"n\">graph_uuid</span><span class=\"p\">)</span>\n    <span class=\"n\">response_tuple</span> <span class=\"o\">=</span> <span class=\"n\">process_graph_match_html</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    <span class=\"n\">annot_uuid_1</span><span class=\"p\">,</span> <span class=\"n\">annot_uuid_2</span><span class=\"p\">,</span> <span class=\"n\">decision</span><span class=\"p\">,</span> <span class=\"n\">tags</span><span class=\"p\">,</span> <span class=\"n\">user_id</span><span class=\"p\">,</span> <span class=\"n\">confidence</span><span class=\"p\">,</span> <span class=\"n\">user_times</span> <span class=\"o\">=</span> <span class=\"n\">response_tuple</span>\n    <span class=\"n\">aid1</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_aids_from_uuid</span><span class=\"p\">(</span><span class=\"n\">annot_uuid_1</span><span class=\"p\">)</span>\n    <span class=\"n\">aid2</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_aids_from_uuid</span><span class=\"p\">(</span><span class=\"n\">annot_uuid_2</span><span class=\"p\">)</span>\n    <span class=\"n\">edge</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n    <span class=\"n\">user_id</span> <span class=\"o\">=</span> <span class=\"n\">controller_inject</span><span class=\"o\">.</span><span class=\"n\">get_user</span><span class=\"p\">()</span>\n    <span class=\"n\">now</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">utcnow</span><span class=\"p\">()</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">decision</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s1\">&#39;excludetop&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;excludebottom&#39;</span><span class=\"p\">]:</span>\n        <span class=\"n\">aid</span> <span class=\"o\">=</span> <span class=\"n\">aid1</span> <span class=\"k\">if</span> <span class=\"n\">decision</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;excludetop&#39;</span> <span class=\"k\">else</span> <span class=\"n\">aid2</span>\n\n        <span class=\"n\">metadata_dict</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_metadata</span><span class=\"p\">(</span><span class=\"n\">aid</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"s1\">&#39;excluded&#39;</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">metadata_dict</span>\n        <span class=\"n\">metadata_dict</span><span class=\"p\">[</span><span class=\"s1\">&#39;excluded&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_annot_metadata</span><span class=\"p\">([</span><span class=\"n\">aid</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"n\">metadata_dict</span><span class=\"p\">])</span>\n\n        <span class=\"n\">payload</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;action&#39;</span>            <span class=\"p\">:</span> <span class=\"s1\">&#39;remove_annots&#39;</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;aids&#39;</span>              <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">aid</span><span class=\"p\">],</span>\n        <span class=\"p\">}</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">payload</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;action&#39;</span>            <span class=\"p\">:</span> <span class=\"s1\">&#39;add_feedback&#39;</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;edge&#39;</span>              <span class=\"p\">:</span> <span class=\"n\">edge</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;evidence_decision&#39;</span> <span class=\"p\">:</span> <span class=\"n\">decision</span><span class=\"p\">,</span>\n            <span class=\"c1\"># TODO: meta_decision should come from the html resp.  When generating</span>\n            <span class=\"c1\"># the html page, the default value should be its previous value. If the</span>\n            <span class=\"c1\"># user changes it to be something incompatible them perhaps just reset</span>\n            <span class=\"c1\"># it to null.</span>\n            <span class=\"s1\">&#39;meta_decision&#39;</span>     <span class=\"p\">:</span> <span class=\"s1\">&#39;null&#39;</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;tags&#39;</span>              <span class=\"p\">:</span> <span class=\"p\">[]</span> <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">tags</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"n\">tags</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;;&#39;</span><span class=\"p\">),</span>\n            <span class=\"s1\">&#39;user_id&#39;</span>           <span class=\"p\">:</span> <span class=\"s1\">&#39;user:web:</span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">,</span> <span class=\"p\">),</span>\n            <span class=\"s1\">&#39;confidence&#39;</span>        <span class=\"p\">:</span> <span class=\"n\">confidence</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;timestamp_s1&#39;</span>      <span class=\"p\">:</span> <span class=\"n\">user_times</span><span class=\"p\">[</span><span class=\"s1\">&#39;server_time_start&#39;</span><span class=\"p\">],</span>\n            <span class=\"s1\">&#39;timestamp_c1&#39;</span>      <span class=\"p\">:</span> <span class=\"n\">user_times</span><span class=\"p\">[</span><span class=\"s1\">&#39;client_time_start&#39;</span><span class=\"p\">],</span>\n            <span class=\"s1\">&#39;timestamp_c2&#39;</span>      <span class=\"p\">:</span> <span class=\"n\">user_times</span><span class=\"p\">[</span><span class=\"s1\">&#39;client_time_end&#39;</span><span class=\"p\">],</span>\n            <span class=\"s1\">&#39;timestamp&#39;</span>         <span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">now</span><span class=\"o\">.</span><span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\">.</span><span class=\"si\">%f</span><span class=\"s2\">&quot;</span><span class=\"p\">))</span>\n        <span class=\"p\">}</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;POSTING GRAPH CLIENT REVIEW:&#39;</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr4</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">))</span>\n    <span class=\"n\">graph_client</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Clean any old continue_reviews</span>\n    <span class=\"n\">graph_client</span><span class=\"o\">.</span><span class=\"n\">cleanup</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># Continue review</span>\n    <span class=\"n\">future</span> <span class=\"o\">=</span> <span class=\"n\">graph_client</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">({</span><span class=\"s1\">&#39;action&#39;</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;continue_review&#39;</span><span class=\"p\">})</span>\n    <span class=\"n\">future</span><span class=\"o\">.</span><span class=\"n\">graph_client</span> <span class=\"o\">=</span> <span class=\"n\">graph_client</span>\n    <span class=\"n\">future</span><span class=\"o\">.</span><span class=\"n\">add_done_callback</span><span class=\"p\">(</span><span class=\"n\">query_graph_v2_on_request_review</span><span class=\"p\">)</span>\n\n    <span class=\"n\">f2</span> <span class=\"o\">=</span> <span class=\"n\">graph_client</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">({</span><span class=\"s1\">&#39;action&#39;</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;latest_logs&#39;</span><span class=\"p\">})</span>\n    <span class=\"n\">f2</span><span class=\"o\">.</span><span class=\"n\">graph_client</span> <span class=\"o\">=</span> <span class=\"n\">graph_client</span>\n    <span class=\"n\">f2</span><span class=\"o\">.</span><span class=\"n\">add_done_callback</span><span class=\"p\">(</span><span class=\"n\">query_graph_v2_latest_logs</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">annot_uuid_1</span><span class=\"p\">,</span> <span class=\"n\">annot_uuid_2</span><span class=\"p\">,</span> <span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"sync_query_chips_graph_v2\"><a class=\"viewcode-back\" href=\"../../../../ibeis.web/#ibeis.web.apis_query.sync_query_chips_graph_v2\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"nd\">@register_api</span><span class=\"p\">(</span><span class=\"s1\">&#39;/api/query/graph/v2/&#39;</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;GET&#39;</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">sync_query_chips_graph_v2</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">graph_uuid</span><span class=\"p\">):</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">ibeis</span>\n    <span class=\"n\">graph_client</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_graph_client_query_chips_graph_v2</span><span class=\"p\">(</span><span class=\"n\">graph_uuid</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Create the AnnotInference</span>\n    <span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">AnnotInference</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">=</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"o\">=</span><span class=\"n\">graph_client</span><span class=\"o\">.</span><span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"n\">autoinit</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">graph_client</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">:</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">graph_client</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span>\n    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">reset_feedback</span><span class=\"p\">(</span><span class=\"s1\">&#39;staging&#39;</span><span class=\"p\">,</span> <span class=\"n\">apply</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">relabel_using_reviews</span><span class=\"p\">(</span><span class=\"n\">rectify</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">edge_delta_df</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">match_state_delta</span><span class=\"p\">(</span><span class=\"n\">old</span><span class=\"o\">=</span><span class=\"s1\">&#39;annotmatch&#39;</span><span class=\"p\">,</span> <span class=\"n\">new</span><span class=\"o\">=</span><span class=\"s1\">&#39;all&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">name_delta_df</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">get_ibeis_name_delta</span><span class=\"p\">()</span>\n\n    <span class=\"c1\">############################################################################</span>\n\n    <span class=\"n\">col_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">edge_delta_df</span><span class=\"o\">.</span><span class=\"n\">columns</span><span class=\"p\">)</span>\n    <span class=\"n\">match_aid_edge_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">edge_delta_df</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">)</span>\n    <span class=\"n\">match_aid1_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take_column</span><span class=\"p\">(</span><span class=\"n\">match_aid_edge_list</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">match_aid2_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take_column</span><span class=\"p\">(</span><span class=\"n\">match_aid_edge_list</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">match_annot_uuid1_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_uuids</span><span class=\"p\">(</span><span class=\"n\">match_aid1_list</span><span class=\"p\">)</span>\n    <span class=\"n\">match_annot_uuid2_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_uuids</span><span class=\"p\">(</span><span class=\"n\">match_aid2_list</span><span class=\"p\">)</span>\n    <span class=\"n\">match_annot_uuid_edge_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">match_annot_uuid1_list</span><span class=\"p\">,</span> <span class=\"n\">match_annot_uuid2_list</span><span class=\"p\">))</span>\n\n    <span class=\"n\">zipped</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">(</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">edge_delta_df</span><span class=\"p\">[</span><span class=\"n\">col</span><span class=\"p\">])</span> <span class=\"k\">for</span> <span class=\"n\">col</span> <span class=\"ow\">in</span> <span class=\"n\">col_list</span> <span class=\"p\">)))</span>\n\n    <span class=\"n\">match_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">match_annot_uuid_edge</span><span class=\"p\">,</span> <span class=\"n\">zipped_</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">match_annot_uuid_edge_list</span><span class=\"p\">,</span> <span class=\"n\">zipped</span><span class=\"p\">)):</span>\n        <span class=\"n\">match_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;edge&#39;</span><span class=\"p\">:</span> <span class=\"n\">match_annot_uuid_edge</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">for</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">col</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">col_list</span><span class=\"p\">):</span>\n            <span class=\"n\">match_dict</span><span class=\"p\">[</span><span class=\"n\">col</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">zipped_</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span>\n        <span class=\"n\">match_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">match_dict</span><span class=\"p\">)</span>\n\n    <span class=\"c1\">############################################################################</span>\n\n    <span class=\"n\">col_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">name_delta_df</span><span class=\"o\">.</span><span class=\"n\">columns</span><span class=\"p\">)</span>\n    <span class=\"n\">name_aid_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">name_delta_df</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">)</span>\n    <span class=\"n\">name_annot_uuid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_uuids</span><span class=\"p\">(</span><span class=\"n\">name_aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">old_name_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">name_delta_df</span><span class=\"p\">[</span><span class=\"s1\">&#39;old_name&#39;</span><span class=\"p\">])</span>\n    <span class=\"n\">new_name_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">name_delta_df</span><span class=\"p\">[</span><span class=\"s1\">&#39;new_name&#39;</span><span class=\"p\">])</span>\n    <span class=\"n\">zipped</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">name_annot_uuid_list</span><span class=\"p\">,</span> <span class=\"n\">old_name_list</span><span class=\"p\">,</span> <span class=\"n\">new_name_list</span><span class=\"p\">))</span>\n    <span class=\"n\">name_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">name_annot_uuid</span><span class=\"p\">):</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;old&#39;</span><span class=\"p\">:</span> <span class=\"n\">old_name</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;new&#39;</span><span class=\"p\">:</span> <span class=\"n\">new_name</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">for</span> <span class=\"n\">name_annot_uuid</span><span class=\"p\">,</span> <span class=\"n\">old_name</span><span class=\"p\">,</span> <span class=\"n\">new_name</span> <span class=\"ow\">in</span> <span class=\"n\">zipped</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">############################################################################</span>\n\n    <span class=\"n\">ret_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">&#39;match_list&#39;</span>  <span class=\"p\">:</span> <span class=\"n\">match_list</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;name_dict&#39;</span>   <span class=\"p\">:</span> <span class=\"n\">name_dict</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">write_ibeis_staging_feedback</span><span class=\"p\">()</span>\n    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">write_ibeis_annotmatch_feedback</span><span class=\"p\">(</span><span class=\"n\">edge_delta_df</span><span class=\"p\">)</span>\n    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">write_ibeis_name_assignment</span><span class=\"p\">(</span><span class=\"n\">name_delta_df</span><span class=\"p\">)</span>\n    <span class=\"n\">edge_delta_df</span><span class=\"o\">.</span><span class=\"n\">reset_index</span><span class=\"p\">()</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">ret_dict</span></div>\n\n\n<div class=\"viewcode-block\" id=\"add_annots_query_chips_graph_v2\"><a class=\"viewcode-back\" href=\"../../../../ibeis.web/#ibeis.web.apis_query.add_annots_query_chips_graph_v2\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"nd\">@register_api</span><span class=\"p\">(</span><span class=\"s1\">&#39;/api/query/graph/v2/&#39;</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;PUT&#39;</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">add_annots_query_chips_graph_v2</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">graph_uuid</span><span class=\"p\">,</span> <span class=\"n\">annot_uuid_list</span><span class=\"p\">):</span>\n    <span class=\"n\">graph_client</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_graph_client_query_chips_graph_v2</span><span class=\"p\">(</span><span class=\"n\">graph_uuid</span><span class=\"p\">)</span>\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">web_check_uuids</span><span class=\"p\">(</span><span class=\"n\">qannot_uuid_list</span><span class=\"o\">=</span><span class=\"n\">annot_uuid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">aid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_aids_from_uuid</span><span class=\"p\">(</span><span class=\"n\">annot_uuid_list</span><span class=\"p\">)</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">graph_uuid_</span> <span class=\"ow\">in</span> <span class=\"n\">current_app</span><span class=\"o\">.</span><span class=\"n\">GRAPH_CLIENT_DICT</span><span class=\"p\">:</span>\n        <span class=\"n\">graph_client_</span> <span class=\"o\">=</span> <span class=\"n\">current_app</span><span class=\"o\">.</span><span class=\"n\">GRAPH_CLIENT_DICT</span><span class=\"p\">[</span><span class=\"n\">graph_uuid_</span><span class=\"p\">]</span>\n        <span class=\"n\">aid_list_</span> <span class=\"o\">=</span> <span class=\"n\">graph_client_</span><span class=\"o\">.</span><span class=\"n\">aids</span>\n        <span class=\"k\">assert</span> <span class=\"n\">aid_list_</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span>\n        <span class=\"n\">overlap_aid_set</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">aid_list_</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">overlap_aid_set</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">overlap_aid_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">overlap_aid_set</span><span class=\"p\">)</span>\n            <span class=\"n\">overlap_annot_uuid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_uuids</span><span class=\"p\">(</span><span class=\"n\">overlap_aid_list</span><span class=\"p\">)</span>\n            <span class=\"k\">raise</span> <span class=\"n\">controller_inject</span><span class=\"o\">.</span><span class=\"n\">WebUnavailableUUIDException</span><span class=\"p\">(</span>\n                <span class=\"n\">overlap_annot_uuid_list</span><span class=\"p\">,</span> <span class=\"n\">graph_uuid_</span><span class=\"p\">)</span>\n\n    <span class=\"n\">aid_list_</span> <span class=\"o\">=</span> <span class=\"n\">graph_client</span><span class=\"o\">.</span><span class=\"n\">aids</span> <span class=\"o\">+</span> <span class=\"n\">aid_list</span>\n    <span class=\"n\">graph_uuid_</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">hashable_to_uuid</span><span class=\"p\">(</span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">aid_list_</span><span class=\"p\">))</span>\n    <span class=\"k\">assert</span> <span class=\"n\">graph_uuid_</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">current_app</span><span class=\"o\">.</span><span class=\"n\">GRAPH_CLIENT_DICT</span>\n    <span class=\"n\">graph_client</span><span class=\"o\">.</span><span class=\"n\">graph_uuid</span> <span class=\"o\">=</span> <span class=\"n\">graph_uuid_</span>\n\n    <span class=\"n\">payload</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">&#39;action&#39;</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;add_annots&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;dbdir&#39;</span>  <span class=\"p\">:</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">dbdir</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;aids&#39;</span>   <span class=\"p\">:</span> <span class=\"n\">aid_list</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">future</span> <span class=\"o\">=</span> <span class=\"n\">graph_client</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">)</span>\n    <span class=\"n\">future</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">()</span>  <span class=\"c1\"># Guarantee that this has happened before calling refresh</span>\n\n    <span class=\"c1\"># Start main loop</span>\n    <span class=\"n\">future</span> <span class=\"o\">=</span> <span class=\"n\">graph_client</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">({</span><span class=\"s1\">&#39;action&#39;</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;continue_review&#39;</span><span class=\"p\">})</span>\n    <span class=\"n\">future</span><span class=\"o\">.</span><span class=\"n\">graph_client</span> <span class=\"o\">=</span> <span class=\"n\">graph_client</span>\n    <span class=\"n\">future</span><span class=\"o\">.</span><span class=\"n\">add_done_callback</span><span class=\"p\">(</span><span class=\"n\">query_graph_v2_on_request_review</span><span class=\"p\">)</span>\n\n    <span class=\"n\">current_app</span><span class=\"o\">.</span><span class=\"n\">GRAPH_CLIENT_DICT</span><span class=\"p\">[</span><span class=\"n\">graph_uuid_</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">graph_client</span>\n    <span class=\"n\">current_app</span><span class=\"o\">.</span><span class=\"n\">GRAPH_CLIENT_DICT</span><span class=\"p\">[</span><span class=\"n\">graph_uuid</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">graph_uuid_</span>\n    <span class=\"k\">return</span> <span class=\"n\">graph_uuid_</span></div>\n\n\n<div class=\"viewcode-block\" id=\"remove_annots_query_chips_graph_v2\"><a class=\"viewcode-back\" href=\"../../../../ibeis.web/#ibeis.web.apis_query.remove_annots_query_chips_graph_v2\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">remove_annots_query_chips_graph_v2</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">graph_uuid</span><span class=\"p\">,</span> <span class=\"n\">annot_uuid_list</span><span class=\"p\">):</span>\n    <span class=\"n\">graph_client</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_graph_client_query_chips_graph_v2</span><span class=\"p\">(</span><span class=\"n\">graph_uuid</span><span class=\"p\">)</span>\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">web_check_uuids</span><span class=\"p\">(</span><span class=\"n\">qannot_uuid_list</span><span class=\"o\">=</span><span class=\"n\">annot_uuid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">aid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_aids_from_uuid</span><span class=\"p\">(</span><span class=\"n\">annot_uuid_list</span><span class=\"p\">)</span>\n\n    <span class=\"n\">aid_list_</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">graph_client</span><span class=\"o\">.</span><span class=\"n\">aids</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">))</span>\n    <span class=\"n\">graph_uuid_</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">hashable_to_uuid</span><span class=\"p\">(</span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">aid_list_</span><span class=\"p\">))</span>\n    <span class=\"k\">assert</span> <span class=\"n\">graph_uuid_</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">current_app</span><span class=\"o\">.</span><span class=\"n\">GRAPH_CLIENT_DICT</span>\n    <span class=\"n\">graph_client</span><span class=\"o\">.</span><span class=\"n\">graph_uuid</span> <span class=\"o\">=</span> <span class=\"n\">graph_uuid_</span>\n\n    <span class=\"n\">payload</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">&#39;action&#39;</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;remove_annots&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;dbdir&#39;</span>  <span class=\"p\">:</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">dbdir</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;aids&#39;</span>   <span class=\"p\">:</span> <span class=\"n\">aid_list</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">future</span> <span class=\"o\">=</span> <span class=\"n\">graph_client</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">)</span>\n    <span class=\"n\">future</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">()</span>  <span class=\"c1\"># Guarantee that this has happened before calling refresh</span>\n\n    <span class=\"c1\"># Start main loop</span>\n    <span class=\"n\">future</span> <span class=\"o\">=</span> <span class=\"n\">graph_client</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">({</span><span class=\"s1\">&#39;action&#39;</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;continue_review&#39;</span><span class=\"p\">})</span>\n    <span class=\"n\">future</span><span class=\"o\">.</span><span class=\"n\">graph_client</span> <span class=\"o\">=</span> <span class=\"n\">graph_client</span>\n    <span class=\"n\">future</span><span class=\"o\">.</span><span class=\"n\">add_done_callback</span><span class=\"p\">(</span><span class=\"n\">query_graph_v2_on_request_review</span><span class=\"p\">)</span>\n\n    <span class=\"n\">current_app</span><span class=\"o\">.</span><span class=\"n\">GRAPH_CLIENT_DICT</span><span class=\"p\">[</span><span class=\"n\">graph_uuid_</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">graph_client</span>\n    <span class=\"n\">current_app</span><span class=\"o\">.</span><span class=\"n\">GRAPH_CLIENT_DICT</span><span class=\"p\">[</span><span class=\"n\">graph_uuid</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">graph_uuid_</span>\n    <span class=\"k\">return</span> <span class=\"n\">graph_uuid_</span></div>\n\n\n<div class=\"viewcode-block\" id=\"delete_query_chips_graph_v2\"><a class=\"viewcode-back\" href=\"../../../../ibeis.web/#ibeis.web.apis_query.delete_query_chips_graph_v2\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"nd\">@register_api</span><span class=\"p\">(</span><span class=\"s1\">&#39;/api/query/graph/v2/&#39;</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;DELETE&#39;</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">delete_query_chips_graph_v2</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">graph_uuid</span><span class=\"p\">):</span>\n    <span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_graph_client_query_chips_graph_v2</span><span class=\"p\">(</span><span class=\"n\">graph_uuid</span><span class=\"p\">)</span>\n    <span class=\"n\">graph_client</span><span class=\"p\">,</span> <span class=\"n\">graph_uuid_chain</span> <span class=\"o\">=</span> <span class=\"n\">values</span>\n    <span class=\"k\">del</span> <span class=\"n\">graph_client</span>\n    <span class=\"k\">for</span> <span class=\"n\">graph_uuid_</span> <span class=\"ow\">in</span> <span class=\"n\">graph_uuid_chain</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">graph_uuid_</span> <span class=\"ow\">in</span> <span class=\"n\">current_app</span><span class=\"o\">.</span><span class=\"n\">GRAPH_CLIENT_DICT</span><span class=\"p\">:</span>\n            <span class=\"n\">current_app</span><span class=\"o\">.</span><span class=\"n\">GRAPH_CLIENT_DICT</span><span class=\"p\">[</span><span class=\"n\">graph_uuid_</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n            <span class=\"n\">current_app</span><span class=\"o\">.</span><span class=\"n\">GRAPH_CLIENT_DICT</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"n\">graph_uuid_</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n\n<div class=\"viewcode-block\" id=\"query_graph_v2_latest_logs\"><a class=\"viewcode-back\" href=\"../../../../ibeis.web/#ibeis.web.apis_query.query_graph_v2_latest_logs\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">query_graph_v2_latest_logs</span><span class=\"p\">(</span><span class=\"n\">future</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">future</span><span class=\"o\">.</span><span class=\"n\">cancelled</span><span class=\"p\">():</span>\n        <span class=\"n\">logs</span> <span class=\"o\">=</span> <span class=\"n\">future</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">()</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;--- &lt;LOG DUMP&gt; ---&#39;</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">msg</span><span class=\"p\">,</span> <span class=\"n\">color</span> <span class=\"ow\">in</span> <span class=\"n\">logs</span><span class=\"p\">:</span>\n            <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">cprint</span><span class=\"p\">(</span><span class=\"s1\">&#39;[web.infr] &#39;</span> <span class=\"o\">+</span> <span class=\"n\">msg</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;--- &lt;\\LOG DUMP&gt; ---&#39;</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"query_graph_v2_on_request_review\"><a class=\"viewcode-back\" href=\"../../../../ibeis.web/#ibeis.web.apis_query.query_graph_v2_on_request_review\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">query_graph_v2_on_request_review</span><span class=\"p\">(</span><span class=\"n\">future</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">future</span><span class=\"o\">.</span><span class=\"n\">cancelled</span><span class=\"p\">():</span>\n        <span class=\"n\">graph_client</span> <span class=\"o\">=</span> <span class=\"n\">future</span><span class=\"o\">.</span><span class=\"n\">graph_client</span>\n        <span class=\"n\">data_list</span> <span class=\"o\">=</span> <span class=\"n\">future</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">data_list</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">graph_client</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">data_list</span><span class=\"p\">)</span>\n            <span class=\"n\">callback_type</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;review&#39;</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">graph_client</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n            <span class=\"n\">callback_type</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;finished&#39;</span>\n        <span class=\"n\">query_graph_v2_callback</span><span class=\"p\">(</span><span class=\"n\">graph_client</span><span class=\"p\">,</span> <span class=\"n\">callback_type</span><span class=\"p\">)</span></div>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.web.app</span>\n<span class=\"sd\">        python -m ibeis.web.app --allexamples</span>\n<span class=\"sd\">        python -m ibeis.web.app --allexamples --noface --nosrc</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">multiprocessing</span>\n    <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">freeze_support</span><span class=\"p\">()</span>  <span class=\"c1\"># for win32</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>  <span class=\"c1\"># NOQA</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">doctest_funcs</span><span class=\"p\">()</span>\n</pre></div>", "current_page_name": "_modules/ibeis/web/apis_query", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}