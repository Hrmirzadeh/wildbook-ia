{"parents": [{"link": "../../../../", "title": "Module code"}, {"link": "../../../", "title": "ibeis"}], "title": "ibeis.web.futures_utils.thread_actor", "body": "<h1>Source code for ibeis.web.futures_utils.thread_actor</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"sd\">&quot;&quot;&quot; Implements ThreadActor &quot;&quot;&quot;</span>\n<span class=\"kn\">from</span> <span class=\"nn\">concurrent.futures</span> <span class=\"k\">import</span> <span class=\"n\">_base</span>\n<span class=\"kn\">from</span> <span class=\"nn\">concurrent.futures</span> <span class=\"k\">import</span> <span class=\"n\">thread</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.web.futures_utils</span> <span class=\"k\">import</span> <span class=\"n\">_base_actor</span>\n<span class=\"kn\">import</span> <span class=\"nn\">queue</span>\n<span class=\"kn\">import</span> <span class=\"nn\">threading</span>\n<span class=\"kn\">import</span> <span class=\"nn\">weakref</span>\n\n<span class=\"c1\"># Most of this code is duplicated from the concurrent.futures.thread and</span>\n<span class=\"c1\"># concurrent.futures.process modules, writen by Brian Quinlan. The main</span>\n<span class=\"c1\"># difference is that we expose an `Actor` class which can be inherited from and</span>\n<span class=\"c1\"># provides the `executor` classmethod. This creates an asynchronously</span>\n<span class=\"c1\"># maintained instance of this class in a separate thread/process</span>\n\n<span class=\"n\">__author__</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Jon Crall (erotemic@gmail.com)&#39;</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">_WorkItem</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">future</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">future</span> <span class=\"o\">=</span> <span class=\"n\">future</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"n\">message</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_thread_actor_eventloop</span><span class=\"p\">(</span><span class=\"n\">executor_reference</span><span class=\"p\">,</span> <span class=\"n\">work_queue</span><span class=\"p\">,</span> <span class=\"n\">_ActorClass</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span>\n                            <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    actor event loop run in a separate thread.</span>\n\n<span class=\"sd\">    Creates the instance of the actor (passing in the required *args, and</span>\n<span class=\"sd\">    **kwargs). Then the eventloop starts and feeds the actor messages from the</span>\n<span class=\"sd\">    _call_queue. Results are placed in the _result_queue, which are then placed</span>\n<span class=\"sd\">    in Future objects.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">actor</span> <span class=\"o\">=</span> <span class=\"n\">_ActorClass</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n            <span class=\"n\">work_item</span> <span class=\"o\">=</span> <span class=\"n\">work_queue</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">work_item</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">work_item</span><span class=\"o\">.</span><span class=\"n\">future</span><span class=\"o\">.</span><span class=\"n\">set_running_or_notify_cancel</span><span class=\"p\">():</span>\n                    <span class=\"c1\"># Send the message to the actor</span>\n                    <span class=\"k\">try</span><span class=\"p\">:</span>\n                        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">handle</span><span class=\"p\">(</span><span class=\"n\">work_item</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"p\">)</span>\n                    <span class=\"k\">except</span> <span class=\"ne\">BaseException</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n                        <span class=\"n\">work_item</span><span class=\"o\">.</span><span class=\"n\">future</span><span class=\"o\">.</span><span class=\"n\">set_exception</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n                        <span class=\"c1\"># Delete references to object.</span>\n                        <span class=\"k\">del</span> <span class=\"n\">e</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"n\">work_item</span><span class=\"o\">.</span><span class=\"n\">future</span><span class=\"o\">.</span><span class=\"n\">set_result</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n                <span class=\"c1\"># Delete references to object. See issue16284</span>\n                <span class=\"k\">del</span> <span class=\"n\">work_item</span>\n                <span class=\"k\">continue</span>\n            <span class=\"n\">executor</span> <span class=\"o\">=</span> <span class=\"n\">executor_reference</span><span class=\"p\">()</span>\n            <span class=\"c1\"># Exit if:</span>\n            <span class=\"c1\">#   - The interpreter is shutting down OR</span>\n            <span class=\"c1\">#   - The executor that owns the worker has been collected OR</span>\n            <span class=\"c1\">#   - The executor that owns the worker has been shutdown.</span>\n            <span class=\"k\">if</span> <span class=\"n\">thread</span><span class=\"o\">.</span><span class=\"n\">_shutdown</span> <span class=\"ow\">or</span> <span class=\"n\">executor</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"n\">executor</span><span class=\"o\">.</span><span class=\"n\">_shutdown</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Notice other workers</span>\n                <span class=\"n\">work_queue</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span>\n            <span class=\"k\">del</span> <span class=\"n\">executor</span>\n    <span class=\"k\">except</span> <span class=\"ne\">BaseException</span><span class=\"p\">:</span>\n        <span class=\"n\">_base</span><span class=\"o\">.</span><span class=\"n\">LOGGER</span><span class=\"o\">.</span><span class=\"n\">critical</span><span class=\"p\">(</span><span class=\"s1\">&#39;Exception in worker&#39;</span><span class=\"p\">,</span> <span class=\"n\">exc_info</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"ThreadActorExecutor\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.web.futures_utils/#ibeis.web.futures_utils.thread_actor.ThreadActorExecutor\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">ThreadActorExecutor</span><span class=\"p\">(</span><span class=\"n\">_base_actor</span><span class=\"o\">.</span><span class=\"n\">ActorExecutor</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">_ActorClass</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Initializes a new ThreadPoolExecutor instance.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ActorClass</span> <span class=\"o\">=</span> <span class=\"n\">_ActorClass</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_work_queue</span> <span class=\"o\">=</span> <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">Queue</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_threads</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_shutdown</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_shutdown_lock</span> <span class=\"o\">=</span> <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Lock</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_did_initialize</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">args</span> <span class=\"ow\">or</span> <span class=\"n\">kwargs</span><span class=\"p\">:</span>\n            <span class=\"c1\"># If given actor initialization args we must start the Actor</span>\n            <span class=\"c1\"># immediately. Otherwise just wait until we get a message</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_initialize_actor</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"ThreadActorExecutor.post\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.web.futures_utils/#ibeis.web.futures_utils.thread_actor.ThreadActorExecutor.post\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">post</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">):</span>\n        <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_shutdown_lock</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_shutdown</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">RuntimeError</span><span class=\"p\">(</span><span class=\"s1\">&#39;cannot schedule new futures after shutdown&#39;</span><span class=\"p\">)</span>\n\n            <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">_base</span><span class=\"o\">.</span><span class=\"n\">Future</span><span class=\"p\">()</span>\n            <span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"n\">_WorkItem</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">)</span>\n\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_work_queue</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_initialize_actor</span><span class=\"p\">()</span>\n            <span class=\"k\">return</span> <span class=\"n\">f</span></div>\n    <span class=\"n\">post</span><span class=\"o\">.</span><span class=\"vm\">__doc__</span> <span class=\"o\">=</span> <span class=\"n\">_base_actor</span><span class=\"o\">.</span><span class=\"n\">ActorExecutor</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"o\">.</span><span class=\"vm\">__doc__</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_initialize_actor</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"c1\"># When the executor gets lost, the weakref callback will wake up</span>\n        <span class=\"c1\"># the worker threads.</span>\n        <span class=\"k\">def</span> <span class=\"nf\">weakref_cb</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_work_queue</span><span class=\"p\">):</span>\n            <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"c1\"># We only maintain one thread for an actor</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_threads</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"k\">assert</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_did_initialize</span> <span class=\"ow\">is</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s1\">&#39;only initialize actor once&#39;</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_did_initialize</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Thread</span><span class=\"p\">(</span>\n                <span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">_thread_actor_eventloop</span><span class=\"p\">,</span>\n                <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">weakref</span><span class=\"o\">.</span><span class=\"n\">ref</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">weakref_cb</span><span class=\"p\">),</span>\n                      <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_work_queue</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ActorClass</span><span class=\"p\">)</span> <span class=\"o\">+</span>\n                <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span><span class=\"o\">=</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n            <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">daemon</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_threads</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n            <span class=\"n\">thread</span><span class=\"o\">.</span><span class=\"n\">_threads_queues</span><span class=\"p\">[</span><span class=\"n\">t</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_work_queue</span>\n\n<div class=\"viewcode-block\" id=\"ThreadActorExecutor.shutdown\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.web.futures_utils/#ibeis.web.futures_utils.thread_actor.ThreadActorExecutor.shutdown\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">shutdown</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">wait</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_shutdown_lock</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_shutdown</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_work_queue</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">wait</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_threads</span><span class=\"p\">:</span>\n                <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">()</span></div>\n    <span class=\"n\">shutdown</span><span class=\"o\">.</span><span class=\"vm\">__doc__</span> <span class=\"o\">=</span> <span class=\"n\">_base</span><span class=\"o\">.</span><span class=\"n\">Executor</span><span class=\"o\">.</span><span class=\"n\">shutdown</span><span class=\"o\">.</span><span class=\"vm\">__doc__</span></div>\n\n\n<div class=\"viewcode-block\" id=\"ThreadActor\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.web.futures_utils/#ibeis.web.futures_utils.thread_actor.ThreadActor\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">ThreadActor</span><span class=\"p\">(</span><span class=\"n\">_base_actor</span><span class=\"o\">.</span><span class=\"n\">Actor</span><span class=\"p\">):</span>\n\n<div class=\"viewcode-block\" id=\"ThreadActor.executor\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.web.futures_utils/#ibeis.web.futures_utils.thread_actor.ThreadActor.executor\">[docs]</a>    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">executor</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">ThreadActorExecutor</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span></div></div>\n    <span class=\"c1\"># executor.__doc__ = _base_actor.Actor.executor.__doc___</span>\n<span class=\"c1\"># ThreadActor.__doc__ = _base_actor.Actor.__doc___</span>\n</pre></div>", "current_page_name": "_modules/ibeis/web/futures_utils/thread_actor", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}