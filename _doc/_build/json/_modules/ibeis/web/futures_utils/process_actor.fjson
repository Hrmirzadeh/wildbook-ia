{"parents": [{"link": "../../../../", "title": "Module code"}, {"link": "../../../", "title": "ibeis"}], "title": "ibeis.web.futures_utils.process_actor", "body": "<h1>Source code for ibeis.web.futures_utils.process_actor</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"sd\">&quot;&quot;&quot; Implements ProcessActor &quot;&quot;&quot;</span>\n<span class=\"kn\">from</span> <span class=\"nn\">concurrent.futures</span> <span class=\"k\">import</span> <span class=\"n\">_base</span>\n<span class=\"kn\">from</span> <span class=\"nn\">concurrent.futures</span> <span class=\"k\">import</span> <span class=\"n\">process</span>\n<span class=\"kn\">from</span> <span class=\"nn\">multiprocessing.connection</span> <span class=\"k\">import</span> <span class=\"n\">wait</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.web.futures_utils</span> <span class=\"k\">import</span> <span class=\"n\">_base_actor</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">queue</span>\n<span class=\"kn\">import</span> <span class=\"nn\">weakref</span>\n<span class=\"kn\">import</span> <span class=\"nn\">threading</span>\n<span class=\"kn\">import</span> <span class=\"nn\">multiprocessing</span>\n\n\n<span class=\"c1\"># Most of this code is duplicated from the concurrent.futures.thread and</span>\n<span class=\"c1\"># concurrent.futures.process modules, writen by Brian Quinlan. The main</span>\n<span class=\"c1\"># difference is that we expose an `Actor` class which can be inherited from and</span>\n<span class=\"c1\"># provides the `executor` classmethod. This creates an asynchronously</span>\n<span class=\"c1\"># maintained instance of this class in a separate thread/process</span>\n\n<span class=\"n\">__author__</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Jon Crall (erotemic@gmail.com)&#39;</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_process_actor_eventloop</span><span class=\"p\">(</span><span class=\"n\">_call_queue</span><span class=\"p\">,</span> <span class=\"n\">_result_queue</span><span class=\"p\">,</span> <span class=\"n\">_ActorClass</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span>\n                             <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    actor event loop run in a separate process.</span>\n\n<span class=\"sd\">    Creates the instance of the actor (passing in the required *args, and</span>\n<span class=\"sd\">    **kwargs). Then the eventloop starts and feeds the actor messages from the</span>\n<span class=\"sd\">    _call_queue. Results are placed in the _result_queue, which are then placed</span>\n<span class=\"sd\">    in Future objects.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"n\">actor</span> <span class=\"o\">=</span> <span class=\"n\">_ActorClass</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"n\">call_item</span> <span class=\"o\">=</span> <span class=\"n\">_call_queue</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">call_item</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Wake up queue management thread</span>\n            <span class=\"n\">_result_queue</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getpid</span><span class=\"p\">())</span>\n            <span class=\"k\">return</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">handle</span><span class=\"p\">(</span><span class=\"n\">call_item</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">BaseException</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"n\">exc</span> <span class=\"o\">=</span> <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">_ExceptionWithTraceback</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">__traceback__</span><span class=\"p\">)</span>\n            <span class=\"n\">_result_queue</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">_ResultItem</span><span class=\"p\">(</span>\n                <span class=\"n\">call_item</span><span class=\"o\">.</span><span class=\"n\">work_id</span><span class=\"p\">,</span> <span class=\"n\">exception</span><span class=\"o\">=</span><span class=\"n\">exc</span><span class=\"p\">))</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">_result_queue</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">_ResultItem</span><span class=\"p\">(</span>\n                <span class=\"n\">call_item</span><span class=\"o\">.</span><span class=\"n\">work_id</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"o\">=</span><span class=\"n\">r</span><span class=\"p\">))</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">_WorkItem</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">future</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">future</span> <span class=\"o\">=</span> <span class=\"n\">future</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"n\">message</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">_CallItem</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">work_id</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">work_id</span> <span class=\"o\">=</span> <span class=\"n\">work_id</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"n\">message</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_add_call_item_to_queue</span><span class=\"p\">(</span><span class=\"n\">pending_work_items</span><span class=\"p\">,</span>\n                            <span class=\"n\">work_ids</span><span class=\"p\">,</span>\n                            <span class=\"n\">call_queue</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Fills call_queue with _WorkItems from pending_work_items.</span>\n\n<span class=\"sd\">    This function never blocks.</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        pending_work_items: A dict mapping work ids to _WorkItems e.g.</span>\n<span class=\"sd\">            {5: &lt;_WorkItem...&gt;, 6: &lt;_WorkItem...&gt;, ...}</span>\n<span class=\"sd\">        work_ids: A queue.Queue of work ids e.g. Queue([5, 6, ...]). Work ids</span>\n<span class=\"sd\">            are consumed and the corresponding _WorkItems from</span>\n<span class=\"sd\">            pending_work_items are transformed into _CallItems and put in</span>\n<span class=\"sd\">            call_queue.</span>\n<span class=\"sd\">        call_queue: A multiprocessing.Queue that will be filled with _CallItems</span>\n<span class=\"sd\">            derived from _WorkItems.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">call_queue</span><span class=\"o\">.</span><span class=\"n\">full</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">work_id</span> <span class=\"o\">=</span> <span class=\"n\">work_ids</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">Empty</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">work_item</span> <span class=\"o\">=</span> <span class=\"n\">pending_work_items</span><span class=\"p\">[</span><span class=\"n\">work_id</span><span class=\"p\">]</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">work_item</span><span class=\"o\">.</span><span class=\"n\">future</span><span class=\"o\">.</span><span class=\"n\">set_running_or_notify_cancel</span><span class=\"p\">():</span>\n                <span class=\"n\">call_queue</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"n\">_CallItem</span><span class=\"p\">(</span><span class=\"n\">work_id</span><span class=\"p\">,</span>\n                                         <span class=\"n\">work_item</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"p\">),</span>\n                               <span class=\"n\">block</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">del</span> <span class=\"n\">pending_work_items</span><span class=\"p\">[</span><span class=\"n\">work_id</span><span class=\"p\">]</span>\n                <span class=\"k\">continue</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_queue_management_worker</span><span class=\"p\">(</span><span class=\"n\">executor_reference</span><span class=\"p\">,</span>\n                             <span class=\"n\">_manager</span><span class=\"p\">,</span>\n                             <span class=\"n\">pending_work_items</span><span class=\"p\">,</span>\n                             <span class=\"n\">work_ids_queue</span><span class=\"p\">,</span>\n                             <span class=\"n\">_call_queue</span><span class=\"p\">,</span>\n                             <span class=\"n\">_result_queue</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Manages the communication between this process and the worker processes.&quot;&quot;&quot;</span>\n    <span class=\"n\">executor</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">shutting_down</span><span class=\"p\">():</span>\n        <span class=\"k\">return</span> <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">_shutdown</span> <span class=\"ow\">or</span> <span class=\"n\">executor</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"n\">executor</span><span class=\"o\">.</span><span class=\"n\">_shutdown_thread</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">shutdown_worker</span><span class=\"p\">():</span>\n        <span class=\"c1\"># This is an upper bound</span>\n        <span class=\"k\">if</span> <span class=\"n\">_manager</span><span class=\"o\">.</span><span class=\"n\">is_alive</span><span class=\"p\">():</span>\n            <span class=\"n\">_call_queue</span><span class=\"o\">.</span><span class=\"n\">put_nowait</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Release the queue&#39;s resources as soon as possible.</span>\n        <span class=\"n\">_call_queue</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n        <span class=\"c1\"># If .join() is not called on the created processes then</span>\n        <span class=\"c1\"># some multiprocessing.Queue methods may deadlock on Mac OS X.</span>\n        <span class=\"n\">_manager</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">()</span>\n\n    <span class=\"n\">reader</span> <span class=\"o\">=</span> <span class=\"n\">_result_queue</span><span class=\"o\">.</span><span class=\"n\">_reader</span>\n\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"n\">_add_call_item_to_queue</span><span class=\"p\">(</span><span class=\"n\">pending_work_items</span><span class=\"p\">,</span>\n                                <span class=\"n\">work_ids_queue</span><span class=\"p\">,</span>\n                                <span class=\"n\">_call_queue</span><span class=\"p\">)</span>\n\n        <span class=\"n\">sentinel</span> <span class=\"o\">=</span> <span class=\"n\">_manager</span><span class=\"o\">.</span><span class=\"n\">sentinel</span>\n        <span class=\"k\">assert</span> <span class=\"n\">sentinel</span>\n        <span class=\"n\">ready</span> <span class=\"o\">=</span> <span class=\"n\">wait</span><span class=\"p\">([</span><span class=\"n\">reader</span><span class=\"p\">,</span> <span class=\"n\">sentinel</span><span class=\"p\">])</span>\n        <span class=\"k\">if</span> <span class=\"n\">reader</span> <span class=\"ow\">in</span> <span class=\"n\">ready</span><span class=\"p\">:</span>\n            <span class=\"n\">result_item</span> <span class=\"o\">=</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">recv</span><span class=\"p\">()</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Mark the process pool broken so that submits fail right now.</span>\n            <span class=\"n\">executor</span> <span class=\"o\">=</span> <span class=\"n\">executor_reference</span><span class=\"p\">()</span>\n            <span class=\"k\">if</span> <span class=\"n\">executor</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">executor</span><span class=\"o\">.</span><span class=\"n\">_broken</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n                <span class=\"n\">executor</span><span class=\"o\">.</span><span class=\"n\">_shutdown_thread</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n                <span class=\"n\">executor</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n            <span class=\"c1\"># All futures in flight must be marked failed</span>\n            <span class=\"k\">for</span> <span class=\"n\">work_id</span><span class=\"p\">,</span> <span class=\"n\">work_item</span> <span class=\"ow\">in</span> <span class=\"n\">pending_work_items</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n                <span class=\"n\">work_item</span><span class=\"o\">.</span><span class=\"n\">future</span><span class=\"o\">.</span><span class=\"n\">set_exception</span><span class=\"p\">(</span>\n                    <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">BrokenProcessPool</span><span class=\"p\">(</span>\n                        <span class=\"s2\">&quot;A process in the process pool was &quot;</span>\n                        <span class=\"s2\">&quot;terminated abruptly while the future was &quot;</span>\n                        <span class=\"s2\">&quot;running or pending.&quot;</span>\n                    <span class=\"p\">))</span>\n                <span class=\"c1\"># Delete references to object. See issue16284</span>\n                <span class=\"k\">del</span> <span class=\"n\">work_item</span>\n            <span class=\"n\">pending_work_items</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n            <span class=\"c1\"># Terminate remaining workers forcibly: the queues or their</span>\n            <span class=\"c1\"># locks may be in a dirty state and block forever.</span>\n            <span class=\"n\">_manager</span><span class=\"o\">.</span><span class=\"n\">terminate</span><span class=\"p\">()</span>\n            <span class=\"n\">shutdown_worker</span><span class=\"p\">()</span>\n            <span class=\"k\">return</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">result_item</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n            <span class=\"c1\"># Clean shutdown of a worker using its PID</span>\n            <span class=\"c1\"># (avoids marking the executor broken)</span>\n            <span class=\"k\">assert</span> <span class=\"n\">shutting_down</span><span class=\"p\">()</span>\n            <span class=\"n\">_manager</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">()</span>\n            <span class=\"k\">if</span> <span class=\"n\">_manager</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">shutdown_worker</span><span class=\"p\">()</span>\n                <span class=\"k\">return</span>\n        <span class=\"k\">elif</span> <span class=\"n\">result_item</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">work_item</span> <span class=\"o\">=</span> <span class=\"n\">pending_work_items</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"n\">result_item</span><span class=\"o\">.</span><span class=\"n\">work_id</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n            <span class=\"c1\"># work_item can be None if another process terminated (see above)</span>\n            <span class=\"k\">if</span> <span class=\"n\">work_item</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">result_item</span><span class=\"o\">.</span><span class=\"n\">exception</span><span class=\"p\">:</span>\n                    <span class=\"n\">work_item</span><span class=\"o\">.</span><span class=\"n\">future</span><span class=\"o\">.</span><span class=\"n\">set_exception</span><span class=\"p\">(</span><span class=\"n\">result_item</span><span class=\"o\">.</span><span class=\"n\">exception</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">work_item</span><span class=\"o\">.</span><span class=\"n\">future</span><span class=\"o\">.</span><span class=\"n\">set_result</span><span class=\"p\">(</span><span class=\"n\">result_item</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">)</span>\n                <span class=\"c1\"># Delete references to object. See issue16284</span>\n                <span class=\"k\">del</span> <span class=\"n\">work_item</span>\n        <span class=\"c1\"># Check whether we should start shutting down.</span>\n        <span class=\"n\">executor</span> <span class=\"o\">=</span> <span class=\"n\">executor_reference</span><span class=\"p\">()</span>\n        <span class=\"c1\"># No more work items can be added if:</span>\n        <span class=\"c1\">#   - The interpreter is shutting down OR</span>\n        <span class=\"c1\">#   - The executor that owns this worker has been collected OR</span>\n        <span class=\"c1\">#   - The executor that owns this worker has been shutdown.</span>\n        <span class=\"k\">if</span> <span class=\"n\">shutting_down</span><span class=\"p\">():</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Since no new work items can be added, it is safe to shutdown</span>\n                <span class=\"c1\"># this thread if there are no pending work items.</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">pending_work_items</span><span class=\"p\">:</span>\n                    <span class=\"n\">shutdown_worker</span><span class=\"p\">()</span>\n                    <span class=\"k\">return</span>\n            <span class=\"k\">except</span> <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">Full</span><span class=\"p\">:</span>\n                <span class=\"c1\"># This is not a problem: we will eventually be woken up (in</span>\n                <span class=\"c1\"># _result_queue.get()) and be able to send a sentinel again.</span>\n                <span class=\"k\">pass</span>\n        <span class=\"n\">executor</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n\n<div class=\"viewcode-block\" id=\"ProcessActorExecutor\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.web.futures_utils/#ibeis.web.futures_utils.process_actor.ProcessActorExecutor\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">ProcessActorExecutor</span><span class=\"p\">(</span><span class=\"n\">_base_actor</span><span class=\"o\">.</span><span class=\"n\">ActorExecutor</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">_ActorClass</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">_check_system_limits</span><span class=\"p\">()</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ActorClass</span> <span class=\"o\">=</span> <span class=\"n\">_ActorClass</span>\n        <span class=\"c1\"># todo: If we want to cancel futures we need to give the task_queue a</span>\n        <span class=\"c1\"># maximum size</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_call_queue</span> <span class=\"o\">=</span> <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">JoinableQueue</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_call_queue</span><span class=\"o\">.</span><span class=\"n\">_ignore_epipe</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_result_queue</span> <span class=\"o\">=</span> <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">Queue</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_work_ids</span> <span class=\"o\">=</span> <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">Queue</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_queue_management_thread</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n        <span class=\"c1\"># We only maintain one process for our actor</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_manager</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n        <span class=\"c1\"># Shutdown is a two-step process.</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_shutdown_thread</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_shutdown_lock</span> <span class=\"o\">=</span> <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Lock</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_broken</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_queue_count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pending_work_items</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_did_initialize</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">args</span> <span class=\"ow\">or</span> <span class=\"n\">kwargs</span><span class=\"p\">:</span>\n            <span class=\"c1\"># If given actor initialization args we must start the Actor</span>\n            <span class=\"c1\"># immediately. Otherwise just wait until we get a message</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Init with args&#39;</span><span class=\"p\">)</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;args = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">,))</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_initialize_actor</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"ProcessActorExecutor.post\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.web.futures_utils/#ibeis.web.futures_utils.process_actor.ProcessActorExecutor.post\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">post</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">):</span>\n        <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_shutdown_lock</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_broken</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">BrokenProcessPool</span><span class=\"p\">(</span>\n                    <span class=\"s1\">&#39;A child process terminated &#39;</span>\n                    <span class=\"s1\">&#39;abruptly, the process pool is not usable anymore&#39;</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_shutdown_thread</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">RuntimeError</span><span class=\"p\">(</span><span class=\"s1\">&#39;cannot schedule new futures after shutdown&#39;</span><span class=\"p\">)</span>\n\n            <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">_base</span><span class=\"o\">.</span><span class=\"n\">Future</span><span class=\"p\">()</span>\n            <span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"n\">_WorkItem</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">)</span>\n\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pending_work_items</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_queue_count</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">w</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_work_ids</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_queue_count</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_queue_count</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n            <span class=\"c1\"># Wake up queue management thread</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_result_queue</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_start_queue_management_thread</span><span class=\"p\">()</span>\n            <span class=\"k\">return</span> <span class=\"n\">f</span></div>\n    <span class=\"n\">post</span><span class=\"o\">.</span><span class=\"vm\">__doc__</span> <span class=\"o\">=</span> <span class=\"n\">_base_actor</span><span class=\"o\">.</span><span class=\"n\">ActorExecutor</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"o\">.</span><span class=\"vm\">__doc__</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_start_queue_management_thread</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># When the executor gets lost, the weakref callback will wake up</span>\n        <span class=\"c1\"># the queue management thread.</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">weakref_cb</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_result_queue</span><span class=\"p\">):</span>\n            <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_queue_management_thread</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Start the processes so that their sentinel are known.</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_initialize_actor</span><span class=\"p\">()</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_queue_management_thread</span> <span class=\"o\">=</span> <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Thread</span><span class=\"p\">(</span>\n                    <span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">_queue_management_worker</span><span class=\"p\">,</span>\n                    <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">weakref</span><span class=\"o\">.</span><span class=\"n\">ref</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">weakref_cb</span><span class=\"p\">),</span>\n                          <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_manager</span><span class=\"p\">,</span>\n                          <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pending_work_items</span><span class=\"p\">,</span>\n                          <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_work_ids</span><span class=\"p\">,</span>\n                          <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_call_queue</span><span class=\"p\">,</span>\n                          <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_result_queue</span><span class=\"p\">))</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_queue_management_thread</span><span class=\"o\">.</span><span class=\"n\">daemon</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_queue_management_thread</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n            <span class=\"c1\"># use structures already in futures as much as possible</span>\n            <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">_threads_queues</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_queue_management_thread</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_result_queue</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_initialize_actor</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_manager</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">assert</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_did_initialize</span> <span class=\"ow\">is</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s1\">&#39;only initialize actor once&#39;</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_did_initialize</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"c1\"># We only maintain one thread process for an actor</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_manager</span> <span class=\"o\">=</span> <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">Process</span><span class=\"p\">(</span>\n                    <span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">_process_actor_eventloop</span><span class=\"p\">,</span>\n                    <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_call_queue</span><span class=\"p\">,</span>\n                          <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_result_queue</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ActorClass</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">args</span><span class=\"p\">,</span>\n                    <span class=\"n\">kwargs</span><span class=\"o\">=</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_manager</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n\n<div class=\"viewcode-block\" id=\"ProcessActorExecutor.shutdown\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.web.futures_utils/#ibeis.web.futures_utils.process_actor.ProcessActorExecutor.shutdown\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">shutdown</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">wait</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_shutdown_lock</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_shutdown_thread</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_queue_management_thread</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Wake up queue management thread</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_result_queue</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">wait</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_queue_management_thread</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">()</span>\n        <span class=\"c1\"># To reduce the risk of opening too many files, remove references to</span>\n        <span class=\"c1\"># objects that use file descriptors.</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_queue_management_thread</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_call_queue</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_result_queue</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_manager</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></div>\n    <span class=\"n\">shutdown</span><span class=\"o\">.</span><span class=\"vm\">__doc__</span> <span class=\"o\">=</span> <span class=\"n\">_base</span><span class=\"o\">.</span><span class=\"n\">Executor</span><span class=\"o\">.</span><span class=\"n\">shutdown</span><span class=\"o\">.</span><span class=\"vm\">__doc__</span></div>\n\n\n<div class=\"viewcode-block\" id=\"ProcessActor\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.web.futures_utils/#ibeis.web.futures_utils.process_actor.ProcessActor\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">ProcessActor</span><span class=\"p\">(</span><span class=\"n\">_base_actor</span><span class=\"o\">.</span><span class=\"n\">Actor</span><span class=\"p\">):</span>\n\n<div class=\"viewcode-block\" id=\"ProcessActor.executor\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.web.futures_utils/#ibeis.web.futures_utils.process_actor.ProcessActor.executor\">[docs]</a>    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">executor</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">ProcessActorExecutor</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span></div></div>\n    <span class=\"c1\"># executor.__doc__ = _base_actor.Actor.executor.__doc___</span>\n\n<span class=\"c1\"># ProcessActor.__doc__ = _base_actor.Actor.__doc___</span>\n</pre></div>", "current_page_name": "_modules/ibeis/web/futures_utils/process_actor", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}