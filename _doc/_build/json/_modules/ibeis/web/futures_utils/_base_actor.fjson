{"parents": [{"link": "../../../../", "title": "Module code"}, {"link": "../../../", "title": "ibeis"}], "title": "ibeis.web.futures_utils._base_actor", "body": "<h1>Source code for ibeis.web.futures_utils._base_actor</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">TODO:</span>\n<span class=\"sd\">    Actors need to be able to reference each other.</span>\n<span class=\"sd\">        * this means we need to be able to pass a reference</span>\n<span class=\"sd\">          that can post a message to an actor&#39;s executor.</span>\n<span class=\"sd\">    Actors need to be able to create more actors.</span>\n<span class=\"sd\">        * This should be fairly simple if the first task is complete.</span>\n\n<span class=\"sd\">    Idea:</span>\n<span class=\"sd\">        maintain a list of weakreferences to all actor executors ever created</span>\n<span class=\"sd\">        in a thread. Actors must have a way of interacting with this thread.</span>\n\n<span class=\"sd\">&quot;&quot;&quot;</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">concurrent.futures</span> <span class=\"k\">import</span> <span class=\"n\">_base</span>\n\n\n<div class=\"viewcode-block\" id=\"ActorExecutor\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.web.futures_utils/#ibeis.web.futures_utils._base_actor.ActorExecutor\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">ActorExecutor</span><span class=\"p\">(</span><span class=\"n\">_base</span><span class=\"o\">.</span><span class=\"n\">Executor</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Executor to manage exactly one actor.</span>\n\n<span class=\"sd\">    This class lives in the main thread, manages a process containing exactly</span>\n<span class=\"sd\">    one Actor, and is used to send messages to that actor. Responses are</span>\n<span class=\"sd\">    returned in the form of a `Future` object.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n<div class=\"viewcode-block\" id=\"ActorExecutor.post\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.web.futures_utils/#ibeis.web.futures_utils._base_actor.ActorExecutor.post\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">post</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        analagous to _base.Executor.submit, but sends a message to the actor</span>\n<span class=\"sd\">        controlled by this Executor, and returns a Future.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span>\n            <span class=\"s1\">&#39;use ProcessActorExecutor or ThreadActorExecutor&#39;</span><span class=\"p\">)</span></div></div>\n\n\n<div class=\"viewcode-block\" id=\"Actor\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.web.futures_utils/#ibeis.web.futures_utils._base_actor.Actor\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Actor</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Base actor class.</span>\n\n<span class=\"sd\">    Actors receive messages, which are arbitrary objects from their managing</span>\n<span class=\"sd\">    executor.</span>\n\n<span class=\"sd\">    The main difference is that we expose an `Actor` class which can be</span>\n<span class=\"sd\">    inherited from and provides the `executor` classmethod. This creates an</span>\n<span class=\"sd\">    asynchronously maintained instance of this class in a separate</span>\n<span class=\"sd\">    thread/process</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; from concurrent.futures import ThreadActor</span>\n<span class=\"sd\">        &gt;&gt;&gt; class MyActor(ThreadActor):</span>\n<span class=\"sd\">        &gt;&gt;&gt;     def __init__(self):</span>\n<span class=\"sd\">        &gt;&gt;&gt;         self.state = 0</span>\n<span class=\"sd\">        &gt;&gt;&gt;     #</span>\n<span class=\"sd\">        &gt;&gt;&gt;     def handle(self, message):</span>\n<span class=\"sd\">        &gt;&gt;&gt;         self.state += message</span>\n<span class=\"sd\">        &gt;&gt;&gt;         return self.state</span>\n<span class=\"sd\">        &gt;&gt;&gt; #</span>\n<span class=\"sd\">        &gt;&gt;&gt; executor = MyActor.executor()</span>\n<span class=\"sd\">        &gt;&gt;&gt; f = executor.post(&#39;message&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(f.result())</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n<div class=\"viewcode-block\" id=\"Actor.executor\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.web.futures_utils/#ibeis.web.futures_utils._base_actor.Actor.executor\">[docs]</a>    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">executor</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Creates an asychronous instance of this Actor and returns the executor</span>\n<span class=\"sd\">        to manage it.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span><span class=\"s1\">&#39;use ProcessActor or ThreadActor&#39;</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Actor.handle\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.web.futures_utils/#ibeis.web.futures_utils._base_actor.Actor.handle\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">handle</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        This method recieves, handles, and responds to the messages sent from</span>\n<span class=\"sd\">        the executor. This function can return arbitrary values. These values</span>\n<span class=\"sd\">        can be accessed from the main thread using the Future object returned</span>\n<span class=\"sd\">        when the message was posted to this actor by the executor.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span><span class=\"s1\">&#39;must implement message handler&#39;</span><span class=\"p\">)</span></div></div>\n</pre></div>", "current_page_name": "_modules/ibeis/web/futures_utils/_base_actor", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}