{"parents": [{"link": "../../../", "title": "Module code"}, {"link": "../../", "title": "ibeis"}], "title": "ibeis.scripts._thesis_helpers", "body": "<h1>Source code for ibeis.scripts._thesis_helpers</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"k\">import</span> <span class=\"n\">absolute_import</span><span class=\"p\">,</span> <span class=\"n\">division</span><span class=\"p\">,</span> <span class=\"n\">print_function</span><span class=\"p\">,</span> <span class=\"n\">unicode_literals</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"kn\">from</span> <span class=\"nn\">os.path</span> <span class=\"k\">import</span> <span class=\"n\">basename</span><span class=\"p\">,</span> <span class=\"n\">join</span><span class=\"p\">,</span> <span class=\"n\">splitext</span><span class=\"p\">,</span> <span class=\"n\">exists</span><span class=\"p\">,</span> <span class=\"n\">isdir</span><span class=\"p\">,</span> <span class=\"n\">islink</span><span class=\"p\">,</span> <span class=\"n\">abspath</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">import</span> <span class=\"nn\">re</span>\n<span class=\"kn\">import</span> <span class=\"nn\">six</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib</span> <span class=\"k\">as</span> <span class=\"nn\">mpl</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.state</span> <span class=\"k\">import</span> <span class=\"n\">POSTV</span><span class=\"p\">,</span> <span class=\"n\">NEGTV</span><span class=\"p\">,</span> <span class=\"n\">INCMP</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"p\">(</span><span class=\"nb\">print</span><span class=\"p\">,</span> <span class=\"n\">rrr</span><span class=\"p\">,</span> <span class=\"n\">profile</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">inject2</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n<span class=\"n\">DPI</span> <span class=\"o\">=</span> <span class=\"mi\">300</span>\n\n<span class=\"c1\"># TMP_RC = {</span>\n<span class=\"c1\">#     &#39;axes.titlesize&#39;: 12,</span>\n<span class=\"c1\">#     &#39;axes.labelsize&#39;: 12,</span>\n<span class=\"c1\">#     &#39;font.family&#39;: &#39;DejaVu Sans&#39;,</span>\n<span class=\"c1\">#     &#39;xtick.labelsize&#39;: 12,</span>\n<span class=\"c1\">#     &#39;ytick.labelsize&#39;: 12,</span>\n<span class=\"c1\">#     # &#39;legend.fontsize&#39;: 18,</span>\n<span class=\"c1\">#     # &#39;legend.alpha&#39;: .8,</span>\n<span class=\"c1\">#     &#39;legend.fontsize&#39;: 12,</span>\n<span class=\"c1\">#     &#39;legend.facecolor&#39;: &#39;w&#39;,</span>\n<span class=\"c1\"># }</span>\n\n<span class=\"n\">TMP_RC</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">&#39;axes.titlesize&#39;</span><span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;axes.labelsize&#39;</span><span class=\"p\">:</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argval</span><span class=\"p\">(</span><span class=\"s1\">&#39;--labelsize&#39;</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mi\">12</span><span class=\"p\">),</span>\n    <span class=\"s1\">&#39;font.family&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;sans-serif&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;font.serif&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;CMU Serif&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;font.sans-serif&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;CMU Sans Serif&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;font.monospace&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;CMU Typewriter Text&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;xtick.labelsize&#39;</span><span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;ytick.labelsize&#39;</span><span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">,</span>\n    <span class=\"c1\"># &#39;legend.alpha&#39;: .8,</span>\n    <span class=\"s1\">&#39;legend.fontsize&#39;</span><span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;legend.facecolor&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;w&#39;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">W</span><span class=\"p\">,</span> <span class=\"n\">H</span> <span class=\"o\">=</span> <span class=\"mf\">7.4375</span><span class=\"p\">,</span> <span class=\"mf\">3.0</span>\n\n\n<div class=\"viewcode-block\" id=\"dbname_to_species_nice\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts._thesis_helpers.dbname_to_species_nice\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">dbname_to_species_nice</span><span class=\"p\">(</span><span class=\"n\">dbname</span><span class=\"p\">):</span>\n    <span class=\"n\">species_nice</span> <span class=\"o\">=</span> <span class=\"n\">dbname</span>\n    <span class=\"k\">if</span> <span class=\"s1\">&#39;GZ&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">dbname</span><span class=\"p\">:</span>\n        <span class=\"n\">species_nice</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Gr\u00e9vy&#39;s zebras&quot;</span>\n    <span class=\"k\">if</span> <span class=\"s1\">&#39;PZ&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">dbname</span><span class=\"p\">:</span>\n        <span class=\"n\">species_nice</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;plains zebras&quot;</span>\n    <span class=\"k\">if</span> <span class=\"s1\">&#39;GIRM&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">dbname</span><span class=\"p\">:</span>\n        <span class=\"n\">species_nice</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Masai giraffes&quot;</span>\n    <span class=\"k\">if</span> <span class=\"s1\">&#39;MantaMatcher&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">dbname</span><span class=\"p\">:</span>\n        <span class=\"n\">species_nice</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;manta rays&quot;</span>\n    <span class=\"k\">if</span> <span class=\"s1\">&#39;humpback&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">dbname</span><span class=\"p\">:</span>\n        <span class=\"n\">species_nice</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;humpbacks&quot;</span>\n        <span class=\"c1\"># species_nice = &quot;humpback whales&quot;</span>\n    <span class=\"k\">if</span> <span class=\"s1\">&#39;LF_ALL&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">dbname</span><span class=\"p\">:</span>\n        <span class=\"n\">species_nice</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;lionfish&quot;</span>\n    <span class=\"k\">if</span> <span class=\"s1\">&#39;RotanTurtles&#39;</span> <span class=\"o\">==</span> <span class=\"n\">dbname</span><span class=\"p\">:</span>\n        <span class=\"n\">species_nice</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;sea turtles&quot;</span>\n    <span class=\"k\">return</span> <span class=\"n\">species_nice</span></div>\n\n\n<div class=\"viewcode-block\" id=\"DBInputs\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts._thesis_helpers.DBInputs\">[docs]</a><span class=\"nd\">@ut</span><span class=\"o\">.</span><span class=\"n\">reloadable_class</span>\n<span class=\"k\">class</span> <span class=\"nc\">DBInputs</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">dbname</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">expt_results</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">if</span> <span class=\"n\">isdir</span><span class=\"p\">(</span><span class=\"n\">dbname</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">islink</span><span class=\"p\">(</span><span class=\"n\">dbname</span><span class=\"p\">):</span>\n            <span class=\"n\">dpath</span> <span class=\"o\">=</span> <span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"n\">dbname</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">dpath</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dbname</span> <span class=\"o\">=</span> <span class=\"n\">dbname</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dname</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dpath</span> <span class=\"o\">=</span> <span class=\"n\">dpath</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">species_nice</span> <span class=\"o\">=</span> <span class=\"n\">dbname_to_species_nice</span><span class=\"p\">(</span><span class=\"n\">dbname</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dpath</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">dbname</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dname</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dbname</span>\n\n            <span class=\"n\">link_dname</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argval</span><span class=\"p\">(</span><span class=\"s1\">&#39;--link&#39;</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">&#39;link&#39;</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dpath</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">base_dpath</span><span class=\"p\">,</span> <span class=\"n\">link_dname</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dname</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_setup_links</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">cfg_prefix</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Called only when setting up an experiment to make a measurement.</span>\n\n<span class=\"sd\">        Creates symlinks such that all data is written to a directory that</span>\n<span class=\"sd\">        depends on a computer name, cfg_prefix and an arbitrary configuration</span>\n<span class=\"sd\">        dict.</span>\n\n<span class=\"sd\">        Then force the link in the basic directory to point to abs_dpath.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># Setup directory</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">os.path</span> <span class=\"k\">import</span> <span class=\"n\">expanduser</span>\n        <span class=\"k\">assert</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dname</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span>\n\n        <span class=\"n\">computer_id</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argval</span><span class=\"p\">(</span><span class=\"s1\">&#39;--comp&#39;</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_computer_name</span><span class=\"p\">())</span>\n\n        <span class=\"n\">conf_dpath</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ensuredir</span><span class=\"p\">((</span><span class=\"n\">expanduser</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">base_dpath</span><span class=\"p\">),</span> <span class=\"s1\">&#39;configured&#39;</span><span class=\"p\">))</span>\n        <span class=\"n\">comp_dpath</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ensuredir</span><span class=\"p\">((</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">conf_dpath</span><span class=\"p\">,</span> <span class=\"n\">computer_id</span><span class=\"p\">)))</span>\n\n        <span class=\"n\">link_dpath</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ensuredir</span><span class=\"p\">((</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">base_dpath</span><span class=\"p\">,</span> <span class=\"s1\">&#39;link&#39;</span><span class=\"p\">))</span>\n\n        <span class=\"c1\"># if True:</span>\n        <span class=\"c1\">#     # move to new system</span>\n        <span class=\"c1\">#     old_dpath = join(conf_dpath, self.dbname + &#39;_&#39; + computer_id)</span>\n        <span class=\"c1\">#     if exists(old_dpath):</span>\n        <span class=\"c1\">#         ut.move(old_dpath, join(comp_dpath, self.dbname))</span>\n\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">cfgstr</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr3</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">getstate_todict_recursive</span><span class=\"p\">())</span>\n        <span class=\"k\">except</span> <span class=\"ne\">AttributeError</span><span class=\"p\">:</span>\n            <span class=\"n\">cfgstr</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr3</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">)</span>\n\n        <span class=\"n\">hashid</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">hash_data</span><span class=\"p\">(</span><span class=\"n\">cfgstr</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">6</span><span class=\"p\">]</span>\n        <span class=\"n\">suffix</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;_&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"n\">cfg_prefix</span><span class=\"p\">,</span> <span class=\"n\">hashid</span><span class=\"p\">])</span>\n        <span class=\"n\">dbcode</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dbname</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;_&#39;</span> <span class=\"o\">+</span> <span class=\"n\">suffix</span>\n\n        <span class=\"n\">abs_dpath</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ensuredir</span><span class=\"p\">(</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">comp_dpath</span><span class=\"p\">,</span> <span class=\"n\">dbcode</span><span class=\"p\">))</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dname</span> <span class=\"o\">=</span> <span class=\"n\">dbcode</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dpath</span> <span class=\"o\">=</span> <span class=\"n\">abs_dpath</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">abs_dpath</span> <span class=\"o\">=</span> <span class=\"n\">abs_dpath</span>\n\n        <span class=\"c1\"># Place a basic link in the base link directory</span>\n        <span class=\"n\">links</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">links</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">expanduser</span><span class=\"p\">(</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">link_dpath</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dbname</span><span class=\"p\">)))</span>\n        <span class=\"c1\"># # Make a configured but computer agnostic link</span>\n        <span class=\"c1\"># links.append(expanduser(join(conf_dpath, self.dbname)))</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">link</span> <span class=\"ow\">in</span> <span class=\"n\">links</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Overwrite any existing link so the most recently used is</span>\n                <span class=\"c1\"># the default</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">link</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">symlink</span><span class=\"p\">(</span><span class=\"n\">abs_dpath</span><span class=\"p\">,</span> <span class=\"n\">link</span><span class=\"p\">,</span> <span class=\"n\">overwrite</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"ne\">Exception</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">abs_dpath</span><span class=\"p\">):</span>\n                    <span class=\"n\">newpath</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">non_existing_path</span><span class=\"p\">(</span><span class=\"n\">abs_dpath</span><span class=\"p\">,</span> <span class=\"n\">suffix</span><span class=\"o\">=</span><span class=\"s1\">&#39;_old&#39;</span><span class=\"p\">)</span>\n                    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">link</span><span class=\"p\">,</span> <span class=\"n\">newpath</span><span class=\"p\">)</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">link</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">symlink</span><span class=\"p\">(</span><span class=\"n\">abs_dpath</span><span class=\"p\">,</span> <span class=\"n\">link</span><span class=\"p\">)</span>\n\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">writeto</span><span class=\"p\">(</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">abs_dpath</span><span class=\"p\">,</span> <span class=\"s1\">&#39;info.txt&#39;</span><span class=\"p\">),</span> <span class=\"n\">cfgstr</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"DBInputs.ensure_setup\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts._thesis_helpers.DBInputs.ensure_setup\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">ensure_setup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ibs</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_setup</span><span class=\"p\">()</span></div>\n\n<div class=\"viewcode-block\" id=\"DBInputs.ensure_results\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts._thesis_helpers.DBInputs.ensure_results\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">ensure_results</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">expt_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">nocompute</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Subclasses must obey the measure_&lt;expt_name&gt;, draw_&lt;expt_name&gt; contract</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">nocompute</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">nocompute</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argflag</span><span class=\"p\">(</span><span class=\"s1\">&#39;--nocompute&#39;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">expt_name</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dpath</span><span class=\"p\">):</span>\n            <span class=\"c1\"># Load all</span>\n            <span class=\"n\">fpaths</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">glob</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dpath</span><span class=\"p\">),</span> <span class=\"s1\">&#39;*.pkl&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">expt_names</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">splitext</span><span class=\"p\">(</span><span class=\"n\">basename</span><span class=\"p\">(</span><span class=\"n\">fpath</span><span class=\"p\">))[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">fpath</span> <span class=\"ow\">in</span> <span class=\"n\">fpaths</span><span class=\"p\">]</span>\n            <span class=\"k\">for</span> <span class=\"n\">fpath</span><span class=\"p\">,</span> <span class=\"n\">expt_name</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">fpaths</span><span class=\"p\">,</span> <span class=\"n\">expt_names</span><span class=\"p\">):</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">expt_results</span><span class=\"p\">[</span><span class=\"n\">expt_name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">load_data</span><span class=\"p\">(</span><span class=\"n\">fpath</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># expt_name = splitext(basename(fpath))[0]</span>\n            <span class=\"n\">fpath</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dpath</span><span class=\"p\">),</span> <span class=\"n\">expt_name</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;.pkl&#39;</span><span class=\"p\">)</span>\n            <span class=\"c1\"># fpath = ut.truepath(fpath)</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">fpath</span><span class=\"p\">):</span>\n                <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">cprint</span><span class=\"p\">(</span><span class=\"s1\">&#39;Experiment results </span><span class=\"si\">{}</span><span class=\"s1\"> do not exist&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">expt_name</span><span class=\"p\">),</span> <span class=\"s1\">&#39;red&#39;</span><span class=\"p\">)</span>\n                <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">cprint</span><span class=\"p\">(</span><span class=\"s1\">&#39;First re-setup to check if it is a path issue&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;red&#39;</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">nocompute</span><span class=\"p\">:</span>\n                    <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">expt_name</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s1\">&#39; does not exist for &#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dbname</span><span class=\"p\">))</span>\n\n                <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ibs</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_precollect</span><span class=\"p\">()</span>\n                <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">cprint</span><span class=\"p\">(</span><span class=\"s1\">&#39;Checking new fpath&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;yellow&#39;</span><span class=\"p\">)</span>\n                <span class=\"n\">fpath</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dpath</span><span class=\"p\">),</span> <span class=\"n\">expt_name</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;.pkl&#39;</span><span class=\"p\">)</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;fpath = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">fpath</span><span class=\"p\">,))</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">fpath</span><span class=\"p\">):</span>\n                    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">cprint</span><span class=\"p\">(</span><span class=\"s1\">&#39;Results still missing need to re-measure&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;red&#39;</span><span class=\"p\">)</span>\n                    <span class=\"c1\"># assert False</span>\n                    <span class=\"c1\"># self._setup()</span>\n                    <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"s1\">&#39;measure_&#39;</span> <span class=\"o\">+</span> <span class=\"n\">expt_name</span><span class=\"p\">)()</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">cprint</span><span class=\"p\">(</span><span class=\"s1\">&#39;Re-setup fixed it&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;gren&#39;</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Experiment results </span><span class=\"si\">{}</span><span class=\"s1\"> exist&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">expt_name</span><span class=\"p\">))</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">expt_results</span><span class=\"p\">[</span><span class=\"n\">expt_name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">load_data</span><span class=\"p\">(</span><span class=\"n\">fpath</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">expt_results</span><span class=\"p\">[</span><span class=\"n\">expt_name</span><span class=\"p\">]</span></div>\n\n<div class=\"viewcode-block\" id=\"DBInputs.measure\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts._thesis_helpers.DBInputs.measure\">[docs]</a>    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">measure</span><span class=\"p\">(</span><span class=\"n\">ChapX</span><span class=\"p\">,</span> <span class=\"n\">expt_name</span><span class=\"p\">,</span> <span class=\"n\">dbnames</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        CommandLine:</span>\n<span class=\"sd\">            python -m ibeis Chap3.measure all --dbs=GZ_Master1</span>\n<span class=\"sd\">            python -m ibeis Chap3.measure all --dbs=PZ_Master1</span>\n\n<span class=\"sd\">            python -m ibeis Chap3.measure nsum --dbs=GZ_Master1,PZ_Master1</span>\n<span class=\"sd\">            python -m ibeis Chap3.measure foregroundness --dbs=GZ_Master1,PZ_Master1</span>\n\n<span class=\"sd\">        # Example:</span>\n<span class=\"sd\">        #     &gt;&gt;&gt; # Script</span>\n<span class=\"sd\">        #     &gt;&gt;&gt; from ibeis.scripts.thesis import *  # NOQA</span>\n<span class=\"sd\">        #     &gt;&gt;&gt; expt_name = ut.get_argval(&#39;--expt&#39;, type_=str, pos=1)</span>\n<span class=\"sd\">        #     &gt;&gt;&gt; dbnames = ut.get_argval((&#39;--dbs&#39;, &#39;--db&#39;), type_=list, default=[])</span>\n<span class=\"sd\">        #     &gt;&gt;&gt; ChapX.measure(expt_name, dbnames)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;expt_name = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">expt_name</span><span class=\"p\">,))</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;dbnames = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">dbnames</span><span class=\"p\">,))</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;args = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">,))</span>\n        <span class=\"n\">dbnames</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">smart_cast</span><span class=\"p\">(</span><span class=\"n\">dbnames</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">dbname</span> <span class=\"ow\">in</span> <span class=\"n\">dbnames</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span> <span class=\"o\">=</span> <span class=\"n\">ChapX</span><span class=\"p\">(</span><span class=\"n\">dbname</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">expt_name</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;all&#39;</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ibs</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_setup</span><span class=\"p\">()</span>\n                    <span class=\"c1\"># self._precollect()</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">measure_all</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"s1\">&#39;measure_&#39;</span> <span class=\"o\">+</span> <span class=\"n\">expt_name</span><span class=\"p\">)(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">dbnames</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span></div>\n\n<div class=\"viewcode-block\" id=\"DBInputs.draw\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts._thesis_helpers.DBInputs.draw\">[docs]</a>    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">draw</span><span class=\"p\">(</span><span class=\"n\">ChapX</span><span class=\"p\">,</span> <span class=\"n\">expt_name</span><span class=\"p\">,</span> <span class=\"n\">dbnames</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        CommandLine:</span>\n<span class=\"sd\">            python -m ibeis Chap3.draw nsum --dbs=GZ_Master1,PZ_Master1</span>\n<span class=\"sd\">            python -m ibeis Chap3.draw foregroundness --dbs=GZ_Master1,PZ_Master1 --diskshow</span>\n<span class=\"sd\">            python -m ibeis Chap3.draw kexpt --dbs=GZ_Master1 --diskshow</span>\n\n<span class=\"sd\">            python -m ibeis Chap4.draw importance GZ_Master1</span>\n\n<span class=\"sd\">            python -m ibeis Chap4.draw hard_cases GZ_Master1,PZ_Master1 match_state,photobomb_state</span>\n<span class=\"sd\">            --diskshow</span>\n\n<span class=\"sd\">        # Example:</span>\n<span class=\"sd\">        #     &gt;&gt;&gt; # Script</span>\n<span class=\"sd\">        #     &gt;&gt;&gt; from ibeis.scripts.thesis import *  # NOQA</span>\n<span class=\"sd\">        #     &gt;&gt;&gt; expt_name = ut.get_argval(&#39;--expt&#39;, type_=str, pos=1)</span>\n<span class=\"sd\">        #     &gt;&gt;&gt; dbnames = ut.get_argval((&#39;--dbs&#39;, &#39;--db&#39;), type_=list, default=[])</span>\n<span class=\"sd\">        #     &gt;&gt;&gt; Chap3.draw(expt_name, dbnames)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;expt_name = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">expt_name</span><span class=\"p\">,))</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;dbnames = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">dbnames</span><span class=\"p\">,))</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;args = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">,))</span>\n        <span class=\"n\">dbnames</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">smart_cast</span><span class=\"p\">(</span><span class=\"n\">dbnames</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">dbnames</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"c1\"># parallelize drawing tasks</span>\n            <span class=\"kn\">from</span> <span class=\"nn\">concurrent</span> <span class=\"k\">import</span> <span class=\"n\">futures</span>\n            <span class=\"n\">multi_args</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">smart_cast</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">a</span> <span class=\"ow\">in</span> <span class=\"n\">args</span><span class=\"p\">]</span>\n            <span class=\"k\">with</span> <span class=\"n\">futures</span><span class=\"o\">.</span><span class=\"n\">ProcessPoolExecutor</span><span class=\"p\">(</span><span class=\"n\">max_workers</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">executor</span><span class=\"p\">:</span>\n                <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">futures</span><span class=\"o\">.</span><span class=\"n\">as_completed</span><span class=\"p\">([</span>\n                    <span class=\"n\">executor</span><span class=\"o\">.</span><span class=\"n\">submit</span><span class=\"p\">(</span><span class=\"n\">ChapX</span><span class=\"o\">.</span><span class=\"n\">draw_serial</span><span class=\"p\">,</span> <span class=\"n\">expt_name</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">fsargs</span><span class=\"p\">)</span>\n                    <span class=\"k\">for</span> <span class=\"n\">fsargs</span> <span class=\"ow\">in</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">product</span><span class=\"p\">(</span><span class=\"n\">dbnames</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">multi_args</span><span class=\"p\">)</span>\n                <span class=\"p\">]))</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n\\n</span><span class=\"s1\"> Completed multiple tasks&#39;</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">ChapX</span><span class=\"o\">.</span><span class=\"n\">draw_serial</span><span class=\"p\">(</span><span class=\"n\">expt_name</span><span class=\"p\">,</span> <span class=\"n\">dbnames</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"DBInputs.draw_serial\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts._thesis_helpers.DBInputs.draw_serial\">[docs]</a>    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">draw_serial</span><span class=\"p\">(</span><span class=\"n\">ChapX</span><span class=\"p\">,</span> <span class=\"n\">expt_name</span><span class=\"p\">,</span> <span class=\"n\">dbnames</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n        <span class=\"n\">dbnames</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">smart_cast</span><span class=\"p\">(</span><span class=\"n\">dbnames</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">)</span>\n        <span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">rcParams</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">TMP_RC</span><span class=\"p\">)</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">dbname</span> <span class=\"ow\">in</span> <span class=\"n\">dbnames</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span> <span class=\"o\">=</span> <span class=\"n\">ChapX</span><span class=\"p\">(</span><span class=\"n\">dbname</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">expt_name</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;all&#39;</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">draw_all</span><span class=\"p\">()</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">draw_func</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"s1\">&#39;draw_&#39;</span> <span class=\"o\">+</span> <span class=\"n\">expt_name</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">draw_func</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                    <span class=\"n\">draw_func</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"s1\">&#39;write_&#39;</span> <span class=\"o\">+</span> <span class=\"n\">expt_name</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">draw_func</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                    <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s1\">&#39;Cannot find a way to draw &#39;</span> <span class=\"o\">+</span> <span class=\"n\">expt_name</span><span class=\"p\">)</span>\n                <span class=\"n\">fpath</span> <span class=\"o\">=</span> <span class=\"n\">draw_func</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argflag</span><span class=\"p\">(</span><span class=\"s1\">&#39;--diskshow&#39;</span><span class=\"p\">):</span>\n                    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">fpath</span><span class=\"p\">,</span> <span class=\"n\">six</span><span class=\"o\">.</span><span class=\"n\">text_type</span><span class=\"p\">):</span>\n                        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">startfile</span><span class=\"p\">(</span><span class=\"n\">fpath</span><span class=\"p\">)</span>\n                    <span class=\"k\">elif</span> <span class=\"n\">fpath</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                        <span class=\"n\">fpath_list</span> <span class=\"o\">=</span> <span class=\"n\">fpath</span>\n                        <span class=\"k\">for</span> <span class=\"n\">fpath</span> <span class=\"ow\">in</span> <span class=\"n\">fpath_list</span><span class=\"p\">:</span>\n                            <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">startfile</span><span class=\"p\">(</span><span class=\"n\">fpath</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"DBInputs.vd\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts._thesis_helpers.DBInputs.vd\">[docs]</a>    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">vd</span><span class=\"p\">(</span><span class=\"n\">ChapX</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        CommandLine:</span>\n<span class=\"sd\">            python -m ibeis Chap3.vd</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">vd</span><span class=\"p\">(</span><span class=\"n\">ChapX</span><span class=\"o\">.</span><span class=\"n\">base_dpath</span><span class=\"p\">)</span></div>\n\n    <span class=\"nd\">@profile</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_precollect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Sets up an ibs object with an aids_pool</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.scripts.thesis import *</span>\n<span class=\"sd\">            &gt;&gt;&gt; self = Chap3(&#39;humpbacks_fb&#39;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; self = Chap3(&#39;GZ_Master1&#39;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; self = Chap3(&#39;GIRM_Master1&#39;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; self = Chap3(&#39;PZ_MTEST&#39;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; self = Chap3(&#39;PZ_PB_RF_TRAIN&#39;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; self = Chap3(&#39;PZ_Master1&#39;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; self = Chap3(&#39;RotanTurtles&#39;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; self._precollect()</span>\n\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.scripts.thesis import *</span>\n<span class=\"sd\">            &gt;&gt;&gt; self = Chap4(&#39;PZ_Master1&#39;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; self._precollect()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">ibeis</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">ibeis.init</span> <span class=\"k\">import</span> <span class=\"n\">main_helpers</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dbdir</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">sysres</span><span class=\"o\">.</span><span class=\"n\">lookup_dbdir</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dbname</span><span class=\"p\">)</span>\n        <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">opendb</span><span class=\"p\">(</span><span class=\"n\">dbdir</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dbdir</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">dbname</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">&#39;PZ_PB_RF_TRAIN&#39;</span><span class=\"p\">):</span>\n            <span class=\"n\">aids</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_aids</span><span class=\"p\">()</span>\n        <span class=\"k\">elif</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">dbname</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">&#39;LF_ALL&#39;</span><span class=\"p\">):</span>\n            <span class=\"n\">aids</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_aids</span><span class=\"p\">()</span>\n        <span class=\"k\">elif</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">dbname</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">&#39;PZ_Master&#39;</span><span class=\"p\">):</span>\n            <span class=\"c1\"># PZ_Master is too big to run in full.  Select a smaller sample.</span>\n            <span class=\"c1\"># Be sure to include photobomb and incomparable cases.</span>\n            <span class=\"n\">aids</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">filter_annots_general</span><span class=\"p\">(</span>\n                <span class=\"n\">require_timestamp</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">species</span><span class=\"o\">=</span><span class=\"s1\">&#39;primary&#39;</span><span class=\"p\">,</span> <span class=\"n\">is_known</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                <span class=\"n\">minqual</span><span class=\"o\">=</span><span class=\"s1\">&#39;poor&#39;</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">AnnotInference</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">=</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"o\">=</span><span class=\"n\">aids</span><span class=\"p\">)</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">reset_feedback</span><span class=\"p\">(</span><span class=\"s1\">&#39;staging&#39;</span><span class=\"p\">,</span> <span class=\"n\">apply</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"n\">minority_ccs</span> <span class=\"o\">=</span> <span class=\"n\">find_minority_class_ccs</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">)</span>\n            <span class=\"n\">minority_aids</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">minority_ccs</span><span class=\"p\">))</span>\n\n            <span class=\"c1\"># We need to do our best to select a small sample here</span>\n            <span class=\"n\">flags</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;left&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">text</span> <span class=\"k\">for</span> <span class=\"n\">text</span> <span class=\"ow\">in</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">annots</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">viewpoint_code</span><span class=\"p\">]</span>\n            <span class=\"n\">left_aids</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"n\">flags</span><span class=\"p\">)</span>\n\n            <span class=\"n\">majority_aids</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">filter_annots_general</span><span class=\"p\">(</span>\n                <span class=\"n\">left_aids</span><span class=\"p\">,</span> <span class=\"n\">require_timestamp</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">species</span><span class=\"o\">=</span><span class=\"s1\">&#39;primary&#39;</span><span class=\"p\">,</span>\n                <span class=\"n\">minqual</span><span class=\"o\">=</span><span class=\"s1\">&#39;poor&#39;</span><span class=\"p\">,</span> <span class=\"n\">require_quality</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">min_pername</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n                <span class=\"n\">max_pername</span><span class=\"o\">=</span><span class=\"mi\">15</span>\n            <span class=\"p\">))</span>\n            <span class=\"c1\"># This produces 5720 annotations</span>\n            <span class=\"n\">aids</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">majority_aids</span><span class=\"o\">.</span><span class=\"n\">union</span><span class=\"p\">(</span><span class=\"n\">minority_aids</span><span class=\"p\">))</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">aids</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">filter_annots_general</span><span class=\"p\">(</span><span class=\"n\">require_timestamp</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                                             <span class=\"n\">is_known</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                                             <span class=\"n\">species</span><span class=\"o\">=</span><span class=\"s1\">&#39;primary&#39;</span><span class=\"p\">,</span>\n                                             <span class=\"n\">minqual</span><span class=\"o\">=</span><span class=\"s1\">&#39;poor&#39;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">dbname</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">&#39;MantaMatcher&#39;</span><span class=\"p\">):</span>\n            <span class=\"c1\"># Remove some of the singletons for this db</span>\n            <span class=\"n\">annots</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">annots</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">)</span>\n            <span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"n\">annots</span><span class=\"o\">.</span><span class=\"n\">group2</span><span class=\"p\">(</span><span class=\"n\">annots</span><span class=\"o\">.</span><span class=\"n\">nids</span><span class=\"p\">)</span>\n            <span class=\"n\">multis</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">aids</span> <span class=\"k\">for</span> <span class=\"n\">aids</span> <span class=\"ow\">in</span> <span class=\"n\">names</span> <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"n\">singles</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">aids</span> <span class=\"k\">for</span> <span class=\"n\">aids</span> <span class=\"ow\">in</span> <span class=\"n\">names</span> <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"n\">rng</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">RandomState</span><span class=\"p\">(</span><span class=\"mi\">3988708794</span><span class=\"p\">)</span>\n            <span class=\"n\">aids</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">multis</span><span class=\"p\">)</span>\n            <span class=\"n\">aids</span> <span class=\"o\">+=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">shuffle</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">singles</span><span class=\"p\">),</span> <span class=\"n\">rng</span><span class=\"o\">=</span><span class=\"n\">rng</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">358</span><span class=\"p\">]</span>\n\n        <span class=\"c1\"># ibs.print_annot_stats(aids, prefix=&#39;P&#39;)</span>\n        <span class=\"n\">main_helpers</span><span class=\"o\">.</span><span class=\"n\">monkeypatch_encounters</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"n\">minutes</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;post monkey patch&#39;</span><span class=\"p\">)</span>\n        <span class=\"c1\"># if False:</span>\n        <span class=\"c1\">#     ibs.print_annot_stats(aids, prefix=&#39;P&#39;)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">aids_pool</span> <span class=\"o\">=</span> <span class=\"n\">aids</span></div>\n\n        <span class=\"c1\"># if False:</span>\n        <span class=\"c1\">#     # check encounter stats</span>\n        <span class=\"c1\">#     annots = ibs.annots(aids)</span>\n        <span class=\"c1\">#     encounters = annots.group(annots.encounter_text)[1]</span>\n        <span class=\"c1\">#     nids = ut.take_column(ibs._annot_groups(encounters).nids, 0)</span>\n        <span class=\"c1\">#     nid_to_enc = ut.group_items(encounters, nids)</span>\n        <span class=\"c1\">#     nenc_list = ut.lmap(len, nid_to_enc.values())</span>\n        <span class=\"c1\">#     hist = ut.range_hist(nenc_list, [1, 2, 3, (4, np.inf)])</span>\n        <span class=\"c1\">#     print(&#39;enc per name hist:&#39;)</span>\n        <span class=\"c1\">#     print(ut.repr2(hist))</span>\n\n        <span class=\"c1\">#     # singletons = [a for a in encounters if len(a) == 1]</span>\n        <span class=\"c1\">#     multitons = [a for a in encounters if len(a) &gt; 1]</span>\n        <span class=\"c1\">#     deltas = []</span>\n        <span class=\"c1\">#     for a in multitons:</span>\n        <span class=\"c1\">#         times = a.image_unixtimes_asfloat</span>\n        <span class=\"c1\">#         deltas.append(max(times) - min(times))</span>\n        <span class=\"c1\">#     ut.lmap(ut.get_posix_timedelta_str, sorted(deltas))</span>\n\n\n<div class=\"viewcode-block\" id=\"find_minority_class_ccs\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts._thesis_helpers.find_minority_class_ccs\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">find_minority_class_ccs</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Finds ccs involved in photobombs and incomparble cases</span>\n    <span class=\"n\">pb_edges</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">edge</span> <span class=\"k\">for</span> <span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">tags</span> <span class=\"ow\">in</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">gen_edge_attrs</span><span class=\"p\">(</span><span class=\"s1\">&#39;tags&#39;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"s1\">&#39;photobomb&#39;</span><span class=\"ow\">in</span> <span class=\"n\">tags</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">incomp_edges</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">incomp_graph</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">())</span>\n    <span class=\"n\">minority_edges</span> <span class=\"o\">=</span> <span class=\"n\">pb_edges</span> <span class=\"o\">+</span> <span class=\"n\">incomp_edges</span>\n    <span class=\"n\">minority_nids</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">node_labels</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">minority_edges</span><span class=\"p\">))))</span>\n    <span class=\"n\">minority_ccs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">_ccs</span><span class=\"p\">[</span><span class=\"n\">nid</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">nid</span> <span class=\"ow\">in</span> <span class=\"n\">minority_nids</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">minority_ccs</span></div>\n\n\n<div class=\"viewcode-block\" id=\"test_mcc\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts._thesis_helpers.test_mcc\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">test_mcc</span><span class=\"p\">():</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">plottool</span> <span class=\"k\">as</span> <span class=\"nn\">pt</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">sklearn.metrics</span>\n    <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n    <span class=\"n\">xdata</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">num</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"n\">ydata</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">num</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">xdata</span><span class=\"p\">,</span> <span class=\"n\">ydata</span><span class=\"p\">,</span> <span class=\"s1\">&#39;--k&#39;</span><span class=\"p\">,</span>\n                <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">&#39;linear&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"n\">y_true</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">num</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">num</span>\n    <span class=\"n\">y_pred</span> <span class=\"o\">=</span> <span class=\"n\">y_true</span><span class=\"p\">[:]</span>\n    <span class=\"n\">xs</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">y_true</span><span class=\"p\">)):</span>\n        <span class=\"n\">y_pred</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">y_pred</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">i</span><span class=\"p\">]</span>\n        <span class=\"n\">xs</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">sklearn</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">matthews_corrcoef</span><span class=\"p\">(</span><span class=\"n\">y_true</span><span class=\"p\">,</span> <span class=\"n\">y_pred</span><span class=\"p\">))</span>\n\n    <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">xdata</span><span class=\"p\">,</span> <span class=\"n\">xs</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">&#39;change one class at a time&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"n\">y_true</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">num</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">num</span><span class=\"p\">))</span>\n    <span class=\"n\">y_pred</span> <span class=\"o\">=</span> <span class=\"n\">y_true</span><span class=\"p\">[:]</span>\n    <span class=\"n\">xs</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">y_true</span><span class=\"p\">)):</span>\n        <span class=\"n\">y_pred</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">y_pred</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">i</span><span class=\"p\">]</span>\n        <span class=\"n\">xs</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">sklearn</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">matthews_corrcoef</span><span class=\"p\">(</span><span class=\"n\">y_true</span><span class=\"p\">,</span> <span class=\"n\">y_pred</span><span class=\"p\">))</span>\n\n    <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">xdata</span><span class=\"p\">,</span> <span class=\"n\">xs</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">&#39;change classes evenly&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">gca</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">legend</span><span class=\"p\">()</span></div>\n\n\n<div class=\"viewcode-block\" id=\"ExpandingSample\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts._thesis_helpers.ExpandingSample\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">ExpandingSample</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">NiceRepr</span><span class=\"p\">):</span>\n\n        <span class=\"c1\">#         nid = enc.nids[0]</span>\n        <span class=\"c1\">#         if len(nid_to_splits[nid]) == 0:</span>\n        <span class=\"c1\">#             chosen = pyrng.sample(enc.aids, min(len(enc), 2))</span>\n        <span class=\"c1\">#             nid_to_splits[nid].extend(chosen)</span>\n\n        <span class=\"c1\">#     qaids = []</span>\n        <span class=\"c1\">#     dname_encs = []</span>\n        <span class=\"c1\">#     confusor_pool = []</span>\n        <span class=\"c1\">#     for nid, aids_ in nid_to_splits.items():</span>\n        <span class=\"c1\">#         if len(aids_) &lt; 2:</span>\n        <span class=\"c1\">#             confusor_pool.extend(aids_)</span>\n        <span class=\"c1\">#         else:</span>\n        <span class=\"c1\">#             pyrng.shuffle(aids_)</span>\n        <span class=\"c1\">#             qaids.append(aids_[0])</span>\n        <span class=\"c1\">#             dname_encs.append([[aids_[1]]])</span>\n        <span class=\"c1\">#     confusor_pool = ut.shuffle(confusor_pool, rng=0)</span>\n        <span class=\"c1\">#     self = ExpandingSample(qaids, dname_encs, confusor_pool)</span>\n        <span class=\"c1\">#     query_samples.append(self)</span>\n        <span class=\"c1\"># return query_samples</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"p\">,</span> <span class=\"n\">qaids</span><span class=\"p\">,</span> <span class=\"n\">dname_encs</span><span class=\"p\">,</span> <span class=\"n\">confusor_pool</span><span class=\"p\">):</span>\n        <span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">qaids</span> <span class=\"o\">=</span> <span class=\"n\">qaids</span>\n        <span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">dname_encs</span> <span class=\"o\">=</span> <span class=\"n\">dname_encs</span>\n        <span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">confusor_pool</span> <span class=\"o\">=</span> <span class=\"n\">confusor_pool</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__nice__</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"p\">):</span>\n        <span class=\"n\">denc_pername</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">lmap</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">,</span> <span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">dname_encs</span><span class=\"p\">)</span>\n        <span class=\"n\">n_denc_pername</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">denc_pername</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"s1\">&#39;nQaids=</span><span class=\"si\">{}</span><span class=\"s1\">, nDEncPerName=</span><span class=\"si\">{}</span><span class=\"s1\">, nConfu=</span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n            <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">qaids</span><span class=\"p\">),</span> <span class=\"n\">n_denc_pername</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">confusor_pool</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"ExpandingSample.expand\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts._thesis_helpers.ExpandingSample.expand\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">expand</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"p\">,</span> <span class=\"n\">denc_per_name</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">extra_dbsize_fracs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]):</span>\n        <span class=\"c1\"># Vary the number of database encounters in each sample</span>\n        <span class=\"n\">target_daids_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">target_info_list_</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">num</span> <span class=\"ow\">in</span> <span class=\"n\">denc_per_name</span><span class=\"p\">:</span>\n            <span class=\"n\">dname_encs_</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take_column</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">dname_encs</span><span class=\"p\">,</span> <span class=\"nb\">slice</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">num</span><span class=\"p\">))</span>\n            <span class=\"n\">dnames_</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">lmap</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">,</span> <span class=\"n\">dname_encs_</span><span class=\"p\">)</span>\n            <span class=\"n\">daids_</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">total_flatten</span><span class=\"p\">(</span><span class=\"n\">dname_encs_</span><span class=\"p\">)</span>\n            <span class=\"n\">target_daids_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">daids_</span><span class=\"p\">)</span>\n            <span class=\"n\">name_lens</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">lmap</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">,</span> <span class=\"n\">dnames_</span><span class=\"p\">)</span>\n            <span class=\"n\">dpername</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">name_lens</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">allsame</span><span class=\"p\">(</span><span class=\"n\">name_lens</span><span class=\"p\">)</span> <span class=\"k\">else</span>\n                        <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">name_lens</span><span class=\"p\">))</span>\n            <span class=\"n\">target_info_list_</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">odict</span><span class=\"p\">([</span>\n                <span class=\"p\">(</span><span class=\"s1\">&#39;qsize&#39;</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">qaids</span><span class=\"p\">)),</span>\n                <span class=\"p\">(</span><span class=\"s1\">&#39;t_n_names&#39;</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">dname_encs_</span><span class=\"p\">)),</span>\n                <span class=\"p\">(</span><span class=\"s1\">&#39;t_dpername&#39;</span><span class=\"p\">,</span> <span class=\"n\">dpername</span><span class=\"p\">),</span>\n                <span class=\"p\">(</span><span class=\"s1\">&#39;t_denc_pername&#39;</span><span class=\"p\">,</span> <span class=\"n\">num</span><span class=\"p\">),</span>\n                <span class=\"p\">(</span><span class=\"s1\">&#39;t_dsize&#39;</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">daids_</span><span class=\"p\">)),</span>\n            <span class=\"p\">]))</span>\n\n        <span class=\"c1\"># Append confusors to maintain a constant dbsize in each base sample</span>\n        <span class=\"n\">dbsize_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">lmap</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">,</span> <span class=\"n\">target_daids_list</span><span class=\"p\">)</span>\n        <span class=\"n\">max_dsize</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">dbsize_list</span><span class=\"p\">)</span>\n        <span class=\"n\">n_need</span> <span class=\"o\">=</span> <span class=\"n\">max_dsize</span> <span class=\"o\">-</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">dbsize_list</span><span class=\"p\">)</span>\n        <span class=\"n\">n_extra_avail</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">confusor_pool</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">n_need</span>\n        <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">confusor_pool</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"n\">n_need</span><span class=\"p\">,</span> <span class=\"s1\">&#39;not enough confusors&#39;</span>\n        <span class=\"n\">padded_daids_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">padded_info_list_</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">daids_</span><span class=\"p\">,</span> <span class=\"n\">info_</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">target_daids_list</span><span class=\"p\">,</span> <span class=\"n\">target_info_list_</span><span class=\"p\">):</span>\n            <span class=\"n\">num_take</span> <span class=\"o\">=</span> <span class=\"n\">max_dsize</span> <span class=\"o\">-</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">daids_</span><span class=\"p\">)</span>\n            <span class=\"n\">pad_aids</span> <span class=\"o\">=</span> <span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">confusor_pool</span><span class=\"p\">[:</span><span class=\"n\">num_take</span><span class=\"p\">]</span>\n            <span class=\"n\">new_aids</span> <span class=\"o\">=</span> <span class=\"n\">daids_</span> <span class=\"o\">+</span> <span class=\"n\">pad_aids</span>\n            <span class=\"n\">info_</span> <span class=\"o\">=</span> <span class=\"n\">info_</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n            <span class=\"n\">info_</span><span class=\"p\">[</span><span class=\"s1\">&#39;n_pad&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">pad_aids</span><span class=\"p\">)</span>\n            <span class=\"n\">info_</span><span class=\"p\">[</span><span class=\"s1\">&#39;pad_dsize&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">new_aids</span><span class=\"p\">)</span>\n            <span class=\"n\">padded_info_list_</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">info_</span><span class=\"p\">)</span>\n            <span class=\"n\">padded_daids_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">new_aids</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Vary the dbsize by appending extra confusors</span>\n        <span class=\"k\">if</span> <span class=\"n\">extra_dbsize_fracs</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">extra_dbsize_fracs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">1.</span><span class=\"p\">]</span>\n        <span class=\"n\">extra_fracs</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">extra_dbsize_fracs</span><span class=\"p\">)</span>\n        <span class=\"n\">n_extra_list</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">unique</span><span class=\"p\">(</span><span class=\"n\">extra_fracs</span> <span class=\"o\">*</span> <span class=\"n\">n_extra_avail</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">int</span><span class=\"p\">)</span>\n        <span class=\"n\">daids_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">info_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"n\">n_extra_list</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">daids_</span><span class=\"p\">,</span> <span class=\"n\">info_</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">padded_daids_list</span><span class=\"p\">,</span> <span class=\"n\">padded_info_list_</span><span class=\"p\">):</span>\n                <span class=\"n\">extra_aids</span> <span class=\"o\">=</span> <span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">confusor_pool</span><span class=\"p\">[</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">confusor_pool</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">n</span><span class=\"p\">:]</span>\n                <span class=\"n\">daids</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">daids_</span> <span class=\"o\">+</span> <span class=\"n\">extra_aids</span><span class=\"p\">)</span>\n                <span class=\"n\">daids_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">daids</span><span class=\"p\">)</span>\n                <span class=\"n\">info</span> <span class=\"o\">=</span> <span class=\"n\">info_</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n                <span class=\"n\">info</span><span class=\"p\">[</span><span class=\"s1\">&#39;n_extra&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">extra_aids</span><span class=\"p\">)</span>\n                <span class=\"n\">info</span><span class=\"p\">[</span><span class=\"s1\">&#39;dsize&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">daids</span><span class=\"p\">)</span>\n                <span class=\"n\">info_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">info</span><span class=\"p\">)</span>\n\n        <span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n        <span class=\"n\">verbose</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">if</span> <span class=\"n\">verbose</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"o\">.</span><span class=\"n\">from_records</span><span class=\"p\">(</span><span class=\"n\">info_list</span><span class=\"p\">))</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;#qaids = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">qaids</span><span class=\"p\">),))</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;num_need = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">n_need</span><span class=\"p\">,))</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;max_dsize = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">max_dsize</span><span class=\"p\">,))</span>\n        <span class=\"k\">return</span> <span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">qaids</span><span class=\"p\">,</span> <span class=\"n\">daids_list</span><span class=\"p\">,</span> <span class=\"n\">info_list</span></div></div>\n\n\n<div class=\"viewcode-block\" id=\"split_tabular\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts._thesis_helpers.split_tabular\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">split_tabular</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">):</span>\n    <span class=\"n\">top</span><span class=\"p\">,</span> <span class=\"n\">rest</span> <span class=\"o\">=</span> <span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\\\</span><span class=\"s1\">toprule&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">rest</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\\\</span><span class=\"s1\">midrule&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">header</span><span class=\"p\">,</span> <span class=\"n\">body1</span><span class=\"p\">,</span> <span class=\"n\">rest</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n    <span class=\"c1\"># header, *body1, rest = rest.split(&#39;\\\\midrule&#39;)</span>\n\n    <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">rest</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\\\</span><span class=\"s1\">bottomrule&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">body2</span><span class=\"p\">,</span> <span class=\"n\">bot</span> <span class=\"o\">=</span> <span class=\"n\">y</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">y</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n    <span class=\"c1\"># *body2, bot = rest.split(&#39;\\\\bottomrule&#39;)</span>\n\n    <span class=\"n\">top</span> <span class=\"o\">=</span> <span class=\"n\">top</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">header</span> <span class=\"o\">=</span> <span class=\"n\">header</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">b</span> <span class=\"ow\">in</span> <span class=\"n\">body1</span> <span class=\"o\">+</span> <span class=\"n\">body2</span><span class=\"p\">]</span>\n    <span class=\"n\">bot</span> <span class=\"o\">=</span> <span class=\"n\">bot</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n    <span class=\"c1\"># print(top)</span>\n    <span class=\"c1\"># print(header)</span>\n    <span class=\"c1\"># print(body)</span>\n    <span class=\"c1\"># print(bot)</span>\n    <span class=\"n\">parts</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">top</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">,</span> <span class=\"n\">bot</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">parts</span></div>\n\n\n<div class=\"viewcode-block\" id=\"Tabular\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts._thesis_helpers.Tabular\">[docs]</a><span class=\"nd\">@ut</span><span class=\"o\">.</span><span class=\"n\">reloadable_class</span>\n<span class=\"k\">class</span> <span class=\"nc\">Tabular</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">colfmt</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">hline</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">caption</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span>\n                 <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">escape</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span> <span class=\"o\">=</span> <span class=\"n\">data</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">n_cols</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">n_rows</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parts</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">colfmt</span> <span class=\"o\">=</span> <span class=\"n\">colfmt</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">hline</span> <span class=\"o\">=</span> <span class=\"n\">hline</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">theadify</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">caption</span> <span class=\"o\">=</span> <span class=\"n\">caption</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">groupxs</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">multicol_headers</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_align_multicolumn_hack</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">precision</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">n_index_levels</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n        <span class=\"c1\"># pandas options</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">index</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">escape</span> <span class=\"o\">=</span> <span class=\"n\">escape</span>\n\n<div class=\"viewcode-block\" id=\"Tabular.add_multicolumn_header\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts._thesis_helpers.Tabular.add_multicolumn_header\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">add_multicolumn_header</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">size_col_name</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        size_col_name is a list of tuples indicating the number of columns,</span>\n<span class=\"sd\">        column format, and text.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">multicol_parts</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">tup</span> <span class=\"ow\">in</span> <span class=\"n\">size_col_name</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">tup</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">multicol_parts</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"n\">col</span><span class=\"p\">,</span> <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">tup</span>\n                <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_align_multicolumn_hack</span><span class=\"p\">:</span>\n                    <span class=\"n\">hack</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&amp;&#39;</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">size</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n                    <span class=\"n\">part</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\\\</span><span class=\"s1\">multi</span><span class=\"si\">%s</span><span class=\"s1\">column{</span><span class=\"si\">%d</span><span class=\"s1\">}{</span><span class=\"si\">%s</span><span class=\"s1\">}{</span><span class=\"si\">%s</span><span class=\"s1\">}&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">hack</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"n\">col</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">part</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\\\</span><span class=\"s1\">multicolumn{</span><span class=\"si\">%d</span><span class=\"s1\">}{</span><span class=\"si\">%s</span><span class=\"s1\">}{</span><span class=\"si\">%s</span><span class=\"s1\">}&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"n\">col</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">)</span>\n                <span class=\"n\">multicol_parts</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">part</span><span class=\"p\">)</span>\n        <span class=\"n\">line</span> <span class=\"o\">=</span> <span class=\"s1\">&#39; &amp; &#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">multicol_parts</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s1\">&#39; </span><span class=\"se\">\\\\\\\\</span><span class=\"s1\">&#39;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">multicol_headers</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_rectify_colfmt</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">colfmt</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">colfmt</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">colfmt</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">colfmt</span>\n        <span class=\"k\">if</span> <span class=\"n\">colfmt</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;numeric&#39;</span><span class=\"p\">:</span>\n            <span class=\"k\">assert</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">n_cols</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">&#39;need ncols for numeric&#39;</span>\n            <span class=\"n\">colfmt</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;l&#39;</span> <span class=\"o\">*</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">n_index_levels</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;r&#39;</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">n_cols</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">colfmt</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_rectify_text</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">):</span>\n        <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">&#39;\u00b1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;\\pm&#39;</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Put all numbers in math mode</span>\n        <span class=\"n\">pat</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"c1\"># ut.negative_lookbehind(&#39;[A-Za-z]&#39;) +</span>\n            <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">named_field</span><span class=\"p\">(</span><span class=\"s1\">&#39;num&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;[0-9.]+(</span><span class=\"se\">\\\\\\\\</span><span class=\"s1\">pm)?[0-9.]*&#39;</span><span class=\"p\">)</span> <span class=\"o\">+</span>\n            <span class=\"c1\"># ut.negative_lookahead(&#39;[A-Za-z]&#39;) +</span>\n            <span class=\"s1\">&#39;&#39;</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">text2</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"n\">pat</span><span class=\"p\">,</span> <span class=\"s1\">&#39;$&#39;</span> <span class=\"o\">+</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">bref_field</span><span class=\"p\">(</span><span class=\"s1\">&#39;num&#39;</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;$&#39;</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># if True:</span>\n        <span class=\"c1\">#     # def _boldface_best():</span>\n        <span class=\"c1\">#     #     pass</span>\n        <span class=\"c1\">#     # text2 = re.sub(pat, &#39;$&#39; + ut.bref_field(&#39;num&#39;) + &#39;$&#39;, text2)</span>\n\n        <span class=\"c1\"># latex_str = re.sub(&#39; -0.00 &#39;, &#39;  0.00 &#39;, latex_str)</span>\n        <span class=\"k\">return</span> <span class=\"n\">text2</span>\n\n<div class=\"viewcode-block\" id=\"Tabular.as_text\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts._thesis_helpers.Tabular.as_text\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">as_text</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span><span class=\"p\">,</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">):</span>\n            <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span>\n            <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">to_latex</span><span class=\"p\">(</span>\n                <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">escape</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">escape</span><span class=\"p\">,</span>\n                <span class=\"n\">float_format</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"s1\">&#39;nan&#39;</span> <span class=\"k\">if</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">isnan</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr2</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">precision</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">precision</span><span class=\"p\">)</span>\n                <span class=\"c1\"># (&#39;%.&#39; + str(self.precision) + &#39;f&#39;) % (x))</span>\n            <span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">n_index_levels</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">names</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">n_rows</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">n_cols</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rectify_text</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">text</span></div>\n\n<div class=\"viewcode-block\" id=\"Tabular.as_parts\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts._thesis_helpers.Tabular.as_parts\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">as_parts</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parts</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parts</span>\n        <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">as_text</span><span class=\"p\">()</span>\n        <span class=\"n\">top</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">,</span> <span class=\"n\">bot</span> <span class=\"o\">=</span> <span class=\"n\">split_tabular</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span>\n        <span class=\"n\">colfmt</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rectify_colfmt</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">colfmt</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">top</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\\\</span><span class=\"s1\">begin</span><span class=\"si\">{tabular}</span><span class=\"s1\">{</span><span class=\"si\">%s</span><span class=\"s1\">}&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">colfmt</span><span class=\"p\">,)</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">theadify</span><span class=\"p\">:</span>\n            <span class=\"kn\">import</span> <span class=\"nn\">textwrap</span>\n            <span class=\"n\">width</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">theadify</span>\n            <span class=\"n\">wrapper</span> <span class=\"o\">=</span> <span class=\"n\">textwrap</span><span class=\"o\">.</span><span class=\"n\">TextWrapper</span><span class=\"p\">(</span><span class=\"n\">width</span><span class=\"o\">=</span><span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"n\">break_long_words</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n            <span class=\"n\">header_lines</span> <span class=\"o\">=</span> <span class=\"n\">header</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">new_lines</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">header_lines</span><span class=\"p\">:</span>\n                <span class=\"n\">line</span> <span class=\"o\">=</span> <span class=\"n\">line</span><span class=\"o\">.</span><span class=\"n\">rstrip</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\\\</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n                <span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">h</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">h</span> <span class=\"ow\">in</span> <span class=\"n\">line</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;&amp;&#39;</span><span class=\"p\">)]</span>\n                <span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;</span><span class=\"se\">\\\\\\\\</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">wrapper</span><span class=\"o\">.</span><span class=\"n\">wrap</span><span class=\"p\">(</span><span class=\"n\">h</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">h</span> <span class=\"ow\">in</span> <span class=\"n\">headers</span><span class=\"p\">]</span>\n                <span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">h</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;</span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span> <span class=\"k\">else</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\\\</span><span class=\"s1\">thead{&#39;</span> <span class=\"o\">+</span> <span class=\"n\">h</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;}&#39;</span>\n                           <span class=\"k\">for</span> <span class=\"n\">h</span> <span class=\"ow\">in</span> <span class=\"n\">headers</span><span class=\"p\">]</span>\n                <span class=\"n\">line</span> <span class=\"o\">=</span> <span class=\"s1\">&#39; &amp; &#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">headers</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\\\\\\\</span><span class=\"s1\">&#39;</span>\n                <span class=\"n\">new_lines</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span>\n            <span class=\"n\">new_header</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">new_lines</span><span class=\"p\">)</span>\n            <span class=\"n\">header</span> <span class=\"o\">=</span> <span class=\"n\">new_header</span>\n        <span class=\"k\">if</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n            <span class=\"n\">groupxs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">groupxs</span>\n            <span class=\"c1\"># Put midlines between multi index levels</span>\n            <span class=\"k\">if</span> <span class=\"n\">groupxs</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span><span class=\"p\">,</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">):</span>\n                <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span><span class=\"o\">.</span><span class=\"n\">index</span>\n                <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">names</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span> <span class=\"ow\">and</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">mid</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                    <span class=\"n\">groupxs</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">group_indices</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">labels</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n                    <span class=\"c1\"># part = &#39;\\n\\multirow{%d}{*}{%s}\\n&#39; % (len(chunk), key,)</span>\n                    <span class=\"c1\"># part += &#39;\\n&#39;.join([&#39;&amp; &#39; + c for c in chunk])</span>\n            <span class=\"k\">if</span> <span class=\"n\">groupxs</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">bodylines</span> <span class=\"o\">=</span> <span class=\"n\">mid</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n                <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">apply_grouping</span><span class=\"p\">(</span><span class=\"n\">bodylines</span><span class=\"p\">,</span> <span class=\"n\">groupxs</span><span class=\"p\">)</span>\n        <span class=\"n\">parts</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">top</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">,</span> <span class=\"n\">bot</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">parts</span></div>\n\n<div class=\"viewcode-block\" id=\"Tabular.as_tabular\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts._thesis_helpers.Tabular.as_tabular\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">as_tabular</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">parts</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">as_parts</span><span class=\"p\">()</span>\n        <span class=\"n\">top</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">,</span> <span class=\"n\">bot</span> <span class=\"o\">=</span> <span class=\"n\">parts</span>\n\n        <span class=\"n\">header</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">multicol_headers</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span> <span class=\"o\">+</span> <span class=\"n\">header</span>\n        <span class=\"n\">new_parts</span> <span class=\"o\">=</span> <span class=\"n\">top</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">,</span> <span class=\"n\">bot</span>\n        <span class=\"n\">tabular</span> <span class=\"o\">=</span> <span class=\"n\">join_tabular</span><span class=\"p\">(</span><span class=\"n\">new_parts</span><span class=\"p\">,</span> <span class=\"n\">hline</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">hline</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_align_multicolumn_hack</span><span class=\"p\">:</span>\n            <span class=\"k\">def</span> <span class=\"nf\">hack_repl_align</span><span class=\"p\">(</span><span class=\"n\">match</span><span class=\"p\">):</span>\n                <span class=\"n\">part</span> <span class=\"o\">=</span> <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">string</span><span class=\"p\">[</span><span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">():</span><span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">end</span><span class=\"p\">()]</span>\n                <span class=\"n\">spaces</span> <span class=\"o\">=</span> <span class=\"n\">part</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"s1\">&#39; &#39;</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">part</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"s1\">&#39;&amp;&#39;</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"s1\">&#39; &#39;</span> <span class=\"o\">*</span> <span class=\"n\">spaces</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\\\</span><span class=\"s1\">multicolumn&#39;</span>\n            <span class=\"n\">tabular</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\\\\\\\</span><span class=\"s1\">multi( *&amp;)*column&#39;</span><span class=\"p\">,</span> <span class=\"n\">hack_repl_align</span><span class=\"p\">,</span> <span class=\"n\">tabular</span><span class=\"p\">)</span>\n            <span class=\"n\">tabular</span> <span class=\"o\">=</span> <span class=\"n\">tabular</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\\\</span><span class=\"s1\">midrule&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\\\</span><span class=\"s1\">hline&#39;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">tabular</span></div>\n\n<div class=\"viewcode-block\" id=\"Tabular.as_table\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts._thesis_helpers.Tabular.as_table\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">as_table</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">caption</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">caption</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">caption</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">caption</span>\n        <span class=\"n\">tabular</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">as_tabular</span><span class=\"p\">()</span>\n        <span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">codeblock</span><span class=\"p\">(</span>\n            <span class=\"sa\">r</span><span class=\"sd\">&#39;&#39;&#39;</span>\n<span class=\"sd\">            \\begin{{table}}[h]</span>\n<span class=\"sd\">                \\centering</span>\n<span class=\"sd\">                \\caption{{{caption}}}</span>\n<span class=\"sd\">            &#39;&#39;&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">caption</span><span class=\"o\">=</span><span class=\"n\">caption</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">tabular</span><span class=\"p\">:</span>\n            <span class=\"n\">table</span> <span class=\"o\">+=</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span> <span class=\"o\">+</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">indent</span><span class=\"p\">(</span><span class=\"n\">tabular</span><span class=\"p\">)</span>\n        <span class=\"n\">table</span> <span class=\"o\">+=</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span> <span class=\"o\">+</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">codeblock</span><span class=\"p\">(</span>\n            <span class=\"sd\">&#39;&#39;&#39;</span>\n<span class=\"sd\">            \\end{{table}}</span>\n<span class=\"sd\">            &#39;&#39;&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">table</span></div></div>\n\n\n<div class=\"viewcode-block\" id=\"upper_one\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts._thesis_helpers.upper_one\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">upper_one</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]</span></div>\n\n\n<div class=\"viewcode-block\" id=\"join_tabular\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts._thesis_helpers.join_tabular\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">join_tabular</span><span class=\"p\">(</span><span class=\"n\">parts</span><span class=\"p\">,</span> <span class=\"n\">hline</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">align</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n    <span class=\"n\">top</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">,</span> <span class=\"n\">bot</span> <span class=\"o\">=</span> <span class=\"n\">parts</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">hline</span><span class=\"p\">:</span>\n        <span class=\"n\">toprule</span> <span class=\"o\">=</span> <span class=\"n\">midrule</span> <span class=\"o\">=</span> <span class=\"n\">botrule</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\\\</span><span class=\"s1\">hline&#39;</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">toprule</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\\\</span><span class=\"s1\">toprule&#39;</span>\n        <span class=\"n\">midrule</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\\\</span><span class=\"s1\">midrule&#39;</span>\n        <span class=\"n\">botrule</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\\\</span><span class=\"s1\">bottomrule&#39;</span>\n\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">bzip</span><span class=\"p\">([</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s1\">&#39;-&#39;</span><span class=\"p\">]))</span>\n\n    <span class=\"n\">top_parts</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">top</span><span class=\"p\">,</span> <span class=\"n\">toprule</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"p\">]</span>\n    <span class=\"k\">if</span> <span class=\"n\">mid</span><span class=\"p\">:</span>\n        <span class=\"c1\"># join midblocks given as lists of lines instead of strings</span>\n        <span class=\"n\">midblocks</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">m</span> <span class=\"ow\">in</span> <span class=\"n\">mid</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n                <span class=\"n\">midblocks</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">midblocks</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">))</span>\n        <span class=\"n\">mid_parts</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">bzip</span><span class=\"p\">([</span><span class=\"n\">midrule</span><span class=\"p\">],</span> <span class=\"n\">midblocks</span><span class=\"p\">))</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">mid_parts</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"c1\"># middle_parts = ut.flatten(list(ut.bzip(body_parts, [&#39;\\\\midrule&#39;])))</span>\n    <span class=\"n\">bot_parts</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">botrule</span><span class=\"p\">,</span> <span class=\"n\">bot</span><span class=\"p\">]</span>\n    <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">top_parts</span> <span class=\"o\">+</span> <span class=\"n\">mid_parts</span> <span class=\"o\">+</span> <span class=\"n\">bot_parts</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">align</span><span class=\"p\">:</span>\n        <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">align</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&amp;&#39;</span><span class=\"p\">,</span> <span class=\"n\">pos</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"c1\"># text = ut.align(text, r&#39;\\\\&#39;, pos=None)</span>\n    <span class=\"k\">return</span> <span class=\"n\">text</span></div>\n\n\n<div class=\"viewcode-block\" id=\"ave_str\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts._thesis_helpers.ave_str\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">ave_str</span><span class=\"p\">(</span><span class=\"n\">mean</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"p\">,</span> <span class=\"n\">precision</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">):</span>\n    <span class=\"n\">ffmt</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"s1\">&#39;{:.&#39;</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">precision</span><span class=\"p\">),</span> <span class=\"s1\">&#39;f}&#39;</span><span class=\"p\">])</span>\n    <span class=\"c1\"># fmtstr = &#39;&#39;.join([&#39;$&#39;, ffmt, &#39;\u00b1&#39;, ffmt, &#39;$&#39;])</span>\n    <span class=\"n\">fmtstr</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"n\">ffmt</span><span class=\"p\">,</span> <span class=\"s1\">&#39;\u00b1&#39;</span><span class=\"p\">,</span> <span class=\"n\">ffmt</span><span class=\"p\">])</span>\n    <span class=\"n\">str_</span> <span class=\"o\">=</span> <span class=\"n\">fmtstr</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">mean</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">str_</span></div>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.scripts._thesis_helpers</span>\n<span class=\"sd\">        python -m ibeis.scripts._thesis_helpers --allexamples</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">multiprocessing</span>\n    <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">freeze_support</span><span class=\"p\">()</span>  <span class=\"c1\"># for win32</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>  <span class=\"c1\"># NOQA</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">doctest_funcs</span><span class=\"p\">()</span>\n</pre></div>", "current_page_name": "_modules/ibeis/scripts/_thesis_helpers", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}