{"parents": [{"link": "../../../", "title": "Module code"}, {"link": "../../", "title": "ibeis"}], "title": "ibeis.scripts.postdoc", "body": "<h1>Source code for ibeis.scripts.postdoc</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"k\">import</span> <span class=\"n\">absolute_import</span><span class=\"p\">,</span> <span class=\"n\">division</span><span class=\"p\">,</span> <span class=\"n\">print_function</span><span class=\"p\">,</span> <span class=\"n\">unicode_literals</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"kn\">import</span> <span class=\"nn\">plottool</span> <span class=\"k\">as</span> <span class=\"nn\">pt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.verif</span> <span class=\"k\">import</span> <span class=\"n\">vsone</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.scripts._thesis_helpers</span> <span class=\"k\">import</span> <span class=\"n\">DBInputs</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.scripts.thesis</span> <span class=\"k\">import</span> <span class=\"n\">Sampler</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.scripts._thesis_helpers</span> <span class=\"k\">import</span> <span class=\"n\">Tabular</span><span class=\"p\">,</span> <span class=\"n\">upper_one</span><span class=\"p\">,</span> <span class=\"n\">ave_str</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.scripts._thesis_helpers</span> <span class=\"k\">import</span> <span class=\"n\">dbname_to_species_nice</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.scripts._thesis_helpers</span> <span class=\"k\">import</span> <span class=\"n\">TMP_RC</span><span class=\"p\">,</span> <span class=\"n\">W</span><span class=\"p\">,</span> <span class=\"n\">H</span><span class=\"p\">,</span> <span class=\"n\">DPI</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.state</span> <span class=\"k\">import</span> <span class=\"n\">POSTV</span><span class=\"p\">,</span> <span class=\"n\">NEGTV</span><span class=\"p\">,</span> <span class=\"n\">INCMP</span><span class=\"p\">,</span> <span class=\"n\">UNREV</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">import</span> <span class=\"nn\">ubelt</span> <span class=\"k\">as</span> <span class=\"nn\">ub</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"kn\">import</span> <span class=\"nn\">itertools</span> <span class=\"k\">as</span> <span class=\"nn\">it</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib</span> <span class=\"k\">as</span> <span class=\"nn\">mpl</span>\n<span class=\"kn\">from</span> <span class=\"nn\">os.path</span> <span class=\"k\">import</span> <span class=\"n\">basename</span><span class=\"p\">,</span> <span class=\"n\">join</span><span class=\"p\">,</span> <span class=\"n\">splitext</span><span class=\"p\">,</span> <span class=\"n\">exists</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"kn\">import</span> <span class=\"nn\">ibeis.constants</span> <span class=\"k\">as</span> <span class=\"nn\">const</span>\n<span class=\"kn\">import</span> <span class=\"nn\">vtool</span> <span class=\"k\">as</span> <span class=\"nn\">vt</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.state</span> <span class=\"k\">import</span> <span class=\"n\">POSTV</span><span class=\"p\">,</span> <span class=\"n\">NEGTV</span><span class=\"p\">,</span> <span class=\"n\">INCMP</span><span class=\"p\">,</span> <span class=\"n\">UNREV</span><span class=\"p\">,</span> <span class=\"n\">UNKWN</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"p\">(</span><span class=\"nb\">print</span><span class=\"p\">,</span> <span class=\"n\">rrr</span><span class=\"p\">,</span> <span class=\"n\">profile</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">inject2</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">CLF</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;VAMP&#39;</span>\n<span class=\"n\">LNBNN</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;LNBNN&#39;</span>\n\n\n<div class=\"viewcode-block\" id=\"turk_pz\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts.postdoc.turk_pz\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">turk_pz</span><span class=\"p\">():</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">ibeis</span>\n    <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">opendb</span><span class=\"p\">(</span><span class=\"s1\">&#39;GZ_Master1&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">AnnotInference</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"o\">=</span><span class=\"s1\">&#39;all&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">reset_feedback</span><span class=\"p\">(</span><span class=\"s1\">&#39;staging&#39;</span><span class=\"p\">,</span> <span class=\"n\">apply</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">relabel_using_reviews</span><span class=\"p\">(</span><span class=\"n\">rectify</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"c1\"># infr.apply_nondynamic_update()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr4</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"p\">()))</span>\n\n    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">ibeis_delta_info</span><span class=\"p\">()</span>\n\n    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">match_state_delta</span><span class=\"p\">()</span>\n    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">get_ibeis_name_delta</span><span class=\"p\">()</span>\n\n    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">relabel_using_reviews</span><span class=\"p\">(</span><span class=\"n\">rectify</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">write_ibeis_annotmatch_feedback</span><span class=\"p\">()</span>\n    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">write_ibeis_name_assignment</span><span class=\"p\">()</span>\n    <span class=\"k\">pass</span></div>\n\n\n<div class=\"viewcode-block\" id=\"GraphExpt\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts.postdoc.GraphExpt\">[docs]</a><span class=\"nd\">@ut</span><span class=\"o\">.</span><span class=\"n\">reloadable_class</span>\n<span class=\"k\">class</span> <span class=\"nc\">GraphExpt</span><span class=\"p\">(</span><span class=\"n\">DBInputs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n\n<span class=\"sd\">    TODO:</span>\n<span class=\"sd\">        - [ ] Experimental analysis of duration of each phase and state of</span>\n<span class=\"sd\">            graph.</span>\n\n<span class=\"sd\">        - [ ] Experimental analysis of phase 3, including how far we can get</span>\n<span class=\"sd\">            with automatic decision making and do we discover new merges?  If</span>\n<span class=\"sd\">            there are potential merges, can we run phase iii with exactly the</span>\n<span class=\"sd\">            same ordering as before:  ordering by probability for automatically</span>\n<span class=\"sd\">            decidable and then by positive probability for others.  This should</span>\n<span class=\"sd\">            work for phase 3 and therefore allow a clean combination of the</span>\n<span class=\"sd\">            three phases and our termination criteria.  I just thought of this</span>\n<span class=\"sd\">            so don&#39;t really have it written cleanly above.</span>\n\n<span class=\"sd\">        - [ ] Experimental analysis of choice of automatic decision thresholds.</span>\n<span class=\"sd\">            by lowering the threshold we increase the risk of mistakes.  Each</span>\n<span class=\"sd\">            mistake costs some number of manual reviews (perhaps 2-3), but if</span>\n<span class=\"sd\">            the frequency of errors is low then we could be saving ourselves a</span>\n<span class=\"sd\">            lot of manual reviews.</span>\n\n<span class=\"sd\">        \\item OTHER SPECIES</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis GraphExpt.measure all PZ_MTEST</span>\n\n<span class=\"sd\">    Ignore:</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.scripts.postdoc import *</span>\n<span class=\"sd\">        &gt;&gt;&gt; self = GraphExpt(&#39;PZ_MTEST&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; self._precollect()</span>\n<span class=\"sd\">        &gt;&gt;&gt; self._setup()</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">base_dpath</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">truepath</span><span class=\"p\">(</span><span class=\"s1\">&#39;~/Desktop/graph_expt&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_precollect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ibs</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">_GraphExpt</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">fix_super_reload</span><span class=\"p\">(</span><span class=\"n\">GraphExpt</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span>\n            <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">_GraphExpt</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">_precollect</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Split data into a training and testing test</span>\n        <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ibs</span>\n        <span class=\"n\">annots</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">annots</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">aids_pool</span><span class=\"p\">)</span>\n        <span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">annots</span><span class=\"o\">.</span><span class=\"n\">group_items</span><span class=\"p\">(</span><span class=\"n\">annots</span><span class=\"o\">.</span><span class=\"n\">nids</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">())</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">shuffle</span><span class=\"p\">(</span><span class=\"n\">names</span><span class=\"p\">,</span> <span class=\"n\">rng</span><span class=\"o\">=</span><span class=\"mi\">321</span><span class=\"p\">)</span>\n        <span class=\"n\">train_names</span><span class=\"p\">,</span> <span class=\"n\">test_names</span> <span class=\"o\">=</span> <span class=\"n\">names</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">::</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">names</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">::</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n        <span class=\"n\">train_aids</span><span class=\"p\">,</span> <span class=\"n\">test_aids</span> <span class=\"o\">=</span> <span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">train_names</span><span class=\"p\">,</span> <span class=\"n\">test_names</span><span class=\"p\">))</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">test_train</span> <span class=\"o\">=</span> <span class=\"n\">train_aids</span><span class=\"p\">,</span> <span class=\"n\">test_aids</span>\n\n        <span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pblm</span> <span class=\"o\">=</span> <span class=\"n\">vsone</span><span class=\"o\">.</span><span class=\"n\">OneVsOneProblem</span><span class=\"o\">.</span><span class=\"n\">from_aids</span><span class=\"p\">(</span>\n            <span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">train_aids</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">params</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># ut.get_nonconflicting_path(dpath, suffix=&#39;_old&#39;)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">const_dials</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"c1\"># &#39;oracle_accuracy&#39; : (0.98, 1.0),</span>\n            <span class=\"c1\"># &#39;oracle_accuracy&#39; : (0.98, .98),</span>\n            <span class=\"s1\">&#39;oracle_accuracy&#39;</span> <span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mf\">0.99</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">99</span><span class=\"p\">),</span>\n            <span class=\"s1\">&#39;k_redun&#39;</span>         <span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;max_outer_loops&#39;</span> <span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">inf</span><span class=\"p\">,</span>\n            <span class=\"c1\"># &#39;max_outer_loops&#39; : 1,</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dict_union</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">const_dials</span><span class=\"p\">)</span>\n        <span class=\"n\">cfg_prefix</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"si\">{}</span><span class=\"s1\">_</span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">test_aids</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">train_aids</span><span class=\"p\">))</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_setup_links</span><span class=\"p\">(</span><span class=\"n\">cfg_prefix</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_setup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        python -m ibeis GraphExpt._setup</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.scripts.postdoc import *</span>\n<span class=\"sd\">            &gt;&gt;&gt; #self = GraphExpt(&#39;GZ_Master1&#39;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; self = GraphExpt(&#39;PZ_MTEST&#39;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; self = GraphExpt(&#39;PZ_Master1&#39;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; self._setup()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_precollect</span><span class=\"p\">()</span>\n        <span class=\"n\">train_aids</span><span class=\"p\">,</span> <span class=\"n\">test_aids</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">test_train</span>\n\n        <span class=\"n\">task_key</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;match_state&#39;</span>\n        <span class=\"n\">pblm</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pblm</span>\n        <span class=\"n\">data_key</span> <span class=\"o\">=</span> <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">default_data_key</span>\n        <span class=\"n\">clf_key</span> <span class=\"o\">=</span> <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">default_clf_key</span>\n\n        <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">eval_data_keys</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">data_key</span><span class=\"p\">]</span>\n        <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"p\">(</span><span class=\"n\">with_simple</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">learn_evaluation_classifiers</span><span class=\"p\">()</span>\n\n        <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">task_combo_res</span><span class=\"p\">[</span><span class=\"n\">task_key</span><span class=\"p\">][</span><span class=\"n\">clf_key</span><span class=\"p\">][</span><span class=\"n\">data_key</span><span class=\"p\">]</span>\n        <span class=\"c1\"># pblm.report_evaluation()</span>\n\n        <span class=\"c1\"># TODO: need more principled way of selecting thresholds</span>\n        <span class=\"c1\"># graph_thresh = res.get_pos_threshes(&#39;fpr&#39;, 0.01)</span>\n        <span class=\"n\">graph_thresh</span> <span class=\"o\">=</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">get_pos_threshes</span><span class=\"p\">(</span><span class=\"s1\">&#39;fpr&#39;</span><span class=\"p\">,</span> <span class=\"mf\">0.001</span><span class=\"p\">)</span>\n        <span class=\"c1\"># rankclf_thresh = res.get_pos_threshes(fpr=0.01)</span>\n\n        <span class=\"c1\"># Load or create the deploy classifiers</span>\n        <span class=\"n\">clf_dpath</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ensuredir</span><span class=\"p\">((</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dpath</span><span class=\"p\">,</span> <span class=\"s1\">&#39;clf&#39;</span><span class=\"p\">))</span>\n        <span class=\"n\">classifiers</span> <span class=\"o\">=</span> <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">ensure_deploy_classifiers</span><span class=\"p\">(</span><span class=\"n\">dpath</span><span class=\"o\">=</span><span class=\"n\">clf_dpath</span><span class=\"p\">)</span>\n\n        <span class=\"n\">sim_params</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;test_aids&#39;</span><span class=\"p\">:</span> <span class=\"n\">test_aids</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;train_aids&#39;</span><span class=\"p\">:</span> <span class=\"n\">train_aids</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;classifiers&#39;</span><span class=\"p\">:</span> <span class=\"n\">classifiers</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;graph_thresh&#39;</span><span class=\"p\">:</span> <span class=\"n\">graph_thresh</span><span class=\"p\">,</span>\n            <span class=\"c1\"># &#39;rankclf_thresh&#39;: rankclf_thresh,</span>\n            <span class=\"s1\">&#39;const_dials&#39;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">const_dials</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pblm</span> <span class=\"o\">=</span> <span class=\"n\">pblm</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sim_params</span> <span class=\"o\">=</span> <span class=\"n\">sim_params</span>\n        <span class=\"k\">return</span> <span class=\"n\">sim_params</span>\n\n<div class=\"viewcode-block\" id=\"GraphExpt.measure_all\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts.postdoc.GraphExpt.measure_all\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">measure_all</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">measure_graphsim</span><span class=\"p\">()</span></div>\n\n<div class=\"viewcode-block\" id=\"GraphExpt.measure_graphsim\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts.postdoc.GraphExpt.measure_graphsim\">[docs]</a>    <span class=\"nd\">@profile</span>\n    <span class=\"k\">def</span> <span class=\"nf\">measure_graphsim</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        CommandLine:</span>\n<span class=\"sd\">            python -m ibeis GraphExpt.measure graphsim GZ_Master1</span>\n<span class=\"sd\">            1</span>\n\n<span class=\"sd\">        Ignore:</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.scripts.postdoc import *</span>\n<span class=\"sd\">            &gt;&gt;&gt; #self = GraphExpt(&#39;PZ_MTEST&#39;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; #self = GraphExpt(&#39;GZ_Master1&#39;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; self = GraphExpt.measure(&#39;graphsim&#39;, &#39;PZ_Master1&#39;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; self = GraphExpt.measure(&#39;graphsim&#39;, &#39;GZ_Master1&#39;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; self = GraphExpt.measure(&#39;graphsim&#39;, &#39;PZ_MTEST&#39;)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">ibeis</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ensure_setup</span><span class=\"p\">()</span>\n\n        <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ibs</span>\n        <span class=\"n\">sim_params</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sim_params</span>\n        <span class=\"n\">classifiers</span> <span class=\"o\">=</span> <span class=\"n\">sim_params</span><span class=\"p\">[</span><span class=\"s1\">&#39;classifiers&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">test_aids</span> <span class=\"o\">=</span> <span class=\"n\">sim_params</span><span class=\"p\">[</span><span class=\"s1\">&#39;test_aids&#39;</span><span class=\"p\">]</span>\n\n        <span class=\"n\">graph_thresh</span> <span class=\"o\">=</span> <span class=\"n\">sim_params</span><span class=\"p\">[</span><span class=\"s1\">&#39;graph_thresh&#39;</span><span class=\"p\">]</span>\n\n        <span class=\"n\">const_dials</span> <span class=\"o\">=</span> <span class=\"n\">sim_params</span><span class=\"p\">[</span><span class=\"s1\">&#39;const_dials&#39;</span><span class=\"p\">]</span>\n\n        <span class=\"n\">sim_results</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"n\">verbose</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n\n        <span class=\"c1\"># ----------</span>\n        <span class=\"c1\"># Graph test</span>\n        <span class=\"n\">dials1</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dict_union</span><span class=\"p\">(</span><span class=\"n\">const_dials</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;name&#39;</span>               <span class=\"p\">:</span> <span class=\"s1\">&#39;graph&#39;</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;enable_inference&#39;</span>   <span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;match_state_thresh&#39;</span> <span class=\"p\">:</span> <span class=\"n\">graph_thresh</span><span class=\"p\">,</span>\n        <span class=\"p\">})</span>\n        <span class=\"n\">infr1</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">AnnotInference</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">=</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"o\">=</span><span class=\"n\">test_aids</span><span class=\"p\">,</span> <span class=\"n\">autoinit</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                                     <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">verbose</span><span class=\"p\">)</span>\n        <span class=\"n\">infr1</span><span class=\"o\">.</span><span class=\"n\">enable_auto_prioritize_nonpos</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"n\">infr1</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"s1\">&#39;refresh.window&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">20</span>\n        <span class=\"n\">infr1</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"s1\">&#39;refresh.thresh&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">0.052</span>\n        <span class=\"n\">infr1</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"s1\">&#39;refresh.patience&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">72</span>\n        <span class=\"n\">infr1</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"s1\">&#39;redun.enforce_pos&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"n\">infr1</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"s1\">&#39;redun.enforce_neg&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n        <span class=\"n\">infr1</span><span class=\"o\">.</span><span class=\"n\">init_simulation</span><span class=\"p\">(</span><span class=\"n\">classifiers</span><span class=\"o\">=</span><span class=\"n\">classifiers</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">dials1</span><span class=\"p\">)</span>\n        <span class=\"n\">infr1</span><span class=\"o\">.</span><span class=\"n\">init_test_mode</span><span class=\"p\">()</span>\n\n        <span class=\"n\">infr1</span><span class=\"o\">.</span><span class=\"n\">reset</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"o\">=</span><span class=\"s1\">&#39;empty&#39;</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># if False:</span>\n        <span class=\"c1\">#     infr = infr1</span>\n        <span class=\"c1\">#     infr.init_refresh()</span>\n        <span class=\"c1\">#     n_prioritized = infr.refresh_candidate_edges()</span>\n        <span class=\"c1\">#     gen = infr.lnbnn_priority_gen(use_refresh=True)</span>\n        <span class=\"c1\">#     next(gen)</span>\n        <span class=\"c1\">#     edge = (25, 118)</span>\n\n        <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">infr1</span><span class=\"o\">.</span><span class=\"n\">main_gen</span><span class=\"p\">())</span>\n        <span class=\"c1\"># infr1.main_loop()</span>\n\n        <span class=\"n\">sim_results</span><span class=\"p\">[</span><span class=\"s1\">&#39;graph&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_collect_sim_results</span><span class=\"p\">(</span><span class=\"n\">infr1</span><span class=\"p\">,</span> <span class=\"n\">dials1</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># ------------</span>\n        <span class=\"c1\"># Dump experiment output to disk</span>\n        <span class=\"n\">expt_name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;graphsim&#39;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">expt_results</span><span class=\"p\">[</span><span class=\"n\">expt_name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">sim_results</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ensuredir</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dpath</span><span class=\"p\">)</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">save_data</span><span class=\"p\">(</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dpath</span><span class=\"p\">,</span> <span class=\"n\">expt_name</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;.pkl&#39;</span><span class=\"p\">),</span> <span class=\"n\">sim_results</span><span class=\"p\">)</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_collect_sim_results</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">dials</span><span class=\"p\">):</span>\n        <span class=\"n\">pred_confusion</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">test_state</span><span class=\"p\">[</span><span class=\"s1\">&#39;confusion&#39;</span><span class=\"p\">])</span>\n        <span class=\"n\">pred_confusion</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;real&#39;</span>\n        <span class=\"n\">pred_confusion</span><span class=\"o\">.</span><span class=\"n\">columns</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;pred&#39;</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Edge confusion&#39;</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">pred_confusion</span><span class=\"p\">)</span>\n\n        <span class=\"n\">expt_data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;real_ccs&#39;</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">nid_to_gt_cc</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()),</span>\n            <span class=\"s1\">&#39;pred_ccs&#39;</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">connected_components</span><span class=\"p\">()),</span>\n            <span class=\"s1\">&#39;graph&#39;</span><span class=\"p\">:</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">(),</span>\n            <span class=\"s1\">&#39;dials&#39;</span><span class=\"p\">:</span> <span class=\"n\">dials</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;refresh_thresh&#39;</span><span class=\"p\">:</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">refresh</span><span class=\"o\">.</span><span class=\"n\">_prob_any_remain_thresh</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;metrics&#39;</span><span class=\"p\">:</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">metrics_list</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">expt_data</span>\n\n<div class=\"viewcode-block\" id=\"GraphExpt.draw_graphsim\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts.postdoc.GraphExpt.draw_graphsim\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">draw_graphsim</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        CommandLine:</span>\n\n<span class=\"sd\">            python -m ibeis GraphExpt.measure graphsim GZ_Master1</span>\n<span class=\"sd\">            python -m ibeis GraphExpt.draw graphsim GZ_Master1 --diskshow</span>\n\n<span class=\"sd\">            python -m ibeis GraphExpt.draw graphsim PZ_MTEST --diskshow</span>\n<span class=\"sd\">            python -m ibeis GraphExpt.draw graphsim GZ_Master1 --diskshow</span>\n<span class=\"sd\">            python -m ibeis GraphExpt.draw graphsim PZ_Master1 --diskshow</span>\n\n<span class=\"sd\">        Ignore:</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.scripts.postdoc import *</span>\n<span class=\"sd\">            &gt;&gt;&gt; self = GraphExpt(&#39;GZ_Master1&#39;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; self = GraphExpt(&#39;PZ_MTEST&#39;)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">sim_results</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ensure_results</span><span class=\"p\">(</span><span class=\"s1\">&#39;graphsim&#39;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">metric_nice</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;n_errors&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;# errors&#39;</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;n_manual&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;# manual reviews&#39;</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;frac_mistake_aids&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;fraction error annots&#39;</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;merge_remain&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;fraction of merges remain&#39;</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"c1\"># keys = [&#39;ranking&#39;, &#39;rank+clf&#39;, &#39;graph&#39;]</span>\n        <span class=\"c1\"># keycols = [&#39;red&#39;, &#39;orange&#39;, &#39;b&#39;]</span>\n        <span class=\"n\">keys</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;graph&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">keycols</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">colors</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dzip</span><span class=\"p\">(</span><span class=\"n\">keys</span><span class=\"p\">,</span> <span class=\"n\">keycols</span><span class=\"p\">)</span>\n\n        <span class=\"n\">dfs</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"s1\">&#39;metrics&#39;</span><span class=\"p\">])</span>\n               <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">sim_results</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()}</span>\n\n        <span class=\"n\">n_aids</span> <span class=\"o\">=</span> <span class=\"n\">sim_results</span><span class=\"p\">[</span><span class=\"s1\">&#39;graph&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;graph&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">number_of_nodes</span><span class=\"p\">()</span>\n        <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">dfs</span><span class=\"p\">[</span><span class=\"s1\">&#39;graph&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">&#39;frac_mistake_aids&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">n_mistake_aids</span> <span class=\"o\">/</span> <span class=\"n\">n_aids</span>\n        <span class=\"c1\"># mdf = pd.concat(dfs.values(), keys=dfs.keys())</span>\n\n        <span class=\"kn\">import</span> <span class=\"nn\">xarray</span> <span class=\"k\">as</span> <span class=\"nn\">xr</span>\n        <span class=\"n\">panel</span> <span class=\"o\">=</span> <span class=\"n\">xr</span><span class=\"o\">.</span><span class=\"n\">concat</span><span class=\"p\">(</span>\n            <span class=\"p\">[</span><span class=\"n\">xr</span><span class=\"o\">.</span><span class=\"n\">DataArray</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">dims</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;ts&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;metric&#39;</span><span class=\"p\">))</span>\n             <span class=\"k\">for</span> <span class=\"n\">df</span> <span class=\"ow\">in</span> <span class=\"n\">dfs</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()],</span>\n            <span class=\"n\">dim</span><span class=\"o\">=</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Index</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">dfs</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;key&#39;</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">xmax</span> <span class=\"o\">=</span> <span class=\"n\">panel</span><span class=\"o\">.</span><span class=\"n\">sel</span><span class=\"p\">(</span><span class=\"n\">metric</span><span class=\"o\">=</span><span class=\"s1\">&#39;n_manual&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">()</span>\n        <span class=\"n\">xpad</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mf\">1.01</span> <span class=\"o\">*</span> <span class=\"n\">xmax</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">xmax</span>\n\n        <span class=\"n\">pnum_</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">make_pnum_nextgen</span><span class=\"p\">(</span><span class=\"n\">nSubplots</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">rcParams</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">TMP_RC</span><span class=\"p\">)</span>\n\n        <span class=\"n\">fnum</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n        <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"n\">fnum</span><span class=\"p\">,</span> <span class=\"n\">pnum</span><span class=\"o\">=</span><span class=\"n\">pnum_</span><span class=\"p\">())</span>\n        <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">gca</span><span class=\"p\">()</span>\n\n        <span class=\"n\">xkey</span><span class=\"p\">,</span> <span class=\"n\">ykey</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;n_manual&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;merge_remain&#39;</span>\n        <span class=\"n\">datas</span> <span class=\"o\">=</span> <span class=\"n\">panel</span><span class=\"o\">.</span><span class=\"n\">sel</span><span class=\"p\">(</span><span class=\"n\">metric</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">xkey</span><span class=\"p\">,</span> <span class=\"n\">ykey</span><span class=\"p\">])</span>\n        <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">keys</span><span class=\"p\">:</span>\n            <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">datas</span><span class=\"o\">.</span><span class=\"n\">sel</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"n\">key</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"n\">colors</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">])</span>\n        <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_ylim</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_xlim</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">xpad</span><span class=\"p\">,</span> <span class=\"n\">xmax</span> <span class=\"o\">+</span> <span class=\"n\">xpad</span><span class=\"p\">)</span>\n        <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_xlabel</span><span class=\"p\">(</span><span class=\"n\">metric_nice</span><span class=\"p\">[</span><span class=\"n\">xkey</span><span class=\"p\">])</span>\n        <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_ylabel</span><span class=\"p\">(</span><span class=\"n\">metric_nice</span><span class=\"p\">[</span><span class=\"n\">ykey</span><span class=\"p\">])</span>\n        <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">legend</span><span class=\"p\">()</span>\n\n        <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"n\">fnum</span><span class=\"p\">,</span> <span class=\"n\">pnum</span><span class=\"o\">=</span><span class=\"n\">pnum_</span><span class=\"p\">())</span>\n        <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">gca</span><span class=\"p\">()</span>\n        <span class=\"n\">xkey</span><span class=\"p\">,</span> <span class=\"n\">ykey</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;n_manual&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;frac_mistake_aids&#39;</span>\n        <span class=\"n\">datas</span> <span class=\"o\">=</span> <span class=\"n\">panel</span><span class=\"o\">.</span><span class=\"n\">sel</span><span class=\"p\">(</span><span class=\"n\">metric</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">xkey</span><span class=\"p\">,</span> <span class=\"n\">ykey</span><span class=\"p\">])</span>\n        <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">keys</span><span class=\"p\">:</span>\n            <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">datas</span><span class=\"o\">.</span><span class=\"n\">sel</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"n\">key</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"n\">colors</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">])</span>\n        <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_ylim</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">datas</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">()</span> <span class=\"o\">*</span> <span class=\"mf\">1.01</span><span class=\"p\">)</span>\n        <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_xlim</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">xpad</span><span class=\"p\">,</span> <span class=\"n\">xmax</span> <span class=\"o\">+</span> <span class=\"n\">xpad</span><span class=\"p\">)</span>\n        <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_xlabel</span><span class=\"p\">(</span><span class=\"n\">metric_nice</span><span class=\"p\">[</span><span class=\"n\">xkey</span><span class=\"p\">])</span>\n        <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_ylabel</span><span class=\"p\">(</span><span class=\"n\">metric_nice</span><span class=\"p\">[</span><span class=\"n\">ykey</span><span class=\"p\">])</span>\n        <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">legend</span><span class=\"p\">()</span>\n\n        <span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">gcf</span><span class=\"p\">()</span>  <span class=\"c1\"># NOQA</span>\n        <span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">set_size_inches</span><span class=\"p\">([</span><span class=\"n\">W</span><span class=\"p\">,</span> <span class=\"n\">H</span> <span class=\"o\">*</span> <span class=\"o\">.</span><span class=\"mi\">75</span><span class=\"p\">])</span>\n        <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">adjust_subplots</span><span class=\"p\">(</span><span class=\"n\">wspace</span><span class=\"o\">=.</span><span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"n\">fig</span><span class=\"o\">=</span><span class=\"n\">fig</span><span class=\"p\">)</span>\n\n        <span class=\"n\">fpath</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dpath</span><span class=\"p\">,</span> <span class=\"s1\">&#39;simulation.png&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">imwrite</span><span class=\"p\">(</span><span class=\"n\">fpath</span><span class=\"p\">,</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">render_figure_to_image</span><span class=\"p\">(</span><span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">dpi</span><span class=\"o\">=</span><span class=\"n\">DPI</span><span class=\"p\">))</span>\n        <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argflag</span><span class=\"p\">(</span><span class=\"s1\">&#39;--diskshow&#39;</span><span class=\"p\">):</span>\n            <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">startfile</span><span class=\"p\">(</span><span class=\"n\">fpath</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"GraphExpt.draw_graphsim2\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts.postdoc.GraphExpt.draw_graphsim2\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">draw_graphsim2</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        CommandLine:</span>\n<span class=\"sd\">            python -m ibeis GraphExpt.draw graphsim2 --db PZ_MTEST --diskshow</span>\n<span class=\"sd\">            python -m ibeis GraphExpt.draw graphsim2 GZ_Master1 --diskshow</span>\n<span class=\"sd\">            python -m ibeis GraphExpt.draw graphsim2 PZ_Master1 --diskshow</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.scripts.thesis import *</span>\n<span class=\"sd\">            &gt;&gt;&gt; dbname = ut.get_argval(&#39;--db&#39;, default=&#39;GZ_Master1&#39;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; self = GraphExpt(dbname)</span>\n<span class=\"sd\">            &gt;&gt;&gt; self.draw_graphsim2()</span>\n<span class=\"sd\">            &gt;&gt;&gt; ut.show_if_requested()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">rcParams</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">TMP_RC</span><span class=\"p\">)</span>\n        <span class=\"n\">sim_results</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ensure_results</span><span class=\"p\">(</span><span class=\"s1\">&#39;graphsim&#39;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">expt_data</span> <span class=\"o\">=</span> <span class=\"n\">sim_results</span><span class=\"p\">[</span><span class=\"s1\">&#39;graph&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">metrics_df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"o\">.</span><span class=\"n\">from_dict</span><span class=\"p\">(</span><span class=\"n\">expt_data</span><span class=\"p\">[</span><span class=\"s1\">&#39;metrics&#39;</span><span class=\"p\">])</span>\n\n        <span class=\"c1\"># n_aids = sim_results[&#39;graph&#39;][&#39;graph&#39;].number_of_nodes()</span>\n        <span class=\"c1\"># metrics_df[&#39;frac_mistake_aids&#39;] = metrics_df.n_mistake_aids / n_aids</span>\n\n        <span class=\"n\">fnum</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>  <span class=\"c1\"># NOQA</span>\n        <span class=\"n\">default_flags</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;phase&#39;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;pred&#39;</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;user&#39;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;real&#39;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;error&#39;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;recover&#39;</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">plot_intervals</span><span class=\"p\">(</span><span class=\"n\">flags</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">low</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">high</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n            <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">gca</span><span class=\"p\">()</span>\n            <span class=\"n\">idxs</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">flags</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"n\">ranges</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">group_consecutives</span><span class=\"p\">(</span><span class=\"n\">idxs</span><span class=\"p\">)</span>\n            <span class=\"n\">bounds</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">),</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">a</span> <span class=\"ow\">in</span> <span class=\"n\">ranges</span> <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"n\">xdata_</span> <span class=\"o\">=</span> <span class=\"n\">xdata</span><span class=\"o\">.</span><span class=\"n\">values</span>\n\n            <span class=\"n\">xs</span><span class=\"p\">,</span> <span class=\"n\">ys</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">xdata_</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]],</span> <span class=\"p\">[</span><span class=\"n\">low</span><span class=\"p\">]</span>\n            <span class=\"k\">for</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"ow\">in</span> <span class=\"n\">bounds</span><span class=\"p\">:</span>\n                <span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"n\">x2</span> <span class=\"o\">=</span> <span class=\"n\">xdata_</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">],</span> <span class=\"n\">xdata_</span><span class=\"p\">[</span><span class=\"n\">b</span><span class=\"p\">]</span>\n                <span class=\"c1\"># if x1 == x2:</span>\n                <span class=\"n\">x1</span> <span class=\"o\">-=</span> <span class=\"o\">.</span><span class=\"mi\">5</span>\n                <span class=\"n\">x2</span> <span class=\"o\">+=</span> <span class=\"o\">.</span><span class=\"mi\">5</span>\n                <span class=\"n\">xs</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">([</span><span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"n\">x2</span><span class=\"p\">,</span> <span class=\"n\">x2</span><span class=\"p\">])</span>\n                <span class=\"n\">ys</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">([</span><span class=\"n\">low</span><span class=\"p\">,</span> <span class=\"n\">high</span><span class=\"p\">,</span> <span class=\"n\">high</span><span class=\"p\">,</span> <span class=\"n\">low</span><span class=\"p\">])</span>\n            <span class=\"n\">xs</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">xdata_</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n            <span class=\"n\">ys</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">low</span><span class=\"p\">)</span>\n            <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">fill_between</span><span class=\"p\">(</span><span class=\"n\">xs</span><span class=\"p\">,</span> <span class=\"n\">ys</span><span class=\"p\">,</span> <span class=\"n\">low</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"o\">=.</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"n\">color</span><span class=\"p\">)</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">overlay_actions</span><span class=\"p\">(</span><span class=\"n\">ymax</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">kw</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n            <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">            Draws indicators that detail the algorithm state at given</span>\n<span class=\"sd\">            timestamps.</span>\n<span class=\"sd\">            &quot;&quot;&quot;</span>\n\n            <span class=\"n\">phase</span> <span class=\"o\">=</span> <span class=\"n\">metrics_df</span><span class=\"p\">[</span><span class=\"s1\">&#39;phase&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span>\n                <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;_&#39;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n            <span class=\"n\">is_correct</span> <span class=\"o\">=</span> <span class=\"n\">metrics_df</span><span class=\"p\">[</span><span class=\"s1\">&#39;test_action&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span>\n                <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">&#39;correct&#39;</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">values</span>\n            <span class=\"n\">recovering</span> <span class=\"o\">=</span> <span class=\"n\">metrics_df</span><span class=\"p\">[</span><span class=\"s1\">&#39;recovering&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span>\n            <span class=\"n\">is_auto</span> <span class=\"o\">=</span> <span class=\"n\">metrics_df</span><span class=\"p\">[</span><span class=\"s1\">&#39;user_id&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span>\n                <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">&#39;algo:&#39;</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">values</span>\n            <span class=\"n\">ppos</span> <span class=\"o\">=</span> <span class=\"n\">metrics_df</span><span class=\"p\">[</span><span class=\"s1\">&#39;pred_decision&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span>\n                <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"n\">POSTV</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">values</span>\n            <span class=\"n\">rpos</span> <span class=\"o\">=</span> <span class=\"n\">metrics_df</span><span class=\"p\">[</span><span class=\"s1\">&#39;true_decision&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span>\n                <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"n\">POSTV</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">values</span>\n            <span class=\"c1\"># ymax = max(metrics_df[&#39;n_errors&#39;])</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">kw</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">kw</span> <span class=\"o\">=</span> <span class=\"n\">default_flags</span>\n\n            <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">kw</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">())</span>\n            <span class=\"n\">steps</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">num</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">ymax</span>\n            <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n\n            <span class=\"k\">def</span> <span class=\"nf\">stacked_interval</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">):</span>\n                <span class=\"n\">plot_intervals</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"p\">,</span> <span class=\"n\">low</span><span class=\"o\">=</span><span class=\"n\">steps</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">high</span><span class=\"o\">=</span><span class=\"n\">steps</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">kw</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;user&#39;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">):</span>\n                <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">absolute_text</span><span class=\"p\">((</span><span class=\"o\">.</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">steps</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">:</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()),</span>\n                                 <span class=\"s1\">&#39;user(algo=gold,manual=blue)&#39;</span><span class=\"p\">)</span>\n                <span class=\"n\">stacked_interval</span><span class=\"p\">(</span><span class=\"n\">is_auto</span><span class=\"p\">,</span> <span class=\"s1\">&#39;gold&#39;</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">)</span>\n                <span class=\"n\">stacked_interval</span><span class=\"p\">(</span><span class=\"o\">~</span><span class=\"n\">is_auto</span><span class=\"p\">,</span> <span class=\"s1\">&#39;blue&#39;</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">kw</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;pred&#39;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">):</span>\n                <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">absolute_text</span><span class=\"p\">((</span><span class=\"o\">.</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">steps</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">:</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()),</span> <span class=\"s1\">&#39;pred_pos&#39;</span><span class=\"p\">)</span>\n                <span class=\"n\">stacked_interval</span><span class=\"p\">(</span><span class=\"n\">ppos</span><span class=\"p\">,</span> <span class=\"s1\">&#39;aqua&#39;</span><span class=\"p\">,</span> <span class=\"n\">low</span><span class=\"o\">=</span><span class=\"n\">steps</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">high</span><span class=\"o\">=</span><span class=\"n\">steps</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n                <span class=\"c1\"># stacked_interval(~ppos, &#39;salmon&#39;, i)</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">kw</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;real&#39;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">):</span>\n                <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">absolute_text</span><span class=\"p\">((</span><span class=\"o\">.</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">steps</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">:</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()),</span> <span class=\"s1\">&#39;real_merge&#39;</span><span class=\"p\">)</span>\n                <span class=\"n\">stacked_interval</span><span class=\"p\">(</span><span class=\"n\">rpos</span><span class=\"p\">,</span> <span class=\"s1\">&#39;lime&#39;</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">)</span>\n                <span class=\"c1\"># stacked_interval(~ppos, &#39;salmon&#39;, i)</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">kw</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;error&#39;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">):</span>\n                <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">absolute_text</span><span class=\"p\">((</span><span class=\"o\">.</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">steps</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">:</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()),</span> <span class=\"s1\">&#39;is_error&#39;</span><span class=\"p\">)</span>\n                <span class=\"c1\"># stacked_interval(is_correct, &#39;blue&#39;, low=steps[i], high=steps[i + 1])</span>\n                <span class=\"n\">stacked_interval</span><span class=\"p\">(</span><span class=\"o\">~</span><span class=\"n\">is_correct</span><span class=\"p\">,</span> <span class=\"s1\">&#39;red&#39;</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">kw</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;recover&#39;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">):</span>\n                <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">absolute_text</span><span class=\"p\">((</span><span class=\"o\">.</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">steps</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">:</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()),</span> <span class=\"s1\">&#39;is_recovering&#39;</span><span class=\"p\">)</span>\n                <span class=\"n\">stacked_interval</span><span class=\"p\">(</span><span class=\"n\">recovering</span><span class=\"p\">,</span> <span class=\"s1\">&#39;orange&#39;</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">kw</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;phase&#39;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">):</span>\n                <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">absolute_text</span><span class=\"p\">((</span><span class=\"o\">.</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">steps</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">:</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()),</span>\n                                 <span class=\"s1\">&#39;phase(1=yellow, 2=aqua, 3=pink)&#39;</span><span class=\"p\">)</span>\n                <span class=\"n\">stacked_interval</span><span class=\"p\">(</span><span class=\"n\">phase</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;ranking&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;yellow&#39;</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">)</span>\n                <span class=\"n\">stacked_interval</span><span class=\"p\">(</span><span class=\"n\">phase</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;posredun&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;aqua&#39;</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">)</span>\n                <span class=\"n\">stacked_interval</span><span class=\"p\">(</span><span class=\"n\">phase</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;negredun&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;pink&#39;</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">)</span>\n                <span class=\"c1\"># stacked_interval(phase == &#39;ranking&#39;, &#39;red&#39;, i)</span>\n                <span class=\"c1\"># stacked_interval(phase == &#39;posredun&#39;, &#39;green&#39;, i)</span>\n                <span class=\"c1\"># stacked_interval(phase == &#39;negredun&#39;, &#39;blue&#39;, i)</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">accuracy_plot</span><span class=\"p\">(</span><span class=\"n\">xdata</span><span class=\"p\">,</span> <span class=\"n\">xlabel</span><span class=\"p\">):</span>\n            <span class=\"n\">ydatas</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">odict</span><span class=\"p\">([</span>\n                <span class=\"p\">(</span><span class=\"s1\">&#39;Graph&#39;</span><span class=\"p\">,</span>  <span class=\"n\">metrics_df</span><span class=\"p\">[</span><span class=\"s1\">&#39;merge_remain&#39;</span><span class=\"p\">]),</span>\n            <span class=\"p\">])</span>\n            <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">multi_plot</span><span class=\"p\">(</span>\n                <span class=\"n\">xdata</span><span class=\"p\">,</span> <span class=\"n\">ydatas</span><span class=\"p\">,</span> <span class=\"n\">marker</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"n\">markersize</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n                <span class=\"n\">xlabel</span><span class=\"o\">=</span><span class=\"n\">xlabel</span><span class=\"p\">,</span> <span class=\"n\">ylabel</span><span class=\"o\">=</span><span class=\"s1\">&#39;fraction of merge remaining&#39;</span><span class=\"p\">,</span>\n                <span class=\"n\">ymin</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">rcParams</span><span class=\"o\">=</span><span class=\"n\">TMP_RC</span><span class=\"p\">,</span>\n                <span class=\"n\">use_legend</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">pnum</span><span class=\"o\">=</span><span class=\"n\">pnum_</span><span class=\"p\">(),</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">error_plot</span><span class=\"p\">(</span><span class=\"n\">xdata</span><span class=\"p\">,</span> <span class=\"n\">xlabel</span><span class=\"p\">):</span>\n            <span class=\"c1\"># ykeys = [&#39;n_errors&#39;]</span>\n            <span class=\"n\">ykeys</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;frac_mistake_aids&#39;</span><span class=\"p\">]</span>\n            <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">multi_plot</span><span class=\"p\">(</span>\n                <span class=\"n\">xdata</span><span class=\"p\">,</span> <span class=\"n\">metrics_df</span><span class=\"p\">[</span><span class=\"n\">ykeys</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">,</span>\n                <span class=\"n\">xlabel</span><span class=\"o\">=</span><span class=\"n\">xlabel</span><span class=\"p\">,</span>\n                <span class=\"n\">ylabel</span><span class=\"o\">=</span><span class=\"s1\">&#39;fraction error annots&#39;</span><span class=\"p\">,</span>\n                <span class=\"n\">marker</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"n\">markersize</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ymin</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">rcParams</span><span class=\"o\">=</span><span class=\"n\">TMP_RC</span><span class=\"p\">,</span>\n                <span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">pnum</span><span class=\"o\">=</span><span class=\"n\">pnum_</span><span class=\"p\">(),</span>\n                <span class=\"n\">use_legend</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">refresh_plot</span><span class=\"p\">(</span><span class=\"n\">xdata</span><span class=\"p\">,</span> <span class=\"n\">xlabel</span><span class=\"p\">):</span>\n            <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">multi_plot</span><span class=\"p\">(</span>\n                <span class=\"n\">xdata</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">metrics_df</span><span class=\"p\">[</span><span class=\"s1\">&#39;pprob_any&#39;</span><span class=\"p\">]],</span>\n                <span class=\"n\">label_list</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;P(C=1)&#39;</span><span class=\"p\">],</span>\n                <span class=\"n\">xlabel</span><span class=\"o\">=</span><span class=\"n\">xlabel</span><span class=\"p\">,</span> <span class=\"n\">ylabel</span><span class=\"o\">=</span><span class=\"s1\">&#39;refresh criteria&#39;</span><span class=\"p\">,</span>\n                <span class=\"n\">marker</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"n\">ymin</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">ymax</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">rcParams</span><span class=\"o\">=</span><span class=\"n\">TMP_RC</span><span class=\"p\">,</span>\n                <span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">pnum</span><span class=\"o\">=</span><span class=\"n\">pnum_</span><span class=\"p\">(),</span>\n                <span class=\"n\">use_legend</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">gca</span><span class=\"p\">()</span>\n            <span class=\"n\">thresh</span> <span class=\"o\">=</span> <span class=\"n\">expt_data</span><span class=\"p\">[</span><span class=\"s1\">&#39;refresh_thresh&#39;</span><span class=\"p\">]</span>\n            <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">([</span><span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">xdata</span><span class=\"p\">),</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">xdata</span><span class=\"p\">)],</span> <span class=\"p\">[</span><span class=\"n\">thresh</span><span class=\"p\">,</span> <span class=\"n\">thresh</span><span class=\"p\">],</span> <span class=\"s1\">&#39;-g&#39;</span><span class=\"p\">,</span>\n                    <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">&#39;refresh thresh&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">legend</span><span class=\"p\">()</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">error_breakdown_plot</span><span class=\"p\">(</span><span class=\"n\">xdata</span><span class=\"p\">,</span> <span class=\"n\">xlabel</span><span class=\"p\">):</span>\n            <span class=\"n\">ykeys</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;n_fn&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;n_fp&#39;</span><span class=\"p\">]</span>\n            <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">multi_plot</span><span class=\"p\">(</span>\n                <span class=\"n\">xdata</span><span class=\"p\">,</span> <span class=\"n\">metrics_df</span><span class=\"p\">[</span><span class=\"n\">ykeys</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">,</span>\n                <span class=\"n\">label_list</span><span class=\"o\">=</span><span class=\"n\">ykeys</span><span class=\"p\">,</span>\n                <span class=\"n\">xlabel</span><span class=\"o\">=</span><span class=\"n\">xlabel</span><span class=\"p\">,</span> <span class=\"n\">ylabel</span><span class=\"o\">=</span><span class=\"s1\">&#39;# of errors&#39;</span><span class=\"p\">,</span>\n                <span class=\"n\">marker</span><span class=\"o\">=</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">,</span> <span class=\"n\">markersize</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ymin</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">rcParams</span><span class=\"o\">=</span><span class=\"n\">TMP_RC</span><span class=\"p\">,</span>\n                <span class=\"n\">ymax</span><span class=\"o\">=</span><span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">metrics_df</span><span class=\"p\">[</span><span class=\"s1\">&#39;n_errors&#39;</span><span class=\"p\">]),</span>\n                <span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">pnum</span><span class=\"o\">=</span><span class=\"n\">pnum_</span><span class=\"p\">(),</span>\n                <span class=\"n\">use_legend</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">neg_redun_plot</span><span class=\"p\">(</span><span class=\"n\">xdata</span><span class=\"p\">,</span> <span class=\"n\">xlabel</span><span class=\"p\">):</span>\n            <span class=\"n\">n_pred</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">sim_results</span><span class=\"p\">[</span><span class=\"s1\">&#39;graph&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;pred_ccs&#39;</span><span class=\"p\">])</span>\n            <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">n_pred</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">n_pred</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"o\">/</span> <span class=\"mi\">2</span>\n\n            <span class=\"n\">metrics_df</span><span class=\"p\">[</span><span class=\"s1\">&#39;p_neg_redun&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">metrics_df</span><span class=\"p\">[</span><span class=\"s1\">&#39;n_neg_redun&#39;</span><span class=\"p\">]</span> <span class=\"o\">/</span> <span class=\"n\">z</span>\n            <span class=\"n\">metrics_df</span><span class=\"p\">[</span><span class=\"s1\">&#39;p_neg_redun1&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">metrics_df</span><span class=\"p\">[</span><span class=\"s1\">&#39;n_neg_redun1&#39;</span><span class=\"p\">]</span> <span class=\"o\">/</span> <span class=\"n\">z</span>\n\n            <span class=\"n\">ykeys</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;p_neg_redun&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;p_neg_redun1&#39;</span><span class=\"p\">]</span>\n            <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">multi_plot</span><span class=\"p\">(</span>\n                <span class=\"n\">xdata</span><span class=\"p\">,</span> <span class=\"n\">metrics_df</span><span class=\"p\">[</span><span class=\"n\">ykeys</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">,</span>\n                <span class=\"n\">label_list</span><span class=\"o\">=</span><span class=\"n\">ykeys</span><span class=\"p\">,</span>\n                <span class=\"n\">xlabel</span><span class=\"o\">=</span><span class=\"n\">xlabel</span><span class=\"p\">,</span> <span class=\"n\">ylabel</span><span class=\"o\">=</span><span class=\"s1\">&#39;% neg-redun-meta-edges&#39;</span><span class=\"p\">,</span>\n                <span class=\"n\">marker</span><span class=\"o\">=</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">,</span> <span class=\"n\">markersize</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ymin</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">rcParams</span><span class=\"o\">=</span><span class=\"n\">TMP_RC</span><span class=\"p\">,</span>\n                <span class=\"n\">ymax</span><span class=\"o\">=</span><span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">metrics_df</span><span class=\"p\">[</span><span class=\"s1\">&#39;p_neg_redun1&#39;</span><span class=\"p\">]),</span>\n                <span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">pnum</span><span class=\"o\">=</span><span class=\"n\">pnum_</span><span class=\"p\">(),</span>\n                <span class=\"n\">use_legend</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"n\">pnum_</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">make_pnum_nextgen</span><span class=\"p\">(</span><span class=\"n\">nRows</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">nSubplots</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># --- ROW 1 ---</span>\n        <span class=\"n\">xdata</span> <span class=\"o\">=</span> <span class=\"n\">metrics_df</span><span class=\"p\">[</span><span class=\"s1\">&#39;n_decision&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">xlabel</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;# decisions&#39;</span>\n\n        <span class=\"n\">accuracy_plot</span><span class=\"p\">(</span><span class=\"n\">xdata</span><span class=\"p\">,</span> <span class=\"n\">xlabel</span><span class=\"p\">)</span>\n        <span class=\"c1\"># overlay_actions(1)</span>\n\n        <span class=\"n\">error_plot</span><span class=\"p\">(</span><span class=\"n\">xdata</span><span class=\"p\">,</span> <span class=\"n\">xlabel</span><span class=\"p\">)</span>\n        <span class=\"n\">overlay_actions</span><span class=\"p\">(</span><span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">metrics_df</span><span class=\"p\">[</span><span class=\"s1\">&#39;frac_mistake_aids&#39;</span><span class=\"p\">]))</span>\n        <span class=\"c1\"># overlay_actions(max(metrics_df[&#39;n_errors&#39;]))</span>\n\n        <span class=\"c1\"># refresh_plot(xdata, xlabel)</span>\n        <span class=\"c1\"># overlay_actions(1, {&#39;phase&#39;: True})</span>\n\n        <span class=\"c1\"># error_breakdown_plot(xdata, xlabel)</span>\n        <span class=\"n\">neg_redun_plot</span><span class=\"p\">(</span><span class=\"n\">xdata</span><span class=\"p\">,</span> <span class=\"n\">xlabel</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># --- ROW 2 ---</span>\n        <span class=\"n\">xdata</span> <span class=\"o\">=</span> <span class=\"n\">metrics_df</span><span class=\"p\">[</span><span class=\"s1\">&#39;n_manual&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">xlabel</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;# manual reviews&#39;</span>\n\n        <span class=\"n\">accuracy_plot</span><span class=\"p\">(</span><span class=\"n\">xdata</span><span class=\"p\">,</span> <span class=\"n\">xlabel</span><span class=\"p\">)</span>\n        <span class=\"c1\"># overlay_actions(1)</span>\n\n        <span class=\"n\">error_plot</span><span class=\"p\">(</span><span class=\"n\">xdata</span><span class=\"p\">,</span> <span class=\"n\">xlabel</span><span class=\"p\">)</span>\n        <span class=\"n\">overlay_actions</span><span class=\"p\">(</span><span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">metrics_df</span><span class=\"p\">[</span><span class=\"s1\">&#39;frac_mistake_aids&#39;</span><span class=\"p\">]))</span>\n        <span class=\"c1\"># overlay_actions(max(metrics_df[&#39;n_errors&#39;]))</span>\n\n        <span class=\"c1\"># refresh_plot(xdata, xlabel)</span>\n        <span class=\"c1\"># overlay_actions(1, {&#39;phase&#39;: True})</span>\n\n        <span class=\"c1\"># error_breakdown_plot(xdata, xlabel)</span>\n        <span class=\"n\">neg_redun_plot</span><span class=\"p\">(</span><span class=\"n\">xdata</span><span class=\"p\">,</span> <span class=\"n\">xlabel</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># fpath = join(self.dpath, expt_name + &#39;2&#39; + &#39;.png&#39;)</span>\n        <span class=\"c1\"># fig = pt.gcf()  # NOQA</span>\n        <span class=\"c1\"># fig.set_size_inches([W * 1.5, H * 1.1])</span>\n        <span class=\"c1\"># vt.imwrite(fpath, pt.render_figure_to_image(fig, dpi=DPI))</span>\n        <span class=\"c1\"># if ut.get_argflag(&#39;--diskshow&#39;):</span>\n        <span class=\"c1\">#     ut.startfile(fpath)</span>\n        <span class=\"c1\"># fig.save_fig</span>\n\n        <span class=\"c1\"># if 1:</span>\n        <span class=\"c1\">#     pt.figure(fnum=fnum, pnum=(2, 2, 4))</span>\n        <span class=\"c1\">#     overlay_actions(ymax=1)</span>\n        <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">set_figtitle</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dbname</span><span class=\"p\">)</span>\n\n        <span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">gcf</span><span class=\"p\">()</span>  <span class=\"c1\"># NOQA</span>\n        <span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">set_size_inches</span><span class=\"p\">([</span><span class=\"n\">W</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">H</span> <span class=\"o\">*</span> <span class=\"mf\">2.5</span><span class=\"p\">])</span>\n        <span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">suptitle</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dbname</span><span class=\"p\">)</span>\n        <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">adjust_subplots</span><span class=\"p\">(</span><span class=\"n\">hspace</span><span class=\"o\">=.</span><span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"n\">wspace</span><span class=\"o\">=.</span><span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"n\">fig</span><span class=\"o\">=</span><span class=\"n\">fig</span><span class=\"p\">)</span>\n        <span class=\"n\">fpath</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dpath</span><span class=\"p\">,</span> <span class=\"s1\">&#39;graphsim2.png&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"n\">fpath</span><span class=\"p\">,</span> <span class=\"n\">dpi</span><span class=\"o\">=</span><span class=\"n\">DPI</span><span class=\"p\">)</span>\n        <span class=\"c1\"># vt.imwrite(fpath, pt.render_figure_to_image(fig, dpi=DPI))</span>\n        <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argflag</span><span class=\"p\">(</span><span class=\"s1\">&#39;--diskshow&#39;</span><span class=\"p\">):</span>\n            <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">startfile</span><span class=\"p\">(</span><span class=\"n\">fpath</span><span class=\"p\">)</span></div></div>\n\n\n<div class=\"viewcode-block\" id=\"draw_match_states\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts.postdoc.draw_match_states\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">draw_match_states</span><span class=\"p\">():</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">ibeis</span>\n    <span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">AnnotInference</span><span class=\"p\">(</span><span class=\"s1\">&#39;PZ_Master1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;all&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">dbname</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;PZ_Master1&#39;</span><span class=\"p\">:</span>\n        <span class=\"c1\"># [UUID(&#39;0cb1ebf5-2a4f-4b80-b172-1b449b8370cf&#39;),</span>\n        <span class=\"c1\">#  UUID(&#39;cd644b73-7978-4a5f-b570-09bb631daa75&#39;)]</span>\n        <span class=\"n\">chosen</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"n\">POSTV</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">17095</span><span class=\"p\">,</span> <span class=\"mi\">17225</span><span class=\"p\">),</span>\n            <span class=\"n\">NEGTV</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">3966</span><span class=\"p\">,</span> <span class=\"mi\">5080</span><span class=\"p\">),</span>\n            <span class=\"n\">INCMP</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">3197</span><span class=\"p\">,</span> <span class=\"mi\">8455</span><span class=\"p\">),</span>\n        <span class=\"p\">}</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">reset_feedback</span><span class=\"p\">(</span><span class=\"s1\">&#39;staging&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">chosen</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"n\">POSTV</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">())[</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n            <span class=\"n\">NEGTV</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">neg_graph</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">())[</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n            <span class=\"n\">INCMP</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">incmp_graph</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">())[</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n        <span class=\"p\">}</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">plottool</span> <span class=\"k\">as</span> <span class=\"nn\">pt</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">vtool</span> <span class=\"k\">as</span> <span class=\"nn\">vt</span>\n    <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">edge</span> <span class=\"ow\">in</span> <span class=\"n\">chosen</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n        <span class=\"n\">match</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_make_matches_from</span><span class=\"p\">([</span><span class=\"n\">edge</span><span class=\"p\">],</span> <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"p\">{</span>\n            <span class=\"s1\">&#39;match_config&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;ratio_thresh&#39;</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"mi\">7</span><span class=\"p\">}})[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">with</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">RenderingContext</span><span class=\"p\">(</span><span class=\"n\">dpi</span><span class=\"o\">=</span><span class=\"mi\">300</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">ctx</span><span class=\"p\">:</span>\n            <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">heatmask</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">show_ell</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">show_ori</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                       <span class=\"n\">show_lines</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">imwrite</span><span class=\"p\">(</span><span class=\"s1\">&#39;matchstate_&#39;</span> <span class=\"o\">+</span> <span class=\"n\">key</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;.jpg&#39;</span><span class=\"p\">,</span> <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">image</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"entropy_potential\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts.postdoc.entropy_potential\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">entropy_potential</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">decision</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Returns the number of edges this edge would invalidate</span>\n\n<span class=\"sd\">    from ibeis.algo.graph import demo</span>\n<span class=\"sd\">    infr = demo.demodata_infr(pcc_sizes=[5, 2, 4, 2, 2, 1, 1, 1])</span>\n<span class=\"sd\">    infr.refresh_candidate_edges()</span>\n<span class=\"sd\">    infr.params[&#39;redun.neg&#39;] = 1</span>\n<span class=\"sd\">    infr.params[&#39;redun.pos&#39;] = 1</span>\n<span class=\"sd\">    infr.apply_nondynamic_update()</span>\n\n<span class=\"sd\">    ut.qtensure()</span>\n<span class=\"sd\">    infr.show(show_cand=True, groupby=&#39;name_label&#39;)</span>\n\n<span class=\"sd\">    u, v = 1, 7</span>\n<span class=\"sd\">    decision = &#39;positive&#39;</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">nid2</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">node_labels</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Cases for K=1</span>\n    <span class=\"k\">if</span> <span class=\"n\">decision</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;positive&#39;</span> <span class=\"ow\">and</span> <span class=\"n\">nid1</span> <span class=\"o\">==</span> <span class=\"n\">nid2</span><span class=\"p\">:</span>\n        <span class=\"c1\"># The actual reduction is the number previously needed to make the cc</span>\n        <span class=\"c1\"># k-edge-connected vs how many its needs now.</span>\n\n        <span class=\"c1\"># In the same CC does nothing</span>\n        <span class=\"c1\"># (unless k &gt; 1, in which case check edge connectivity)</span>\n        <span class=\"k\">return</span> <span class=\"mi\">0</span>\n    <span class=\"k\">elif</span> <span class=\"n\">decision</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;positive&#39;</span> <span class=\"ow\">and</span> <span class=\"n\">nid1</span> <span class=\"o\">!=</span> <span class=\"n\">nid2</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Between two PCCs reduces the number of PCCs by one</span>\n        <span class=\"n\">n_ccs</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">number_of_components</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Find needed negative redundency when appart</span>\n        <span class=\"k\">if</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">neg_redun_metagraph</span><span class=\"o\">.</span><span class=\"n\">has_node</span><span class=\"p\">(</span><span class=\"n\">nid1</span><span class=\"p\">):</span>\n            <span class=\"n\">neg_redun_set1</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">neg_redun_metagraph</span><span class=\"o\">.</span><span class=\"n\">neighbors</span><span class=\"p\">(</span><span class=\"n\">nid1</span><span class=\"p\">))</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">neg_redun_set1</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">()</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">neg_redun_metagraph</span><span class=\"o\">.</span><span class=\"n\">has_node</span><span class=\"p\">(</span><span class=\"n\">nid2</span><span class=\"p\">):</span>\n            <span class=\"n\">neg_redun_set2</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">neg_redun_metagraph</span><span class=\"o\">.</span><span class=\"n\">neighbors</span><span class=\"p\">(</span><span class=\"n\">nid2</span><span class=\"p\">))</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">neg_redun_set2</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># The number of negative edges needed before we place this edge</span>\n        <span class=\"c1\"># is the number of PCCs that each PCC doesnt have a negative edge to</span>\n        <span class=\"c1\"># yet</span>\n\n        <span class=\"n\">n_neg_need1</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">n_ccs</span> <span class=\"o\">-</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">neg_redun_set1</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">n_neg_need2</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">n_ccs</span> <span class=\"o\">-</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">neg_redun_set2</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">n_neg_need_before</span> <span class=\"o\">=</span> <span class=\"n\">n_neg_need1</span> <span class=\"o\">+</span> <span class=\"n\">n_neg_need2</span>\n\n        <span class=\"c1\"># After we join them we take the union of their negative redundancy</span>\n        <span class=\"c1\"># (really we should check if it changes after)</span>\n        <span class=\"c1\"># and this is now the new number of negative edges that would be needed</span>\n        <span class=\"n\">neg_redun_after</span> <span class=\"o\">=</span> <span class=\"n\">neg_redun_set1</span><span class=\"o\">.</span><span class=\"n\">union</span><span class=\"p\">(</span><span class=\"n\">neg_redun_set2</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"p\">{</span><span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">nid2</span><span class=\"p\">}</span>\n        <span class=\"n\">n_neg_need_after</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">n_ccs</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">neg_redun_after</span><span class=\"p\">)</span>\n\n        <span class=\"n\">neg_entropy</span> <span class=\"o\">=</span> <span class=\"n\">n_neg_need_before</span> <span class=\"o\">-</span> <span class=\"n\">n_neg_need_after</span>  <span class=\"c1\"># NOQA</span></div>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_find_good_match_states</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"p\">):</span>\n    <span class=\"n\">pos_edges</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">())</span>\n    <span class=\"n\">timedelta</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_pair_timedelta</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">edges</span><span class=\"p\">))</span>\n    <span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">pos_edges</span><span class=\"p\">,</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">argsort</span><span class=\"p\">(</span><span class=\"n\">timedelta</span><span class=\"p\">))[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n    <span class=\"n\">wgt</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">qt_edge_reviewer</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">)</span>\n\n    <span class=\"n\">neg_edges</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">shuffle</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">neg_graph</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">()))</span>\n    <span class=\"n\">wgt</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">qt_edge_reviewer</span><span class=\"p\">(</span><span class=\"n\">neg_edges</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">incomp_graph</span><span class=\"o\">.</span><span class=\"n\">number_of_edges</span><span class=\"p\">()</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"n\">incmp_edges</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">incomp_graph</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">())</span>\n        <span class=\"k\">if</span> <span class=\"kc\">False</span><span class=\"p\">:</span>\n            <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">ibs</span>\n            <span class=\"c1\"># a1, a2 = map(ibs.annots, zip(*incmp_edges))</span>\n            <span class=\"c1\"># q1 = np.array(ut.replace_nones(a1.qual, np.nan))</span>\n            <span class=\"c1\"># q2 = np.array(ut.replace_nones(a2.qual, np.nan))</span>\n            <span class=\"c1\"># edges = ut.compress(incmp_edges,</span>\n            <span class=\"c1\">#                     ((q1 &gt; 3) | np.isnan(q1)) &amp;</span>\n            <span class=\"c1\">#                     ((q2 &gt; 3) | np.isnan(q2)))</span>\n\n            <span class=\"c1\"># a = ibs.annots(asarray=True)</span>\n            <span class=\"c1\"># flags = [t is not None and &#39;right&#39; == t for t in a.viewpoint_code]</span>\n            <span class=\"c1\"># r = a.compress(flags)</span>\n            <span class=\"c1\"># flags = [q is not None and q &gt; 4 for q in r.qual]</span>\n\n            <span class=\"n\">rights</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">filter_annots_general</span><span class=\"p\">(</span><span class=\"n\">view</span><span class=\"o\">=</span><span class=\"s1\">&#39;right&#39;</span><span class=\"p\">,</span>\n                                               <span class=\"n\">minqual</span><span class=\"o\">=</span><span class=\"s1\">&#39;excellent&#39;</span><span class=\"p\">,</span>\n                                               <span class=\"n\">require_quality</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                                               <span class=\"n\">require_viewpoint</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"n\">lefts</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">filter_annots_general</span><span class=\"p\">(</span><span class=\"n\">view</span><span class=\"o\">=</span><span class=\"s1\">&#39;left&#39;</span><span class=\"p\">,</span>\n                                              <span class=\"n\">minqual</span><span class=\"o\">=</span><span class=\"s1\">&#39;excellent&#39;</span><span class=\"p\">,</span>\n                                              <span class=\"n\">require_quality</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                                              <span class=\"n\">require_viewpoint</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"kc\">False</span><span class=\"p\">:</span>\n                <span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_make_rankings</span><span class=\"p\">(</span><span class=\"mi\">3197</span><span class=\"p\">,</span> <span class=\"n\">rights</span><span class=\"p\">))</span>\n                <span class=\"n\">wgt</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">qt_edge_reviewer</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">)</span>\n\n            <span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">random_product</span><span class=\"p\">((</span><span class=\"n\">rights</span><span class=\"p\">,</span> <span class=\"n\">lefts</span><span class=\"p\">),</span> <span class=\"n\">num</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">rng</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">))</span>\n            <span class=\"n\">wgt</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">qt_edge_reviewer</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">)</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">edge</span> <span class=\"ow\">in</span> <span class=\"n\">incmp_edges</span><span class=\"p\">:</span>\n            <span class=\"n\">match</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_make_matches_from</span><span class=\"p\">([</span><span class=\"n\">edge</span><span class=\"p\">])[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"c1\"># infr._debug_edge_gt(edge)</span>\n\n\n<div class=\"viewcode-block\" id=\"prepare_cdfs\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts.postdoc.prepare_cdfs\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">prepare_cdfs</span><span class=\"p\">(</span><span class=\"n\">cdfs</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"p\">):</span>\n    <span class=\"n\">cdfs</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">pad_vstack</span><span class=\"p\">(</span><span class=\"n\">cdfs</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Sort so the best is on top</span>\n    <span class=\"n\">sortx</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">lexsort</span><span class=\"p\">(</span><span class=\"n\">cdfs</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n    <span class=\"n\">cdfs</span> <span class=\"o\">=</span> <span class=\"n\">cdfs</span><span class=\"p\">[</span><span class=\"n\">sortx</span><span class=\"p\">]</span>\n    <span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">labels</span><span class=\"p\">,</span> <span class=\"n\">sortx</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">cdfs</span><span class=\"p\">,</span> <span class=\"n\">labels</span></div>\n\n\n<div class=\"viewcode-block\" id=\"plot_cmcs\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts.postdoc.plot_cmcs\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">plot_cmcs</span><span class=\"p\">(</span><span class=\"n\">cdfs</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"p\">,</span> <span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">pnum</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">ymin</span><span class=\"o\">=.</span><span class=\"mi\">4</span><span class=\"p\">):</span>\n    <span class=\"n\">cdfs</span><span class=\"p\">,</span> <span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"n\">prepare_cdfs</span><span class=\"p\">(</span><span class=\"n\">cdfs</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Truncte to 20 ranks</span>\n    <span class=\"n\">num_ranks</span> <span class=\"o\">=</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">cdfs</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"mi\">20</span><span class=\"p\">)</span>\n    <span class=\"n\">xdata</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">num_ranks</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">cdfs_trunc</span> <span class=\"o\">=</span> <span class=\"n\">cdfs</span><span class=\"p\">[:,</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"n\">num_ranks</span><span class=\"p\">]</span>\n    <span class=\"n\">label_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;</span><span class=\"si\">%6.3f%%</span><span class=\"s1\"> - </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">cdf</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">lbl</span><span class=\"p\">)</span>\n                  <span class=\"k\">for</span> <span class=\"n\">cdf</span><span class=\"p\">,</span> <span class=\"n\">lbl</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">cdfs_trunc</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"p\">)]</span>\n\n    <span class=\"c1\"># ymin = .4</span>\n    <span class=\"n\">num_yticks</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">10</span> <span class=\"o\">-</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">ymin</span> <span class=\"o\">*</span> <span class=\"mi\">10</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n\n    <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">multi_plot</span><span class=\"p\">(</span>\n        <span class=\"n\">xdata</span><span class=\"p\">,</span> <span class=\"n\">cdfs_trunc</span><span class=\"p\">,</span> <span class=\"n\">label_list</span><span class=\"o\">=</span><span class=\"n\">label_list</span><span class=\"p\">,</span>\n        <span class=\"n\">xlabel</span><span class=\"o\">=</span><span class=\"s1\">&#39;rank&#39;</span><span class=\"p\">,</span> <span class=\"n\">ylabel</span><span class=\"o\">=</span><span class=\"s1\">&#39;match probability&#39;</span><span class=\"p\">,</span>\n        <span class=\"n\">use_legend</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">legend_loc</span><span class=\"o\">=</span><span class=\"s1\">&#39;lower right&#39;</span><span class=\"p\">,</span> <span class=\"n\">num_yticks</span><span class=\"o\">=</span><span class=\"n\">num_yticks</span><span class=\"p\">,</span>\n        <span class=\"n\">ymax</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ymin</span><span class=\"o\">=</span><span class=\"n\">ymin</span><span class=\"p\">,</span> <span class=\"n\">ypad</span><span class=\"o\">=.</span><span class=\"mi\">005</span><span class=\"p\">,</span> <span class=\"n\">xmin</span><span class=\"o\">=.</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"n\">num_xticks</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n        <span class=\"n\">xmax</span><span class=\"o\">=</span><span class=\"n\">num_ranks</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"o\">.</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n        <span class=\"n\">pnum</span><span class=\"o\">=</span><span class=\"n\">pnum</span><span class=\"p\">,</span> <span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"n\">fnum</span><span class=\"p\">,</span>\n        <span class=\"n\">rcParams</span><span class=\"o\">=</span><span class=\"n\">TMP_RC</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">gcf</span><span class=\"p\">()</span></div>\n\n\n<div class=\"viewcode-block\" id=\"VerifierExpt\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts.postdoc.VerifierExpt\">[docs]</a><span class=\"nd\">@ut</span><span class=\"o\">.</span><span class=\"n\">reloadable_class</span>\n<span class=\"k\">class</span> <span class=\"nc\">VerifierExpt</span><span class=\"p\">(</span><span class=\"n\">DBInputs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Collect data from experiments to visualize</span>\n\n<span class=\"sd\">    python -m ibeis VerifierExpt.measure all PZ_Master1.GZ_Master1,GIRM_Master1,MantaMatcher,RotanTurtles,humpbacks_fb,LF_ALL</span>\n<span class=\"sd\">    python -m ibeis VerifierExpt.measure all GIRM_Master1,PZ_Master1,LF_ALL</span>\n<span class=\"sd\">    python -m ibeis VerifierExpt.measure all LF_ALL</span>\n<span class=\"sd\">    python -m ibeis VerifierExpt.measure all PZ_Master1</span>\n\n<span class=\"sd\">    python -m ibeis VerifierExpt.measure all MantaMatcher</span>\n<span class=\"sd\">    python -m ibeis VerifierExpt.draw all MantaMatcher</span>\n\n<span class=\"sd\">    python -m ibeis VerifierExpt.draw rerank PZ_Master1</span>\n\n<span class=\"sd\">    python -m ibeis VerifierExpt.measure all RotanTurtles</span>\n<span class=\"sd\">    python -m ibeis VerifierExpt.draw all RotanTurtles</span>\n\n<span class=\"sd\">    Ignore:</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.scripts.postdoc import *</span>\n<span class=\"sd\">        &gt;&gt;&gt; fpath = ut.glob(ut.truepath(&#39;~/Desktop/mtest_plots&#39;), &#39;*.pkl&#39;)[0]</span>\n<span class=\"sd\">        &gt;&gt;&gt; self = ut.load_data(fpath)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\"># base_dpath = ut.truepath(&#39;~/Desktop/pair_expts&#39;)</span>\n    <span class=\"n\">base_dpath</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">truepath</span><span class=\"p\">(</span><span class=\"s1\">&#39;~/latex/crall-iccvw-2017/figures&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"n\">agg_dbnames</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"s1\">&#39;PZ_Master1&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;GZ_Master1&#39;</span><span class=\"p\">,</span>\n        <span class=\"c1\"># &#39;LF_ALL&#39;,</span>\n        <span class=\"s1\">&#39;MantaMatcher&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;RotanTurtles&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;humpbacks_fb&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;GIRM_Master1&#39;</span><span class=\"p\">,</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"n\">task_nice_lookup</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">&#39;match_state&#39;</span><span class=\"p\">:</span> <span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">EVIDENCE_DECISION</span><span class=\"o\">.</span><span class=\"n\">CODE_TO_NICE</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;photobomb_state&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;pb&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Photobomb&#39;</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;notpb&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Not Photobomb&#39;</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_setup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">quick</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        CommandLine:</span>\n<span class=\"sd\">            python -m ibeis VerifierExpt._setup --db GZ_Master1</span>\n\n<span class=\"sd\">            python -m ibeis VerifierExpt._setup --db PZ_Master1 --eval</span>\n<span class=\"sd\">            python -m ibeis VerifierExpt._setup --db PZ_MTEST</span>\n<span class=\"sd\">            python -m ibeis VerifierExpt._setup --db PZ_PB_RF_TRAIN</span>\n\n<span class=\"sd\">            python -m ibeis VerifierExpt.measure_all --db PZ_PB_RF_TRAIN</span>\n\n<span class=\"sd\">            python -m ibeis VerifierExpt.measure all GZ_Master1</span>\n<span class=\"sd\">            python -m ibeis VerifierExpt.measure all RotanTurtles --show</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.scripts.postdoc import *</span>\n<span class=\"sd\">            &gt;&gt;&gt; dbname = ut.get_argval(&#39;--db&#39;, default=&#39;GZ_Master1&#39;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; self = VerifierExpt(dbname)</span>\n<span class=\"sd\">            &gt;&gt;&gt; self._setup()</span>\n\n<span class=\"sd\">        Ignore:</span>\n<span class=\"sd\">            from ibeis.scripts.postdoc import *</span>\n<span class=\"sd\">            self = VerifierExpt(&#39;PZ_Master1&#39;)</span>\n\n<span class=\"sd\">            from ibeis.scripts.postdoc import *</span>\n<span class=\"sd\">            self = VerifierExpt(&#39;PZ_PB_RF_TRAIN&#39;)</span>\n\n<span class=\"sd\">            from ibeis.scripts.postdoc import *</span>\n<span class=\"sd\">            self = VerifierExpt(&#39;LF_ALL&#39;)</span>\n\n<span class=\"sd\">            self = VerifierExpt(&#39;RotanTurtles&#39;)</span>\n<span class=\"sd\">            task = pblm.samples.subtasks[&#39;match_state&#39;]</span>\n<span class=\"sd\">            ind_df = task.indicator_df</span>\n<span class=\"sd\">            dist = ibs.get_annotedge_viewdist(ind_df.index.tolist())</span>\n<span class=\"sd\">            np.all(ind_df[dist &gt; 1][&#39;notcomp&#39;])</span>\n\n<span class=\"sd\">            self.ibs.print_annot_stats(aids, prefix=&#39;P&#39;)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_precollect</span><span class=\"p\">()</span>\n\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;VerifierExpt _setup()&#39;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ibs</span>\n\n        <span class=\"n\">aids</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">aids_pool</span>\n\n        <span class=\"c1\"># pblm = vsone.OneVsOneProblem.from_aids(ibs, aids, sample_method=&#39;random&#39;)</span>\n        <span class=\"n\">pblm</span> <span class=\"o\">=</span> <span class=\"n\">vsone</span><span class=\"o\">.</span><span class=\"n\">OneVsOneProblem</span><span class=\"o\">.</span><span class=\"n\">from_aids</span><span class=\"p\">(</span>\n            <span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"p\">,</span>\n            <span class=\"n\">sample_method</span><span class=\"o\">=</span><span class=\"s1\">&#39;lnbnn+random&#39;</span><span class=\"p\">,</span>\n            <span class=\"c1\"># sample_method=&#39;random&#39;,</span>\n            <span class=\"n\">n_splits</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">data_key</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;learn(sum)&#39;</span>  <span class=\"c1\"># tests without global features</span>\n        <span class=\"c1\"># data_key = &#39;learn(sum,glob)&#39;  # tests with global features</span>\n        <span class=\"c1\"># data_key = pblm.default_data_key  # same as learn(sum,glob)</span>\n\n        <span class=\"n\">clf_key</span> <span class=\"o\">=</span> <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">default_clf_key</span>\n\n        <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">eval_task_keys</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;match_state&#39;</span><span class=\"p\">]</span>\n\n        <span class=\"c1\"># test with and without globals</span>\n        <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">eval_data_keys</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;learn(sum)&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;learn(sum,glob)&#39;</span><span class=\"p\">]</span>\n        <span class=\"c1\"># pblm.eval_data_keys = [data_key]</span>\n        <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">eval_clf_keys</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">clf_key</span><span class=\"p\">]</span>\n\n        <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">ibs</span>\n        <span class=\"c1\"># pblm.samples.print_info()</span>\n\n        <span class=\"n\">species_code</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_database_species</span><span class=\"p\">(</span><span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">aids</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">species_code</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;zebra_plains&#39;</span><span class=\"p\">:</span>\n            <span class=\"n\">species</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Plains Zebras&#39;</span>\n        <span class=\"k\">if</span> <span class=\"n\">species_code</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;zebra_grevys&#39;</span><span class=\"p\">:</span>\n            <span class=\"n\">species</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Gr\u00e9vy</span><span class=\"se\">\\&#39;</span><span class=\"s1\">s Zebras&#39;</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">species</span> <span class=\"o\">=</span> <span class=\"n\">species_code</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pblm</span> <span class=\"o\">=</span> <span class=\"n\">pblm</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">species</span> <span class=\"o\">=</span> <span class=\"n\">species</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_key</span> <span class=\"o\">=</span> <span class=\"n\">data_key</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">clf_key</span> <span class=\"o\">=</span> <span class=\"n\">clf_key</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">quick</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span>\n\n        <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">setup_evaluation</span><span class=\"p\">(</span><span class=\"n\">with_simple</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">report_evaluation</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">eval_task_keys</span> <span class=\"o\">=</span> <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">eval_task_keys</span>\n\n        <span class=\"n\">cfg_prefix</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">samples</span><span class=\"p\">))</span>\n        <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">hyper_params</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_setup_links</span><span class=\"p\">(</span><span class=\"n\">cfg_prefix</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Finished setup&#39;</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"VerifierExpt.agg_dbstats\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts.postdoc.VerifierExpt.agg_dbstats\">[docs]</a>    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">agg_dbstats</span><span class=\"p\">(</span><span class=\"n\">VerifierExpt</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        CommandLine:</span>\n<span class=\"sd\">            python -m ibeis VerifierExpt.agg_dbstats</span>\n<span class=\"sd\">            python -m ibeis VerifierExpt.measure_dbstats</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.scripts.postdoc import *  # NOQA</span>\n<span class=\"sd\">            &gt;&gt;&gt; result = VerifierExpt.agg_dbstats()</span>\n<span class=\"sd\">            &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">dfs</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">dbname</span> <span class=\"ow\">in</span> <span class=\"n\">VerifierExpt</span><span class=\"o\">.</span><span class=\"n\">agg_dbnames</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span> <span class=\"o\">=</span> <span class=\"n\">VerifierExpt</span><span class=\"p\">(</span><span class=\"n\">dbname</span><span class=\"p\">)</span>\n            <span class=\"n\">info</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ensure_results</span><span class=\"p\">(</span><span class=\"s1\">&#39;dbstats&#39;</span><span class=\"p\">,</span> <span class=\"n\">nocompute</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n            <span class=\"n\">sample_info</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ensure_results</span><span class=\"p\">(</span><span class=\"s1\">&#39;sample_info&#39;</span><span class=\"p\">,</span> <span class=\"n\">nocompute</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n            <span class=\"c1\"># info = self.measure_dbstats()</span>\n            <span class=\"n\">outinfo</span> <span class=\"o\">=</span> <span class=\"n\">info</span><span class=\"p\">[</span><span class=\"s1\">&#39;outinfo&#39;</span><span class=\"p\">]</span>\n\n            <span class=\"n\">task</span> <span class=\"o\">=</span> <span class=\"n\">sample_info</span><span class=\"p\">[</span><span class=\"s1\">&#39;subtasks&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;match_state&#39;</span><span class=\"p\">]</span>\n            <span class=\"n\">y_ind</span> <span class=\"o\">=</span> <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">indicator_df</span>\n            <span class=\"n\">outinfo</span><span class=\"p\">[</span><span class=\"s1\">&#39;Positive&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">y_ind</span><span class=\"p\">[</span><span class=\"n\">POSTV</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span>\n            <span class=\"n\">outinfo</span><span class=\"p\">[</span><span class=\"s1\">&#39;Negative&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">y_ind</span><span class=\"p\">[</span><span class=\"n\">NEGTV</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span>\n            <span class=\"n\">outinfo</span><span class=\"p\">[</span><span class=\"s1\">&#39;Incomparable&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">y_ind</span><span class=\"p\">[</span><span class=\"n\">INCMP</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span>\n            <span class=\"k\">if</span> <span class=\"n\">outinfo</span><span class=\"p\">[</span><span class=\"s1\">&#39;Database&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;mantas&#39;</span><span class=\"p\">:</span>\n                <span class=\"n\">outinfo</span><span class=\"p\">[</span><span class=\"s1\">&#39;Database&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;manta rays&#39;</span>\n            <span class=\"n\">dfs</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">outinfo</span><span class=\"p\">)</span>\n            <span class=\"c1\"># labels.append(self.species_nice.capitalize())</span>\n\n        <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">dfs</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;df =</span><span class=\"se\">\\n</span><span class=\"si\">{!r}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">))</span>\n        <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">set_index</span><span class=\"p\">(</span><span class=\"s1\">&#39;Database&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n        <span class=\"n\">tabular</span> <span class=\"o\">=</span> <span class=\"n\">Tabular</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">colfmt</span><span class=\"o\">=</span><span class=\"s1\">&#39;numeric&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">tabular</span><span class=\"o\">.</span><span class=\"n\">theadify</span> <span class=\"o\">=</span> <span class=\"mi\">16</span>\n        <span class=\"n\">enc_text</span> <span class=\"o\">=</span> <span class=\"n\">tabular</span><span class=\"o\">.</span><span class=\"n\">as_tabular</span><span class=\"p\">()</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">enc_text</span><span class=\"p\">)</span>\n\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">write_to</span><span class=\"p\">(</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">VerifierExpt</span><span class=\"o\">.</span><span class=\"n\">base_dpath</span><span class=\"p\">,</span> <span class=\"s1\">&#39;agg-dbstats.tex&#39;</span><span class=\"p\">),</span> <span class=\"n\">enc_text</span><span class=\"p\">)</span>\n\n        <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">render_latex</span><span class=\"p\">(</span><span class=\"n\">enc_text</span><span class=\"p\">,</span> <span class=\"n\">dpath</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">base_dpath</span><span class=\"p\">,</span> <span class=\"n\">fname</span><span class=\"o\">=</span><span class=\"s1\">&#39;agg-dbstats&#39;</span><span class=\"p\">,</span>\n                                <span class=\"n\">preamb_extra</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;</span><span class=\"se\">\\\\</span><span class=\"s1\">usepackage</span><span class=\"si\">{makecell}</span><span class=\"s1\">&#39;</span><span class=\"p\">])</span>\n        <span class=\"n\">_</span></div>\n        <span class=\"c1\"># ut.startfile(_)</span>\n\n<div class=\"viewcode-block\" id=\"VerifierExpt.agg_results\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts.postdoc.VerifierExpt.agg_results\">[docs]</a>    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">agg_results</span><span class=\"p\">(</span><span class=\"n\">VerifierExpt</span><span class=\"p\">,</span> <span class=\"n\">task_key</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n\n<span class=\"sd\">        python -m ibeis VerifierExpt.agg_results</span>\n<span class=\"sd\">        python -m ibeis VerifierExpt.agg_results --link link-paper-final</span>\n\n<span class=\"sd\">        GZ_Master1,LF_ALL,MantaMatcher,RotanTurtles,humpbacks_fb,GIRM_Master1</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.scripts.postdoc import *  # NOQA</span>\n<span class=\"sd\">            &gt;&gt;&gt; task_key = &#39;match_state&#39;</span>\n<span class=\"sd\">            &gt;&gt;&gt; result = VerifierExpt.agg_results(task_key)</span>\n<span class=\"sd\">            &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">VerifierExpt</span><span class=\"o\">.</span><span class=\"n\">agg_dbstats</span><span class=\"p\">()</span>\n        <span class=\"n\">dbnames</span> <span class=\"o\">=</span> <span class=\"n\">VerifierExpt</span><span class=\"o\">.</span><span class=\"n\">agg_dbnames</span>\n\n        <span class=\"n\">all_results</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">odict</span><span class=\"p\">([])</span>\n        <span class=\"k\">for</span> <span class=\"n\">dbname</span> <span class=\"ow\">in</span> <span class=\"n\">VerifierExpt</span><span class=\"o\">.</span><span class=\"n\">agg_dbnames</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span> <span class=\"o\">=</span> <span class=\"n\">VerifierExpt</span><span class=\"p\">(</span><span class=\"n\">dbname</span><span class=\"p\">)</span>\n            <span class=\"n\">info</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ensure_results</span><span class=\"p\">(</span><span class=\"s1\">&#39;all&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">all_results</span><span class=\"p\">[</span><span class=\"n\">dbname</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">info</span>\n\n        <span class=\"n\">rerank_results</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">odict</span><span class=\"p\">([])</span>\n        <span class=\"k\">for</span> <span class=\"n\">dbname</span> <span class=\"ow\">in</span> <span class=\"n\">VerifierExpt</span><span class=\"o\">.</span><span class=\"n\">agg_dbnames</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span> <span class=\"o\">=</span> <span class=\"n\">VerifierExpt</span><span class=\"p\">(</span><span class=\"n\">dbname</span><span class=\"p\">)</span>\n            <span class=\"n\">info</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ensure_results</span><span class=\"p\">(</span><span class=\"s1\">&#39;rerank&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">rerank_results</span><span class=\"p\">[</span><span class=\"n\">dbname</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">info</span>\n\n        <span class=\"n\">rank_curves</span> <span class=\"o\">=</span> <span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">AutoOrderedDict</span><span class=\"p\">()</span>\n\n        <span class=\"n\">rank1_cmc_table</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">LNBNN</span><span class=\"p\">,</span> <span class=\"n\">CLF</span><span class=\"p\">])</span>\n        <span class=\"n\">rank5_cmc_table</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">LNBNN</span><span class=\"p\">,</span> <span class=\"n\">CLF</span><span class=\"p\">])</span>\n\n        <span class=\"n\">n_dbs</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">all_results</span><span class=\"p\">)</span>\n        <span class=\"n\">color_cycle</span> <span class=\"o\">=</span> <span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">rcParams</span><span class=\"p\">[</span><span class=\"s1\">&#39;axes.prop_cycle&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">by_key</span><span class=\"p\">()[</span><span class=\"s1\">&#39;color&#39;</span><span class=\"p\">][:</span><span class=\"n\">n_dbs</span><span class=\"p\">]</span>\n\n        <span class=\"n\">color_cycle</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;r&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;purple&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;orange&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;deeppink&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;g&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">markers</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">distinct_markers</span><span class=\"p\">(</span><span class=\"n\">n_dbs</span><span class=\"p\">)</span>\n\n        <span class=\"n\">dbprops</span> <span class=\"o\">=</span> <span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">AutoDict</span><span class=\"p\">()</span>\n        <span class=\"k\">for</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">dbname</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">dbnames</span><span class=\"p\">):</span>\n            <span class=\"n\">dbprops</span><span class=\"p\">[</span><span class=\"n\">dbname</span><span class=\"p\">][</span><span class=\"s1\">&#39;color&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">color_cycle</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">]</span>\n            <span class=\"n\">dbprops</span><span class=\"p\">[</span><span class=\"n\">dbname</span><span class=\"p\">][</span><span class=\"s1\">&#39;marker&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">markers</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">]</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">highlight_metric</span><span class=\"p\">(</span><span class=\"n\">metric</span><span class=\"p\">,</span> <span class=\"n\">data1</span><span class=\"p\">,</span> <span class=\"n\">data2</span><span class=\"p\">):</span>\n            <span class=\"c1\"># Highlight the bigger one for each metric</span>\n            <span class=\"k\">for</span> <span class=\"n\">d1</span><span class=\"p\">,</span> <span class=\"n\">d2</span> <span class=\"ow\">in</span> <span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">permutations</span><span class=\"p\">([</span><span class=\"n\">data1</span><span class=\"p\">,</span> <span class=\"n\">data2</span><span class=\"p\">],</span> <span class=\"mi\">2</span><span class=\"p\">):</span>\n                <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"si\">{:.3f}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">d1</span><span class=\"p\">[</span><span class=\"n\">metric</span><span class=\"p\">])</span>\n                <span class=\"k\">if</span> <span class=\"n\">d1</span><span class=\"p\">[</span><span class=\"n\">metric</span><span class=\"p\">]</span> <span class=\"o\">&gt;=</span> <span class=\"n\">d2</span><span class=\"p\">[</span><span class=\"n\">metric</span><span class=\"p\">]:</span>\n                    <span class=\"n\">d1</span><span class=\"p\">[</span><span class=\"n\">metric</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;_tex&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\\\</span><span class=\"s1\">mathbf{&#39;</span> <span class=\"o\">+</span> <span class=\"n\">text</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;}&#39;</span>\n                    <span class=\"n\">d1</span><span class=\"p\">[</span><span class=\"n\">metric</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;_text&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">text</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;*&#39;</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">d1</span><span class=\"p\">[</span><span class=\"n\">metric</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;_tex&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span>  <span class=\"n\">text</span>\n                    <span class=\"n\">d1</span><span class=\"p\">[</span><span class=\"n\">metric</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;_text&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">text</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">dbname</span> <span class=\"ow\">in</span> <span class=\"n\">dbnames</span><span class=\"p\">:</span>\n            <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">all_results</span><span class=\"p\">[</span><span class=\"n\">dbname</span><span class=\"p\">]</span>\n            <span class=\"n\">data_key</span> <span class=\"o\">=</span> <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"s1\">&#39;data_key&#39;</span><span class=\"p\">]</span>\n            <span class=\"n\">clf_key</span> <span class=\"o\">=</span> <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"s1\">&#39;clf_key&#39;</span><span class=\"p\">]</span>\n\n            <span class=\"n\">lnbnn_data</span> <span class=\"o\">=</span> <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"s1\">&#39;lnbnn_data&#39;</span><span class=\"p\">]</span>\n            <span class=\"n\">task_combo_res</span> <span class=\"o\">=</span> <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"s1\">&#39;task_combo_res&#39;</span><span class=\"p\">]</span>\n            <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">task_combo_res</span><span class=\"p\">[</span><span class=\"n\">task_key</span><span class=\"p\">][</span><span class=\"n\">clf_key</span><span class=\"p\">][</span><span class=\"n\">data_key</span><span class=\"p\">]</span>\n            <span class=\"n\">nice</span> <span class=\"o\">=</span> <span class=\"n\">dbname_to_species_nice</span><span class=\"p\">(</span><span class=\"n\">dbname</span><span class=\"p\">)</span>\n\n            <span class=\"c1\"># ranking results</span>\n            <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">rerank_results</span><span class=\"p\">[</span><span class=\"n\">dbname</span><span class=\"p\">]</span>\n            <span class=\"n\">cdfs</span><span class=\"p\">,</span> <span class=\"n\">infos</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">results</span><span class=\"p\">))</span>\n            <span class=\"n\">lnbnn_cdf</span><span class=\"p\">,</span> <span class=\"n\">clf_cdf</span> <span class=\"o\">=</span> <span class=\"n\">cdfs</span>\n            <span class=\"n\">cdfs</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                <span class=\"n\">CLF</span><span class=\"p\">:</span> <span class=\"n\">clf_cdf</span><span class=\"p\">,</span>\n                <span class=\"n\">LNBNN</span><span class=\"p\">:</span> <span class=\"n\">lnbnn_cdf</span><span class=\"p\">,</span>\n            <span class=\"p\">}</span>\n\n            <span class=\"n\">rank1_cmc_table</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">nice</span><span class=\"p\">,</span> <span class=\"n\">LNBNN</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">lnbnn_cdf</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"n\">rank1_cmc_table</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">nice</span><span class=\"p\">,</span> <span class=\"n\">CLF</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">clf_cdf</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n            <span class=\"n\">rank5_cmc_table</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">nice</span><span class=\"p\">,</span> <span class=\"n\">LNBNN</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">lnbnn_cdf</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n            <span class=\"n\">rank5_cmc_table</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">nice</span><span class=\"p\">,</span> <span class=\"n\">CLF</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">clf_cdf</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n\n            <span class=\"c1\"># Check the ROC for only things in the top of the LNBNN ranked lists</span>\n            <span class=\"c1\"># nums = [1, 2, 3, 4, 5, 10, 20, np.inf]</span>\n            <span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">inf</span><span class=\"p\">]</span>\n            <span class=\"k\">for</span> <span class=\"n\">num</span> <span class=\"ow\">in</span> <span class=\"n\">nums</span><span class=\"p\">:</span>\n\n                <span class=\"n\">ranks</span> <span class=\"o\">=</span> <span class=\"n\">lnbnn_data</span><span class=\"p\">[</span><span class=\"s1\">&#39;rank_lnbnn_1vM&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span>\n                <span class=\"n\">sub_data</span> <span class=\"o\">=</span> <span class=\"n\">lnbnn_data</span><span class=\"p\">[</span><span class=\"n\">ranks</span> <span class=\"o\">&lt;=</span> <span class=\"n\">num</span><span class=\"p\">]</span>\n                <span class=\"n\">scores</span> <span class=\"o\">=</span> <span class=\"n\">sub_data</span><span class=\"p\">[</span><span class=\"s1\">&#39;score_lnbnn_1vM&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span>\n                <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">sub_data</span><span class=\"p\">[</span><span class=\"n\">POSTV</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span>\n                <span class=\"n\">probs</span> <span class=\"o\">=</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">probs_df</span><span class=\"p\">[</span><span class=\"n\">POSTV</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">sub_data</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span>\n\n                <span class=\"n\">cfsm_vsm</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">ConfusionMetrics</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">scores</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n                <span class=\"n\">cfsm_clf</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">ConfusionMetrics</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">probs</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n                <span class=\"n\">algo_confusions</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                    <span class=\"n\">LNBNN</span><span class=\"p\">:</span> <span class=\"n\">cfsm_vsm</span><span class=\"p\">,</span>\n                    <span class=\"n\">CLF</span><span class=\"p\">:</span> <span class=\"n\">cfsm_clf</span>\n                <span class=\"p\">}</span>\n\n                <span class=\"n\">datas</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n                <span class=\"k\">for</span> <span class=\"n\">algo</span> <span class=\"ow\">in</span> <span class=\"p\">{</span><span class=\"n\">LNBNN</span><span class=\"p\">,</span> <span class=\"n\">CLF</span><span class=\"p\">}:</span>\n                    <span class=\"n\">cfms</span> <span class=\"o\">=</span> <span class=\"n\">algo_confusions</span><span class=\"p\">[</span><span class=\"n\">algo</span><span class=\"p\">]</span>\n                    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                        <span class=\"s1\">&#39;dbname&#39;</span><span class=\"p\">:</span> <span class=\"n\">dbname</span><span class=\"p\">,</span>\n                        <span class=\"s1\">&#39;species&#39;</span><span class=\"p\">:</span> <span class=\"n\">nice</span><span class=\"p\">,</span>\n                        <span class=\"s1\">&#39;fpr&#39;</span><span class=\"p\">:</span> <span class=\"n\">cfms</span><span class=\"o\">.</span><span class=\"n\">fpr</span><span class=\"p\">,</span>\n                        <span class=\"s1\">&#39;tpr&#39;</span><span class=\"p\">:</span> <span class=\"n\">cfms</span><span class=\"o\">.</span><span class=\"n\">tpr</span><span class=\"p\">,</span>\n                        <span class=\"s1\">&#39;auc&#39;</span><span class=\"p\">:</span> <span class=\"n\">cfms</span><span class=\"o\">.</span><span class=\"n\">auc</span><span class=\"p\">,</span>\n                        <span class=\"s1\">&#39;cmc0&#39;</span><span class=\"p\">:</span> <span class=\"n\">cdfs</span><span class=\"p\">[</span><span class=\"n\">algo</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n                        <span class=\"s1\">&#39;cmc&#39;</span><span class=\"p\">:</span> <span class=\"n\">cdfs</span><span class=\"p\">[</span><span class=\"n\">algo</span><span class=\"p\">],</span>\n                        <span class=\"s1\">&#39;color&#39;</span><span class=\"p\">:</span> <span class=\"n\">dbprops</span><span class=\"p\">[</span><span class=\"n\">dbname</span><span class=\"p\">][</span><span class=\"s1\">&#39;color&#39;</span><span class=\"p\">],</span>\n                        <span class=\"s1\">&#39;marker&#39;</span><span class=\"p\">:</span> <span class=\"n\">dbprops</span><span class=\"p\">[</span><span class=\"n\">dbname</span><span class=\"p\">][</span><span class=\"s1\">&#39;marker&#39;</span><span class=\"p\">],</span>\n                        <span class=\"s1\">&#39;tpr@fpr=0&#39;</span><span class=\"p\">:</span> <span class=\"n\">cfms</span><span class=\"o\">.</span><span class=\"n\">get_metric_at_metric</span><span class=\"p\">(</span>\n                            <span class=\"s1\">&#39;tpr&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;fpr&#39;</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">tiebreaker</span><span class=\"o\">=</span><span class=\"s1\">&#39;minthresh&#39;</span><span class=\"p\">),</span>\n                        <span class=\"s1\">&#39;thresh@fpr=0&#39;</span><span class=\"p\">:</span> <span class=\"n\">cfms</span><span class=\"o\">.</span><span class=\"n\">get_metric_at_metric</span><span class=\"p\">(</span>\n                            <span class=\"s1\">&#39;thresh&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;fpr&#39;</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">tiebreaker</span><span class=\"o\">=</span><span class=\"s1\">&#39;minthresh&#39;</span><span class=\"p\">),</span>\n                    <span class=\"p\">}</span>\n                    <span class=\"n\">rank_curves</span><span class=\"p\">[</span><span class=\"n\">num</span><span class=\"p\">][</span><span class=\"n\">algo</span><span class=\"p\">][</span><span class=\"n\">dbname</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">data</span>\n                    <span class=\"n\">datas</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n                <span class=\"c1\"># Highlight the bigger one for each metric</span>\n                <span class=\"n\">highlight_metric</span><span class=\"p\">(</span><span class=\"s1\">&#39;auc&#39;</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">datas</span><span class=\"p\">)</span>\n                <span class=\"n\">highlight_metric</span><span class=\"p\">(</span><span class=\"s1\">&#39;tpr@fpr=0&#39;</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">datas</span><span class=\"p\">)</span>\n                <span class=\"n\">highlight_metric</span><span class=\"p\">(</span><span class=\"s1\">&#39;cmc0&#39;</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">datas</span><span class=\"p\">)</span>\n\n        <span class=\"n\">rank_auc_tables</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ddict</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">LNBNN</span><span class=\"p\">,</span> <span class=\"n\">CLF</span><span class=\"p\">]))</span>\n        <span class=\"n\">rank_tpr_tables</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ddict</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">LNBNN</span><span class=\"p\">,</span> <span class=\"n\">CLF</span><span class=\"p\">]))</span>\n        <span class=\"n\">rank_tpr_thresh_tables</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ddict</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">LNBNN</span><span class=\"p\">,</span> <span class=\"n\">CLF</span><span class=\"p\">]))</span>\n        <span class=\"k\">for</span> <span class=\"n\">num</span> <span class=\"ow\">in</span> <span class=\"n\">rank_curves</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">():</span>\n            <span class=\"n\">rank_auc_df</span> <span class=\"o\">=</span> <span class=\"n\">rank_auc_tables</span><span class=\"p\">[</span><span class=\"n\">num</span><span class=\"p\">]</span>\n            <span class=\"n\">rank_auc_df</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;AUC@rank&lt;=</span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">)</span>\n            <span class=\"n\">rank_tpr_df</span> <span class=\"o\">=</span> <span class=\"n\">rank_tpr_tables</span><span class=\"p\">[</span><span class=\"n\">num</span><span class=\"p\">]</span>\n            <span class=\"n\">rank_tpr_df</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;tpr@fpr=0&amp;rank&lt;=</span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">)</span>\n            <span class=\"n\">rank_thesh_df</span> <span class=\"o\">=</span> <span class=\"n\">rank_tpr_thresh_tables</span><span class=\"p\">[</span><span class=\"n\">num</span><span class=\"p\">]</span>\n            <span class=\"n\">rank_thesh_df</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;thresh@fpr=0&amp;rank&lt;=</span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">algo</span> <span class=\"ow\">in</span> <span class=\"n\">rank_curves</span><span class=\"p\">[</span><span class=\"n\">num</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">():</span>\n                <span class=\"k\">for</span> <span class=\"n\">dbname</span> <span class=\"ow\">in</span> <span class=\"n\">rank_curves</span><span class=\"p\">[</span><span class=\"n\">num</span><span class=\"p\">][</span><span class=\"n\">algo</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">():</span>\n                    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">rank_curves</span><span class=\"p\">[</span><span class=\"n\">num</span><span class=\"p\">][</span><span class=\"n\">algo</span><span class=\"p\">][</span><span class=\"n\">dbname</span><span class=\"p\">]</span>\n                    <span class=\"n\">nice</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">&#39;species&#39;</span><span class=\"p\">]</span>\n                    <span class=\"n\">rank_auc_df</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">nice</span><span class=\"p\">,</span> <span class=\"n\">algo</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">&#39;auc&#39;</span><span class=\"p\">]</span>\n                    <span class=\"n\">rank_tpr_df</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">nice</span><span class=\"p\">,</span> <span class=\"n\">algo</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">&#39;tpr@fpr=0&#39;</span><span class=\"p\">]</span>\n                    <span class=\"n\">rank_thesh_df</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">nice</span><span class=\"p\">,</span> <span class=\"n\">algo</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">&#39;thresh@fpr=0&#39;</span><span class=\"p\">]</span>\n\n        <span class=\"kn\">from</span> <span class=\"nn\">utool.experimental.pandas_highlight</span> <span class=\"k\">import</span> <span class=\"n\">to_string_monkey</span>\n        <span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">rank</span> <span class=\"ow\">in</span> <span class=\"n\">nums</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;-----&#39;</span><span class=\"p\">)</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;AUC at rank = </span><span class=\"si\">{!r}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">rank</span><span class=\"p\">))</span>\n            <span class=\"n\">rank_auc_df</span> <span class=\"o\">=</span> <span class=\"n\">rank_auc_tables</span><span class=\"p\">[</span><span class=\"n\">rank</span><span class=\"p\">]</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">to_string_monkey</span><span class=\"p\">(</span><span class=\"n\">rank_auc_df</span><span class=\"p\">,</span> <span class=\"s1\">&#39;all&#39;</span><span class=\"p\">))</span>\n\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;===============&#39;</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">rank</span> <span class=\"ow\">in</span> <span class=\"n\">nums</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;-----&#39;</span><span class=\"p\">)</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;TPR at rank = </span><span class=\"si\">{!r}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">rank</span><span class=\"p\">))</span>\n            <span class=\"n\">rank_tpr_df</span> <span class=\"o\">=</span> <span class=\"n\">rank_tpr_tables</span><span class=\"p\">[</span><span class=\"n\">rank</span><span class=\"p\">]</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">to_string_monkey</span><span class=\"p\">(</span><span class=\"n\">rank_tpr_df</span><span class=\"p\">,</span> <span class=\"s1\">&#39;all&#39;</span><span class=\"p\">))</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">_bf_best</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">):</span>\n            <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n            <span class=\"k\">for</span> <span class=\"n\">rx</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)):</span>\n                <span class=\"n\">col</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">iloc</span><span class=\"p\">[</span><span class=\"n\">rx</span><span class=\"p\">]</span>\n                <span class=\"k\">for</span> <span class=\"n\">cx</span> <span class=\"ow\">in</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">argmax</span><span class=\"p\">(</span><span class=\"n\">col</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">,</span> <span class=\"n\">multi</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n                    <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">iloc</span><span class=\"p\">[</span><span class=\"n\">rx</span><span class=\"p\">,</span> <span class=\"n\">cx</span><span class=\"p\">]</span>\n                    <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">iloc</span><span class=\"p\">[</span><span class=\"n\">rx</span><span class=\"p\">,</span> <span class=\"n\">cx</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\\\</span><span class=\"s1\">mathbf{{</span><span class=\"si\">{:.3f}</span><span class=\"s1\">}}&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">df</span>\n\n        <span class=\"k\">if</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Tables</span>\n            <span class=\"n\">rank1_auc_table</span> <span class=\"o\">=</span> <span class=\"n\">rank_auc_tables</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"n\">rank1_tpr_table</span> <span class=\"o\">=</span> <span class=\"n\">rank_tpr_tables</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"c1\"># all_stats = pd.concat(ut.emap(_bf_best, [auc_table, rank1_cmc_table, rank5_cmc_table]), axis=1)</span>\n            <span class=\"n\">column_parts</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                <span class=\"p\">(</span><span class=\"s1\">&#39;Rank $1$ AUC&#39;</span><span class=\"p\">,</span> <span class=\"n\">rank1_auc_table</span><span class=\"p\">),</span>\n                <span class=\"p\">(</span><span class=\"s1\">&#39;Rank $1$ TPR&#39;</span><span class=\"p\">,</span> <span class=\"n\">rank1_tpr_table</span><span class=\"p\">),</span>\n                <span class=\"p\">(</span><span class=\"s1\">&#39;Pos. @ Rank $1$&#39;</span><span class=\"p\">,</span> <span class=\"n\">rank1_cmc_table</span><span class=\"p\">),</span>\n            <span class=\"p\">]</span>\n\n            <span class=\"n\">all_stats</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">concat</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">emap</span><span class=\"p\">(</span>\n                <span class=\"n\">_bf_best</span><span class=\"p\">,</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take_column</span><span class=\"p\">(</span><span class=\"n\">column_parts</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)),</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"n\">all_stats</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n            <span class=\"n\">colfmt</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;l|&#39;</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;|&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"s1\">&#39;rr&#39;</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">column_parts</span><span class=\"p\">))</span>\n            <span class=\"n\">multi_header</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                <span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">+</span>\n                <span class=\"p\">[(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c|&#39;</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take_column</span><span class=\"p\">(</span><span class=\"n\">column_parts</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]]</span> <span class=\"o\">+</span>\n                <span class=\"p\">[(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take_column</span><span class=\"p\">(</span><span class=\"n\">column_parts</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">:]]</span>\n            <span class=\"p\">)</span>\n\n            <span class=\"kn\">from</span> <span class=\"nn\">ibeis.scripts</span> <span class=\"k\">import</span> <span class=\"n\">_thesis_helpers</span>\n            <span class=\"n\">tabular</span> <span class=\"o\">=</span> <span class=\"n\">_thesis_helpers</span><span class=\"o\">.</span><span class=\"n\">Tabular</span><span class=\"p\">(</span>\n                <span class=\"n\">all_stats</span><span class=\"p\">,</span> <span class=\"n\">colfmt</span><span class=\"o\">=</span><span class=\"n\">colfmt</span><span class=\"p\">,</span> <span class=\"n\">escape</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n            <span class=\"n\">tabular</span><span class=\"o\">.</span><span class=\"n\">add_multicolumn_header</span><span class=\"p\">(</span><span class=\"n\">multi_header</span><span class=\"p\">)</span>\n            <span class=\"n\">tabular</span><span class=\"o\">.</span><span class=\"n\">precision</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n            <span class=\"n\">tex_text</span> <span class=\"o\">=</span> <span class=\"n\">tabular</span><span class=\"o\">.</span><span class=\"n\">as_tabular</span><span class=\"p\">()</span>\n\n            <span class=\"c1\"># HACKS</span>\n            <span class=\"kn\">import</span> <span class=\"nn\">re</span>\n            <span class=\"n\">num_pat</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">named_field</span><span class=\"p\">(</span><span class=\"s1\">&#39;num&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;[0-9]*\\.?[0-9]*&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">tex_text</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">escape</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\\\</span><span class=\"s1\">mathbf{$&#39;</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">num_pat</span> <span class=\"o\">+</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">escape</span><span class=\"p\">(</span><span class=\"s1\">&#39;$}&#39;</span><span class=\"p\">),</span>\n                              <span class=\"s1\">&#39;$</span><span class=\"se\">\\\\</span><span class=\"s1\">mathbf{&#39;</span> <span class=\"o\">+</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">bref_field</span><span class=\"p\">(</span><span class=\"s1\">&#39;num&#39;</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;}$&#39;</span><span class=\"p\">,</span>\n                              <span class=\"n\">tex_text</span><span class=\"p\">)</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tex_text</span><span class=\"p\">)</span>\n            <span class=\"c1\"># tex_text = tex_text.replace(&#39;\\\\mathbf{$&#39;, &#39;$\\\\mathbf{&#39;)</span>\n            <span class=\"c1\"># tex_text = tex_text.replace(&#39;$}&#39;, &#39;}$&#39;)</span>\n\n            <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">write_to</span><span class=\"p\">(</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">VerifierExpt</span><span class=\"o\">.</span><span class=\"n\">base_dpath</span><span class=\"p\">,</span> <span class=\"s1\">&#39;agg-results-all.tex&#39;</span><span class=\"p\">),</span> <span class=\"n\">tex_text</span><span class=\"p\">)</span>\n\n            <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">render_latex</span><span class=\"p\">(</span><span class=\"n\">tex_text</span><span class=\"p\">,</span> <span class=\"n\">dpath</span><span class=\"o\">=</span><span class=\"n\">VerifierExpt</span><span class=\"o\">.</span><span class=\"n\">base_dpath</span><span class=\"p\">,</span>\n                                <span class=\"n\">fname</span><span class=\"o\">=</span><span class=\"s1\">&#39;agg-results-all&#39;</span><span class=\"p\">,</span>\n                                <span class=\"n\">preamb_extra</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;</span><span class=\"se\">\\\\</span><span class=\"s1\">usepackage</span><span class=\"si\">{makecell}</span><span class=\"s1\">&#39;</span><span class=\"p\">])</span>\n            <span class=\"c1\"># ut.startfile(_)</span>\n\n        <span class=\"k\">if</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Tables</span>\n            <span class=\"n\">rank1_auc_table</span> <span class=\"o\">=</span> <span class=\"n\">rank_auc_tables</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"n\">rank1_tpr_table</span> <span class=\"o\">=</span> <span class=\"n\">rank_tpr_tables</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">rank1_auc_table =</span><span class=\"se\">\\n</span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">to_string_monkey</span><span class=\"p\">(</span><span class=\"n\">rank1_auc_table</span><span class=\"p\">,</span> <span class=\"s1\">&#39;all&#39;</span><span class=\"p\">)))</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">rank1_tpr_table =</span><span class=\"se\">\\n</span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">to_string_monkey</span><span class=\"p\">(</span><span class=\"n\">rank1_tpr_table</span><span class=\"p\">,</span> <span class=\"s1\">&#39;all&#39;</span><span class=\"p\">)))</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">rank1_cmc_table =</span><span class=\"se\">\\n</span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">to_string_monkey</span><span class=\"p\">(</span><span class=\"n\">rank1_cmc_table</span><span class=\"p\">,</span> <span class=\"s1\">&#39;all&#39;</span><span class=\"p\">)))</span>\n\n            <span class=\"c1\"># Tables</span>\n            <span class=\"n\">rank1_auc_table</span> <span class=\"o\">=</span> <span class=\"n\">rank_auc_tables</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"n\">rank1_tpr_table</span> <span class=\"o\">=</span> <span class=\"n\">rank_tpr_tables</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"c1\"># all_stats = pd.concat(ut.emap(_bf_best, [auc_table, rank1_cmc_table, rank5_cmc_table]), axis=1)</span>\n            <span class=\"n\">column_parts</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                <span class=\"p\">(</span><span class=\"s1\">&#39;Rank $1$ AUC&#39;</span><span class=\"p\">,</span> <span class=\"n\">rank1_auc_table</span><span class=\"p\">),</span>\n                <span class=\"c1\"># (&#39;Rank $1$ TPR&#39;, rank1_tpr_table),</span>\n                <span class=\"p\">(</span><span class=\"s1\">&#39;Pos. @ Rank $1$&#39;</span><span class=\"p\">,</span> <span class=\"n\">rank1_cmc_table</span><span class=\"p\">),</span>\n            <span class=\"p\">]</span>\n\n            <span class=\"n\">all_stats</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">concat</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">emap</span><span class=\"p\">(</span>\n                <span class=\"n\">_bf_best</span><span class=\"p\">,</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take_column</span><span class=\"p\">(</span><span class=\"n\">column_parts</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)),</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"n\">all_stats</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n            <span class=\"n\">colfmt</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;l|&#39;</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;|&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"s1\">&#39;rr&#39;</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">column_parts</span><span class=\"p\">))</span>\n            <span class=\"n\">multi_header</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                <span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">+</span>\n                <span class=\"p\">[(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c|&#39;</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take_column</span><span class=\"p\">(</span><span class=\"n\">column_parts</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]]</span> <span class=\"o\">+</span>\n                <span class=\"p\">[(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take_column</span><span class=\"p\">(</span><span class=\"n\">column_parts</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">:]]</span>\n            <span class=\"p\">)</span>\n\n            <span class=\"kn\">from</span> <span class=\"nn\">ibeis.scripts</span> <span class=\"k\">import</span> <span class=\"n\">_thesis_helpers</span>\n            <span class=\"n\">tabular</span> <span class=\"o\">=</span> <span class=\"n\">_thesis_helpers</span><span class=\"o\">.</span><span class=\"n\">Tabular</span><span class=\"p\">(</span>\n                <span class=\"n\">all_stats</span><span class=\"p\">,</span> <span class=\"n\">colfmt</span><span class=\"o\">=</span><span class=\"n\">colfmt</span><span class=\"p\">,</span> <span class=\"n\">escape</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n            <span class=\"n\">tabular</span><span class=\"o\">.</span><span class=\"n\">add_multicolumn_header</span><span class=\"p\">(</span><span class=\"n\">multi_header</span><span class=\"p\">)</span>\n            <span class=\"n\">tabular</span><span class=\"o\">.</span><span class=\"n\">precision</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n            <span class=\"n\">tex_text</span> <span class=\"o\">=</span> <span class=\"n\">tabular</span><span class=\"o\">.</span><span class=\"n\">as_tabular</span><span class=\"p\">()</span>\n\n            <span class=\"c1\"># HACKS</span>\n            <span class=\"kn\">import</span> <span class=\"nn\">re</span>\n            <span class=\"n\">num_pat</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">named_field</span><span class=\"p\">(</span><span class=\"s1\">&#39;num&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;[0-9]*\\.?[0-9]*&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">tex_text</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">escape</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\\\</span><span class=\"s1\">mathbf{$&#39;</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">num_pat</span> <span class=\"o\">+</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">escape</span><span class=\"p\">(</span><span class=\"s1\">&#39;$}&#39;</span><span class=\"p\">),</span>\n                              <span class=\"s1\">&#39;$</span><span class=\"se\">\\\\</span><span class=\"s1\">mathbf{&#39;</span> <span class=\"o\">+</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">bref_field</span><span class=\"p\">(</span><span class=\"s1\">&#39;num&#39;</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;}$&#39;</span><span class=\"p\">,</span>\n                              <span class=\"n\">tex_text</span><span class=\"p\">)</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tex_text</span><span class=\"p\">)</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tex_text</span><span class=\"p\">)</span>\n            <span class=\"c1\"># tex_text = tex_text.replace(&#39;\\\\mathbf{$&#39;, &#39;$\\\\mathbf{&#39;)</span>\n            <span class=\"c1\"># tex_text = tex_text.replace(&#39;$}&#39;, &#39;}$&#39;)</span>\n            <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">write_to</span><span class=\"p\">(</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">VerifierExpt</span><span class=\"o\">.</span><span class=\"n\">base_dpath</span><span class=\"p\">,</span> <span class=\"s1\">&#39;agg-results.tex&#39;</span><span class=\"p\">),</span> <span class=\"n\">tex_text</span><span class=\"p\">)</span>\n\n            <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">render_latex</span><span class=\"p\">(</span><span class=\"n\">tex_text</span><span class=\"p\">,</span> <span class=\"n\">dpath</span><span class=\"o\">=</span><span class=\"n\">VerifierExpt</span><span class=\"o\">.</span><span class=\"n\">base_dpath</span><span class=\"p\">,</span>\n                                <span class=\"n\">fname</span><span class=\"o\">=</span><span class=\"s1\">&#39;agg-results&#39;</span><span class=\"p\">,</span>\n                                <span class=\"n\">preamb_extra</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;</span><span class=\"se\">\\\\</span><span class=\"s1\">usepackage</span><span class=\"si\">{makecell}</span><span class=\"s1\">&#39;</span><span class=\"p\">])</span>\n            <span class=\"n\">_</span>\n            <span class=\"c1\"># ut.startfile(_)</span>\n\n        <span class=\"n\">method</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n        <span class=\"k\">if</span> <span class=\"n\">method</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n            <span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">rcParams</span><span class=\"p\">[</span><span class=\"s1\">&#39;text.usetex&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">rcParams</span><span class=\"p\">[</span><span class=\"s1\">&#39;text.latex.unicode&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"c1\"># mpl.rcParams[&#39;axes.labelsize&#39;] = 12</span>\n            <span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">rcParams</span><span class=\"p\">[</span><span class=\"s1\">&#39;legend.fontsize&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">12</span>\n\n            <span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">rcParams</span><span class=\"p\">[</span><span class=\"s1\">&#39;xtick.color&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;k&#39;</span>\n            <span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">rcParams</span><span class=\"p\">[</span><span class=\"s1\">&#39;ytick.color&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;k&#39;</span>\n            <span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">rcParams</span><span class=\"p\">[</span><span class=\"s1\">&#39;axes.labelcolor&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;k&#39;</span>\n            <span class=\"c1\"># mpl.rcParams[&#39;text.color&#39;] = &#39;k&#39;</span>\n\n            <span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">inf</span><span class=\"p\">]</span>\n            <span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"k\">for</span> <span class=\"n\">num</span> <span class=\"ow\">in</span> <span class=\"n\">nums</span><span class=\"p\">:</span>\n                <span class=\"n\">chunked_dbnames</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">chunks</span><span class=\"p\">(</span><span class=\"n\">dbnames</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n                <span class=\"k\">for</span> <span class=\"n\">fnum</span><span class=\"p\">,</span> <span class=\"n\">dbname_chunk</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">chunked_dbnames</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n                    <span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"n\">fnum</span><span class=\"p\">)</span>  <span class=\"c1\"># NOQA</span>\n                    <span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">clf</span><span class=\"p\">()</span>\n                    <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">gca</span><span class=\"p\">()</span>\n                    <span class=\"k\">for</span> <span class=\"n\">dbname</span> <span class=\"ow\">in</span> <span class=\"n\">dbname_chunk</span><span class=\"p\">:</span>\n                        <span class=\"n\">data1</span> <span class=\"o\">=</span> <span class=\"n\">rank_curves</span><span class=\"p\">[</span><span class=\"n\">num</span><span class=\"p\">][</span><span class=\"n\">CLF</span><span class=\"p\">][</span><span class=\"n\">dbname</span><span class=\"p\">]</span>\n                        <span class=\"n\">data2</span> <span class=\"o\">=</span> <span class=\"n\">rank_curves</span><span class=\"p\">[</span><span class=\"n\">num</span><span class=\"p\">][</span><span class=\"n\">LNBNN</span><span class=\"p\">][</span><span class=\"n\">dbname</span><span class=\"p\">]</span>\n\n                        <span class=\"n\">data1</span><span class=\"p\">[</span><span class=\"s1\">&#39;label&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;TPR=$</span><span class=\"si\">{tpr}</span><span class=\"s1\">$ </span><span class=\"si\">{algo}</span><span class=\"s1\"> </span><span class=\"si\">{species}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n                            <span class=\"n\">algo</span><span class=\"o\">=</span><span class=\"n\">CLF</span><span class=\"p\">,</span>\n                            <span class=\"n\">tpr</span><span class=\"o\">=</span><span class=\"n\">data1</span><span class=\"p\">[</span><span class=\"s1\">&#39;tpr@fpr=0_tex&#39;</span><span class=\"p\">],</span> <span class=\"n\">species</span><span class=\"o\">=</span><span class=\"n\">data1</span><span class=\"p\">[</span><span class=\"s1\">&#39;species&#39;</span><span class=\"p\">])</span>\n                        <span class=\"n\">data1</span><span class=\"p\">[</span><span class=\"s1\">&#39;ls&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;-&#39;</span>\n                        <span class=\"n\">data1</span><span class=\"p\">[</span><span class=\"s1\">&#39;chunk_marker&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;^&#39;</span>\n                        <span class=\"n\">data1</span><span class=\"p\">[</span><span class=\"s1\">&#39;color&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">dbprops</span><span class=\"p\">[</span><span class=\"n\">dbname</span><span class=\"p\">][</span><span class=\"s1\">&#39;color&#39;</span><span class=\"p\">]</span>\n\n                        <span class=\"n\">data2</span><span class=\"p\">[</span><span class=\"s1\">&#39;label&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;TPR=$</span><span class=\"si\">{tpr}</span><span class=\"s1\">$ </span><span class=\"si\">{algo}</span><span class=\"s1\"> </span><span class=\"si\">{species}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n                            <span class=\"n\">algo</span><span class=\"o\">=</span><span class=\"n\">LNBNN</span><span class=\"p\">,</span>\n                            <span class=\"n\">tpr</span><span class=\"o\">=</span><span class=\"n\">data2</span><span class=\"p\">[</span><span class=\"s1\">&#39;tpr@fpr=0_tex&#39;</span><span class=\"p\">],</span> <span class=\"n\">species</span><span class=\"o\">=</span><span class=\"n\">data2</span><span class=\"p\">[</span><span class=\"s1\">&#39;species&#39;</span><span class=\"p\">])</span>\n                        <span class=\"n\">data2</span><span class=\"p\">[</span><span class=\"s1\">&#39;ls&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;--&#39;</span>\n                        <span class=\"n\">data2</span><span class=\"p\">[</span><span class=\"s1\">&#39;chunk_marker&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;v&#39;</span>\n                        <span class=\"n\">data2</span><span class=\"p\">[</span><span class=\"s1\">&#39;color&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">dbprops</span><span class=\"p\">[</span><span class=\"n\">dbname</span><span class=\"p\">][</span><span class=\"s1\">&#39;color&#39;</span><span class=\"p\">]</span>\n\n                        <span class=\"k\">for</span> <span class=\"n\">d</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"n\">data1</span><span class=\"p\">,</span> <span class=\"n\">data2</span><span class=\"p\">]:</span>\n                            <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"s1\">&#39;fpr&#39;</span><span class=\"p\">],</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"s1\">&#39;tpr&#39;</span><span class=\"p\">],</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"s1\">&#39;ls&#39;</span><span class=\"p\">],</span>\n                                    <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"s1\">&#39;color&#39;</span><span class=\"p\">],</span> <span class=\"n\">zorder</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n                        <span class=\"k\">for</span> <span class=\"n\">d</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"n\">data1</span><span class=\"p\">,</span> <span class=\"n\">data2</span><span class=\"p\">]:</span>\n                            <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"s1\">&#39;tpr@fpr=0&#39;</span><span class=\"p\">],</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"s1\">&#39;ls&#39;</span><span class=\"p\">],</span>\n                                    <span class=\"n\">marker</span><span class=\"o\">=</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"s1\">&#39;chunk_marker&#39;</span><span class=\"p\">],</span>\n                                    <span class=\"n\">markeredgecolor</span><span class=\"o\">=</span><span class=\"s1\">&#39;k&#39;</span><span class=\"p\">,</span> <span class=\"n\">markersize</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">,</span>\n                                    <span class=\"c1\"># fillstyle=&#39;none&#39;,</span>\n                                    <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"s1\">&#39;color&#39;</span><span class=\"p\">],</span>\n                                    <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"s1\">&#39;label&#39;</span><span class=\"p\">],</span> <span class=\"n\">zorder</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n\n                    <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_xlabel</span><span class=\"p\">(</span><span class=\"s1\">&#39;false positive rate&#39;</span><span class=\"p\">)</span>\n                    <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_ylabel</span><span class=\"p\">(</span><span class=\"s1\">&#39;true positive rate&#39;</span><span class=\"p\">)</span>\n                    <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_ylim</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n                    <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_xlim</span><span class=\"p\">(</span><span class=\"o\">-.</span><span class=\"mi\">05</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n                    <span class=\"c1\"># ax.set_title(&#39;ROC with ranks $&lt;= {}$&#39;.format(num))</span>\n                    <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">legend</span><span class=\"p\">(</span><span class=\"n\">loc</span><span class=\"o\">=</span><span class=\"s1\">&#39;lower right&#39;</span><span class=\"p\">)</span>\n                    <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">adjust_subplots</span><span class=\"p\">(</span><span class=\"n\">top</span><span class=\"o\">=.</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"n\">bottom</span><span class=\"o\">=.</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=.</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=.</span><span class=\"mi\">9</span><span class=\"p\">)</span>\n                    <span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">set_size_inches</span><span class=\"p\">([</span><span class=\"n\">W</span> <span class=\"o\">*</span> <span class=\"o\">.</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"n\">H</span><span class=\"p\">])</span>\n\n                    <span class=\"n\">fname</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;agg_roc_rank_</span><span class=\"si\">{}</span><span class=\"s1\">_chunk_</span><span class=\"si\">{}</span><span class=\"s1\">_</span><span class=\"si\">{}</span><span class=\"s1\">.png&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">,</span> <span class=\"n\">fnum</span><span class=\"p\">,</span>\n                                                                     <span class=\"n\">task_key</span><span class=\"p\">)</span>\n                    <span class=\"n\">fig_fpath</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">VerifierExpt</span><span class=\"o\">.</span><span class=\"n\">base_dpath</span><span class=\"p\">),</span> <span class=\"n\">fname</span><span class=\"p\">)</span>\n                    <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">imwrite</span><span class=\"p\">(</span><span class=\"n\">fig_fpath</span><span class=\"p\">,</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">render_figure_to_image</span><span class=\"p\">(</span><span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">dpi</span><span class=\"o\">=</span><span class=\"n\">DPI</span><span class=\"p\">))</span>\n\n            <span class=\"n\">chunked_dbnames</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">chunks</span><span class=\"p\">(</span><span class=\"n\">dbnames</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n            <span class=\"k\">for</span> <span class=\"n\">fnum</span><span class=\"p\">,</span> <span class=\"n\">dbname_chunk</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">chunked_dbnames</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n                <span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"n\">fnum</span><span class=\"p\">)</span>  <span class=\"c1\"># NOQA</span>\n                <span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">clf</span><span class=\"p\">()</span>\n                <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">gca</span><span class=\"p\">()</span>\n                <span class=\"k\">for</span> <span class=\"n\">dbname</span> <span class=\"ow\">in</span> <span class=\"n\">dbname_chunk</span><span class=\"p\">:</span>\n                    <span class=\"n\">data1</span> <span class=\"o\">=</span> <span class=\"n\">rank_curves</span><span class=\"p\">[</span><span class=\"n\">num</span><span class=\"p\">][</span><span class=\"n\">CLF</span><span class=\"p\">][</span><span class=\"n\">dbname</span><span class=\"p\">]</span>\n                    <span class=\"n\">data2</span> <span class=\"o\">=</span> <span class=\"n\">rank_curves</span><span class=\"p\">[</span><span class=\"n\">num</span><span class=\"p\">][</span><span class=\"n\">LNBNN</span><span class=\"p\">][</span><span class=\"n\">dbname</span><span class=\"p\">]</span>\n\n                    <span class=\"n\">data1</span><span class=\"p\">[</span><span class=\"s1\">&#39;label&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;pos@rank1=$</span><span class=\"si\">{cmc0}</span><span class=\"s1\">$ </span><span class=\"si\">{algo}</span><span class=\"s1\"> </span><span class=\"si\">{species}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n                        <span class=\"n\">algo</span><span class=\"o\">=</span><span class=\"n\">CLF</span><span class=\"p\">,</span>\n                        <span class=\"n\">cmc0</span><span class=\"o\">=</span><span class=\"n\">data1</span><span class=\"p\">[</span><span class=\"s1\">&#39;cmc0_tex&#39;</span><span class=\"p\">],</span> <span class=\"n\">species</span><span class=\"o\">=</span><span class=\"n\">data1</span><span class=\"p\">[</span><span class=\"s1\">&#39;species&#39;</span><span class=\"p\">])</span>\n                    <span class=\"n\">data1</span><span class=\"p\">[</span><span class=\"s1\">&#39;ls&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;-&#39;</span>\n                    <span class=\"n\">data1</span><span class=\"p\">[</span><span class=\"s1\">&#39;chunk_marker&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;^&#39;</span>\n                    <span class=\"n\">data1</span><span class=\"p\">[</span><span class=\"s1\">&#39;color&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">dbprops</span><span class=\"p\">[</span><span class=\"n\">dbname</span><span class=\"p\">][</span><span class=\"s1\">&#39;color&#39;</span><span class=\"p\">]</span>\n\n                    <span class=\"n\">data2</span><span class=\"p\">[</span><span class=\"s1\">&#39;label&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;pos@rank1=$</span><span class=\"si\">{cmc0}</span><span class=\"s1\">$ </span><span class=\"si\">{algo}</span><span class=\"s1\"> </span><span class=\"si\">{species}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n                        <span class=\"n\">algo</span><span class=\"o\">=</span><span class=\"n\">LNBNN</span><span class=\"p\">,</span> <span class=\"n\">cmc0</span><span class=\"o\">=</span><span class=\"n\">data2</span><span class=\"p\">[</span><span class=\"s1\">&#39;cmc0_tex&#39;</span><span class=\"p\">],</span>\n                        <span class=\"n\">species</span><span class=\"o\">=</span><span class=\"n\">data2</span><span class=\"p\">[</span><span class=\"s1\">&#39;species&#39;</span><span class=\"p\">])</span>\n                    <span class=\"n\">data2</span><span class=\"p\">[</span><span class=\"s1\">&#39;ls&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;--&#39;</span>\n                    <span class=\"n\">data2</span><span class=\"p\">[</span><span class=\"s1\">&#39;chunk_marker&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;v&#39;</span>\n                    <span class=\"n\">data2</span><span class=\"p\">[</span><span class=\"s1\">&#39;color&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">dbprops</span><span class=\"p\">[</span><span class=\"n\">dbname</span><span class=\"p\">][</span><span class=\"s1\">&#39;color&#39;</span><span class=\"p\">]</span>\n\n                    <span class=\"k\">for</span> <span class=\"n\">d</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"n\">data1</span><span class=\"p\">,</span> <span class=\"n\">data2</span><span class=\"p\">]:</span>\n                        <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"s1\">&#39;fpr&#39;</span><span class=\"p\">],</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"s1\">&#39;tpr&#39;</span><span class=\"p\">],</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"s1\">&#39;ls&#39;</span><span class=\"p\">],</span>\n                                <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"s1\">&#39;color&#39;</span><span class=\"p\">])</span>\n\n                    <span class=\"k\">for</span> <span class=\"n\">d</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"n\">data1</span><span class=\"p\">,</span> <span class=\"n\">data2</span><span class=\"p\">]:</span>\n                        <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"s1\">&#39;cmc&#39;</span><span class=\"p\">],</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"s1\">&#39;ls&#39;</span><span class=\"p\">],</span>\n                                <span class=\"c1\"># marker=d[&#39;chunk_marker&#39;],</span>\n                                <span class=\"c1\"># markeredgecolor=&#39;k&#39;,</span>\n                                <span class=\"c1\"># markersize=8,</span>\n                                <span class=\"c1\"># fillstyle=&#39;none&#39;,</span>\n                                <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"s1\">&#39;color&#39;</span><span class=\"p\">],</span>\n                                <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"s1\">&#39;label&#39;</span><span class=\"p\">])</span>\n\n                <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_xlabel</span><span class=\"p\">(</span><span class=\"s1\">&#39;rank&#39;</span><span class=\"p\">)</span>\n                <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_ylabel</span><span class=\"p\">(</span><span class=\"s1\">&#39;match probability&#39;</span><span class=\"p\">)</span>\n                <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_ylim</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n                <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_xlim</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">)</span>\n                <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_xticks</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">])</span>\n                <span class=\"c1\"># ax.set_title(&#39;ROC with ranks $&lt;= {}$&#39;.format(num))</span>\n                <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">legend</span><span class=\"p\">(</span><span class=\"n\">loc</span><span class=\"o\">=</span><span class=\"s1\">&#39;lower right&#39;</span><span class=\"p\">)</span>\n                <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">adjust_subplots</span><span class=\"p\">(</span><span class=\"n\">top</span><span class=\"o\">=.</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"n\">bottom</span><span class=\"o\">=.</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=.</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=.</span><span class=\"mi\">9</span><span class=\"p\">)</span>\n                <span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">set_size_inches</span><span class=\"p\">([</span><span class=\"n\">W</span> <span class=\"o\">*</span> <span class=\"o\">.</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"n\">H</span><span class=\"p\">])</span>\n\n                <span class=\"n\">fname</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;agg_cmc_chunk_</span><span class=\"si\">{}</span><span class=\"s1\">_</span><span class=\"si\">{}</span><span class=\"s1\">.png&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">fnum</span><span class=\"p\">,</span> <span class=\"n\">task_key</span><span class=\"p\">)</span>\n                <span class=\"n\">fig_fpath</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">VerifierExpt</span><span class=\"o\">.</span><span class=\"n\">base_dpath</span><span class=\"p\">),</span> <span class=\"n\">fname</span><span class=\"p\">)</span>\n                <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">imwrite</span><span class=\"p\">(</span><span class=\"n\">fig_fpath</span><span class=\"p\">,</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">render_figure_to_image</span><span class=\"p\">(</span><span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">dpi</span><span class=\"o\">=</span><span class=\"n\">DPI</span><span class=\"p\">))</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">method</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n\n            <span class=\"c1\"># Does going from rank 1 to rank inf generally improve deltas?</span>\n            <span class=\"c1\"># -rank_tpr_tables[np.inf].diff(axis=1) - -rank_tpr_tables[1].diff(axis=1)</span>\n\n            <span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">rcParams</span><span class=\"p\">[</span><span class=\"s1\">&#39;text.usetex&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">rcParams</span><span class=\"p\">[</span><span class=\"s1\">&#39;text.latex.unicode&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"c1\"># mpl.rcParams[&#39;axes.labelsize&#39;] = 12</span>\n            <span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">rcParams</span><span class=\"p\">[</span><span class=\"s1\">&#39;legend.fontsize&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">12</span>\n\n            <span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">rcParams</span><span class=\"p\">[</span><span class=\"s1\">&#39;xtick.color&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;k&#39;</span>\n            <span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">rcParams</span><span class=\"p\">[</span><span class=\"s1\">&#39;ytick.color&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;k&#39;</span>\n            <span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">rcParams</span><span class=\"p\">[</span><span class=\"s1\">&#39;axes.labelcolor&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;k&#39;</span>\n            <span class=\"c1\"># mpl.rcParams[&#39;text.color&#39;] = &#39;k&#39;</span>\n\n            <span class=\"k\">def</span> <span class=\"nf\">method1_roc</span><span class=\"p\">(</span><span class=\"n\">roc_curves</span><span class=\"p\">,</span> <span class=\"n\">algo</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n                <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">gca</span><span class=\"p\">()</span>\n\n                <span class=\"k\">for</span> <span class=\"n\">dbname</span> <span class=\"ow\">in</span> <span class=\"n\">dbnames</span><span class=\"p\">:</span>\n                    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">roc_curves</span><span class=\"p\">[</span><span class=\"n\">algo</span><span class=\"p\">][</span><span class=\"n\">dbname</span><span class=\"p\">]</span>\n                    <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">&#39;fpr&#39;</span><span class=\"p\">],</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">&#39;tpr&#39;</span><span class=\"p\">],</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">&#39;color&#39;</span><span class=\"p\">])</span>\n\n                <span class=\"k\">for</span> <span class=\"n\">dbname</span> <span class=\"ow\">in</span> <span class=\"n\">dbnames</span><span class=\"p\">:</span>\n                    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">roc_curves</span><span class=\"p\">[</span><span class=\"n\">algo</span><span class=\"p\">][</span><span class=\"n\">dbname</span><span class=\"p\">]</span>\n                    <span class=\"n\">other_data</span> <span class=\"o\">=</span> <span class=\"n\">roc_curves</span><span class=\"p\">[</span><span class=\"n\">other</span><span class=\"p\">][</span><span class=\"n\">dbname</span><span class=\"p\">]</span>\n                    <span class=\"n\">other_tpr</span> <span class=\"o\">=</span> <span class=\"n\">other_data</span><span class=\"p\">[</span><span class=\"s1\">&#39;tpr@fpr=0&#39;</span><span class=\"p\">]</span>\n                    <span class=\"n\">species</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">&#39;species&#39;</span><span class=\"p\">]</span>\n                    <span class=\"n\">tpr</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">&#39;tpr@fpr=0&#39;</span><span class=\"p\">]</span>\n                    <span class=\"n\">tpr_text</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"si\">{:.3f}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">tpr</span><span class=\"p\">)</span>\n                    <span class=\"k\">if</span> <span class=\"n\">tpr</span> <span class=\"o\">&gt;=</span> <span class=\"n\">other_tpr</span><span class=\"p\">:</span>\n                        <span class=\"k\">if</span> <span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">rcParams</span><span class=\"p\">[</span><span class=\"s1\">&#39;text.usetex&#39;</span><span class=\"p\">]:</span>\n                            <span class=\"n\">tpr_text</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\\\</span><span class=\"s1\">mathbf{&#39;</span> <span class=\"o\">+</span> <span class=\"n\">tpr_text</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;}&#39;</span>\n                        <span class=\"k\">else</span><span class=\"p\">:</span>\n                            <span class=\"n\">tpr_text</span> <span class=\"o\">=</span> <span class=\"n\">tpr_text</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;*&#39;</span>\n                    <span class=\"n\">label</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;TPR=$</span><span class=\"si\">{tpr}</span><span class=\"s1\">$ </span><span class=\"si\">{species}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n                        <span class=\"n\">tpr</span><span class=\"o\">=</span><span class=\"n\">tpr_text</span><span class=\"p\">,</span> <span class=\"n\">species</span><span class=\"o\">=</span><span class=\"n\">species</span><span class=\"p\">)</span>\n                    <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">&#39;tpr@fpr=0&#39;</span><span class=\"p\">],</span> <span class=\"n\">marker</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">&#39;marker&#39;</span><span class=\"p\">],</span>\n                            <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"n\">label</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">&#39;color&#39;</span><span class=\"p\">])</span>\n\n                <span class=\"k\">if</span> <span class=\"n\">algo</span><span class=\"p\">:</span>\n                    <span class=\"n\">algo</span> <span class=\"o\">=</span> <span class=\"n\">algo</span><span class=\"o\">.</span><span class=\"n\">rstrip</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"s1\">&#39; &#39;</span>\n\n                <span class=\"n\">algo</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>\n                <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_xlabel</span><span class=\"p\">(</span><span class=\"n\">algo</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;false positive rate&#39;</span><span class=\"p\">)</span>\n                <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_ylabel</span><span class=\"p\">(</span><span class=\"s1\">&#39;true positive rate&#39;</span><span class=\"p\">)</span>\n                <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_ylim</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n                <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_xlim</span><span class=\"p\">(</span><span class=\"o\">-.</span><span class=\"mi\">005</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n\n                <span class=\"c1\"># ax.set_title(&#39;%s ROC for %s&#39; % (target_class.title(), self.species))</span>\n                <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">legend</span><span class=\"p\">(</span><span class=\"n\">loc</span><span class=\"o\">=</span><span class=\"s1\">&#39;lower right&#39;</span><span class=\"p\">)</span>\n                <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">adjust_subplots</span><span class=\"p\">(</span><span class=\"n\">top</span><span class=\"o\">=.</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"n\">bottom</span><span class=\"o\">=.</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=.</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=.</span><span class=\"mi\">9</span><span class=\"p\">)</span>\n                <span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">set_size_inches</span><span class=\"p\">([</span><span class=\"n\">W</span> <span class=\"o\">*</span> <span class=\"o\">.</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"n\">H</span><span class=\"p\">])</span>\n\n            <span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">inf</span><span class=\"p\">]</span>\n            <span class=\"c1\"># nums = [1]</span>\n            <span class=\"k\">for</span> <span class=\"n\">num</span> <span class=\"ow\">in</span> <span class=\"n\">nums</span><span class=\"p\">:</span>\n                <span class=\"n\">algos</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">CLF</span><span class=\"p\">,</span> <span class=\"n\">LNBNN</span><span class=\"p\">}</span>\n                <span class=\"k\">for</span> <span class=\"n\">fnum</span><span class=\"p\">,</span> <span class=\"n\">algo</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">algos</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n                    <span class=\"n\">roc_curves</span> <span class=\"o\">=</span> <span class=\"n\">rank_curves</span><span class=\"p\">[</span><span class=\"n\">num</span><span class=\"p\">]</span>\n                    <span class=\"n\">other</span> <span class=\"o\">=</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"nb\">iter</span><span class=\"p\">(</span><span class=\"n\">algos</span> <span class=\"o\">-</span> <span class=\"p\">{</span><span class=\"n\">algo</span><span class=\"p\">}))</span>\n                    <span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"n\">fnum</span><span class=\"p\">)</span>  <span class=\"c1\"># NOQA</span>\n                    <span class=\"n\">method1_roc</span><span class=\"p\">(</span><span class=\"n\">roc_curves</span><span class=\"p\">,</span> <span class=\"n\">algo</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">)</span>\n                    <span class=\"n\">fname</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;agg_roc_rank_</span><span class=\"si\">{}</span><span class=\"s1\">_</span><span class=\"si\">{}</span><span class=\"s1\">_</span><span class=\"si\">{}</span><span class=\"s1\">.png&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">,</span> <span class=\"n\">algo</span><span class=\"p\">,</span> <span class=\"n\">task_key</span><span class=\"p\">)</span>\n                    <span class=\"n\">fig_fpath</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">VerifierExpt</span><span class=\"o\">.</span><span class=\"n\">base_dpath</span><span class=\"p\">),</span> <span class=\"n\">fname</span><span class=\"p\">)</span>\n                    <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">imwrite</span><span class=\"p\">(</span><span class=\"n\">fig_fpath</span><span class=\"p\">,</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">render_figure_to_image</span><span class=\"p\">(</span><span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">dpi</span><span class=\"o\">=</span><span class=\"n\">DPI</span><span class=\"p\">))</span>\n\n            <span class=\"c1\"># -------------</span>\n\n            <span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">rcParams</span><span class=\"p\">[</span><span class=\"s1\">&#39;text.usetex&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">rcParams</span><span class=\"p\">[</span><span class=\"s1\">&#39;text.latex.unicode&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n            <span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">rcParams</span><span class=\"p\">[</span><span class=\"s1\">&#39;xtick.color&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;k&#39;</span>\n            <span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">rcParams</span><span class=\"p\">[</span><span class=\"s1\">&#39;ytick.color&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;k&#39;</span>\n            <span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">rcParams</span><span class=\"p\">[</span><span class=\"s1\">&#39;axes.labelcolor&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;k&#39;</span>\n            <span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">rcParams</span><span class=\"p\">[</span><span class=\"s1\">&#39;text.color&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;k&#39;</span>\n\n            <span class=\"k\">def</span> <span class=\"nf\">method1_cmc</span><span class=\"p\">(</span><span class=\"n\">cmc_curves</span><span class=\"p\">):</span>\n                <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">gca</span><span class=\"p\">()</span>\n                <span class=\"n\">color_cycle</span> <span class=\"o\">=</span> <span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">rcParams</span><span class=\"p\">[</span><span class=\"s1\">&#39;axes.prop_cycle&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">by_key</span><span class=\"p\">()[</span><span class=\"s1\">&#39;color&#39;</span><span class=\"p\">]</span>\n                <span class=\"n\">markers</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">distinct_markers</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cmc_curves</span><span class=\"p\">))</span>\n                <span class=\"k\">for</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">marker</span><span class=\"p\">,</span> <span class=\"n\">color</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">cmc_curves</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">(),</span> <span class=\"n\">markers</span><span class=\"p\">,</span> <span class=\"n\">color_cycle</span><span class=\"p\">):</span>\n                    <span class=\"n\">species</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">&#39;species&#39;</span><span class=\"p\">]</span>\n\n                    <span class=\"k\">if</span> <span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">rcParams</span><span class=\"p\">[</span><span class=\"s1\">&#39;text.usetex&#39;</span><span class=\"p\">]:</span>\n                        <span class=\"n\">cmc0_text</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">&#39;cmc0_tex&#39;</span><span class=\"p\">]</span>\n                        <span class=\"n\">label</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;pos@rank1=$</span><span class=\"si\">{}</span><span class=\"s1\">$ </span><span class=\"si\">{species}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n                            <span class=\"n\">cmc0_text</span><span class=\"p\">,</span> <span class=\"n\">species</span><span class=\"o\">=</span><span class=\"n\">species</span><span class=\"p\">)</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"n\">cmc0_text</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">&#39;cmc0_text&#39;</span><span class=\"p\">]</span>\n                        <span class=\"n\">label</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;pos@rank1=</span><span class=\"si\">{}</span><span class=\"s1\"> </span><span class=\"si\">{species}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n                            <span class=\"n\">cmc0_text</span><span class=\"p\">,</span> <span class=\"n\">species</span><span class=\"o\">=</span><span class=\"n\">species</span><span class=\"p\">)</span>\n\n                    <span class=\"n\">ranks</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">&#39;cmc&#39;</span><span class=\"p\">])</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n                    <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">ranks</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">&#39;cmc&#39;</span><span class=\"p\">],</span> <span class=\"n\">marker</span><span class=\"o\">=</span><span class=\"n\">marker</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"n\">color</span><span class=\"p\">,</span>\n                            <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"n\">label</span><span class=\"p\">)</span>\n\n                <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_xlabel</span><span class=\"p\">(</span><span class=\"s1\">&#39;rank&#39;</span><span class=\"p\">)</span>\n                <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_ylabel</span><span class=\"p\">(</span><span class=\"s1\">&#39;match probability&#39;</span><span class=\"p\">)</span>\n                <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_ylim</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n                <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_xlim</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">)</span>\n                <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_xticks</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">])</span>\n\n                <span class=\"c1\"># ax.set_title(&#39;%s ROC for %s&#39; % (target_class.title(), self.species))</span>\n                <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">legend</span><span class=\"p\">(</span><span class=\"n\">loc</span><span class=\"o\">=</span><span class=\"s1\">&#39;lower right&#39;</span><span class=\"p\">)</span>\n                <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">adjust_subplots</span><span class=\"p\">(</span><span class=\"n\">top</span><span class=\"o\">=.</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"n\">bottom</span><span class=\"o\">=.</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=.</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=.</span><span class=\"mi\">9</span><span class=\"p\">)</span>\n                <span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">set_size_inches</span><span class=\"p\">([</span><span class=\"n\">W</span> <span class=\"o\">*</span> <span class=\"o\">.</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"n\">H</span><span class=\"p\">])</span>\n\n            <span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># NOQA</span>\n            <span class=\"c1\"># num doesnt actually matter here</span>\n            <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n            <span class=\"n\">cmc_curves</span> <span class=\"o\">=</span> <span class=\"n\">rank_curves</span><span class=\"p\">[</span><span class=\"n\">num</span><span class=\"p\">][</span><span class=\"n\">CLF</span><span class=\"p\">]</span>\n            <span class=\"n\">method1_cmc</span><span class=\"p\">(</span><span class=\"n\">cmc_curves</span><span class=\"p\">)</span>\n            <span class=\"n\">fname</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;agg_cmc_clf_</span><span class=\"si\">{}</span><span class=\"s1\">.png&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">task_key</span><span class=\"p\">)</span>\n            <span class=\"n\">fig_fpath</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">VerifierExpt</span><span class=\"o\">.</span><span class=\"n\">base_dpath</span><span class=\"p\">),</span> <span class=\"n\">fname</span><span class=\"p\">)</span>\n            <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">imwrite</span><span class=\"p\">(</span><span class=\"n\">fig_fpath</span><span class=\"p\">,</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">render_figure_to_image</span><span class=\"p\">(</span><span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">dpi</span><span class=\"o\">=</span><span class=\"n\">DPI</span><span class=\"p\">))</span>\n\n            <span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>  <span class=\"c1\"># NOQA</span>\n            <span class=\"n\">cmc_curves</span> <span class=\"o\">=</span> <span class=\"n\">rank_curves</span><span class=\"p\">[</span><span class=\"n\">num</span><span class=\"p\">][</span><span class=\"n\">LNBNN</span><span class=\"p\">]</span>\n            <span class=\"n\">method1_cmc</span><span class=\"p\">(</span><span class=\"n\">cmc_curves</span><span class=\"p\">)</span>\n            <span class=\"n\">fname</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;agg_cmc_lnbnn_</span><span class=\"si\">{}</span><span class=\"s1\">.png&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">task_key</span><span class=\"p\">)</span>\n            <span class=\"n\">fig_fpath</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">VerifierExpt</span><span class=\"o\">.</span><span class=\"n\">base_dpath</span><span class=\"p\">),</span> <span class=\"n\">fname</span><span class=\"p\">)</span>\n            <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">imwrite</span><span class=\"p\">(</span><span class=\"n\">fig_fpath</span><span class=\"p\">,</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">render_figure_to_image</span><span class=\"p\">(</span><span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">dpi</span><span class=\"o\">=</span><span class=\"n\">DPI</span><span class=\"p\">))</span>\n\n        <span class=\"k\">if</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Agg metrics</span>\n\n            <span class=\"n\">agg_y_pred</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"n\">agg_y_true</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"n\">agg_sample_weight</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"n\">agg_class_names</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n            <span class=\"k\">for</span> <span class=\"n\">dbname</span><span class=\"p\">,</span> <span class=\"n\">results</span> <span class=\"ow\">in</span> <span class=\"n\">all_results</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n                <span class=\"n\">task_combo_res</span> <span class=\"o\">=</span> <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"s1\">&#39;task_combo_res&#39;</span><span class=\"p\">]</span>\n                <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">task_combo_res</span><span class=\"p\">[</span><span class=\"n\">task_key</span><span class=\"p\">][</span><span class=\"n\">clf_key</span><span class=\"p\">][</span><span class=\"n\">data_key</span><span class=\"p\">]</span>\n\n                <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">augment_if_needed</span><span class=\"p\">()</span>\n                <span class=\"n\">y_true</span> <span class=\"o\">=</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">y_test_enc</span>\n                <span class=\"n\">incmp_enc</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">aslist</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">class_names</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">INCMP</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">y_true</span> <span class=\"o\">==</span> <span class=\"n\">incmp_enc</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">500</span><span class=\"p\">:</span>\n                    <span class=\"k\">continue</span>\n\n                <span class=\"c1\"># Find auto thresholds</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;-----&#39;</span><span class=\"p\">)</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;dbname = </span><span class=\"si\">{!r}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">dbname</span><span class=\"p\">))</span>\n                <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">y_test_bin</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]):</span>\n                    <span class=\"n\">class_k_truth</span> <span class=\"o\">=</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">y_test_bin</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span>\n                    <span class=\"n\">class_k_probs</span> <span class=\"o\">=</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">clf_probs</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span>\n                    <span class=\"n\">cfms_ovr</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">ConfusionMetrics</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">class_k_probs</span><span class=\"p\">,</span> <span class=\"n\">class_k_truth</span><span class=\"p\">)</span>\n                    <span class=\"c1\"># auc = sklearn.metrics.roc_auc_score(class_k_truth, class_k_probs)</span>\n                    <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">class_names</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span>\n                    <span class=\"c1\"># for state, cfms_ovr in res.confusions_ovr():</span>\n                    <span class=\"k\">if</span> <span class=\"n\">state</span> <span class=\"o\">==</span> <span class=\"n\">POSTV</span><span class=\"p\">:</span>\n                        <span class=\"k\">continue</span>\n                    <span class=\"n\">tpr</span> <span class=\"o\">=</span> <span class=\"n\">cfms_ovr</span><span class=\"o\">.</span><span class=\"n\">get_metric_at_metric</span><span class=\"p\">(</span>\n                        <span class=\"s1\">&#39;tpr&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;fpr&#39;</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">tiebreaker</span><span class=\"o\">=</span><span class=\"s1\">&#39;minthresh&#39;</span><span class=\"p\">)</span>\n                    <span class=\"c1\"># thresh = cfsm_scores_rank.get_metric_at_metric(</span>\n                    <span class=\"c1\">#     &#39;thresh&#39;, &#39;fpr&#39;, 0, tiebreaker=&#39;minthresh&#39;)</span>\n                    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;state = </span><span class=\"si\">{!r}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">))</span>\n                    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;tpr = </span><span class=\"si\">{:.3f}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">tpr</span><span class=\"p\">))</span>\n                    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;+--&#39;</span><span class=\"p\">)</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;-----&#39;</span><span class=\"p\">)</span>\n\n                <span class=\"c1\"># aggregate results</span>\n                <span class=\"n\">y_pred</span> <span class=\"o\">=</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">clf_probs</span><span class=\"o\">.</span><span class=\"n\">argmax</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n                <span class=\"n\">agg_y_true</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">y_true</span><span class=\"o\">.</span><span class=\"n\">tolist</span><span class=\"p\">())</span>\n                <span class=\"n\">agg_y_pred</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">y_pred</span><span class=\"o\">.</span><span class=\"n\">tolist</span><span class=\"p\">())</span>\n                <span class=\"n\">agg_sample_weight</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">sample_weight</span><span class=\"o\">.</span><span class=\"n\">tolist</span><span class=\"p\">())</span>\n                <span class=\"k\">assert</span> <span class=\"p\">(</span><span class=\"n\">agg_class_names</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span>\n                        <span class=\"n\">agg_class_names</span> <span class=\"o\">==</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">class_names</span><span class=\"p\">),</span> <span class=\"p\">(</span>\n                            <span class=\"s1\">&#39;classes are inconsistent&#39;</span><span class=\"p\">)</span>\n                <span class=\"n\">agg_class_names</span> <span class=\"o\">=</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">class_names</span>\n\n            <span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.verif</span> <span class=\"k\">import</span> <span class=\"n\">sklearn_utils</span>\n            <span class=\"n\">agg_report</span> <span class=\"o\">=</span> <span class=\"n\">sklearn_utils</span><span class=\"o\">.</span><span class=\"n\">classification_report2</span><span class=\"p\">(</span>\n                <span class=\"n\">agg_y_true</span><span class=\"p\">,</span> <span class=\"n\">agg_y_pred</span><span class=\"p\">,</span> <span class=\"n\">agg_class_names</span><span class=\"p\">,</span> <span class=\"n\">agg_sample_weight</span><span class=\"p\">,</span>\n                <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n            <span class=\"n\">metric_df</span> <span class=\"o\">=</span> <span class=\"n\">agg_report</span><span class=\"p\">[</span><span class=\"s1\">&#39;metrics&#39;</span><span class=\"p\">]</span>\n            <span class=\"n\">confusion_df</span> <span class=\"o\">=</span> <span class=\"n\">agg_report</span><span class=\"p\">[</span><span class=\"s1\">&#39;confusion&#39;</span><span class=\"p\">]</span>\n            <span class=\"c1\"># multiclass_mcc = agg_report[&#39;mcc&#39;]</span>\n            <span class=\"c1\"># df.loc[&#39;combined&#39;, &#39;MCC&#39;] = multiclass_mcc</span>\n\n            <span class=\"n\">multiclass_mcc</span> <span class=\"o\">=</span> <span class=\"n\">agg_report</span><span class=\"p\">[</span><span class=\"s1\">&#39;mcc&#39;</span><span class=\"p\">]</span>\n            <span class=\"n\">metric_df</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"s1\">&#39;combined&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;mcc&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">multiclass_mcc</span>\n\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">metric_df</span><span class=\"p\">)</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">confusion_df</span><span class=\"p\">)</span>\n\n            <span class=\"n\">dpath</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">base_dpath</span><span class=\"p\">)</span>\n            <span class=\"n\">confusion_fname</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;agg_confusion_</span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">task_key</span><span class=\"p\">)</span>\n            <span class=\"n\">metrics_fname</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;agg_eval_metrics_</span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">task_key</span><span class=\"p\">)</span>\n\n            <span class=\"c1\"># df = self.task_confusion[task_key]</span>\n            <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">confusion_df</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n            <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">rename_axis</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">task_nice_lookup</span><span class=\"p\">[</span><span class=\"n\">task_key</span><span class=\"p\">],</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">rename_axis</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">task_nice_lookup</span><span class=\"p\">[</span><span class=\"n\">task_key</span><span class=\"p\">],</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">columns</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n            <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Real&#39;</span>\n\n            <span class=\"n\">colfmt</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;|l|&#39;</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;r&#39;</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;|l|&#39;</span>\n            <span class=\"n\">tabular</span> <span class=\"o\">=</span> <span class=\"n\">Tabular</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">colfmt</span><span class=\"o\">=</span><span class=\"n\">colfmt</span><span class=\"p\">,</span> <span class=\"n\">hline</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"n\">tabular</span><span class=\"o\">.</span><span class=\"n\">groupxs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)),</span> <span class=\"p\">[</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]]</span>\n\n            <span class=\"n\">tabular</span><span class=\"o\">.</span><span class=\"n\">add_multicolumn_header</span><span class=\"p\">([</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c|&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Predicted&#39;</span><span class=\"p\">),</span> <span class=\"kc\">None</span><span class=\"p\">])</span>\n\n            <span class=\"n\">latex_str</span> <span class=\"o\">=</span> <span class=\"n\">tabular</span><span class=\"o\">.</span><span class=\"n\">as_tabular</span><span class=\"p\">()</span>\n\n            <span class=\"n\">sum_pred</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"n\">sum_real</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">columns</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"n\">latex_str</span> <span class=\"o\">=</span> <span class=\"n\">latex_str</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">sum_pred</span><span class=\"p\">,</span> <span class=\"sa\">r</span><span class=\"s1\">&#39;$\\sum$ predicted&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">latex_str</span> <span class=\"o\">=</span> <span class=\"n\">latex_str</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">sum_real</span><span class=\"p\">,</span> <span class=\"sa\">r</span><span class=\"s1\">&#39;$\\sum$ real&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">confusion_tex</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">align</span><span class=\"p\">(</span><span class=\"n\">latex_str</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&amp;&#39;</span><span class=\"p\">,</span> <span class=\"n\">pos</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">confusion_tex</span><span class=\"p\">)</span>\n\n            <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">render_latex</span><span class=\"p\">(</span><span class=\"n\">confusion_tex</span><span class=\"p\">,</span> <span class=\"n\">dpath</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">base_dpath</span><span class=\"p\">,</span>\n                            <span class=\"n\">fname</span><span class=\"o\">=</span><span class=\"n\">confusion_fname</span><span class=\"p\">)</span>\n\n            <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">metric_df</span>\n            <span class=\"c1\"># df = self.task_metrics[task_key]</span>\n            <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">rename_axis</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">task_nice_lookup</span><span class=\"p\">[</span><span class=\"n\">task_key</span><span class=\"p\">],</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">rename_axis</span><span class=\"p\">({</span><span class=\"s1\">&#39;mcc&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;MCC&#39;</span><span class=\"p\">},</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">rename_axis</span><span class=\"p\">({</span><span class=\"s1\">&#39;combined&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Combined&#39;</span><span class=\"p\">},</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">drop</span><span class=\"p\">([</span><span class=\"s1\">&#39;markedness&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bookmaker&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;fpr&#39;</span><span class=\"p\">],</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n            <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">columns</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n            <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">&#39;support&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">&#39;support&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">int</span><span class=\"p\">)</span>\n            <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">columns</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">emap</span><span class=\"p\">(</span><span class=\"n\">upper_one</span><span class=\"p\">,</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">columns</span><span class=\"p\">)</span>\n\n            <span class=\"kn\">import</span> <span class=\"nn\">re</span>\n            <span class=\"n\">tabular</span> <span class=\"o\">=</span> <span class=\"n\">Tabular</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">colfmt</span><span class=\"o\">=</span><span class=\"s1\">&#39;numeric&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">top</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">,</span> <span class=\"n\">bot</span> <span class=\"o\">=</span> <span class=\"n\">tabular</span><span class=\"o\">.</span><span class=\"n\">as_parts</span><span class=\"p\">()</span>\n            <span class=\"n\">lines</span> <span class=\"o\">=</span> <span class=\"n\">mid</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">newmid</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">lines</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">lines</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">:]]</span>\n            <span class=\"n\">tabular</span><span class=\"o\">.</span><span class=\"n\">parts</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">top</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"p\">,</span> <span class=\"n\">newmid</span><span class=\"p\">,</span> <span class=\"n\">bot</span><span class=\"p\">)</span>\n            <span class=\"n\">latex_str</span> <span class=\"o\">=</span> <span class=\"n\">tabular</span><span class=\"o\">.</span><span class=\"n\">as_tabular</span><span class=\"p\">()</span>\n            <span class=\"n\">latex_str</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"s1\">&#39; -0.00 &#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;  0.00 &#39;</span><span class=\"p\">,</span> <span class=\"n\">latex_str</span><span class=\"p\">)</span>\n            <span class=\"n\">metrics_tex</span> <span class=\"o\">=</span> <span class=\"n\">latex_str</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">metrics_tex</span><span class=\"p\">)</span>\n\n            <span class=\"n\">confusion_tex</span> <span class=\"o\">=</span> <span class=\"n\">confusion_tex</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">&#39;Incomparable&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Incomp.&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">confusion_tex</span> <span class=\"o\">=</span> <span class=\"n\">confusion_tex</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">&#39;predicted&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;pred&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">metrics_tex</span> <span class=\"o\">=</span> <span class=\"n\">metrics_tex</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">&#39;Incomparable&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Incomp.&#39;</span><span class=\"p\">)</span>\n\n            <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">write_to</span><span class=\"p\">(</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">dpath</span><span class=\"p\">,</span> <span class=\"n\">confusion_fname</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;.tex&#39;</span><span class=\"p\">),</span> <span class=\"n\">confusion_tex</span><span class=\"p\">)</span>\n            <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">write_to</span><span class=\"p\">(</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">dpath</span><span class=\"p\">,</span> <span class=\"n\">metrics_fname</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;.tex&#39;</span><span class=\"p\">),</span> <span class=\"n\">metrics_tex</span><span class=\"p\">)</span>\n\n            <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">render_latex</span><span class=\"p\">(</span><span class=\"n\">confusion_tex</span><span class=\"p\">,</span> <span class=\"n\">dpath</span><span class=\"o\">=</span><span class=\"n\">dpath</span><span class=\"p\">,</span> <span class=\"n\">fname</span><span class=\"o\">=</span><span class=\"n\">confusion_fname</span><span class=\"p\">)</span>\n            <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">render_latex</span><span class=\"p\">(</span><span class=\"n\">metrics_tex</span><span class=\"p\">,</span> <span class=\"n\">dpath</span><span class=\"o\">=</span><span class=\"n\">dpath</span><span class=\"p\">,</span> <span class=\"n\">fname</span><span class=\"o\">=</span><span class=\"n\">metrics_fname</span><span class=\"p\">)</span>\n\n        <span class=\"n\">old_cmc</span> <span class=\"o\">=</span> <span class=\"n\">rank1_cmc_table</span><span class=\"p\">[</span><span class=\"n\">LNBNN</span><span class=\"p\">]</span>\n        <span class=\"n\">new_cmc</span> <span class=\"o\">=</span> <span class=\"n\">rank1_cmc_table</span><span class=\"p\">[</span><span class=\"n\">CLF</span><span class=\"p\">]</span>\n        <span class=\"n\">cmc_diff</span> <span class=\"o\">=</span> <span class=\"n\">new_cmc</span> <span class=\"o\">-</span> <span class=\"n\">old_cmc</span>\n        <span class=\"n\">cmc_change</span> <span class=\"o\">=</span> <span class=\"n\">cmc_diff</span> <span class=\"o\">/</span> <span class=\"n\">old_cmc</span>\n        <span class=\"n\">improved</span> <span class=\"o\">=</span> <span class=\"n\">cmc_diff</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"si\">{}</span><span class=\"s1\"> / </span><span class=\"si\">{}</span><span class=\"s1\"> datasets saw CMC improvement&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">improved</span><span class=\"p\">),</span>\n                                                            <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cmc_diff</span><span class=\"p\">)))</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;CMC average absolute diff: </span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">cmc_diff</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()))</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;CMC average percent change: </span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">cmc_change</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()))</span>\n\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Average AUC:</span><span class=\"se\">\\n</span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">rank1_auc_table</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)))</span>\n\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Average TPR:</span><span class=\"se\">\\n</span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">rank1_tpr_table</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)))</span>\n\n\n        <span class=\"n\">old_tpr</span> <span class=\"o\">=</span> <span class=\"n\">rank1_tpr_table</span><span class=\"p\">[</span><span class=\"n\">LNBNN</span><span class=\"p\">]</span>\n        <span class=\"n\">new_tpr</span> <span class=\"o\">=</span> <span class=\"n\">rank1_tpr_table</span><span class=\"p\">[</span><span class=\"n\">CLF</span><span class=\"p\">]</span>\n        <span class=\"n\">tpr_diff</span> <span class=\"o\">=</span> <span class=\"n\">new_tpr</span> <span class=\"o\">-</span> <span class=\"n\">old_tpr</span>\n        <span class=\"n\">tpr_change</span> <span class=\"o\">=</span> <span class=\"n\">tpr_diff</span> <span class=\"o\">/</span> <span class=\"n\">old_tpr</span>\n        <span class=\"n\">improved</span> <span class=\"o\">=</span> <span class=\"n\">tpr_diff</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"si\">{}</span><span class=\"s1\"> / </span><span class=\"si\">{}</span><span class=\"s1\"> datasets saw TPR improvement&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">improved</span><span class=\"p\">),</span>\n                                                            <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">tpr_diff</span><span class=\"p\">)))</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;TPR average absolute diff: </span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">tpr_diff</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()))</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;TPR average percent change: </span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">tpr_change</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()))</span></div>\n\n<div class=\"viewcode-block\" id=\"VerifierExpt.measure_dbstats\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts.postdoc.VerifierExpt.measure_dbstats\">[docs]</a>    <span class=\"nd\">@profile</span>\n    <span class=\"k\">def</span> <span class=\"nf\">measure_dbstats</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        python -m ibeis VerifierExpt.measure dbstats GZ_Master1</span>\n<span class=\"sd\">        python -m ibeis VerifierExpt.measure dbstats PZ_Master1</span>\n<span class=\"sd\">        python -m ibeis VerifierExpt.measure dbstats MantaMatcher</span>\n<span class=\"sd\">        python -m ibeis VerifierExpt.measure dbstats RotanTurtles</span>\n\n<span class=\"sd\">        Ignore:</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.scripts.postdoc import *</span>\n<span class=\"sd\">            &gt;&gt;&gt; #self = VerifierExpt(&#39;GZ_Master1&#39;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; self = VerifierExpt(&#39;MantaMatcher&#39;)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ibs</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_precollect</span><span class=\"p\">()</span>\n        <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ibs</span>\n\n        <span class=\"c1\"># self.ibs.print_annot_stats(self.aids_pool)</span>\n        <span class=\"c1\"># encattr = &#39;static_encounter&#39;</span>\n        <span class=\"n\">encattr</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;encounter_text&#39;</span>\n        <span class=\"c1\"># encattr = &#39;aids&#39;</span>\n\n        <span class=\"n\">annots</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">annots</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">aids_pool</span><span class=\"p\">)</span>\n\n        <span class=\"n\">encounters</span> <span class=\"o\">=</span> <span class=\"n\">annots</span><span class=\"o\">.</span><span class=\"n\">group2</span><span class=\"p\">(</span><span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">annots</span><span class=\"p\">,</span> <span class=\"n\">encattr</span><span class=\"p\">))</span>\n\n        <span class=\"n\">nids</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take_column</span><span class=\"p\">(</span><span class=\"n\">encounters</span><span class=\"o\">.</span><span class=\"n\">nids</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"n\">nid_to_enc</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">group_items</span><span class=\"p\">(</span><span class=\"n\">encounters</span><span class=\"p\">,</span> <span class=\"n\">nids</span><span class=\"p\">)</span>\n\n        <span class=\"n\">single_encs</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">nid</span><span class=\"p\">:</span> <span class=\"n\">e</span> <span class=\"k\">for</span> <span class=\"n\">nid</span><span class=\"p\">,</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">nid_to_enc</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">}</span>\n        <span class=\"n\">multi_encs</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">nid</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">_annot_groups</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n                      <span class=\"k\">for</span> <span class=\"n\">nid</span><span class=\"p\">,</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">nid_to_enc</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">}</span>\n\n        <span class=\"n\">multi_annots</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">annots</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">multi_encs</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">())))</span>\n        <span class=\"n\">single_annots</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">annots</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">single_encs</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">())))</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">annot_stats</span><span class=\"p\">(</span><span class=\"n\">annots</span><span class=\"p\">,</span> <span class=\"n\">encattr</span><span class=\"p\">):</span>\n            <span class=\"n\">encounters</span> <span class=\"o\">=</span> <span class=\"n\">annots</span><span class=\"o\">.</span><span class=\"n\">group2</span><span class=\"p\">(</span><span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">annots</span><span class=\"p\">,</span> <span class=\"n\">encattr</span><span class=\"p\">))</span>\n            <span class=\"n\">nid_to_enc</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">group_items</span><span class=\"p\">(</span>\n                <span class=\"n\">encounters</span><span class=\"p\">,</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take_column</span><span class=\"p\">(</span><span class=\"n\">encounters</span><span class=\"o\">.</span><span class=\"n\">nids</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n            <span class=\"n\">nid_to_nenc</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">map_vals</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">,</span> <span class=\"n\">nid_to_enc</span><span class=\"p\">)</span>\n            <span class=\"n\">n_enc_per_name</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">nid_to_nenc</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">())</span>\n            <span class=\"n\">n_annot_per_enc</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">lmap</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">,</span> <span class=\"n\">encounters</span><span class=\"p\">)</span>\n\n            <span class=\"n\">enc_deltas</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">for</span> <span class=\"n\">encs_</span> <span class=\"ow\">in</span> <span class=\"n\">nid_to_enc</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">():</span>\n                <span class=\"n\">times</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">image_unixtimes_asfloat</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">a</span> <span class=\"ow\">in</span> <span class=\"n\">encs_</span><span class=\"p\">]</span>\n                <span class=\"k\">for</span> <span class=\"n\">tup</span> <span class=\"ow\">in</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">combinations</span><span class=\"p\">(</span><span class=\"n\">times</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">):</span>\n                    <span class=\"n\">delta</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">tup</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">tup</span><span class=\"p\">)</span>\n                    <span class=\"n\">enc_deltas</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">delta</span><span class=\"p\">)</span>\n                <span class=\"c1\">#     pass</span>\n                <span class=\"c1\"># delta = times.max() - times.min()</span>\n                <span class=\"c1\"># enc_deltas.append(delta)</span>\n\n            <span class=\"n\">annot_info</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">odict</span><span class=\"p\">()</span>\n            <span class=\"n\">annot_info</span><span class=\"p\">[</span><span class=\"s1\">&#39;n_names&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">nid_to_enc</span><span class=\"p\">)</span>\n            <span class=\"n\">annot_info</span><span class=\"p\">[</span><span class=\"s1\">&#39;n_annots&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">annots</span><span class=\"p\">)</span>\n            <span class=\"n\">annot_info</span><span class=\"p\">[</span><span class=\"s1\">&#39;n_encs&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">encounters</span><span class=\"p\">)</span>\n            <span class=\"n\">annot_info</span><span class=\"p\">[</span><span class=\"s1\">&#39;enc_time_deltas&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_stats</span><span class=\"p\">(</span><span class=\"n\">enc_deltas</span><span class=\"p\">)</span>\n            <span class=\"n\">annot_info</span><span class=\"p\">[</span><span class=\"s1\">&#39;n_enc_per_name&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_stats</span><span class=\"p\">(</span><span class=\"n\">n_enc_per_name</span><span class=\"p\">)</span>\n            <span class=\"n\">annot_info</span><span class=\"p\">[</span><span class=\"s1\">&#39;n_annot_per_enc&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_stats</span><span class=\"p\">(</span><span class=\"n\">n_annot_per_enc</span><span class=\"p\">)</span>\n            <span class=\"c1\"># print(ut.repr4(annot_info, si=True, nl=1, precision=2))</span>\n            <span class=\"k\">return</span> <span class=\"n\">annot_info</span>\n\n        <span class=\"n\">enc_info</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">odict</span><span class=\"p\">()</span>\n        <span class=\"n\">enc_info</span><span class=\"p\">[</span><span class=\"s1\">&#39;all&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">annot_stats</span><span class=\"p\">(</span><span class=\"n\">annots</span><span class=\"p\">,</span> <span class=\"n\">encattr</span><span class=\"p\">)</span>\n        <span class=\"k\">del</span> <span class=\"n\">enc_info</span><span class=\"p\">[</span><span class=\"s1\">&#39;all&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;enc_time_deltas&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">enc_info</span><span class=\"p\">[</span><span class=\"s1\">&#39;multi&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">annot_stats</span><span class=\"p\">(</span><span class=\"n\">multi_annots</span><span class=\"p\">,</span> <span class=\"n\">encattr</span><span class=\"p\">)</span>\n        <span class=\"n\">enc_info</span><span class=\"p\">[</span><span class=\"s1\">&#39;single&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">annot_stats</span><span class=\"p\">(</span><span class=\"n\">single_annots</span><span class=\"p\">,</span> <span class=\"n\">encattr</span><span class=\"p\">)</span>\n        <span class=\"k\">del</span> <span class=\"n\">enc_info</span><span class=\"p\">[</span><span class=\"s1\">&#39;single&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;n_encs&#39;</span><span class=\"p\">]</span>\n        <span class=\"k\">del</span> <span class=\"n\">enc_info</span><span class=\"p\">[</span><span class=\"s1\">&#39;single&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;n_enc_per_name&#39;</span><span class=\"p\">]</span>\n        <span class=\"k\">del</span> <span class=\"n\">enc_info</span><span class=\"p\">[</span><span class=\"s1\">&#39;single&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;enc_time_deltas&#39;</span><span class=\"p\">]</span>\n\n        <span class=\"n\">qual_info</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dict_hist</span><span class=\"p\">(</span><span class=\"n\">annots</span><span class=\"o\">.</span><span class=\"n\">quality_texts</span><span class=\"p\">)</span>\n        <span class=\"n\">qual_info</span><span class=\"p\">[</span><span class=\"s1\">&#39;None&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">qual_info</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s1\">&#39;UNKNOWN&#39;</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"n\">qual_info</span><span class=\"p\">[</span><span class=\"s1\">&#39;None&#39;</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">qual_info</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n        <span class=\"n\">view_info</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dict_hist</span><span class=\"p\">(</span><span class=\"n\">annots</span><span class=\"o\">.</span><span class=\"n\">viewpoint_code</span><span class=\"p\">)</span>\n        <span class=\"n\">view_info</span><span class=\"p\">[</span><span class=\"s1\">&#39;None&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">view_info</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s1\">&#39;unknown&#39;</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"n\">view_info</span><span class=\"p\">[</span><span class=\"s1\">&#39;None&#39;</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">view_info</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n        <span class=\"n\">info</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">odict</span><span class=\"p\">([])</span>\n        <span class=\"n\">info</span><span class=\"p\">[</span><span class=\"s1\">&#39;species_nice&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">species_nice</span>\n        <span class=\"n\">info</span><span class=\"p\">[</span><span class=\"s1\">&#39;enc&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">enc_info</span>\n        <span class=\"n\">info</span><span class=\"p\">[</span><span class=\"s1\">&#39;qual&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">qual_info</span>\n        <span class=\"n\">info</span><span class=\"p\">[</span><span class=\"s1\">&#39;view&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">view_info</span>\n\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Annotation Pool DBStats&#39;</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr4</span><span class=\"p\">(</span><span class=\"n\">info</span><span class=\"p\">,</span> <span class=\"n\">si</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">nl</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">precision</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">_ave_str2</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">):</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">ave_str</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">&#39;mean&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">]))</span>\n            <span class=\"k\">except</span> <span class=\"ne\">Exception</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"mi\">0</span>\n\n        <span class=\"n\">outinfo</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">odict</span><span class=\"p\">([</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;Database&#39;</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">[</span><span class=\"s1\">&#39;species_nice&#39;</span><span class=\"p\">]),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;Annots&#39;</span><span class=\"p\">,</span> <span class=\"n\">enc_info</span><span class=\"p\">[</span><span class=\"s1\">&#39;all&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;n_annots&#39;</span><span class=\"p\">]),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;Names (singleton)&#39;</span><span class=\"p\">,</span> <span class=\"n\">enc_info</span><span class=\"p\">[</span><span class=\"s1\">&#39;single&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;n_names&#39;</span><span class=\"p\">]),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;Names (resighted)&#39;</span><span class=\"p\">,</span> <span class=\"n\">enc_info</span><span class=\"p\">[</span><span class=\"s1\">&#39;multi&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;n_names&#39;</span><span class=\"p\">]),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;Enc per name (resighted)&#39;</span><span class=\"p\">,</span> <span class=\"n\">_ave_str2</span><span class=\"p\">(</span><span class=\"n\">enc_info</span><span class=\"p\">[</span><span class=\"s1\">&#39;multi&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;n_enc_per_name&#39;</span><span class=\"p\">])),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;Annots per encounter&#39;</span><span class=\"p\">,</span> <span class=\"n\">_ave_str2</span><span class=\"p\">(</span><span class=\"n\">enc_info</span><span class=\"p\">[</span><span class=\"s1\">&#39;all&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;n_annot_per_enc&#39;</span><span class=\"p\">])),</span>\n        <span class=\"p\">])</span>\n        <span class=\"n\">info</span><span class=\"p\">[</span><span class=\"s1\">&#39;outinfo&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">outinfo</span>\n\n        <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">([</span><span class=\"n\">outinfo</span><span class=\"p\">])</span>\n        <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">set_index</span><span class=\"p\">(</span><span class=\"s1\">&#39;Database&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">emap</span><span class=\"p\">(</span><span class=\"n\">upper_one</span><span class=\"p\">,</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">)</span>\n\n        <span class=\"n\">tabular</span> <span class=\"o\">=</span> <span class=\"n\">Tabular</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">colfmt</span><span class=\"o\">=</span><span class=\"s1\">&#39;numeric&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">tabular</span><span class=\"o\">.</span><span class=\"n\">theadify</span> <span class=\"o\">=</span> <span class=\"mi\">16</span>\n        <span class=\"n\">enc_text</span> <span class=\"o\">=</span> <span class=\"n\">tabular</span><span class=\"o\">.</span><span class=\"n\">as_tabular</span><span class=\"p\">()</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">enc_text</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># ut.render_latex(enc_text, dpath=self.dpath, fname=&#39;dbstats&#39;,</span>\n        <span class=\"c1\">#                         preamb_extra=[&#39;\\\\usepackage{makecell}&#39;])</span>\n        <span class=\"c1\"># ut.startfile(_)</span>\n\n        <span class=\"c1\"># expt_name = ut.get_stack_frame().f_code.co_name.replace(&#39;measure_&#39;, &#39;&#39;)</span>\n        <span class=\"n\">expt_name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;dbstats&#39;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">expt_results</span><span class=\"p\">[</span><span class=\"n\">expt_name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">info</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ensuredir</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dpath</span><span class=\"p\">)</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">save_data</span><span class=\"p\">(</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dpath</span><span class=\"p\">,</span> <span class=\"n\">expt_name</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;.pkl&#39;</span><span class=\"p\">),</span> <span class=\"n\">info</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">info</span></div>\n\n<div class=\"viewcode-block\" id=\"VerifierExpt.measure_all\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts.postdoc.VerifierExpt.measure_all\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">measure_all</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        CommandLine:</span>\n<span class=\"sd\">            python -m ibeis VerifierExpt.measure all GZ_Master1,MantaMatcher,RotanTurtles,LF_ALL</span>\n<span class=\"sd\">            python -m ibeis VerifierExpt.measure all GZ_Master1</span>\n\n<span class=\"sd\">        Ignore:</span>\n<span class=\"sd\">            from ibeis.scripts.postdoc import *</span>\n<span class=\"sd\">            self = VerifierExpt(&#39;PZ_MTEST&#39;)</span>\n<span class=\"sd\">            self.measure_all()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_setup</span><span class=\"p\">()</span>\n        <span class=\"n\">pblm</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pblm</span>\n\n        <span class=\"n\">expt_name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;sample_info&#39;</span>\n        <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;graph&#39;</span><span class=\"p\">:</span> <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;aid_pool&#39;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">aids_pool</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;pblm_aids&#39;</span><span class=\"p\">:</span> <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">aids</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;encoded_labels2d&#39;</span><span class=\"p\">:</span> <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">samples</span><span class=\"o\">.</span><span class=\"n\">encoded_2d</span><span class=\"p\">(),</span>\n            <span class=\"s1\">&#39;subtasks&#39;</span><span class=\"p\">:</span> <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">samples</span><span class=\"o\">.</span><span class=\"n\">subtasks</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;multihist&#39;</span><span class=\"p\">:</span> <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">samples</span><span class=\"o\">.</span><span class=\"n\">make_histogram</span><span class=\"p\">(),</span>\n        <span class=\"p\">}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">expt_results</span><span class=\"p\">[</span><span class=\"n\">expt_name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">results</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">save_data</span><span class=\"p\">(</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dpath</span><span class=\"p\">),</span> <span class=\"n\">expt_name</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;.pkl&#39;</span><span class=\"p\">),</span> <span class=\"n\">results</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># importance = {</span>\n        <span class=\"c1\">#     task_key: pblm.feature_importance(task_key=task_key)</span>\n        <span class=\"c1\">#     for task_key in pblm.eval_task_keys</span>\n        <span class=\"c1\"># }</span>\n\n        <span class=\"n\">task</span> <span class=\"o\">=</span> <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">samples</span><span class=\"p\">[</span><span class=\"s1\">&#39;match_state&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">scores</span> <span class=\"o\">=</span> <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">samples</span><span class=\"o\">.</span><span class=\"n\">simple_scores</span><span class=\"p\">[</span><span class=\"s1\">&#39;score_lnbnn_1vM&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">lnbnn_ranks</span> <span class=\"o\">=</span> <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">samples</span><span class=\"o\">.</span><span class=\"n\">simple_scores</span><span class=\"p\">[</span><span class=\"s1\">&#39;rank_lnbnn_1vM&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">indicator_df</span><span class=\"p\">[</span><span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">default_class_name</span><span class=\"p\">]</span>\n        <span class=\"n\">lnbnn_data</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">concat</span><span class=\"p\">([</span><span class=\"n\">scores</span><span class=\"p\">,</span> <span class=\"n\">lnbnn_ranks</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">],</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n        <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;lnbnn_data&#39;</span><span class=\"p\">:</span> <span class=\"n\">lnbnn_data</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;task_combo_res&#39;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">task_combo_res</span><span class=\"p\">,</span>\n            <span class=\"c1\"># &#39;importance&#39;: importance,</span>\n            <span class=\"s1\">&#39;data_key&#39;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_key</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;clf_key&#39;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">clf_key</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">expt_name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;all&#39;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">expt_results</span><span class=\"p\">[</span><span class=\"n\">expt_name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">results</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">save_data</span><span class=\"p\">(</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dpath</span><span class=\"p\">),</span> <span class=\"n\">expt_name</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;.pkl&#39;</span><span class=\"p\">),</span> <span class=\"n\">results</span><span class=\"p\">)</span>\n\n        <span class=\"n\">task_key</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;match_state&#39;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">measure_hard_cases</span><span class=\"p\">(</span><span class=\"n\">task_key</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">measure_dbstats</span><span class=\"p\">()</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">measure_rerank</span><span class=\"p\">()</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argflag</span><span class=\"p\">(</span><span class=\"s1\">&#39;--draw&#39;</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">draw_all</span><span class=\"p\">()</span></div>\n\n<div class=\"viewcode-block\" id=\"VerifierExpt.draw_all\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts.postdoc.VerifierExpt.draw_all\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">draw_all</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        CommandLine:</span>\n<span class=\"sd\">            python -m ibeis VerifierExpt.draw_all --db PZ_MTEST</span>\n<span class=\"sd\">            python -m ibeis VerifierExpt.draw_all --db PZ_PB_RF_TRAIN</span>\n<span class=\"sd\">            python -m ibeis VerifierExpt.draw_all --db GZ_Master1</span>\n<span class=\"sd\">            python -m ibeis VerifierExpt.draw_all --db PZ_Master1</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.scripts.postdoc import *</span>\n<span class=\"sd\">            &gt;&gt;&gt; dbname = ut.get_argval(&#39;--db&#39;, default=&#39;PZ_MTEST&#39;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; dbnames = ut.get_argval(&#39;--dbs&#39;, type_=list, default=[dbname])</span>\n<span class=\"sd\">            &gt;&gt;&gt; for dbname in dbnames:</span>\n<span class=\"sd\">            &gt;&gt;&gt;     print(&#39;dbname = %r&#39; % (dbname,))</span>\n<span class=\"sd\">            &gt;&gt;&gt;     self = VerifierExpt(dbname)</span>\n<span class=\"sd\">            &gt;&gt;&gt;     self.draw_all()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ensure_results</span><span class=\"p\">(</span><span class=\"s1\">&#39;all&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">eval_task_keys</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">[</span><span class=\"s1\">&#39;task_combo_res&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;eval_task_keys = </span><span class=\"si\">{!r}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">eval_task_keys</span><span class=\"p\">))</span>\n        <span class=\"n\">task_key</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;match_state&#39;</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argflag</span><span class=\"p\">(</span><span class=\"s1\">&#39;--cases&#39;</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">draw_hard_cases</span><span class=\"p\">(</span><span class=\"n\">task_key</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">write_sample_info</span><span class=\"p\">()</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">draw_roc</span><span class=\"p\">(</span><span class=\"n\">task_key</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">draw_rerank</span><span class=\"p\">()</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">write_metrics</span><span class=\"p\">(</span><span class=\"n\">task_key</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">draw_class_score_hist</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">draw_mcc_thresh</span><span class=\"p\">(</span><span class=\"n\">task_key</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"VerifierExpt.draw_roc\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts.postdoc.VerifierExpt.draw_roc\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">draw_roc</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">task_key</span><span class=\"o\">=</span><span class=\"s1\">&#39;match_state&#39;</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        python -m ibeis VerifierExpt.draw roc GZ_Master1 photobomb_state</span>\n<span class=\"sd\">        python -m ibeis VerifierExpt.draw roc GZ_Master1 match_state</span>\n\n<span class=\"sd\">        python -m ibeis VerifierExpt.draw roc PZ_MTEST</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">rcParams</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">TMP_RC</span><span class=\"p\">)</span>\n\n        <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ensure_results</span><span class=\"p\">(</span><span class=\"s1\">&#39;all&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">data_key</span> <span class=\"o\">=</span> <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"s1\">&#39;data_key&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">clf_key</span> <span class=\"o\">=</span> <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"s1\">&#39;clf_key&#39;</span><span class=\"p\">]</span>\n\n        <span class=\"n\">task_combo_res</span> <span class=\"o\">=</span> <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"s1\">&#39;task_combo_res&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">lnbnn_data</span> <span class=\"o\">=</span> <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"s1\">&#39;lnbnn_data&#39;</span><span class=\"p\">]</span>\n\n        <span class=\"n\">task_key</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;match_state&#39;</span>\n\n        <span class=\"n\">scores</span> <span class=\"o\">=</span> <span class=\"n\">lnbnn_data</span><span class=\"p\">[</span><span class=\"s1\">&#39;score_lnbnn_1vM&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span>\n        <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">lnbnn_data</span><span class=\"p\">[</span><span class=\"n\">POSTV</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span>\n        <span class=\"c1\"># task_key = &#39;match_state&#39;</span>\n        <span class=\"n\">target_class</span> <span class=\"o\">=</span> <span class=\"n\">POSTV</span>\n        <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">task_combo_res</span><span class=\"p\">[</span><span class=\"n\">task_key</span><span class=\"p\">][</span><span class=\"n\">clf_key</span><span class=\"p\">][</span><span class=\"n\">data_key</span><span class=\"p\">]</span>\n        <span class=\"n\">cfsm_vsm</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">ConfusionMetrics</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">scores</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n        <span class=\"n\">cfsm_clf</span> <span class=\"o\">=</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">confusions</span><span class=\"p\">(</span><span class=\"n\">target_class</span><span class=\"p\">)</span>\n        <span class=\"n\">roc_curves</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"p\">{</span><span class=\"s1\">&#39;label&#39;</span><span class=\"p\">:</span> <span class=\"n\">LNBNN</span><span class=\"p\">,</span> <span class=\"s1\">&#39;fpr&#39;</span><span class=\"p\">:</span> <span class=\"n\">cfsm_vsm</span><span class=\"o\">.</span><span class=\"n\">fpr</span><span class=\"p\">,</span> <span class=\"s1\">&#39;tpr&#39;</span><span class=\"p\">:</span> <span class=\"n\">cfsm_vsm</span><span class=\"o\">.</span><span class=\"n\">tpr</span><span class=\"p\">,</span> <span class=\"s1\">&#39;auc&#39;</span><span class=\"p\">:</span> <span class=\"n\">cfsm_vsm</span><span class=\"o\">.</span><span class=\"n\">auc</span><span class=\"p\">},</span>\n            <span class=\"p\">{</span><span class=\"s1\">&#39;label&#39;</span><span class=\"p\">:</span> <span class=\"n\">CLF</span><span class=\"p\">,</span> <span class=\"s1\">&#39;fpr&#39;</span><span class=\"p\">:</span> <span class=\"n\">cfsm_clf</span><span class=\"o\">.</span><span class=\"n\">fpr</span><span class=\"p\">,</span> <span class=\"s1\">&#39;tpr&#39;</span><span class=\"p\">:</span> <span class=\"n\">cfsm_clf</span><span class=\"o\">.</span><span class=\"n\">tpr</span><span class=\"p\">,</span> <span class=\"s1\">&#39;auc&#39;</span><span class=\"p\">:</span> <span class=\"n\">cfsm_clf</span><span class=\"o\">.</span><span class=\"n\">auc</span><span class=\"p\">},</span>\n        <span class=\"p\">]</span>\n\n        <span class=\"n\">rank_clf_roc_curve</span>   <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ddict</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">)</span>\n        <span class=\"n\">rank_lnbnn_roc_curve</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ddict</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">)</span>\n\n        <span class=\"n\">roc_info_lines</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n        <span class=\"c1\"># Check the ROC for only things in the top of the LNBNN ranked lists</span>\n        <span class=\"k\">if</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n            <span class=\"n\">rank_auc_df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">()</span>\n            <span class=\"n\">rank_auc_df</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&lt;=rank&#39;</span>\n            <span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">inf</span><span class=\"p\">]</span>\n            <span class=\"k\">for</span> <span class=\"n\">num</span> <span class=\"ow\">in</span> <span class=\"n\">nums</span><span class=\"p\">:</span>\n                <span class=\"n\">ranks</span> <span class=\"o\">=</span> <span class=\"n\">lnbnn_data</span><span class=\"p\">[</span><span class=\"s1\">&#39;rank_lnbnn_1vM&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span>\n                <span class=\"n\">sub_data</span> <span class=\"o\">=</span> <span class=\"n\">lnbnn_data</span><span class=\"p\">[</span><span class=\"n\">ranks</span> <span class=\"o\">&lt;=</span> <span class=\"n\">num</span><span class=\"p\">]</span>\n\n                <span class=\"n\">scores</span> <span class=\"o\">=</span> <span class=\"n\">sub_data</span><span class=\"p\">[</span><span class=\"s1\">&#39;score_lnbnn_1vM&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span>\n                <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">sub_data</span><span class=\"p\">[</span><span class=\"n\">POSTV</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span>\n                <span class=\"n\">probs</span> <span class=\"o\">=</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">probs_df</span><span class=\"p\">[</span><span class=\"n\">POSTV</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">sub_data</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span>\n\n                <span class=\"n\">cfsm_scores_rank</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">ConfusionMetrics</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">scores</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n                <span class=\"n\">cfsm_probs_rank</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">ConfusionMetrics</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">probs</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n\n                <span class=\"c1\"># if num == np.inf:</span>\n                <span class=\"c1\">#     num = &#39;inf&#39;</span>\n                <span class=\"n\">rank_auc_df</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">num</span><span class=\"p\">,</span> <span class=\"n\">LNBNN</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">cfsm_scores_rank</span><span class=\"o\">.</span><span class=\"n\">auc</span>\n                <span class=\"n\">rank_auc_df</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">num</span><span class=\"p\">,</span> <span class=\"n\">CLF</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">cfsm_probs_rank</span><span class=\"o\">.</span><span class=\"n\">auc</span>\n\n                <span class=\"n\">rank_lnbnn_roc_curve</span><span class=\"p\">[</span><span class=\"n\">num</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                    <span class=\"s1\">&#39;label&#39;</span><span class=\"p\">:</span> <span class=\"n\">LNBNN</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;fpr&#39;</span><span class=\"p\">:</span> <span class=\"n\">cfsm_scores_rank</span><span class=\"o\">.</span><span class=\"n\">fpr</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;tpr&#39;</span><span class=\"p\">:</span> <span class=\"n\">cfsm_scores_rank</span><span class=\"o\">.</span><span class=\"n\">tpr</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;auc&#39;</span><span class=\"p\">:</span> <span class=\"n\">cfsm_scores_rank</span><span class=\"o\">.</span><span class=\"n\">auc</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;tpr@fpr=0&#39;</span><span class=\"p\">:</span> <span class=\"n\">cfsm_scores_rank</span><span class=\"o\">.</span><span class=\"n\">get_metric_at_metric</span><span class=\"p\">(</span>\n                        <span class=\"s1\">&#39;tpr&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;fpr&#39;</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">tiebreaker</span><span class=\"o\">=</span><span class=\"s1\">&#39;minthresh&#39;</span><span class=\"p\">),</span>\n                    <span class=\"s1\">&#39;thresh@fpr=0&#39;</span><span class=\"p\">:</span> <span class=\"n\">cfsm_scores_rank</span><span class=\"o\">.</span><span class=\"n\">get_metric_at_metric</span><span class=\"p\">(</span>\n                        <span class=\"s1\">&#39;thresh&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;fpr&#39;</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">tiebreaker</span><span class=\"o\">=</span><span class=\"s1\">&#39;minthresh&#39;</span><span class=\"p\">),</span>\n                <span class=\"p\">}</span>\n\n                <span class=\"n\">rank_clf_roc_curve</span><span class=\"p\">[</span><span class=\"n\">num</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                    <span class=\"s1\">&#39;label&#39;</span><span class=\"p\">:</span> <span class=\"n\">CLF</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;fpr&#39;</span><span class=\"p\">:</span> <span class=\"n\">cfsm_probs_rank</span><span class=\"o\">.</span><span class=\"n\">fpr</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;tpr&#39;</span><span class=\"p\">:</span> <span class=\"n\">cfsm_probs_rank</span><span class=\"o\">.</span><span class=\"n\">tpr</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;auc&#39;</span><span class=\"p\">:</span> <span class=\"n\">cfsm_probs_rank</span><span class=\"o\">.</span><span class=\"n\">auc</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;tpr@fpr=0&#39;</span><span class=\"p\">:</span> <span class=\"n\">cfsm_probs_rank</span><span class=\"o\">.</span><span class=\"n\">get_metric_at_metric</span><span class=\"p\">(</span>\n                        <span class=\"s1\">&#39;tpr&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;fpr&#39;</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">tiebreaker</span><span class=\"o\">=</span><span class=\"s1\">&#39;minthresh&#39;</span><span class=\"p\">),</span>\n                    <span class=\"s1\">&#39;thresh@fpr=0&#39;</span><span class=\"p\">:</span> <span class=\"n\">cfsm_probs_rank</span><span class=\"o\">.</span><span class=\"n\">get_metric_at_metric</span><span class=\"p\">(</span>\n                        <span class=\"s1\">&#39;thresh&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;fpr&#39;</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">tiebreaker</span><span class=\"o\">=</span><span class=\"s1\">&#39;minthresh&#39;</span><span class=\"p\">),</span>\n                <span class=\"p\">}</span>\n\n            <span class=\"n\">auc_text</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;AUC when restricting to the top `num` LNBNN ranks:&#39;</span>\n            <span class=\"n\">auc_text</span> <span class=\"o\">+=</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">rank_auc_df</span><span class=\"p\">)</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">auc_text</span><span class=\"p\">)</span>\n            <span class=\"n\">roc_info_lines</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">auc_text</span><span class=\"p\">]</span>\n\n        <span class=\"k\">if</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n            <span class=\"n\">tpr_info</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"n\">at_metric</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;tpr&#39;</span>\n            <span class=\"k\">for</span> <span class=\"n\">at_value</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"o\">.</span><span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">75</span><span class=\"p\">]:</span>\n                <span class=\"n\">info</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">odict</span><span class=\"p\">()</span>\n                <span class=\"k\">for</span> <span class=\"n\">want_metric</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s1\">&#39;fpr&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;n_false_pos&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;n_true_pos&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;thresh&#39;</span><span class=\"p\">]:</span>\n                    <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"si\">{}</span><span class=\"s1\">_@_</span><span class=\"si\">{}</span><span class=\"s1\">=</span><span class=\"si\">{:.3f}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">want_metric</span><span class=\"p\">,</span> <span class=\"n\">at_metric</span><span class=\"p\">,</span> <span class=\"n\">at_value</span><span class=\"p\">)</span>\n                    <span class=\"n\">info</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">cfsm_clf</span><span class=\"o\">.</span><span class=\"n\">get_metric_at_metric</span><span class=\"p\">(</span>\n                        <span class=\"n\">want_metric</span><span class=\"p\">,</span> <span class=\"n\">at_metric</span><span class=\"p\">,</span> <span class=\"n\">at_value</span><span class=\"p\">,</span>\n                        <span class=\"n\">tiebreaker</span><span class=\"o\">=</span><span class=\"s1\">&#39;minthresh&#39;</span><span class=\"p\">)</span>\n                    <span class=\"k\">if</span> <span class=\"n\">key</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">&#39;n_&#39;</span><span class=\"p\">):</span>\n                        <span class=\"n\">info</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">info</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">])</span>\n                <span class=\"n\">tpr_info</span> <span class=\"o\">+=</span> <span class=\"p\">[(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr4</span><span class=\"p\">(</span><span class=\"n\">info</span><span class=\"p\">,</span> <span class=\"n\">align</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">precision</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">))]</span>\n\n            <span class=\"n\">tpr_text</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Metric TPR relationships</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">tpr_info</span><span class=\"p\">)</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tpr_text</span><span class=\"p\">)</span>\n\n            <span class=\"n\">roc_info_lines</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">tpr_text</span><span class=\"p\">]</span>\n\n            <span class=\"n\">fpr_info</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"n\">at_metric</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;fpr&#39;</span>\n            <span class=\"k\">for</span> <span class=\"n\">at_value</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">001</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">01</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">1</span><span class=\"p\">]:</span>\n                <span class=\"n\">info</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">odict</span><span class=\"p\">()</span>\n                <span class=\"k\">for</span> <span class=\"n\">want_metric</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s1\">&#39;tpr&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;n_false_pos&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;n_true_pos&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;thresh&#39;</span><span class=\"p\">]:</span>\n                    <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"si\">{}</span><span class=\"s1\">_@_</span><span class=\"si\">{}</span><span class=\"s1\">=</span><span class=\"si\">{:.3f}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">want_metric</span><span class=\"p\">,</span> <span class=\"n\">at_metric</span><span class=\"p\">,</span> <span class=\"n\">at_value</span><span class=\"p\">)</span>\n                    <span class=\"n\">info</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">cfsm_clf</span><span class=\"o\">.</span><span class=\"n\">get_metric_at_metric</span><span class=\"p\">(</span>\n                        <span class=\"n\">want_metric</span><span class=\"p\">,</span> <span class=\"n\">at_metric</span><span class=\"p\">,</span> <span class=\"n\">at_value</span><span class=\"p\">,</span>\n                        <span class=\"n\">tiebreaker</span><span class=\"o\">=</span><span class=\"s1\">&#39;minthresh&#39;</span><span class=\"p\">)</span>\n                    <span class=\"k\">if</span> <span class=\"n\">key</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">&#39;n_&#39;</span><span class=\"p\">):</span>\n                        <span class=\"n\">info</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">info</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">])</span>\n                <span class=\"n\">fpr_info</span> <span class=\"o\">+=</span> <span class=\"p\">[(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr4</span><span class=\"p\">(</span><span class=\"n\">info</span><span class=\"p\">,</span> <span class=\"n\">align</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">precision</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">))]</span>\n\n            <span class=\"n\">fpr_text</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Metric FPR relationships</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">fpr_info</span><span class=\"p\">)</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fpr_text</span><span class=\"p\">)</span>\n\n            <span class=\"n\">roc_info_lines</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">fpr_text</span><span class=\"p\">]</span>\n\n        <span class=\"n\">roc_info_text</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n\\n</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">roc_info_lines</span><span class=\"p\">))</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">writeto</span><span class=\"p\">(</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dpath</span><span class=\"p\">,</span> <span class=\"s1\">&#39;roc_info.txt&#39;</span><span class=\"p\">),</span> <span class=\"n\">roc_info_text</span><span class=\"p\">)</span>\n        <span class=\"c1\"># print(roc_info_text)</span>\n\n        <span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># NOQA</span>\n        <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">gca</span><span class=\"p\">()</span>\n        <span class=\"k\">for</span> <span class=\"n\">data</span> <span class=\"ow\">in</span> <span class=\"n\">roc_curves</span><span class=\"p\">:</span>\n            <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">&#39;fpr&#39;</span><span class=\"p\">],</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">&#39;tpr&#39;</span><span class=\"p\">],</span>\n                    <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">&#39;AUC=</span><span class=\"si\">{:.3f}</span><span class=\"s1\"> </span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">&#39;auc&#39;</span><span class=\"p\">],</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">&#39;label&#39;</span><span class=\"p\">]))</span>\n        <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_xlabel</span><span class=\"p\">(</span><span class=\"s1\">&#39;false positive rate&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_ylabel</span><span class=\"p\">(</span><span class=\"s1\">&#39;true positive rate&#39;</span><span class=\"p\">)</span>\n        <span class=\"c1\"># ax.set_title(&#39;%s ROC for %s&#39; % (target_class.title(), self.species))</span>\n        <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">legend</span><span class=\"p\">()</span>\n        <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">adjust_subplots</span><span class=\"p\">(</span><span class=\"n\">top</span><span class=\"o\">=.</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"n\">bottom</span><span class=\"o\">=.</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=.</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=.</span><span class=\"mi\">9</span><span class=\"p\">)</span>\n        <span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">set_size_inches</span><span class=\"p\">([</span><span class=\"n\">W</span><span class=\"p\">,</span> <span class=\"n\">H</span><span class=\"p\">])</span>\n\n        <span class=\"n\">fname</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;roc_</span><span class=\"si\">{}</span><span class=\"s1\">.png&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">task_key</span><span class=\"p\">)</span>\n        <span class=\"n\">fig_fpath</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dpath</span><span class=\"p\">),</span> <span class=\"n\">fname</span><span class=\"p\">)</span>\n        <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">imwrite</span><span class=\"p\">(</span><span class=\"n\">fig_fpath</span><span class=\"p\">,</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">render_figure_to_image</span><span class=\"p\">(</span><span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">dpi</span><span class=\"o\">=</span><span class=\"n\">DPI</span><span class=\"p\">))</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;wrote roc figure to fig_fpath= </span><span class=\"si\">{!r}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">fig_fpath</span><span class=\"p\">))</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">num</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">inf</span><span class=\"p\">]:</span>\n            <span class=\"n\">roc_curves_</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">rank_clf_roc_curve</span><span class=\"p\">[</span><span class=\"n\">num</span><span class=\"p\">],</span> <span class=\"n\">rank_lnbnn_roc_curve</span><span class=\"p\">[</span><span class=\"n\">num</span><span class=\"p\">]]</span>\n            <span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># NOQA</span>\n            <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">gca</span><span class=\"p\">()</span>\n            <span class=\"k\">for</span> <span class=\"n\">data</span> <span class=\"ow\">in</span> <span class=\"n\">roc_curves_</span><span class=\"p\">:</span>\n                <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">&#39;fpr&#39;</span><span class=\"p\">],</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">&#39;tpr&#39;</span><span class=\"p\">],</span>\n                        <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">&#39;AUC=</span><span class=\"si\">{:.3f}</span><span class=\"s1\"> TPR=</span><span class=\"si\">{:.3f}</span><span class=\"s1\"> </span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n                            <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">&#39;auc&#39;</span><span class=\"p\">],</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">&#39;tpr@fpr=0&#39;</span><span class=\"p\">],</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">&#39;label&#39;</span><span class=\"p\">]))</span>\n            <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_xlabel</span><span class=\"p\">(</span><span class=\"s1\">&#39;false positive rate&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_ylabel</span><span class=\"p\">(</span><span class=\"s1\">&#39;true positive rate&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_title</span><span class=\"p\">(</span><span class=\"s1\">&#39;ROC@rank&lt;=</span><span class=\"si\">{num}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"o\">=</span><span class=\"n\">num</span><span class=\"p\">))</span>\n            <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">legend</span><span class=\"p\">()</span>\n            <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">adjust_subplots</span><span class=\"p\">(</span><span class=\"n\">top</span><span class=\"o\">=.</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"n\">bottom</span><span class=\"o\">=.</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=.</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=.</span><span class=\"mi\">9</span><span class=\"p\">)</span>\n            <span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">set_size_inches</span><span class=\"p\">([</span><span class=\"n\">W</span><span class=\"p\">,</span> <span class=\"n\">H</span><span class=\"p\">])</span>\n\n            <span class=\"n\">fname</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;rank_</span><span class=\"si\">{}</span><span class=\"s1\">_roc_</span><span class=\"si\">{}</span><span class=\"s1\">.png&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">,</span> <span class=\"n\">task_key</span><span class=\"p\">)</span>\n            <span class=\"n\">fig_fpath</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dpath</span><span class=\"p\">),</span> <span class=\"n\">fname</span><span class=\"p\">)</span>\n            <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">imwrite</span><span class=\"p\">(</span><span class=\"n\">fig_fpath</span><span class=\"p\">,</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">render_figure_to_image</span><span class=\"p\">(</span><span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">dpi</span><span class=\"o\">=</span><span class=\"n\">DPI</span><span class=\"p\">))</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;wrote roc figure to fig_fpath= </span><span class=\"si\">{!r}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">fig_fpath</span><span class=\"p\">))</span></div>\n\n<div class=\"viewcode-block\" id=\"VerifierExpt.draw_rerank\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts.postdoc.VerifierExpt.draw_rerank\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">draw_rerank</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">rcParams</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">TMP_RC</span><span class=\"p\">)</span>\n\n        <span class=\"n\">expt_name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;rerank&#39;</span>\n        <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ensure_results</span><span class=\"p\">(</span><span class=\"n\">expt_name</span><span class=\"p\">)</span>\n\n        <span class=\"n\">cdfs</span><span class=\"p\">,</span> <span class=\"n\">infos</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">results</span><span class=\"p\">))</span>\n        <span class=\"n\">lnbnn_cdf</span> <span class=\"o\">=</span> <span class=\"n\">cdfs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">clf_cdf</span> <span class=\"o\">=</span> <span class=\"n\">cdfs</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">plot_cmcs</span><span class=\"p\">([</span><span class=\"n\">lnbnn_cdf</span><span class=\"p\">,</span> <span class=\"n\">clf_cdf</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s1\">&#39;ranking&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rank+clf&#39;</span><span class=\"p\">],</span> <span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n                  <span class=\"n\">ymin</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">set_size_inches</span><span class=\"p\">([</span><span class=\"n\">W</span><span class=\"p\">,</span> <span class=\"n\">H</span> <span class=\"o\">*</span> <span class=\"o\">.</span><span class=\"mi\">6</span><span class=\"p\">])</span>\n        <span class=\"n\">qsizes</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take_column</span><span class=\"p\">(</span><span class=\"n\">infos</span><span class=\"p\">,</span> <span class=\"s1\">&#39;qsize&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">dsizes</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take_column</span><span class=\"p\">(</span><span class=\"n\">infos</span><span class=\"p\">,</span> <span class=\"s1\">&#39;dsize&#39;</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">allsame</span><span class=\"p\">(</span><span class=\"n\">qsizes</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">allsame</span><span class=\"p\">(</span><span class=\"n\">dsizes</span><span class=\"p\">)</span>\n        <span class=\"n\">nonvaried_text</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;qsize=</span><span class=\"si\">{}</span><span class=\"s1\">, dsize=</span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">qsizes</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">dsizes</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n        <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">relative_text</span><span class=\"p\">(</span><span class=\"s1\">&#39;lowerleft&#39;</span><span class=\"p\">,</span> <span class=\"n\">nonvaried_text</span><span class=\"p\">,</span> <span class=\"n\">ax</span><span class=\"o\">=</span><span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">gca</span><span class=\"p\">())</span>\n\n        <span class=\"n\">fpath</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dpath</span><span class=\"p\">),</span> <span class=\"n\">expt_name</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;.png&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">imwrite</span><span class=\"p\">(</span><span class=\"n\">fpath</span><span class=\"p\">,</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">render_figure_to_image</span><span class=\"p\">(</span><span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">dpi</span><span class=\"o\">=</span><span class=\"n\">DPI</span><span class=\"p\">))</span>\n        <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argflag</span><span class=\"p\">(</span><span class=\"s1\">&#39;--diskshow&#39;</span><span class=\"p\">):</span>\n            <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">startfile</span><span class=\"p\">(</span><span class=\"n\">fpath</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">fpath</span></div>\n\n<div class=\"viewcode-block\" id=\"VerifierExpt.measure_rerank\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts.postdoc.VerifierExpt.measure_rerank\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">measure_rerank</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.scripts.postdoc import *</span>\n<span class=\"sd\">            &gt;&gt;&gt; defaultdb = &#39;PZ_Master1&#39;</span>\n<span class=\"sd\">            &gt;&gt;&gt; defaultdb = &#39;GZ_Master1&#39;</span>\n<span class=\"sd\">            &gt;&gt;&gt; self = VerifierExpt(defaultdb)</span>\n<span class=\"sd\">            &gt;&gt;&gt; self._setup()</span>\n<span class=\"sd\">            &gt;&gt;&gt; self.measure_rerank()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"s1\">&#39;pblm&#39;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_setup</span><span class=\"p\">()</span>\n\n        <span class=\"n\">pblm</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pblm</span>\n        <span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">infr</span>\n        <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">ibs</span>\n\n        <span class=\"c1\"># NOTE: this is not the aids_pool for PZ_Master1</span>\n        <span class=\"n\">aids</span> <span class=\"o\">=</span> <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">aids</span>\n\n        <span class=\"c1\"># These are not gaurenteed to be comparable</span>\n        <span class=\"k\">if</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">dbname</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;RotanTurtles&#39;</span><span class=\"p\">:</span>\n            <span class=\"c1\"># HACK</span>\n            <span class=\"n\">viewpoint_aware</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">viewpoint_aware</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n        <span class=\"kn\">from</span> <span class=\"nn\">ibeis.scripts</span> <span class=\"k\">import</span> <span class=\"n\">thesis</span>\n        <span class=\"n\">qaids</span><span class=\"p\">,</span> <span class=\"n\">daids_list</span><span class=\"p\">,</span> <span class=\"n\">info_list</span> <span class=\"o\">=</span> <span class=\"n\">thesis</span><span class=\"o\">.</span><span class=\"n\">Sampler</span><span class=\"o\">.</span><span class=\"n\">_varied_inputs</span><span class=\"p\">(</span>\n            <span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"n\">viewpoint_aware</span><span class=\"o\">=</span><span class=\"n\">viewpoint_aware</span><span class=\"p\">)</span>\n        <span class=\"n\">daids</span> <span class=\"o\">=</span> <span class=\"n\">daids_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">info</span> <span class=\"o\">=</span> <span class=\"n\">info_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n        <span class=\"c1\"># ---------------------------</span>\n        <span class=\"c1\"># Execute the ranking algorithm</span>\n        <span class=\"n\">qaids</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">qaids</span><span class=\"p\">)</span>\n        <span class=\"n\">daids</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">daids</span><span class=\"p\">)</span>\n        <span class=\"n\">cfgdict</span> <span class=\"o\">=</span> <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">_make_lnbnn_pcfg</span><span class=\"p\">()</span>\n        <span class=\"n\">qreq_</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">new_query_request</span><span class=\"p\">(</span><span class=\"n\">qaids</span><span class=\"p\">,</span> <span class=\"n\">daids</span><span class=\"p\">,</span> <span class=\"n\">cfgdict</span><span class=\"o\">=</span><span class=\"n\">cfgdict</span><span class=\"p\">)</span>\n        <span class=\"n\">cm_list</span> <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">()</span>\n        <span class=\"n\">cm_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">extend_results</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">cm</span> <span class=\"ow\">in</span> <span class=\"n\">cm_list</span><span class=\"p\">]</span>\n\n        <span class=\"c1\"># ---------------------------</span>\n        <span class=\"c1\"># Measure LNBNN rank probabilities</span>\n        <span class=\"n\">top</span> <span class=\"o\">=</span> <span class=\"mi\">20</span>\n        <span class=\"n\">rerank_pairs</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">cm</span> <span class=\"ow\">in</span> <span class=\"n\">cm_list</span><span class=\"p\">:</span>\n            <span class=\"n\">pairs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">e_</span><span class=\"p\">(</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">qaid</span><span class=\"p\">,</span> <span class=\"n\">daid</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">daid</span> <span class=\"ow\">in</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">get_top_aids</span><span class=\"p\">(</span><span class=\"n\">top</span><span class=\"p\">)]</span>\n            <span class=\"n\">rerank_pairs</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">pairs</span><span class=\"p\">)</span>\n        <span class=\"n\">rerank_pairs</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">rerank_pairs</span><span class=\"p\">))</span>\n\n        <span class=\"c1\"># ---------------------------</span>\n        <span class=\"c1\"># Re-rank the those top ranks</span>\n        <span class=\"n\">verif</span> <span class=\"o\">=</span> <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">_make_evaluation_verifiers</span><span class=\"p\">()[</span><span class=\"s1\">&#39;match_state&#39;</span><span class=\"p\">]</span>\n        <span class=\"c1\"># verif = infr.learn_evaluation_verifiers()[&#39;match_state&#39;]</span>\n        <span class=\"n\">probs</span> <span class=\"o\">=</span> <span class=\"n\">verif</span><span class=\"o\">.</span><span class=\"n\">predict_proba_df</span><span class=\"p\">(</span><span class=\"n\">rerank_pairs</span><span class=\"p\">)</span>\n        <span class=\"n\">pos_probs</span> <span class=\"o\">=</span> <span class=\"n\">probs</span><span class=\"p\">[</span><span class=\"n\">POSTV</span><span class=\"p\">]</span>\n\n        <span class=\"n\">clf_name_ranks</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">lnbnn_name_ranks</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">infr</span>\n        <span class=\"k\">for</span> <span class=\"n\">cm</span> <span class=\"ow\">in</span> <span class=\"n\">cm_list</span><span class=\"p\">:</span>\n            <span class=\"n\">daids</span> <span class=\"o\">=</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">get_top_aids</span><span class=\"p\">(</span><span class=\"n\">top</span><span class=\"p\">)</span>\n            <span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">e_</span><span class=\"p\">(</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">qaid</span><span class=\"p\">,</span> <span class=\"n\">daid</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">daid</span> <span class=\"ow\">in</span> <span class=\"n\">daids</span><span class=\"p\">]</span>\n            <span class=\"n\">dnids</span> <span class=\"o\">=</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">dnid_list</span><span class=\"p\">[</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">daid2_idx</span><span class=\"p\">,</span> <span class=\"n\">daids</span><span class=\"p\">)]</span>\n            <span class=\"n\">scores</span> <span class=\"o\">=</span> <span class=\"n\">pos_probs</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">edges</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span>\n\n            <span class=\"n\">sortx</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">argsort</span><span class=\"p\">(</span><span class=\"n\">scores</span><span class=\"p\">)[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"n\">clf_ranks</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">qnid</span> <span class=\"o\">==</span> <span class=\"n\">dnids</span><span class=\"p\">[</span><span class=\"n\">sortx</span><span class=\"p\">])[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">clf_ranks</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"n\">clf_rank</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">unique_nids</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">clf_rank</span> <span class=\"o\">=</span> <span class=\"n\">clf_ranks</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"n\">lnbnn_rank</span> <span class=\"o\">=</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">get_name_ranks</span><span class=\"p\">([</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">qnid</span><span class=\"p\">])[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"n\">clf_name_ranks</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">clf_rank</span><span class=\"p\">)</span>\n            <span class=\"n\">lnbnn_name_ranks</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">lnbnn_rank</span><span class=\"p\">)</span>\n\n        <span class=\"n\">bins</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">dnids</span><span class=\"p\">))</span>\n        <span class=\"n\">hist</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">histogram</span><span class=\"p\">(</span><span class=\"n\">lnbnn_name_ranks</span><span class=\"p\">,</span> <span class=\"n\">bins</span><span class=\"o\">=</span><span class=\"n\">bins</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">lnbnn_cdf</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">cumsum</span><span class=\"p\">(</span><span class=\"n\">hist</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">hist</span><span class=\"p\">))</span>\n\n        <span class=\"n\">bins</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">dnids</span><span class=\"p\">))</span>\n        <span class=\"n\">hist</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">histogram</span><span class=\"p\">(</span><span class=\"n\">clf_name_ranks</span><span class=\"p\">,</span> <span class=\"n\">bins</span><span class=\"o\">=</span><span class=\"n\">bins</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">clf_cdf</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">cumsum</span><span class=\"p\">(</span><span class=\"n\">hist</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">hist</span><span class=\"p\">))</span>\n\n        <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"p\">(</span><span class=\"n\">lnbnn_cdf</span><span class=\"p\">,</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">update_dict</span><span class=\"p\">(</span><span class=\"n\">info</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">(),</span> <span class=\"p\">{</span><span class=\"s1\">&#39;pcfg&#39;</span><span class=\"p\">:</span> <span class=\"n\">cfgdict</span><span class=\"p\">})),</span>\n            <span class=\"p\">(</span><span class=\"n\">clf_cdf</span><span class=\"p\">,</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">update_dict</span><span class=\"p\">(</span><span class=\"n\">info</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">(),</span> <span class=\"p\">{</span><span class=\"s1\">&#39;pcfg&#39;</span><span class=\"p\">:</span> <span class=\"n\">cfgdict</span><span class=\"p\">})),</span>\n        <span class=\"p\">]</span>\n        <span class=\"n\">expt_name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;rerank&#39;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">expt_results</span><span class=\"p\">[</span><span class=\"n\">expt_name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">results</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">save_data</span><span class=\"p\">(</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dpath</span><span class=\"p\">),</span> <span class=\"n\">expt_name</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;.pkl&#39;</span><span class=\"p\">),</span> <span class=\"n\">results</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"VerifierExpt.ranking_hyperparamm_search\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts.postdoc.VerifierExpt.ranking_hyperparamm_search\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">ranking_hyperparamm_search</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.scripts.postdoc import *</span>\n<span class=\"sd\">            &gt;&gt;&gt; self = VerifierExpt(&#39;humpbacks_fb&#39;)</span>\n\n<span class=\"sd\">            &gt;&gt;&gt; self = VerifierExpt(&#39;MantaMatcher&#39;)</span>\n\n<span class=\"sd\">            &gt;&gt;&gt; self = VerifierExpt(&#39;RotanTurtles&#39;)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">set_num_procs</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"s1\">&#39;pblm&#39;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_setup</span><span class=\"p\">(</span><span class=\"n\">quick</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"c1\"># ut.set_process_title(self.dbname + &#39;hyperparam_search&#39;)</span>\n        <span class=\"n\">pblm</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pblm</span>\n        <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">ibs</span>\n        <span class=\"n\">aids</span> <span class=\"o\">=</span> <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">aids</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">measure_name_cmc</span><span class=\"p\">(</span><span class=\"n\">cm_list</span><span class=\"p\">,</span> <span class=\"n\">nbins</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n            <span class=\"n\">lnbnn_name_ranks</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">for</span> <span class=\"n\">cm</span> <span class=\"ow\">in</span> <span class=\"n\">cm_list</span><span class=\"p\">:</span>\n                <span class=\"n\">lnbnn_rank</span> <span class=\"o\">=</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">get_name_ranks</span><span class=\"p\">([</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">qnid</span><span class=\"p\">])[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                <span class=\"n\">lnbnn_name_ranks</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">lnbnn_rank</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">nbins</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">nbins</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">lnbnn_name_ranks</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n            <span class=\"n\">bins</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"n\">nbins</span><span class=\"p\">)</span>\n            <span class=\"n\">hist</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">histogram</span><span class=\"p\">(</span><span class=\"n\">lnbnn_name_ranks</span><span class=\"p\">,</span> <span class=\"n\">bins</span><span class=\"o\">=</span><span class=\"n\">bins</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"n\">cdf</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">cumsum</span><span class=\"p\">(</span><span class=\"n\">hist</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">hist</span><span class=\"p\">))</span>\n            <span class=\"k\">return</span> <span class=\"n\">cdf</span>\n\n        <span class=\"c1\"># These are not gaurenteed to be comparable</span>\n        <span class=\"n\">viewpoint_aware</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">dbname</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;RotanTurtles&#39;</span><span class=\"p\">)</span>\n\n        <span class=\"kn\">from</span> <span class=\"nn\">ibeis.scripts</span> <span class=\"k\">import</span> <span class=\"n\">thesis</span>\n        <span class=\"n\">qaids</span><span class=\"p\">,</span> <span class=\"n\">daids_list</span><span class=\"p\">,</span> <span class=\"n\">info_list</span> <span class=\"o\">=</span> <span class=\"n\">thesis</span><span class=\"o\">.</span><span class=\"n\">Sampler</span><span class=\"o\">.</span><span class=\"n\">_varied_inputs</span><span class=\"p\">(</span>\n            <span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"n\">viewpoint_aware</span><span class=\"o\">=</span><span class=\"n\">viewpoint_aware</span><span class=\"p\">)</span>\n        <span class=\"n\">daids</span> <span class=\"o\">=</span> <span class=\"n\">daids_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n        <span class=\"c1\"># ---------------------------</span>\n        <span class=\"c1\"># Execute the ranking algorithm</span>\n        <span class=\"n\">qaids</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">qaids</span><span class=\"p\">)</span>\n        <span class=\"n\">daids</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">daids</span><span class=\"p\">)</span>\n        <span class=\"n\">cfgdict</span> <span class=\"o\">=</span> <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">_make_lnbnn_pcfg</span><span class=\"p\">()</span>\n        <span class=\"n\">qreq_</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">new_query_request</span><span class=\"p\">(</span><span class=\"n\">qaids</span><span class=\"p\">,</span> <span class=\"n\">daids</span><span class=\"p\">,</span> <span class=\"n\">cfgdict</span><span class=\"o\">=</span><span class=\"n\">cfgdict</span><span class=\"p\">)</span>\n        <span class=\"n\">cm_list</span> <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">()</span>\n        <span class=\"n\">cm_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">extend_results</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">cm</span> <span class=\"ow\">in</span> <span class=\"n\">cm_list</span><span class=\"p\">]</span>\n\n        <span class=\"n\">measure_name_cmc</span><span class=\"p\">(</span><span class=\"n\">cm_list</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n        <span class=\"c1\"># ---------------------------</span>\n        <span class=\"c1\"># Sample a small dataset of borderline pairs to do hyperparamter</span>\n        <span class=\"c1\"># optimization on</span>\n        <span class=\"c1\"># target_n_qaids = 64</span>\n        <span class=\"c1\"># target_n_daids = 128</span>\n        <span class=\"c1\"># target_n_daids = 64</span>\n\n        <span class=\"c1\"># target_n_qaids = 16</span>\n        <span class=\"c1\"># target_n_daids = 64</span>\n\n        <span class=\"n\">target_n_qaids</span> <span class=\"o\">=</span> <span class=\"mi\">32</span>\n        <span class=\"n\">target_n_daids</span> <span class=\"o\">=</span> <span class=\"mi\">128</span>\n\n        <span class=\"n\">border</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">(),</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"n\">qaids</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;qaid&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rank&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;daids&#39;</span><span class=\"p\">])</span>\n        <span class=\"k\">for</span> <span class=\"n\">cm</span> <span class=\"ow\">in</span> <span class=\"n\">cm_list</span><span class=\"p\">:</span>\n            <span class=\"n\">gt_aids</span> <span class=\"o\">=</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">get_top_gt_aids</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">=</span><span class=\"n\">ibs</span><span class=\"p\">)</span>\n            <span class=\"n\">gt_ranks</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">get_annot_ranks</span><span class=\"p\">(</span><span class=\"n\">gt_aids</span><span class=\"p\">))</span>\n            <span class=\"n\">gt_scores</span> <span class=\"o\">=</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">get_annot_scores</span><span class=\"p\">(</span><span class=\"n\">gt_aids</span><span class=\"p\">)</span>\n            <span class=\"n\">border</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">qaid</span><span class=\"p\">,</span> <span class=\"s1\">&#39;qaid&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">qaid</span>\n            <span class=\"n\">border</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">qaid</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rank&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">gt_ranks</span><span class=\"o\">.</span><span class=\"n\">min</span><span class=\"p\">()</span>\n            <span class=\"n\">border</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">qaid</span><span class=\"p\">,</span> <span class=\"s1\">&#39;score&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">gt_scores</span><span class=\"p\">)</span>\n            <span class=\"n\">border</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">qaid</span><span class=\"p\">,</span> <span class=\"s1\">&#39;daids&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">gt_aids</span><span class=\"o\">.</span><span class=\"n\">tolist</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Remove very hard and very easy cases</span>\n        <span class=\"n\">border</span> <span class=\"o\">=</span> <span class=\"n\">border</span><span class=\"p\">[</span><span class=\"n\">border</span><span class=\"p\">[</span><span class=\"s1\">&#39;rank&#39;</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">border</span> <span class=\"o\">=</span> <span class=\"n\">border</span><span class=\"p\">[</span><span class=\"n\">border</span><span class=\"p\">[</span><span class=\"s1\">&#39;score&#39;</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"o\">-</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">inf</span><span class=\"p\">]</span>\n\n        <span class=\"c1\"># Take things near the middle</span>\n        <span class=\"n\">border</span> <span class=\"o\">=</span> <span class=\"n\">border</span><span class=\"o\">.</span><span class=\"n\">sort_values</span><span class=\"p\">(</span><span class=\"s1\">&#39;score&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">((</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">border</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"n\">target_n_qaids</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n        <span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"n\">p1</span> <span class=\"o\">+</span> <span class=\"n\">target_n_qaids</span>\n        <span class=\"n\">selected</span> <span class=\"o\">=</span> <span class=\"n\">border</span><span class=\"o\">.</span><span class=\"n\">iloc</span><span class=\"p\">[</span><span class=\"n\">p1</span><span class=\"p\">:</span><span class=\"n\">p2</span><span class=\"p\">]</span>\n\n        <span class=\"c1\"># vals, bins = np.histogram(border[&#39;rank&#39;],</span>\n        <span class=\"c1\">#                           bins=np.arange(border[&#39;rank&#39;].max()))</span>\n        <span class=\"c1\"># rank_hist = pd.Series(vals, index=bins[:-1])</span>\n        <span class=\"c1\"># rank_cumhist = rank_hist.cumsum()</span>\n        <span class=\"c1\"># rank_thresh = np.where(rank_cumhist &lt;= target_n_qaids)[0][-1]</span>\n        <span class=\"c1\"># selected = border[border[&#39;rank&#39;] &lt;= rank_thresh]</span>\n\n        <span class=\"n\">needed_daids</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">selected</span><span class=\"p\">[</span><span class=\"s1\">&#39;daids&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">))</span>\n        <span class=\"n\">avail_daids</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">daids</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">needed_daids</span><span class=\"p\">)</span>\n        <span class=\"n\">n_need</span> <span class=\"o\">=</span> <span class=\"n\">target_n_daids</span> <span class=\"o\">-</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">needed_daids</span><span class=\"p\">)</span>\n        <span class=\"n\">confuse_daids</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">shuffle</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">avail_daids</span><span class=\"p\">),</span> <span class=\"n\">rng</span><span class=\"o\">=</span><span class=\"mi\">1393290</span><span class=\"p\">)[:</span><span class=\"n\">n_need</span><span class=\"p\">]</span>\n\n        <span class=\"c1\"># ---------------------------</span>\n        <span class=\"c1\"># Rerun ranking on the smaller dataset</span>\n\n        <span class=\"sd\">&#39;&#39;&#39;</span>\n<span class=\"sd\">        pip install git+git://github.com/pandas-dev/pandas.git@master</span>\n\n<span class=\"sd\">        (26, 876),</span>\n<span class=\"sd\">        &#39;&#39;&#39;</span>\n\n        <span class=\"n\">sel_qaids</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">selected</span><span class=\"p\">[</span><span class=\"s1\">&#39;qaid&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">)</span>\n        <span class=\"n\">sel_daids</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">needed_daids</span> <span class=\"o\">+</span> <span class=\"n\">confuse_daids</span><span class=\"p\">)</span>\n\n        <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">sel_qaids</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;no query chips&#39;</span>\n\n        <span class=\"n\">baseline_cfgdict</span> <span class=\"o\">=</span> <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">_make_lnbnn_pcfg</span><span class=\"p\">()</span>\n        <span class=\"n\">baseline_cfgdict</span><span class=\"p\">[</span><span class=\"s1\">&#39;sv_on&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"n\">baseline_cfgdict</span><span class=\"p\">[</span><span class=\"s1\">&#39;affine_invariance&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">_parallel_chips</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">to_optimize</span><span class=\"p\">(</span><span class=\"n\">dial</span><span class=\"p\">):</span>\n            <span class=\"n\">cfgdict</span> <span class=\"o\">=</span> <span class=\"n\">baseline_cfgdict</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n            <span class=\"n\">cfgdict</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">dial</span><span class=\"p\">)</span>\n            <span class=\"n\">qreq_</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">new_query_request</span><span class=\"p\">(</span><span class=\"n\">sel_qaids</span><span class=\"p\">,</span> <span class=\"n\">sel_daids</span><span class=\"p\">,</span> <span class=\"n\">cfgdict</span><span class=\"o\">=</span><span class=\"n\">cfgdict</span><span class=\"p\">)</span>\n            <span class=\"n\">cm_list</span> <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">()</span>\n            <span class=\"n\">cm_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">extend_results</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">cm</span> <span class=\"ow\">in</span> <span class=\"n\">cm_list</span><span class=\"p\">]</span>\n            <span class=\"c1\"># Optimize this score</span>\n            <span class=\"n\">score</span> <span class=\"o\">=</span> <span class=\"n\">measure_name_cmc</span><span class=\"p\">(</span><span class=\"n\">cm_list</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"k\">return</span> <span class=\"n\">score</span>\n\n        <span class=\"n\">dials</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"c1\"># &#39;medianblur_thresh&#39;: [0, 10, 20, 30, 40, 50],</span>\n            <span class=\"c1\"># &#39;adapteq_ksize&#39;: [4, 6, 8, 16, 32],</span>\n            <span class=\"c1\"># &#39;adapteq_ksize&#39;: [4, 8, 32],</span>\n            <span class=\"s1\">&#39;adapteq_ksize&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">],</span>\n            <span class=\"c1\"># &#39;adapteq_limit&#39;: [1, 2, 3, 6],</span>\n            <span class=\"c1\"># &#39;adapteq_limit&#39;: [1, 6],</span>\n            <span class=\"s1\">&#39;adapteq_limit&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span>\n            <span class=\"c1\"># &#39;affine_invariance&#39;: [True, False]</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"n\">dials</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;adapteq_ksize&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">16</span><span class=\"p\">],</span>\n            <span class=\"s1\">&#39;adapteq_limit&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span>\n            <span class=\"c1\"># &#39;medianblur_thresh&#39;: [40, 50, 60, 100],</span>\n            <span class=\"s1\">&#39;medianblur_thresh&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">],</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"n\">combos</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">all_dict_combinations</span><span class=\"p\">(</span><span class=\"n\">dials</span><span class=\"p\">))</span>\n        <span class=\"c1\"># combos += [</span>\n        <span class=\"c1\">#     {&#39;adapteq&#39;: False},</span>\n        <span class=\"c1\">#     {&#39;adapteq&#39;: False, &#39;medianblur&#39;: False},</span>\n        <span class=\"c1\"># ]</span>\n        <span class=\"n\">combos</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">shuffle</span><span class=\"p\">(</span><span class=\"n\">combos</span><span class=\"p\">,</span> <span class=\"n\">rng</span><span class=\"o\">=</span><span class=\"mi\">32132</span><span class=\"p\">)</span>\n\n        <span class=\"n\">grid_output</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"n\">dial</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"n\">grid_output</span><span class=\"p\">[</span><span class=\"s1\">&#39;baseline&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">to_optimize</span><span class=\"p\">(</span><span class=\"n\">dial</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;SO FAR: &#39;</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">align</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr4</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">sort_dict</span><span class=\"p\">(</span><span class=\"n\">grid_output</span><span class=\"p\">,</span> <span class=\"s1\">&#39;vals&#39;</span><span class=\"p\">),</span> <span class=\"n\">precision</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"s1\">&#39;:&#39;</span><span class=\"p\">,</span> <span class=\"n\">pos</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">dial</span> <span class=\"ow\">in</span> <span class=\"n\">combos</span><span class=\"p\">:</span>\n            <span class=\"n\">score</span> <span class=\"o\">=</span> <span class=\"n\">to_optimize</span><span class=\"p\">(</span><span class=\"n\">dial</span><span class=\"p\">)</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;FINISHED: &#39;</span><span class=\"p\">)</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;score = </span><span class=\"si\">{!r}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">score</span><span class=\"p\">))</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;dial = </span><span class=\"si\">{!r}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">dial</span><span class=\"p\">))</span>\n            <span class=\"n\">hashdial</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">hashdict</span><span class=\"p\">(</span><span class=\"n\">dial</span><span class=\"p\">)</span>\n            <span class=\"n\">grid_output</span><span class=\"p\">[</span><span class=\"n\">hashdial</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">score</span>\n\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;SO FAR: &#39;</span><span class=\"p\">)</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">align</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr4</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">sort_dict</span><span class=\"p\">(</span><span class=\"n\">grid_output</span><span class=\"p\">,</span> <span class=\"s1\">&#39;vals&#39;</span><span class=\"p\">),</span> <span class=\"n\">precision</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"s1\">&#39;:&#39;</span><span class=\"p\">,</span> <span class=\"n\">pos</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">))</span></div>\n\n<div class=\"viewcode-block\" id=\"VerifierExpt.measure_hard_cases\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts.postdoc.VerifierExpt.measure_hard_cases\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">measure_hard_cases</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">task_key</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Find a failure case for each class</span>\n\n<span class=\"sd\">        CommandLine:</span>\n<span class=\"sd\">            python -m ibeis VerifierExpt.measure hard_cases GZ_Master1 match_state</span>\n<span class=\"sd\">            python -m ibeis VerifierExpt.measure hard_cases GZ_Master1 photobomb_state</span>\n<span class=\"sd\">            python -m ibeis VerifierExpt.draw hard_cases GZ_Master1 match_state</span>\n<span class=\"sd\">            python -m ibeis VerifierExpt.draw hard_cases GZ_Master1 photobomb_state</span>\n\n<span class=\"sd\">            python -m ibeis VerifierExpt.measure hard_cases PZ_Master1 match_state</span>\n<span class=\"sd\">            python -m ibeis VerifierExpt.measure hard_cases PZ_Master1 photobomb_state</span>\n<span class=\"sd\">            python -m ibeis VerifierExpt.draw hard_cases PZ_Master1 match_state</span>\n<span class=\"sd\">            python -m ibeis VerifierExpt.draw hard_cases PZ_Master1 photobomb_state</span>\n\n<span class=\"sd\">            python -m ibeis VerifierExpt.measure hard_cases PZ_MTEST match_state</span>\n<span class=\"sd\">            python -m ibeis VerifierExpt.draw hard_cases PZ_MTEST photobomb_state</span>\n\n<span class=\"sd\">            python -m ibeis VerifierExpt.draw hard_cases RotanTurtles match_state</span>\n<span class=\"sd\">            python -m ibeis VerifierExpt.draw hard_cases MantaMatcher match_state</span>\n\n<span class=\"sd\">        Ignore:</span>\n<span class=\"sd\">            &gt;&gt;&gt; task_key = &#39;match_state&#39;</span>\n<span class=\"sd\">            &gt;&gt;&gt; task_key = &#39;photobomb_state&#39;</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.scripts.postdoc import *</span>\n<span class=\"sd\">            &gt;&gt;&gt; self = VerifierExpt(&#39;GZ_Master1&#39;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; self._setup()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"s1\">&#39;pblm&#39;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Need to setup before measuring hard cases&#39;</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_setup</span><span class=\"p\">()</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Measuring hard cases&#39;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">pblm</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pblm</span>\n\n        <span class=\"n\">front</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"n\">back</span> <span class=\"o\">=</span> <span class=\"mi\">8</span>\n\n        <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">task_combo_res</span><span class=\"p\">[</span><span class=\"n\">task_key</span><span class=\"p\">][</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">clf_key</span><span class=\"p\">][</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_key</span><span class=\"p\">]</span>\n\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;task_key = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">task_key</span><span class=\"p\">,))</span>\n        <span class=\"k\">if</span> <span class=\"n\">task_key</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;photobomb_state&#39;</span><span class=\"p\">:</span>\n            <span class=\"n\">method</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;max-mcc&#39;</span>\n            <span class=\"n\">method</span> <span class=\"o\">=</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">get_thresholds</span><span class=\"p\">(</span><span class=\"s1\">&#39;mcc&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;maximize&#39;</span><span class=\"p\">)</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Using thresholds: &#39;</span> <span class=\"o\">+</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr4</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"p\">))</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">method</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;argmax&#39;</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Using argmax&#39;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">case_df</span> <span class=\"o\">=</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">hardness_analysis</span><span class=\"p\">(</span><span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">samples</span><span class=\"p\">,</span> <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">method</span><span class=\"o\">=</span><span class=\"n\">method</span><span class=\"p\">)</span>\n        <span class=\"c1\"># group = case_df.sort_values([&#39;real_conf&#39;, &#39;easiness&#39;])</span>\n        <span class=\"n\">case_df</span> <span class=\"o\">=</span> <span class=\"n\">case_df</span><span class=\"o\">.</span><span class=\"n\">sort_values</span><span class=\"p\">([</span><span class=\"s1\">&#39;easiness&#39;</span><span class=\"p\">])</span>\n\n        <span class=\"c1\"># failure_cases = case_df[(case_df[&#39;real_conf&#39;] &gt; 0) &amp; case_df[&#39;failed&#39;]]</span>\n        <span class=\"n\">failure_cases</span> <span class=\"o\">=</span> <span class=\"n\">case_df</span><span class=\"p\">[</span><span class=\"n\">case_df</span><span class=\"p\">[</span><span class=\"s1\">&#39;failed&#39;</span><span class=\"p\">]]</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">failure_cases</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;No reviewed failures exist. Do pblm.qt_review_hardcases&#39;</span><span class=\"p\">)</span>\n\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;There are </span><span class=\"si\">{}</span><span class=\"s1\"> failure cases&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">failure_cases</span><span class=\"p\">)))</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;With average hardness </span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n            <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr2</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">stats_dict</span><span class=\"p\">(</span><span class=\"n\">failure_cases</span><span class=\"p\">[</span><span class=\"s1\">&#39;hardness&#39;</span><span class=\"p\">]),</span> <span class=\"n\">strkeys</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                     <span class=\"n\">precision</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)))</span>\n\n        <span class=\"n\">cases</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">pred</span><span class=\"p\">,</span> <span class=\"n\">real</span><span class=\"p\">),</span> <span class=\"n\">group</span> <span class=\"ow\">in</span> <span class=\"n\">failure_cases</span><span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">((</span><span class=\"s1\">&#39;pred&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;real&#39;</span><span class=\"p\">)):</span>\n\n            <span class=\"n\">group</span> <span class=\"o\">=</span> <span class=\"n\">group</span><span class=\"o\">.</span><span class=\"n\">sort_values</span><span class=\"p\">([</span><span class=\"s1\">&#39;easiness&#39;</span><span class=\"p\">])</span>\n            <span class=\"n\">flags</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flag_percentile_parts</span><span class=\"p\">(</span><span class=\"n\">group</span><span class=\"p\">[</span><span class=\"s1\">&#39;easiness&#39;</span><span class=\"p\">],</span> <span class=\"n\">front</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">,</span> <span class=\"n\">back</span><span class=\"p\">)</span>\n            <span class=\"n\">subgroup</span> <span class=\"o\">=</span> <span class=\"n\">group</span><span class=\"p\">[</span><span class=\"n\">flags</span><span class=\"p\">]</span>\n\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Selected </span><span class=\"si\">{}</span><span class=\"s1\"> r(</span><span class=\"si\">{}</span><span class=\"s1\">)-p(</span><span class=\"si\">{}</span><span class=\"s1\">) cases&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n                <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">subgroup</span><span class=\"p\">),</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">class_names</span><span class=\"p\">[</span><span class=\"n\">real</span><span class=\"p\">],</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">class_names</span><span class=\"p\">[</span><span class=\"n\">pred</span><span class=\"p\">]</span>\n            <span class=\"p\">))</span>\n            <span class=\"c1\"># ut.take_percentile_parts(group[&#39;easiness&#39;], front, mid, back)</span>\n\n            <span class=\"c1\"># Prefer examples we have manually reviewed before</span>\n            <span class=\"c1\"># group = group.sort_values([&#39;real_conf&#39;, &#39;easiness&#39;])</span>\n            <span class=\"c1\"># subgroup = group[0:num_top]</span>\n\n            <span class=\"k\">for</span> <span class=\"n\">idx</span><span class=\"p\">,</span> <span class=\"n\">case</span> <span class=\"ow\">in</span> <span class=\"n\">subgroup</span><span class=\"o\">.</span><span class=\"n\">iterrows</span><span class=\"p\">():</span>\n                <span class=\"n\">edge</span> <span class=\"o\">=</span> <span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">case</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">&#39;aid1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;aid2&#39;</span><span class=\"p\">]))</span>\n                <span class=\"n\">cases</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">({</span>\n                    <span class=\"s1\">&#39;edge&#39;</span><span class=\"p\">:</span> <span class=\"n\">edge</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;real&#39;</span><span class=\"p\">:</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">class_names</span><span class=\"p\">[</span><span class=\"n\">case</span><span class=\"p\">[</span><span class=\"s1\">&#39;real&#39;</span><span class=\"p\">]],</span>\n                    <span class=\"s1\">&#39;pred&#39;</span><span class=\"p\">:</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">class_names</span><span class=\"p\">[</span><span class=\"n\">case</span><span class=\"p\">[</span><span class=\"s1\">&#39;pred&#39;</span><span class=\"p\">]],</span>\n                    <span class=\"s1\">&#39;failed&#39;</span><span class=\"p\">:</span> <span class=\"n\">case</span><span class=\"p\">[</span><span class=\"s1\">&#39;failed&#39;</span><span class=\"p\">],</span>\n                    <span class=\"s1\">&#39;easiness&#39;</span><span class=\"p\">:</span> <span class=\"n\">case</span><span class=\"p\">[</span><span class=\"s1\">&#39;easiness&#39;</span><span class=\"p\">],</span>\n                    <span class=\"s1\">&#39;real_conf&#39;</span><span class=\"p\">:</span> <span class=\"n\">case</span><span class=\"p\">[</span><span class=\"s1\">&#39;real_conf&#39;</span><span class=\"p\">],</span>\n                    <span class=\"s1\">&#39;probs&#39;</span><span class=\"p\">:</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">probs_df</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">edge</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">(),</span>\n                    <span class=\"s1\">&#39;edge_data&#39;</span><span class=\"p\">:</span> <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">get_edge_data</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">),</span>\n                <span class=\"p\">})</span>\n\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Selected </span><span class=\"si\">%d</span><span class=\"s1\"> cases in total&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cases</span><span class=\"p\">)))</span>\n\n        <span class=\"c1\"># Augment cases with their one-vs-one matches</span>\n        <span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">infr</span>\n        <span class=\"n\">data_key</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_key</span>\n        <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">feat_extract_info</span><span class=\"p\">[</span><span class=\"n\">data_key</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">case</span><span class=\"p\">[</span><span class=\"s1\">&#39;edge&#39;</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">case</span> <span class=\"ow\">in</span> <span class=\"n\">cases</span><span class=\"p\">]</span>\n        <span class=\"n\">matches</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_make_matches_from</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"p\">)</span>\n        <span class=\"n\">match</span> <span class=\"o\">=</span> <span class=\"n\">matches</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">config</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">_prep_annot</span><span class=\"p\">(</span><span class=\"n\">annot</span><span class=\"p\">):</span>\n            <span class=\"c1\"># Load data needed for plot into annot dictionary</span>\n            <span class=\"n\">annot</span><span class=\"p\">[</span><span class=\"s1\">&#39;aid&#39;</span><span class=\"p\">]</span>\n            <span class=\"n\">annot</span><span class=\"p\">[</span><span class=\"s1\">&#39;rchip&#39;</span><span class=\"p\">]</span>\n            <span class=\"n\">annot</span><span class=\"p\">[</span><span class=\"s1\">&#39;kpts&#39;</span><span class=\"p\">]</span>\n            <span class=\"c1\"># Cast the lazy dict to a real one</span>\n            <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"n\">annot</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"n\">annot</span><span class=\"o\">.</span><span class=\"n\">evaluated_keys</span><span class=\"p\">()}</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">case</span><span class=\"p\">,</span> <span class=\"n\">match</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">cases</span><span class=\"p\">,</span> <span class=\"n\">matches</span><span class=\"p\">):</span>\n            <span class=\"c1\"># store its chip fpath and other required info</span>\n            <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">annot1</span> <span class=\"o\">=</span> <span class=\"n\">_prep_annot</span><span class=\"p\">(</span><span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">annot1</span><span class=\"p\">)</span>\n            <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">annot2</span> <span class=\"o\">=</span> <span class=\"n\">_prep_annot</span><span class=\"p\">(</span><span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">annot2</span><span class=\"p\">)</span>\n            <span class=\"n\">case</span><span class=\"p\">[</span><span class=\"s1\">&#39;match&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">match</span>\n\n        <span class=\"n\">fpath</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dpath</span><span class=\"p\">),</span> <span class=\"n\">task_key</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;_hard_cases.pkl&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">save_data</span><span class=\"p\">(</span><span class=\"n\">fpath</span><span class=\"p\">,</span> <span class=\"n\">cases</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Hard case space on disk: </span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_file_nBytes_str</span><span class=\"p\">(</span><span class=\"n\">fpath</span><span class=\"p\">)))</span>\n\n        <span class=\"c1\"># if False:</span>\n        <span class=\"c1\">#     ybin_df = res.target_bin_df</span>\n        <span class=\"c1\">#     flags = ybin_df[&#39;pb&#39;].values</span>\n        <span class=\"c1\">#     pb_edges = ybin_df[flags].index.tolist()</span>\n\n        <span class=\"c1\">#     matches = infr._exec_pairwise_match(pb_edges, config)</span>\n        <span class=\"c1\">#     prefix = &#39;training_&#39;</span>\n\n        <span class=\"c1\">#     subdir = &#39;temp_cases_{}&#39;.format(task_key)</span>\n        <span class=\"c1\">#     dpath = join(str(self.dpath), subdir)</span>\n        <span class=\"c1\">#     ut.ensuredir(dpath)</span>\n\n        <span class=\"c1\">#     tbl = pblm.infr.ibs.db.get_table_as_pandas(&#39;annotmatch&#39;)</span>\n        <span class=\"c1\">#     tagged_tbl = tbl[~pd.isnull(tbl[&#39;annotmatch_tag_text&#39;]).values]</span>\n        <span class=\"c1\">#     ttext = tagged_tbl[&#39;annotmatch_tag_text&#39;]</span>\n        <span class=\"c1\">#     flags = [&#39;photobomb&#39; in t.split(&#39;;&#39;) for t in ttext]</span>\n        <span class=\"c1\">#     pb_table = tagged_tbl[flags]</span>\n        <span class=\"c1\">#     am_pb_edges = set(</span>\n        <span class=\"c1\">#         ut.estarmap(infr.e_, zip(pb_table.annot_rowid1.tolist(),</span>\n        <span class=\"c1\">#                                  pb_table.annot_rowid2.tolist())))</span>\n\n        <span class=\"c1\">#     # missing = am_pb_edges - set(pb_edges)</span>\n        <span class=\"c1\">#     # matches = infr._exec_pairwise_match(missing, config)</span>\n        <span class=\"c1\">#     # prefix = &#39;missing_&#39;</span>\n\n        <span class=\"c1\">#     # infr.relabel_using_reviews()</span>\n        <span class=\"c1\">#     # infr.apply_nondynamic_update()</span>\n\n        <span class=\"c1\">#     # infr.verbose = 100</span>\n        <span class=\"c1\">#     # for edge in missing:</span>\n        <span class=\"c1\">#     #     print(edge[0] in infr.aids)</span>\n        <span class=\"c1\">#     #     print(edge[1] in infr.aids)</span>\n\n        <span class=\"c1\">#     # fix = [</span>\n        <span class=\"c1\">#     #     (1184, 1185),</span>\n        <span class=\"c1\">#     #     (1376, 1378),</span>\n        <span class=\"c1\">#     #     (1377, 1378),</span>\n        <span class=\"c1\">#     # ]</span>\n\n        <span class=\"c1\">#     #     fb = infr.current_feedback(edge).copy()</span>\n        <span class=\"c1\">#     #     fb = ut.dict_subset(fb, [&#39;decision&#39;, &#39;tags&#39;, &#39;confidence&#39;],</span>\n        <span class=\"c1\">#     #                         default=None)</span>\n        <span class=\"c1\">#     #     fb[&#39;user_id&#39;] = &#39;jon_fixam&#39;</span>\n        <span class=\"c1\">#     #     fb[&#39;confidence&#39;] = &#39;pretty_sure&#39;</span>\n        <span class=\"c1\">#     #     fb[&#39;tags&#39;] += [&#39;photobomb&#39;]</span>\n        <span class=\"c1\">#     #     infr.add_feedback(edge, **fb)</span>\n\n        <span class=\"c1\">#     for c, match in enumerate(ut.ProgIter(matches)):</span>\n        <span class=\"c1\">#         edge = match.annot1[&#39;aid&#39;], match.annot2[&#39;aid&#39;]</span>\n\n        <span class=\"c1\">#         fig = pt.figure(fnum=1, clf=True)</span>\n        <span class=\"c1\">#         ax = pt.gca()</span>\n        <span class=\"c1\">#         # Draw with feature overlay</span>\n        <span class=\"c1\">#         match.show(ax, vert=False, heatmask=True, show_lines=True,</span>\n        <span class=\"c1\">#                    show_ell=False, show_ori=False, show_eig=False,</span>\n        <span class=\"c1\">#                    line_lw=1, line_alpha=.1,</span>\n        <span class=\"c1\">#                    modifysize=True)</span>\n        <span class=\"c1\">#         fname = prefix + &#39;_&#39;.join(ut.emap(str, edge))</span>\n        <span class=\"c1\">#         ax.set_xlabel(fname)</span>\n        <span class=\"c1\">#         fpath = join(str(dpath), fname + &#39;.jpg&#39;)</span>\n        <span class=\"c1\">#         vt.imwrite(fpath, pt.render_figure_to_image(fig, dpi=DPI))</span>\n        <span class=\"c1\">#     # visualize real photobomb cases</span>\n        <span class=\"k\">return</span> <span class=\"n\">cases</span></div>\n\n<div class=\"viewcode-block\" id=\"VerifierExpt.draw_hard_cases\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts.postdoc.VerifierExpt.draw_hard_cases\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">draw_hard_cases</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">task_key</span><span class=\"o\">=</span><span class=\"s1\">&#39;match_state&#39;</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        draw hard cases with and without overlay</span>\n\n<span class=\"sd\">        python -m ibeis VerifierExpt.draw hard_cases GZ_Master1 match_state</span>\n<span class=\"sd\">        python -m ibeis VerifierExpt.draw hard_cases PZ_Master1 match_state</span>\n<span class=\"sd\">        python -m ibeis VerifierExpt.draw hard_cases PZ_Master1 photobomb_state</span>\n<span class=\"sd\">        python -m ibeis VerifierExpt.draw hard_cases GZ_Master1 photobomb_state</span>\n\n<span class=\"sd\">        python -m ibeis VerifierExpt.draw hard_cases RotanTurtles match_state</span>\n\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.scripts.postdoc import *</span>\n<span class=\"sd\">            &gt;&gt;&gt; self = VerifierExpt(&#39;PZ_MTEST&#39;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; task_key = &#39;match_state&#39;</span>\n<span class=\"sd\">            &gt;&gt;&gt; self.draw_hard_cases(task_key)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"n\">REWORK</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"n\">REWORK</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">REWORK</span><span class=\"p\">:</span>\n            <span class=\"c1\"># HACK</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ibs</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_precollect</span><span class=\"p\">()</span>\n\n        <span class=\"n\">cases</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ensure_results</span><span class=\"p\">(</span><span class=\"n\">task_key</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;_hard_cases&#39;</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Loaded </span><span class=\"si\">{}</span><span class=\"s1\"> </span><span class=\"si\">{}</span><span class=\"s1\"> hard cases&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cases</span><span class=\"p\">),</span> <span class=\"n\">task_key</span><span class=\"p\">))</span>\n\n        <span class=\"n\">subdir</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;cases_</span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">task_key</span><span class=\"p\">)</span>\n        <span class=\"n\">dpath</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dpath</span><span class=\"p\">),</span> <span class=\"n\">subdir</span><span class=\"p\">)</span>\n        <span class=\"c1\"># ut.delete(dpath)</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ensuredir</span><span class=\"p\">(</span><span class=\"n\">dpath</span><span class=\"p\">)</span>\n        <span class=\"n\">code_to_nice</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">task_nice_lookup</span><span class=\"p\">[</span><span class=\"n\">task_key</span><span class=\"p\">]</span>\n\n        <span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">rcParams</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">TMP_RC</span><span class=\"p\">)</span>\n\n        <span class=\"n\">prog</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ProgIter</span><span class=\"p\">(</span><span class=\"n\">cases</span><span class=\"p\">,</span> <span class=\"s1\">&#39;draw </span><span class=\"si\">{}</span><span class=\"s1\"> hard case&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">task_key</span><span class=\"p\">),</span>\n                           <span class=\"n\">bs</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">case</span> <span class=\"ow\">in</span> <span class=\"n\">prog</span><span class=\"p\">:</span>\n            <span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span> <span class=\"o\">=</span> <span class=\"n\">case</span><span class=\"p\">[</span><span class=\"s1\">&#39;edge&#39;</span><span class=\"p\">]</span>\n            <span class=\"n\">match</span> <span class=\"o\">=</span> <span class=\"n\">case</span><span class=\"p\">[</span><span class=\"s1\">&#39;match&#39;</span><span class=\"p\">]</span>\n            <span class=\"n\">real_name</span><span class=\"p\">,</span> <span class=\"n\">pred_name</span> <span class=\"o\">=</span> <span class=\"n\">case</span><span class=\"p\">[</span><span class=\"s1\">&#39;real&#39;</span><span class=\"p\">],</span> <span class=\"n\">case</span><span class=\"p\">[</span><span class=\"s1\">&#39;pred&#39;</span><span class=\"p\">]</span>\n            <span class=\"n\">real_nice</span><span class=\"p\">,</span> <span class=\"n\">pred_nice</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">code_to_nice</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">real_name</span><span class=\"p\">,</span> <span class=\"n\">pred_name</span><span class=\"p\">])</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">real_nice</span> <span class=\"o\">!=</span> <span class=\"s1\">&#39;Negative&#39;</span><span class=\"p\">:</span>\n                <span class=\"k\">continue</span>\n\n            <span class=\"n\">fname</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;fail_</span><span class=\"si\">{}</span><span class=\"s1\">_</span><span class=\"si\">{}</span><span class=\"s1\">_</span><span class=\"si\">{}</span><span class=\"s1\">_</span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">real_name</span><span class=\"p\">,</span> <span class=\"n\">pred_name</span><span class=\"p\">,</span> <span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">)</span>\n            <span class=\"c1\"># Build x-label</span>\n            <span class=\"n\">_probs</span> <span class=\"o\">=</span> <span class=\"n\">case</span><span class=\"p\">[</span><span class=\"s1\">&#39;probs&#39;</span><span class=\"p\">]</span>\n            <span class=\"n\">probs</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">odict</span><span class=\"p\">()</span>\n            <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">code_to_nice</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n                <span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"n\">_probs</span><span class=\"p\">:</span>\n                    <span class=\"n\">probs</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">_probs</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span>\n            <span class=\"n\">probstr</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr2</span><span class=\"p\">(</span><span class=\"n\">probs</span><span class=\"p\">,</span> <span class=\"n\">precision</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">strkeys</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">nobr</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"n\">xlabel</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;real=</span><span class=\"si\">{}</span><span class=\"s1\">, pred=</span><span class=\"si\">{}</span><span class=\"s1\">,</span><span class=\"se\">\\n</span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">real_nice</span><span class=\"p\">,</span> <span class=\"n\">pred_nice</span><span class=\"p\">,</span>\n                                                    <span class=\"n\">probstr</span><span class=\"p\">)</span>\n            <span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"n\">clf</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">gca</span><span class=\"p\">()</span>\n\n            <span class=\"c1\"># if REWORK:</span>\n            <span class=\"c1\">#     ibs = self.ibs</span>\n            <span class=\"c1\">#     annots = ibs.annots([aid1, aid2])</span>\n            <span class=\"c1\">#     imgs = ibs.images(annots.gids)</span>\n            <span class=\"c1\">#     xlabel += &#39;\\nimg: &#39; + &#39;-vs-&#39;.join(map(repr, imgs.gnames))</span>\n            <span class=\"c1\">#     xlabel += &#39;\\nname: &#39; + &#39;-vs-&#39;.join(map(repr, annots.name))</span>\n            <span class=\"c1\">#     import datetime</span>\n            <span class=\"c1\">#     delta = ut.get_timedelta_str(datetime.timedelta(seconds=np.diff(annots.image_unixtimes_asfloat)[0]))</span>\n            <span class=\"c1\">#     xlabel += &#39;\\ntime\u0394: &#39; + delta</span>\n            <span class=\"c1\">#     xlabel += &#39;\\nedge: &#39; + str(tuple(annots.aids))</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">REWORK</span><span class=\"p\">:</span>\n                <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ibs</span>\n                <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">annot1</span><span class=\"p\">[</span><span class=\"s1\">&#39;rchip&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">annots</span><span class=\"p\">(</span><span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">annot1</span><span class=\"p\">[</span><span class=\"s1\">&#39;aid&#39;</span><span class=\"p\">],</span> <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"p\">{})</span><span class=\"o\">.</span><span class=\"n\">rchip</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">annot2</span><span class=\"p\">[</span><span class=\"s1\">&#39;rchip&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">annots</span><span class=\"p\">(</span><span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">annot2</span><span class=\"p\">[</span><span class=\"s1\">&#39;aid&#39;</span><span class=\"p\">],</span> <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"p\">{})</span><span class=\"o\">.</span><span class=\"n\">rchip</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                <span class=\"c1\"># match.annot1[&#39;rchip&#39;] = ibs.annots(match.annot1[&#39;aid&#39;], config={&#39;medianblur&#39;: True, &#39;adapt_eq&#39;: True}).rchip[0]</span>\n                <span class=\"c1\"># match.annot2[&#39;rchip&#39;] = ibs.annots(match.annot2[&#39;aid&#39;], config={&#39;medianblur&#39;: True, &#39;adapt_eq&#39;: True}).rchip[0]</span>\n\n            <span class=\"c1\"># Draw with feature overlay</span>\n            <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">ax</span><span class=\"p\">,</span> <span class=\"n\">vert</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">heatmask</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                       <span class=\"n\">show_lines</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                       <span class=\"c1\"># show_lines=True, line_lw=1, line_alpha=.1,</span>\n                       <span class=\"c1\"># ell_alpha=.3,</span>\n                       <span class=\"n\">show_ell</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">show_ori</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">show_eig</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                       <span class=\"n\">modifysize</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_xlabel</span><span class=\"p\">(</span><span class=\"n\">xlabel</span><span class=\"p\">)</span>\n            <span class=\"c1\"># ax.get_xaxis().get_label().set_fontsize(24)</span>\n            <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">get_xaxis</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_label</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">set_fontsize</span><span class=\"p\">(</span><span class=\"mi\">24</span><span class=\"p\">)</span>\n\n            <span class=\"n\">fpath</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">dpath</span><span class=\"p\">),</span> <span class=\"n\">fname</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;.jpg&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">imwrite</span><span class=\"p\">(</span><span class=\"n\">fpath</span><span class=\"p\">,</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">render_figure_to_image</span><span class=\"p\">(</span><span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">dpi</span><span class=\"o\">=</span><span class=\"n\">DPI</span><span class=\"p\">))</span></div>\n\n<div class=\"viewcode-block\" id=\"VerifierExpt.write_metrics\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts.postdoc.VerifierExpt.write_metrics\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">write_metrics</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">task_key</span><span class=\"o\">=</span><span class=\"s1\">&#39;match_state&#39;</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Writes confusion matricies</span>\n\n<span class=\"sd\">        CommandLine:</span>\n<span class=\"sd\">            python -m ibeis VerifierExpt.draw metrics PZ_PB_RF_TRAIN match_state</span>\n<span class=\"sd\">            python -m ibeis VerifierExpt.draw metrics GZ_Master1 photobomb_state</span>\n\n<span class=\"sd\">            python -m ibeis VerifierExpt.draw metrics PZ_Master1,GZ_Master1 photobomb_state,match_state</span>\n\n<span class=\"sd\">        Ignore:</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.scripts.postdoc import *</span>\n<span class=\"sd\">            &gt;&gt;&gt; self = VerifierExpt(&#39;PZ_Master1&#39;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; task_key = &#39;match_state&#39;</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ensure_results</span><span class=\"p\">(</span><span class=\"s1\">&#39;all&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">task_combo_res</span> <span class=\"o\">=</span> <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"s1\">&#39;task_combo_res&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">data_key</span> <span class=\"o\">=</span> <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"s1\">&#39;data_key&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">clf_key</span> <span class=\"o\">=</span> <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"s1\">&#39;clf_key&#39;</span><span class=\"p\">]</span>\n\n        <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">task_combo_res</span><span class=\"p\">[</span><span class=\"n\">task_key</span><span class=\"p\">][</span><span class=\"n\">clf_key</span><span class=\"p\">][</span><span class=\"n\">data_key</span><span class=\"p\">]</span>\n        <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">augment_if_needed</span><span class=\"p\">()</span>\n        <span class=\"n\">pred_enc</span> <span class=\"o\">=</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">clf_probs</span><span class=\"o\">.</span><span class=\"n\">argmax</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">y_pred</span> <span class=\"o\">=</span> <span class=\"n\">pred_enc</span>\n        <span class=\"n\">y_true</span> <span class=\"o\">=</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">y_test_enc</span>\n        <span class=\"n\">sample_weight</span> <span class=\"o\">=</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">sample_weight</span>\n        <span class=\"n\">target_names</span> <span class=\"o\">=</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">class_names</span>\n\n        <span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.verif</span> <span class=\"k\">import</span> <span class=\"n\">sklearn_utils</span>\n        <span class=\"n\">report</span> <span class=\"o\">=</span> <span class=\"n\">sklearn_utils</span><span class=\"o\">.</span><span class=\"n\">classification_report2</span><span class=\"p\">(</span>\n            <span class=\"n\">y_true</span><span class=\"p\">,</span> <span class=\"n\">y_pred</span><span class=\"p\">,</span> <span class=\"n\">target_names</span><span class=\"p\">,</span> <span class=\"n\">sample_weight</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"n\">metric_df</span> <span class=\"o\">=</span> <span class=\"n\">report</span><span class=\"p\">[</span><span class=\"s1\">&#39;metrics&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">confusion_df</span> <span class=\"o\">=</span> <span class=\"n\">report</span><span class=\"p\">[</span><span class=\"s1\">&#39;confusion&#39;</span><span class=\"p\">]</span>\n\n        <span class=\"n\">multiclass_mcc</span> <span class=\"o\">=</span> <span class=\"n\">report</span><span class=\"p\">[</span><span class=\"s1\">&#39;mcc&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">metric_df</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"s1\">&#39;combined&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;mcc&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">multiclass_mcc</span>\n\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">metric_df</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">confusion_df</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># df = self.task_confusion[task_key]</span>\n        <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">confusion_df</span>\n        <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">rename_axis</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">task_nice_lookup</span><span class=\"p\">[</span><span class=\"n\">task_key</span><span class=\"p\">],</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">rename_axis</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">task_nice_lookup</span><span class=\"p\">[</span><span class=\"n\">task_key</span><span class=\"p\">],</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">columns</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n        <span class=\"n\">colfmt</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;|l|&#39;</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;r&#39;</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;|l|&#39;</span>\n        <span class=\"n\">tabular</span> <span class=\"o\">=</span> <span class=\"n\">Tabular</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">colfmt</span><span class=\"o\">=</span><span class=\"n\">colfmt</span><span class=\"p\">,</span> <span class=\"n\">hline</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">tabular</span><span class=\"o\">.</span><span class=\"n\">groupxs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)),</span> <span class=\"p\">[</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]]</span>\n        <span class=\"n\">latex_str</span> <span class=\"o\">=</span> <span class=\"n\">tabular</span><span class=\"o\">.</span><span class=\"n\">as_tabular</span><span class=\"p\">()</span>\n\n        <span class=\"n\">sum_pred</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"n\">sum_real</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">columns</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"n\">latex_str</span> <span class=\"o\">=</span> <span class=\"n\">latex_str</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">sum_pred</span><span class=\"p\">,</span> <span class=\"sa\">r</span><span class=\"s1\">&#39;$\\sum$ predicted&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">latex_str</span> <span class=\"o\">=</span> <span class=\"n\">latex_str</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">sum_real</span><span class=\"p\">,</span> <span class=\"sa\">r</span><span class=\"s1\">&#39;$\\sum$ real&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">confusion_tex</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">align</span><span class=\"p\">(</span><span class=\"n\">latex_str</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&amp;&#39;</span><span class=\"p\">,</span> <span class=\"n\">pos</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">confusion_tex</span><span class=\"p\">)</span>\n\n        <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">metric_df</span>\n        <span class=\"c1\"># df = self.task_metrics[task_key]</span>\n        <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">rename_axis</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">task_nice_lookup</span><span class=\"p\">[</span><span class=\"n\">task_key</span><span class=\"p\">],</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">rename_axis</span><span class=\"p\">({</span><span class=\"s1\">&#39;mcc&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;MCC&#39;</span><span class=\"p\">},</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">rename_axis</span><span class=\"p\">({</span><span class=\"s1\">&#39;combined&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Combined&#39;</span><span class=\"p\">},</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">drop</span><span class=\"p\">([</span><span class=\"s1\">&#39;markedness&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bookmaker&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;fpr&#39;</span><span class=\"p\">],</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">columns</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">&#39;support&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">&#39;support&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">int</span><span class=\"p\">)</span>\n        <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">columns</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">emap</span><span class=\"p\">(</span><span class=\"n\">upper_one</span><span class=\"p\">,</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">columns</span><span class=\"p\">)</span>\n\n        <span class=\"kn\">import</span> <span class=\"nn\">re</span>\n        <span class=\"n\">tabular</span> <span class=\"o\">=</span> <span class=\"n\">Tabular</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">colfmt</span><span class=\"o\">=</span><span class=\"s1\">&#39;numeric&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">top</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">,</span> <span class=\"n\">bot</span> <span class=\"o\">=</span> <span class=\"n\">tabular</span><span class=\"o\">.</span><span class=\"n\">as_parts</span><span class=\"p\">()</span>\n        <span class=\"n\">lines</span> <span class=\"o\">=</span> <span class=\"n\">mid</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">newmid</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">lines</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">lines</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">:]]</span>\n        <span class=\"n\">tabular</span><span class=\"o\">.</span><span class=\"n\">parts</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">top</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"p\">,</span> <span class=\"n\">newmid</span><span class=\"p\">,</span> <span class=\"n\">bot</span><span class=\"p\">)</span>\n        <span class=\"n\">latex_str</span> <span class=\"o\">=</span> <span class=\"n\">tabular</span><span class=\"o\">.</span><span class=\"n\">as_tabular</span><span class=\"p\">()</span>\n        <span class=\"n\">latex_str</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"s1\">&#39; -0.00 &#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;  0.00 &#39;</span><span class=\"p\">,</span> <span class=\"n\">latex_str</span><span class=\"p\">)</span>\n        <span class=\"n\">metrics_tex</span> <span class=\"o\">=</span> <span class=\"n\">latex_str</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">metrics_tex</span><span class=\"p\">)</span>\n\n        <span class=\"n\">dpath</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dpath</span><span class=\"p\">)</span>\n        <span class=\"n\">confusion_fname</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;confusion_</span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">task_key</span><span class=\"p\">)</span>\n        <span class=\"n\">metrics_fname</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;eval_metrics_</span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">task_key</span><span class=\"p\">)</span>\n\n        <span class=\"n\">confusion_tex</span> <span class=\"o\">=</span> <span class=\"n\">confusion_tex</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">&#39;Incomparable&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Incomp.&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">confusion_tex</span> <span class=\"o\">=</span> <span class=\"n\">confusion_tex</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">&#39;predicted&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;pred&#39;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">write_to</span><span class=\"p\">(</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">dpath</span><span class=\"p\">,</span> <span class=\"n\">confusion_fname</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;.tex&#39;</span><span class=\"p\">),</span> <span class=\"n\">confusion_tex</span><span class=\"p\">)</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">write_to</span><span class=\"p\">(</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">dpath</span><span class=\"p\">,</span> <span class=\"n\">metrics_fname</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;.tex&#39;</span><span class=\"p\">),</span> <span class=\"n\">metrics_tex</span><span class=\"p\">)</span>\n\n        <span class=\"n\">fpath1</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">render_latex</span><span class=\"p\">(</span><span class=\"n\">confusion_tex</span><span class=\"p\">,</span> <span class=\"n\">dpath</span><span class=\"o\">=</span><span class=\"n\">dpath</span><span class=\"p\">,</span>\n                                 <span class=\"n\">fname</span><span class=\"o\">=</span><span class=\"n\">confusion_fname</span><span class=\"p\">)</span>\n        <span class=\"n\">fpath2</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">render_latex</span><span class=\"p\">(</span><span class=\"n\">metrics_tex</span><span class=\"p\">,</span> <span class=\"n\">dpath</span><span class=\"o\">=</span><span class=\"n\">dpath</span><span class=\"p\">,</span> <span class=\"n\">fname</span><span class=\"o\">=</span><span class=\"n\">metrics_fname</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">fpath1</span><span class=\"p\">,</span> <span class=\"n\">fpath2</span></div>\n\n<div class=\"viewcode-block\" id=\"VerifierExpt.write_sample_info\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts.postdoc.VerifierExpt.write_sample_info\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">write_sample_info</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        python -m ibeis VerifierExpt.draw sample_info GZ_Master1</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ensure_results</span><span class=\"p\">(</span><span class=\"s1\">&#39;sample_info&#39;</span><span class=\"p\">)</span>\n        <span class=\"c1\"># results[&#39;aid_pool&#39;]</span>\n        <span class=\"c1\"># results[&#39;encoded_labels2d&#39;]</span>\n        <span class=\"c1\"># results[&#39;multihist&#39;]</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">ibeis</span>\n        <span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">AnnotInference</span><span class=\"o\">.</span><span class=\"n\">from_netx</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">[</span><span class=\"s1\">&#39;graph&#39;</span><span class=\"p\">])</span>\n        <span class=\"n\">info</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">odict</span><span class=\"p\">()</span>\n        <span class=\"n\">info</span><span class=\"p\">[</span><span class=\"s1\">&#39;n_names&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">number_of_components</span><span class=\"p\">(),</span>\n        <span class=\"n\">info</span><span class=\"p\">[</span><span class=\"s1\">&#39;n_aids&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">[</span><span class=\"s1\">&#39;pblm_aids&#39;</span><span class=\"p\">]),</span>\n        <span class=\"n\">info</span><span class=\"p\">[</span><span class=\"s1\">&#39;known_n_incomparable&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">incomp_graph</span><span class=\"o\">.</span><span class=\"n\">number_of_edges</span><span class=\"p\">()</span>\n        <span class=\"n\">subtasks</span> <span class=\"o\">=</span> <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"s1\">&#39;subtasks&#39;</span><span class=\"p\">]</span>\n\n        <span class=\"n\">task</span> <span class=\"o\">=</span> <span class=\"n\">subtasks</span><span class=\"p\">[</span><span class=\"s1\">&#39;match_state&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">flags</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">encoded_df</span> <span class=\"o\">==</span> <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">class_names</span><span class=\"o\">.</span><span class=\"n\">tolist</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">INCMP</span><span class=\"p\">))</span>\n        <span class=\"n\">incomp_edges</span> <span class=\"o\">=</span> <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">encoded_df</span><span class=\"p\">[</span><span class=\"n\">flags</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">tolist</span><span class=\"p\">()</span>\n        <span class=\"n\">nid_edges</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">node_labels</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">e</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">incomp_edges</span><span class=\"p\">]</span>\n        <span class=\"n\">nid_edges</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">ensure_shape</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">nid_edges</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n\n        <span class=\"n\">n_true</span> <span class=\"o\">=</span> <span class=\"n\">nid_edges</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">nid_edges</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"n\">info</span><span class=\"p\">[</span><span class=\"s1\">&#39;incomp_info&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;inside_pcc&#39;</span><span class=\"p\">:</span> <span class=\"n\">n_true</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(),</span>\n            <span class=\"s1\">&#39;betweeen_pcc&#39;</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"o\">~</span><span class=\"n\">n_true</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(),</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">task_key</span><span class=\"p\">,</span> <span class=\"n\">task</span> <span class=\"ow\">in</span> <span class=\"n\">subtasks</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"n\">info</span><span class=\"p\">[</span><span class=\"n\">task_key</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;_hist&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">make_histogram</span><span class=\"p\">()</span>\n        <span class=\"n\">info_str</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr4</span><span class=\"p\">(</span><span class=\"n\">info</span><span class=\"p\">)</span>\n        <span class=\"n\">fname</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;sample_info.txt&#39;</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">write_to</span><span class=\"p\">(</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dpath</span><span class=\"p\">),</span> <span class=\"n\">fname</span><span class=\"p\">),</span> <span class=\"n\">info_str</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"VerifierExpt.measure_thresh\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts.postdoc.VerifierExpt.measure_thresh\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">measure_thresh</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">pblm</span><span class=\"p\">):</span>\n        <span class=\"n\">task_key</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;match_state&#39;</span>\n        <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">task_combo_res</span><span class=\"p\">[</span><span class=\"n\">task_key</span><span class=\"p\">][</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">clf_key</span><span class=\"p\">][</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_key</span><span class=\"p\">]</span>\n        <span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">infr</span>\n\n        <span class=\"n\">truth_colors</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_get_truth_colors</span><span class=\"p\">()</span>\n\n        <span class=\"n\">cfms</span> <span class=\"o\">=</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">confusions</span><span class=\"p\">(</span><span class=\"n\">POSTV</span><span class=\"p\">)</span>\n        <span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">doclf</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>  <span class=\"c1\"># NOQA</span>\n        <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">gca</span><span class=\"p\">()</span>\n        <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">cfms</span><span class=\"o\">.</span><span class=\"n\">thresholds</span><span class=\"p\">,</span> <span class=\"n\">cfms</span><span class=\"o\">.</span><span class=\"n\">n_fp</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">&#39;positive&#39;</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"n\">truth_colors</span><span class=\"p\">[</span><span class=\"n\">POSTV</span><span class=\"p\">])</span>\n\n        <span class=\"n\">cfms</span> <span class=\"o\">=</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">confusions</span><span class=\"p\">(</span><span class=\"n\">NEGTV</span><span class=\"p\">)</span>\n        <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">cfms</span><span class=\"o\">.</span><span class=\"n\">thresholds</span><span class=\"p\">,</span> <span class=\"n\">cfms</span><span class=\"o\">.</span><span class=\"n\">n_fp</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">&#39;negative&#39;</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"n\">truth_colors</span><span class=\"p\">[</span><span class=\"n\">NEGTV</span><span class=\"p\">])</span>\n\n        <span class=\"c1\"># cfms = res.confusions(INCMP)</span>\n        <span class=\"c1\"># if len(cfms.thresholds) == 1:</span>\n        <span class=\"c1\">#     cfms.thresholds = [0, 1]</span>\n        <span class=\"c1\">#     cfms.n_fp = np.array(cfms.n_fp.tolist() * 2)</span>\n        <span class=\"c1\"># ax.plot(cfms.thresholds, cfms.n_fp, label=&#39;incomparable&#39;,</span>\n        <span class=\"c1\">#         color=pt.color_funcs.darken_rgb(truth_colors[INCMP], .15))</span>\n        <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_xlabel</span><span class=\"p\">(</span><span class=\"s1\">&#39;thresholds&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_ylabel</span><span class=\"p\">(</span><span class=\"s1\">&#39;n_fp&#39;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_ylim</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">)</span>\n        <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">legend</span><span class=\"p\">()</span>\n\n        <span class=\"n\">cfms</span><span class=\"o\">.</span><span class=\"n\">plot_vs</span><span class=\"p\">(</span><span class=\"s1\">&#39;fpr&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;thresholds&#39;</span><span class=\"p\">)</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_draw_score_hist</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">freqs</span><span class=\"p\">,</span> <span class=\"n\">xlabel</span><span class=\"p\">,</span> <span class=\"n\">fnum</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot; helper &quot;&quot;&quot;</span>\n        <span class=\"n\">bins</span><span class=\"p\">,</span> <span class=\"n\">freq0</span><span class=\"p\">,</span> <span class=\"n\">freq1</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">freqs</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">&#39;bins&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;neg_freq&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;pos_freq&#39;</span><span class=\"p\">])</span>\n        <span class=\"n\">width</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">bins</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">xlim</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">bins</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"n\">width</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">bins</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">width</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n        <span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">multi_plot</span><span class=\"p\">(</span>\n            <span class=\"n\">bins</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">freq0</span><span class=\"p\">,</span> <span class=\"n\">freq1</span><span class=\"p\">),</span> <span class=\"n\">label_list</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;negative&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;positive&#39;</span><span class=\"p\">),</span>\n            <span class=\"n\">color_list</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">FALSE_RED</span><span class=\"p\">,</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">TRUE_BLUE</span><span class=\"p\">),</span>\n            <span class=\"n\">kind</span><span class=\"o\">=</span><span class=\"s1\">&#39;bar&#39;</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"o\">=.</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"n\">edgecolor</span><span class=\"o\">=</span><span class=\"s1\">&#39;none&#39;</span><span class=\"p\">,</span>\n            <span class=\"n\">xlabel</span><span class=\"o\">=</span><span class=\"n\">xlabel</span><span class=\"p\">,</span> <span class=\"n\">ylabel</span><span class=\"o\">=</span><span class=\"s1\">&#39;frequency&#39;</span><span class=\"p\">,</span> <span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"n\">fnum</span><span class=\"p\">,</span> <span class=\"n\">pnum</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n            <span class=\"n\">rcParams</span><span class=\"o\">=</span><span class=\"n\">TMP_RC</span><span class=\"p\">,</span> <span class=\"n\">stacked</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"n\">ytickformat</span><span class=\"o\">=</span><span class=\"s1\">&#39;</span><span class=\"si\">%.3f</span><span class=\"s1\">&#39;</span><span class=\"p\">,</span> <span class=\"n\">xlim</span><span class=\"o\">=</span><span class=\"n\">xlim</span><span class=\"p\">,</span>\n            <span class=\"c1\"># title=&#39;LNBNN positive separation&#39;</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">adjust_subplots</span><span class=\"p\">(</span><span class=\"n\">top</span><span class=\"o\">=.</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"n\">bottom</span><span class=\"o\">=.</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=.</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=.</span><span class=\"mi\">9</span><span class=\"p\">)</span>\n        <span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">set_size_inches</span><span class=\"p\">([</span><span class=\"n\">W</span><span class=\"p\">,</span> <span class=\"n\">H</span><span class=\"p\">])</span>\n        <span class=\"k\">return</span> <span class=\"n\">fig</span>\n\n<div class=\"viewcode-block\" id=\"VerifierExpt.draw_class_score_hist\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts.postdoc.VerifierExpt.draw_class_score_hist\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">draw_class_score_hist</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot; Plots distribution of positive and negative scores &quot;&quot;&quot;</span>\n        <span class=\"n\">task_key</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;match_state&#39;</span>\n\n        <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ensure_results</span><span class=\"p\">(</span><span class=\"s1\">&#39;all&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">task_combo_res</span> <span class=\"o\">=</span> <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"s1\">&#39;task_combo_res&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">data_key</span> <span class=\"o\">=</span> <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"s1\">&#39;data_key&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">clf_key</span> <span class=\"o\">=</span> <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"s1\">&#39;clf_key&#39;</span><span class=\"p\">]</span>\n\n        <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">task_combo_res</span><span class=\"p\">[</span><span class=\"n\">task_key</span><span class=\"p\">][</span><span class=\"n\">clf_key</span><span class=\"p\">][</span><span class=\"n\">data_key</span><span class=\"p\">]</span>\n\n        <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">target_bin_df</span><span class=\"p\">[</span><span class=\"n\">POSTV</span><span class=\"p\">]</span>\n        <span class=\"n\">scores</span> <span class=\"o\">=</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">probs_df</span><span class=\"p\">[</span><span class=\"n\">POSTV</span><span class=\"p\">]</span>\n        <span class=\"n\">bins</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n        <span class=\"n\">pos_freq</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">histogram</span><span class=\"p\">(</span><span class=\"n\">scores</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">],</span> <span class=\"n\">bins</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">neg_freq</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">histogram</span><span class=\"p\">(</span><span class=\"n\">scores</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">y</span><span class=\"p\">],</span> <span class=\"n\">bins</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">pos_freq</span> <span class=\"o\">=</span> <span class=\"n\">pos_freq</span> <span class=\"o\">/</span> <span class=\"n\">pos_freq</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span>\n        <span class=\"n\">neg_freq</span> <span class=\"o\">=</span> <span class=\"n\">neg_freq</span> <span class=\"o\">/</span> <span class=\"n\">neg_freq</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span>\n\n        <span class=\"n\">score_hist_pos</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;bins&#39;</span><span class=\"p\">:</span> <span class=\"n\">bins</span><span class=\"p\">,</span> <span class=\"s1\">&#39;pos_freq&#39;</span><span class=\"p\">:</span> <span class=\"n\">pos_freq</span><span class=\"p\">,</span> <span class=\"s1\">&#39;neg_freq&#39;</span><span class=\"p\">:</span> <span class=\"n\">neg_freq</span><span class=\"p\">}</span>\n\n        <span class=\"n\">lnbnn_data</span> <span class=\"o\">=</span> <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"s1\">&#39;lnbnn_data&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">scores</span> <span class=\"o\">=</span> <span class=\"n\">lnbnn_data</span><span class=\"p\">[</span><span class=\"s1\">&#39;score_lnbnn_1vM&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span>\n        <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">lnbnn_data</span><span class=\"p\">[</span><span class=\"n\">POSTV</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span>\n\n        <span class=\"c1\"># Get 95% of the data at least</span>\n        <span class=\"n\">maxbin</span> <span class=\"o\">=</span> <span class=\"n\">scores</span><span class=\"p\">[</span><span class=\"n\">scores</span><span class=\"o\">.</span><span class=\"n\">argsort</span><span class=\"p\">()][</span><span class=\"o\">-</span><span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">scores</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"o\">.</span><span class=\"mi\">05</span><span class=\"p\">))]</span>\n        <span class=\"n\">bins</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">maxbin</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">),</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n        <span class=\"n\">pos_freq</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">histogram</span><span class=\"p\">(</span><span class=\"n\">scores</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">],</span> <span class=\"n\">bins</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">neg_freq</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">histogram</span><span class=\"p\">(</span><span class=\"n\">scores</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">y</span><span class=\"p\">],</span> <span class=\"n\">bins</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">pos_freq</span> <span class=\"o\">=</span> <span class=\"n\">pos_freq</span> <span class=\"o\">/</span> <span class=\"n\">pos_freq</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span>\n        <span class=\"n\">neg_freq</span> <span class=\"o\">=</span> <span class=\"n\">neg_freq</span> <span class=\"o\">/</span> <span class=\"n\">neg_freq</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span>\n        <span class=\"n\">score_hist_lnbnn</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;bins&#39;</span><span class=\"p\">:</span> <span class=\"n\">bins</span><span class=\"p\">,</span> <span class=\"s1\">&#39;pos_freq&#39;</span><span class=\"p\">:</span> <span class=\"n\">pos_freq</span><span class=\"p\">,</span> <span class=\"s1\">&#39;neg_freq&#39;</span><span class=\"p\">:</span> <span class=\"n\">neg_freq</span><span class=\"p\">}</span>\n\n        <span class=\"n\">fig1</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_draw_score_hist</span><span class=\"p\">(</span><span class=\"n\">score_hist_pos</span><span class=\"p\">,</span> <span class=\"s1\">&#39;positive probability&#39;</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">fig2</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_draw_score_hist</span><span class=\"p\">(</span><span class=\"n\">score_hist_lnbnn</span><span class=\"p\">,</span> <span class=\"s1\">&#39;LNBNN score&#39;</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n        <span class=\"n\">fname</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;score_hist_pos_</span><span class=\"si\">{}</span><span class=\"s1\">.png&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">data_key</span><span class=\"p\">)</span>\n        <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">imwrite</span><span class=\"p\">(</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dpath</span><span class=\"p\">),</span> <span class=\"n\">fname</span><span class=\"p\">),</span>\n                   <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">render_figure_to_image</span><span class=\"p\">(</span><span class=\"n\">fig1</span><span class=\"p\">,</span> <span class=\"n\">dpi</span><span class=\"o\">=</span><span class=\"n\">DPI</span><span class=\"p\">))</span>\n\n        <span class=\"n\">fname</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;score_hist_lnbnn.png&#39;</span>\n        <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">imwrite</span><span class=\"p\">(</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dpath</span><span class=\"p\">),</span> <span class=\"n\">fname</span><span class=\"p\">),</span>\n                   <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">render_figure_to_image</span><span class=\"p\">(</span><span class=\"n\">fig2</span><span class=\"p\">,</span> <span class=\"n\">dpi</span><span class=\"o\">=</span><span class=\"n\">DPI</span><span class=\"p\">))</span></div>\n\n<div class=\"viewcode-block\" id=\"VerifierExpt.draw_mcc_thresh\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts.postdoc.VerifierExpt.draw_mcc_thresh\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">draw_mcc_thresh</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">task_key</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        python -m ibeis VerifierExpt.draw mcc_thresh GZ_Master1 match_state</span>\n<span class=\"sd\">        python -m ibeis VerifierExpt.draw mcc_thresh PZ_Master1 match_state</span>\n\n<span class=\"sd\">        python -m ibeis VerifierExpt.draw mcc_thresh GZ_Master1 photobomb_state</span>\n<span class=\"sd\">        python -m ibeis VerifierExpt.draw mcc_thresh PZ_Master1 photobomb_state</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">rcParams</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">TMP_RC</span><span class=\"p\">)</span>\n\n        <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ensure_results</span><span class=\"p\">(</span><span class=\"s1\">&#39;all&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">data_key</span> <span class=\"o\">=</span> <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"s1\">&#39;data_key&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">clf_key</span> <span class=\"o\">=</span> <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"s1\">&#39;clf_key&#39;</span><span class=\"p\">]</span>\n\n        <span class=\"n\">task_combo_res</span> <span class=\"o\">=</span> <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"s1\">&#39;task_combo_res&#39;</span><span class=\"p\">]</span>\n\n        <span class=\"n\">code_to_nice</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">task_nice_lookup</span><span class=\"p\">[</span><span class=\"n\">task_key</span><span class=\"p\">]</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">task_key</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;photobomb_state&#39;</span><span class=\"p\">:</span>\n            <span class=\"n\">classes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;pb&#39;</span><span class=\"p\">]</span>\n        <span class=\"k\">elif</span> <span class=\"n\">task_key</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;match_state&#39;</span><span class=\"p\">:</span>\n            <span class=\"n\">classes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">POSTV</span><span class=\"p\">,</span> <span class=\"n\">NEGTV</span><span class=\"p\">,</span> <span class=\"n\">INCMP</span><span class=\"p\">]</span>\n\n        <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">task_combo_res</span><span class=\"p\">[</span><span class=\"n\">task_key</span><span class=\"p\">][</span><span class=\"n\">clf_key</span><span class=\"p\">][</span><span class=\"n\">data_key</span><span class=\"p\">]</span>\n\n        <span class=\"n\">roc_curves</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">class_name</span> <span class=\"ow\">in</span> <span class=\"n\">classes</span><span class=\"p\">:</span>\n            <span class=\"n\">c1</span> <span class=\"o\">=</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">confusions</span><span class=\"p\">(</span><span class=\"n\">class_name</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">c1</span><span class=\"o\">.</span><span class=\"n\">thresholds</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n                <span class=\"k\">continue</span>\n            <span class=\"n\">class_nice</span> <span class=\"o\">=</span> <span class=\"n\">code_to_nice</span><span class=\"p\">[</span><span class=\"n\">class_name</span><span class=\"p\">]</span>\n            <span class=\"n\">idx</span> <span class=\"o\">=</span> <span class=\"n\">c1</span><span class=\"o\">.</span><span class=\"n\">mcc</span><span class=\"o\">.</span><span class=\"n\">argmax</span><span class=\"p\">()</span>\n            <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">c1</span><span class=\"o\">.</span><span class=\"n\">thresholds</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span>\n            <span class=\"n\">mcc</span> <span class=\"o\">=</span> <span class=\"n\">c1</span><span class=\"o\">.</span><span class=\"n\">mcc</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span>\n            <span class=\"n\">roc_curves</span> <span class=\"o\">+=</span> <span class=\"p\">[</span>\n                <span class=\"p\">{</span><span class=\"s1\">&#39;label&#39;</span><span class=\"p\">:</span> <span class=\"n\">class_nice</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;, t=</span><span class=\"si\">{:.3f}</span><span class=\"s1\">, mcc=</span><span class=\"si\">{:.3f}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">mcc</span><span class=\"p\">),</span>\n                 <span class=\"s1\">&#39;thresh&#39;</span><span class=\"p\">:</span> <span class=\"n\">c1</span><span class=\"o\">.</span><span class=\"n\">thresholds</span><span class=\"p\">,</span> <span class=\"s1\">&#39;mcc&#39;</span><span class=\"p\">:</span> <span class=\"n\">c1</span><span class=\"o\">.</span><span class=\"n\">mcc</span><span class=\"p\">},</span>\n            <span class=\"p\">]</span>\n\n        <span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># NOQA</span>\n        <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">gca</span><span class=\"p\">()</span>\n        <span class=\"k\">for</span> <span class=\"n\">data</span> <span class=\"ow\">in</span> <span class=\"n\">roc_curves</span><span class=\"p\">:</span>\n            <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">&#39;thresh&#39;</span><span class=\"p\">],</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">&#39;mcc&#39;</span><span class=\"p\">],</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">&#39;</span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">&#39;label&#39;</span><span class=\"p\">]))</span>\n        <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_xlabel</span><span class=\"p\">(</span><span class=\"s1\">&#39;threshold&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_ylabel</span><span class=\"p\">(</span><span class=\"s1\">&#39;MCC&#39;</span><span class=\"p\">)</span>\n        <span class=\"c1\"># ax.set_title(&#39;%s ROC for %s&#39; % (target_class.title(), self.species))</span>\n        <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">legend</span><span class=\"p\">()</span>\n        <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">adjust_subplots</span><span class=\"p\">(</span><span class=\"n\">top</span><span class=\"o\">=.</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"n\">bottom</span><span class=\"o\">=.</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=.</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=.</span><span class=\"mi\">9</span><span class=\"p\">)</span>\n        <span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">set_size_inches</span><span class=\"p\">([</span><span class=\"n\">W</span><span class=\"p\">,</span> <span class=\"n\">H</span><span class=\"p\">])</span>\n\n        <span class=\"n\">fname</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;mcc_thresh_</span><span class=\"si\">{}</span><span class=\"s1\">.png&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">task_key</span><span class=\"p\">)</span>\n        <span class=\"n\">fig_fpath</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dpath</span><span class=\"p\">),</span> <span class=\"n\">fname</span><span class=\"p\">)</span>\n        <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">imwrite</span><span class=\"p\">(</span><span class=\"n\">fig_fpath</span><span class=\"p\">,</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">render_figure_to_image</span><span class=\"p\">(</span><span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">dpi</span><span class=\"o\">=</span><span class=\"n\">DPI</span><span class=\"p\">))</span>\n        <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argflag</span><span class=\"p\">(</span><span class=\"s1\">&#39;--diskshow&#39;</span><span class=\"p\">):</span>\n            <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">startfile</span><span class=\"p\">(</span><span class=\"n\">fig_fpath</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"VerifierExpt.draw_tagged_pair\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts.postdoc.VerifierExpt.draw_tagged_pair\">[docs]</a>    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">draw_tagged_pair</span><span class=\"p\">(</span><span class=\"n\">VerifierExpt</span><span class=\"p\">):</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">ibeis</span>\n        <span class=\"c1\"># ibs = ibeis.opendb(defaultdb=&#39;GZ_Master1&#39;)</span>\n        <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">opendb</span><span class=\"p\">(</span><span class=\"n\">defaultdb</span><span class=\"o\">=</span><span class=\"s1\">&#39;PZ_Master1&#39;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">query_tag</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;leftrightface&#39;</span>\n\n        <span class=\"n\">rowids</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">_get_all_annotmatch_rowids</span><span class=\"p\">()</span>\n        <span class=\"n\">texts</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;&#39;</span> <span class=\"k\">if</span> <span class=\"n\">t</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"k\">else</span> <span class=\"n\">t</span> <span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annotmatch_tag_text</span><span class=\"p\">(</span><span class=\"n\">rowids</span><span class=\"p\">)]</span>\n        <span class=\"n\">tags</span> <span class=\"o\">=</span> <span class=\"p\">[[]</span> <span class=\"k\">if</span> <span class=\"n\">t</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"k\">else</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;;&#39;</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"n\">texts</span><span class=\"p\">]</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr4</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dict_hist</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">tags</span><span class=\"p\">))))</span>\n\n        <span class=\"n\">flags</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">query_tag</span> <span class=\"ow\">in</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"n\">texts</span><span class=\"p\">]</span>\n        <span class=\"n\">filtered_rowids</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">rowids</span><span class=\"p\">,</span> <span class=\"n\">flags</span><span class=\"p\">)</span>\n        <span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annotmatch_aids</span><span class=\"p\">(</span><span class=\"n\">filtered_rowids</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># The facematch leftright side example</span>\n        <span class=\"c1\"># edge = (5161, 5245)</span>\n\n        <span class=\"n\">edge</span> <span class=\"o\">=</span> <span class=\"n\">edges</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"c1\"># for edge in ut.InteractiveIter(edges):</span>\n        <span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">AnnotInference</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">=</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"o\">=</span><span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">reset_feedback</span><span class=\"p\">(</span><span class=\"s1\">&#39;annotmatch&#39;</span><span class=\"p\">,</span> <span class=\"n\">apply</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">match</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_exec_pairwise_match</span><span class=\"p\">([</span><span class=\"n\">edge</span><span class=\"p\">])[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n        <span class=\"k\">if</span> <span class=\"kc\">False</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Fix the example tags</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">(</span>\n                <span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"s1\">&#39;match&#39;</span><span class=\"p\">,</span> <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;facematch&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;leftrightface&#39;</span><span class=\"p\">],</span>\n                <span class=\"n\">user_id</span><span class=\"o\">=</span><span class=\"s1\">&#39;qt-hack&#39;</span><span class=\"p\">,</span> <span class=\"n\">confidence</span><span class=\"o\">=</span><span class=\"s1\">&#39;pretty_sure&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">write_ibeis_staging_feedback</span><span class=\"p\">()</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">write_ibeis_annotmatch_feedback</span><span class=\"p\">()</span>\n            <span class=\"k\">pass</span>\n\n        <span class=\"c1\"># THE DEPCACHE IS BROKEN FOR ANNOTMATCH APPARENTLY! &gt;:(</span>\n        <span class=\"c1\"># Redo matches</span>\n        <span class=\"n\">feat_keys</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;vecs&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;kpts&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;_feats&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;flann&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">annot1</span><span class=\"o\">.</span><span class=\"n\">_mutable</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">annot2</span><span class=\"o\">.</span><span class=\"n\">_mutable</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">feat_keys</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">annot1</span><span class=\"p\">:</span>\n                <span class=\"k\">del</span> <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">annot1</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">annot2</span><span class=\"p\">:</span>\n                <span class=\"k\">del</span> <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">annot2</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span>\n        <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">apply_all</span><span class=\"p\">({})</span>\n\n        <span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">clf</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">gca</span><span class=\"p\">()</span>\n\n        <span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">rcParams</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">TMP_RC</span><span class=\"p\">)</span>\n        <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">ax</span><span class=\"p\">,</span> <span class=\"n\">vert</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                   <span class=\"n\">heatmask</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                   <span class=\"n\">show_lines</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                   <span class=\"c1\"># show_ell=False,</span>\n                   <span class=\"n\">show_ell</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                   <span class=\"n\">show_ori</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                   <span class=\"n\">show_eig</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                   <span class=\"c1\"># ell_alpha=.3,</span>\n                   <span class=\"n\">modifysize</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"c1\"># ax.set_xlabel(xlabel)</span>\n\n        <span class=\"bp\">self</span> <span class=\"o\">=</span> <span class=\"n\">VerifierExpt</span><span class=\"p\">()</span>\n\n        <span class=\"n\">fname</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;custom_match_</span><span class=\"si\">{}</span><span class=\"s1\">_</span><span class=\"si\">{}</span><span class=\"s1\">_</span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">query_tag</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">edge</span><span class=\"p\">)</span>\n        <span class=\"n\">dpath</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">truepath</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">base_dpath</span><span class=\"p\">)</span>\n        <span class=\"n\">fpath</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">dpath</span><span class=\"p\">),</span> <span class=\"n\">fname</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;.jpg&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">imwrite</span><span class=\"p\">(</span><span class=\"n\">fpath</span><span class=\"p\">,</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">render_figure_to_image</span><span class=\"p\">(</span><span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">dpi</span><span class=\"o\">=</span><span class=\"n\">DPI</span><span class=\"p\">))</span></div>\n\n<div class=\"viewcode-block\" id=\"VerifierExpt.custom_single_hard_case\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts.postdoc.VerifierExpt.custom_single_hard_case\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">custom_single_hard_case</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.scripts.postdoc import *</span>\n<span class=\"sd\">            &gt;&gt;&gt; defaultdb = &#39;PZ_PB_RF_TRAIN&#39;</span>\n<span class=\"sd\">            &gt;&gt;&gt; #defaultdb = &#39;GZ_Master1&#39;</span>\n<span class=\"sd\">            &gt;&gt;&gt; defaultdb = &#39;PZ_MTEST&#39;</span>\n<span class=\"sd\">            &gt;&gt;&gt; self = VerifierExpt.collect(defaultdb)</span>\n<span class=\"sd\">            &gt;&gt;&gt; self.dbname = &#39;PZ_PB_RF_TRAIN&#39;</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">task_key</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;match_state&#39;</span>\n        <span class=\"n\">edge</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">383</span><span class=\"p\">,</span> <span class=\"mi\">503</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">_case</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">hard_cases</span><span class=\"p\">[</span><span class=\"n\">task_key</span><span class=\"p\">]:</span>\n            <span class=\"k\">if</span> <span class=\"n\">_case</span><span class=\"p\">[</span><span class=\"s1\">&#39;edge&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">edge</span><span class=\"p\">:</span>\n                <span class=\"n\">case</span> <span class=\"o\">=</span> <span class=\"n\">_case</span>\n                <span class=\"k\">break</span>\n\n        <span class=\"kn\">import</span> <span class=\"nn\">ibeis</span>\n        <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">opendb</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dbname</span><span class=\"p\">)</span>\n\n        <span class=\"kn\">from</span> <span class=\"nn\">ibeis</span> <span class=\"k\">import</span> <span class=\"n\">core_annots</span>\n        <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;augment_orientation&#39;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;ratio_thresh&#39;</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"mi\">8</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s1\">&#39;checks&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">80</span>\n        <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s1\">&#39;sver_xy_thresh&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"mi\">02</span>\n        <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s1\">&#39;sver_ori_thresh&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n        <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s1\">&#39;Knorm&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n        <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s1\">&#39;symmetric&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">hashdict</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">)</span>\n\n        <span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span> <span class=\"o\">=</span> <span class=\"n\">case</span><span class=\"p\">[</span><span class=\"s1\">&#39;edge&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">real_name</span> <span class=\"o\">=</span> <span class=\"n\">case</span><span class=\"p\">[</span><span class=\"s1\">&#39;real&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">pred_name</span> <span class=\"o\">=</span> <span class=\"n\">case</span><span class=\"p\">[</span><span class=\"s1\">&#39;pred&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">match</span> <span class=\"o\">=</span> <span class=\"n\">case</span><span class=\"p\">[</span><span class=\"s1\">&#39;match&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">code_to_nice</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">task_nice_lookup</span><span class=\"p\">[</span><span class=\"n\">task_key</span><span class=\"p\">]</span>\n        <span class=\"n\">real_nice</span><span class=\"p\">,</span> <span class=\"n\">pred_nice</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">code_to_nice</span><span class=\"p\">,</span>\n                                       <span class=\"p\">[</span><span class=\"n\">real_name</span><span class=\"p\">,</span> <span class=\"n\">pred_name</span><span class=\"p\">])</span>\n        <span class=\"n\">fname</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;fail_</span><span class=\"si\">{}</span><span class=\"s1\">_</span><span class=\"si\">{}</span><span class=\"s1\">_</span><span class=\"si\">{}</span><span class=\"s1\">_</span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">real_nice</span><span class=\"p\">,</span> <span class=\"n\">pred_nice</span><span class=\"p\">,</span> <span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Draw case</span>\n        <span class=\"n\">probs</span> <span class=\"o\">=</span> <span class=\"n\">case</span><span class=\"p\">[</span><span class=\"s1\">&#39;probs&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">()</span>\n        <span class=\"n\">order</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">code_to_nice</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">())</span>\n        <span class=\"n\">order</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">setintersect</span><span class=\"p\">(</span><span class=\"n\">order</span><span class=\"p\">,</span> <span class=\"n\">probs</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n        <span class=\"n\">probs</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">map_dict_keys</span><span class=\"p\">(</span><span class=\"n\">code_to_nice</span><span class=\"p\">,</span> <span class=\"n\">probs</span><span class=\"p\">)</span>\n        <span class=\"n\">probstr</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr2</span><span class=\"p\">(</span><span class=\"n\">probs</span><span class=\"p\">,</span> <span class=\"n\">precision</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">strkeys</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">nobr</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                           <span class=\"n\">key_order</span><span class=\"o\">=</span><span class=\"n\">order</span><span class=\"p\">)</span>\n        <span class=\"n\">xlabel</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;real=</span><span class=\"si\">{}</span><span class=\"s1\">, pred=</span><span class=\"si\">{}</span><span class=\"s1\">,</span><span class=\"se\">\\n</span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">real_nice</span><span class=\"p\">,</span> <span class=\"n\">pred_nice</span><span class=\"p\">,</span>\n                                                <span class=\"n\">probstr</span><span class=\"p\">)</span>\n\n        <span class=\"n\">match_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">depc</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;pairwise_match&#39;</span><span class=\"p\">,</span> <span class=\"p\">([</span><span class=\"n\">aid1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"n\">aid2</span><span class=\"p\">]),</span>\n                                       <span class=\"s1\">&#39;match&#39;</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"p\">)</span>\n        <span class=\"n\">match</span> <span class=\"o\">=</span> <span class=\"n\">match_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">configured_lazy_annots</span> <span class=\"o\">=</span> <span class=\"n\">core_annots</span><span class=\"o\">.</span><span class=\"n\">make_configured_annots</span><span class=\"p\">(</span>\n            <span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">aid1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"n\">aid2</span><span class=\"p\">],</span> <span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">preload</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">annot1</span> <span class=\"o\">=</span> <span class=\"n\">configured_lazy_annots</span><span class=\"p\">[</span><span class=\"n\">config</span><span class=\"p\">][</span><span class=\"n\">aid1</span><span class=\"p\">]</span>\n        <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">annot2</span> <span class=\"o\">=</span> <span class=\"n\">configured_lazy_annots</span><span class=\"p\">[</span><span class=\"n\">config</span><span class=\"p\">][</span><span class=\"n\">aid2</span><span class=\"p\">]</span>\n        <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">config</span>\n\n        <span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">clf</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">gca</span><span class=\"p\">()</span>\n\n        <span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">rcParams</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">TMP_RC</span><span class=\"p\">)</span>\n        <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">ax</span><span class=\"p\">,</span> <span class=\"n\">vert</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                   <span class=\"n\">heatmask</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                   <span class=\"n\">show_lines</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                   <span class=\"n\">show_ell</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                   <span class=\"n\">show_ori</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                   <span class=\"n\">show_eig</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                   <span class=\"c1\"># ell_alpha=.3,</span>\n                   <span class=\"n\">modifysize</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_xlabel</span><span class=\"p\">(</span><span class=\"n\">xlabel</span><span class=\"p\">)</span>\n\n        <span class=\"n\">subdir</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;cases_</span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">task_key</span><span class=\"p\">)</span>\n        <span class=\"n\">dpath</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dpath</span><span class=\"p\">),</span> <span class=\"n\">subdir</span><span class=\"p\">)</span>\n        <span class=\"n\">fpath</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">dpath</span><span class=\"p\">),</span> <span class=\"n\">fname</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;_custom.jpg&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">imwrite</span><span class=\"p\">(</span><span class=\"n\">fpath</span><span class=\"p\">,</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">render_figure_to_image</span><span class=\"p\">(</span><span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">dpi</span><span class=\"o\">=</span><span class=\"n\">DPI</span><span class=\"p\">))</span></div></div>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.scripts.postdoc</span>\n<span class=\"sd\">        python -m ibeis.scripts.postdoc --allexamples</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">multiprocessing</span>\n    <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">freeze_support</span><span class=\"p\">()</span>  <span class=\"c1\"># for win32</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>  <span class=\"c1\"># NOQA</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">doctest_funcs</span><span class=\"p\">()</span>\n</pre></div>", "current_page_name": "_modules/ibeis/scripts/postdoc", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}