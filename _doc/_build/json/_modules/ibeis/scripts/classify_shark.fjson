{"parents": [{"link": "../../../", "title": "Module code"}, {"link": "../../", "title": "ibeis"}], "title": "ibeis.scripts.classify_shark", "body": "<h1>Source code for ibeis.scripts.classify_shark</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"k\">import</span> <span class=\"n\">absolute_import</span><span class=\"p\">,</span> <span class=\"n\">division</span><span class=\"p\">,</span> <span class=\"n\">print_function</span><span class=\"p\">,</span> <span class=\"n\">unicode_literals</span>\n<span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sklearn</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sklearn.datasets</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sklearn.svm</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sklearn.metrics</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn</span> <span class=\"k\">import</span> <span class=\"n\">preprocessing</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis_cnn.models</span> <span class=\"k\">import</span> <span class=\"n\">abstract_models</span>\n<span class=\"kn\">from</span> <span class=\"nn\">os.path</span> <span class=\"k\">import</span> <span class=\"n\">join</span>\n<span class=\"p\">(</span><span class=\"nb\">print</span><span class=\"p\">,</span> <span class=\"n\">rrr</span><span class=\"p\">,</span> <span class=\"n\">profile</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">inject2</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"shark_net\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts.classify_shark.shark_net\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">shark_net</span><span class=\"p\">(</span><span class=\"n\">dry</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.scripts.classify_shark shark_net</span>\n<span class=\"sd\">        python -m ibeis.scripts.classify_shark shark_net --dry</span>\n<span class=\"sd\">        python -m ibeis.scripts.classify_shark shark_net --vd --monitor</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.scripts.classify_shark import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; shark_net()</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.scripts</span> <span class=\"k\">import</span> <span class=\"n\">classify_shark</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">ibeis</span>\n    <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">opendb</span><span class=\"p\">(</span><span class=\"s1\">&#39;WS_ALL&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># NOQA</span>\n    <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">&#39;dim_size&#39;</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">224</span><span class=\"p\">,</span> <span class=\"mi\">224</span><span class=\"p\">),</span>\n        <span class=\"s1\">&#39;resize_dim&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;wh&#39;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\"># ------------</span>\n    <span class=\"c1\"># Define dataset</span>\n    <span class=\"c1\"># ------------</span>\n    <span class=\"n\">target_type</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;binary&#39;</span>\n    <span class=\"c1\">#target_type = &#39;multiclass3&#39;</span>\n    <span class=\"c1\"># ut.delete(ibs.get_neuralnet_dir())  # to reset</span>\n    <span class=\"n\">dataset</span> <span class=\"o\">=</span> <span class=\"n\">classify_shark</span><span class=\"o\">.</span><span class=\"n\">get_shark_dataset</span><span class=\"p\">(</span><span class=\"n\">target_type</span><span class=\"p\">,</span> <span class=\"s1\">&#39;chip&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># ------------</span>\n    <span class=\"c1\"># Define model</span>\n    <span class=\"c1\"># ------------</span>\n    <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_computer_name</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;Leviathan&#39;</span><span class=\"p\">:</span>\n        <span class=\"n\">batch_size</span> <span class=\"o\">=</span> <span class=\"mi\">128</span>\n        <span class=\"n\">suffix</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;resnet&#39;</span>\n        <span class=\"c1\"># suffix = &#39;lenet&#39;</span>\n        <span class=\"c1\">#suffix = &#39;incep&#39;</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">suffix</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;lenet&#39;</span>\n        <span class=\"n\">batch_size</span> <span class=\"o\">=</span> <span class=\"mi\">64</span>\n        <span class=\"c1\">#suffix = &#39;resnet&#39;</span>\n        <span class=\"c1\">#batch_size = 32</span>\n\n    <span class=\"n\">model_name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;injur-shark-&#39;</span> <span class=\"o\">+</span> <span class=\"n\">suffix</span>\n\n    <span class=\"k\">if</span> <span class=\"kc\">False</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">classify_shark</span><span class=\"o\">.</span><span class=\"n\">WhaleSharkInjuryModel</span><span class=\"p\">(</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">model_name</span><span class=\"p\">,</span>\n            <span class=\"n\">output_dims</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">getprop</span><span class=\"p\">(</span><span class=\"s1\">&#39;target_names&#39;</span><span class=\"p\">)),</span>\n            <span class=\"n\">data_shape</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s1\">&#39;dim_size&#39;</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,),</span>\n            <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"n\">batch_size</span><span class=\"p\">,</span>\n            <span class=\"n\">arch_dpath</span><span class=\"o\">=</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">init_arch</span><span class=\"p\">()</span>\n        <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">load_model_state</span><span class=\"p\">()</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">classify_shark</span><span class=\"o\">.</span><span class=\"n\">WhaleSharkInjuryModel</span><span class=\"p\">(</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">model_name</span><span class=\"p\">,</span>\n            <span class=\"n\">dataset_dpath</span><span class=\"o\">=</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">dataset_dpath</span><span class=\"p\">,</span>\n            <span class=\"n\">training_dpath</span><span class=\"o\">=</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_neuralnet_dir</span><span class=\"p\">(),</span>\n            <span class=\"c1\">#</span>\n            <span class=\"n\">output_dims</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">getprop</span><span class=\"p\">(</span><span class=\"s1\">&#39;target_names&#39;</span><span class=\"p\">)),</span>\n            <span class=\"n\">data_shape</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s1\">&#39;dim_size&#39;</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,),</span>\n            <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"n\">batch_size</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">init_arch</span><span class=\"p\">()</span>\n        <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">print_layer_info</span><span class=\"p\">()</span>\n\n    <span class=\"k\">if</span> <span class=\"kc\">False</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">arch_dpath</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;/home/joncrall/Desktop/manually_saved/arch_injur-shark-resnet_o2_d27_c2942_jzuddodd/&#39;</span>\n\n        <span class=\"n\">state_fpath</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">get_model_state_fpath</span><span class=\"p\">(</span><span class=\"n\">dpath</span><span class=\"o\">=</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">trained_arch_dpath</span><span class=\"p\">)</span>\n        <span class=\"n\">state_fpath</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">get_model_state_fpath</span><span class=\"p\">()</span>\n        <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">load_model_state</span><span class=\"p\">(</span><span class=\"n\">fpath</span><span class=\"o\">=</span><span class=\"n\">state_fpath</span><span class=\"p\">)</span>\n\n        <span class=\"c1\">#X_test, y_test = dataset.subset(&#39;test&#39;)</span>\n        <span class=\"c1\">#X_test, y_test = dataset.subset(&#39;valid&#39;)</span>\n        <span class=\"c1\">#X_test, y_test = dataset.subset(&#39;learn&#39;)</span>\n        <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">subset</span><span class=\"p\">(</span><span class=\"s1\">&#39;test&#39;</span><span class=\"p\">)</span>\n        <span class=\"c1\">#y_pred = model.predict(X_test)</span>\n        <span class=\"n\">test_outptuts</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">_predict</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span>\n        <span class=\"n\">y_pred</span> <span class=\"o\">=</span> <span class=\"n\">test_outptuts</span><span class=\"p\">[</span><span class=\"s1\">&#39;predictions&#39;</span><span class=\"p\">]</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"n\">report</span> <span class=\"o\">=</span> <span class=\"n\">sklearn</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">classification_report</span><span class=\"p\">(</span>\n            <span class=\"n\">y_true</span><span class=\"o\">=</span><span class=\"n\">y_test</span><span class=\"p\">,</span> <span class=\"n\">y_pred</span><span class=\"o\">=</span><span class=\"n\">y_pred</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">report</span><span class=\"p\">)</span>\n\n        <span class=\"n\">state_fpath</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;/home/joncrall/Desktop/manually_saved/arch_injur-shark-resnet_o2_d27_c2942_jzuddodd/model_state_arch_jzuddodd.pkl&#39;</span>\n        <span class=\"n\">dpath</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;/home/joncrall/Desktop/manually_saved/arch_injur-shark-lenet_o2_d11_c688_acioqbst&#39;</span>\n        <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">dump_cases</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">,</span> <span class=\"s1\">&#39;test&#39;</span><span class=\"p\">,</span> <span class=\"n\">dpath</span><span class=\"o\">=</span><span class=\"n\">dpath</span><span class=\"p\">)</span>\n\n    <span class=\"n\">hyperparams</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span>\n        <span class=\"n\">era_size</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">,</span>\n        <span class=\"n\">max_epochs</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">,</span>\n        <span class=\"n\">rate_schedule</span><span class=\"o\">=.</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"n\">augment_on</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">class_weight</span><span class=\"o\">=</span><span class=\"s1\">&#39;balanced&#39;</span><span class=\"p\">,</span>\n        <span class=\"n\">stopping_patience</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">learn_state</span><span class=\"o\">.</span><span class=\"n\">weight_decay</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"mi\">000002</span>\n    <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">learn_state</span><span class=\"o\">.</span><span class=\"n\">learning_rate</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"mi\">005</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">update_existing</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">hyperparams</span><span class=\"p\">,</span> <span class=\"n\">hyperparams</span><span class=\"p\">,</span> <span class=\"n\">assert_exists</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">monitor_config</span><span class=\"p\">[</span><span class=\"s1\">&#39;monitor&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">monitor_config</span><span class=\"p\">[</span><span class=\"s1\">&#39;weight_dump_freq&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n    <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">monitor_config</span><span class=\"p\">[</span><span class=\"s1\">&#39;case_dump_freq&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n\n    <span class=\"c1\">#model.build_backprop_func()</span>\n    <span class=\"c1\">#model.build_forward_func()</span>\n\n    <span class=\"c1\"># ---------------</span>\n    <span class=\"c1\"># Setup and learn</span>\n    <span class=\"c1\"># ---------------</span>\n\n    <span class=\"n\">X_learn</span><span class=\"p\">,</span> <span class=\"n\">y_learn</span> <span class=\"o\">=</span> <span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">subset</span><span class=\"p\">(</span><span class=\"s1\">&#39;learn&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">X_valid</span><span class=\"p\">,</span> <span class=\"n\">y_valid</span> <span class=\"o\">=</span> <span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">subset</span><span class=\"p\">(</span><span class=\"s1\">&#39;valid&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">subset</span><span class=\"p\">(</span><span class=\"s1\">&#39;test&#39;</span><span class=\"p\">)</span>\n    <span class=\"c1\">#model.ensure_data_params(X_learn, y_learn)</span>\n    <span class=\"c1\">#X_train = X_learn  # NOQA</span>\n    <span class=\"c1\">#y_train = y_learn  # NOQA</span>\n    <span class=\"n\">valid_idx</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>  <span class=\"c1\"># NOQA</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">dry</span> <span class=\"ow\">or</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argflag</span><span class=\"p\">(</span><span class=\"s1\">&#39;--dry&#39;</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">dataset</span>\n    <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_learn</span><span class=\"p\">,</span> <span class=\"n\">y_learn</span><span class=\"p\">,</span> <span class=\"n\">X_valid</span><span class=\"o\">=</span><span class=\"n\">X_valid</span><span class=\"p\">,</span> <span class=\"n\">y_valid</span><span class=\"o\">=</span><span class=\"n\">y_valid</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"WhaleSharkInjuryModel\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts.classify_shark.WhaleSharkInjuryModel\">[docs]</a><span class=\"nd\">@ut</span><span class=\"o\">.</span><span class=\"n\">reloadable_class</span>\n<span class=\"k\">class</span> <span class=\"nc\">WhaleSharkInjuryModel</span><span class=\"p\">(</span><span class=\"n\">abstract_models</span><span class=\"o\">.</span><span class=\"n\">AbstractCategoricalModel</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.scripts.classify_shark import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.scripts import classify_shark</span>\n<span class=\"sd\">        &gt;&gt;&gt; ds = classify_shark.get_sharks_dataset(&#39;binary&#39;, &#39;chip&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; problem = classify_shark.ClfProblem(ds)</span>\n<span class=\"sd\">        &gt;&gt;&gt; problem.print_support_info()</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ds.ibs</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n<div class=\"viewcode-block\" id=\"WhaleSharkInjuryModel.def_lenet\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts.classify_shark.WhaleSharkInjuryModel.def_lenet\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">def_lenet</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">):</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">ibeis_cnn.__LASAGNE__</span> <span class=\"k\">as</span> <span class=\"nn\">lasange</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">ibeis_cnn</span> <span class=\"k\">import</span> <span class=\"n\">custom_layers</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[model] init_arch&#39;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">lrelu</span> <span class=\"o\">=</span> <span class=\"n\">lasange</span><span class=\"o\">.</span><span class=\"n\">nonlinearities</span><span class=\"o\">.</span><span class=\"n\">LeakyRectify</span><span class=\"p\">(</span><span class=\"n\">leakiness</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mf\">1.</span> <span class=\"o\">/</span> <span class=\"mf\">3.</span><span class=\"p\">))</span>\n        <span class=\"n\">W</span> <span class=\"o\">=</span> <span class=\"n\">lasange</span><span class=\"o\">.</span><span class=\"n\">init</span><span class=\"o\">.</span><span class=\"n\">Orthogonal</span><span class=\"p\">(</span><span class=\"s1\">&#39;relu&#39;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">bundles</span> <span class=\"o\">=</span> <span class=\"n\">custom_layers</span><span class=\"o\">.</span><span class=\"n\">make_bundles</span><span class=\"p\">(</span>\n            <span class=\"n\">nonlinearity</span><span class=\"o\">=</span><span class=\"n\">lrelu</span><span class=\"p\">,</span> <span class=\"n\">batch_norm</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"n\">filter_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n            <span class=\"n\">pool_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">pool_stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span>\n            <span class=\"n\">W</span><span class=\"o\">=</span><span class=\"n\">W</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">DynStruct</span><span class=\"p\">(</span><span class=\"n\">copy_dict</span><span class=\"o\">=</span><span class=\"n\">bundles</span><span class=\"p\">)</span>\n\n        <span class=\"n\">network_layers_def</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">InputBundle</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">input_shape</span><span class=\"p\">,</span> <span class=\"n\">noise</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">),</span>\n            <span class=\"c1\"># Convolutional layers</span>\n            <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">ConvBundle</span><span class=\"p\">(</span><span class=\"n\">num_filters</span><span class=\"o\">=</span><span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"n\">pool</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">),</span>\n\n            <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">ConvBundle</span><span class=\"p\">(</span><span class=\"n\">num_filters</span><span class=\"o\">=</span><span class=\"mi\">16</span><span class=\"p\">),</span>\n            <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">ConvBundle</span><span class=\"p\">(</span><span class=\"n\">num_filters</span><span class=\"o\">=</span><span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"n\">pool</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">),</span>\n\n            <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">ConvBundle</span><span class=\"p\">(</span><span class=\"n\">num_filters</span><span class=\"o\">=</span><span class=\"mi\">16</span><span class=\"p\">),</span>\n            <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">ConvBundle</span><span class=\"p\">(</span><span class=\"n\">num_filters</span><span class=\"o\">=</span><span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"n\">pool</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">),</span>\n\n            <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">ConvBundle</span><span class=\"p\">(</span><span class=\"n\">num_filters</span><span class=\"o\">=</span><span class=\"mi\">32</span><span class=\"p\">),</span>\n            <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">ConvBundle</span><span class=\"p\">(</span><span class=\"n\">num_filters</span><span class=\"o\">=</span><span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"n\">pool</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">),</span>\n\n            <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">ConvBundle</span><span class=\"p\">(</span><span class=\"n\">num_filters</span><span class=\"o\">=</span><span class=\"mi\">32</span><span class=\"p\">),</span>\n\n            <span class=\"c1\"># Fully connected layers</span>\n            <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">DenseBundle</span><span class=\"p\">(</span><span class=\"n\">num_units</span><span class=\"o\">=</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"n\">dropout</span><span class=\"o\">=.</span><span class=\"mi\">5</span><span class=\"p\">),</span>\n            <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">DenseBundle</span><span class=\"p\">(</span><span class=\"n\">num_units</span><span class=\"o\">=</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"n\">dropout</span><span class=\"o\">=.</span><span class=\"mi\">5</span><span class=\"p\">),</span>\n            <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">SoftmaxBundle</span><span class=\"p\">(</span><span class=\"n\">num_units</span><span class=\"o\">=</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">output_dims</span><span class=\"p\">)</span>\n        <span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">network_layers_def</span></div>\n\n<div class=\"viewcode-block\" id=\"WhaleSharkInjuryModel.def_resnet\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts.classify_shark.WhaleSharkInjuryModel.def_resnet\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">def_resnet</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">):</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">ibeis_cnn.__LASAGNE__</span> <span class=\"k\">as</span> <span class=\"nn\">lasange</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">ibeis_cnn</span> <span class=\"k\">import</span> <span class=\"n\">custom_layers</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[model] init_arch&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">nonlinearity</span> <span class=\"o\">=</span> <span class=\"n\">lasange</span><span class=\"o\">.</span><span class=\"n\">nonlinearities</span><span class=\"o\">.</span><span class=\"n\">LeakyRectify</span><span class=\"p\">(</span><span class=\"n\">leakiness</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mf\">1.</span> <span class=\"o\">/</span> <span class=\"mf\">3.</span><span class=\"p\">))</span>\n        <span class=\"n\">W</span> <span class=\"o\">=</span> <span class=\"n\">lasange</span><span class=\"o\">.</span><span class=\"n\">init</span><span class=\"o\">.</span><span class=\"n\">HeNormal</span><span class=\"p\">(</span><span class=\"n\">gain</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span><span class=\"p\">)</span>\n        <span class=\"c1\">#W = lasange.init.GlorotUniform()</span>\n\n        <span class=\"n\">bundles</span> <span class=\"o\">=</span> <span class=\"n\">custom_layers</span><span class=\"o\">.</span><span class=\"n\">make_bundles</span><span class=\"p\">(</span>\n            <span class=\"n\">nonlinearity</span><span class=\"o\">=</span><span class=\"n\">nonlinearity</span><span class=\"p\">,</span>\n            <span class=\"n\">filter_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n            <span class=\"n\">W</span><span class=\"o\">=</span><span class=\"n\">W</span><span class=\"p\">,</span> <span class=\"n\">pool_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">pool_stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">DynStruct</span><span class=\"p\">(</span><span class=\"n\">copy_dict</span><span class=\"o\">=</span><span class=\"n\">bundles</span><span class=\"p\">)</span>\n\n        <span class=\"n\">network_layers_def</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">InputBundle</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">input_shape</span><span class=\"p\">,</span> <span class=\"n\">noise</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">),</span>\n            <span class=\"c1\"># Convolutional layers</span>\n            <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">ConvBundle</span><span class=\"p\">(</span><span class=\"n\">num_filters</span><span class=\"o\">=</span><span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"n\">pool</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">),</span>\n\n            <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">ResidualBundle</span><span class=\"p\">(</span><span class=\"n\">num_filters</span><span class=\"o\">=</span><span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">preactivate</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">),</span>\n            <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">ResidualBundle</span><span class=\"p\">(</span><span class=\"n\">num_filters</span><span class=\"o\">=</span><span class=\"mi\">16</span><span class=\"p\">),</span>\n\n            <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">ResidualBundle</span><span class=\"p\">(</span><span class=\"n\">num_filters</span><span class=\"o\">=</span><span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)),</span>\n            <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">ResidualBundle</span><span class=\"p\">(</span><span class=\"n\">num_filters</span><span class=\"o\">=</span><span class=\"mi\">16</span><span class=\"p\">),</span>\n\n            <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">ResidualBundle</span><span class=\"p\">(</span><span class=\"n\">num_filters</span><span class=\"o\">=</span><span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)),</span>\n            <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">ResidualBundle</span><span class=\"p\">(</span><span class=\"n\">num_filters</span><span class=\"o\">=</span><span class=\"mi\">16</span><span class=\"p\">),</span>\n\n            <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">ResidualBundle</span><span class=\"p\">(</span><span class=\"n\">num_filters</span><span class=\"o\">=</span><span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)),</span>\n            <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">ResidualBundle</span><span class=\"p\">(</span><span class=\"n\">num_filters</span><span class=\"o\">=</span><span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">),</span>\n\n            <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">ResidualBundle</span><span class=\"p\">(</span><span class=\"n\">num_filters</span><span class=\"o\">=</span><span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">dropout</span><span class=\"o\">=.</span><span class=\"mi\">5</span><span class=\"p\">),</span>\n            <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">ResidualBundle</span><span class=\"p\">(</span><span class=\"n\">num_filters</span><span class=\"o\">=</span><span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"n\">postactivate</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">dropout</span><span class=\"o\">=.</span><span class=\"mi\">5</span><span class=\"p\">),</span>\n\n            <span class=\"c1\"># Fully connected layers</span>\n            <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">GlobalPool</span><span class=\"p\">(),</span>\n            <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">SoftmaxBundle</span><span class=\"p\">(</span><span class=\"n\">num_units</span><span class=\"o\">=</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">output_dims</span><span class=\"p\">)</span>\n        <span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">network_layers_def</span></div>\n\n<div class=\"viewcode-block\" id=\"WhaleSharkInjuryModel.def_inception\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts.classify_shark.WhaleSharkInjuryModel.def_inception\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">def_inception</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">):</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">ibeis_cnn.__LASAGNE__</span> <span class=\"k\">as</span> <span class=\"nn\">lasange</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">ibeis_cnn</span> <span class=\"k\">import</span> <span class=\"n\">custom_layers</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[model] init_arch&#39;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"mi\">16</span>\n\n        <span class=\"c1\"># Define default incption branch types</span>\n        <span class=\"n\">incep_branches</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">=</span><span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">r</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"n\">N</span><span class=\"p\">),</span>\n            <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">=</span><span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">r</span><span class=\"o\">=</span><span class=\"n\">N</span> <span class=\"o\">//</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"n\">N</span> <span class=\"o\">//</span> <span class=\"mi\">2</span><span class=\"p\">),</span>\n            <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">=</span><span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">r</span><span class=\"o\">=</span><span class=\"n\">N</span> <span class=\"o\">//</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"n\">N</span> <span class=\"o\">//</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">),</span>\n            <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">=</span><span class=\"s1\">&#39;p&#39;</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"n\">N</span> <span class=\"o\">//</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"p\">]</span>\n\n        <span class=\"n\">lrelu</span> <span class=\"o\">=</span> <span class=\"n\">lasange</span><span class=\"o\">.</span><span class=\"n\">nonlinearities</span><span class=\"o\">.</span><span class=\"n\">LeakyRectify</span><span class=\"p\">(</span><span class=\"n\">leakiness</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mf\">1.</span> <span class=\"o\">/</span> <span class=\"mf\">3.</span><span class=\"p\">))</span>\n        <span class=\"n\">W</span> <span class=\"o\">=</span> <span class=\"n\">lasange</span><span class=\"o\">.</span><span class=\"n\">init</span><span class=\"o\">.</span><span class=\"n\">Orthogonal</span><span class=\"p\">(</span><span class=\"s1\">&#39;relu&#39;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">bundles</span> <span class=\"o\">=</span> <span class=\"n\">custom_layers</span><span class=\"o\">.</span><span class=\"n\">make_bundles</span><span class=\"p\">(</span>\n            <span class=\"n\">nonlinearity</span><span class=\"o\">=</span><span class=\"n\">lrelu</span><span class=\"p\">,</span> <span class=\"n\">batch_norm</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"n\">filter_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n            <span class=\"n\">pool_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">pool_stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span>\n            <span class=\"n\">branches</span><span class=\"o\">=</span><span class=\"n\">incep_branches</span><span class=\"p\">,</span>\n            <span class=\"n\">W</span><span class=\"o\">=</span><span class=\"n\">W</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">DynStruct</span><span class=\"p\">(</span><span class=\"n\">copy_dict</span><span class=\"o\">=</span><span class=\"n\">bundles</span><span class=\"p\">)</span>\n\n        <span class=\"n\">network_layers_def</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"c1\"># Convolutional layers</span>\n            <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">InputBundle</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">input_shape</span><span class=\"p\">,</span> <span class=\"n\">noise</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">),</span>\n            <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">ConvBundle</span><span class=\"p\">(</span><span class=\"n\">num_filters</span><span class=\"o\">=</span><span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"n\">filter_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">pool</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">),</span>\n            <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">ConvBundle</span><span class=\"p\">(</span><span class=\"n\">num_filters</span><span class=\"o\">=</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"n\">filter_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">pool</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">),</span>\n\n            <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">InceptionBundle</span><span class=\"p\">(</span><span class=\"n\">dropout</span><span class=\"o\">=.</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">pool</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">),</span>\n            <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">InceptionBundle</span><span class=\"p\">(</span><span class=\"n\">dropout</span><span class=\"o\">=.</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">pool</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">),</span>\n\n            <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">InceptionBundle</span><span class=\"p\">(</span><span class=\"n\">dropout</span><span class=\"o\">=.</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">pool</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">),</span>\n            <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">InceptionBundle</span><span class=\"p\">(</span><span class=\"n\">dropout</span><span class=\"o\">=.</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n                              <span class=\"n\">branches</span><span class=\"o\">=</span><span class=\"p\">[</span>\n                                  <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">=</span><span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">r</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">output_dims</span><span class=\"p\">),</span>\n                                  <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">=</span><span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">r</span><span class=\"o\">=</span><span class=\"n\">N</span> <span class=\"o\">//</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">output_dims</span><span class=\"p\">),</span>\n                                  <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">=</span><span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">r</span><span class=\"o\">=</span><span class=\"n\">N</span> <span class=\"o\">//</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">output_dims</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">),</span>\n                                  <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">=</span><span class=\"s1\">&#39;p&#39;</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">output_dims</span><span class=\"p\">)</span>\n                              <span class=\"p\">]),</span>\n            <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">GlobalPool</span><span class=\"p\">(),</span>\n            <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">SoftmaxBundle</span><span class=\"p\">(</span><span class=\"n\">num_units</span><span class=\"o\">=</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">output_dims</span><span class=\"p\">)</span>\n            <span class=\"c1\"># Fully connected layers</span>\n            <span class=\"c1\">#b.DenseBundle(num_units=64, dropout=.5),</span>\n            <span class=\"c1\">#b.DenseBundle(num_units=64, dropout=.5),</span>\n        <span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">network_layers_def</span></div>\n\n<div class=\"viewcode-block\" id=\"WhaleSharkInjuryModel.init_arch\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts.classify_shark.WhaleSharkInjuryModel.init_arch\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">init_arch</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">VERBOSE</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n\n<span class=\"sd\">        CommandLine:</span>\n<span class=\"sd\">            python -m ibeis.scripts.classify_shark WhaleSharkInjuryModel.init_arch</span>\n<span class=\"sd\">            python -m ibeis.scripts.classify_shark WhaleSharkInjuryModel.init_arch --show</span>\n\n<span class=\"sd\">            python -m ibeis.scripts.classify_shark shark_net --dry --show</span>\n<span class=\"sd\">            python -m ibeis.scripts.classify_shark shark_net --vd</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.scripts.classify_shark import *  # NOQA</span>\n<span class=\"sd\">            &gt;&gt;&gt; verbose = True</span>\n<span class=\"sd\">            &gt;&gt;&gt; data_shape = tuple(ut.get_argval(&#39;--datashape&#39;, type_=list,</span>\n<span class=\"sd\">            &gt;&gt;&gt;                                  default=(224, 224, 3)))</span>\n<span class=\"sd\">            &gt;&gt;&gt; model = WhaleSharkInjuryModel(batch_size=64, output_dims=2,</span>\n<span class=\"sd\">            &gt;&gt;&gt;                               data_shape=data_shape)</span>\n<span class=\"sd\">            &gt;&gt;&gt; model.init_arch()</span>\n<span class=\"sd\">            &gt;&gt;&gt; model.print_model_info_str()</span>\n<span class=\"sd\">            &gt;&gt;&gt; ut.quit_if_noshow()</span>\n<span class=\"sd\">            &gt;&gt;&gt; model.show_arch(fullinfo=False)</span>\n<span class=\"sd\">            &gt;&gt;&gt; ut.show_if_requested()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">ibeis_cnn</span> <span class=\"k\">import</span> <span class=\"n\">custom_layers</span>\n        <span class=\"c1\">#if ut.get_computer_name() == &#39;Leviathan&#39;:</span>\n        <span class=\"k\">if</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s1\">&#39;incep&#39;</span><span class=\"p\">):</span>\n            <span class=\"n\">network_layers_def</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">def_inception</span><span class=\"p\">()</span>\n        <span class=\"k\">elif</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s1\">&#39;lenet&#39;</span><span class=\"p\">):</span>\n            <span class=\"n\">network_layers_def</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">def_lenet</span><span class=\"p\">()</span>\n        <span class=\"k\">elif</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s1\">&#39;resnet&#39;</span><span class=\"p\">):</span>\n            <span class=\"n\">network_layers_def</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">def_resnet</span><span class=\"p\">()</span>\n        <span class=\"n\">network_layers</span> <span class=\"o\">=</span> <span class=\"n\">custom_layers</span><span class=\"o\">.</span><span class=\"n\">evaluate_layer_list</span><span class=\"p\">(</span>\n            <span class=\"n\">network_layers_def</span><span class=\"p\">)</span>\n        <span class=\"c1\">#model.network_layers = network_layers</span>\n        <span class=\"n\">output_layer</span> <span class=\"o\">=</span> <span class=\"n\">network_layers</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">output_layer</span> <span class=\"o\">=</span> <span class=\"n\">output_layer</span>\n        <span class=\"k\">return</span> <span class=\"n\">output_layer</span></div>\n\n<div class=\"viewcode-block\" id=\"WhaleSharkInjuryModel.special_output\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts.classify_shark.WhaleSharkInjuryModel.special_output\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">special_output</span><span class=\"p\">():</span>\n        <span class=\"k\">pass</span></div>\n\n    <span class=\"c1\">#def special_loss_function(output_activations):</span>\n    <span class=\"c1\">#    output_injur1 = output_activations[:, 0]</span>\n    <span class=\"c1\">#    output_injur2 = output_activations[:, 1]</span>\n    <span class=\"c1\">#    output_healthy = (1 - ((1 - output_injur1) * (1 - output_injur2))</span>\n    <span class=\"c1\">#    import ibeis_cnn.__LASAGNE__ as lasange</span>\n    <span class=\"c1\">#    lasange.objectives.binary_crossentropy(output_injur1)</span>\n    <span class=\"c1\">#    lasange.objectives.binary_crossentropy(output_injur2)</span>\n\n<div class=\"viewcode-block\" id=\"WhaleSharkInjuryModel.augment\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts.classify_shark.WhaleSharkInjuryModel.augment\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">augment</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">Xb</span><span class=\"p\">,</span> <span class=\"n\">yb</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        X_valid, y_valid = dataset.subset(&#39;valid&#39;)</span>\n<span class=\"sd\">        num = 10</span>\n<span class=\"sd\">        Xb = X_valid[:num]</span>\n<span class=\"sd\">        Xb = Xb / 255.0 if ut.is_int(Xb) else Xb</span>\n<span class=\"sd\">        Xb = Xb.astype(np.float32, copy=True)</span>\n<span class=\"sd\">        yb = None if yb is None else yb.astype(np.int32, copy=True)</span>\n<span class=\"sd\">        # Rescale the batch data to the range 0 to 1</span>\n<span class=\"sd\">        Xb_, yb_ = model.augment(Xb)</span>\n<span class=\"sd\">        yb_ = None</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.quit_if_noshow()</span>\n<span class=\"sd\">        &gt;&gt;&gt; import plottool as pt</span>\n<span class=\"sd\">        &gt;&gt;&gt; pt.qt4ensure()</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis_cnn import augment</span>\n<span class=\"sd\">        &gt;&gt;&gt; augment.show_augmented_patches(Xb, Xb_, yb, yb_, data_per_label=1)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.show_if_requested()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">ibeis_cnn</span> <span class=\"k\">import</span> <span class=\"n\">augment</span>\n        <span class=\"n\">rng</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span>\n        <span class=\"n\">affperterb_ranges</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span>\n            <span class=\"n\">zoom_range</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mf\">1.3</span><span class=\"p\">,</span> <span class=\"mf\">1.2</span><span class=\"p\">),</span>\n            <span class=\"n\">max_tx</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n            <span class=\"n\">max_ty</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n            <span class=\"n\">max_shear</span><span class=\"o\">=</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">TAU</span> <span class=\"o\">/</span> <span class=\"mi\">32</span><span class=\"p\">,</span>\n            <span class=\"n\">max_theta</span><span class=\"o\">=</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">TAU</span><span class=\"p\">,</span>\n            <span class=\"n\">enable_stretch</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"n\">enable_flip</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">Xb_</span><span class=\"p\">,</span> <span class=\"n\">yb_</span> <span class=\"o\">=</span> <span class=\"n\">augment</span><span class=\"o\">.</span><span class=\"n\">augment_affine</span><span class=\"p\">(</span>\n            <span class=\"n\">Xb</span><span class=\"p\">,</span> <span class=\"n\">yb</span><span class=\"p\">,</span> <span class=\"n\">rng</span><span class=\"o\">=</span><span class=\"n\">rng</span><span class=\"p\">,</span> <span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">data_per_label</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n            <span class=\"n\">affperterb_ranges</span><span class=\"o\">=</span><span class=\"n\">affperterb_ranges</span><span class=\"p\">,</span>\n            <span class=\"n\">aug_prop</span><span class=\"o\">=.</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">Xb_</span><span class=\"p\">,</span> <span class=\"n\">yb_</span></div></div>\n\n    <span class=\"c1\">#def fit_interactive(X_train, y_train, X_valid, y_valid):</span>\n    <span class=\"c1\">#    pass</span>\n\n\n<div class=\"viewcode-block\" id=\"get_shark_dataset\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts.classify_shark.get_shark_dataset\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">get_shark_dataset</span><span class=\"p\">(</span><span class=\"n\">target_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;binary&#39;</span><span class=\"p\">,</span> <span class=\"n\">data_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;chip&#39;</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    &gt;&gt;&gt; from ibeis.scripts.classify_shark import *  # NOQA</span>\n<span class=\"sd\">    &gt;&gt;&gt; target_type = &#39;binary&#39;</span>\n<span class=\"sd\">    &gt;&gt;&gt; data_type = &#39;hog&#39;</span>\n<span class=\"sd\">    &gt;&gt;&gt; dataset = get_shark_dataset(target_type)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis_cnn.dataset</span> <span class=\"k\">import</span> <span class=\"n\">DataSet</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.scripts</span> <span class=\"k\">import</span> <span class=\"n\">classify_shark</span>\n    <span class=\"n\">tup</span> <span class=\"o\">=</span> <span class=\"n\">classify_shark</span><span class=\"o\">.</span><span class=\"n\">get_shark_labels_and_metadata</span><span class=\"p\">(</span><span class=\"n\">target_type</span><span class=\"p\">)</span>\n    <span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">annots</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"n\">target_names</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">metadata</span><span class=\"p\">,</span> <span class=\"n\">enc</span> <span class=\"o\">=</span> <span class=\"n\">tup</span>\n    <span class=\"n\">data_shape</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s1\">&#39;dim_size&#39;</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,)</span>\n    <span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">annots</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Build dataset configuration string</span>\n    <span class=\"n\">trail_cfgstr</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">depc_annot</span><span class=\"o\">.</span><span class=\"n\">get_config_trail_str</span><span class=\"p\">(</span><span class=\"s1\">&#39;chips&#39;</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">)</span>\n    <span class=\"n\">trail_hashstr</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">hashstr27</span><span class=\"p\">(</span><span class=\"n\">trail_cfgstr</span><span class=\"p\">)</span>\n    <span class=\"n\">visual_uuids</span> <span class=\"o\">=</span> <span class=\"n\">annots</span><span class=\"o\">.</span><span class=\"n\">visual_uuids</span>\n    <span class=\"n\">metadata</span><span class=\"p\">[</span><span class=\"s1\">&#39;visual_uuid&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">visual_uuids</span><span class=\"p\">)</span>\n    <span class=\"c1\">#metadata[&#39;nids&#39;] = np.array(annots.nids)</span>\n    <span class=\"n\">chips_hashstr</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">hashstr_arr27</span><span class=\"p\">(</span><span class=\"n\">annots</span><span class=\"o\">.</span><span class=\"n\">visual_uuids</span><span class=\"p\">,</span> <span class=\"s1\">&#39;chips&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">cfgstr</span> <span class=\"o\">=</span> <span class=\"n\">chips_hashstr</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;_&#39;</span> <span class=\"o\">+</span> <span class=\"n\">trail_hashstr</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;injur-shark&#39;</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">data_type</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;hog&#39;</span><span class=\"p\">:</span>\n        <span class=\"n\">cfgstr</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;hog_&#39;</span> <span class=\"o\">+</span> <span class=\"n\">cfgstr</span>\n        <span class=\"n\">name</span> <span class=\"o\">+=</span> <span class=\"s1\">&#39;-hog&#39;</span>\n\n    <span class=\"n\">training_dpath</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_neuralnet_dir</span><span class=\"p\">()</span>\n    <span class=\"n\">dataset</span> <span class=\"o\">=</span> <span class=\"n\">DataSet</span><span class=\"p\">(</span><span class=\"n\">cfgstr</span><span class=\"p\">,</span>\n                      <span class=\"n\">data_shape</span><span class=\"o\">=</span><span class=\"n\">data_shape</span><span class=\"p\">,</span>\n                      <span class=\"n\">num_data</span><span class=\"o\">=</span><span class=\"n\">length</span><span class=\"p\">,</span>\n                      <span class=\"n\">training_dpath</span><span class=\"o\">=</span><span class=\"n\">training_dpath</span><span class=\"p\">,</span>\n                      <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">dataset_id</span><span class=\"p\">)</span>\n\n    <span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">setprop</span><span class=\"p\">(</span><span class=\"s1\">&#39;ibs&#39;</span><span class=\"p\">,</span> <span class=\"n\">ibs</span><span class=\"p\">)</span>\n    <span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">setprop</span><span class=\"p\">(</span><span class=\"s1\">&#39;annots&#39;</span><span class=\"p\">,</span> <span class=\"n\">annots</span><span class=\"p\">)</span>\n    <span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">setprop</span><span class=\"p\">(</span><span class=\"s1\">&#39;target_names&#39;</span><span class=\"p\">,</span> <span class=\"n\">target_names</span><span class=\"p\">)</span>\n    <span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">setprop</span><span class=\"p\">(</span><span class=\"s1\">&#39;config&#39;</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">)</span>\n    <span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">setprop</span><span class=\"p\">(</span><span class=\"s1\">&#39;enc&#39;</span><span class=\"p\">,</span> <span class=\"n\">enc</span><span class=\"p\">)</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">()</span>\n    <span class=\"k\">except</span> <span class=\"ne\">IOError</span><span class=\"p\">:</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">vtool</span> <span class=\"k\">as</span> <span class=\"nn\">vt</span>\n        <span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">ensure_dirs</span><span class=\"p\">()</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">data_type</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;hog&#39;</span><span class=\"p\">:</span>\n            <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"n\">h</span><span class=\"o\">.</span><span class=\"n\">ravel</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">h</span> <span class=\"ow\">in</span> <span class=\"n\">annots</span><span class=\"o\">.</span><span class=\"n\">hog_hog</span><span class=\"p\">])</span>\n            <span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"n\">target</span>\n            <span class=\"c1\"># Save data where dataset expects it to be</span>\n            <span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"p\">,</span> <span class=\"n\">metadata</span><span class=\"p\">,</span> <span class=\"n\">data_per_label</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">chip_gen</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">depc_annot</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;chips&#39;</span><span class=\"p\">,</span> <span class=\"n\">annots</span><span class=\"o\">.</span><span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"s1\">&#39;img&#39;</span><span class=\"p\">,</span>\n                                          <span class=\"n\">eager</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"p\">)</span>\n            <span class=\"n\">iter_</span> <span class=\"o\">=</span> <span class=\"nb\">iter</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ProgIter</span><span class=\"p\">(</span><span class=\"n\">chip_gen</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"o\">=</span><span class=\"n\">length</span><span class=\"p\">,</span> <span class=\"n\">lbl</span><span class=\"o\">=</span><span class=\"s1\">&#39;load chip&#39;</span><span class=\"p\">))</span>\n            <span class=\"n\">shape</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">length</span><span class=\"p\">,)</span> <span class=\"o\">+</span> <span class=\"n\">data_shape</span>\n            <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">fromiter_nd</span><span class=\"p\">(</span><span class=\"n\">iter_</span><span class=\"p\">,</span> <span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"n\">shape</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">uint8</span><span class=\"p\">)</span>  <span class=\"c1\"># NOQA</span>\n            <span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"n\">target</span>\n            <span class=\"c1\"># Save data where dataset expects it to be</span>\n            <span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"p\">,</span> <span class=\"n\">metadata</span><span class=\"p\">,</span> <span class=\"n\">data_per_label</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis_cnn.dataset</span> <span class=\"k\">import</span> <span class=\"n\">stratified_label_shuffle_split</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">has_split</span><span class=\"p\">(</span><span class=\"s1\">&#39;learn&#39;</span><span class=\"p\">):</span>\n        <span class=\"n\">nids</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">metadata</span><span class=\"p\">[</span><span class=\"s1\">&#39;nids&#39;</span><span class=\"p\">])</span>\n        <span class=\"c1\"># Partition into a testing and training dataset</span>\n        <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">labels</span>\n        <span class=\"n\">train_idx</span><span class=\"p\">,</span> <span class=\"n\">test_idx</span> <span class=\"o\">=</span> <span class=\"n\">stratified_label_shuffle_split</span><span class=\"p\">(</span>\n            <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">nids</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"o\">.</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">rng</span><span class=\"o\">=</span><span class=\"mi\">22019</span><span class=\"p\">)</span>\n        <span class=\"n\">nids_train</span> <span class=\"o\">=</span> <span class=\"n\">nids</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">train_idx</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"n\">y_train</span> <span class=\"o\">=</span> <span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">train_idx</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Partition training into learning and validation</span>\n        <span class=\"n\">learn_idx</span><span class=\"p\">,</span> <span class=\"n\">valid_idx</span> <span class=\"o\">=</span> <span class=\"n\">stratified_label_shuffle_split</span><span class=\"p\">(</span>\n            <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">nids_train</span><span class=\"p\">,</span>\n            <span class=\"p\">[</span><span class=\"o\">.</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">y_idx</span><span class=\"o\">=</span><span class=\"n\">train_idx</span><span class=\"p\">,</span> <span class=\"n\">rng</span><span class=\"o\">=</span><span class=\"mi\">90120</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">intersect1d</span><span class=\"p\">(</span><span class=\"n\">learn_idx</span><span class=\"p\">,</span> <span class=\"n\">test_idx</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n        <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">intersect1d</span><span class=\"p\">(</span><span class=\"n\">valid_idx</span><span class=\"p\">,</span> <span class=\"n\">test_idx</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n        <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">intersect1d</span><span class=\"p\">(</span><span class=\"n\">learn_idx</span><span class=\"p\">,</span> <span class=\"n\">valid_idx</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n        <span class=\"k\">if</span> <span class=\"n\">data_type</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;hog&#39;</span><span class=\"p\">:</span>\n            <span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">add_split</span><span class=\"p\">(</span><span class=\"s1\">&#39;train&#39;</span><span class=\"p\">,</span> <span class=\"n\">train_idx</span><span class=\"p\">)</span>\n        <span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">add_split</span><span class=\"p\">(</span><span class=\"s1\">&#39;test&#39;</span><span class=\"p\">,</span> <span class=\"n\">test_idx</span><span class=\"p\">)</span>\n        <span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">add_split</span><span class=\"p\">(</span><span class=\"s1\">&#39;learn&#39;</span><span class=\"p\">,</span> <span class=\"n\">learn_idx</span><span class=\"p\">)</span>\n        <span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">add_split</span><span class=\"p\">(</span><span class=\"s1\">&#39;valid&#39;</span><span class=\"p\">,</span> <span class=\"n\">valid_idx</span><span class=\"p\">)</span>\n        <span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">clear_cache</span><span class=\"p\">(</span><span class=\"s1\">&#39;full&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">data_type</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;hog&#39;</span><span class=\"p\">:</span>\n        <span class=\"c1\"># hack</span>\n        <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">labels</span>\n        <span class=\"n\">nids</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">metadata</span><span class=\"p\">[</span><span class=\"s1\">&#39;nids&#39;</span><span class=\"p\">])</span>\n        <span class=\"n\">train_idx</span><span class=\"p\">,</span> <span class=\"n\">test_idx</span> <span class=\"o\">=</span> <span class=\"n\">stratified_label_shuffle_split</span><span class=\"p\">(</span>\n            <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">nids</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"o\">.</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">rng</span><span class=\"o\">=</span><span class=\"mi\">22019</span><span class=\"p\">)</span>\n        <span class=\"n\">nids_train</span> <span class=\"o\">=</span> <span class=\"n\">nids</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">train_idx</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"n\">y_train</span> <span class=\"o\">=</span> <span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">train_idx</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Partition training into learning and validation</span>\n        <span class=\"n\">learn_idx</span><span class=\"p\">,</span> <span class=\"n\">valid_idx</span> <span class=\"o\">=</span> <span class=\"n\">stratified_label_shuffle_split</span><span class=\"p\">(</span>\n            <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">nids_train</span><span class=\"p\">,</span>\n            <span class=\"p\">[</span><span class=\"o\">.</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">y_idx</span><span class=\"o\">=</span><span class=\"n\">train_idx</span><span class=\"p\">,</span> <span class=\"n\">rng</span><span class=\"o\">=</span><span class=\"mi\">90120</span><span class=\"p\">)</span>\n        <span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">_split_idxs</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">_split_idxs</span><span class=\"p\">[</span><span class=\"s1\">&#39;learn&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">learn_idx</span>\n        <span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">_split_idxs</span><span class=\"p\">[</span><span class=\"s1\">&#39;valid&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">valid_idx</span>\n        <span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">_split_idxs</span><span class=\"p\">[</span><span class=\"s1\">&#39;train&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">train_idx</span>\n        <span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">_split_idxs</span><span class=\"p\">[</span><span class=\"s1\">&#39;test&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">test_idx</span>\n\n    <span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">ensure_symlinked</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">dataset</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_shark_labels_and_metadata\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts.classify_shark.get_shark_labels_and_metadata\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">get_shark_labels_and_metadata</span><span class=\"p\">(</span><span class=\"n\">target_type</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">ibs</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    &gt;&gt;&gt; from ibeis.scripts.classify_shark import *  # NOQA</span>\n<span class=\"sd\">    &gt;&gt;&gt; target_type = &#39;multiclass3&#39;</span>\n<span class=\"sd\">    &gt;&gt;&gt; data_type = &#39;hog&#39;</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">ibeis</span>\n    <span class=\"k\">if</span> <span class=\"n\">ibs</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">opendb</span><span class=\"p\">(</span><span class=\"s1\">&#39;WS_ALL&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">config</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"c1\">#&#39;dim_size&#39;: (256, 256),</span>\n            <span class=\"s1\">&#39;dim_size&#39;</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">224</span><span class=\"p\">,</span> <span class=\"mi\">224</span><span class=\"p\">),</span>\n            <span class=\"s1\">&#39;resize_dim&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;wh&#39;</span>\n        <span class=\"p\">}</span>\n    <span class=\"n\">all_annots</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">annots</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"p\">)</span>\n\n    <span class=\"n\">isempty</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">not_list</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">lmap</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">,</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">images</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">aids</span><span class=\"p\">))</span>\n    <span class=\"c1\">#if False:</span>\n    <span class=\"c1\">#    x = ibs.images().compress(isempty)</span>\n    <span class=\"n\">num_empty_images</span> <span class=\"o\">=</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">isempty</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Images without annotations: </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">num_empty_images</span><span class=\"p\">,))</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Building labels for </span><span class=\"si\">%r</span><span class=\"s1\"> annotations from </span><span class=\"si\">%r</span><span class=\"s1\"> images&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span>\n        <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">all_annots</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">unique</span><span class=\"p\">(</span><span class=\"n\">all_annots</span><span class=\"o\">.</span><span class=\"n\">gids</span><span class=\"p\">))))</span>\n\n    <span class=\"n\">TARGET_TYPE</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;binary&#39;</span>\n    <span class=\"c1\">#TARGET_TYPE = &#39;multiclass3&#39;</span>\n    <span class=\"k\">if</span> <span class=\"n\">target_type</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">target_type</span> <span class=\"o\">=</span> <span class=\"n\">TARGET_TYPE</span>\n\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.scripts</span> <span class=\"k\">import</span> <span class=\"n\">getshark</span>\n    <span class=\"n\">category_tags</span> <span class=\"o\">=</span> <span class=\"n\">getshark</span><span class=\"o\">.</span><span class=\"n\">get_injur_categories</span><span class=\"p\">(</span><span class=\"n\">all_annots</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Base Category Tags tags&#39;</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr3</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dict_hist</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">category_tags</span><span class=\"p\">))))</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Base Co-Occurrence Freq&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">co_occur1</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">tag_coocurrence</span><span class=\"p\">(</span><span class=\"n\">category_tags</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr3</span><span class=\"p\">(</span><span class=\"n\">co_occur1</span><span class=\"p\">))</span>\n\n    <span class=\"n\">ntags_list</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">lmap</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">,</span> <span class=\"n\">category_tags</span><span class=\"p\">))</span>\n    <span class=\"n\">is_no_tag</span> <span class=\"o\">=</span> <span class=\"n\">ntags_list</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n    <span class=\"n\">is_single_tag</span> <span class=\"o\">=</span> <span class=\"n\">ntags_list</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n    <span class=\"n\">is_multi_tag</span> <span class=\"o\">=</span> <span class=\"n\">ntags_list</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">target_type</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;binary&#39;</span><span class=\"p\">:</span>\n        <span class=\"n\">regex_map</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;injur-.*&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;injured&#39;</span><span class=\"p\">),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;healthy&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;healthy&#39;</span><span class=\"p\">),</span>\n        <span class=\"p\">]</span>\n    <span class=\"k\">elif</span> <span class=\"n\">target_type</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;multiclass3&#39;</span><span class=\"p\">:</span>\n        <span class=\"n\">regex_map</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;injur-trunc&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;injur-trunc&#39;</span><span class=\"p\">),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;injur-nicks&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;injur-trunc&#39;</span><span class=\"p\">),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;injur-scar&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;injur-scar&#39;</span><span class=\"p\">),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;injur-bite&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;injur-scar&#39;</span><span class=\"p\">),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;injur-gill&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;injur-scar&#39;</span><span class=\"p\">),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;injur-other&#39;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;injur-dead&#39;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;healthy&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;healthy&#39;</span><span class=\"p\">),</span>\n        <span class=\"p\">]</span>\n    <span class=\"k\">elif</span> <span class=\"n\">target_type</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;multiclassX&#39;</span><span class=\"p\">:</span>\n        <span class=\"n\">regex_map</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;injur-trunc&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;injur-trunc&#39;</span><span class=\"p\">),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;healthy&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;healthy&#39;</span><span class=\"p\">),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;injur-.*&#39;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">),</span>\n        <span class=\"p\">]</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s1\">&#39;Unknown target_type=</span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">target_type</span><span class=\"p\">,))</span>\n\n    <span class=\"n\">tag_vocab</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flat_unique</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">category_tags</span><span class=\"p\">)</span>\n    <span class=\"n\">alias_map</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">build_alias_map</span><span class=\"p\">(</span><span class=\"n\">regex_map</span><span class=\"p\">,</span> <span class=\"n\">tag_vocab</span><span class=\"p\">)</span>\n    <span class=\"n\">unmapped</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">tag_vocab</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">alias_map</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;unmapped = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">unmapped</span><span class=\"p\">,))</span>\n    <span class=\"n\">category_tags2</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">alias_tags</span><span class=\"p\">(</span><span class=\"n\">category_tags</span><span class=\"p\">,</span> <span class=\"n\">alias_map</span><span class=\"p\">)</span>\n\n    <span class=\"n\">ntags_list</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">lmap</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">,</span> <span class=\"n\">category_tags2</span><span class=\"p\">))</span>\n    <span class=\"n\">is_no_tag</span> <span class=\"o\">=</span> <span class=\"n\">ntags_list</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n    <span class=\"n\">is_single_tag</span> <span class=\"o\">=</span> <span class=\"n\">ntags_list</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n    <span class=\"n\">is_multi_tag</span> <span class=\"o\">=</span> <span class=\"n\">ntags_list</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Cleaned tags&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">hist</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">tag_hist</span><span class=\"p\">(</span><span class=\"n\">category_tags2</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr3</span><span class=\"p\">(</span><span class=\"n\">hist</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># Get tag co-occurrence</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Co-Occurrence Freq&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">co_occur</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">tag_coocurrence</span><span class=\"p\">(</span><span class=\"n\">category_tags2</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr3</span><span class=\"p\">(</span><span class=\"n\">co_occur</span><span class=\"p\">))</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Co-Occurrence Percent&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">co_occur_percent</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">odict</span><span class=\"p\">([(</span><span class=\"n\">keys</span><span class=\"p\">,</span>  <span class=\"p\">[</span><span class=\"mi\">100</span> <span class=\"o\">*</span> <span class=\"n\">val</span> <span class=\"o\">/</span> <span class=\"n\">hist</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"n\">keys</span><span class=\"p\">])</span> <span class=\"k\">for</span>\n                                 <span class=\"n\">keys</span><span class=\"p\">,</span> <span class=\"n\">val</span> <span class=\"ow\">in</span> <span class=\"n\">co_occur</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr3</span><span class=\"p\">(</span><span class=\"n\">co_occur_percent</span><span class=\"p\">,</span> <span class=\"n\">precision</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">nl</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n\n    <span class=\"n\">multi_annots</span> <span class=\"o\">=</span> <span class=\"n\">all_annots</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">is_multi_tag</span><span class=\"p\">)</span>  <span class=\"c1\"># NOQA</span>\n    <span class=\"c1\">#ibs.set_image_imagesettext(multi_annots.gids, [&#39;MultiTaged&#39;] * is_multi_tag.sum())</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;can</span><span class=\"se\">\\&#39;</span><span class=\"s1\">t use </span><span class=\"si\">%r</span><span class=\"s1\"> annots due to no labels&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">is_no_tag</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(),))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;can</span><span class=\"se\">\\&#39;</span><span class=\"s1\">t use </span><span class=\"si\">%r</span><span class=\"s1\"> annots due to inconsistent labels&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">is_multi_tag</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(),))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;will use </span><span class=\"si\">%r</span><span class=\"s1\"> annots with consistent labels&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">is_single_tag</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(),))</span>\n\n    <span class=\"n\">annot_tags</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">category_tags2</span><span class=\"p\">,</span> <span class=\"n\">is_single_tag</span><span class=\"p\">)</span>\n    <span class=\"n\">annots</span> <span class=\"o\">=</span> <span class=\"n\">all_annots</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">is_single_tag</span><span class=\"p\">)</span>\n    <span class=\"n\">annot_tag_hist</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dict_hist</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">annot_tags</span><span class=\"p\">))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Final Annot Tags&#39;</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr3</span><span class=\"p\">(</span><span class=\"n\">annot_tag_hist</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># target_names = [&#39;healthy&#39;, &#39;injured&#39;]</span>\n    <span class=\"n\">enc</span> <span class=\"o\">=</span> <span class=\"n\">preprocessing</span><span class=\"o\">.</span><span class=\"n\">LabelEncoder</span><span class=\"p\">()</span>\n    <span class=\"n\">enc</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">unique</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">annot_tags</span><span class=\"p\">)))</span>\n    <span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"n\">enc</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">annot_tags</span><span class=\"p\">))</span>\n    <span class=\"n\">target_names</span> <span class=\"o\">=</span> <span class=\"n\">enc</span><span class=\"o\">.</span><span class=\"n\">classes_</span>\n\n    <span class=\"n\">metadata</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">&#39;aids&#39;</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">annots</span><span class=\"o\">.</span><span class=\"n\">aids</span><span class=\"p\">),</span>\n        <span class=\"s1\">&#39;nids&#39;</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">annots</span><span class=\"o\">.</span><span class=\"n\">nids</span><span class=\"p\">),</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">tup</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">annots</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"n\">target_names</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">metadata</span><span class=\"p\">,</span> <span class=\"n\">enc</span>\n    <span class=\"k\">return</span> <span class=\"n\">tup</span></div>\n\n\n<div class=\"viewcode-block\" id=\"ClfProblem\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts.classify_shark.ClfProblem\">[docs]</a><span class=\"nd\">@ut</span><span class=\"o\">.</span><span class=\"n\">reloadable_class</span>\n<span class=\"k\">class</span> <span class=\"nc\">ClfProblem</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; Harness for researching a classification problem &quot;&quot;&quot;</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">problem</span><span class=\"p\">,</span> <span class=\"n\">ds</span><span class=\"p\">):</span>\n        <span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"n\">ds</span>\n\n<div class=\"viewcode-block\" id=\"ClfProblem.print_support_info\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts.classify_shark.ClfProblem.print_support_info\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">print_support_info</span><span class=\"p\">(</span><span class=\"n\">problem</span><span class=\"p\">):</span>\n        <span class=\"n\">enc</span> <span class=\"o\">=</span> <span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">enc</span>\n        <span class=\"n\">target_labels</span> <span class=\"o\">=</span> <span class=\"n\">enc</span><span class=\"o\">.</span><span class=\"n\">inverse_transform</span><span class=\"p\">(</span><span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">target</span><span class=\"p\">)</span>\n        <span class=\"n\">label_hist</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dict_hist</span><span class=\"p\">(</span><span class=\"n\">target_labels</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;support hist&#39;</span> <span class=\"o\">+</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr3</span><span class=\"p\">(</span><span class=\"n\">label_hist</span><span class=\"p\">))</span></div>\n\n<div class=\"viewcode-block\" id=\"ClfProblem.fit_new_classifier\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts.classify_shark.ClfProblem.fit_new_classifier\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">fit_new_classifier</span><span class=\"p\">(</span><span class=\"n\">problem</span><span class=\"p\">,</span> <span class=\"n\">train_idx</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        References:</span>\n<span class=\"sd\">            http://leon.bottou.org/research/stochastic</span>\n<span class=\"sd\">            http://blog.explainmydata.com/2012/06/ntrain-24853-ntest-25147-ncorrupt.html</span>\n<span class=\"sd\">            http://scikit-learn.org/stable/modules/svm.html#svm-classification</span>\n<span class=\"sd\">            http://scikit-learn.org/stable/modules/grid_search.html</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[problem] train classifier on </span><span class=\"si\">%d</span><span class=\"s1\"> data points&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">train_idx</span><span class=\"p\">)))</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">data</span>\n        <span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">target</span>\n        <span class=\"n\">x_train</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">train_idx</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"n\">y_train</span> <span class=\"o\">=</span> <span class=\"n\">target</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">train_idx</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"n\">clf</span> <span class=\"o\">=</span> <span class=\"n\">sklearn</span><span class=\"o\">.</span><span class=\"n\">svm</span><span class=\"o\">.</span><span class=\"n\">SVC</span><span class=\"p\">(</span><span class=\"n\">kernel</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"s1\">&#39;linear&#39;</span><span class=\"p\">),</span> <span class=\"n\">C</span><span class=\"o\">=.</span><span class=\"mi\">17</span><span class=\"p\">,</span> <span class=\"n\">class_weight</span><span class=\"o\">=</span><span class=\"s1\">&#39;balanced&#39;</span><span class=\"p\">,</span>\n                              <span class=\"n\">decision_function_shape</span><span class=\"o\">=</span><span class=\"s1\">&#39;ovr&#39;</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># C, penalty, loss</span>\n        <span class=\"c1\">#param_grid = {&#39;C&#39;: [1e3, 5e3, 1e4, 5e4, 1e5],</span>\n        <span class=\"c1\">#              &#39;gamma&#39;: [0.0001, 0.0005, 0.001, 0.005, 0.01, 0.1], }</span>\n        <span class=\"c1\">#param_grid = {&#39;C&#39;: [1e3, 5e3, 1e4, 5e4, 1e5],</span>\n        <span class=\"c1\">#              &#39;gamma&#39;: [0.0001, 0.0005, 0.001, 0.005, 0.01, 0.1], }</span>\n        <span class=\"c1\">#clf = GridSearchCV(SVC(kernel=&#39;rbf&#39;, class_weight=&#39;balanced&#39;), param_grid)</span>\n        <span class=\"c1\">#clf = clf.fit(X_train_pca, y_train)</span>\n        <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">x_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">clf</span></div>\n\n<div class=\"viewcode-block\" id=\"ClfProblem.fit_new_linear_svm\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts.classify_shark.ClfProblem.fit_new_linear_svm\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">fit_new_linear_svm</span><span class=\"p\">(</span><span class=\"n\">problem</span><span class=\"p\">,</span> <span class=\"n\">train_idx</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[problem] train classifier on </span><span class=\"si\">%d</span><span class=\"s1\"> data points&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">train_idx</span><span class=\"p\">)))</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">data</span>\n        <span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">target</span>\n        <span class=\"n\">x_train</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">train_idx</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"n\">y_train</span> <span class=\"o\">=</span> <span class=\"n\">target</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">train_idx</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"n\">clf</span> <span class=\"o\">=</span> <span class=\"n\">sklearn</span><span class=\"o\">.</span><span class=\"n\">svm</span><span class=\"o\">.</span><span class=\"n\">SVC</span><span class=\"p\">(</span><span class=\"n\">kernel</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"s1\">&#39;linear&#39;</span><span class=\"p\">),</span> <span class=\"n\">C</span><span class=\"o\">=.</span><span class=\"mi\">17</span><span class=\"p\">,</span> <span class=\"n\">class_weight</span><span class=\"o\">=</span><span class=\"s1\">&#39;balanced&#39;</span><span class=\"p\">,</span>\n                              <span class=\"n\">decision_function_shape</span><span class=\"o\">=</span><span class=\"s1\">&#39;ovr&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">x_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"ClfProblem.gridsearch_linear_svm_params\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts.classify_shark.ClfProblem.gridsearch_linear_svm_params\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">gridsearch_linear_svm_params</span><span class=\"p\">(</span><span class=\"n\">problem</span><span class=\"p\">,</span> <span class=\"n\">train_idx</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.scripts.classify_shark import *  # NOQA</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.scripts import classify_shark</span>\n<span class=\"sd\">            &gt;&gt;&gt; ds = classify_shark.get_sharks_dataset(&#39;binary&#39;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; problem = classify_shark.ClfProblem(ds)</span>\n<span class=\"sd\">            &gt;&gt;&gt; problem.print_support_info()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"kn\">import</span> <span class=\"nn\">sklearn.model_selection</span>\n        <span class=\"k\">except</span> <span class=\"ne\">ImportError</span><span class=\"p\">:</span>\n            <span class=\"k\">pass</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">sklearn.grid_search</span>\n\n        <span class=\"k\">with</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">Timer</span><span class=\"p\">(</span><span class=\"s1\">&#39;cv&#39;</span><span class=\"p\">):</span>\n            <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">data</span>\n            <span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">target</span>\n\n            <span class=\"k\">def</span> <span class=\"nf\">stratified_sample_idxs_unbalanced</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">):</span>\n                <span class=\"n\">rng</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">RandomState</span><span class=\"p\">(</span><span class=\"mi\">43</span><span class=\"p\">)</span>\n                <span class=\"n\">sample</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n                <span class=\"k\">for</span> <span class=\"n\">label</span> <span class=\"ow\">in</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">unique</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"p\">):</span>\n                    <span class=\"n\">target_idxs</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">target</span> <span class=\"o\">==</span> <span class=\"n\">label</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                    <span class=\"n\">subset_size</span> <span class=\"o\">=</span> <span class=\"n\">size</span>\n                    <span class=\"n\">rand_idx</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">random_indexes</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">target_idxs</span><span class=\"p\">),</span> <span class=\"n\">subset_size</span><span class=\"p\">,</span> <span class=\"n\">rng</span><span class=\"o\">=</span><span class=\"n\">rng</span><span class=\"p\">)</span>\n                    <span class=\"n\">sample_idx</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">target_idxs</span><span class=\"p\">,</span> <span class=\"n\">rand_idx</span><span class=\"p\">)</span>\n                    <span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">sample_idx</span><span class=\"p\">)</span>\n                <span class=\"n\">sample_idx</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"p\">)))</span>\n                <span class=\"k\">return</span> <span class=\"n\">sample_idx</span>\n\n            <span class=\"n\">train_idx</span> <span class=\"o\">=</span> <span class=\"n\">stratified_sample_idxs_unbalanced</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"mi\">4000</span><span class=\"p\">)</span>\n\n            <span class=\"n\">x_train</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">train_idx</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"n\">y_train</span> <span class=\"o\">=</span> <span class=\"n\">target</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">train_idx</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"n\">param_grid</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                <span class=\"c1\">#&#39;C&#39;: [1, .5, .1, 5, 10, 100],</span>\n                <span class=\"c1\">#&#39;C&#39;: [1, 1e-1, 1e-2, 1e-3]</span>\n                <span class=\"c1\">#&#39;C&#39;: [1, 1e-1, 1e-2, 1e-3]</span>\n                <span class=\"c1\">#&#39;C&#39;: np.linspace(1, 1e-5, 15)</span>\n                <span class=\"c1\">#&#39;C&#39;: np.linspace(.2, 1e-5, 15)</span>\n                <span class=\"c1\">#&#39;C&#39;: np.logspace(np.log10(1e-3), np.log10(.1), 30, base=10)</span>\n                <span class=\"c1\">#&#39;C&#39;: np.linspace(.1, .3, 20),</span>\n                <span class=\"c1\">#&#39;C&#39;: np.linspace(1.0, .22, 20),</span>\n                <span class=\"s1\">&#39;C&#39;</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">01</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">),</span>\n                <span class=\"c1\">#&#39;loss&#39;: [&#39;l2&#39;, &#39;l1&#39;],</span>\n                <span class=\"c1\">#&#39;penalty&#39;: [&#39;l2&#39;, &#39;l1&#39;],</span>\n            <span class=\"p\">}</span>\n            <span class=\"n\">_clf</span> <span class=\"o\">=</span> <span class=\"n\">sklearn</span><span class=\"o\">.</span><span class=\"n\">svm</span><span class=\"o\">.</span><span class=\"n\">SVC</span><span class=\"p\">(</span><span class=\"n\">kernel</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"s1\">&#39;linear&#39;</span><span class=\"p\">),</span> <span class=\"n\">C</span><span class=\"o\">=.</span><span class=\"mi\">17</span><span class=\"p\">,</span> <span class=\"n\">class_weight</span><span class=\"o\">=</span><span class=\"s1\">&#39;balanced&#39;</span><span class=\"p\">,</span>\n                                   <span class=\"n\">decision_function_shape</span><span class=\"o\">=</span><span class=\"s1\">&#39;ovr&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">clf</span> <span class=\"o\">=</span> <span class=\"n\">sklearn</span><span class=\"o\">.</span><span class=\"n\">grid_search</span><span class=\"o\">.</span><span class=\"n\">GridSearchCV</span><span class=\"p\">(</span><span class=\"n\">_clf</span><span class=\"p\">,</span> <span class=\"n\">param_grid</span><span class=\"p\">,</span> <span class=\"n\">n_jobs</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">,</span>\n                                                   <span class=\"n\">iid</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">cv</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n            <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">x_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n            <span class=\"c1\">#(NOTE grid.predict only uses the best estimator)</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;clf.best_params_ = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">best_params_</span><span class=\"p\">,))</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Best parameters set found on development set:&quot;</span><span class=\"p\">)</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">best_params_</span><span class=\"p\">)</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Grid scores on development set:&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">params</span><span class=\"p\">,</span> <span class=\"n\">mean_score</span><span class=\"p\">,</span> <span class=\"n\">scores</span> <span class=\"ow\">in</span> <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">grid_scores_</span><span class=\"p\">:</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">%0.3f</span><span class=\"s2\"> (+/-</span><span class=\"si\">%0.03f</span><span class=\"s2\">) for </span><span class=\"si\">%r</span><span class=\"s2\">&quot;</span>\n                      <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">mean_score</span><span class=\"p\">,</span> <span class=\"n\">scores</span><span class=\"o\">.</span><span class=\"n\">std</span><span class=\"p\">()</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"p\">))</span>\n            <span class=\"n\">xdata</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"n\">t</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s1\">&#39;C&#39;</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">grid_scores_</span><span class=\"p\">])</span>\n            <span class=\"n\">ydata</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"n\">t</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">grid_scores_</span><span class=\"p\">])</span>\n\n            <span class=\"n\">y_data_std</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"n\">t</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">std</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">grid_scores_</span><span class=\"p\">])</span>\n            <span class=\"n\">ydata_mean</span> <span class=\"o\">=</span> <span class=\"n\">ydata</span>\n            <span class=\"n\">y_data_max</span> <span class=\"o\">=</span> <span class=\"n\">ydata_mean</span> <span class=\"o\">+</span> <span class=\"n\">y_data_std</span>\n            <span class=\"n\">y_data_min</span> <span class=\"o\">=</span> <span class=\"n\">ydata_mean</span> <span class=\"o\">-</span> <span class=\"n\">y_data_std</span>\n\n            <span class=\"c1\">#pt.plot(xdata, ydata, &#39;-rx&#39;)</span>\n            <span class=\"kn\">import</span> <span class=\"nn\">plottool</span> <span class=\"k\">as</span> <span class=\"nn\">pt</span>\n            <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">ensure_fnum</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">))</span>\n            <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">gca</span><span class=\"p\">()</span>\n            <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">fill_between</span><span class=\"p\">(</span><span class=\"n\">xdata</span><span class=\"p\">,</span> <span class=\"n\">y_data_min</span><span class=\"p\">,</span> <span class=\"n\">y_data_max</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"o\">=.</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">LIGHT_BLUE</span><span class=\"p\">)</span>\n            <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">draw_hist_subbin_maxima</span><span class=\"p\">(</span><span class=\"n\">ydata</span><span class=\"p\">,</span> <span class=\"n\">xdata</span><span class=\"p\">)</span></div>\n\n            <span class=\"c1\">#y_data_std = np.array([t[2].std() for t in grid.grid_scores_])</span>\n            <span class=\"c1\">#ydata_mean = c_ydata</span>\n            <span class=\"c1\">#y_data_max = ydata_mean + y_data_std</span>\n            <span class=\"c1\">#y_data_min = ydata_mean - y_data_std</span>\n            <span class=\"c1\">##import plottool as pt</span>\n            <span class=\"c1\">##pt.figure(fnum=pt.ensure_fnum(None))</span>\n            <span class=\"c1\">#ax = pt.gca()</span>\n            <span class=\"c1\">#ax.fill_between(c_xdata, c_ydata, y_data_max, alpha=.2, color=pt.LIGHT_BLUE)</span>\n            <span class=\"c1\">#ax.fill_between(c_xdata, c_ydata, y_data_min, alpha=.2, color=pt.LIGHT_BLUE)</span>\n            <span class=\"c1\">##pt.figure(fnum=pt.ensure_fnum(None))</span>\n            <span class=\"c1\">#hist = c_ydata</span>\n            <span class=\"c1\">#centers = c_xdata</span>\n            <span class=\"c1\">#pt.draw_hist_subbin_maxima(c_ydata, c_xdata, maxima_thresh=None, remove_endpoints=False)</span>\n\n            <span class=\"c1\">#clf.best_params_ = {u&#39;C&#39;: 0.07143785714285722}</span>\n            <span class=\"c1\">#Best parameters set found on development set:</span>\n            <span class=\"c1\">#{u&#39;C&#39;: 0.07143785714285722}</span>\n            <span class=\"c1\">#Grid scores on development set:</span>\n            <span class=\"c1\">#0.729 (+/-0.016) for {u&#39;C&#39;: 1.0}</span>\n            <span class=\"c1\">#0.729 (+/-0.019) for {u&#39;C&#39;: 0.92857214285714285}</span>\n            <span class=\"c1\">#0.733 (+/-0.017) for {u&#39;C&#39;: 0.85714428571428569}</span>\n            <span class=\"c1\">#0.734 (+/-0.015) for {u&#39;C&#39;: 0.78571642857142865}</span>\n            <span class=\"c1\">#0.736 (+/-0.016) for {u&#39;C&#39;: 0.71428857142857138}</span>\n            <span class=\"c1\">#0.739 (+/-0.020) for {u&#39;C&#39;: 0.64286071428571434}</span>\n            <span class=\"c1\">#0.742 (+/-0.020) for {u&#39;C&#39;: 0.57143285714285719}</span>\n            <span class=\"c1\">#0.743 (+/-0.021) for {u&#39;C&#39;: 0.50000500000000003}</span>\n            <span class=\"c1\">#0.746 (+/-0.023) for {u&#39;C&#39;: 0.42857714285714288}</span>\n            <span class=\"c1\">#0.749 (+/-0.023) for {u&#39;C&#39;: 0.35714928571428572}</span>\n            <span class=\"c1\">#0.755 (+/-0.025) for {u&#39;C&#39;: 0.28572142857142857}</span>\n            <span class=\"c1\">#0.760 (+/-0.027) for {u&#39;C&#39;: 0.21429357142857142}</span>\n            <span class=\"c1\">#0.762 (+/-0.025) for {u&#39;C&#39;: 0.14286571428571437}</span>\n            <span class=\"c1\">#0.770 (+/-0.036) for {u&#39;C&#39;: 0.07143785714285722}</span>\n            <span class=\"c1\">#0.664 (+/-0.031) for {u&#39;C&#39;: 1.0000000000000001e-05}</span>\n\n            <span class=\"c1\">#0.774 (+/-0.039) for {u&#39;C&#39;: 0.017433288221999882}</span>\n            <span class=\"c1\">#0.775 (+/-0.039) for {u&#39;C&#39;: 0.020433597178569417}</span>\n            <span class=\"c1\">#0.774 (+/-0.039) for {u&#39;C&#39;: 0.023950266199874861}</span>\n            <span class=\"c1\">#0.777 (+/-0.038) for {u&#39;C&#39;: 0.02807216203941177}</span>\n            <span class=\"c1\">#0.775 (+/-0.036) for {u&#39;C&#39;: 0.032903445623126679}</span>\n            <span class=\"c1\">#0.773 (+/-0.033) for {u&#39;C&#39;: 0.038566204211634723}</span>\n\n            <span class=\"c1\">#0.722 (+/-0.060) for {u&#39;C&#39;: 0.001}</span>\n            <span class=\"c1\">#0.770 (+/-0.047) for {u&#39;C&#39;: 0.01}</span>\n            <span class=\"c1\">#0.775 (+/-0.047) for {u&#39;C&#39;: 0.1}</span>\n            <span class=\"c1\">#0.774 (+/-0.047) for {u&#39;C&#39;: 0.12}</span>\n            <span class=\"c1\">#0.773 (+/-0.045) for {u&#39;C&#39;: 0.15}</span>\n            <span class=\"c1\">#0.773 (+/-0.046) for {u&#39;C&#39;: 0.17}</span>\n            <span class=\"c1\">#0.772 (+/-0.047) for {u&#39;C&#39;: 0.2}</span>\n            <span class=\"c1\">#0.760 (+/-0.043) for {u&#39;C&#39;: 0.5}</span>\n            <span class=\"c1\">#0.748 (+/-0.043) for {u&#39;C&#39;: 1.0}</span>\n            <span class=\"c1\">#0.707 (+/-0.043) for {u&#39;C&#39;: 100}</span>\n            <span class=\"c1\">#0.702 (+/-0.047) for {u&#39;C&#39;: 1000}</span>\n\n<div class=\"viewcode-block\" id=\"ClfProblem.classifier_test\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts.classify_shark.ClfProblem.classifier_test\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">classifier_test</span><span class=\"p\">(</span><span class=\"n\">problem</span><span class=\"p\">,</span> <span class=\"n\">clf</span><span class=\"p\">,</span> <span class=\"n\">test_idx</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[problem] test classifier on </span><span class=\"si\">%d</span><span class=\"s1\"> data points&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">test_idx</span><span class=\"p\">),))</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">data</span>\n        <span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">target</span>\n        <span class=\"n\">X_test</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">test_idx</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"n\">y_true</span> <span class=\"o\">=</span> <span class=\"n\">target</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">test_idx</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n        <span class=\"n\">y_conf</span> <span class=\"o\">=</span> <span class=\"n\">predict_svc_ovr</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span>\n        <span class=\"n\">y_pred</span> <span class=\"o\">=</span> <span class=\"n\">y_conf</span><span class=\"o\">.</span><span class=\"n\">argmax</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">ClfSingleResult</span><span class=\"p\">(</span><span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">ds</span><span class=\"p\">,</span> <span class=\"n\">test_idx</span><span class=\"p\">,</span> <span class=\"n\">y_true</span><span class=\"p\">,</span> <span class=\"n\">y_pred</span><span class=\"p\">,</span> <span class=\"n\">y_conf</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span></div>\n\n<div class=\"viewcode-block\" id=\"ClfProblem.stratified_2sample_idxs\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts.classify_shark.ClfProblem.stratified_2sample_idxs\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">stratified_2sample_idxs</span><span class=\"p\">(</span><span class=\"n\">problem</span><span class=\"p\">,</span> <span class=\"n\">frac</span><span class=\"o\">=.</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">split_frac</span><span class=\"o\">=.</span><span class=\"mi\">75</span><span class=\"p\">):</span>\n        <span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">target</span>\n        <span class=\"n\">target_labels</span> <span class=\"o\">=</span> <span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">target_labels</span>\n\n        <span class=\"n\">rng</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">RandomState</span><span class=\"p\">(</span><span class=\"mi\">43</span><span class=\"p\">)</span>\n        <span class=\"n\">train_sample</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">test_sample</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">label</span> <span class=\"ow\">in</span> <span class=\"n\">target_labels</span><span class=\"p\">:</span>\n            <span class=\"n\">target_idxs</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">target</span> <span class=\"o\">==</span> <span class=\"n\">label</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"n\">subset_size</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">target_idxs</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">frac</span><span class=\"p\">)</span>\n            <span class=\"n\">rand_idx</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">random_indexes</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">target_idxs</span><span class=\"p\">),</span> <span class=\"n\">subset_size</span><span class=\"p\">,</span> <span class=\"n\">rng</span><span class=\"o\">=</span><span class=\"n\">rng</span><span class=\"p\">)</span>\n            <span class=\"n\">sample_idx</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">target_idxs</span><span class=\"p\">,</span> <span class=\"n\">rand_idx</span><span class=\"p\">)</span>\n            <span class=\"n\">split</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">sample_idx</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">split_frac</span><span class=\"p\">)</span>\n            <span class=\"n\">train_sample</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">sample_idx</span><span class=\"p\">[</span><span class=\"n\">split</span><span class=\"p\">:])</span>\n            <span class=\"n\">test_sample</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">sample_idx</span><span class=\"p\">[:</span><span class=\"n\">split</span><span class=\"p\">])</span>\n\n        <span class=\"n\">train_idx</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">train_sample</span><span class=\"p\">)))</span>\n        <span class=\"n\">test_idx</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">test_sample</span><span class=\"p\">)))</span>\n        <span class=\"k\">return</span> <span class=\"n\">train_idx</span><span class=\"p\">,</span> <span class=\"n\">test_idx</span></div>\n\n<div class=\"viewcode-block\" id=\"ClfProblem.gen_crossval_idxs\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts.classify_shark.ClfProblem.gen_crossval_idxs\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">gen_crossval_idxs</span><span class=\"p\">(</span><span class=\"n\">problem</span><span class=\"p\">,</span> <span class=\"n\">n_folds</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">):</span>\n        <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">target</span>\n        <span class=\"n\">rng</span> <span class=\"o\">=</span> <span class=\"mi\">43432</span>\n        <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">ds</span><span class=\"p\">,</span> <span class=\"s1\">&#39;nids&#39;</span><span class=\"p\">):</span>\n            <span class=\"c1\"># Ensure that an individual does not appear in both the train</span>\n            <span class=\"c1\"># and the test dataset</span>\n            <span class=\"kn\">from</span> <span class=\"nn\">ibeis_cnn.dataset</span> <span class=\"k\">import</span> <span class=\"n\">stratified_kfold_label_split</span>\n            <span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">nids</span>\n            <span class=\"n\">_iter</span> <span class=\"o\">=</span> <span class=\"n\">stratified_kfold_label_split</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"p\">,</span> <span class=\"n\">n_folds</span><span class=\"o\">=</span><span class=\"n\">n_folds</span><span class=\"p\">,</span> <span class=\"n\">rng</span><span class=\"o\">=</span><span class=\"n\">rng</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">xvalkw</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">n_folds</span><span class=\"o\">=</span><span class=\"n\">n_folds</span><span class=\"p\">,</span> <span class=\"n\">shuffle</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"n\">rng</span><span class=\"p\">)</span>\n            <span class=\"kn\">import</span> <span class=\"nn\">sklearn.cross_validation</span>\n            <span class=\"n\">skf</span> <span class=\"o\">=</span> <span class=\"n\">sklearn</span><span class=\"o\">.</span><span class=\"n\">cross_validation</span><span class=\"o\">.</span><span class=\"n\">StratifiedKFold</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">xvalkw</span><span class=\"p\">)</span>\n            <span class=\"n\">_iter</span> <span class=\"o\">=</span> <span class=\"n\">skf</span>\n            <span class=\"c1\">#import sklearn.model_selection</span>\n            <span class=\"c1\">#skf = sklearn.model_selection.StratifiedKFold(**xvalkw)</span>\n            <span class=\"c1\">#_iter = skf.split(X=np.empty(len(y)), y=y)</span>\n        <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;cross-val test on </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"n\">progiter</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ProgIter</span><span class=\"p\">(</span><span class=\"n\">_iter</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"o\">=</span><span class=\"n\">n_folds</span><span class=\"p\">,</span> <span class=\"n\">lbl</span><span class=\"o\">=</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">train_idx</span><span class=\"p\">,</span> <span class=\"n\">test_idx</span> <span class=\"ow\">in</span> <span class=\"n\">progiter</span><span class=\"p\">:</span>\n            <span class=\"k\">yield</span> <span class=\"n\">train_idx</span><span class=\"p\">,</span> <span class=\"n\">test_idx</span></div></div>\n\n\n<div class=\"viewcode-block\" id=\"ClfSingleResult\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts.classify_shark.ClfSingleResult\">[docs]</a><span class=\"nd\">@ut</span><span class=\"o\">.</span><span class=\"n\">reloadable_class</span>\n<span class=\"k\">class</span> <span class=\"nc\">ClfSingleResult</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Reports the results of a classification problem</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = ClfSingleResult()</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">ds</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">test_idx</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">y_true</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">y_pred</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">y_conf</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"n\">ds</span>\n        <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">test_idx</span> <span class=\"o\">=</span> <span class=\"n\">test_idx</span>\n        <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">y_true</span> <span class=\"o\">=</span> <span class=\"n\">y_true</span>\n        <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">y_pred</span> <span class=\"o\">=</span> <span class=\"n\">y_pred</span>\n        <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">y_conf</span> <span class=\"o\">=</span> <span class=\"n\">y_conf</span>\n\n<div class=\"viewcode-block\" id=\"ClfSingleResult.compile_results\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts.classify_shark.ClfSingleResult.compile_results\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">compile_results</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">):</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n        <span class=\"n\">y_true</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">y_true</span>\n        <span class=\"n\">y_pred</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">y_pred</span>\n        <span class=\"n\">y_conf</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">y_conf</span>\n        <span class=\"n\">test_idx</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">test_idx</span>\n\n        <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">(</span><span class=\"n\">test_idx</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;test_idx&#39;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">target_names</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"n\">y_conf</span>\n        <span class=\"n\">decision</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">y_conf</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">target_names</span><span class=\"p\">)</span>\n        <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">decision</span> <span class=\"o\">=</span> <span class=\"n\">decision</span> <span class=\"o\">/</span> <span class=\"mi\">3</span>\n        <span class=\"n\">easiness</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ziptake</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">decision</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">,</span> <span class=\"n\">y_true</span><span class=\"p\">))</span>\n        <span class=\"n\">columns</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;pred&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;easiness&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">column_data</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">y_pred</span><span class=\"p\">,</span> <span class=\"n\">easiness</span><span class=\"p\">]</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">columns</span><span class=\"p\">,</span> <span class=\"n\">column_data</span><span class=\"p\">))</span>\n        <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"ClfSingleResult.print_report\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts.classify_shark.ClfSingleResult.print_report\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">print_report</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">):</span>\n        <span class=\"n\">report</span> <span class=\"o\">=</span> <span class=\"n\">sklearn</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">classification_report</span><span class=\"p\">(</span>\n            <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">y_true</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">y_pred</span><span class=\"p\">,</span>\n            <span class=\"n\">target_names</span><span class=\"o\">=</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">target_names</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">report</span><span class=\"p\">)</span></div></div>\n\n\n<div class=\"viewcode-block\" id=\"get_model_state\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts.classify_shark.get_model_state\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">get_model_state</span><span class=\"p\">(</span><span class=\"n\">clf</span><span class=\"p\">):</span>\n    <span class=\"n\">model_attr_names</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">a</span> <span class=\"k\">for</span> <span class=\"n\">a</span> <span class=\"ow\">in</span> <span class=\"nb\">dir</span><span class=\"p\">(</span><span class=\"n\">clf</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s1\">&#39;_&#39;</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">&#39;__&#39;</span><span class=\"p\">)</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">model_state</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">clf</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n                   <span class=\"k\">for</span> <span class=\"n\">a</span> <span class=\"ow\">in</span> <span class=\"n\">model_attr_names</span><span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">model_state</span></div>\n\n\n<div class=\"viewcode-block\" id=\"set_model_state\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts.classify_shark.set_model_state\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">set_model_state</span><span class=\"p\">(</span><span class=\"n\">clf</span><span class=\"p\">,</span> <span class=\"n\">model_state</span><span class=\"p\">):</span>\n    <span class=\"n\">attr_names</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">model_state</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n    <span class=\"n\">attr_names1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"s1\">&#39;dual_coef_&#39;</span><span class=\"p\">,</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">attr_names2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"s1\">&#39;coef_&#39;</span><span class=\"p\">,</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">attr_names3</span> <span class=\"o\">=</span> <span class=\"n\">attr_names1</span> <span class=\"o\">+</span> <span class=\"n\">attr_names2</span>\n    <span class=\"n\">attr_namesA</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">isect</span><span class=\"p\">(</span><span class=\"n\">attr_names1</span><span class=\"p\">,</span> <span class=\"n\">attr_names</span><span class=\"p\">)</span>\n    <span class=\"n\">attr_namesB</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">setdiff</span><span class=\"p\">(</span><span class=\"n\">attr_names</span><span class=\"p\">,</span> <span class=\"n\">attr_names3</span><span class=\"p\">)</span>\n    <span class=\"n\">attr_namesC</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">isect</span><span class=\"p\">(</span><span class=\"n\">attr_names2</span><span class=\"p\">,</span> <span class=\"n\">attr_names</span><span class=\"p\">)</span>\n    <span class=\"n\">attr_names_</span> <span class=\"o\">=</span> <span class=\"n\">attr_namesA</span> <span class=\"o\">+</span> <span class=\"n\">attr_namesB</span> <span class=\"o\">+</span> <span class=\"n\">attr_namesC</span>\n    <span class=\"k\">for</span> <span class=\"n\">a</span> <span class=\"ow\">in</span> <span class=\"n\">attr_names_</span><span class=\"p\">:</span>\n        <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">model_state</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">]</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;a = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,))</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"nb\">setattr</span><span class=\"p\">(</span><span class=\"n\">clf</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">AttributeError</span><span class=\"p\">:</span>\n            <span class=\"n\">val2</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">clf</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n            <span class=\"k\">assert</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">(</span><span class=\"n\">val</span> <span class=\"o\">==</span> <span class=\"n\">val2</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"predict_svc_ovr\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts.classify_shark.predict_svc_ovr\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">predict_svc_ovr</span><span class=\"p\">(</span><span class=\"n\">clf</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">classes_</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n        <span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">_validate_for_predict</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n        <span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">_compute_kernel</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)</span>\n        <span class=\"n\">_dec2</span> <span class=\"o\">=</span> <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">_dense_decision_function</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)</span>\n        <span class=\"n\">dec2</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">_dec2</span>\n\n        <span class=\"n\">n_samples</span> <span class=\"o\">=</span> <span class=\"n\">dec2</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">n_classes</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">classes_</span><span class=\"p\">)</span>\n        <span class=\"n\">final</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">((</span><span class=\"n\">n_samples</span><span class=\"p\">,</span> <span class=\"n\">n_classes</span><span class=\"p\">))</span>\n        <span class=\"n\">confidence_max</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">abs</span><span class=\"p\">(</span><span class=\"n\">dec2</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">()),</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">abs</span><span class=\"p\">(</span><span class=\"n\">dec2</span><span class=\"o\">.</span><span class=\"n\">min</span><span class=\"p\">()))</span>\n        <span class=\"n\">norm_conf</span> <span class=\"o\">=</span> <span class=\"p\">((</span><span class=\"n\">dec2</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">/</span> <span class=\"n\">confidence_max</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span>\n        <span class=\"n\">final</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">norm_conf</span>\n        <span class=\"n\">final</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">norm_conf</span>\n        <span class=\"c1\"># output comparable to multiclass version</span>\n        <span class=\"n\">y_conf</span> <span class=\"o\">=</span> <span class=\"n\">final</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Get notion of confidence / probability of decision</span>\n        <span class=\"n\">y_conf</span> <span class=\"o\">=</span> <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">decision_function</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">y_conf</span></div>\n\n\n<div class=\"viewcode-block\" id=\"predict_ws_injury_interim_svm\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts.classify_shark.predict_ws_injury_interim_svm\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">predict_ws_injury_interim_svm</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Returns relative confidence</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"c1\">#&#39;dim_size&#39;: (256, 256),</span>\n        <span class=\"s1\">&#39;dim_size&#39;</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">224</span><span class=\"p\">,</span> <span class=\"mi\">224</span><span class=\"p\">),</span>\n        <span class=\"s1\">&#39;resize_dim&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;wh&#39;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\"># Load the SVM</span>\n    <span class=\"n\">model_fname</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;interim_svc_injur-shark-hog_12559_224x224x3_ldhhxnxo.cPkl&#39;</span>\n    <span class=\"n\">model_url</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://cthulhu.dyn.wildme.io/public/models/</span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">model_fname</span><span class=\"p\">)</span>\n    <span class=\"n\">model_fpath</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">grab_file_url</span><span class=\"p\">(</span><span class=\"n\">model_url</span><span class=\"p\">,</span> <span class=\"n\">check_hash</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">clf</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">load_cPkl</span><span class=\"p\">(</span><span class=\"n\">model_fpath</span><span class=\"p\">)</span>\n\n    <span class=\"n\">annots</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">annots</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"p\">)</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"n\">h</span><span class=\"o\">.</span><span class=\"n\">ravel</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">h</span> <span class=\"ow\">in</span> <span class=\"n\">annots</span><span class=\"o\">.</span><span class=\"n\">hog_hog</span><span class=\"p\">])</span>\n\n    <span class=\"n\">target_names</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;healthy&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;injured&#39;</span><span class=\"p\">]</span>\n    <span class=\"c1\"># confidence = clf.decision_function(data)</span>\n    <span class=\"c1\"># y_conf = predict_svc_ovr(clf, data)</span>\n    <span class=\"n\">scores</span> <span class=\"o\">=</span> <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">decision_function</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n    <span class=\"n\">y_pred</span> <span class=\"o\">=</span> <span class=\"n\">scores</span> <span class=\"o\">&gt;</span> <span class=\"mf\">0.0</span>\n    <span class=\"n\">y_pred</span> <span class=\"o\">=</span> <span class=\"n\">y_pred</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">int64</span><span class=\"p\">)</span>\n    <span class=\"c1\"># y_pred = clf.predict(data)</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">embed</span><span class=\"p\">()</span>\n    <span class=\"n\">pred_nice</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">target_names</span><span class=\"p\">,</span> <span class=\"n\">y_pred</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">pred_nice</span><span class=\"p\">,</span> <span class=\"n\">scores</span><span class=\"p\">))</span></div>\n\n\n<div class=\"viewcode-block\" id=\"shark_svm\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts.classify_shark.shark_svm\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">shark_svm</span><span class=\"p\">():</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    References:</span>\n<span class=\"sd\">        http://scikit-learn.org/stable/model_selection.html</span>\n\n<span class=\"sd\">    TODO:</span>\n<span class=\"sd\">        * Change unreviewed healthy tags to healthy-likely</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.scripts.classify_shark shark_svm --show</span>\n<span class=\"sd\">        python -m ibeis.scripts.classify_shark shark_svm</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.scripts.classify_shark import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; shark_svm()</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.show_if_requested()</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.scripts</span> <span class=\"k\">import</span> <span class=\"n\">classify_shark</span>\n\n    <span class=\"n\">target_type</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;binary&#39;</span>\n    <span class=\"c1\">#target_type = &#39;multiclass3&#39;</span>\n    <span class=\"c1\">#dataset = classify_shark.get_shark_dataset(target_type)</span>\n\n    <span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"n\">classify_shark</span><span class=\"o\">.</span><span class=\"n\">get_shark_dataset</span><span class=\"p\">(</span><span class=\"n\">target_type</span><span class=\"p\">,</span> <span class=\"s1\">&#39;hog&#39;</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Make resemble old dataset</span>\n    <span class=\"c1\"># FIXME; make ibeis_cnn dataset work here too</span>\n    <span class=\"c1\">#annots = ds.getprop(&#39;annots&#39;)</span>\n    <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">enc</span> <span class=\"o\">=</span> <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">getprop</span><span class=\"p\">(</span><span class=\"s1\">&#39;enc&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">aids</span> <span class=\"o\">=</span> <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">getprop</span><span class=\"p\">(</span><span class=\"s1\">&#39;annots&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">aids</span>\n    <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">nids</span> <span class=\"o\">=</span> <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">getprop</span><span class=\"p\">(</span><span class=\"s1\">&#39;annots&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">nids</span>\n    <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">labels</span>\n    <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">target_names</span> <span class=\"o\">=</span> <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">getprop</span><span class=\"p\">(</span><span class=\"s1\">&#39;target_names&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">target_labels</span> <span class=\"o\">=</span> <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">enc</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">target_names</span><span class=\"p\">)</span>\n    <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">getprop</span><span class=\"p\">(</span><span class=\"s1\">&#39;ibs&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">getprop</span><span class=\"p\">(</span><span class=\"s1\">&#39;config&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"n\">problem</span> <span class=\"o\">=</span> <span class=\"n\">classify_shark</span><span class=\"o\">.</span><span class=\"n\">ClfProblem</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"p\">)</span>\n    <span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">print_support_info</span><span class=\"p\">()</span>\n\n    <span class=\"n\">BUILD_RELEASE_MODEL</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n    <span class=\"k\">if</span> <span class=\"n\">BUILD_RELEASE_MODEL</span><span class=\"p\">:</span>\n        <span class=\"n\">clf</span> <span class=\"o\">=</span> <span class=\"n\">sklearn</span><span class=\"o\">.</span><span class=\"n\">svm</span><span class=\"o\">.</span><span class=\"n\">SVC</span><span class=\"p\">(</span><span class=\"n\">kernel</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"s1\">&#39;linear&#39;</span><span class=\"p\">),</span> <span class=\"n\">C</span><span class=\"o\">=.</span><span class=\"mi\">17</span><span class=\"p\">,</span>\n                              <span class=\"n\">class_weight</span><span class=\"o\">=</span><span class=\"s1\">&#39;balanced&#39;</span><span class=\"p\">,</span>\n                              <span class=\"n\">decision_function_shape</span><span class=\"o\">=</span><span class=\"s1\">&#39;ovr&#39;</span><span class=\"p\">,</span>\n                              <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n        <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">target</span><span class=\"p\">)</span>\n        <span class=\"n\">model_fname</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;interim_svc_</span><span class=\"si\">{}</span><span class=\"s1\">.cPkl&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">dataset_id</span><span class=\"p\">)</span>\n        <span class=\"n\">model_dpath</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ensuredir</span><span class=\"p\">((</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">dataset_dpath</span><span class=\"p\">,</span> <span class=\"s1\">&#39;svms&#39;</span><span class=\"p\">))</span>\n        <span class=\"n\">model_fpath</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">model_dpath</span><span class=\"p\">,</span> <span class=\"n\">model_fname</span><span class=\"p\">)</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">save_cPkl</span><span class=\"p\">(</span><span class=\"n\">model_fpath</span><span class=\"p\">,</span> <span class=\"n\">clf</span><span class=\"p\">)</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        TO PUBLISH</span>\n<span class=\"sd\">        scp clf to lev:/media/hdd/PUBLIC/models</span>\n<span class=\"sd\">        run script lev:/media/hdd/PUBLIC/hash.py to refresh hashes</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_user_name</span><span class=\"p\">()</span>\n        <span class=\"n\">host</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;cthulhu.dyn.wildme.io&#39;</span>\n        <span class=\"n\">remote_path</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;/media/hdd/PUBLIC/models/&#39;</span> <span class=\"o\">+</span> <span class=\"n\">model_fname</span>\n        <span class=\"n\">remote_uri</span> <span class=\"o\">=</span> <span class=\"n\">user</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;@&#39;</span> <span class=\"o\">+</span> <span class=\"n\">host</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;:&#39;</span> <span class=\"o\">+</span> <span class=\"n\">remote_path</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">rsync</span><span class=\"p\">(</span><span class=\"n\">model_fpath</span><span class=\"p\">,</span> <span class=\"n\">remote_uri</span><span class=\"p\">)</span>\n\n        <span class=\"n\">command</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;python /media/hdd/PUBLIC/hash.py&#39;</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">cmd</span><span class=\"p\">(</span><span class=\"s1\">&#39;ssh </span><span class=\"si\">{user}</span><span class=\"s1\">@</span><span class=\"si\">{host}</span><span class=\"s1\"> &quot;</span><span class=\"si\">{command}</span><span class=\"s1\">&quot;&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">=</span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"n\">host</span><span class=\"p\">,</span>\n                                                      <span class=\"n\">command</span><span class=\"o\">=</span><span class=\"n\">command</span><span class=\"p\">))</span>\n\n    <span class=\"n\">model_dpath</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ensuredir</span><span class=\"p\">((</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">dataset_dpath</span><span class=\"p\">,</span> <span class=\"s1\">&#39;svms&#39;</span><span class=\"p\">))</span>\n    <span class=\"c1\">#n_folds = 10</span>\n    <span class=\"n\">n_folds</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n    <span class=\"c1\">#ensemble_dpath = ut.ensuredir((model_dpath, &#39;svms_%d_fold&#39; % (n_folds,)))</span>\n\n    <span class=\"n\">train_idx</span> <span class=\"o\">=</span> <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">_split_idxs</span><span class=\"p\">[</span><span class=\"s1\">&#39;train&#39;</span><span class=\"p\">]</span>\n    <span class=\"n\">test_idx</span> <span class=\"o\">=</span> <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">_split_idxs</span><span class=\"p\">[</span><span class=\"s1\">&#39;test&#39;</span><span class=\"p\">]</span>\n\n    <span class=\"n\">y_train</span> <span class=\"o\">=</span> <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">target</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">train_idx</span><span class=\"p\">)</span>\n    <span class=\"n\">nids_train</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">nids</span><span class=\"p\">,</span> <span class=\"n\">train_idx</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Ensure that an individual does not appear in both train and test</span>\n    <span class=\"c1\">#_iter = stratified_kfold_label_split(y_train, nids_train, y_idx=train_idx,</span>\n    <span class=\"c1\">#                                     n_folds=n_folds, rng=rng)</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">MyLabelCV</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">nids_train</span><span class=\"p\">,</span> <span class=\"n\">n_folds</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nids_train</span> <span class=\"o\">=</span> <span class=\"n\">nids_train</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">y_train</span> <span class=\"o\">=</span> <span class=\"n\">y_train</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">n_folds</span> <span class=\"o\">=</span> <span class=\"n\">n_folds</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">__len__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">n_folds</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">__iter__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n            <span class=\"kn\">from</span> <span class=\"nn\">ibeis_cnn.dataset</span> <span class=\"k\">import</span> <span class=\"n\">stratified_kfold_label_split</span>\n            <span class=\"n\">rng</span> <span class=\"o\">=</span> <span class=\"mi\">1809629827</span>\n            <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"n\">stratified_kfold_label_split</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nids_train</span><span class=\"p\">,</span>\n                                                  <span class=\"n\">n_folds</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">n_folds</span><span class=\"p\">,</span> <span class=\"n\">rng</span><span class=\"o\">=</span><span class=\"n\">rng</span><span class=\"p\">):</span>\n                <span class=\"k\">yield</span> <span class=\"n\">_</span>\n\n    <span class=\"n\">clf_fpath</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">model_dpath</span><span class=\"p\">,</span> <span class=\"s1\">&#39;</span><span class=\"si\">%s</span><span class=\"s1\">_svc_folds_</span><span class=\"si\">%s</span><span class=\"s1\">.cPkl&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">target_type</span><span class=\"p\">,</span> <span class=\"n\">n_folds</span><span class=\"p\">))</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">checkpath</span><span class=\"p\">(</span><span class=\"n\">clf_fpath</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Curate strategy:</span>\n<span class=\"sd\">            Use gridsearch to select a reasonable C=.17</span>\n<span class=\"sd\">            Then train 10 classifiers with 10 split cross validation.</span>\n<span class=\"sd\">            This lets us make an &quot;unbias&quot; prediction for each training example.</span>\n<span class=\"sd\">            Look at predictions for all training examples (predict using only</span>\n<span class=\"sd\">                classifiers not trained with that point).</span>\n<span class=\"sd\">            Look at worst worst performing examples.</span>\n<span class=\"sd\">            Fix any errors that occur.</span>\n<span class=\"sd\">            Now that the database is better, we learn the actual model.</span>\n\n<span class=\"sd\">        Learning strategy:</span>\n<span class=\"sd\">            * Set aside a set test.</span>\n<span class=\"sd\">            * The remaining data is the training set.</span>\n<span class=\"sd\">            * Run Gridsearch with N-fold cross validation on training set to</span>\n<span class=\"sd\">              look at performance given different hyperparameters of the SVM.</span>\n<span class=\"sd\">            * Use quadratic interpolation to select a &quot;best&quot; parameter.</span>\n\n<span class=\"sd\">            (NOTE grid.predict only uses the best estimator (however it is a refit estimator))</span>\n\n<span class=\"sd\">            Train a single SVM using these parameters on all training data.</span>\n\n<span class=\"sd\">            Evaluate this SVM on the test set.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">C</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">if</span> <span class=\"n\">C</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"kn\">import</span> <span class=\"nn\">sklearn</span>\n            <span class=\"kn\">import</span> <span class=\"nn\">sklearn.grid_search</span>\n            <span class=\"kn\">import</span> <span class=\"nn\">sklearn.svm</span>\n            <span class=\"c1\"># C controls the margin of the hyperplane.</span>\n            <span class=\"c1\"># Smaller C = Larger Hyperplane</span>\n            <span class=\"c1\"># So, the larger the C the less willing the SVM will be to get</span>\n            <span class=\"c1\"># examples wrong.</span>\n\n            <span class=\"n\">param_grid</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                <span class=\"c1\">#&#39;C&#39;: np.linspace(.1, .2, 10),</span>\n                <span class=\"s1\">&#39;C&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"o\">.</span><span class=\"mi\">0001</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">001</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">005</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">01</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">08</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">17</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">10000</span><span class=\"p\">]</span>\n                <span class=\"c1\">#&#39;C&#39;: np.linspace(.1, .2, 3),</span>\n            <span class=\"p\">}</span>\n            <span class=\"n\">clf</span> <span class=\"o\">=</span> <span class=\"n\">sklearn</span><span class=\"o\">.</span><span class=\"n\">svm</span><span class=\"o\">.</span><span class=\"n\">SVC</span><span class=\"p\">(</span><span class=\"n\">kernel</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"s1\">&#39;linear&#39;</span><span class=\"p\">),</span> <span class=\"n\">C</span><span class=\"o\">=.</span><span class=\"mi\">17</span><span class=\"p\">,</span> <span class=\"n\">class_weight</span><span class=\"o\">=</span><span class=\"s1\">&#39;balanced&#39;</span><span class=\"p\">,</span>\n                                  <span class=\"n\">decision_function_shape</span><span class=\"o\">=</span><span class=\"s1\">&#39;ovr&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">cv</span> <span class=\"o\">=</span> <span class=\"n\">MyLabelCV</span><span class=\"p\">(</span><span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">nids_train</span><span class=\"p\">,</span> <span class=\"n\">n_folds</span><span class=\"o\">=</span><span class=\"n\">n_folds</span><span class=\"p\">)</span>\n            <span class=\"n\">grid</span> <span class=\"o\">=</span> <span class=\"n\">sklearn</span><span class=\"o\">.</span><span class=\"n\">grid_search</span><span class=\"o\">.</span><span class=\"n\">GridSearchCV</span><span class=\"p\">(</span><span class=\"n\">clf</span><span class=\"p\">,</span> <span class=\"n\">param_grid</span><span class=\"o\">=</span><span class=\"n\">param_grid</span><span class=\"p\">,</span> <span class=\"n\">cv</span><span class=\"o\">=</span><span class=\"n\">cv</span><span class=\"p\">,</span>\n                                                    <span class=\"n\">refit</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">n_jobs</span><span class=\"o\">=</span><span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">n_folds</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">),</span>\n                                                    <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n            <span class=\"n\">x_train</span> <span class=\"o\">=</span> <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">train_idx</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"n\">y_train</span> <span class=\"o\">=</span> <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">target</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">train_idx</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"n\">grid</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">x_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n\n            <span class=\"k\">for</span> <span class=\"n\">params</span><span class=\"p\">,</span> <span class=\"n\">mean_score</span><span class=\"p\">,</span> <span class=\"n\">scores</span> <span class=\"ow\">in</span> <span class=\"n\">grid</span><span class=\"o\">.</span><span class=\"n\">grid_scores_</span><span class=\"p\">:</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">%0.3f</span><span class=\"s2\"> (+/-</span><span class=\"si\">%0.03f</span><span class=\"s2\">) for </span><span class=\"si\">%r</span><span class=\"s2\">&quot;</span>\n                      <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">mean_score</span><span class=\"p\">,</span> <span class=\"n\">scores</span><span class=\"o\">.</span><span class=\"n\">std</span><span class=\"p\">()</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"p\">))</span>\n\n            <span class=\"n\">c_xdata</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"n\">t</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s1\">&#39;C&#39;</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"n\">grid</span><span class=\"o\">.</span><span class=\"n\">grid_scores_</span><span class=\"p\">])</span>\n            <span class=\"n\">c_ydata</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"n\">t</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"n\">grid</span><span class=\"o\">.</span><span class=\"n\">grid_scores_</span><span class=\"p\">])</span>\n            <span class=\"kn\">import</span> <span class=\"nn\">vtool</span> <span class=\"k\">as</span> <span class=\"nn\">vt</span>\n            <span class=\"c1\">#maxima_x, maxima_y, argmaxima = vt.hist_argmaxima(c_ydata, c_xdata, maxima_thresh=None)</span>\n            <span class=\"n\">submaxima_x</span><span class=\"p\">,</span> <span class=\"n\">submaxima_y</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">argsubmaxima</span><span class=\"p\">(</span><span class=\"n\">c_ydata</span><span class=\"p\">,</span> <span class=\"n\">c_xdata</span><span class=\"p\">)</span>\n            <span class=\"c1\">#pt.draw_hist_subbin_maxima(c_ydata, c_xdata, maxima_thresh=None, remove_endpoints=False)</span>\n            <span class=\"n\">C</span> <span class=\"o\">=</span> <span class=\"n\">submaxima_x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;C = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">,))</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;C = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">,))</span>\n\n        <span class=\"n\">clf_all</span> <span class=\"o\">=</span> <span class=\"n\">sklearn</span><span class=\"o\">.</span><span class=\"n\">svm</span><span class=\"o\">.</span><span class=\"n\">SVC</span><span class=\"p\">(</span><span class=\"n\">kernel</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"s1\">&#39;linear&#39;</span><span class=\"p\">),</span> <span class=\"n\">C</span><span class=\"o\">=</span><span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"n\">class_weight</span><span class=\"o\">=</span><span class=\"s1\">&#39;balanced&#39;</span><span class=\"p\">,</span>\n                                  <span class=\"n\">decision_function_shape</span><span class=\"o\">=</span><span class=\"s1\">&#39;ovr&#39;</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n        <span class=\"n\">X_train</span> <span class=\"o\">=</span> <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">train_idx</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"n\">clf_all</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">save_data</span><span class=\"p\">(</span><span class=\"n\">clf_fpath</span><span class=\"p\">,</span> <span class=\"n\">clf_all</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"p\">)</span>\n        <span class=\"n\">clf</span> <span class=\"o\">=</span> <span class=\"n\">clf_all</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">clf</span> <span class=\"o\">=</span> <span class=\"n\">sklearn</span><span class=\"o\">.</span><span class=\"n\">svm</span><span class=\"o\">.</span><span class=\"n\">SVC</span><span class=\"p\">()</span>\n        <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">load_data</span><span class=\"p\">(</span><span class=\"n\">clf_fpath</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">classifier_test</span><span class=\"p\">(</span><span class=\"n\">clf</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[problem] test classifier on </span><span class=\"si\">%d</span><span class=\"s1\"> data points&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">test_idx</span><span class=\"p\">),))</span>\n        <span class=\"n\">y_conf</span> <span class=\"o\">=</span> <span class=\"n\">predict_svc_ovr</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span>\n        <span class=\"n\">y_pred</span> <span class=\"o\">=</span> <span class=\"n\">y_conf</span><span class=\"o\">.</span><span class=\"n\">argmax</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">ClfSingleResult</span><span class=\"p\">(</span><span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">ds</span><span class=\"p\">,</span> <span class=\"n\">test_idx</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">,</span> <span class=\"n\">y_pred</span><span class=\"p\">,</span> <span class=\"n\">y_conf</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span>\n\n    <span class=\"n\">test_idx</span> <span class=\"o\">=</span> <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">_split_idxs</span><span class=\"p\">[</span><span class=\"s1\">&#39;test&#39;</span><span class=\"p\">]</span>\n    <span class=\"n\">X_test</span> <span class=\"o\">=</span> <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">test_idx</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">target</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">test_idx</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">classifier_test</span><span class=\"p\">(</span><span class=\"n\">clf</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">)</span>\n    <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">compile_results</span><span class=\"p\">()</span>\n    <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">print_report</span><span class=\"p\">()</span>\n\n    <span class=\"n\">result_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">result</span><span class=\"p\">]</span>\n\n    <span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n    <span class=\"c1\">#import plottool as pt</span>\n    <span class=\"c1\"># Combine information from results</span>\n    <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">concat</span><span class=\"p\">([</span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">df</span> <span class=\"k\">for</span> <span class=\"n\">r</span> <span class=\"ow\">in</span> <span class=\"n\">result_list</span><span class=\"p\">])</span>\n    <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">&#39;hardness&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"o\">/</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">&#39;easiness&#39;</span><span class=\"p\">]</span>\n    <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">&#39;aid&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">)</span>\n    <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">&#39;target&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">)</span>\n    <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">&#39;failed&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">&#39;pred&#39;</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">&#39;target&#39;</span><span class=\"p\">]</span>\n\n    <span class=\"n\">report</span> <span class=\"o\">=</span> <span class=\"n\">sklearn</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">classification_report</span><span class=\"p\">(</span>\n        <span class=\"n\">y_true</span><span class=\"o\">=</span><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">&#39;target&#39;</span><span class=\"p\">],</span> <span class=\"n\">y_pred</span><span class=\"o\">=</span><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">&#39;pred&#39;</span><span class=\"p\">],</span>\n        <span class=\"n\">target_names</span><span class=\"o\">=</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">target_names</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">report</span><span class=\"p\">)</span>\n\n    <span class=\"n\">confusion</span> <span class=\"o\">=</span> <span class=\"n\">sklearn</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">confusion_matrix</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">&#39;target&#39;</span><span class=\"p\">],</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">&#39;pred&#39;</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Confusion Matrix:&#39;</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">confusion</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">m</span> <span class=\"k\">for</span> <span class=\"n\">m</span> <span class=\"ow\">in</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">target_names</span><span class=\"p\">],</span>\n                       <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;gt &#39;</span> <span class=\"o\">+</span> <span class=\"n\">m</span> <span class=\"k\">for</span> <span class=\"n\">m</span> <span class=\"ow\">in</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">target_names</span><span class=\"p\">]))</span>\n\n    <span class=\"c1\">#inspect_results(ds, result_list)</span>\n\n    <span class=\"k\">if</span> <span class=\"kc\">False</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"kc\">False</span><span class=\"p\">:</span>\n            <span class=\"c1\">#train_idx, test_idx = problem.stratified_2sample_idxs()</span>\n            <span class=\"n\">train_idx</span> <span class=\"o\">=</span> <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">_split_idxs</span><span class=\"p\">[</span><span class=\"s1\">&#39;train&#39;</span><span class=\"p\">]</span>\n            <span class=\"n\">test_idx</span> <span class=\"o\">=</span> <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">_split_idxs</span><span class=\"p\">[</span><span class=\"s1\">&#39;test&#39;</span><span class=\"p\">]</span>\n\n            <span class=\"c1\">#import sklearn.metrics</span>\n            <span class=\"c1\">#model_dpath = join(ds.dataset_dpath, &#39;svms&#39;)</span>\n            <span class=\"c1\">#model_fpath = join(model_dpath, target_type + &#39;_svc.cPkl&#39;)</span>\n            <span class=\"c1\">#if ut.checkpath(model_fpath):</span>\n            <span class=\"c1\">#    clf = sklearn.svm.SVC(kernel=str(&#39;linear&#39;), C=.17, class_weight=&#39;balanced&#39;,</span>\n            <span class=\"c1\">#                          decision_function_shape=&#39;ovr&#39;)</span>\n            <span class=\"c1\">#    clf.__dict__.update(**ut.load_data(model_fpath))</span>\n            <span class=\"c1\">#else:</span>\n            <span class=\"c1\">#    clf = problem.fit_new_classifier(train_idx)</span>\n            <span class=\"c1\">#    ut.ensuredir(model_dpath)</span>\n            <span class=\"c1\">#    ut.save_data(model_fpath, clf.__dict__)</span>\n            <span class=\"n\">result_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">test_classifier</span><span class=\"p\">(</span><span class=\"n\">clf</span><span class=\"p\">,</span> <span class=\"n\">test_idx</span><span class=\"p\">)</span>\n            <span class=\"n\">result_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n\n            <span class=\"k\">for</span> <span class=\"n\">result</span> <span class=\"ow\">in</span> <span class=\"n\">result_list</span><span class=\"p\">:</span>\n                <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">compile_results</span><span class=\"p\">()</span>\n\n            <span class=\"k\">for</span> <span class=\"n\">result</span> <span class=\"ow\">in</span> <span class=\"n\">result_list</span><span class=\"p\">:</span>\n                <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">print_report</span><span class=\"p\">()</span>\n\n            <span class=\"n\">inspect_results</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"p\">,</span> <span class=\"n\">result_list</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"kc\">False</span><span class=\"p\">:</span>\n            <span class=\"n\">result_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">test_classifier</span><span class=\"p\">(</span><span class=\"n\">clf</span><span class=\"p\">,</span> <span class=\"n\">train_idx</span><span class=\"p\">)</span>\n            <span class=\"n\">result_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">result</span> <span class=\"ow\">in</span> <span class=\"n\">result_list</span><span class=\"p\">:</span>\n                <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">compile_results</span><span class=\"p\">()</span>\n            <span class=\"k\">for</span> <span class=\"n\">result</span> <span class=\"ow\">in</span> <span class=\"n\">result_list</span><span class=\"p\">:</span>\n                <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">print_report</span><span class=\"p\">()</span>\n            <span class=\"n\">inspect_results</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"p\">,</span> <span class=\"n\">result_list</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"kc\">False</span><span class=\"p\">:</span>\n            <span class=\"n\">result_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"c1\"># View support vectors</span>\n            <span class=\"n\">support_idxs</span> <span class=\"o\">=</span> <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">support_</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">test_classifier</span><span class=\"p\">(</span><span class=\"n\">clf</span><span class=\"p\">,</span> <span class=\"n\">support_idxs</span><span class=\"p\">)</span>\n            <span class=\"n\">result_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">result</span> <span class=\"ow\">in</span> <span class=\"n\">result_list</span><span class=\"p\">:</span>\n                <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">compile_results</span><span class=\"p\">()</span>\n            <span class=\"k\">for</span> <span class=\"n\">result</span> <span class=\"ow\">in</span> <span class=\"n\">result_list</span><span class=\"p\">:</span>\n                <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">print_report</span><span class=\"p\">()</span>\n            <span class=\"n\">inspect_results</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"p\">,</span> <span class=\"n\">result_list</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"inspect_results\"><a class=\"viewcode-back\" href=\"../../../../ibeis.scripts/#ibeis.scripts.classify_shark.inspect_results\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">inspect_results</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"p\">,</span> <span class=\"n\">result_list</span><span class=\"p\">):</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">plottool</span> <span class=\"k\">as</span> <span class=\"nn\">pt</span>\n    <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">set_option</span><span class=\"p\">(</span><span class=\"s2\">&quot;display.max_rows&quot;</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">)</span>\n    <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">qt4ensure</span><span class=\"p\">()</span>\n\n    <span class=\"n\">isect_sets</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">s1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">intersection</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">s2</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">s1</span><span class=\"p\">,</span> <span class=\"n\">s2</span> <span class=\"ow\">in</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">combinations</span><span class=\"p\">([</span>\n        <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">index</span> <span class=\"k\">for</span> <span class=\"n\">result</span> <span class=\"ow\">in</span> <span class=\"n\">result_list</span><span class=\"p\">],</span> <span class=\"mi\">2</span><span class=\"p\">)]</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">all</span><span class=\"p\">([</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"k\">for</span> <span class=\"n\">s</span> <span class=\"ow\">in</span> <span class=\"n\">isect_sets</span><span class=\"p\">]),</span> <span class=\"p\">(</span><span class=\"s1\">&#39;cv sets should not intersect&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Combine information from results</span>\n    <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">concat</span><span class=\"p\">([</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">df</span> <span class=\"k\">for</span> <span class=\"n\">result</span> <span class=\"ow\">in</span> <span class=\"n\">result_list</span><span class=\"p\">])</span>\n    <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">&#39;hardness&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"o\">/</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">&#39;easiness&#39;</span><span class=\"p\">]</span>\n    <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">&#39;aid&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">)</span>\n    <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">&#39;target&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">)</span>\n    <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">&#39;failed&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">&#39;pred&#39;</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">&#39;target&#39;</span><span class=\"p\">]</span>\n\n    <span class=\"n\">report</span> <span class=\"o\">=</span> <span class=\"n\">sklearn</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">classification_report</span><span class=\"p\">(</span>\n        <span class=\"n\">y_true</span><span class=\"o\">=</span><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">&#39;target&#39;</span><span class=\"p\">],</span> <span class=\"n\">y_pred</span><span class=\"o\">=</span><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">&#39;pred&#39;</span><span class=\"p\">],</span>\n        <span class=\"n\">target_names</span><span class=\"o\">=</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">target_names</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">report</span><span class=\"p\">)</span>\n\n    <span class=\"n\">confusion</span> <span class=\"o\">=</span> <span class=\"n\">sklearn</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">confusion_matrix</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">&#39;target&#39;</span><span class=\"p\">],</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">&#39;pred&#39;</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Confusion Matrix:&#39;</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">confusion</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">m</span> <span class=\"k\">for</span> <span class=\"n\">m</span> <span class=\"ow\">in</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">target_names</span><span class=\"p\">],</span>\n                       <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;gt &#39;</span> <span class=\"o\">+</span> <span class=\"n\">m</span> <span class=\"k\">for</span> <span class=\"n\">m</span> <span class=\"ow\">in</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">target_names</span><span class=\"p\">]))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">target_partition</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"p\">):</span>\n        <span class=\"n\">df_chunk</span> <span class=\"o\">=</span> <span class=\"n\">df</span> <span class=\"k\">if</span> <span class=\"n\">target</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"k\">else</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">&#39;target&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">target</span><span class=\"p\">]</span>\n        <span class=\"n\">df_chunk</span> <span class=\"o\">=</span> <span class=\"n\">df_chunk</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">df_chunk</span><span class=\"p\">[</span><span class=\"s1\">&#39;hardness&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">argsort</span><span class=\"p\">())</span>\n        <span class=\"k\">return</span> <span class=\"n\">df_chunk</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">grab_subchunk</span><span class=\"p\">(</span><span class=\"n\">frac</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">):</span>\n        <span class=\"n\">df_chunk</span> <span class=\"o\">=</span> <span class=\"n\">target_partition</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"p\">)</span>\n        <span class=\"n\">sl</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">snapped_slice</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">df_chunk</span><span class=\"p\">),</span> <span class=\"n\">frac</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;sl = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">sl</span><span class=\"p\">,))</span>\n        <span class=\"n\">idx</span> <span class=\"o\">=</span> <span class=\"n\">df_chunk</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">[</span><span class=\"n\">sl</span><span class=\"p\">]</span>\n        <span class=\"n\">df_chunk</span> <span class=\"o\">=</span> <span class=\"n\">df_chunk</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span>\n        <span class=\"n\">min_frac</span> <span class=\"o\">=</span> <span class=\"n\">sl</span><span class=\"o\">.</span><span class=\"n\">start</span> <span class=\"o\">/</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">df_chunk</span><span class=\"p\">)</span>\n        <span class=\"n\">max_frac</span> <span class=\"o\">=</span> <span class=\"n\">sl</span><span class=\"o\">.</span><span class=\"n\">stop</span> <span class=\"o\">/</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">df_chunk</span><span class=\"p\">)</span>\n        <span class=\"n\">min_frac</span> <span class=\"o\">=</span> <span class=\"n\">sl</span><span class=\"o\">.</span><span class=\"n\">start</span>\n        <span class=\"n\">max_frac</span> <span class=\"o\">=</span> <span class=\"n\">sl</span><span class=\"o\">.</span><span class=\"n\">stop</span>\n        <span class=\"n\">place_name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;hardness=</span><span class=\"si\">%.2f</span><span class=\"s1\"> (</span><span class=\"si\">%d</span><span class=\"s1\">-</span><span class=\"si\">%d</span><span class=\"s1\">)&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">frac</span><span class=\"p\">,</span> <span class=\"n\">min_frac</span><span class=\"p\">,</span> <span class=\"n\">max_frac</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">target</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">df_chunk</span><span class=\"o\">.</span><span class=\"n\">nice</span> <span class=\"o\">=</span> <span class=\"n\">place_name</span> <span class=\"o\">+</span> <span class=\"s1\">&#39; &#39;</span> <span class=\"o\">+</span> <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">target_names</span><span class=\"p\">[</span><span class=\"n\">target</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">df_chunk</span><span class=\"o\">.</span><span class=\"n\">nice</span> <span class=\"o\">=</span> <span class=\"n\">place_name</span>\n        <span class=\"k\">return</span> <span class=\"n\">df_chunk</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">grab_subchunk2</span><span class=\"p\">(</span><span class=\"n\">df_chunk</span><span class=\"p\">,</span> <span class=\"n\">frac</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n        <span class=\"n\">sl</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">snapped_slice</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">df_chunk</span><span class=\"p\">),</span> <span class=\"n\">frac</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;sl = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">sl</span><span class=\"p\">,))</span>\n        <span class=\"n\">idx</span> <span class=\"o\">=</span> <span class=\"n\">df_chunk</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">[</span><span class=\"n\">sl</span><span class=\"p\">]</span>\n        <span class=\"n\">df_chunk</span> <span class=\"o\">=</span> <span class=\"n\">df_chunk</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span>\n        <span class=\"n\">min_frac</span> <span class=\"o\">=</span> <span class=\"n\">sl</span><span class=\"o\">.</span><span class=\"n\">start</span> <span class=\"o\">/</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">df_chunk</span><span class=\"p\">)</span>\n        <span class=\"n\">max_frac</span> <span class=\"o\">=</span> <span class=\"n\">sl</span><span class=\"o\">.</span><span class=\"n\">stop</span> <span class=\"o\">/</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">df_chunk</span><span class=\"p\">)</span>\n        <span class=\"n\">min_frac</span> <span class=\"o\">=</span> <span class=\"n\">sl</span><span class=\"o\">.</span><span class=\"n\">start</span>\n        <span class=\"n\">max_frac</span> <span class=\"o\">=</span> <span class=\"n\">sl</span><span class=\"o\">.</span><span class=\"n\">stop</span>\n        <span class=\"n\">place_name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;hardness=</span><span class=\"si\">%.2f</span><span class=\"s1\"> (</span><span class=\"si\">%d</span><span class=\"s1\">-</span><span class=\"si\">%d</span><span class=\"s1\">)&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">frac</span><span class=\"p\">,</span> <span class=\"n\">min_frac</span><span class=\"p\">,</span> <span class=\"n\">max_frac</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">target</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">df_chunk</span><span class=\"o\">.</span><span class=\"n\">nice</span> <span class=\"o\">=</span> <span class=\"n\">place_name</span> <span class=\"o\">+</span> <span class=\"s1\">&#39; &#39;</span> <span class=\"o\">+</span> <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">target_names</span><span class=\"p\">[</span><span class=\"n\">target</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">df_chunk</span><span class=\"o\">.</span><span class=\"n\">nice</span> <span class=\"o\">=</span> <span class=\"n\">place_name</span>\n        <span class=\"k\">return</span> <span class=\"n\">df_chunk</span>\n\n    <span class=\"c1\"># Look at hardest train cases</span>\n\n    <span class=\"c1\"># Look at hardest test cases</span>\n    <span class=\"k\">if</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"c1\">#n = 4</span>\n        <span class=\"n\">fracs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">]</span>\n        <span class=\"n\">view_targets</span> <span class=\"o\">=</span> <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">target_labels</span>\n        <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">8</span> <span class=\"o\">//</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">view_targets</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">view_targets</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">listfind</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">target_names</span><span class=\"o\">.</span><span class=\"n\">tolist</span><span class=\"p\">(),</span> <span class=\"s1\">&#39;healthy&#39;</span><span class=\"p\">)]</span>\n        <span class=\"c1\">#fracs = [0.0, .7, .8, .9, 1.0]</span>\n        <span class=\"n\">fracs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">0.45</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">55</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">62</span><span class=\"p\">]</span>\n        <span class=\"n\">fracs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">0.72</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">82</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">84</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">88</span><span class=\"p\">]</span>\n        <span class=\"n\">fracs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">0.73</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">83</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">835</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">89</span><span class=\"p\">]</span>\n        <span class=\"n\">fracs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">0.73</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">83</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">835</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">89</span><span class=\"p\">]</span>\n        <span class=\"n\">fracs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">0.735</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">833</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">837</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">934</span><span class=\"p\">]</span>\n        <span class=\"n\">fracs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">65</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">75</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">85</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">95</span><span class=\"p\">]</span>\n        <span class=\"n\">fracs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">0.3</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">67</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">77</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">87</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">92</span><span class=\"p\">]</span>\n        <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">8</span> <span class=\"o\">//</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">view_targets</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"kc\">False</span><span class=\"p\">:</span>\n        <span class=\"n\">view_targets</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">listfind</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">target_names</span><span class=\"o\">.</span><span class=\"n\">tolist</span><span class=\"p\">(),</span> <span class=\"s1\">&#39;healthy&#39;</span><span class=\"p\">)]</span>\n        <span class=\"n\">target_dfs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">target_partition</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">target</span> <span class=\"ow\">in</span> <span class=\"n\">view_targets</span><span class=\"p\">]</span>\n        <span class=\"n\">critical_points</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">_df</span><span class=\"p\">[</span><span class=\"s1\">&#39;failed&#39;</span><span class=\"p\">])[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">_df</span> <span class=\"ow\">in</span> <span class=\"n\">target_dfs</span><span class=\"p\">]</span>\n        <span class=\"n\">critical_fracs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">_pt</span> <span class=\"o\">/</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">_df</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">_pt</span><span class=\"p\">,</span> <span class=\"n\">_df</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">critical_points</span><span class=\"p\">,</span> <span class=\"n\">target_dfs</span><span class=\"p\">)]</span>\n        <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">8</span> <span class=\"o\">*</span> <span class=\"mi\">5</span>\n        <span class=\"n\">frac</span> <span class=\"o\">=</span> <span class=\"n\">critical_fracs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">frac</span> <span class=\"o\">+=</span> <span class=\"o\">.</span><span class=\"mi\">1</span>\n        <span class=\"n\">_df</span> <span class=\"o\">=</span> <span class=\"n\">target_dfs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">df_part</span> <span class=\"o\">=</span> <span class=\"n\">grab_subchunk2</span><span class=\"p\">(</span><span class=\"n\">_df</span><span class=\"p\">,</span> <span class=\"n\">frac</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n        <span class=\"n\">df_chunks</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">df_part</span><span class=\"o\">.</span><span class=\"n\">iloc</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ichunks</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">df_part</span><span class=\"p\">)),</span> <span class=\"mi\">8</span><span class=\"p\">)]</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">df_chunks</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">grab_subchunk</span><span class=\"p\">(</span><span class=\"n\">frac</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">)</span>\n                     <span class=\"k\">for</span> <span class=\"n\">frac</span> <span class=\"ow\">in</span> <span class=\"n\">fracs</span> <span class=\"k\">for</span> <span class=\"n\">target</span> <span class=\"ow\">in</span> <span class=\"n\">view_targets</span><span class=\"p\">]</span>\n\n    <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">ibs</span>\n    <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">config</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis_cnn</span> <span class=\"k\">import</span> <span class=\"n\">draw_results</span>\n    <span class=\"n\">inter</span> <span class=\"o\">=</span> <span class=\"n\">draw_results</span><span class=\"o\">.</span><span class=\"n\">make_InteractClasses</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">df_chunks</span><span class=\"p\">,</span>\n                                              <span class=\"n\">nCols</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">view_targets</span><span class=\"p\">))</span>\n    <span class=\"n\">inter</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span></div>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.scripts.classify_shark</span>\n<span class=\"sd\">        python -m ibeis.scripts.classify_shark --allexamples</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">multiprocessing</span>\n    <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">freeze_support</span><span class=\"p\">()</span>  <span class=\"c1\"># for win32</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>  <span class=\"c1\"># NOQA</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">doctest_funcs</span><span class=\"p\">()</span>\n</pre></div>", "current_page_name": "_modules/ibeis/scripts/classify_shark", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}