{"parents": [{"link": "../../../", "title": "Module code"}, {"link": "../../", "title": "ibeis"}], "title": "ibeis.gui.id_review_api", "body": "<h1>Source code for ibeis.gui.id_review_api</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">CommandLine:</span>\n<span class=\"sd\">    python -m ibeis.gui.inspect_gui --test-test_review_widget --show</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"k\">import</span> <span class=\"n\">absolute_import</span><span class=\"p\">,</span> <span class=\"n\">division</span><span class=\"p\">,</span> <span class=\"n\">print_function</span><span class=\"p\">,</span> <span class=\"n\">unicode_literals</span>\n<span class=\"kn\">from</span> <span class=\"nn\">functools</span> <span class=\"k\">import</span> <span class=\"n\">partial</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.viz</span> <span class=\"k\">import</span> <span class=\"n\">viz_helpers</span> <span class=\"k\">as</span> <span class=\"n\">vh</span>\n<span class=\"kn\">import</span> <span class=\"nn\">guitool</span> <span class=\"k\">as</span> <span class=\"nn\">gt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n<span class=\"p\">(</span><span class=\"nb\">print</span><span class=\"p\">,</span> <span class=\"n\">rrr</span><span class=\"p\">,</span> <span class=\"n\">profile</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">inject2</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">,</span> <span class=\"s1\">&#39;[id_review_api]&#39;</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">MATCHED_STATUS_TEXT</span>  <span class=\"o\">=</span> <span class=\"s1\">&#39;Matched&#39;</span>\n<span class=\"n\">REVIEWED_STATUS_TEXT</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Reviewed&#39;</span>\n\n\n<span class=\"n\">REVIEW_CFG_DEFAULTS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">&#39;ranks_top&#39;</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;directed&#39;</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;name_scoring&#39;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;filter_reviewed&#39;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;filter_photobombs&#39;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;filter_true_matches&#39;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;show_chips&#39;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;filter_duplicate_true_matches&#39;</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n\n<div class=\"viewcode-block\" id=\"get_review_edges\"><a class=\"viewcode-back\" href=\"../../../../ibeis.gui/#ibeis.gui.id_review_api.get_review_edges\">[docs]</a><span class=\"nd\">@profile</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_review_edges</span><span class=\"p\">(</span><span class=\"n\">cm_list</span><span class=\"p\">,</span> <span class=\"n\">ibs</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">review_cfg</span><span class=\"o\">=</span><span class=\"p\">{}):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Needs to be moved to a better file. Maybe something to do with</span>\n<span class=\"sd\">    identification.</span>\n\n<span class=\"sd\">    Returns a list of matches that should be inspected</span>\n<span class=\"sd\">    This function is more lightweight than orgres or allres.</span>\n<span class=\"sd\">    Used in id_review_api and interact_qres2</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        cm_list (list): list of chip match objects</span>\n<span class=\"sd\">        ranks_top (int): put all ranks less than this number into the graph</span>\n<span class=\"sd\">        directed (bool):</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        tuple: review_edges = (qaid_arr, daid_arr, score_arr, rank_arr)</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.gui.id_review_api get_review_edges:0</span>\n\n<span class=\"sd\">    Example0:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.gui.id_review_api import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(&#39;PZ_MTEST&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; qreq_ = ibeis.main_helpers.testdata_qreq_()</span>\n<span class=\"sd\">        &gt;&gt;&gt; cm_list = qreq_.execute()</span>\n<span class=\"sd\">        &gt;&gt;&gt; review_cfg = dict(ranks_top=5, directed=True, name_scoring=False,</span>\n<span class=\"sd\">        &gt;&gt;&gt;                   filter_true_matches=True)</span>\n<span class=\"sd\">        &gt;&gt;&gt; review_edges = get_review_edges(cm_list, ibs=ibs, review_cfg=review_cfg)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(review_edges)</span>\n\n<span class=\"sd\">    Example1:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # UNSTABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.gui.id_review_api import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; cm_list, qreq_ = ibeis.testdata_cmlist(&#39;PZ_MTEST&#39;, a=&#39;default:qsize=5,dsize=20&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; review_cfg = dict(ranks_top=5, directed=True, name_scoring=False,</span>\n<span class=\"sd\">        &gt;&gt;&gt;                   filter_reviewed=False, filter_true_matches=True)</span>\n<span class=\"sd\">        &gt;&gt;&gt; review_edges = get_review_edges(cm_list, review_cfg=review_cfg, ibs=ibs)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(review_edges)</span>\n\n<span class=\"sd\">    Example3:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # UNSTABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.gui.id_review_api import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; cm_list, qreq_ = ibeis.testdata_cmlist(&#39;PZ_MTEST&#39;, a=&#39;default:qsize=1,dsize=100&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; review_cfg = dict(ranks_top=1, directed=False, name_scoring=False,</span>\n<span class=\"sd\">        &gt;&gt;&gt;                   filter_reviewed=False, filter_true_matches=True)</span>\n<span class=\"sd\">        &gt;&gt;&gt; review_edges = get_review_edges(cm_list, review_cfg=review_cfg, ibs=ibs)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(review_edges)</span>\n\n<span class=\"sd\">    Example4:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # UNSTABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.gui.id_review_api import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; cm_list, qreq_ = ibeis.testdata_cmlist(&#39;PZ_MTEST&#39;, a=&#39;default:qsize=10,dsize=10&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ranks_top = 3</span>\n<span class=\"sd\">        &gt;&gt;&gt; review_cfg = dict(ranks_top=3, directed=False, name_scoring=False,</span>\n<span class=\"sd\">        &gt;&gt;&gt;                   filter_reviewed=False, filter_true_matches=True)</span>\n<span class=\"sd\">        &gt;&gt;&gt; review_edges = get_review_edges(cm_list, review_cfg=review_cfg, ibs=ibs)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(review_edges)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">vtool</span> <span class=\"k\">as</span> <span class=\"nn\">vt</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.hots</span> <span class=\"k\">import</span> <span class=\"n\">chip_match</span>\n    <span class=\"n\">automatch_kw</span> <span class=\"o\">=</span> <span class=\"n\">REVIEW_CFG_DEFAULTS</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n    <span class=\"n\">automatch_kw</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">update_existing</span><span class=\"p\">(</span><span class=\"n\">automatch_kw</span><span class=\"p\">,</span> <span class=\"n\">review_cfg</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[resorg] get_review_edges(</span><span class=\"si\">%s</span><span class=\"s1\">)&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr2</span><span class=\"p\">(</span><span class=\"n\">automatch_kw</span><span class=\"p\">)))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[resorg] len(cm_list) = </span><span class=\"si\">%d</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cm_list</span><span class=\"p\">)))</span>\n    <span class=\"n\">qaids_stack</span>  <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">daids_stack</span>  <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">ranks_stack</span>  <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">scores_stack</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n    <span class=\"c1\"># For each QueryResult, Extract inspectable candidate matches</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">cm_list</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n        <span class=\"n\">cm_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">cm_list</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">())</span>\n\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cm_list</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"p\">([],</span> <span class=\"p\">[],</span> <span class=\"p\">[],</span> <span class=\"p\">[])</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">cm</span> <span class=\"ow\">in</span> <span class=\"n\">cm_list</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">cm</span><span class=\"p\">,</span> <span class=\"n\">chip_match</span><span class=\"o\">.</span><span class=\"n\">ChipMatch</span><span class=\"p\">):</span>\n            <span class=\"n\">daids</span>  <span class=\"o\">=</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">get_top_aids</span><span class=\"p\">(</span><span class=\"n\">ntop</span><span class=\"o\">=</span><span class=\"n\">automatch_kw</span><span class=\"p\">[</span><span class=\"s1\">&#39;ranks_top&#39;</span><span class=\"p\">])</span>\n            <span class=\"n\">scores</span> <span class=\"o\">=</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">get_top_scores</span><span class=\"p\">(</span><span class=\"n\">ntop</span><span class=\"o\">=</span><span class=\"n\">automatch_kw</span><span class=\"p\">[</span><span class=\"s1\">&#39;ranks_top&#39;</span><span class=\"p\">])</span>\n            <span class=\"n\">ranks</span>  <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">daids</span><span class=\"p\">))</span>\n            <span class=\"n\">qaids</span>  <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">full</span><span class=\"p\">(</span><span class=\"n\">daids</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">,</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">qaid</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">daids</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"p\">(</span><span class=\"n\">qaids</span><span class=\"p\">,</span> <span class=\"n\">daids</span><span class=\"p\">,</span> <span class=\"n\">scores</span><span class=\"p\">,</span> <span class=\"n\">ranks</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">get_match_tbldata</span><span class=\"p\">(</span>\n                <span class=\"n\">ranks_top</span><span class=\"o\">=</span><span class=\"n\">automatch_kw</span><span class=\"p\">[</span><span class=\"s1\">&#39;ranks_top&#39;</span><span class=\"p\">],</span>\n                <span class=\"n\">name_scoring</span><span class=\"o\">=</span><span class=\"n\">automatch_kw</span><span class=\"p\">[</span><span class=\"s1\">&#39;name_scoring&#39;</span><span class=\"p\">],</span>\n                <span class=\"n\">ibs</span><span class=\"o\">=</span><span class=\"n\">ibs</span><span class=\"p\">)</span>\n        <span class=\"n\">qaids_stack</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">qaids</span><span class=\"p\">)</span>\n        <span class=\"n\">daids_stack</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">daids</span><span class=\"p\">)</span>\n        <span class=\"n\">scores_stack</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">scores</span><span class=\"p\">)</span>\n        <span class=\"n\">ranks_stack</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ranks</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Stack them into a giant array</span>\n    <span class=\"n\">qaid_arr</span>  <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">hstack</span><span class=\"p\">(</span><span class=\"n\">qaids_stack</span><span class=\"p\">)</span>\n    <span class=\"n\">daid_arr</span>  <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">hstack</span><span class=\"p\">(</span><span class=\"n\">daids_stack</span><span class=\"p\">)</span>\n    <span class=\"n\">score_arr</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">hstack</span><span class=\"p\">(</span><span class=\"n\">scores_stack</span><span class=\"p\">)</span>\n    <span class=\"n\">rank_arr</span>  <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">hstack</span><span class=\"p\">(</span><span class=\"n\">ranks_stack</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Sort by scores</span>\n    <span class=\"n\">sortx</span> <span class=\"o\">=</span> <span class=\"n\">score_arr</span><span class=\"o\">.</span><span class=\"n\">argsort</span><span class=\"p\">()[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n    <span class=\"n\">qaid_arr</span>  <span class=\"o\">=</span> <span class=\"n\">qaid_arr</span><span class=\"p\">[</span><span class=\"n\">sortx</span><span class=\"p\">]</span>\n    <span class=\"n\">daid_arr</span>   <span class=\"o\">=</span> <span class=\"n\">daid_arr</span><span class=\"p\">[</span><span class=\"n\">sortx</span><span class=\"p\">]</span>\n    <span class=\"n\">score_arr</span> <span class=\"o\">=</span> <span class=\"n\">score_arr</span><span class=\"p\">[</span><span class=\"n\">sortx</span><span class=\"p\">]</span>\n    <span class=\"n\">rank_arr</span>  <span class=\"o\">=</span> <span class=\"n\">rank_arr</span><span class=\"p\">[</span><span class=\"n\">sortx</span><span class=\"p\">]</span>\n\n    <span class=\"c1\"># IS_REVIEWED DOES NOT WORK</span>\n    <span class=\"k\">if</span> <span class=\"n\">automatch_kw</span><span class=\"p\">[</span><span class=\"s1\">&#39;filter_reviewed&#39;</span><span class=\"p\">]:</span>\n        <span class=\"n\">_is_reviewed</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_pair_is_reviewed</span><span class=\"p\">(</span><span class=\"n\">qaid_arr</span><span class=\"o\">.</span><span class=\"n\">tolist</span><span class=\"p\">(),</span>\n                                                      <span class=\"n\">daid_arr</span><span class=\"o\">.</span><span class=\"n\">tolist</span><span class=\"p\">())</span>\n        <span class=\"n\">is_unreviewed</span> <span class=\"o\">=</span> <span class=\"o\">~</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">_is_reviewed</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">bool</span><span class=\"p\">)</span>\n        <span class=\"n\">qaid_arr</span>  <span class=\"o\">=</span> <span class=\"n\">qaid_arr</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">is_unreviewed</span><span class=\"p\">)</span>\n        <span class=\"n\">daid_arr</span>   <span class=\"o\">=</span> <span class=\"n\">daid_arr</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">is_unreviewed</span><span class=\"p\">)</span>\n        <span class=\"n\">score_arr</span> <span class=\"o\">=</span> <span class=\"n\">score_arr</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">is_unreviewed</span><span class=\"p\">)</span>\n        <span class=\"n\">rank_arr</span>  <span class=\"o\">=</span> <span class=\"n\">rank_arr</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">is_unreviewed</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Remove directed edges</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">automatch_kw</span><span class=\"p\">[</span><span class=\"s1\">&#39;directed&#39;</span><span class=\"p\">]:</span>\n        <span class=\"c1\">#nodes = np.unique(directed_edges.flatten())</span>\n        <span class=\"n\">directed_edges</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">vstack</span><span class=\"p\">((</span><span class=\"n\">qaid_arr</span><span class=\"p\">,</span> <span class=\"n\">daid_arr</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">T</span>\n        <span class=\"c1\">#idx1, idx2 = vt.intersect2d_indices(directed_edges, directed_edges[:, ::-1])</span>\n\n        <span class=\"n\">unique_rowx</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">find_best_undirected_edge_indexes</span><span class=\"p\">(</span><span class=\"n\">directed_edges</span><span class=\"p\">,</span>\n                                                           <span class=\"n\">score_arr</span><span class=\"p\">)</span>\n\n        <span class=\"n\">qaid_arr</span>  <span class=\"o\">=</span> <span class=\"n\">qaid_arr</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">unique_rowx</span><span class=\"p\">)</span>\n        <span class=\"n\">daid_arr</span>  <span class=\"o\">=</span> <span class=\"n\">daid_arr</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">unique_rowx</span><span class=\"p\">)</span>\n        <span class=\"n\">score_arr</span> <span class=\"o\">=</span> <span class=\"n\">score_arr</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">unique_rowx</span><span class=\"p\">)</span>\n        <span class=\"n\">rank_arr</span>  <span class=\"o\">=</span> <span class=\"n\">rank_arr</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">unique_rowx</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Filter Double Name Matches</span>\n    <span class=\"k\">if</span> <span class=\"n\">automatch_kw</span><span class=\"p\">[</span><span class=\"s1\">&#39;filter_duplicate_true_matches&#39;</span><span class=\"p\">]:</span>\n        <span class=\"c1\"># filter_dup_namepairs</span>\n        <span class=\"n\">qnid_arr</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_nids</span><span class=\"p\">(</span><span class=\"n\">qaid_arr</span><span class=\"p\">)</span>\n        <span class=\"n\">dnid_arr</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_nids</span><span class=\"p\">(</span><span class=\"n\">daid_arr</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">automatch_kw</span><span class=\"p\">[</span><span class=\"s1\">&#39;directed&#39;</span><span class=\"p\">]:</span>\n            <span class=\"n\">directed_name_edges</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">vstack</span><span class=\"p\">((</span><span class=\"n\">qnid_arr</span><span class=\"p\">,</span> <span class=\"n\">dnid_arr</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">T</span>\n            <span class=\"n\">unique_rowx2</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">find_best_undirected_edge_indexes</span><span class=\"p\">(</span>\n                <span class=\"n\">directed_name_edges</span><span class=\"p\">,</span> <span class=\"n\">score_arr</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">namepair_id_list</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">compute_unique_data_ids_</span><span class=\"p\">(</span>\n                <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">qnid_arr</span><span class=\"p\">,</span> <span class=\"n\">dnid_arr</span><span class=\"p\">))))</span>\n            <span class=\"n\">unique_namepair_ids</span><span class=\"p\">,</span> <span class=\"n\">namepair_groupxs</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">group_indices</span><span class=\"p\">(</span><span class=\"n\">namepair_id_list</span><span class=\"p\">)</span>\n            <span class=\"n\">score_namepair_groups</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">apply_grouping</span><span class=\"p\">(</span><span class=\"n\">score_arr</span><span class=\"p\">,</span> <span class=\"n\">namepair_groupxs</span><span class=\"p\">)</span>\n            <span class=\"n\">unique_rowx2</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"nb\">sorted</span><span class=\"p\">([</span>\n                <span class=\"n\">groupx</span><span class=\"p\">[</span><span class=\"n\">score_group</span><span class=\"o\">.</span><span class=\"n\">argmax</span><span class=\"p\">()]</span>\n                <span class=\"k\">for</span> <span class=\"n\">groupx</span><span class=\"p\">,</span> <span class=\"n\">score_group</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">namepair_groupxs</span><span class=\"p\">,</span> <span class=\"n\">score_namepair_groups</span><span class=\"p\">)</span>\n            <span class=\"p\">]),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">int32</span><span class=\"p\">)</span>\n        <span class=\"n\">qaid_arr</span>  <span class=\"o\">=</span> <span class=\"n\">qaid_arr</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">unique_rowx2</span><span class=\"p\">)</span>\n        <span class=\"n\">daid_arr</span>  <span class=\"o\">=</span> <span class=\"n\">daid_arr</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">unique_rowx2</span><span class=\"p\">)</span>\n        <span class=\"n\">score_arr</span> <span class=\"o\">=</span> <span class=\"n\">score_arr</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">unique_rowx2</span><span class=\"p\">)</span>\n        <span class=\"n\">rank_arr</span>  <span class=\"o\">=</span> <span class=\"n\">rank_arr</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">unique_rowx2</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Filter all true matches</span>\n    <span class=\"k\">if</span> <span class=\"n\">automatch_kw</span><span class=\"p\">[</span><span class=\"s1\">&#39;filter_true_matches&#39;</span><span class=\"p\">]:</span>\n        <span class=\"n\">qnid_arr</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_nids</span><span class=\"p\">(</span><span class=\"n\">qaid_arr</span><span class=\"p\">)</span>\n        <span class=\"n\">dnid_arr</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_nids</span><span class=\"p\">(</span><span class=\"n\">daid_arr</span><span class=\"p\">)</span>\n        <span class=\"n\">valid_flags</span> <span class=\"o\">=</span> <span class=\"n\">qnid_arr</span> <span class=\"o\">!=</span> <span class=\"n\">dnid_arr</span>\n        <span class=\"n\">qaid_arr</span>  <span class=\"o\">=</span> <span class=\"n\">qaid_arr</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">valid_flags</span><span class=\"p\">)</span>\n        <span class=\"n\">daid_arr</span>   <span class=\"o\">=</span> <span class=\"n\">daid_arr</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">valid_flags</span><span class=\"p\">)</span>\n        <span class=\"n\">score_arr</span> <span class=\"o\">=</span> <span class=\"n\">score_arr</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">valid_flags</span><span class=\"p\">)</span>\n        <span class=\"n\">rank_arr</span>  <span class=\"o\">=</span> <span class=\"n\">rank_arr</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">valid_flags</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">automatch_kw</span><span class=\"p\">[</span><span class=\"s1\">&#39;filter_photobombs&#39;</span><span class=\"p\">]:</span>\n        <span class=\"n\">unique_aids</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">unique</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">([</span><span class=\"n\">qaid_arr</span><span class=\"p\">,</span> <span class=\"n\">daid_arr</span><span class=\"p\">]))</span>\n        <span class=\"c1\">#grouped_aids, unique_nids = ibs.group_annots_by_name(unique_aids)</span>\n        <span class=\"n\">invalid_nid_map</span> <span class=\"o\">=</span> <span class=\"n\">get_photobomber_map</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">qaid_arr</span><span class=\"p\">)</span>\n\n        <span class=\"n\">nid2_aids</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">group_items</span><span class=\"p\">(</span><span class=\"n\">unique_aids</span><span class=\"p\">,</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_nids</span><span class=\"p\">(</span><span class=\"n\">unique_aids</span><span class=\"p\">))</span>\n\n        <span class=\"n\">expanded_aid_map</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ddict</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">other_nids</span> <span class=\"ow\">in</span> <span class=\"n\">invalid_nid_map</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"k\">for</span> <span class=\"n\">aid1</span> <span class=\"ow\">in</span> <span class=\"n\">nid2_aids</span><span class=\"p\">[</span><span class=\"n\">nid1</span><span class=\"p\">]:</span>\n                <span class=\"k\">for</span> <span class=\"n\">nid2</span> <span class=\"ow\">in</span> <span class=\"n\">other_nids</span><span class=\"p\">:</span>\n                    <span class=\"k\">for</span> <span class=\"n\">aid2</span> <span class=\"ow\">in</span> <span class=\"n\">nid2_aids</span><span class=\"p\">[</span><span class=\"n\">nid2</span><span class=\"p\">]:</span>\n                        <span class=\"n\">expanded_aid_map</span><span class=\"p\">[</span><span class=\"n\">aid1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">aid2</span><span class=\"p\">)</span>\n                        <span class=\"n\">expanded_aid_map</span><span class=\"p\">[</span><span class=\"n\">aid2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">aid1</span><span class=\"p\">)</span>\n\n        <span class=\"n\">valid_flags</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">daid</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">expanded_aid_map</span><span class=\"p\">[</span><span class=\"n\">qaid</span><span class=\"p\">]</span>\n                       <span class=\"k\">for</span> <span class=\"n\">qaid</span><span class=\"p\">,</span> <span class=\"n\">daid</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">qaid_arr</span><span class=\"p\">,</span> <span class=\"n\">daid_arr</span><span class=\"p\">)]</span>\n        <span class=\"n\">qaid_arr</span>  <span class=\"o\">=</span> <span class=\"n\">qaid_arr</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">valid_flags</span><span class=\"p\">)</span>\n        <span class=\"n\">daid_arr</span>   <span class=\"o\">=</span> <span class=\"n\">daid_arr</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">valid_flags</span><span class=\"p\">)</span>\n        <span class=\"n\">score_arr</span> <span class=\"o\">=</span> <span class=\"n\">score_arr</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">valid_flags</span><span class=\"p\">)</span>\n        <span class=\"n\">rank_arr</span>  <span class=\"o\">=</span> <span class=\"n\">rank_arr</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">valid_flags</span><span class=\"p\">)</span>\n\n    <span class=\"n\">review_edges</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">qaid_arr</span><span class=\"p\">,</span> <span class=\"n\">daid_arr</span><span class=\"p\">,</span> <span class=\"n\">score_arr</span><span class=\"p\">,</span> <span class=\"n\">rank_arr</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">review_edges</span></div>\n\n\n<div class=\"viewcode-block\" id=\"make_review_api\"><a class=\"viewcode-back\" href=\"../../../../ibeis.gui/#ibeis.gui.id_review_api.make_review_api\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">make_review_api</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">cm_list</span><span class=\"p\">,</span> <span class=\"n\">review_cfg</span><span class=\"p\">,</span> <span class=\"n\">qreq_</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Builds columns which are displayable in a ColumnListTableWidget</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.gui.id_review_api --test-test_review_widget --show</span>\n<span class=\"sd\">        python -m ibeis.gui.id_review_api --test-make_review_api</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.gui.id_review_api import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; import guitool as gt</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.gui import id_review_api</span>\n<span class=\"sd\">        &gt;&gt;&gt; cm_list, qreq_ = ibeis.main_helpers.testdata_cmlist()</span>\n<span class=\"sd\">        &gt;&gt;&gt; tblname = &#39;chipmatch&#39;</span>\n<span class=\"sd\">        &gt;&gt;&gt; name_scoring = False</span>\n<span class=\"sd\">        &gt;&gt;&gt; ranks_top = 5</span>\n<span class=\"sd\">        &gt;&gt;&gt; review_cfg = dict(ranks_top=ranks_top, name_scoring=name_scoring)</span>\n<span class=\"sd\">        &gt;&gt;&gt; review_api = make_review_api(qreq_.ibs, cm_list, review_cfg, qreq_=qreq_)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&#39;review_api = %r&#39; % (review_api,))</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\"># TODO: Add in timedelta to column info</span>\n    <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">VERBOSE</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[inspect] make_review_api&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"n\">review_edges</span> <span class=\"o\">=</span> <span class=\"n\">get_review_edges</span><span class=\"p\">(</span><span class=\"n\">cm_list</span><span class=\"p\">,</span> <span class=\"n\">ibs</span><span class=\"o\">=</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">review_cfg</span><span class=\"o\">=</span><span class=\"n\">review_cfg</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Get extra info</span>\n    <span class=\"p\">(</span><span class=\"n\">qaids</span><span class=\"p\">,</span> <span class=\"n\">daids</span><span class=\"p\">,</span> <span class=\"n\">scores</span><span class=\"p\">,</span> <span class=\"n\">ranks</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">review_edges</span>\n\n    <span class=\"n\">RES_THUMB_TEXT</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;ResThumb&#39;</span>  <span class=\"c1\"># NOQA</span>\n    <span class=\"n\">QUERY_THUMB_TEXT</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;querythumb&#39;</span>\n    <span class=\"n\">MATCH_THUMB_TEXT</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;MatchThumb&#39;</span>\n\n    <span class=\"n\">col_name_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"s1\">&#39;result_index&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;score&#39;</span><span class=\"p\">,</span>\n        <span class=\"n\">REVIEWED_STATUS_TEXT</span><span class=\"p\">,</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">review_cfg</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;show_chips&#39;</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"n\">col_name_list</span> <span class=\"o\">+=</span> <span class=\"p\">[</span>\n            <span class=\"n\">MATCHED_STATUS_TEXT</span><span class=\"p\">,</span>\n            <span class=\"n\">QUERY_THUMB_TEXT</span><span class=\"p\">,</span>\n        <span class=\"p\">]</span>\n\n    <span class=\"n\">col_name_list</span> <span class=\"o\">+=</span> <span class=\"p\">[</span>\n        <span class=\"n\">RES_THUMB_TEXT</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;qaid&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;aid&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;rank&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;timedelta&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;dnGt&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;qnGt&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;tags&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;qname&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;name&#39;</span><span class=\"p\">,</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"n\">col_types_dict</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">([</span>\n        <span class=\"p\">(</span><span class=\"s1\">&#39;qaid&#39;</span><span class=\"p\">,</span>       <span class=\"nb\">int</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s1\">&#39;aid&#39;</span><span class=\"p\">,</span>        <span class=\"nb\">int</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s1\">&#39;dnGt&#39;</span><span class=\"p\">,</span>      <span class=\"nb\">int</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s1\">&#39;qnGt&#39;</span><span class=\"p\">,</span>      <span class=\"nb\">int</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s1\">&#39;timedelta&#39;</span><span class=\"p\">,</span>   <span class=\"nb\">float</span><span class=\"p\">),</span>\n        <span class=\"c1\">#(&#39;review&#39;,     &#39;BUTTON&#39;),</span>\n        <span class=\"p\">(</span><span class=\"n\">MATCHED_STATUS_TEXT</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"n\">REVIEWED_STATUS_TEXT</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"n\">QUERY_THUMB_TEXT</span><span class=\"p\">,</span> <span class=\"s1\">&#39;PIXMAP&#39;</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"n\">RES_THUMB_TEXT</span><span class=\"p\">,</span>   <span class=\"s1\">&#39;PIXMAP&#39;</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s1\">&#39;qname&#39;</span><span class=\"p\">,</span>      <span class=\"nb\">str</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">,</span>       <span class=\"nb\">str</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s1\">&#39;score&#39;</span><span class=\"p\">,</span>      <span class=\"nb\">float</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s1\">&#39;rank&#39;</span><span class=\"p\">,</span>       <span class=\"nb\">int</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s1\">&#39;truth&#39;</span><span class=\"p\">,</span>      <span class=\"nb\">bool</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s1\">&#39;opt&#39;</span><span class=\"p\">,</span>        <span class=\"nb\">int</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s1\">&#39;result_index&#39;</span><span class=\"p\">,</span>  <span class=\"nb\">int</span><span class=\"p\">),</span>\n    <span class=\"p\">])</span>\n    <span class=\"n\">timedelta_list</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take_column</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_unflat_annots_timedelta_list</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">qaids</span><span class=\"p\">,</span> <span class=\"n\">daids</span><span class=\"p\">))),</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n    <span class=\"c1\"># TODO: make a display role</span>\n    <span class=\"c1\">#timediff_list = [ut.get_posix_timedelta_str(t, year=True, approx=True) for t in (timedelta_list * 60 * 60)]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_pair_tags</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">):</span>\n        <span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span> <span class=\"o\">=</span> <span class=\"n\">edge</span>\n        <span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">isiterable</span><span class=\"p\">(</span><span class=\"n\">aid1</span><span class=\"p\">),</span> <span class=\"s1\">&#39;aid1=</span><span class=\"si\">%r</span><span class=\"s1\">, aid2=</span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">isiterable</span><span class=\"p\">(</span><span class=\"n\">aid2</span><span class=\"p\">),</span> <span class=\"s1\">&#39;aid1=</span><span class=\"si\">%r</span><span class=\"s1\">, aid2=</span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">)</span>\n        <span class=\"n\">am_rowids</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annotmatch_rowid_from_undirected_superkey</span><span class=\"p\">(</span>\n            <span class=\"p\">[</span><span class=\"n\">aid1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"n\">aid2</span><span class=\"p\">])</span>\n        <span class=\"n\">tag_text</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annotmatch_tag_text</span><span class=\"p\">(</span><span class=\"n\">am_rowids</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">tag_text</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">tag_text</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>\n        <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">tag_text</span><span class=\"p\">)</span>\n\n    <span class=\"n\">col_getter_dict</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">([</span>\n        <span class=\"p\">(</span><span class=\"s1\">&#39;qaid&#39;</span><span class=\"p\">,</span>       <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">qaids</span><span class=\"p\">)),</span>\n        <span class=\"p\">(</span><span class=\"s1\">&#39;aid&#39;</span><span class=\"p\">,</span>        <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">daids</span><span class=\"p\">)),</span>\n        <span class=\"p\">(</span><span class=\"s1\">&#39;dnGt&#39;</span><span class=\"p\">,</span>      <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_num_groundtruth</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s1\">&#39;qnGt&#39;</span><span class=\"p\">,</span>      <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_num_groundtruth</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s1\">&#39;timedelta&#39;</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">timedelta_list</span><span class=\"p\">)),</span>\n        <span class=\"c1\">#(&#39;review&#39;,     lambda rowid: get_buttontup),</span>\n        <span class=\"p\">(</span><span class=\"n\">MATCHED_STATUS_TEXT</span><span class=\"p\">,</span>  <span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"n\">get_match_status</span><span class=\"p\">,</span> <span class=\"n\">ibs</span><span class=\"p\">)),</span>\n        <span class=\"p\">(</span><span class=\"n\">REVIEWED_STATUS_TEXT</span><span class=\"p\">,</span>  <span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"n\">get_reviewed_status</span><span class=\"p\">,</span> <span class=\"n\">ibs</span><span class=\"p\">)),</span>\n        <span class=\"p\">(</span><span class=\"n\">QUERY_THUMB_TEXT</span><span class=\"p\">,</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_chip_thumbtup</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"n\">RES_THUMB_TEXT</span><span class=\"p\">,</span>   <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_chip_thumbtup</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s1\">&#39;qname&#39;</span><span class=\"p\">,</span>      <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_names</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">,</span>       <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_names</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s1\">&#39;score&#39;</span><span class=\"p\">,</span>      <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">scores</span><span class=\"p\">)),</span>\n        <span class=\"p\">(</span><span class=\"s1\">&#39;rank&#39;</span><span class=\"p\">,</span>       <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">ranks</span><span class=\"p\">)),</span>\n        <span class=\"p\">(</span><span class=\"s1\">&#39;result_index&#39;</span><span class=\"p\">,</span>       <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">ranks</span><span class=\"p\">))),</span>\n        <span class=\"p\">(</span><span class=\"s1\">&#39;tags&#39;</span><span class=\"p\">,</span> <span class=\"n\">get_pair_tags</span><span class=\"p\">),</span>\n        <span class=\"c1\">#lambda aid_pair: ibs.get_annotmatch_tag_text(ibs.get_annotmatch_rowid_from_undirected_superkey(ut.ensure_iterable(aid_pair[0]), ut.ensure_iterable(aid_pair[1])))[0]),</span>\n        <span class=\"c1\">#(&#39;truth&#39;,     truths),</span>\n        <span class=\"c1\">#(&#39;opt&#39;,       opts),</span>\n    <span class=\"p\">])</span>\n\n    <span class=\"c1\"># default is 100</span>\n    <span class=\"n\">col_width_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">&#39;score&#39;</span><span class=\"p\">:</span> <span class=\"mi\">75</span><span class=\"p\">,</span>\n        <span class=\"n\">REVIEWED_STATUS_TEXT</span><span class=\"p\">:</span> <span class=\"mi\">75</span><span class=\"p\">,</span>\n        <span class=\"n\">MATCHED_STATUS_TEXT</span><span class=\"p\">:</span> <span class=\"mi\">75</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;rank&#39;</span><span class=\"p\">:</span> <span class=\"mi\">42</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;qaid&#39;</span><span class=\"p\">:</span> <span class=\"mi\">42</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;aid&#39;</span><span class=\"p\">:</span> <span class=\"mi\">42</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;result_index&#39;</span><span class=\"p\">:</span> <span class=\"mi\">42</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;qname&#39;</span><span class=\"p\">:</span> <span class=\"mi\">60</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"mi\">60</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;dnGt&#39;</span><span class=\"p\">:</span> <span class=\"mi\">50</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;timedelta&#39;</span><span class=\"p\">:</span> <span class=\"mi\">75</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;tags&#39;</span><span class=\"p\">:</span> <span class=\"mi\">75</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;qnGt&#39;</span><span class=\"p\">:</span> <span class=\"mi\">50</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">USE_MATCH_THUMBS</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n    <span class=\"k\">if</span> <span class=\"n\">USE_MATCH_THUMBS</span><span class=\"p\">:</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">get_match_thumbtup</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">qaid2_cm</span><span class=\"p\">,</span> <span class=\"n\">qaids</span><span class=\"p\">,</span> <span class=\"n\">daids</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">qreq_</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                               <span class=\"n\">thumbsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"mi\">128</span><span class=\"p\">),</span> <span class=\"n\">match_thumbtup_cache</span><span class=\"o\">=</span><span class=\"p\">{}):</span>\n            <span class=\"n\">daid</span> <span class=\"o\">=</span> <span class=\"n\">daids</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span>\n            <span class=\"n\">qaid</span> <span class=\"o\">=</span> <span class=\"n\">qaids</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span>\n            <span class=\"n\">cm</span> <span class=\"o\">=</span> <span class=\"n\">qaid2_cm</span><span class=\"p\">[</span><span class=\"n\">qaid</span><span class=\"p\">]</span>\n            <span class=\"k\">assert</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">qaid</span> <span class=\"o\">==</span> <span class=\"n\">qaid</span><span class=\"p\">,</span> <span class=\"s1\">&#39;aids do not aggree&#39;</span>\n\n            <span class=\"n\">OLD</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n            <span class=\"k\">if</span> <span class=\"n\">OLD</span><span class=\"p\">:</span>\n                <span class=\"n\">fpath</span> <span class=\"o\">=</span> <span class=\"n\">ensure_match_img</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">cm</span><span class=\"p\">,</span> <span class=\"n\">daid</span><span class=\"p\">,</span> <span class=\"n\">qreq_</span><span class=\"o\">=</span><span class=\"n\">qreq_</span><span class=\"p\">,</span>\n                                         <span class=\"n\">match_thumbtup_cache</span><span class=\"o\">=</span><span class=\"n\">match_thumbtup_cache</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">thumbsize</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n                    <span class=\"n\">thumbsize</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">thumbsize</span><span class=\"p\">,</span> <span class=\"n\">thumbsize</span><span class=\"p\">)</span>\n                <span class=\"n\">thumbtup</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">augpath</span><span class=\"p\">(</span><span class=\"n\">fpath</span><span class=\"p\">,</span> <span class=\"s1\">&#39;thumb_</span><span class=\"si\">%d</span><span class=\"s1\">,</span><span class=\"si\">%d</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">thumbsize</span><span class=\"p\">),</span> <span class=\"n\">fpath</span><span class=\"p\">,</span> <span class=\"n\">thumbsize</span><span class=\"p\">,</span>\n                            <span class=\"p\">[],</span> <span class=\"p\">[])</span>\n                <span class=\"k\">return</span> <span class=\"n\">thumbtup</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Hacky new way of drawing</span>\n                <span class=\"n\">fpath</span><span class=\"p\">,</span> <span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"n\">func2</span> <span class=\"o\">=</span> <span class=\"n\">make_ensure_match_img_nosql_func</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"p\">,</span> <span class=\"n\">cm</span><span class=\"p\">,</span> <span class=\"n\">daid</span><span class=\"p\">)</span>\n                <span class=\"c1\">#match_thumbdir = ibs.get_match_thumbdir()</span>\n                <span class=\"c1\">#match_thumb_fname = get_match_thumb_fname(cm, daid, qreq_)</span>\n                <span class=\"c1\">#fpath = ut.unixjoin(match_thumbdir, match_thumb_fname)</span>\n                <span class=\"n\">thumbdat</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                    <span class=\"s1\">&#39;fpath&#39;</span><span class=\"p\">:</span> <span class=\"n\">fpath</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;thread_func&#39;</span><span class=\"p\">:</span> <span class=\"n\">func</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;main_func&#39;</span><span class=\"p\">:</span> <span class=\"n\">func2</span><span class=\"p\">,</span>\n                    <span class=\"c1\">#&#39;args&#39;: (ibs, cm, daid),</span>\n                    <span class=\"c1\">#&#39;kwargs&#39;: dict(qreq_=qreq_,</span>\n                    <span class=\"c1\">#               match_thumbtup_cache=match_thumbtup_cache)</span>\n                <span class=\"p\">}</span>\n                <span class=\"k\">return</span> <span class=\"n\">thumbdat</span>\n\n        <span class=\"n\">col_name_list</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">col_name_list</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"s1\">&#39;qaid&#39;</span><span class=\"p\">),</span>\n                             <span class=\"n\">MATCH_THUMB_TEXT</span><span class=\"p\">)</span>\n        <span class=\"n\">col_types_dict</span><span class=\"p\">[</span><span class=\"n\">MATCH_THUMB_TEXT</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;PIXMAP&#39;</span>\n        <span class=\"c1\">#col_types_dict[MATCH_THUMB_TEXT] = CustomMatchThumbDelegate</span>\n        <span class=\"n\">qaid2_cm</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">qaid</span><span class=\"p\">:</span> <span class=\"n\">cm</span> <span class=\"k\">for</span> <span class=\"n\">cm</span> <span class=\"ow\">in</span> <span class=\"n\">cm_list</span><span class=\"p\">}</span>\n        <span class=\"n\">get_match_thumbtup_</span> <span class=\"o\">=</span> <span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"n\">get_match_thumbtup</span><span class=\"p\">,</span> <span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">qaid2_cm</span><span class=\"p\">,</span>\n                                      <span class=\"n\">qaids</span><span class=\"p\">,</span> <span class=\"n\">daids</span><span class=\"p\">,</span> <span class=\"n\">qreq_</span><span class=\"o\">=</span><span class=\"n\">qreq_</span><span class=\"p\">,</span>\n                                      <span class=\"n\">match_thumbtup_cache</span><span class=\"o\">=</span><span class=\"p\">{})</span>\n        <span class=\"n\">col_getter_dict</span><span class=\"p\">[</span><span class=\"n\">MATCH_THUMB_TEXT</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">get_match_thumbtup_</span>\n\n    <span class=\"n\">col_bgrole_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"n\">MATCHED_STATUS_TEXT</span> <span class=\"p\">:</span> <span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"n\">get_match_status_bgrole</span><span class=\"p\">,</span> <span class=\"n\">ibs</span><span class=\"p\">),</span>\n        <span class=\"n\">REVIEWED_STATUS_TEXT</span><span class=\"p\">:</span> <span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"n\">get_reviewed_status_bgrole</span><span class=\"p\">,</span> <span class=\"n\">ibs</span><span class=\"p\">),</span>\n    <span class=\"p\">}</span>\n    <span class=\"c1\"># TODO: remove ider dict.</span>\n    <span class=\"c1\"># it is massively unuseful</span>\n    <span class=\"n\">col_ider_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"n\">MATCHED_STATUS_TEXT</span>     <span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s1\">&#39;qaid&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;aid&#39;</span><span class=\"p\">),</span>\n        <span class=\"n\">REVIEWED_STATUS_TEXT</span>    <span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s1\">&#39;qaid&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;aid&#39;</span><span class=\"p\">),</span>\n        <span class=\"s1\">&#39;tags&#39;</span>    <span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s1\">&#39;qaid&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;aid&#39;</span><span class=\"p\">),</span>\n        <span class=\"n\">QUERY_THUMB_TEXT</span> <span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s1\">&#39;qaid&#39;</span><span class=\"p\">),</span>\n        <span class=\"n\">RES_THUMB_TEXT</span> <span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s1\">&#39;aid&#39;</span><span class=\"p\">),</span>\n        <span class=\"s1\">&#39;dnGt&#39;</span>      <span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s1\">&#39;aid&#39;</span><span class=\"p\">),</span>\n        <span class=\"s1\">&#39;qnGt&#39;</span>      <span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s1\">&#39;qaid&#39;</span><span class=\"p\">),</span>\n        <span class=\"s1\">&#39;qname&#39;</span>      <span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s1\">&#39;qaid&#39;</span><span class=\"p\">),</span>\n        <span class=\"s1\">&#39;name&#39;</span>       <span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s1\">&#39;aid&#39;</span><span class=\"p\">),</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">col_setter_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">&#39;qname&#39;</span><span class=\"p\">:</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_annot_names</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_annot_names</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">editable_colnames</span> <span class=\"o\">=</span>  <span class=\"p\">[</span><span class=\"s1\">&#39;truth&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;notes&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;qname&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;name&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;opt&#39;</span><span class=\"p\">]</span>\n\n    <span class=\"n\">sortby</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;score&#39;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_thumb_size</span><span class=\"p\">():</span>\n        <span class=\"k\">return</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">other_cfg</span><span class=\"o\">.</span><span class=\"n\">thumb_size</span>\n\n    <span class=\"n\">col_display_role_func_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">&#39;timedelta&#39;</span><span class=\"p\">:</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_posix_timedelta_str</span><span class=\"p\">,</span> <span class=\"n\">year</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">approx</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">),</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">review_cfg</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;show_chips&#39;</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"k\">del</span> <span class=\"n\">col_getter_dict</span><span class=\"p\">[</span><span class=\"n\">QUERY_THUMB_TEXT</span><span class=\"p\">]</span>\n        <span class=\"k\">del</span> <span class=\"n\">col_getter_dict</span><span class=\"p\">[</span><span class=\"n\">RES_THUMB_TEXT</span><span class=\"p\">]</span>\n        <span class=\"k\">del</span> <span class=\"n\">col_types_dict</span><span class=\"p\">[</span><span class=\"n\">RES_THUMB_TEXT</span><span class=\"p\">]</span>\n        <span class=\"k\">del</span> <span class=\"n\">col_types_dict</span><span class=\"p\">[</span><span class=\"n\">QUERY_THUMB_TEXT</span><span class=\"p\">]</span>\n        <span class=\"k\">del</span> <span class=\"n\">col_ider_dict</span><span class=\"p\">[</span><span class=\"n\">RES_THUMB_TEXT</span><span class=\"p\">]</span>\n        <span class=\"k\">del</span> <span class=\"n\">col_ider_dict</span><span class=\"p\">[</span><span class=\"n\">QUERY_THUMB_TEXT</span><span class=\"p\">]</span>\n        <span class=\"c1\"># del col_bgrole_dict[RES_THUMB_TEXT]</span>\n        <span class=\"c1\"># del col_bgrole_dict[QUERY_THUMB_TEXT]</span>\n\n    <span class=\"c1\"># Insert info into dict</span>\n    <span class=\"n\">review_api</span> <span class=\"o\">=</span> <span class=\"n\">gt</span><span class=\"o\">.</span><span class=\"n\">CustomAPI</span><span class=\"p\">(</span>\n        <span class=\"n\">col_name_list</span><span class=\"o\">=</span><span class=\"n\">col_name_list</span><span class=\"p\">,</span>\n        <span class=\"n\">col_types_dict</span><span class=\"o\">=</span><span class=\"n\">col_types_dict</span><span class=\"p\">,</span>\n        <span class=\"n\">col_getter_dict</span><span class=\"o\">=</span><span class=\"n\">col_getter_dict</span><span class=\"p\">,</span>\n        <span class=\"n\">col_bgrole_dict</span><span class=\"o\">=</span><span class=\"n\">col_bgrole_dict</span><span class=\"p\">,</span>\n        <span class=\"n\">col_ider_dict</span><span class=\"o\">=</span><span class=\"n\">col_ider_dict</span><span class=\"p\">,</span>\n        <span class=\"n\">col_setter_dict</span><span class=\"o\">=</span><span class=\"n\">col_setter_dict</span><span class=\"p\">,</span>\n        <span class=\"n\">editable_colnames</span><span class=\"o\">=</span><span class=\"n\">editable_colnames</span><span class=\"p\">,</span>\n        <span class=\"n\">col_display_role_func_dict</span><span class=\"o\">=</span><span class=\"n\">col_display_role_func_dict</span><span class=\"p\">,</span>\n        <span class=\"n\">sortby</span><span class=\"o\">=</span><span class=\"n\">sortby</span><span class=\"p\">,</span>\n        <span class=\"n\">get_thumb_size</span><span class=\"o\">=</span><span class=\"n\">get_thumb_size</span><span class=\"p\">,</span>\n        <span class=\"n\">sort_reverse</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">col_width_dict</span><span class=\"o\">=</span><span class=\"n\">col_width_dict</span><span class=\"p\">)</span>\n    <span class=\"c1\">#review_api.review_edges = review_edges</span>\n    <span class=\"k\">return</span> <span class=\"n\">review_api</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_match_status\"><a class=\"viewcode-back\" href=\"../../../../ibeis.gui/#ibeis.gui.id_review_api.get_match_status\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">get_match_status</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_pair</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; Data role for status column &quot;&quot;&quot;</span>\n    <span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span> <span class=\"o\">=</span> <span class=\"n\">aid_pair</span>\n    <span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">isiterable</span><span class=\"p\">(</span><span class=\"n\">aid1</span><span class=\"p\">),</span> <span class=\"s1\">&#39;aid1=</span><span class=\"si\">%r</span><span class=\"s1\">, aid2=</span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">isiterable</span><span class=\"p\">(</span><span class=\"n\">aid2</span><span class=\"p\">),</span> <span class=\"s1\">&#39;aid1=</span><span class=\"si\">%r</span><span class=\"s1\">, aid2=</span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">)</span>\n    <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_match_text</span><span class=\"p\">(</span><span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">text</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">AssertionError</span><span class=\"p\">(</span><span class=\"s1\">&#39;impossible state id_review_api&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">text</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_reviewed_status\"><a class=\"viewcode-back\" href=\"../../../../ibeis.gui/#ibeis.gui.id_review_api.get_reviewed_status\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">get_reviewed_status</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_pair</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; Data role for status column &quot;&quot;&quot;</span>\n    <span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span> <span class=\"o\">=</span> <span class=\"n\">aid_pair</span>\n    <span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">isiterable</span><span class=\"p\">(</span><span class=\"n\">aid1</span><span class=\"p\">),</span> <span class=\"s1\">&#39;aid1=</span><span class=\"si\">%r</span><span class=\"s1\">, aid2=</span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">isiterable</span><span class=\"p\">(</span><span class=\"n\">aid2</span><span class=\"p\">),</span> <span class=\"s1\">&#39;aid1=</span><span class=\"si\">%r</span><span class=\"s1\">, aid2=</span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">)</span>\n    <span class=\"c1\"># FIXME: use new api</span>\n    <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_pair_is_reviewed</span><span class=\"p\">([</span><span class=\"n\">aid1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"n\">aid2</span><span class=\"p\">])[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"n\">state_to_text</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"kc\">None</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Unreviewed&#39;</span><span class=\"p\">,</span>\n        <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Auto-reviewed&#39;</span><span class=\"p\">,</span>\n        <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"s1\">&#39;User-reviewed&#39;</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">default</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;??? unknown mode </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">,)</span>\n    <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">state_to_text</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">text</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_match_status_bgrole\"><a class=\"viewcode-back\" href=\"../../../../ibeis.gui/#ibeis.gui.id_review_api.get_match_status_bgrole\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">get_match_status_bgrole</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_pair</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; Background role for status column &quot;&quot;&quot;</span>\n    <span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span> <span class=\"o\">=</span> <span class=\"n\">aid_pair</span>\n    <span class=\"n\">truth</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_match_truth</span><span class=\"p\">(</span><span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">)</span>\n    <span class=\"c1\">#print(&#39;get status bgrole: %r truth=%r&#39; % (aid_pair, truth))</span>\n    <span class=\"n\">truth_color</span> <span class=\"o\">=</span> <span class=\"n\">vh</span><span class=\"o\">.</span><span class=\"n\">get_truth_color</span><span class=\"p\">(</span><span class=\"n\">truth</span><span class=\"p\">,</span> <span class=\"n\">base255</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">lighten_amount</span><span class=\"o\">=</span><span class=\"mf\">0.35</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">truth_color</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_reviewed_status_bgrole\"><a class=\"viewcode-back\" href=\"../../../../ibeis.gui/#ibeis.gui.id_review_api.get_reviewed_status_bgrole\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">get_reviewed_status_bgrole</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_pair</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; Background role for status column &quot;&quot;&quot;</span>\n    <span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span> <span class=\"o\">=</span> <span class=\"n\">aid_pair</span>\n    <span class=\"n\">truth</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_match_truth</span><span class=\"p\">(</span><span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">)</span>\n    <span class=\"n\">annotmach_reviewed</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_pair_is_reviewed</span><span class=\"p\">([</span><span class=\"n\">aid1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"n\">aid2</span><span class=\"p\">])[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"k\">if</span> <span class=\"n\">annotmach_reviewed</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"ow\">or</span> <span class=\"n\">annotmach_reviewed</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">lighten_amount</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"mi\">9</span>\n    <span class=\"k\">elif</span> <span class=\"n\">annotmach_reviewed</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n        <span class=\"n\">lighten_amount</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"mi\">7</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">lighten_amount</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"mi\">35</span>\n    <span class=\"n\">truth_color</span> <span class=\"o\">=</span> <span class=\"n\">vh</span><span class=\"o\">.</span><span class=\"n\">get_truth_color</span><span class=\"p\">(</span><span class=\"n\">truth</span><span class=\"p\">,</span> <span class=\"n\">base255</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                                     <span class=\"n\">lighten_amount</span><span class=\"o\">=</span><span class=\"n\">lighten_amount</span><span class=\"p\">)</span>\n    <span class=\"c1\">#truth = ibs.get_match_truth(aid1, aid2)</span>\n    <span class=\"c1\">#print(&#39;get status bgrole: %r truth=%r&#39; % (aid_pair, truth))</span>\n    <span class=\"c1\">#truth_color = vh.get_truth_color(truth, base255=True, lighten_amount=0.35)</span>\n    <span class=\"k\">return</span> <span class=\"n\">truth_color</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_match_thumb_fname\"><a class=\"viewcode-back\" href=\"../../../../ibeis.gui/#ibeis.gui.id_review_api.get_match_thumb_fname\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">get_match_thumb_fname</span><span class=\"p\">(</span><span class=\"n\">cm</span><span class=\"p\">,</span> <span class=\"n\">daid</span><span class=\"p\">,</span> <span class=\"n\">qreq_</span><span class=\"p\">,</span> <span class=\"n\">view_orientation</span><span class=\"o\">=</span><span class=\"s1\">&#39;vertical&#39;</span><span class=\"p\">,</span>\n                          <span class=\"n\">draw_matches</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">draw_heatmask</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.gui.id_review_api --exec-get_match_thumb_fname</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.gui.id_review_api import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; cm, qreq_ = ibeis.testdata_cm(&#39;PZ_MTEST&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; thumbsize = (128, 128)</span>\n<span class=\"sd\">        &gt;&gt;&gt; daid = cm.get_top_aids()[0]</span>\n<span class=\"sd\">        &gt;&gt;&gt; match_thumb_fname = get_match_thumb_fname(cm, daid, qreq_)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = match_thumb_fname</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">        match_aids=1,1_cfgstr=ubpzwu5k54h6xbnr.jpg</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\"># Make thumbnail name</span>\n    <span class=\"n\">config_hash</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">hashstr27</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">get_cfgstr</span><span class=\"p\">())</span>\n    <span class=\"n\">qaid</span> <span class=\"o\">=</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">qaid</span>\n    <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">qaid</span><span class=\"p\">,</span> <span class=\"n\">daid</span><span class=\"p\">,</span> <span class=\"n\">config_hash</span><span class=\"p\">,</span> <span class=\"n\">draw_matches</span><span class=\"p\">,</span> <span class=\"n\">draw_heatmask</span><span class=\"p\">,</span> <span class=\"n\">view_orientation</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n    <span class=\"n\">match_thumb_fname</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;match_aids=</span><span class=\"si\">%d</span><span class=\"s1\">,</span><span class=\"si\">%d</span><span class=\"s1\">_cfgstr=</span><span class=\"si\">%s</span><span class=\"s1\">_draw=</span><span class=\"si\">%s</span><span class=\"s1\">_mask=</span><span class=\"si\">%s</span><span class=\"s1\">_orientation=</span><span class=\"si\">%s</span><span class=\"s1\">.jpg&#39;</span> <span class=\"o\">%</span> <span class=\"n\">args</span>\n    <span class=\"k\">return</span> <span class=\"n\">match_thumb_fname</span></div>\n\n\n<div class=\"viewcode-block\" id=\"ensure_match_img\"><a class=\"viewcode-back\" href=\"../../../../ibeis.gui/#ibeis.gui.id_review_api.ensure_match_img\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">ensure_match_img</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">cm</span><span class=\"p\">,</span> <span class=\"n\">daid</span><span class=\"p\">,</span> <span class=\"n\">qreq_</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">match_thumbtup_cache</span><span class=\"o\">=</span><span class=\"p\">{}):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.gui.id_review_api --test-ensure_match_img --show</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.gui.id_review_api import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; # build test data</span>\n<span class=\"sd\">        &gt;&gt;&gt; cm, qreq_ = ibeis.testdata_cm()</span>\n<span class=\"sd\">        &gt;&gt;&gt; daid = cm.get_top_aids()[0]</span>\n<span class=\"sd\">        &gt;&gt;&gt; match_thumbtup_cache = {}</span>\n<span class=\"sd\">        &gt;&gt;&gt; # execute function</span>\n<span class=\"sd\">        &gt;&gt;&gt; match_thumb_fpath_ = ensure_match_img(qreq_.ibs, cm, daid, qreq_,</span>\n<span class=\"sd\">        &gt;&gt;&gt;                                       match_thumbtup_cache)</span>\n<span class=\"sd\">        &gt;&gt;&gt; # verify results</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = str(match_thumb_fpath_)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.quit_if_noshow()</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.startfile(match_thumb_fpath_, quote=True)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\">#from os.path import exists</span>\n    <span class=\"n\">match_thumbdir</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_match_thumbdir</span><span class=\"p\">()</span>\n    <span class=\"n\">match_thumb_fname</span> <span class=\"o\">=</span> <span class=\"n\">get_match_thumb_fname</span><span class=\"p\">(</span><span class=\"n\">cm</span><span class=\"p\">,</span> <span class=\"n\">daid</span><span class=\"p\">,</span> <span class=\"n\">qreq_</span><span class=\"p\">)</span>\n    <span class=\"n\">match_thumb_fpath_</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">unixjoin</span><span class=\"p\">(</span><span class=\"n\">match_thumbdir</span><span class=\"p\">,</span> <span class=\"n\">match_thumb_fname</span><span class=\"p\">)</span>\n    <span class=\"c1\">#if exists(match_thumb_fpath_):</span>\n    <span class=\"c1\">#    return match_thumb_fpath_</span>\n    <span class=\"k\">if</span> <span class=\"n\">match_thumb_fpath_</span> <span class=\"ow\">in</span> <span class=\"n\">match_thumbtup_cache</span><span class=\"p\">:</span>\n        <span class=\"n\">fpath</span> <span class=\"o\">=</span> <span class=\"n\">match_thumbtup_cache</span><span class=\"p\">[</span><span class=\"n\">match_thumb_fpath_</span><span class=\"p\">]</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"c1\"># TODO: just draw the image at the correct thumbnail size</span>\n        <span class=\"c1\"># TODO: draw without matplotlib?</span>\n        <span class=\"c1\">#with ut.Timer(&#39;render-1&#39;):</span>\n        <span class=\"n\">fpath</span> <span class=\"o\">=</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">imwrite_single_annotmatch</span><span class=\"p\">(</span>\n            <span class=\"n\">qreq_</span><span class=\"p\">,</span> <span class=\"n\">daid</span><span class=\"p\">,</span> <span class=\"n\">fpath</span><span class=\"o\">=</span><span class=\"n\">match_thumb_fpath_</span><span class=\"p\">,</span> <span class=\"n\">saveax</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"mi\">32</span><span class=\"p\">,</span>\n            <span class=\"n\">notitle</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"c1\">#with ut.Timer(&#39;render-2&#39;):</span>\n        <span class=\"c1\">#    img = cm.render_single_annotmatch(qreq_, daid, fnum=32, notitle=True, dpi=30)</span>\n        <span class=\"c1\">#    cv2.imwrite(match_thumb_fpath_, img)</span>\n        <span class=\"c1\">#    fpath = match_thumb_fpath_</span>\n        <span class=\"c1\">#with ut.Timer(&#39;render-3&#39;):</span>\n        <span class=\"c1\">#fpath = match_thumb_fpath_</span>\n        <span class=\"c1\">#render_config = {</span>\n        <span class=\"c1\">#    &#39;dpi&#39;              : 60,</span>\n        <span class=\"c1\">#    &#39;draw_fmatches&#39;    : True,</span>\n        <span class=\"c1\">#    #&#39;vert&#39;             : view_orientation == &#39;vertical&#39;,</span>\n        <span class=\"c1\">#    &#39;show_aidstr&#39;      : False,</span>\n        <span class=\"c1\">#    &#39;show_name&#39;        : False,</span>\n        <span class=\"c1\">#    &#39;show_exemplar&#39;    : False,</span>\n        <span class=\"c1\">#    &#39;show_num_gt&#39;      : False,</span>\n        <span class=\"c1\">#    &#39;show_timedelta&#39;   : False,</span>\n        <span class=\"c1\">#    &#39;show_name_rank&#39;   : False,</span>\n        <span class=\"c1\">#    &#39;show_score&#39;       : False,</span>\n        <span class=\"c1\">#    &#39;show_annot_score&#39; : False,</span>\n        <span class=\"c1\">#    &#39;show_name_score&#39;  : False,</span>\n        <span class=\"c1\">#    &#39;draw_lbl&#39;         : False,</span>\n        <span class=\"c1\">#    &#39;draw_border&#39;      : False,</span>\n        <span class=\"c1\">#}</span>\n        <span class=\"c1\">#cm.imwrite_single_annotmatch2(qreq_, daid, fpath, fnum=32, notitle=True, **render_config)</span>\n        <span class=\"c1\">#print(&#39;fpath = %r&#39; % (fpath,))</span>\n        <span class=\"n\">match_thumbtup_cache</span><span class=\"p\">[</span><span class=\"n\">match_thumb_fpath_</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">fpath</span>\n    <span class=\"k\">return</span> <span class=\"n\">fpath</span></div>\n\n\n<div class=\"viewcode-block\" id=\"make_ensure_match_img_nosql_func\"><a class=\"viewcode-back\" href=\"../../../../ibeis.gui/#ibeis.gui.id_review_api.make_ensure_match_img_nosql_func\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">make_ensure_match_img_nosql_func</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"p\">,</span> <span class=\"n\">cm</span><span class=\"p\">,</span> <span class=\"n\">daid</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.gui.id_review_api --test-ensure_match_img --show</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.gui.id_review_api import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; # build test data</span>\n<span class=\"sd\">        &gt;&gt;&gt; cm, qreq_ = ibeis.testdata_cm()</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = qreq_.ibs</span>\n<span class=\"sd\">        &gt;&gt;&gt; daid = cm.get_top_aids()[0]</span>\n<span class=\"sd\">        &gt;&gt;&gt; match_thumbtup_cache = {}</span>\n<span class=\"sd\">        &gt;&gt;&gt; # execute function</span>\n<span class=\"sd\">        &gt;&gt;&gt; match_thumb_fpath_ = ensure_match_img(qreq_.ibs, cm, daid, qreq_, match_thumbtup_cache)</span>\n<span class=\"sd\">        &gt;&gt;&gt; # verify results</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = str(match_thumb_fpath_)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.quit_if_noshow()</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.startfile(match_thumb_fpath_, quote=True)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\">#import ibeis.viz</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.viz</span> <span class=\"k\">import</span> <span class=\"n\">viz_matches</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">cv2</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">io</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">plottool</span> <span class=\"k\">as</span> <span class=\"nn\">pt</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">vtool</span> <span class=\"k\">as</span> <span class=\"nn\">vt</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">matplotlib</span> <span class=\"k\">as</span> <span class=\"nn\">mpl</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;PairwiseMatch&#39;</span><span class=\"p\">:</span>\n        <span class=\"c1\"># HACK DO THIS THE VTOOL WAY</span>\n        <span class=\"n\">match</span> <span class=\"o\">=</span> <span class=\"n\">cm</span>\n        <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">qreq_</span>  <span class=\"c1\"># VERY HACK</span>\n        <span class=\"n\">match_thumbdir</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_match_thumbdir</span><span class=\"p\">()</span>\n        <span class=\"n\">cfgstr</span> <span class=\"o\">=</span> <span class=\"nb\">hash</span><span class=\"p\">(</span><span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">)</span>  <span class=\"c1\"># HACK only works if config is already a hashdict</span>\n        <span class=\"n\">match_thumb_fname</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;tmpmatch-</span><span class=\"si\">%d</span><span class=\"s1\">-</span><span class=\"si\">%d</span><span class=\"s1\">-</span><span class=\"si\">%s</span><span class=\"s1\">.jpg&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">annot1</span><span class=\"p\">[</span><span class=\"s1\">&#39;aid&#39;</span><span class=\"p\">],</span> <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">annot2</span><span class=\"p\">[</span><span class=\"s1\">&#39;aid&#39;</span><span class=\"p\">],</span> <span class=\"n\">cfgstr</span><span class=\"p\">)</span>\n        <span class=\"n\">fpath</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">unixjoin</span><span class=\"p\">(</span><span class=\"n\">match_thumbdir</span><span class=\"p\">,</span> <span class=\"n\">match_thumb_fname</span><span class=\"p\">)</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">main_thread_load2</span><span class=\"p\">():</span>\n            <span class=\"n\">rchip1</span><span class=\"p\">,</span> <span class=\"n\">kpts1</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dict_take</span><span class=\"p\">(</span><span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">annot1</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">&#39;rchip&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;kpts&#39;</span><span class=\"p\">])</span>\n            <span class=\"n\">rchip2</span><span class=\"p\">,</span> <span class=\"n\">kpts2</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dict_take</span><span class=\"p\">(</span><span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">annot2</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">&#39;rchip&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;kpts&#39;</span><span class=\"p\">])</span>\n            <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">match</span><span class=\"p\">,)</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">nosql_draw2</span><span class=\"p\">(</span><span class=\"n\">check_func</span><span class=\"p\">,</span> <span class=\"n\">match</span><span class=\"p\">):</span>\n            <span class=\"kn\">from</span> <span class=\"nn\">matplotlib.backends.backend_agg</span> <span class=\"k\">import</span> <span class=\"n\">FigureCanvas</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"kn\">from</span> <span class=\"nn\">matplotlib.backends.backend_agg</span> <span class=\"k\">import</span> <span class=\"n\">Figure</span>\n            <span class=\"k\">except</span> <span class=\"ne\">ImportError</span><span class=\"p\">:</span>\n                <span class=\"kn\">from</span> <span class=\"nn\">matplotlib.figure</span> <span class=\"k\">import</span> <span class=\"n\">Figure</span>\n\n            <span class=\"n\">was_interactive</span> <span class=\"o\">=</span> <span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">is_interactive</span><span class=\"p\">()</span>\n            <span class=\"k\">if</span> <span class=\"n\">was_interactive</span><span class=\"p\">:</span>\n                <span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">interactive</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n            <span class=\"c1\">#fnum = 32</span>\n            <span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">Figure</span><span class=\"p\">()</span>\n            <span class=\"n\">canvas</span> <span class=\"o\">=</span> <span class=\"n\">FigureCanvas</span><span class=\"p\">(</span><span class=\"n\">fig</span><span class=\"p\">)</span>  <span class=\"c1\"># NOQA</span>\n            <span class=\"c1\">#fig.clf()</span>\n            <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">add_subplot</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">check_func</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">check_func</span><span class=\"p\">():</span>\n                <span class=\"k\">return</span>\n            <span class=\"n\">ax</span><span class=\"p\">,</span> <span class=\"n\">xywh1</span><span class=\"p\">,</span> <span class=\"n\">xywh2</span> <span class=\"o\">=</span> <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">ax</span><span class=\"o\">=</span><span class=\"n\">ax</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">check_func</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">check_func</span><span class=\"p\">():</span>\n                <span class=\"k\">return</span>\n            <span class=\"n\">savekw</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                <span class=\"c1\"># &#39;dpi&#39; : 60,</span>\n                <span class=\"s1\">&#39;dpi&#39;</span> <span class=\"p\">:</span> <span class=\"mi\">80</span><span class=\"p\">,</span>\n            <span class=\"p\">}</span>\n            <span class=\"n\">axes_extents</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">extract_axes_extents</span><span class=\"p\">(</span><span class=\"n\">fig</span><span class=\"p\">)</span>\n            <span class=\"c1\">#assert len(axes_extents) == 1, &#39;more than one axes&#39;</span>\n            <span class=\"n\">extent</span> <span class=\"o\">=</span> <span class=\"n\">axes_extents</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"k\">with</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">BytesIO</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">stream</span><span class=\"p\">:</span>\n                <span class=\"c1\"># This call takes 23% - 15% of the time depending on settings</span>\n                <span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"n\">stream</span><span class=\"p\">,</span> <span class=\"n\">bbox_inches</span><span class=\"o\">=</span><span class=\"n\">extent</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">savekw</span><span class=\"p\">)</span>\n                <span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">seek</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n                <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">fromstring</span><span class=\"p\">(</span><span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">getvalue</span><span class=\"p\">(),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">uint8</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">check_func</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">check_func</span><span class=\"p\">():</span>\n                <span class=\"k\">return</span>\n            <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">(</span><span class=\"n\">fig</span><span class=\"p\">)</span>\n            <span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">imdecode</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"n\">thumbsize</span> <span class=\"o\">=</span> <span class=\"mi\">221</span>\n            <span class=\"n\">max_dsize</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">thumbsize</span><span class=\"p\">,</span> <span class=\"n\">thumbsize</span><span class=\"p\">)</span>\n            <span class=\"n\">dsize</span><span class=\"p\">,</span> <span class=\"n\">sx</span><span class=\"p\">,</span> <span class=\"n\">sy</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">resized_clamped_thumb_dims</span><span class=\"p\">(</span><span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">get_size</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">),</span> <span class=\"n\">max_dsize</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">check_func</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">check_func</span><span class=\"p\">():</span>\n                <span class=\"k\">return</span>\n            <span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">resize</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"n\">dsize</span><span class=\"p\">)</span>\n            <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">imwrite</span><span class=\"p\">(</span><span class=\"n\">fpath</span><span class=\"p\">,</span> <span class=\"n\">image</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">check_func</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">check_func</span><span class=\"p\">():</span>\n                <span class=\"k\">return</span>\n            <span class=\"c1\">#fig.savefig(fpath, bbox_inches=extent, **savekw)</span>\n        <span class=\"c1\">#match_thumbtup_cache[match_thumb_fpath_] = fpath</span>\n        <span class=\"k\">return</span> <span class=\"n\">fpath</span><span class=\"p\">,</span> <span class=\"n\">nosql_draw2</span><span class=\"p\">,</span> <span class=\"n\">main_thread_load2</span>\n\n    <span class=\"n\">aid1</span> <span class=\"o\">=</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">qaid</span>\n    <span class=\"n\">aid2</span> <span class=\"o\">=</span> <span class=\"n\">daid</span>\n\n    <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">ibs</span>\n    <span class=\"n\">resize_factor</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"mi\">5</span>\n\n    <span class=\"n\">match_thumbdir</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_match_thumbdir</span><span class=\"p\">()</span>\n    <span class=\"n\">match_thumb_fname</span> <span class=\"o\">=</span> <span class=\"n\">get_match_thumb_fname</span><span class=\"p\">(</span><span class=\"n\">cm</span><span class=\"p\">,</span> <span class=\"n\">daid</span><span class=\"p\">,</span> <span class=\"n\">qreq_</span><span class=\"p\">)</span>\n    <span class=\"n\">fpath</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">unixjoin</span><span class=\"p\">(</span><span class=\"n\">match_thumbdir</span><span class=\"p\">,</span> <span class=\"n\">match_thumb_fname</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">main_thread_load</span><span class=\"p\">():</span>\n        <span class=\"c1\"># This gets executed in the main thread and collects data</span>\n        <span class=\"c1\"># from sql</span>\n        <span class=\"n\">rchip1_fpath</span><span class=\"p\">,</span> <span class=\"n\">rchip2_fpath</span><span class=\"p\">,</span> <span class=\"n\">kpts1</span><span class=\"p\">,</span> <span class=\"n\">kpts2</span> <span class=\"o\">=</span> <span class=\"n\">viz_matches</span><span class=\"o\">.</span><span class=\"n\">_get_annot_pair_info</span><span class=\"p\">(</span>\n            <span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">,</span> <span class=\"n\">qreq_</span><span class=\"p\">,</span> <span class=\"n\">draw_fmatches</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">as_fpath</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">rchip1_fpath</span><span class=\"p\">,</span> <span class=\"n\">rchip2_fpath</span><span class=\"p\">,</span> <span class=\"n\">kpts1</span><span class=\"p\">,</span> <span class=\"n\">kpts2</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">nosql_draw</span><span class=\"p\">(</span><span class=\"n\">check_func</span><span class=\"p\">,</span> <span class=\"n\">rchip1_fpath</span><span class=\"p\">,</span> <span class=\"n\">rchip2_fpath</span><span class=\"p\">,</span> <span class=\"n\">kpts1</span><span class=\"p\">,</span> <span class=\"n\">kpts2</span><span class=\"p\">):</span>\n        <span class=\"c1\"># This gets executed in the child thread and does drawing async style</span>\n        <span class=\"c1\">#from matplotlib.backends.backend_pdf import FigureCanvasPdf as FigureCanvas</span>\n        <span class=\"c1\">#from matplotlib.backends.backend_pdf import Figure</span>\n        <span class=\"c1\">#from matplotlib.backends.backend_svg import FigureCanvas</span>\n        <span class=\"c1\">#from matplotlib.backends.backend_svg import Figure</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">matplotlib.backends.backend_agg</span> <span class=\"k\">import</span> <span class=\"n\">FigureCanvas</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"kn\">from</span> <span class=\"nn\">matplotlib.backends.backend_agg</span> <span class=\"k\">import</span> <span class=\"n\">Figure</span>\n        <span class=\"k\">except</span> <span class=\"ne\">ImportError</span><span class=\"p\">:</span>\n            <span class=\"kn\">from</span> <span class=\"nn\">matplotlib.figure</span> <span class=\"k\">import</span> <span class=\"n\">Figure</span>\n\n        <span class=\"n\">kpts1_</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">offset_kpts</span><span class=\"p\">(</span><span class=\"n\">kpts1</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">resize_factor</span><span class=\"p\">,</span> <span class=\"n\">resize_factor</span><span class=\"p\">))</span>\n        <span class=\"n\">kpts2_</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">offset_kpts</span><span class=\"p\">(</span><span class=\"n\">kpts2</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">resize_factor</span><span class=\"p\">,</span> <span class=\"n\">resize_factor</span><span class=\"p\">))</span>\n\n        <span class=\"c1\">#from matplotlib.figure import Figure</span>\n        <span class=\"k\">if</span> <span class=\"n\">check_func</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">check_func</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span>\n\n        <span class=\"n\">rchip1</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">imread</span><span class=\"p\">(</span><span class=\"n\">rchip1_fpath</span><span class=\"p\">)</span>\n        <span class=\"n\">rchip1</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">resize_image_by_scale</span><span class=\"p\">(</span><span class=\"n\">rchip1</span><span class=\"p\">,</span> <span class=\"n\">resize_factor</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">check_func</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">check_func</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span>\n        <span class=\"n\">rchip2</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">imread</span><span class=\"p\">(</span><span class=\"n\">rchip2_fpath</span><span class=\"p\">)</span>\n        <span class=\"n\">rchip2</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">resize_image_by_scale</span><span class=\"p\">(</span><span class=\"n\">rchip2</span><span class=\"p\">,</span> <span class=\"n\">resize_factor</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">check_func</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">check_func</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span>\n\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">idx</span> <span class=\"o\">=</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">daid2_idx</span><span class=\"p\">[</span><span class=\"n\">daid</span><span class=\"p\">]</span>\n            <span class=\"n\">fm</span>   <span class=\"o\">=</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">fm_list</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span>\n            <span class=\"n\">fsv</span>  <span class=\"o\">=</span> <span class=\"kc\">None</span> <span class=\"k\">if</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">fsv_list</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"k\">else</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">fsv_list</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span>\n            <span class=\"n\">fs</span>   <span class=\"o\">=</span> <span class=\"kc\">None</span> <span class=\"k\">if</span> <span class=\"n\">fsv</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"k\">else</span> <span class=\"n\">fsv</span><span class=\"o\">.</span><span class=\"n\">prod</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n            <span class=\"n\">fm</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"n\">fs</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n            <span class=\"n\">fsv</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n        <span class=\"n\">maxnum</span> <span class=\"o\">=</span> <span class=\"mi\">200</span>\n        <span class=\"k\">if</span> <span class=\"n\">fs</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">fs</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"n\">maxnum</span><span class=\"p\">:</span>\n            <span class=\"c1\"># HACK TO ONLY SHOW TOP MATCHES</span>\n            <span class=\"n\">sortx</span> <span class=\"o\">=</span> <span class=\"n\">fs</span><span class=\"o\">.</span><span class=\"n\">argsort</span><span class=\"p\">()[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"n\">fm</span> <span class=\"o\">=</span> <span class=\"n\">fm</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">sortx</span><span class=\"p\">[:</span><span class=\"n\">maxnum</span><span class=\"p\">],</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"n\">fs</span> <span class=\"o\">=</span> <span class=\"n\">fs</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">sortx</span><span class=\"p\">[:</span><span class=\"n\">maxnum</span><span class=\"p\">],</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n        <span class=\"n\">was_interactive</span> <span class=\"o\">=</span> <span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">is_interactive</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">was_interactive</span><span class=\"p\">:</span>\n            <span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">interactive</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"c1\">#fnum = 32</span>\n        <span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">Figure</span><span class=\"p\">()</span>\n        <span class=\"n\">canvas</span> <span class=\"o\">=</span> <span class=\"n\">FigureCanvas</span><span class=\"p\">(</span><span class=\"n\">fig</span><span class=\"p\">)</span>  <span class=\"c1\"># NOQA</span>\n        <span class=\"c1\">#fig.clf()</span>\n        <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">add_subplot</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">check_func</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">check_func</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span>\n        <span class=\"c1\">#fig = pt.plt.figure(fnum)</span>\n        <span class=\"c1\">#H1 = np.eye(3)</span>\n        <span class=\"c1\">#H2 = np.eye(3)</span>\n        <span class=\"c1\">#H1[0, 0] = .5</span>\n        <span class=\"c1\">#H1[1, 1] = .5</span>\n        <span class=\"c1\">#H2[0, 0] = .5</span>\n        <span class=\"c1\">#H2[1, 1] = .5</span>\n        <span class=\"n\">ax</span><span class=\"p\">,</span> <span class=\"n\">xywh1</span><span class=\"p\">,</span> <span class=\"n\">xywh2</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">show_chipmatch2</span><span class=\"p\">(</span><span class=\"n\">rchip1</span><span class=\"p\">,</span> <span class=\"n\">rchip2</span><span class=\"p\">,</span> <span class=\"n\">kpts1_</span><span class=\"p\">,</span> <span class=\"n\">kpts2_</span><span class=\"p\">,</span> <span class=\"n\">fm</span><span class=\"p\">,</span>\n                                              <span class=\"n\">fs</span><span class=\"o\">=</span><span class=\"n\">fs</span><span class=\"p\">,</span> <span class=\"n\">colorbar_</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">ax</span><span class=\"o\">=</span><span class=\"n\">ax</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">check_func</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">check_func</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span>\n        <span class=\"n\">savekw</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"c1\"># &#39;dpi&#39; : 60,</span>\n            <span class=\"s1\">&#39;dpi&#39;</span> <span class=\"p\">:</span> <span class=\"mi\">80</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">axes_extents</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">extract_axes_extents</span><span class=\"p\">(</span><span class=\"n\">fig</span><span class=\"p\">)</span>\n        <span class=\"c1\">#assert len(axes_extents) == 1, &#39;more than one axes&#39;</span>\n        <span class=\"n\">extent</span> <span class=\"o\">=</span> <span class=\"n\">axes_extents</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">with</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">BytesIO</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">stream</span><span class=\"p\">:</span>\n            <span class=\"c1\"># This call takes 23% - 15% of the time depending on settings</span>\n            <span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"n\">stream</span><span class=\"p\">,</span> <span class=\"n\">bbox_inches</span><span class=\"o\">=</span><span class=\"n\">extent</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">savekw</span><span class=\"p\">)</span>\n            <span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">seek</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">fromstring</span><span class=\"p\">(</span><span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">getvalue</span><span class=\"p\">(),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">uint8</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">check_func</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">check_func</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span>\n        <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">(</span><span class=\"n\">fig</span><span class=\"p\">)</span>\n        <span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">imdecode</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">thumbsize</span> <span class=\"o\">=</span> <span class=\"mi\">221</span>\n        <span class=\"n\">max_dsize</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">thumbsize</span><span class=\"p\">,</span> <span class=\"n\">thumbsize</span><span class=\"p\">)</span>\n        <span class=\"n\">dsize</span><span class=\"p\">,</span> <span class=\"n\">sx</span><span class=\"p\">,</span> <span class=\"n\">sy</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">resized_clamped_thumb_dims</span><span class=\"p\">(</span><span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">get_size</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">),</span> <span class=\"n\">max_dsize</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">check_func</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">check_func</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span>\n        <span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">resize</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"n\">dsize</span><span class=\"p\">)</span>\n        <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">imwrite</span><span class=\"p\">(</span><span class=\"n\">fpath</span><span class=\"p\">,</span> <span class=\"n\">image</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">check_func</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">check_func</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span>\n        <span class=\"c1\">#fig.savefig(fpath, bbox_inches=extent, **savekw)</span>\n    <span class=\"c1\">#match_thumbtup_cache[match_thumb_fpath_] = fpath</span>\n    <span class=\"k\">return</span> <span class=\"n\">fpath</span><span class=\"p\">,</span> <span class=\"n\">nosql_draw</span><span class=\"p\">,</span> <span class=\"n\">main_thread_load</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_photobomber_map\"><a class=\"viewcode-back\" href=\"../../../../ibeis.gui/#ibeis.gui.id_review_api.get_photobomber_map\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">get_photobomber_map</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"n\">aid_to_nid</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Builds map of which names that photobomb other names.</span>\n\n<span class=\"sd\">    python -m ibeis.gui.id_review_api --test-test_review_widget --show --db PZ_MTEST -a default:qindex=0</span>\n\n<span class=\"sd\">    &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">    &gt;&gt;&gt; dbdir = ut.truepath(&#39;~/lev/media/danger/GGR/GGR-IBEIS&#39;)</span>\n<span class=\"sd\">    &gt;&gt;&gt; ibs = ibeis.opendb(dbdir=&#39;/home/joncrall/lev/media/danger/GGR/GGR-IBEIS&#39;)</span>\n<span class=\"sd\">    &gt;&gt;&gt; filter_kw = {</span>\n<span class=\"sd\">    &gt;&gt;&gt;     &#39;multiple&#39;: False,</span>\n<span class=\"sd\">    &gt;&gt;&gt;     &#39;minqual&#39;: &#39;good&#39;,</span>\n<span class=\"sd\">    &gt;&gt;&gt;     &#39;is_known&#39;: True,</span>\n<span class=\"sd\">    &gt;&gt;&gt;     &#39;min_pername&#39;: 2,</span>\n<span class=\"sd\">    &gt;&gt;&gt;     &#39;view&#39;: [&#39;right&#39;],</span>\n<span class=\"sd\">    &gt;&gt;&gt; }</span>\n<span class=\"sd\">    &gt;&gt;&gt; aids = ibs.filter_annots_general(ibs.get_valid_aids(), filter_kw=filter_kw)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">ams_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annotmatch_rowids_from_aid</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">)</span>\n    <span class=\"n\">flags_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">unflat_map</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annotmatch_prop</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Photobomb&#39;</span><span class=\"p\">),</span> <span class=\"n\">ams_list</span><span class=\"p\">)</span>\n    <span class=\"n\">pb_ams</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">zipcompress</span><span class=\"p\">(</span><span class=\"n\">ams_list</span><span class=\"p\">,</span> <span class=\"n\">flags_list</span><span class=\"p\">)</span>\n    <span class=\"n\">has_pb_ams</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">ams</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"k\">for</span> <span class=\"n\">ams</span> <span class=\"ow\">in</span> <span class=\"n\">pb_ams</span><span class=\"p\">]</span>\n    <span class=\"n\">pb_ams_</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">pb_ams</span><span class=\"p\">,</span> <span class=\"n\">has_pb_ams</span><span class=\"p\">)</span>\n    <span class=\"c1\">#aids_ = ut.compress(aids, has_pb_ams)</span>\n    <span class=\"n\">pb_ams_flat</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">pb_ams_</span><span class=\"p\">)</span>\n\n    <span class=\"n\">pb_aids1_</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annotmatch_aid1</span><span class=\"p\">(</span><span class=\"n\">pb_ams_flat</span><span class=\"p\">)</span>\n    <span class=\"n\">pb_aids2_</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annotmatch_aid2</span><span class=\"p\">(</span><span class=\"n\">pb_ams_flat</span><span class=\"p\">)</span>\n\n    <span class=\"n\">pb_aid_pairs_</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">pb_aids1_</span><span class=\"p\">,</span> <span class=\"n\">pb_aids2_</span><span class=\"p\">))</span>\n    <span class=\"k\">if</span> <span class=\"n\">aid_to_nid</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">pb_nid_pairs_</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">unflat_map</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_nids</span><span class=\"p\">,</span> <span class=\"n\">pb_aid_pairs_</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">pb_nid_pairs_</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">unflat_map</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">,</span> <span class=\"n\">aid_to_nid</span><span class=\"p\">),</span> <span class=\"n\">pb_aid_pairs_</span><span class=\"p\">)</span>\n\n    <span class=\"c1\">#invalid_aid_map = ut.ddict(set)</span>\n    <span class=\"c1\">#for aid1, aid2 in pb_aid_pairs_:</span>\n    <span class=\"c1\">#    if aid1 != aid2:</span>\n    <span class=\"c1\">#        invalid_aid_map[aid1].add(aid2)</span>\n    <span class=\"c1\">#        invalid_aid_map[aid2].add(aid1)</span>\n\n    <span class=\"n\">invalid_nid_map</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ddict</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">nid2</span> <span class=\"ow\">in</span> <span class=\"n\">pb_nid_pairs_</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">nid1</span> <span class=\"o\">!=</span> <span class=\"n\">nid2</span><span class=\"p\">:</span>\n            <span class=\"n\">invalid_nid_map</span><span class=\"p\">[</span><span class=\"n\">nid1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">nid2</span><span class=\"p\">)</span>\n            <span class=\"n\">invalid_nid_map</span><span class=\"p\">[</span><span class=\"n\">nid2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">nid1</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">invalid_nid_map</span></div>\n</pre></div>", "current_page_name": "_modules/ibeis/gui/id_review_api", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}