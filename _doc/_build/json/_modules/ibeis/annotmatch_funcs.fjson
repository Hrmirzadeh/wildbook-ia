{"parents": [{"link": "../../", "title": "Module code"}, {"link": "../", "title": "ibeis"}], "title": "ibeis.annotmatch_funcs", "body": "<h1>Source code for ibeis.annotmatch_funcs</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"k\">import</span> <span class=\"n\">absolute_import</span><span class=\"p\">,</span> <span class=\"n\">division</span><span class=\"p\">,</span> <span class=\"n\">print_function</span><span class=\"p\">,</span> <span class=\"n\">unicode_literals</span>\n<span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n<span class=\"kn\">import</span> <span class=\"nn\">ubelt</span> <span class=\"k\">as</span> <span class=\"nn\">ub</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">six.moves</span> <span class=\"k\">import</span> <span class=\"nb\">zip</span><span class=\"p\">,</span> <span class=\"nb\">map</span><span class=\"p\">,</span> <span class=\"nb\">filter</span><span class=\"p\">,</span> <span class=\"nb\">range</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"kn\">from</span> <span class=\"nn\">functools</span> <span class=\"k\">import</span> <span class=\"n\">partial</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.control</span> <span class=\"k\">import</span> <span class=\"n\">controller_inject</span>\n<span class=\"nb\">print</span><span class=\"p\">,</span> <span class=\"n\">rrr</span><span class=\"p\">,</span> <span class=\"n\">profile</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">inject2</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Create dectorator to inject functions in this module into the IBEISController</span>\n<span class=\"n\">CLASS_INJECT_KEY</span><span class=\"p\">,</span> <span class=\"n\">register_ibs_method</span> <span class=\"o\">=</span> <span class=\"n\">controller_inject</span><span class=\"o\">.</span><span class=\"n\">make_ibs_register_decorator</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># def get_annotmatch_rowids_subset_from_aids(ibs, aids):</span>\n<span class=\"c1\">#     pass</span>\n\n\n<div class=\"viewcode-block\" id=\"get_annotmatch_rowids_from_aid1\"><a class=\"viewcode-back\" href=\"../../../ibeis/#ibeis.annotmatch_funcs.get_annotmatch_rowids_from_aid1\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"nd\">@profile</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_annotmatch_rowids_from_aid1</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid1_list</span><span class=\"p\">,</span> <span class=\"n\">eager</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">nInput</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    TODO autogenerate</span>\n\n<span class=\"sd\">    Returns a list of the aids that were reviewed as candidate matches to the input aid</span>\n\n<span class=\"sd\">    aid_list = ibs.get_valid_aids()</span>\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (IBEISController):  ibeis controller object</span>\n<span class=\"sd\">        aid1_list (list):</span>\n<span class=\"sd\">        eager (bool): (default = True)</span>\n<span class=\"sd\">        nInput (None): (default = None)</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        list: annotmatch_rowid_list</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.control</span> <span class=\"k\">import</span> <span class=\"n\">manual_annotmatch_funcs</span>\n    <span class=\"n\">colnames</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">manual_annotmatch_funcs</span><span class=\"o\">.</span><span class=\"n\">ANNOTMATCH_ROWID</span><span class=\"p\">,)</span>\n    <span class=\"c1\"># FIXME: col_rowid is not correct</span>\n    <span class=\"n\">params_iter</span> <span class=\"o\">=</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">aid1_list</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"c1\"># HACK IN INDEX</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span>\n            <span class=\"sd\">&#39;&#39;&#39;</span>\n<span class=\"sd\">            CREATE INDEX IF NOT EXISTS aid1_to_am ON {ANNOTMATCH_TABLE} ({annot_rowid1});</span>\n<span class=\"sd\">            &#39;&#39;&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">ANNOTMATCH_TABLE</span><span class=\"o\">=</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">ANNOTMATCH_TABLE</span><span class=\"p\">,</span>\n                       <span class=\"n\">annot_rowid1</span><span class=\"o\">=</span><span class=\"n\">manual_annotmatch_funcs</span><span class=\"o\">.</span><span class=\"n\">ANNOT_ROWID1</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">fetchall</span><span class=\"p\">()</span>\n    <span class=\"n\">where_colnames</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">manual_annotmatch_funcs</span><span class=\"o\">.</span><span class=\"n\">ANNOT_ROWID1</span><span class=\"p\">]</span>\n    <span class=\"n\">annotmatch_rowid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">get_where_eq</span><span class=\"p\">(</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">ANNOTMATCH_TABLE</span><span class=\"p\">,</span> <span class=\"n\">colnames</span><span class=\"p\">,</span> <span class=\"n\">params_iter</span><span class=\"p\">,</span> <span class=\"n\">where_colnames</span><span class=\"p\">,</span>\n        <span class=\"n\">eager</span><span class=\"o\">=</span><span class=\"n\">eager</span><span class=\"p\">,</span> <span class=\"n\">nInput</span><span class=\"o\">=</span><span class=\"n\">nInput</span><span class=\"p\">,</span> <span class=\"n\">unpack_scalars</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">annotmatch_rowid_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">sorted</span><span class=\"p\">,</span> <span class=\"n\">annotmatch_rowid_list</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">annotmatch_rowid_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_annotmatch_rowids_from_aid2\"><a class=\"viewcode-back\" href=\"../../../ibeis/#ibeis.annotmatch_funcs.get_annotmatch_rowids_from_aid2\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"nd\">@profile</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_annotmatch_rowids_from_aid2</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid2_list</span><span class=\"p\">,</span> <span class=\"n\">eager</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">nInput</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                                    <span class=\"n\">force_method</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    # This one is slow because aid2 is the second part of the index</span>\n<span class=\"sd\">    Returns a list of the aids that were reviewed as candidate matches to the input aid</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.control</span> <span class=\"k\">import</span> <span class=\"n\">manual_annotmatch_funcs</span>\n    <span class=\"k\">if</span> <span class=\"n\">nInput</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">nInput</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aid2_list</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"c1\"># HACK IN INDEX</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span>\n            <span class=\"sd\">&#39;&#39;&#39;</span>\n<span class=\"sd\">            CREATE INDEX IF NOT EXISTS aid2_to_am ON {ANNOTMATCH_TABLE} ({annot_rowid2});</span>\n<span class=\"sd\">            &#39;&#39;&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">ANNOTMATCH_TABLE</span><span class=\"o\">=</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">ANNOTMATCH_TABLE</span><span class=\"p\">,</span>\n                       <span class=\"n\">annot_rowid2</span><span class=\"o\">=</span><span class=\"n\">manual_annotmatch_funcs</span><span class=\"o\">.</span><span class=\"n\">ANNOT_ROWID2</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">fetchall</span><span class=\"p\">()</span>\n    <span class=\"n\">colnames</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">manual_annotmatch_funcs</span><span class=\"o\">.</span><span class=\"n\">ANNOTMATCH_ROWID</span><span class=\"p\">,)</span>\n    <span class=\"c1\"># FIXME: col_rowid is not correct</span>\n    <span class=\"n\">params_iter</span> <span class=\"o\">=</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">aid2_list</span><span class=\"p\">)</span>\n    <span class=\"n\">where_colnames</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">manual_annotmatch_funcs</span><span class=\"o\">.</span><span class=\"n\">ANNOT_ROWID2</span><span class=\"p\">]</span>\n    <span class=\"n\">annotmatch_rowid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">get_where_eq</span><span class=\"p\">(</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">ANNOTMATCH_TABLE</span><span class=\"p\">,</span> <span class=\"n\">colnames</span><span class=\"p\">,</span> <span class=\"n\">params_iter</span><span class=\"p\">,</span> <span class=\"n\">where_colnames</span><span class=\"p\">,</span>\n        <span class=\"n\">eager</span><span class=\"o\">=</span><span class=\"n\">eager</span><span class=\"p\">,</span> <span class=\"n\">nInput</span><span class=\"o\">=</span><span class=\"n\">nInput</span><span class=\"p\">,</span> <span class=\"n\">unpack_scalars</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">annotmatch_rowid_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">sorted</span><span class=\"p\">,</span> <span class=\"n\">annotmatch_rowid_list</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">annotmatch_rowid_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_annotmatch_rowids_from_aid\"><a class=\"viewcode-back\" href=\"../../../ibeis/#ibeis.annotmatch_funcs.get_annotmatch_rowids_from_aid\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"nd\">@profile</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_annotmatch_rowids_from_aid</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">eager</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">nInput</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                                   <span class=\"n\">force_method</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Undirected version</span>\n<span class=\"sd\">    Returns a list of the aids that were reviewed as candidate matches to the input aid</span>\n<span class=\"sd\">    aid_list = ibs.get_valid_aids()</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.annotmatch_funcs --exec-get_annotmatch_rowids_from_aid</span>\n<span class=\"sd\">        python -m ibeis.annotmatch_funcs --exec-get_annotmatch_rowids_from_aid:1 --show</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.annotmatch_funcs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(defaultdb=&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.exec_funckw(ibs.get_annotmatch_rowids_from_aid, globals())</span>\n<span class=\"sd\">        &gt;&gt;&gt; aid_list = ibs.get_valid_aids()[0:4]</span>\n<span class=\"sd\">        &gt;&gt;&gt; annotmatch_rowid_list = ibs.get_annotmatch_rowids_from_aid(aid_list,</span>\n<span class=\"sd\">        &gt;&gt;&gt;                                                        eager, nInput)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = (&#39;annotmatch_rowid_list = %s&#39; % (str(annotmatch_rowid_list),))</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\">#from ibeis.control import manual_annotmatch_funcs</span>\n    <span class=\"k\">if</span> <span class=\"n\">nInput</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">nInput</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">nInput</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"p\">[]</span>\n    <span class=\"n\">rowids1</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annotmatch_rowids_from_aid1</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">rowids2</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annotmatch_rowids_from_aid2</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">annotmatch_rowid_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">unique</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">))</span>\n                             <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">rowids1</span><span class=\"p\">,</span> <span class=\"n\">rowids2</span><span class=\"p\">)]</span>\n    <span class=\"c1\"># Ensure funciton output is consistent</span>\n    <span class=\"n\">annotmatch_rowid_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">sorted</span><span class=\"p\">,</span> <span class=\"n\">annotmatch_rowid_list</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">annotmatch_rowid_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_annotmatch_rowid_from_undirected_superkey\"><a class=\"viewcode-back\" href=\"../../../ibeis/#ibeis.annotmatch_funcs.get_annotmatch_rowid_from_undirected_superkey\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"nd\">@profile</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_annotmatch_rowid_from_undirected_superkey</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aids1</span><span class=\"p\">,</span> <span class=\"n\">aids2</span><span class=\"p\">):</span>\n    <span class=\"c1\"># The directed nature of this makes a few things difficult and may cause</span>\n    <span class=\"c1\"># odd behavior</span>\n    <span class=\"n\">am_rowids</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annotmatch_rowid_from_superkey</span><span class=\"p\">(</span><span class=\"n\">aids1</span><span class=\"p\">,</span> <span class=\"n\">aids2</span><span class=\"p\">)</span>\n    <span class=\"n\">idxs</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">([</span><span class=\"n\">r</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"k\">for</span> <span class=\"n\">r</span> <span class=\"ow\">in</span> <span class=\"n\">am_rowids</span><span class=\"p\">])</span>\n    <span class=\"c1\"># Check which ones are None</span>\n    <span class=\"n\">aids1_</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">aids1</span><span class=\"p\">,</span> <span class=\"n\">idxs</span><span class=\"p\">)</span>\n    <span class=\"n\">aids2_</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">aids2</span><span class=\"p\">,</span> <span class=\"n\">idxs</span><span class=\"p\">)</span>\n    <span class=\"n\">am_rowids_</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annotmatch_rowid_from_superkey</span><span class=\"p\">(</span><span class=\"n\">aids2_</span><span class=\"p\">,</span> <span class=\"n\">aids1_</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Use the other rowid if found</span>\n    <span class=\"k\">for</span> <span class=\"n\">idx</span><span class=\"p\">,</span> <span class=\"n\">rowid</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">idxs</span><span class=\"p\">,</span> <span class=\"n\">am_rowids_</span><span class=\"p\">):</span>\n        <span class=\"n\">am_rowids</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">rowid</span>\n    <span class=\"k\">return</span> <span class=\"n\">am_rowids</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_annotmatch_rowid_from_edges\"><a class=\"viewcode-back\" href=\"../../../ibeis/#ibeis.annotmatch_funcs.get_annotmatch_rowid_from_edges\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_annotmatch_rowid_from_edges</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_pairs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Edegs are undirected</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">aid_pairs</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">aid_pairs</span><span class=\"p\">)</span>\n    <span class=\"n\">aids1</span> <span class=\"o\">=</span> <span class=\"n\">aid_pairs</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"n\">aids2</span> <span class=\"o\">=</span> <span class=\"n\">aid_pairs</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annotmatch_rowid_from_undirected_superkey</span><span class=\"p\">(</span><span class=\"n\">aids1</span><span class=\"p\">,</span> <span class=\"n\">aids2</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_annotmatch_rowids_in_cliques\"><a class=\"viewcode-back\" href=\"../../../ibeis/#ibeis.annotmatch_funcs.get_annotmatch_rowids_in_cliques\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_annotmatch_rowids_in_cliques</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aids_list</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Equivalent call:</span>\n    <span class=\"c1\">#ibs.get_annotmatch_rowids_between_groups(ibs, aids_list, aids_list)</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">itertools</span>\n    <span class=\"n\">ams_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annotmatch_rowid_from_undirected_superkey</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">itertools</span><span class=\"o\">.</span><span class=\"n\">combinations</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)))</span>\n                <span class=\"k\">for</span> <span class=\"n\">aids</span> <span class=\"ow\">in</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ProgIter</span><span class=\"p\">(</span><span class=\"n\">aids_list</span><span class=\"p\">,</span> <span class=\"n\">lbl</span><span class=\"o\">=</span><span class=\"s1\">&#39;loading clique am rowids&#39;</span><span class=\"p\">)]</span>\n    <span class=\"n\">ams_list</span> <span class=\"o\">=</span> <span class=\"p\">[[]</span> <span class=\"k\">if</span> <span class=\"n\">ams</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"k\">else</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">filter_Nones</span><span class=\"p\">(</span><span class=\"n\">ams</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">ams</span> <span class=\"ow\">in</span> <span class=\"n\">ams_list</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">ams_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_annotmatch_rowids_between_groups\"><a class=\"viewcode-back\" href=\"../../../ibeis/#ibeis.annotmatch_funcs.get_annotmatch_rowids_between_groups\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_annotmatch_rowids_between_groups</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aids1_list</span><span class=\"p\">,</span> <span class=\"n\">aids2_list</span><span class=\"p\">):</span>\n    <span class=\"n\">ams_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">lbl</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;loading between group am rowids&#39;</span>\n    <span class=\"k\">for</span> <span class=\"n\">aids1</span><span class=\"p\">,</span> <span class=\"n\">aids2</span> <span class=\"ow\">in</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ProgIter</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">aids1_list</span><span class=\"p\">,</span> <span class=\"n\">aids2_list</span><span class=\"p\">)),</span> <span class=\"n\">lbl</span><span class=\"o\">=</span><span class=\"n\">lbl</span><span class=\"p\">):</span>\n        <span class=\"n\">ams</span> <span class=\"o\">=</span> <span class=\"n\">get_annotmatch_rowids_between</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aids1</span><span class=\"p\">,</span> <span class=\"n\">aids2</span><span class=\"p\">)</span>\n        <span class=\"n\">ams_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ams</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">ams_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_annotmatch_rowids_between\"><a class=\"viewcode-back\" href=\"../../../ibeis/#ibeis.annotmatch_funcs.get_annotmatch_rowids_between\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_annotmatch_rowids_between</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aids1</span><span class=\"p\">,</span> <span class=\"n\">aids2</span><span class=\"p\">,</span> <span class=\"n\">method</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.annotmatch_funcs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(&#39;PZ_MTEST&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; aids1 = aids2 = [1, 2, 3, 4, 5, 6]</span>\n<span class=\"sd\">        &gt;&gt;&gt; rowids_between = ibs.get_annotmatch_rowids_between</span>\n<span class=\"sd\">        &gt;&gt;&gt; ams1 = sorted(rowids_between(aids1, aids2, method=1))</span>\n<span class=\"sd\">        &gt;&gt;&gt; ams2 = sorted(rowids_between(aids1, aids2, method=2))</span>\n<span class=\"sd\">        &gt;&gt;&gt; assert len(ub.find_duplicates(ams1)) == 0</span>\n<span class=\"sd\">        &gt;&gt;&gt; assert len(ub.find_duplicates(ams2)) == 0</span>\n<span class=\"sd\">        &gt;&gt;&gt; assert sorted(ams2) == sorted(ams1)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">method</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aids1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aids2</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">5000</span><span class=\"p\">:</span>\n            <span class=\"n\">method</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">method</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n    <span class=\"k\">if</span> <span class=\"n\">method</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Strategy 1: get all existing rows and see what intersects</span>\n        <span class=\"c1\"># This is better when the enumerated set of rows would be larger than</span>\n        <span class=\"c1\"># the database size</span>\n        <span class=\"n\">unflat_rowids1L</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annotmatch_rowids_from_aid1</span><span class=\"p\">(</span><span class=\"n\">aids1</span><span class=\"p\">)</span>\n        <span class=\"n\">unflat_rowids1R</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annotmatch_rowids_from_aid2</span><span class=\"p\">(</span><span class=\"n\">aids1</span><span class=\"p\">)</span>\n        <span class=\"n\">unflat_rowids2L</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annotmatch_rowids_from_aid1</span><span class=\"p\">(</span><span class=\"n\">aids2</span><span class=\"p\">)</span>\n        <span class=\"n\">unflat_rowids2R</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annotmatch_rowids_from_aid2</span><span class=\"p\">(</span><span class=\"n\">aids2</span><span class=\"p\">)</span>\n\n        <span class=\"n\">am_rowids1L</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">r</span> <span class=\"k\">for</span> <span class=\"n\">r</span> <span class=\"ow\">in</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">iflatten</span><span class=\"p\">(</span><span class=\"n\">unflat_rowids1L</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">r</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">}</span>\n        <span class=\"n\">am_rowids1R</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">r</span> <span class=\"k\">for</span> <span class=\"n\">r</span> <span class=\"ow\">in</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">iflatten</span><span class=\"p\">(</span><span class=\"n\">unflat_rowids1R</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">r</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">}</span>\n        <span class=\"n\">am_rowids2L</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">r</span> <span class=\"k\">for</span> <span class=\"n\">r</span> <span class=\"ow\">in</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">iflatten</span><span class=\"p\">(</span><span class=\"n\">unflat_rowids2L</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">r</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">}</span>\n        <span class=\"n\">am_rowids2R</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">r</span> <span class=\"k\">for</span> <span class=\"n\">r</span> <span class=\"ow\">in</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">iflatten</span><span class=\"p\">(</span><span class=\"n\">unflat_rowids2R</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">r</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">}</span>\n\n        <span class=\"n\">ams12</span> <span class=\"o\">=</span> <span class=\"n\">am_rowids1L</span><span class=\"o\">.</span><span class=\"n\">intersection</span><span class=\"p\">(</span><span class=\"n\">am_rowids2R</span><span class=\"p\">)</span>\n        <span class=\"n\">ams21</span> <span class=\"o\">=</span> <span class=\"n\">am_rowids2L</span><span class=\"o\">.</span><span class=\"n\">intersection</span><span class=\"p\">(</span><span class=\"n\">am_rowids1R</span><span class=\"p\">)</span>\n        <span class=\"n\">ams</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">ams12</span><span class=\"o\">.</span><span class=\"n\">union</span><span class=\"p\">(</span><span class=\"n\">ams21</span><span class=\"p\">))</span>\n        <span class=\"c1\"># ams = sorted(am_rowids1.intersection(am_rowids2))</span>\n        <span class=\"c1\"># rowids2 = ibs.get_annotmatch_rowids_from_aid2(aid_list)</span>\n        <span class=\"c1\"># unflat_rowids1 = ibs.get_annotmatch_rowids_from_aid(aids1)</span>\n        <span class=\"c1\"># unflat_rowids2 = ibs.get_annotmatch_rowids_from_aid(aids2)</span>\n        <span class=\"c1\"># am_rowids1 = {r for r in ut.iflatten(unflat_rowids1) if r is not None}</span>\n        <span class=\"c1\"># am_rowids2 = {r for r in ut.iflatten(unflat_rowids2) if r is not None}</span>\n        <span class=\"c1\"># ams = sorted(am_rowids1.intersection(am_rowids2))</span>\n        <span class=\"c1\"># ams = ut.isect(am_rowids1, am_rowids2)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">method</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Strategy 2: enumerate what rows could exist and see what does exist</span>\n        <span class=\"c1\"># This is better when the enumerated set of rows would be smaller than</span>\n        <span class=\"c1\"># the database size</span>\n        <span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">product_nonsame</span><span class=\"p\">(</span><span class=\"n\">aids1</span><span class=\"p\">,</span> <span class=\"n\">aids2</span><span class=\"p\">))</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">ams</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">aids1_</span><span class=\"p\">,</span> <span class=\"n\">aids2_</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">listT</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">)</span>\n            <span class=\"c1\"># ams = ibs.get_annotmatch_rowid_from_undirected_superkey(aids1_, aids2_)</span>\n            <span class=\"n\">ams</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annotmatch_rowid_from_superkey</span><span class=\"p\">(</span><span class=\"n\">aids1_</span><span class=\"p\">,</span> <span class=\"n\">aids2_</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">ams</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">ams</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"n\">ams</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">filter_Nones</span><span class=\"p\">(</span><span class=\"n\">ams</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">ams</span></div>\n\n\n<div class=\"viewcode-block\" id=\"add_annotmatch_undirected\"><a class=\"viewcode-back\" href=\"../../../ibeis/#ibeis.annotmatch_funcs.add_annotmatch_undirected\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">add_annotmatch_undirected</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aids1</span><span class=\"p\">,</span> <span class=\"n\">aids2</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aids1</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aids2</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"p\">[]</span>\n    <span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">aids1</span><span class=\"p\">,</span> <span class=\"n\">aids2</span><span class=\"p\">))</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph</span> <span class=\"k\">import</span> <span class=\"n\">nx_utils</span> <span class=\"k\">as</span> <span class=\"n\">nxu</span>\n    <span class=\"c1\"># Enforce new undirected constraint</span>\n    <span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">estarmap</span><span class=\"p\">(</span><span class=\"n\">nxu</span><span class=\"o\">.</span><span class=\"n\">e_</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"p\">)</span>\n    <span class=\"n\">aids1</span><span class=\"p\">,</span> <span class=\"n\">aids2</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">edges</span><span class=\"p\">))</span>\n\n    <span class=\"n\">am_rowids</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annotmatch_rowid_from_undirected_superkey</span><span class=\"p\">(</span><span class=\"n\">aids1</span><span class=\"p\">,</span> <span class=\"n\">aids2</span><span class=\"p\">)</span>\n    <span class=\"n\">idxs</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">([</span><span class=\"n\">r</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"k\">for</span> <span class=\"n\">r</span> <span class=\"ow\">in</span> <span class=\"n\">am_rowids</span><span class=\"p\">])</span>\n    <span class=\"c1\"># Check which ones are None</span>\n    <span class=\"n\">aids1_</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">aids1</span><span class=\"p\">,</span> <span class=\"n\">idxs</span><span class=\"p\">)</span>\n    <span class=\"n\">aids2_</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">aids2</span><span class=\"p\">,</span> <span class=\"n\">idxs</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Create anything that is None</span>\n    <span class=\"n\">am_rowids_</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">add_annotmatch</span><span class=\"p\">(</span><span class=\"n\">aids2_</span><span class=\"p\">,</span> <span class=\"n\">aids1_</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Use the other rowid if found</span>\n    <span class=\"k\">for</span> <span class=\"n\">idx</span><span class=\"p\">,</span> <span class=\"n\">rowid</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">idxs</span><span class=\"p\">,</span> <span class=\"n\">am_rowids_</span><span class=\"p\">):</span>\n        <span class=\"n\">am_rowids</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">rowid</span>\n    <span class=\"k\">return</span> <span class=\"n\">am_rowids</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_annot_pair_timedelta\"><a class=\"viewcode-back\" href=\"../../../ibeis/#ibeis.annotmatch_funcs.get_annot_pair_timedelta\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_annot_pair_timedelta</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list1</span><span class=\"p\">,</span> <span class=\"n\">aid_list2</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (IBEISController):  ibeis controller object</span>\n<span class=\"sd\">        aid_list1 (int):  list of annotation ids</span>\n<span class=\"sd\">        aid_list2 (int):  list of annotation ids</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        list: timedelta_list</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.annotmatch_funcs --test-get_annot_pair_timedelta</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.annotmatch_funcs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(&#39;PZ_MTEST&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; aid_list = ibs.get_valid_aids(hasgt=True)</span>\n<span class=\"sd\">        &gt;&gt;&gt; unixtimes = ibs.get_annot_image_unixtimes_asfloat(aid_list)</span>\n<span class=\"sd\">        &gt;&gt;&gt; aid_list = ut.compress(aid_list, ~np.isnan(unixtimes))</span>\n<span class=\"sd\">        &gt;&gt;&gt; gt_aids_list = ibs.get_annot_groundtruth(aid_list, daid_list=aid_list)</span>\n<span class=\"sd\">        &gt;&gt;&gt; flags = np.array(list(map(len, gt_aids_list))) &gt; 0</span>\n<span class=\"sd\">        &gt;&gt;&gt; aid_list1 = ut.compress(aid_list, flags)[0:5]</span>\n<span class=\"sd\">        &gt;&gt;&gt; aid_list2 = ut.take_column(gt_aids_list, 0)[0:5]</span>\n<span class=\"sd\">        &gt;&gt;&gt; timedelta_list = ibs.get_annot_pair_timedelta(aid_list1, aid_list2)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = ut.repr2(timedelta_list, precision=1)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">        np.array([7.6e+07, 7.6e+07, 2.4e+06, 2.0e+08, 9.7e+07])</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">unixtime_list1</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_image_unixtimes_asfloat</span><span class=\"p\">(</span><span class=\"n\">aid_list1</span><span class=\"p\">)</span>\n    <span class=\"n\">unixtime_list2</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_image_unixtimes_asfloat</span><span class=\"p\">(</span><span class=\"n\">aid_list2</span><span class=\"p\">)</span>\n    <span class=\"n\">timedelta_list</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">abs</span><span class=\"p\">(</span><span class=\"n\">unixtime_list1</span> <span class=\"o\">-</span> <span class=\"n\">unixtime_list2</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">timedelta_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_annotedge_timedelta\"><a class=\"viewcode-back\" href=\"../../../ibeis/#ibeis.annotmatch_funcs.get_annotedge_timedelta\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_annotedge_timedelta</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_pair_timedelta</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">edges</span><span class=\"p\">))</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_annotedge_viewdist\"><a class=\"viewcode-back\" href=\"../../../ibeis/#ibeis.annotmatch_funcs.get_annotedge_viewdist\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_annotedge_viewdist</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"p\">):</span>\n    <span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">)</span>\n    <span class=\"n\">unique_annots</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">annots</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">unique</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"p\">()</span>\n    <span class=\"n\">annots1</span> <span class=\"o\">=</span> <span class=\"n\">unique_annots</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n    <span class=\"n\">annots2</span> <span class=\"o\">=</span> <span class=\"n\">unique_annots</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n    <span class=\"n\">view_ints1</span> <span class=\"o\">=</span> <span class=\"n\">annots1</span><span class=\"o\">.</span><span class=\"n\">viewpoint_int</span>\n    <span class=\"n\">view_ints2</span> <span class=\"o\">=</span> <span class=\"n\">annots2</span><span class=\"o\">.</span><span class=\"n\">viewpoint_int</span>\n\n    <span class=\"n\">DIST</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">VIEW</span><span class=\"o\">.</span><span class=\"n\">DIST</span>\n    <span class=\"n\">view_dists</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">DIST</span><span class=\"p\">[</span><span class=\"n\">tup</span><span class=\"p\">]</span> <span class=\"k\">if</span> <span class=\"n\">tup</span> <span class=\"ow\">in</span> <span class=\"n\">DIST</span> <span class=\"k\">else</span> <span class=\"n\">DIST</span><span class=\"p\">[</span><span class=\"n\">tup</span><span class=\"p\">[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]]</span>\n        <span class=\"k\">for</span> <span class=\"n\">tup</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">view_ints1</span><span class=\"p\">,</span> <span class=\"n\">view_ints2</span><span class=\"p\">)]</span>\n    <span class=\"n\">view_dists</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">replace_nones</span><span class=\"p\">(</span><span class=\"n\">view_dists</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">view_dists</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_annot_has_reviewed_matching_aids\"><a class=\"viewcode-back\" href=\"../../../ibeis/#ibeis.annotmatch_funcs.get_annot_has_reviewed_matching_aids\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_annot_has_reviewed_matching_aids</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">eager</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">nInput</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"n\">num_reviewed_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_num_reviewed_matching_aids</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">has_reviewed_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">num_reviewed</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"k\">for</span> <span class=\"n\">num_reviewed</span> <span class=\"ow\">in</span> <span class=\"n\">num_reviewed_list</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">has_reviewed_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_annot_num_reviewed_matching_aids\"><a class=\"viewcode-back\" href=\"../../../ibeis/#ibeis.annotmatch_funcs.get_annot_num_reviewed_matching_aids\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_annot_num_reviewed_matching_aids</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid1_list</span><span class=\"p\">,</span> <span class=\"n\">eager</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">nInput</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        aid_list (int):  list of annotation ids</span>\n<span class=\"sd\">        eager (bool):</span>\n<span class=\"sd\">        nInput (None):</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        list: num_annot_reviewed_list</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.annotmatch_funcs --test-get_annot_num_reviewed_matching_aids</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.annotmatch_funcs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(&#39;testdb2&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; aid1_list = ibs.get_valid_aids()</span>\n<span class=\"sd\">        &gt;&gt;&gt; eager = True</span>\n<span class=\"sd\">        &gt;&gt;&gt; nInput = None</span>\n<span class=\"sd\">        &gt;&gt;&gt; num_annot_reviewed_list = get_annot_num_reviewed_matching_aids(ibs, aid_list, eager, nInput)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = str(num_annot_reviewed_list)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">aids_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_reviewed_matching_aids</span><span class=\"p\">(</span><span class=\"n\">aid1_list</span><span class=\"p\">,</span> <span class=\"n\">eager</span><span class=\"o\">=</span><span class=\"n\">eager</span><span class=\"p\">,</span> <span class=\"n\">nInput</span><span class=\"o\">=</span><span class=\"n\">nInput</span><span class=\"p\">)</span>\n    <span class=\"n\">num_annot_reviewed_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">,</span> <span class=\"n\">aids_list</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">num_annot_reviewed_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_annot_reviewed_matching_aids\"><a class=\"viewcode-back\" href=\"../../../ibeis/#ibeis.annotmatch_funcs.get_annot_reviewed_matching_aids\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_annot_reviewed_matching_aids</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">eager</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">nInput</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Returns a list of the aids that were reviewed as candidate matches to the input aid</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">ANNOT_ROWID1</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;annot_rowid1&#39;</span>\n    <span class=\"n\">ANNOT_ROWID2</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;annot_rowid2&#39;</span>\n    <span class=\"n\">params_iter</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"n\">aid</span><span class=\"p\">,)</span> <span class=\"k\">for</span> <span class=\"n\">aid</span> <span class=\"ow\">in</span> <span class=\"n\">aid_list</span><span class=\"p\">]</span>\n    <span class=\"n\">colnames</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">ANNOT_ROWID2</span><span class=\"p\">,)</span>\n    <span class=\"n\">where_colnames</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">ANNOT_ROWID1</span><span class=\"p\">,)</span>\n    <span class=\"n\">aids_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">get_where_eq</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">ANNOTMATCH_TABLE</span><span class=\"p\">,</span> <span class=\"n\">colnames</span><span class=\"p\">,</span>\n                                    <span class=\"n\">params_iter</span><span class=\"p\">,</span> <span class=\"n\">where_colnames</span><span class=\"p\">,</span> <span class=\"n\">eager</span><span class=\"o\">=</span><span class=\"n\">eager</span><span class=\"p\">,</span>\n                                    <span class=\"n\">unpack_scalars</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">nInput</span><span class=\"o\">=</span><span class=\"n\">nInput</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">aids_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_annotmatch_aids\"><a class=\"viewcode-back\" href=\"../../../ibeis/#ibeis.annotmatch_funcs.get_annotmatch_aids\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_annotmatch_aids</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">annotmatch_rowid_list</span><span class=\"p\">):</span>\n    <span class=\"n\">ANNOT_ROWID1</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;annot_rowid1&#39;</span>\n    <span class=\"n\">ANNOT_ROWID2</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;annot_rowid2&#39;</span>\n    <span class=\"n\">id_iter</span> <span class=\"o\">=</span> <span class=\"n\">annotmatch_rowid_list</span>\n    <span class=\"n\">colnames</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">ANNOT_ROWID1</span><span class=\"p\">,</span> <span class=\"n\">ANNOT_ROWID2</span><span class=\"p\">)</span>\n    <span class=\"n\">aid_pairs</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">ANNOTMATCH_TABLE</span><span class=\"p\">,</span> <span class=\"n\">colnames</span><span class=\"p\">,</span>\n                           <span class=\"n\">id_iter</span><span class=\"p\">,</span> <span class=\"n\">id_colname</span><span class=\"o\">=</span><span class=\"s1\">&#39;rowid&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">aid_pairs</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_annot_pair_is_reviewed\"><a class=\"viewcode-back\" href=\"../../../ibeis/#ibeis.annotmatch_funcs.get_annot_pair_is_reviewed\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_annot_pair_is_reviewed</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid1_list</span><span class=\"p\">,</span> <span class=\"n\">aid2_list</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        aid1_list (list):</span>\n<span class=\"sd\">        aid2_list (list):</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        list: annotmatch_reviewed_list</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.annotmatch_funcs --test-get_annot_pair_is_reviewed</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.annotmatch_funcs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(&#39;testdb2&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; aid_list = ibs.get_valid_aids()</span>\n<span class=\"sd\">        &gt;&gt;&gt; pairs = list(ut.product(aid_list, aid_list))</span>\n<span class=\"sd\">        &gt;&gt;&gt; aid1_list = ut.get_list_column(pairs, 0)</span>\n<span class=\"sd\">        &gt;&gt;&gt; aid2_list = ut.get_list_column(pairs, 1)</span>\n<span class=\"sd\">        &gt;&gt;&gt; annotmatch_reviewed_list = get_annot_pair_is_reviewed(ibs, aid1_list, aid2_list)</span>\n<span class=\"sd\">        &gt;&gt;&gt; reviewed_pairs = ut.compress(pairs, annotmatch_reviewed_list)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = len(reviewed_pairs)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">        104</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">am_rowids</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annotmatch_rowid_from_undirected_superkey</span><span class=\"p\">(</span><span class=\"n\">aid1_list</span><span class=\"p\">,</span> <span class=\"n\">aid2_list</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"kc\">None</span> <span class=\"k\">if</span> <span class=\"n\">user</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"k\">else</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">&#39;user:&#39;</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">user</span> <span class=\"ow\">in</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annotmatch_reviewer</span><span class=\"p\">(</span><span class=\"n\">am_rowids</span><span class=\"p\">)]</span></div>\n\n\n<div class=\"viewcode-block\" id=\"set_annot_pair_as_reviewed\"><a class=\"viewcode-back\" href=\"../../../ibeis/#ibeis.annotmatch_funcs.set_annot_pair_as_reviewed\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">set_annot_pair_as_reviewed</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; denote that this match was reviewed and keep whatever status it is given &quot;&quot;&quot;</span>\n    <span class=\"n\">isunknown1</span><span class=\"p\">,</span> <span class=\"n\">isunknown2</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">is_aid_unknown</span><span class=\"p\">([</span><span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">])</span>\n    <span class=\"k\">if</span> <span class=\"n\">isunknown1</span> <span class=\"ow\">or</span> <span class=\"n\">isunknown2</span><span class=\"p\">:</span>\n        <span class=\"n\">truth</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">EVIDENCE_DECISION</span><span class=\"o\">.</span><span class=\"n\">UNKNOWN</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">nid2</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_name_rowids</span><span class=\"p\">((</span><span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">))</span>\n        <span class=\"n\">truth</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">EVIDENCE_DECISION</span><span class=\"o\">.</span><span class=\"n\">POSITIVE</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">nid1</span> <span class=\"o\">==</span> <span class=\"n\">nid2</span><span class=\"p\">)</span> <span class=\"k\">else</span>\n                 <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">EVIDENCE_DECISION</span><span class=\"o\">.</span><span class=\"n\">NEGATIVE</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Ensure a row exists for this pair</span>\n    <span class=\"n\">annotmatch_rowids</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">add_annotmatch_undirected</span><span class=\"p\">([</span><span class=\"n\">aid1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"n\">aid2</span><span class=\"p\">])</span>\n\n    <span class=\"c1\"># Old functionality, remove. Reviewing should not set truth</span>\n    <span class=\"n\">confidence</span>  <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">CONFIDENCE</span><span class=\"o\">.</span><span class=\"n\">CODE_TO_INT</span><span class=\"p\">[</span><span class=\"s1\">&#39;guessing&#39;</span><span class=\"p\">]</span>\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_annotmatch_evidence_decision</span><span class=\"p\">(</span><span class=\"n\">annotmatch_rowids</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">truth</span><span class=\"p\">])</span>\n    <span class=\"n\">user_id</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_user_name</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;@&#39;</span> <span class=\"o\">+</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_computer_name</span><span class=\"p\">()</span>\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_annotmatch_reviewer</span><span class=\"p\">(</span><span class=\"n\">annotmatch_rowids</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">&#39;user:&#39;</span> <span class=\"o\">+</span> <span class=\"n\">user_id</span><span class=\"p\">])</span>\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_annotmatch_confidence</span><span class=\"p\">(</span><span class=\"n\">annotmatch_rowids</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">confidence</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;... set truth=</span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">truth</span><span class=\"p\">,))</span></div>\n\n\n<div class=\"viewcode-block\" id=\"set_annot_pair_as_positive_match\"><a class=\"viewcode-back\" href=\"../../../ibeis/#ibeis.annotmatch_funcs.set_annot_pair_as_positive_match\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">set_annot_pair_as_positive_match</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                                     <span class=\"n\">on_nontrivial_merge</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">logger</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Safe way to perform links. Errors on invalid operations.</span>\n\n<span class=\"sd\">    TODO: ELEVATE THIS FUNCTION</span>\n<span class=\"sd\">    Change into make_task_set_annot_pair_as_positive_match and it returns what</span>\n<span class=\"sd\">    needs to be done.</span>\n\n<span class=\"sd\">    Need to test several cases:</span>\n<span class=\"sd\">        uknown, unknown</span>\n<span class=\"sd\">        knownA, knownA</span>\n<span class=\"sd\">        knownB, knownA</span>\n<span class=\"sd\">        unknown, knownA</span>\n<span class=\"sd\">        knownA, unknown</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (IBEISController):  ibeis controller object</span>\n<span class=\"sd\">        aid1 (int):  query annotation id</span>\n<span class=\"sd\">        aid2 (int):  matching annotation id</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.annotmatch_funcs --test-set_annot_pair_as_positive_match</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.annotmatch_funcs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; aid1, aid2 = ibs.get_valid_aids()[0:2]</span>\n<span class=\"sd\">        &gt;&gt;&gt; dryrun = True</span>\n<span class=\"sd\">        &gt;&gt;&gt; status = set_annot_pair_as_positive_match(ibs, aid1, aid2, dryrun)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(status)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_set_annot_name_rowids</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">nid_list</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">QUIET</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;... _set_annot_name_rowids(aids=</span><span class=\"si\">%r</span><span class=\"s1\">, nids=</span><span class=\"si\">%r</span><span class=\"s1\">)&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">nid_list</span><span class=\"p\">))</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;... names = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_name_texts</span><span class=\"p\">(</span><span class=\"n\">nid_list</span><span class=\"p\">)))</span>\n        <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">nid_list</span><span class=\"p\">),</span> <span class=\"s1\">&#39;list must correspond&#39;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">dryrun</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">logger</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">log</span> <span class=\"o\">=</span> <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span>\n                <span class=\"n\">previous_names</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_names</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n                <span class=\"n\">new_names</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_name_texts</span><span class=\"p\">(</span><span class=\"n\">nid_list</span><span class=\"p\">)</span>\n                <span class=\"n\">annot_uuids</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_uuids</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n                <span class=\"n\">annot_uuid_pair</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_uuids</span><span class=\"p\">((</span><span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">))</span>\n                <span class=\"n\">log</span><span class=\"p\">((</span>\n                    <span class=\"s1\">&#39;REVIEW_PAIR AS TRUE: (annot_uuid_pair=</span><span class=\"si\">%r</span><span class=\"s1\">) &#39;</span>\n                    <span class=\"s1\">&#39;CHANGE NAME of </span><span class=\"si\">%d</span><span class=\"s1\"> (annot_uuids=</span><span class=\"si\">%r</span><span class=\"s1\">) &#39;</span>\n                    <span class=\"s1\">&#39;WITH (previous_names=</span><span class=\"si\">%r</span><span class=\"s1\">) to (new_names=</span><span class=\"si\">%r</span><span class=\"s1\">)&#39;</span> <span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"p\">(</span>\n                        <span class=\"n\">annot_uuid_pair</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">annot_uuids</span><span class=\"p\">),</span> <span class=\"n\">annot_uuids</span><span class=\"p\">,</span>\n                        <span class=\"n\">previous_names</span><span class=\"p\">,</span> <span class=\"n\">new_names</span><span class=\"p\">))</span>\n\n            <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_annot_name_rowids</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">nid_list</span><span class=\"p\">)</span>\n            <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_annot_pair_as_reviewed</span><span class=\"p\">(</span><span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Return the new annots in this name</span>\n        <span class=\"n\">_aids_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_name_aids</span><span class=\"p\">(</span><span class=\"n\">nid_list</span><span class=\"p\">)</span>\n        <span class=\"n\">_combo_aids_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">_aids</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"n\">aid</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">_aids</span><span class=\"p\">,</span> <span class=\"n\">aid</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">_aids_list</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">)]</span>\n        <span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">_combo_aids_list</span>\n        <span class=\"k\">return</span> <span class=\"n\">status</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[marking_match] aid1 = </span><span class=\"si\">%r</span><span class=\"s1\">, aid2 = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">))</span>\n\n    <span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">nid2</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_name_rowids</span><span class=\"p\">([</span><span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">])</span>\n    <span class=\"k\">if</span> <span class=\"n\">nid1</span> <span class=\"o\">==</span> <span class=\"n\">nid2</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;...images already matched&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_annot_pair_as_reviewed</span><span class=\"p\">(</span><span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">logger</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">log</span> <span class=\"o\">=</span> <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span>\n            <span class=\"n\">annot_uuid_pair</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_uuids</span><span class=\"p\">((</span><span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">))</span>\n            <span class=\"n\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;REVIEW_PAIR AS TRUE: (annot_uuid_pair=</span><span class=\"si\">%r</span><span class=\"s1\">) NO CHANGE&#39;</span> <span class=\"o\">%</span> <span class=\"n\">annot_uuid_pair</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">isunknown1</span><span class=\"p\">,</span> <span class=\"n\">isunknown2</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">is_aid_unknown</span><span class=\"p\">([</span><span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">])</span>\n        <span class=\"k\">if</span> <span class=\"n\">isunknown1</span> <span class=\"ow\">and</span> <span class=\"n\">isunknown2</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;...match unknown1 to unknown2 into 1 new name&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">next_nids</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">make_next_nids</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"n\">status</span> <span class=\"o\">=</span>  <span class=\"n\">_set_annot_name_rowids</span><span class=\"p\">([</span><span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">],</span> <span class=\"n\">next_nids</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"ow\">not</span> <span class=\"n\">isunknown1</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">isunknown2</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;...merge known1 into known2&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">aid1_and_groundtruth</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_groundtruth</span><span class=\"p\">(</span><span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">noself</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n            <span class=\"n\">aid2_and_groundtruth</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_groundtruth</span><span class=\"p\">(</span><span class=\"n\">aid2</span><span class=\"p\">,</span> <span class=\"n\">noself</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n            <span class=\"n\">trivial_merge</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aid1_and_groundtruth</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"ow\">and</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aid2_and_groundtruth</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">trivial_merge</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">on_nontrivial_merge</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                    <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"s1\">&#39;no function is set up to handle nontrivial merges!&#39;</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">on_nontrivial_merge</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">)</span>\n            <span class=\"n\">status</span> <span class=\"o\">=</span>  <span class=\"n\">_set_annot_name_rowids</span><span class=\"p\">(</span><span class=\"n\">aid1_and_groundtruth</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">nid2</span><span class=\"p\">]</span> <span class=\"o\">*</span>\n                                             <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aid1_and_groundtruth</span><span class=\"p\">))</span>\n        <span class=\"k\">elif</span> <span class=\"n\">isunknown2</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">isunknown1</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;...match unknown2 into known1&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">status</span> <span class=\"o\">=</span>  <span class=\"n\">_set_annot_name_rowids</span><span class=\"p\">([</span><span class=\"n\">aid2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"n\">nid1</span><span class=\"p\">])</span>\n        <span class=\"k\">elif</span> <span class=\"n\">isunknown1</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">isunknown2</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;...match unknown1 into known2&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">status</span> <span class=\"o\">=</span>  <span class=\"n\">_set_annot_name_rowids</span><span class=\"p\">([</span><span class=\"n\">aid1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"n\">nid2</span><span class=\"p\">])</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">AssertionError</span><span class=\"p\">(</span><span class=\"s1\">&#39;impossible state&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">status</span></div>\n\n\n<div class=\"viewcode-block\" id=\"set_annot_pair_as_negative_match\"><a class=\"viewcode-back\" href=\"../../../ibeis/#ibeis.annotmatch_funcs.set_annot_pair_as_negative_match\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">set_annot_pair_as_negative_match</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                                     <span class=\"n\">on_nontrivial_split</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">logger</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    TODO: ELEVATE THIS FUNCTION</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (IBEISController):  ibeis controller object</span>\n<span class=\"sd\">        aid1 (int):  annotation id</span>\n<span class=\"sd\">        aid2 (int):  annotation id</span>\n<span class=\"sd\">        dryrun (bool):</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.annotmatch_funcs --test-set_annot_pair_as_negative_match</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.annotmatch_funcs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; aid1, aid2 = ibs.get_valid_aids()[0:2]</span>\n<span class=\"sd\">        &gt;&gt;&gt; dryrun = True</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = set_annot_pair_as_negative_match(ibs, aid1, aid2, dryrun)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_set_annot_name_rowids</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">nid_list</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;... _set_annot_name_rowids(</span><span class=\"si\">%r</span><span class=\"s1\">, </span><span class=\"si\">%r</span><span class=\"s1\">)&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">nid_list</span><span class=\"p\">))</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">dryrun</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">logger</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">log</span> <span class=\"o\">=</span> <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span>\n                <span class=\"n\">previous_names</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_names</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n                <span class=\"n\">new_names</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_name_texts</span><span class=\"p\">(</span><span class=\"n\">nid_list</span><span class=\"p\">)</span>\n                <span class=\"n\">annot_uuids</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_uuids</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span>\n                <span class=\"n\">annot_uuid_pair</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_uuids</span><span class=\"p\">((</span><span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">))</span>\n                <span class=\"n\">log</span><span class=\"p\">((</span>\n                    <span class=\"s1\">&#39;REVIEW_PAIR AS FALSE: (annot_uuid_pair=</span><span class=\"si\">%r</span><span class=\"s1\">) &#39;</span>\n                    <span class=\"s1\">&#39;CHANGE NAME of </span><span class=\"si\">%d</span><span class=\"s1\"> (annot_uuids=</span><span class=\"si\">%r</span><span class=\"s1\">) &#39;</span>\n                    <span class=\"s1\">&#39;WITH (previous_names=</span><span class=\"si\">%r</span><span class=\"s1\">) to (new_names=</span><span class=\"si\">%r</span><span class=\"s1\">)&#39;</span> <span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"p\">(</span>\n                        <span class=\"n\">annot_uuid_pair</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">annot_uuids</span><span class=\"p\">),</span> <span class=\"n\">annot_uuids</span><span class=\"p\">,</span>\n                        <span class=\"n\">previous_names</span><span class=\"p\">,</span> <span class=\"n\">new_names</span><span class=\"p\">))</span>\n            <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_annot_name_rowids</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">nid_list</span><span class=\"p\">)</span>\n            <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_annot_pair_as_reviewed</span><span class=\"p\">(</span><span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">)</span>\n    <span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">nid2</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_name_rowids</span><span class=\"p\">([</span><span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">])</span>\n    <span class=\"k\">if</span> <span class=\"n\">nid1</span> <span class=\"o\">==</span> <span class=\"n\">nid2</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;images are marked as having the same name... we must tread carefully&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">aid1_groundtruth</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_groundtruth</span><span class=\"p\">(</span><span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">noself</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aid1_groundtruth</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"ow\">and</span> <span class=\"n\">aid1_groundtruth</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"n\">aid2</span><span class=\"p\">]:</span>\n            <span class=\"c1\"># this is the only safe case for same name split</span>\n            <span class=\"c1\"># Change so the names are not the same</span>\n            <span class=\"n\">next_nids</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">make_next_nids</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"n\">status</span> <span class=\"o\">=</span>  <span class=\"n\">_set_annot_name_rowids</span><span class=\"p\">([</span><span class=\"n\">aid1</span><span class=\"p\">],</span> <span class=\"n\">next_nids</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">on_nontrivial_split</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"s1\">&#39;no function is set up to handle nontrivial splits!&#39;</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">on_nontrivial_split</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">isunknown1</span><span class=\"p\">,</span> <span class=\"n\">isunknown2</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">is_aid_unknown</span><span class=\"p\">([</span><span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">])</span>\n        <span class=\"k\">if</span> <span class=\"n\">isunknown1</span> <span class=\"ow\">and</span> <span class=\"n\">isunknown2</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;...nomatch unknown1 and unknown2 into 2 new names&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">next_nids</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">make_next_nids</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n            <span class=\"n\">status</span> <span class=\"o\">=</span>  <span class=\"n\">_set_annot_name_rowids</span><span class=\"p\">([</span><span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">],</span> <span class=\"n\">next_nids</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"ow\">not</span> <span class=\"n\">isunknown1</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">isunknown2</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;...nomatch known1 and known2... nothing to do (yet)&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_annot_pair_as_reviewed</span><span class=\"p\">(</span><span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">)</span>\n            <span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n            <span class=\"k\">if</span> <span class=\"n\">logger</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">log</span> <span class=\"o\">=</span> <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span>\n                <span class=\"n\">annot_uuid_pair</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_uuids</span><span class=\"p\">((</span><span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">))</span>\n                <span class=\"n\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;REVIEW_PAIR AS FALSE: (annot_uuid_pair=</span><span class=\"si\">%r</span><span class=\"s1\">) NO CHANGE&#39;</span> <span class=\"o\">%</span> <span class=\"n\">annot_uuid_pair</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"n\">isunknown2</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">isunknown1</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;...nomatch unknown2 -&gt; newname and known1&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">next_nids</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">make_next_nids</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"n\">status</span> <span class=\"o\">=</span>  <span class=\"n\">_set_annot_name_rowids</span><span class=\"p\">([</span><span class=\"n\">aid2</span><span class=\"p\">],</span> <span class=\"n\">next_nids</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"n\">isunknown1</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">isunknown2</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;...nomatch unknown1 -&gt; newname and known2&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">next_nids</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">make_next_nids</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"n\">status</span> <span class=\"o\">=</span>  <span class=\"n\">_set_annot_name_rowids</span><span class=\"p\">([</span><span class=\"n\">aid1</span><span class=\"p\">],</span> <span class=\"n\">next_nids</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">AssertionError</span><span class=\"p\">(</span><span class=\"s1\">&#39;impossible state&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">status</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_match_truth\"><a class=\"viewcode-back\" href=\"../../../ibeis/#ibeis.annotmatch_funcs.get_match_truth\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_match_truth</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_match_truths</span><span class=\"p\">([</span><span class=\"n\">aid1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"n\">aid2</span><span class=\"p\">])[</span><span class=\"mi\">0</span><span class=\"p\">]</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_match_truths\"><a class=\"viewcode-back\" href=\"../../../ibeis/#ibeis.annotmatch_funcs.get_match_truths\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_match_truths</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aids1</span><span class=\"p\">,</span> <span class=\"n\">aids2</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Uses NIDS to verify truth.</span>\n<span class=\"sd\">    TODO: rectify with annotmatch table</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (IBEISController):  ibeis controller object</span>\n<span class=\"sd\">        aids1 (list):</span>\n<span class=\"sd\">        aids2 (list):</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        list[int]: truth_codes - see</span>\n<span class=\"sd\">            ibeis.constants.EVIDENCE_DECISION.INT_TO_CODE for code definitions</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.other.ibsfuncs --test-get_match_truths</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.annotmatch_funcs import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; aids1 = ibs.get_valid_aids()</span>\n<span class=\"sd\">        &gt;&gt;&gt; aids2 = ut.list_roll(ibs.get_valid_aids(), -1)</span>\n<span class=\"sd\">        &gt;&gt;&gt; truth_codes = get_match_truths(ibs, aids1, aids2)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&#39;truth_codes = %s&#39; % ut.repr2(truth_codes))</span>\n<span class=\"sd\">        &gt;&gt;&gt; target = np.array([3, 1, 3, 3, 1, 0, 0, 3, 3, 3, 3, 0, 3])</span>\n<span class=\"sd\">        &gt;&gt;&gt; assert np.all(truth_codes == target)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">nids1</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_name_rowids</span><span class=\"p\">(</span><span class=\"n\">aids1</span><span class=\"p\">))</span>\n    <span class=\"n\">nids2</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_name_rowids</span><span class=\"p\">(</span><span class=\"n\">aids2</span><span class=\"p\">))</span>\n    <span class=\"n\">isunknowns1</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">is_nid_unknown</span><span class=\"p\">(</span><span class=\"n\">nids1</span><span class=\"p\">))</span>\n    <span class=\"n\">isunknowns2</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">is_nid_unknown</span><span class=\"p\">(</span><span class=\"n\">nids2</span><span class=\"p\">))</span>\n    <span class=\"n\">any_unknown</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">logical_or</span><span class=\"p\">(</span><span class=\"n\">isunknowns1</span><span class=\"p\">,</span> <span class=\"n\">isunknowns2</span><span class=\"p\">)</span>\n    <span class=\"n\">truth_codes</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">((</span><span class=\"n\">nids1</span> <span class=\"o\">==</span> <span class=\"n\">nids2</span><span class=\"p\">),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">int32</span><span class=\"p\">)</span>\n    <span class=\"n\">truth_codes</span><span class=\"p\">[</span><span class=\"n\">any_unknown</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">EVIDENCE_DECISION</span><span class=\"o\">.</span><span class=\"n\">UNKNOWN</span>\n    <span class=\"k\">return</span> <span class=\"n\">truth_codes</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_match_text\"><a class=\"viewcode-back\" href=\"../../../ibeis/#ibeis.annotmatch_funcs.get_match_text\">[docs]</a><span class=\"nd\">@register_ibs_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_match_text</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">):</span>\n    <span class=\"n\">truth</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_match_truth</span><span class=\"p\">(</span><span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">)</span>\n    <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">EVIDENCE_DECISION</span><span class=\"o\">.</span><span class=\"n\">INT_TO_NICE</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">truth</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">text</span></div>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.annotmatch_funcs</span>\n<span class=\"sd\">        python -m ibeis.annotmatch_funcs --allexamples</span>\n<span class=\"sd\">        python -m ibeis.annotmatch_funcs --allexamples --noface --nosrc</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">multiprocessing</span>\n    <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">freeze_support</span><span class=\"p\">()</span>  <span class=\"c1\"># for win32</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>  <span class=\"c1\"># NOQA</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">doctest_funcs</span><span class=\"p\">()</span>\n</pre></div>", "current_page_name": "_modules/ibeis/annotmatch_funcs", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}