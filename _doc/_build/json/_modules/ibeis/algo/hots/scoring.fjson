{"parents": [{"link": "../../../../", "title": "Module code"}, {"link": "../../../", "title": "ibeis"}, {"link": "../../", "title": "ibeis.algo"}, {"link": "../", "title": "ibeis.algo.hots"}], "title": "ibeis.algo.hots.scoring", "body": "<h1>Source code for ibeis.algo.hots.scoring</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"k\">import</span> <span class=\"n\">absolute_import</span><span class=\"p\">,</span> <span class=\"n\">division</span><span class=\"p\">,</span> <span class=\"n\">print_function</span><span class=\"p\">,</span> <span class=\"n\">unicode_literals</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">vtool</span> <span class=\"k\">as</span> <span class=\"nn\">vt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.hots</span> <span class=\"k\">import</span> <span class=\"n\">_pipeline_helpers</span> <span class=\"k\">as</span> <span class=\"n\">plh</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"nb\">print</span><span class=\"p\">,</span> <span class=\"n\">rrr</span><span class=\"p\">,</span> <span class=\"n\">profile</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">inject2</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"score_chipmatch_list\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.hots/#ibeis.algo.hots.scoring.score_chipmatch_list\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">score_chipmatch_list</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"p\">,</span> <span class=\"n\">cm_list</span><span class=\"p\">,</span> <span class=\"n\">score_method</span><span class=\"p\">,</span> <span class=\"n\">progkw</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.algo.hots.scoring --test-score_chipmatch_list</span>\n<span class=\"sd\">        python -m ibeis.algo.hots.scoring --test-score_chipmatch_list:1</span>\n<span class=\"sd\">        python -m ibeis.algo.hots.scoring --test-score_chipmatch_list:0 --show</span>\n\n<span class=\"sd\">    Example0:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # SLOW_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; # xdoctest: +SKIP</span>\n<span class=\"sd\">        &gt;&gt;&gt; # (IMPORTANT)</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.algo.hots.scoring import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs, qreq_, cm_list = plh.testdata_pre_sver()</span>\n<span class=\"sd\">        &gt;&gt;&gt; score_method = qreq_.qparams.prescore_method</span>\n<span class=\"sd\">        &gt;&gt;&gt; score_chipmatch_list(qreq_, cm_list, score_method)</span>\n<span class=\"sd\">        &gt;&gt;&gt; cm = cm_list[0]</span>\n<span class=\"sd\">        &gt;&gt;&gt; assert cm.score_list.argmax() == 0</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.quit_if_noshow()</span>\n<span class=\"sd\">        &gt;&gt;&gt; cm.show_single_annotmatch(qreq_)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.show_if_requested()</span>\n\n<span class=\"sd\">    Example1:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # SLOW_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; # (IMPORTANT)</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.algo.hots.scoring import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs, qreq_, cm_list = plh.testdata_post_sver()</span>\n<span class=\"sd\">        &gt;&gt;&gt; qaid = qreq_.qaids[0]</span>\n<span class=\"sd\">        &gt;&gt;&gt; cm = cm_list[0]</span>\n<span class=\"sd\">        &gt;&gt;&gt; score_method = qreq_.qparams.score_method</span>\n<span class=\"sd\">        &gt;&gt;&gt; score_chipmatch_list(qreq_, cm_list, score_method)</span>\n<span class=\"sd\">        &gt;&gt;&gt; assert cm.score_list.argmax() == 0</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.quit_if_noshow()</span>\n<span class=\"sd\">        &gt;&gt;&gt; cm.show_single_annotmatch(qreq_)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.show_if_requested()</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">progkw</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">progkw</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">time_thresh</span><span class=\"o\">=</span><span class=\"mf\">30.0</span><span class=\"p\">,</span> <span class=\"n\">adjust</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">lbl</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;scoring </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">score_method</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Choose the appropriate scoring mechanism</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[scoring] score </span><span class=\"si\">%d</span><span class=\"s1\"> chipmatches with </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cm_list</span><span class=\"p\">),</span> <span class=\"n\">score_method</span><span class=\"p\">,))</span>\n    <span class=\"k\">if</span> <span class=\"n\">score_method</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;sumamech&#39;</span><span class=\"p\">:</span>\n        <span class=\"k\">for</span> <span class=\"n\">cm</span> <span class=\"ow\">in</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ProgressIter</span><span class=\"p\">(</span><span class=\"n\">cm_list</span><span class=\"p\">,</span> <span class=\"n\">lbl</span><span class=\"o\">=</span><span class=\"n\">lbl</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">progkw</span><span class=\"p\">):</span>\n            <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">score_name_sumamech</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">score_method</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;csum&#39;</span><span class=\"p\">:</span>\n        <span class=\"k\">for</span> <span class=\"n\">cm</span> <span class=\"ow\">in</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ProgressIter</span><span class=\"p\">(</span><span class=\"n\">cm_list</span><span class=\"p\">,</span> <span class=\"n\">lbl</span><span class=\"o\">=</span><span class=\"n\">lbl</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">progkw</span><span class=\"p\">):</span>\n            <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">score_name_maxcsum</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">score_method</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;nsum&#39;</span><span class=\"p\">:</span>\n        <span class=\"k\">for</span> <span class=\"n\">cm</span> <span class=\"ow\">in</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ProgressIter</span><span class=\"p\">(</span><span class=\"n\">cm_list</span><span class=\"p\">,</span> <span class=\"n\">lbl</span><span class=\"o\">=</span><span class=\"n\">lbl</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">progkw</span><span class=\"p\">):</span>\n            <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">score_name_nsum</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span><span class=\"s1\">&#39;[hs] unknown scoring method:&#39;</span> <span class=\"o\">+</span> <span class=\"n\">score_method</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_name_shortlist_aids\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.hots/#ibeis.algo.hots.scoring.get_name_shortlist_aids\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">get_name_shortlist_aids</span><span class=\"p\">(</span><span class=\"n\">daid_list</span><span class=\"p\">,</span> <span class=\"n\">dnid_list</span><span class=\"p\">,</span> <span class=\"n\">annot_score_list</span><span class=\"p\">,</span>\n                            <span class=\"n\">name_score_list</span><span class=\"p\">,</span> <span class=\"n\">nid2_nidx</span><span class=\"p\">,</span>\n                            <span class=\"n\">nNameShortList</span><span class=\"p\">,</span> <span class=\"n\">nAnnotPerName</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.algo.hots.scoring --test-get_name_shortlist_aids</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.algo.hots.scoring import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; daid_list        = np.array([11, 12, 13, 14, 15, 16, 17])</span>\n<span class=\"sd\">        &gt;&gt;&gt; dnid_list        = np.array([21, 21, 21, 22, 22, 23, 24])</span>\n<span class=\"sd\">        &gt;&gt;&gt; annot_score_list = np.array([ 6,  2,  3,  5,  6,  3,  2])</span>\n<span class=\"sd\">        &gt;&gt;&gt; name_score_list  = np.array([ 8,  9,  5,  4])</span>\n<span class=\"sd\">        &gt;&gt;&gt; nid2_nidx        = {21:0, 22:1, 23:2, 24:3}</span>\n<span class=\"sd\">        &gt;&gt;&gt; nNameShortList, nAnnotPerName = 3, 2</span>\n<span class=\"sd\">        &gt;&gt;&gt; args = (daid_list, dnid_list, annot_score_list, name_score_list,</span>\n<span class=\"sd\">        ...         nid2_nidx, nNameShortList, nAnnotPerName)</span>\n<span class=\"sd\">        &gt;&gt;&gt; top_daids = get_name_shortlist_aids(*args)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = str(top_daids)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">        [15, 14, 11, 13, 16]</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">unique_nids</span><span class=\"p\">,</span> <span class=\"n\">groupxs</span>    <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">group_indices</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">dnid_list</span><span class=\"p\">))</span>\n    <span class=\"n\">grouped_annot_scores</span>    <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">apply_grouping</span><span class=\"p\">(</span><span class=\"n\">annot_score_list</span><span class=\"p\">,</span> <span class=\"n\">groupxs</span><span class=\"p\">)</span>\n    <span class=\"n\">grouped_daids</span>           <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">apply_grouping</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">daid_list</span><span class=\"p\">),</span> <span class=\"n\">groupxs</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Ensure name score list is aligned with the unique_nids</span>\n    <span class=\"n\">aligned_name_score_list</span> <span class=\"o\">=</span> <span class=\"n\">name_score_list</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dict_take</span><span class=\"p\">(</span><span class=\"n\">nid2_nidx</span><span class=\"p\">,</span> <span class=\"n\">unique_nids</span><span class=\"p\">))</span>\n    <span class=\"c1\"># Sort each group by the name score</span>\n    <span class=\"n\">group_sortx</span>             <span class=\"o\">=</span> <span class=\"n\">aligned_name_score_list</span><span class=\"o\">.</span><span class=\"n\">argsort</span><span class=\"p\">()[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n    <span class=\"n\">_top_daid_groups</span>        <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">grouped_daids</span><span class=\"p\">,</span> <span class=\"n\">group_sortx</span><span class=\"p\">)</span>\n    <span class=\"n\">_top_annot_score_groups</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">grouped_annot_scores</span><span class=\"p\">,</span> <span class=\"n\">group_sortx</span><span class=\"p\">)</span>\n    <span class=\"n\">top_daid_groups</span>         <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">listclip</span><span class=\"p\">(</span><span class=\"n\">_top_daid_groups</span><span class=\"p\">,</span> <span class=\"n\">nNameShortList</span><span class=\"p\">)</span>\n    <span class=\"n\">top_annot_score_groups</span>  <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">listclip</span><span class=\"p\">(</span><span class=\"n\">_top_annot_score_groups</span><span class=\"p\">,</span> <span class=\"n\">nNameShortList</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Sort within each group by the annotation score</span>\n    <span class=\"n\">top_daid_sortx_groups</span>   <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">annot_score_group</span><span class=\"o\">.</span><span class=\"n\">argsort</span><span class=\"p\">()[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n                               <span class=\"k\">for</span> <span class=\"n\">annot_score_group</span> <span class=\"ow\">in</span> <span class=\"n\">top_annot_score_groups</span><span class=\"p\">]</span>\n    <span class=\"n\">top_sorted_daid_groups</span>  <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">ziptake</span><span class=\"p\">(</span><span class=\"n\">top_daid_groups</span><span class=\"p\">,</span> <span class=\"n\">top_daid_sortx_groups</span><span class=\"p\">)</span>\n    <span class=\"n\">top_clipped_daids</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">listclip</span><span class=\"p\">(</span><span class=\"n\">sorted_daid_group</span><span class=\"p\">,</span> <span class=\"n\">nAnnotPerName</span><span class=\"p\">)</span>\n                         <span class=\"k\">for</span> <span class=\"n\">sorted_daid_group</span> <span class=\"ow\">in</span> <span class=\"n\">top_sorted_daid_groups</span><span class=\"p\">]</span>\n    <span class=\"n\">top_daids</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">top_clipped_daids</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">top_daids</span></div>\n\n\n<div class=\"viewcode-block\" id=\"make_chipmatch_shortlists\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.hots/#ibeis.algo.hots.scoring.make_chipmatch_shortlists\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">make_chipmatch_shortlists</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"p\">,</span> <span class=\"n\">cm_list</span><span class=\"p\">,</span> <span class=\"n\">nNameShortList</span><span class=\"p\">,</span> <span class=\"n\">nAnnotPerName</span><span class=\"p\">,</span> <span class=\"n\">score_method</span><span class=\"o\">=</span><span class=\"s1\">&#39;nsum&#39;</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Makes shortlists for reranking</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.algo.hots.scoring --test-make_chipmatch_shortlists --show</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.algo.hots.scoring import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs, qreq_, cm_list = plh.testdata_pre_sver(&#39;PZ_MTEST&#39;, qaid_list=[18])</span>\n<span class=\"sd\">        &gt;&gt;&gt; score_method    = &#39;nsum&#39;</span>\n<span class=\"sd\">        &gt;&gt;&gt; nNameShortList  = 5</span>\n<span class=\"sd\">        &gt;&gt;&gt; nAnnotPerName   = 6</span>\n<span class=\"sd\">        &gt;&gt;&gt; # apply scores</span>\n<span class=\"sd\">        &gt;&gt;&gt; score_chipmatch_list(qreq_, cm_list, score_method)</span>\n<span class=\"sd\">        &gt;&gt;&gt; cm_input = cm_list[0]</span>\n<span class=\"sd\">        &gt;&gt;&gt; #assert cm_input.dnid_list.take(cm_input.argsort())[0] == cm_input.qnid</span>\n<span class=\"sd\">        &gt;&gt;&gt; cm_shortlist = make_chipmatch_shortlists(qreq_, cm_list, nNameShortList, nAnnotPerName)</span>\n<span class=\"sd\">        &gt;&gt;&gt; cm_input.print_rawinfostr()</span>\n<span class=\"sd\">        &gt;&gt;&gt; cm = cm_shortlist[0]</span>\n<span class=\"sd\">        &gt;&gt;&gt; cm.print_rawinfostr()</span>\n<span class=\"sd\">        &gt;&gt;&gt; # should be sorted already from the shortlist take</span>\n<span class=\"sd\">        &gt;&gt;&gt; top_nid_list = cm.dnid_list</span>\n<span class=\"sd\">        &gt;&gt;&gt; top_aid_list = cm.daid_list</span>\n<span class=\"sd\">        &gt;&gt;&gt; qnid = cm.qnid</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&#39;top_aid_list = %r&#39; % (top_aid_list,))</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&#39;top_nid_list = %r&#39; % (top_nid_list,))</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&#39;qnid = %r&#39; % (qnid,))</span>\n<span class=\"sd\">        &gt;&gt;&gt; rankx = top_nid_list.tolist().index(qnid)</span>\n<span class=\"sd\">        &gt;&gt;&gt; assert rankx == 0, &#39;qnid=%r should be first rank, not rankx=%r&#39; % (qnid, rankx)</span>\n<span class=\"sd\">        &gt;&gt;&gt; max_num_rerank = nNameShortList * nAnnotPerName</span>\n<span class=\"sd\">        &gt;&gt;&gt; min_num_rerank = nNameShortList</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.assert_inbounds(len(top_nid_list), min_num_rerank, max_num_rerank, &#39;incorrect number in shortlist&#39;, eq=True)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.quit_if_noshow()</span>\n<span class=\"sd\">        &gt;&gt;&gt; cm.show_single_annotmatch(qreq_, daid=top_aid_list[0])</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.show_if_requested()</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[scoring] Making shortlist nNameShortList=</span><span class=\"si\">%r</span><span class=\"s1\">, nAnnotPerName=</span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">nNameShortList</span><span class=\"p\">,</span> <span class=\"n\">nAnnotPerName</span><span class=\"p\">))</span>\n    <span class=\"n\">cm_shortlist</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">cm</span> <span class=\"ow\">in</span> <span class=\"n\">cm_list</span><span class=\"p\">:</span>\n        <span class=\"k\">assert</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">score_list</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">&#39;score list must be computed&#39;</span>\n        <span class=\"k\">assert</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">annot_score_list</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">&#39;annot_score_list must be computed&#39;</span>\n        <span class=\"c1\"># FIXME: this should just always be name</span>\n        <span class=\"k\">if</span> <span class=\"n\">score_method</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;nsum&#39;</span><span class=\"p\">:</span>\n            <span class=\"n\">top_aids</span> <span class=\"o\">=</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">get_name_shortlist_aids</span><span class=\"p\">(</span><span class=\"n\">nNameShortList</span><span class=\"p\">,</span> <span class=\"n\">nAnnotPerName</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"n\">score_method</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;csum&#39;</span><span class=\"p\">:</span>\n            <span class=\"n\">top_aids</span> <span class=\"o\">=</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">get_annot_shortlist_aids</span><span class=\"p\">(</span><span class=\"n\">nNameShortList</span> <span class=\"o\">*</span> <span class=\"n\">nAnnotPerName</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">AssertionError</span><span class=\"p\">(</span><span class=\"n\">score_method</span><span class=\"p\">)</span>\n        <span class=\"n\">cm_subset</span> <span class=\"o\">=</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">shortlist_subset</span><span class=\"p\">(</span><span class=\"n\">top_aids</span><span class=\"p\">)</span>\n        <span class=\"n\">cm_shortlist</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">cm_subset</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">cm_shortlist</span></div>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.algo.hots.scoring</span>\n<span class=\"sd\">        python -m ibeis.algo.hots.scoring --allexamples</span>\n<span class=\"sd\">        python -m ibeis.algo.hots.scoring --allexamples --noface --nosrc</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">multiprocessing</span>\n    <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">freeze_support</span><span class=\"p\">()</span>  <span class=\"c1\"># for win32</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>  <span class=\"c1\"># NOQA</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">doctest_funcs</span><span class=\"p\">()</span>\n</pre></div>", "current_page_name": "_modules/ibeis/algo/hots/scoring", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}