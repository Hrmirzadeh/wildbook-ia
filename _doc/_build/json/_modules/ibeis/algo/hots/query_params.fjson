{"parents": [{"link": "../../../../", "title": "Module code"}, {"link": "../../../", "title": "ibeis"}, {"link": "../../", "title": "ibeis.algo"}, {"link": "../", "title": "ibeis.algo.hots"}], "title": "ibeis.algo.hots.query_params", "body": "<h1>Source code for ibeis.algo.hots.query_params</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"k\">import</span> <span class=\"n\">absolute_import</span><span class=\"p\">,</span> <span class=\"n\">division</span><span class=\"p\">,</span> <span class=\"n\">print_function</span><span class=\"p\">,</span> <span class=\"n\">unicode_literals</span>\n<span class=\"kn\">import</span> <span class=\"nn\">collections</span>\n<span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.hots</span> <span class=\"k\">import</span> <span class=\"n\">hstypes</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo</span> <span class=\"k\">import</span> <span class=\"n\">Config</span>\n<span class=\"p\">(</span><span class=\"nb\">print</span><span class=\"p\">,</span> <span class=\"n\">rrr</span><span class=\"p\">,</span> <span class=\"n\">profile</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">inject2</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># This object will behave like a dictionary with ** capability</span>\n<div class=\"viewcode-block\" id=\"QueryParams\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.hots/#ibeis.algo.hots.query_params.QueryParams\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">QueryParams</span><span class=\"p\">(</span><span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">Mapping</span><span class=\"p\">):</span>\n\n    <span class=\"nd\">@profile</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">qparams</span><span class=\"p\">,</span> <span class=\"n\">query_cfg</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">cfgdict</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        DEPRICATE</span>\n\n<span class=\"sd\">        Rename to pipeline params</span>\n\n<span class=\"sd\">        Structure to store static query pipeline parameters</span>\n<span class=\"sd\">        parses nested config structure into this flat one</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            query_cfg (QueryConfig): query_config</span>\n<span class=\"sd\">            cfgdict (dict or None): dictionary to update query_cfg with</span>\n\n<span class=\"sd\">        CommandLine:</span>\n<span class=\"sd\">            python -m ibeis.algo.hots.query_params --test-__init__</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.algo.hots.query_params import *  # NOQA</span>\n<span class=\"sd\">            &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.algo import Config</span>\n<span class=\"sd\">            &gt;&gt;&gt; ibs = ibeis.opendb(&#39;testdb1&#39;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; query_cfg = Config.QueryConfig()</span>\n<span class=\"sd\">            &gt;&gt;&gt; cfgdict = dict(rotation_invariance=True)</span>\n<span class=\"sd\">            &gt;&gt;&gt; qparams = QueryParams(query_cfg, cfgdict)</span>\n<span class=\"sd\">            &gt;&gt;&gt; ut.assert_eq(qparams.hesaff_params[&#39;rotation_invariance&#39;], True)</span>\n\n<span class=\"sd\">            _smk_SMK(agg=True,t=0.0,a=3.0,idf)_</span>\n<span class=\"sd\">            VocabAssign(nAssign=10,a=1.2,s=None,eqw=T)_</span>\n<span class=\"sd\">            VocabTrain(nWords=8000,init=akmeans++,nIters=128,taids=all)_</span>\n<span class=\"sd\">            SV(OFF)_</span>\n<span class=\"sd\">            FEATWEIGHT(ON,uselabel,rf)_</span>\n<span class=\"sd\">            FEAT(hesaff+sift_)_</span>\n<span class=\"sd\">            CHIP(sz450)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># if given custom settings update the config and ensure feasibilty</span>\n        <span class=\"k\">if</span> <span class=\"n\">query_cfg</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">query_cfg</span> <span class=\"o\">=</span> <span class=\"n\">Config</span><span class=\"o\">.</span><span class=\"n\">QueryConfig</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">cfgdict</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">query_cfg</span> <span class=\"o\">=</span> <span class=\"n\">query_cfg</span><span class=\"o\">.</span><span class=\"n\">deepcopy</span><span class=\"p\">()</span>\n            <span class=\"n\">query_cfg</span><span class=\"o\">.</span><span class=\"n\">update_query_cfg</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">cfgdict</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Get flat item list</span>\n        <span class=\"n\">param_list</span> <span class=\"o\">=</span> <span class=\"n\">Config</span><span class=\"o\">.</span><span class=\"n\">parse_config_items</span><span class=\"p\">(</span><span class=\"n\">query_cfg</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Assert that there are no config conflicts</span>\n        <span class=\"n\">duplicate_keys</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">find_duplicate_items</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_list_column</span><span class=\"p\">(</span><span class=\"n\">param_list</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n        <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">duplicate_keys</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Configs have duplicate names: </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">duplicate_keys</span>\n        <span class=\"c1\"># Set nexted config attributes as flat qparam properties</span>\n        <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">val</span> <span class=\"ow\">in</span> <span class=\"n\">param_list</span><span class=\"p\">:</span>\n            <span class=\"nb\">setattr</span><span class=\"p\">(</span><span class=\"n\">qparams</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Add params not implicitly represented in Config object</span>\n        <span class=\"n\">pipeline_root</span>              <span class=\"o\">=</span> <span class=\"n\">query_cfg</span><span class=\"o\">.</span><span class=\"n\">pipeline_root</span>\n        <span class=\"n\">qparams</span><span class=\"o\">.</span><span class=\"n\">chip_cfg_dict</span>      <span class=\"o\">=</span> <span class=\"n\">query_cfg</span><span class=\"o\">.</span><span class=\"n\">_featweight_cfg</span><span class=\"o\">.</span><span class=\"n\">_feat_cfg</span><span class=\"o\">.</span><span class=\"n\">_chip_cfg</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">()</span>\n        <span class=\"n\">qparams</span><span class=\"o\">.</span><span class=\"n\">flann_params</span>       <span class=\"o\">=</span> <span class=\"n\">query_cfg</span><span class=\"o\">.</span><span class=\"n\">flann_cfg</span><span class=\"o\">.</span><span class=\"n\">get_flann_params</span><span class=\"p\">()</span>\n        <span class=\"n\">qparams</span><span class=\"o\">.</span><span class=\"n\">hesaff_params</span>      <span class=\"o\">=</span> <span class=\"n\">query_cfg</span><span class=\"o\">.</span><span class=\"n\">_featweight_cfg</span><span class=\"o\">.</span><span class=\"n\">_feat_cfg</span><span class=\"o\">.</span><span class=\"n\">get_hesaff_params</span><span class=\"p\">()</span>\n        <span class=\"n\">qparams</span><span class=\"o\">.</span><span class=\"n\">pipeline_root</span>      <span class=\"o\">=</span> <span class=\"n\">pipeline_root</span>\n        <span class=\"n\">qparams</span><span class=\"o\">.</span><span class=\"n\">vsmany</span>             <span class=\"o\">=</span> <span class=\"n\">pipeline_root</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;vsmany&#39;</span>\n        <span class=\"n\">qparams</span><span class=\"o\">.</span><span class=\"n\">vsone</span>              <span class=\"o\">=</span> <span class=\"n\">pipeline_root</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;vsone&#39;</span>\n        <span class=\"c1\"># Add custom strings to the mix as well</span>\n        <span class=\"c1\"># TODO; Find better way to specify config strings</span>\n        <span class=\"c1\"># FIXME: probchip is not in here</span>\n        <span class=\"n\">qparams</span><span class=\"o\">.</span><span class=\"n\">probchip_cfgstr</span>   <span class=\"o\">=</span> <span class=\"n\">query_cfg</span><span class=\"o\">.</span><span class=\"n\">_featweight_cfg</span><span class=\"o\">.</span><span class=\"n\">get_cfgstr</span><span class=\"p\">(</span>\n            <span class=\"n\">use_feat</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">use_chip</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"n\">qparams</span><span class=\"o\">.</span><span class=\"n\">featweight_cfgstr</span> <span class=\"o\">=</span> <span class=\"n\">query_cfg</span><span class=\"o\">.</span><span class=\"n\">_featweight_cfg</span><span class=\"o\">.</span><span class=\"n\">get_cfgstr</span><span class=\"p\">()</span>\n        <span class=\"n\">qparams</span><span class=\"o\">.</span><span class=\"n\">chip_cfgstr</span>       <span class=\"o\">=</span> <span class=\"n\">query_cfg</span><span class=\"o\">.</span><span class=\"n\">_featweight_cfg</span><span class=\"o\">.</span><span class=\"n\">_feat_cfg</span><span class=\"o\">.</span><span class=\"n\">_chip_cfg</span><span class=\"o\">.</span><span class=\"n\">get_cfgstr</span><span class=\"p\">()</span>\n        <span class=\"n\">qparams</span><span class=\"o\">.</span><span class=\"n\">feat_cfgstr</span>       <span class=\"o\">=</span> <span class=\"n\">query_cfg</span><span class=\"o\">.</span><span class=\"n\">_featweight_cfg</span><span class=\"o\">.</span><span class=\"n\">_feat_cfg</span><span class=\"o\">.</span><span class=\"n\">get_cfgstr</span><span class=\"p\">()</span>\n        <span class=\"n\">qparams</span><span class=\"o\">.</span><span class=\"n\">nn_cfgstr</span>         <span class=\"o\">=</span> <span class=\"n\">query_cfg</span><span class=\"o\">.</span><span class=\"n\">nn_cfg</span><span class=\"o\">.</span><span class=\"n\">get_cfgstr</span><span class=\"p\">()</span>\n        <span class=\"n\">qparams</span><span class=\"o\">.</span><span class=\"n\">nnweight_cfgstr</span>   <span class=\"o\">=</span> <span class=\"n\">query_cfg</span><span class=\"o\">.</span><span class=\"n\">nnweight_cfg</span><span class=\"o\">.</span><span class=\"n\">get_cfgstr</span><span class=\"p\">()</span>\n        <span class=\"n\">qparams</span><span class=\"o\">.</span><span class=\"n\">sv_cfgstr</span>         <span class=\"o\">=</span> <span class=\"n\">query_cfg</span><span class=\"o\">.</span><span class=\"n\">sv_cfg</span><span class=\"o\">.</span><span class=\"n\">get_cfgstr</span><span class=\"p\">()</span>\n        <span class=\"n\">qparams</span><span class=\"o\">.</span><span class=\"n\">flann_cfgstr</span>      <span class=\"o\">=</span> <span class=\"n\">query_cfg</span><span class=\"o\">.</span><span class=\"n\">flann_cfg</span><span class=\"o\">.</span><span class=\"n\">get_cfgstr</span><span class=\"p\">()</span>\n        <span class=\"n\">qparams</span><span class=\"o\">.</span><span class=\"n\">query_cfgstr</span>      <span class=\"o\">=</span> <span class=\"n\">query_cfg</span><span class=\"o\">.</span><span class=\"n\">get_cfgstr</span><span class=\"p\">()</span>\n\n<div class=\"viewcode-block\" id=\"QueryParams.hack_lnbnn_config_trail\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.hots/#ibeis.algo.hots.query_params.QueryParams.hack_lnbnn_config_trail\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">hack_lnbnn_config_trail</span><span class=\"p\">(</span><span class=\"n\">qparams</span><span class=\"p\">):</span>\n        <span class=\"n\">query_cfg</span> <span class=\"o\">=</span> <span class=\"n\">Config</span><span class=\"o\">.</span><span class=\"n\">QueryConfig</span><span class=\"p\">()</span>\n        <span class=\"n\">lnbnn_trail</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"n\">query_cfg</span><span class=\"o\">.</span><span class=\"n\">nn_cfg</span><span class=\"o\">.</span><span class=\"n\">asdict</span><span class=\"p\">(),</span>\n            <span class=\"n\">query_cfg</span><span class=\"o\">.</span><span class=\"n\">nnweight_cfg</span><span class=\"o\">.</span><span class=\"n\">asdict</span><span class=\"p\">(),</span>\n            <span class=\"n\">query_cfg</span><span class=\"o\">.</span><span class=\"n\">sv_cfg</span><span class=\"o\">.</span><span class=\"n\">asdict</span><span class=\"p\">(),</span>\n            <span class=\"n\">query_cfg</span><span class=\"o\">.</span><span class=\"n\">agg_cfg</span><span class=\"o\">.</span><span class=\"n\">asdict</span><span class=\"p\">(),</span>\n            <span class=\"n\">query_cfg</span><span class=\"o\">.</span><span class=\"n\">flann_cfg</span><span class=\"o\">.</span><span class=\"n\">asdict</span><span class=\"p\">(),</span>\n        <span class=\"p\">]</span>\n        <span class=\"c1\"># Does not include feautres. Instead use</span>\n        <span class=\"c1\"># print(ut.repr3([c.asdict() for c in ibs.depc.get_config_trail(&#39;featweight&#39;, {})]))</span>\n        <span class=\"k\">return</span> <span class=\"n\">lnbnn_trail</span></div>\n\n<div class=\"viewcode-block\" id=\"QueryParams.get_postsver_filtkey_list\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.hots/#ibeis.algo.hots.query_params.QueryParams.get_postsver_filtkey_list\">[docs]</a>    <span class=\"nd\">@profile</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_postsver_filtkey_list</span><span class=\"p\">(</span><span class=\"n\">qparams</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot; HACK: gets columns of fsv post spatial verification.  This will</span>\n<span class=\"sd\">        eventually be incorporated into cmtup_old instead and will not be</span>\n<span class=\"sd\">        dependant on specifically where you are in the pipeline</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">filtkey_list</span> <span class=\"o\">=</span> <span class=\"n\">qparams</span><span class=\"o\">.</span><span class=\"n\">active_filter_list</span>\n        <span class=\"k\">if</span> <span class=\"n\">qparams</span><span class=\"o\">.</span><span class=\"n\">sver_output_weighting</span><span class=\"p\">:</span>\n            <span class=\"n\">filtkey_list</span> <span class=\"o\">=</span> <span class=\"n\">filtkey_list</span><span class=\"p\">[:]</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"n\">hstypes</span><span class=\"o\">.</span><span class=\"n\">FiltKeys</span><span class=\"o\">.</span><span class=\"n\">HOMOGERR</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">filtkey_list</span></div>\n\n    <span class=\"c1\"># Dictionary like interface</span>\n\n<div class=\"viewcode-block\" id=\"QueryParams.get\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.hots/#ibeis.algo.hots.query_params.QueryParams.get\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"n\">qparams</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">d</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot; get a paramater value by string &quot;&quot;&quot;</span>\n        <span class=\"n\">ERROR_ON_DEFAULT</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"k\">if</span> <span class=\"n\">ERROR_ON_DEFAULT</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">qparams</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">qparams</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">d</span><span class=\"p\">)</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__getitem__</span><span class=\"p\">(</span><span class=\"n\">qparams</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">qparams</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__iter__</span><span class=\"p\">(</span><span class=\"n\">qparams</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">iter</span><span class=\"p\">(</span><span class=\"n\">qparams</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__len__</span><span class=\"p\">(</span><span class=\"n\">qparams</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">qparams</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__getstate__</span><span class=\"p\">(</span><span class=\"n\">qparams</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Make QueryRequest pickleable</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.algo.hots.query_params import *  # NOQA</span>\n<span class=\"sd\">            &gt;&gt;&gt; from six.moves import cPickle as pickle</span>\n<span class=\"sd\">            &gt;&gt;&gt; cfgdict = {&#39;pipeline_root&#39;: &#39;vsmany&#39;, &#39;sv_on&#39;: False, &#39;fg_on&#39;: True}</span>\n<span class=\"sd\">            &gt;&gt;&gt; qparams = QueryParams(cfgdict=cfgdict)</span>\n<span class=\"sd\">            &gt;&gt;&gt; qparams_dump = pickle.dumps(qparams)</span>\n<span class=\"sd\">            &gt;&gt;&gt; qparams2 = pickle.loads(qparams_dump)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">state_dict</span> <span class=\"o\">=</span> <span class=\"n\">qparams</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">state_dict</span>\n\n<div class=\"viewcode-block\" id=\"QueryParams.copy\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.hots/#ibeis.algo.hots.query_params.QueryParams.copy\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">copy</span><span class=\"p\">(</span><span class=\"n\">qparams</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">qparams</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__setstate__</span><span class=\"p\">(</span><span class=\"n\">qparams</span><span class=\"p\">,</span> <span class=\"n\">state_dict</span><span class=\"p\">):</span>\n        <span class=\"n\">qparams</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">state_dict</span><span class=\"p\">)</span></div>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.algo.hots.query_params</span>\n<span class=\"sd\">        python -m ibeis.algo.hots.query_params --allexamples</span>\n<span class=\"sd\">        python -m ibeis.algo.hots.query_params --allexamples --noface --nosrc</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">multiprocessing</span>\n    <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">freeze_support</span><span class=\"p\">()</span>  <span class=\"c1\"># for win32</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>  <span class=\"c1\"># NOQA</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">doctest_funcs</span><span class=\"p\">()</span>\n</pre></div>", "current_page_name": "_modules/ibeis/algo/hots/query_params", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}