{"parents": [{"link": "../../../../", "title": "Module code"}, {"link": "../../../", "title": "ibeis"}, {"link": "../../", "title": "ibeis.algo"}, {"link": "../", "title": "ibeis.algo.hots"}], "title": "ibeis.algo.hots.hstypes", "body": "<h1>Source code for ibeis.algo.hots.hstypes</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">hstypes</span>\n<span class=\"sd\">Todo:</span>\n<span class=\"sd\">* SIFT: Root_SIFT -&gt; L2 normalized -&gt; Centering.</span>\n<span class=\"sd\"># http://hal.archives-ouvertes.fr/docs/00/84/07/21/PDF/RR-8325.pdf</span>\n<span class=\"sd\">The devil is in the deatails</span>\n<span class=\"sd\">http://www.robots.ox.ac.uk/~vilem/bmvc2011.pdf</span>\n<span class=\"sd\">This says dont clip, do rootsift instead</span>\n<span class=\"sd\"># http://hal.archives-ouvertes.fr/docs/00/68/81/69/PDF/hal_v1.pdf</span>\n<span class=\"sd\">* Quantization of residual vectors</span>\n<span class=\"sd\">* Burstiness normalization for N-SMK</span>\n<span class=\"sd\">* Implemented A-SMK</span>\n<span class=\"sd\">* Incorporate Spatial Verification</span>\n<span class=\"sd\">* Implement correct cfgstrs based on algorithm input</span>\n<span class=\"sd\">for cached computations.</span>\n<span class=\"sd\">* Color by word</span>\n<span class=\"sd\">* Profile on hyrule</span>\n<span class=\"sd\">* Train vocab on paris</span>\n<span class=\"sd\">* Remove self matches.</span>\n<span class=\"sd\">* New SIFT parameters for pyhesaff (root, powerlaw, meanwhatever, output_dtype)</span>\n\n\n<span class=\"sd\">TODO:</span>\n<span class=\"sd\">    This needs to be less constant when using non-sift descriptors</span>\n\n<span class=\"sd\">Issues:</span>\n<span class=\"sd\">* 10GB are in use when performing query on Oxford 5K</span>\n<span class=\"sd\">* errors when there is a word without any database vectors.</span>\n<span class=\"sd\">currently a weight of zero is hacked in</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"k\">import</span> <span class=\"n\">absolute_import</span><span class=\"p\">,</span> <span class=\"n\">division</span><span class=\"p\">,</span> <span class=\"n\">print_function</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n<span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">noinject</span><span class=\"p\">(</span><span class=\"s1\">&#39;[hstypes]&#39;</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\">#INTEGER_TYPE = np.int32</span>\n<span class=\"c1\">#INDEX_TYPE = np.int32</span>\n<span class=\"c1\">#INDEX_TYPE = np.int64</span>\n<span class=\"c1\"># The index type should be the native sytem int, otherwise np.take will fail</span>\n<span class=\"c1\"># due to the safe constraint.</span>\n<span class=\"n\">INDEX_TYPE</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">int_</span>\n\n<span class=\"c1\">#INTEGER_TYPE = np.int64</span>\n<span class=\"c1\">#INTEGER_TYPE = np.int32</span>\n<span class=\"n\">INTEGER_TYPE</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">int64</span>\n\n<span class=\"c1\">#FLOAT_TYPE = np.float64</span>\n<span class=\"n\">FLOAT_TYPE</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float64</span>\n<span class=\"c1\">#FLOAT_TYPE = np.float32</span>\n\n<span class=\"n\">VEC_DIM</span> <span class=\"o\">=</span> <span class=\"mi\">128</span>\n\n<span class=\"n\">VEC_TYPE</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">uint8</span>\n<span class=\"n\">VEC_IINFO</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">iinfo</span><span class=\"p\">(</span><span class=\"n\">VEC_TYPE</span><span class=\"p\">)</span>\n<span class=\"n\">VEC_MAX</span> <span class=\"o\">=</span> <span class=\"n\">VEC_IINFO</span><span class=\"o\">.</span><span class=\"n\">max</span>\n<span class=\"n\">VEC_MIN</span> <span class=\"o\">=</span> <span class=\"n\">VEC_IINFO</span><span class=\"o\">.</span><span class=\"n\">min</span>\n<span class=\"c1\"># Psuedo max values come from SIFT descriptors implementation</span>\n<span class=\"c1\"># Each component has a theoretical maximum of 512</span>\n<span class=\"n\">VEC_PSEUDO_MAX</span> <span class=\"o\">=</span> <span class=\"mi\">512</span>\n<span class=\"c1\"># unit sphere points can only be twice the maximum descriptor magnitude away</span>\n<span class=\"c1\"># from each other. The pseudo max is 512, so 1024 is the upper bound</span>\n<span class=\"c1\"># FURTHERMORE SIFT Descriptors are constrained to be in the upper right quadrent</span>\n<span class=\"c1\"># which means any two vectors with one full component and zeros elsewhere are</span>\n<span class=\"c1\"># maximally distant. VEC_PSEUDO_MAX_DISTANCE = np.sqrt(2) * VEC_PSEUDO_MAX</span>\n<span class=\"k\">if</span> <span class=\"n\">VEC_MIN</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n    <span class=\"c1\"># SIFT distances can be on only on one quadrent of unit sphere</span>\n    <span class=\"c1\"># hense the np.sqrt(2) coefficient on the component maximum</span>\n    <span class=\"c1\"># Otherwise it would be 2.</span>\n    <span class=\"n\">VEC_PSEUDO_MAX_DISTANCE</span> <span class=\"o\">=</span> <span class=\"n\">VEC_PSEUDO_MAX</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"mf\">2.0</span><span class=\"p\">)</span>\n    <span class=\"n\">VEC_PSEUDO_MAX_DISTANCE_SQRD</span> <span class=\"o\">=</span> <span class=\"mf\">2.0</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mf\">512.0</span> <span class=\"o\">**</span> <span class=\"mf\">2.0</span><span class=\"p\">)</span>\n<span class=\"k\">elif</span> <span class=\"n\">VEC_MIN</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Can be on whole unit sphere</span>\n    <span class=\"n\">VEC_PSEUDO_MAX_DISTANCE</span> <span class=\"o\">=</span> <span class=\"n\">VEC_PSEUDO_MAX</span> <span class=\"o\">*</span> <span class=\"mi\">2</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"k\">raise</span> <span class=\"ne\">AssertionError</span><span class=\"p\">(</span><span class=\"s1\">&#39;impossible state&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">PSEUDO_UINT8_MAX_SQRD</span> <span class=\"o\">=</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">VEC_PSEUDO_MAX</span><span class=\"p\">)</span> <span class=\"o\">**</span> <span class=\"mi\">2</span>\n\n\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">SeeAlso:</span>\n<span class=\"sd\">    vt.distance.understanding_pseudomax_props</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n\n\n<span class=\"n\">RVEC_TYPE</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">int8</span>\n<span class=\"c1\">#RVEC_TYPE = np.float16</span>\n<span class=\"k\">if</span> <span class=\"n\">RVEC_TYPE</span> <span class=\"o\">==</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">int8</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Unfortunatley int8 cannot represent NaN, maybe used a masked array</span>\n    <span class=\"n\">RVEC_INFO</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">iinfo</span><span class=\"p\">(</span><span class=\"n\">RVEC_TYPE</span><span class=\"p\">)</span>\n    <span class=\"n\">RVEC_MAX</span> <span class=\"o\">=</span> <span class=\"mi\">128</span>\n    <span class=\"n\">RVEC_MIN</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">128</span>\n    <span class=\"c1\"># Psuedo max values is used for a quantization trick where you pack more data</span>\n    <span class=\"c1\"># into a smaller space than would normally be allowed. We are able to do this</span>\n    <span class=\"c1\"># because values will hardly ever be close to the true max.</span>\n    <span class=\"n\">RVEC_PSEUDO_MAX</span> <span class=\"o\">=</span> <span class=\"n\">RVEC_MAX</span> <span class=\"o\">*</span> <span class=\"mi\">2</span>\n    <span class=\"n\">RVEC_PSEUDO_MAX_SQRD</span> <span class=\"o\">=</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">RVEC_PSEUDO_MAX</span> <span class=\"o\">**</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"k\">elif</span> <span class=\"n\">RVEC_TYPE</span> <span class=\"o\">==</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float16</span><span class=\"p\">:</span>\n    <span class=\"n\">RVEC_INFO</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">finfo</span><span class=\"p\">(</span><span class=\"n\">RVEC_TYPE</span><span class=\"p\">)</span>\n    <span class=\"n\">RVEC_MAX</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>\n    <span class=\"n\">RVEC_MIN</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mf\">1.0</span>\n    <span class=\"n\">RVEC_PSEUDO_MAX</span> <span class=\"o\">=</span> <span class=\"n\">RVEC_MAX</span>\n    <span class=\"n\">RVEC_PSEUDO_MAX_SQRD</span> <span class=\"o\">=</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">RVEC_PSEUDO_MAX</span> <span class=\"o\">**</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"k\">raise</span> <span class=\"ne\">AssertionError</span><span class=\"p\">(</span><span class=\"s1\">&#39;impossible RVEC_TYPE&#39;</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Feature Match datatype</span>\n<span class=\"n\">FM_DTYPE</span>  <span class=\"o\">=</span> <span class=\"n\">INTEGER_TYPE</span>\n<span class=\"c1\"># Feature Score datatype</span>\n<span class=\"n\">FS_DTYPE</span>  <span class=\"o\">=</span> <span class=\"n\">FLOAT_TYPE</span>\n<span class=\"c1\"># Feature Rank datatype</span>\n<span class=\"c1\">#FK_DTYPE  = np.int16</span>\n<span class=\"n\">FK_DTYPE</span>  <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">int8</span>\n\n\n<div class=\"viewcode-block\" id=\"FiltKeys\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.hots/#ibeis.algo.hots.hstypes.FiltKeys\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">FiltKeys</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"n\">DISTINCTIVENESS</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;distinctiveness&#39;</span>\n    <span class=\"n\">FG</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;fg&#39;</span>\n    <span class=\"n\">RATIO</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;ratio&#39;</span>\n    <span class=\"n\">DIST</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;dist&#39;</span>\n    <span class=\"n\">BARL2</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;bar_l2&#39;</span>\n    <span class=\"n\">LNBNN</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;lnbnn&#39;</span>\n    <span class=\"n\">HOMOGERR</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;homogerr&#39;</span></div>\n\n<span class=\"c1\"># Denote which scores should be  used as weights</span>\n<span class=\"c1\"># the others are used as scores</span>\n<span class=\"n\">WEIGHT_FILTERS</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">FiltKeys</span><span class=\"o\">.</span><span class=\"n\">FG</span><span class=\"p\">,</span> <span class=\"n\">FiltKeys</span><span class=\"o\">.</span><span class=\"n\">DISTINCTIVENESS</span><span class=\"p\">,</span> <span class=\"n\">FiltKeys</span><span class=\"o\">.</span><span class=\"n\">HOMOGERR</span><span class=\"p\">]</span>\n\n\n<span class=\"c1\"># Replace old cmtup_old with ducktype</span>\n<span class=\"c1\"># Keep this turned off for now until we actually start using it</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.algo.hots.hstypes</span>\n<span class=\"sd\">        python -m ibeis.algo.hots.hstypes --allexamples</span>\n<span class=\"sd\">        python -m ibeis.algo.hots.hstypes --allexamples --noface --nosrc</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">multiprocessing</span>\n    <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">freeze_support</span><span class=\"p\">()</span>  <span class=\"c1\"># for win32</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>  <span class=\"c1\"># NOQA</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">doctest_funcs</span><span class=\"p\">()</span>\n</pre></div>", "current_page_name": "_modules/ibeis/algo/hots/hstypes", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}