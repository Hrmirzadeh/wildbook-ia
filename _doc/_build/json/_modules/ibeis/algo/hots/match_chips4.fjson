{"parents": [{"link": "../../../../", "title": "Module code"}, {"link": "../../../", "title": "ibeis"}, {"link": "../../", "title": "ibeis.algo"}, {"link": "../", "title": "ibeis.algo.hots"}], "title": "ibeis.algo.hots.match_chips4", "body": "<h1>Source code for ibeis.algo.hots.match_chips4</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">Runs functions in pipeline to get query reuslts and does some caching.</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"k\">import</span> <span class=\"n\">absolute_import</span><span class=\"p\">,</span> <span class=\"n\">division</span><span class=\"p\">,</span> <span class=\"n\">print_function</span><span class=\"p\">,</span> <span class=\"n\">unicode_literals</span>\n<span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n<span class=\"kn\">from</span> <span class=\"nn\">os.path</span> <span class=\"k\">import</span> <span class=\"n\">exists</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.hots</span> <span class=\"k\">import</span> <span class=\"n\">chip_match</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.hots</span> <span class=\"k\">import</span> <span class=\"n\">pipeline</span>\n<span class=\"p\">(</span><span class=\"nb\">print</span><span class=\"p\">,</span> <span class=\"n\">rrr</span><span class=\"p\">,</span> <span class=\"n\">profile</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">inject2</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># TODO: Move to params</span>\n<span class=\"n\">USE_HOTSPOTTER_CACHE</span> <span class=\"o\">=</span> <span class=\"n\">pipeline</span><span class=\"o\">.</span><span class=\"n\">USE_HOTSPOTTER_CACHE</span>\n<span class=\"n\">USE_CACHE</span>      <span class=\"o\">=</span> <span class=\"ow\">not</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argflag</span><span class=\"p\">((</span><span class=\"s1\">&#39;--nocache-query&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;--noqcache&#39;</span><span class=\"p\">))</span>  <span class=\"ow\">and</span> <span class=\"n\">USE_HOTSPOTTER_CACHE</span>\n<span class=\"n\">USE_BIGCACHE</span>   <span class=\"o\">=</span> <span class=\"ow\">not</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argflag</span><span class=\"p\">((</span><span class=\"s1\">&#39;--nocache-big&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;--no-bigcache-query&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;--noqcache&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;--nobigcache&#39;</span><span class=\"p\">))</span> <span class=\"ow\">and</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">USE_CACHE</span>\n<span class=\"n\">USE_SUPERCACHE</span> <span class=\"o\">=</span> <span class=\"ow\">not</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argflag</span><span class=\"p\">((</span><span class=\"s1\">&#39;--nocache-super&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;--no-supercache-query&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;--noqcache&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;--nosupercache&#39;</span><span class=\"p\">))</span> <span class=\"ow\">and</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">USE_CACHE</span>\n<span class=\"n\">SAVE_CACHE</span>     <span class=\"o\">=</span> <span class=\"ow\">not</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argflag</span><span class=\"p\">(</span><span class=\"s1\">&#39;--nocache-save&#39;</span><span class=\"p\">)</span>\n<span class=\"c1\">#MIN_BIGCACHE_BUNDLE = 20</span>\n<span class=\"c1\">#MIN_BIGCACHE_BUNDLE = 150</span>\n<span class=\"n\">MIN_BIGCACHE_BUNDLE</span> <span class=\"o\">=</span> <span class=\"mi\">64</span>\n<span class=\"n\">HOTS_BATCH_SIZE</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argval</span><span class=\"p\">(</span><span class=\"s1\">&#39;--hots-batch-size&#39;</span><span class=\"p\">,</span> <span class=\"n\">type_</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\">#----------------------</span>\n<span class=\"c1\"># Main Query Logic</span>\n<span class=\"c1\">#----------------------</span>\n\n<div class=\"viewcode-block\" id=\"submit_query_request\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.hots/#ibeis.algo.hots.match_chips4.submit_query_request\">[docs]</a><span class=\"nd\">@profile</span>\n<span class=\"k\">def</span> <span class=\"nf\">submit_query_request</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"p\">,</span> <span class=\"n\">use_cache</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">use_bigcache</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                         <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">save_qcache</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">use_supercache</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                         <span class=\"n\">invalidate_supercache</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Called from qreq_.execute</span>\n\n<span class=\"sd\">    Checks a big cache for qaid2_cm.  If cache miss, tries to load each cm</span>\n<span class=\"sd\">    individually.  On an individual cache miss, it preforms the query.</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.algo.hots.match_chips4 --test-submit_query_request</span>\n\n<span class=\"sd\">    Examples:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # SLOW_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; # xdoctest: +SKIP</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.algo.hots.match_chips4 import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; qaid_list = [1]</span>\n<span class=\"sd\">        &gt;&gt;&gt; daid_list = [1, 2, 3, 4, 5]</span>\n<span class=\"sd\">        &gt;&gt;&gt; use_bigcache = True</span>\n<span class=\"sd\">        &gt;&gt;&gt; use_cache = True</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(db=&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; qreq_ = ibs.new_query_request(qaid_list, daid_list, verbose=True)</span>\n<span class=\"sd\">        &gt;&gt;&gt; cm_list = submit_query_request(qreq_=qreq_)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\"># Get flag defaults if necessary</span>\n    <span class=\"k\">if</span> <span class=\"n\">verbose</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">verbose</span> <span class=\"o\">=</span> <span class=\"n\">pipeline</span><span class=\"o\">.</span><span class=\"n\">VERB_PIPELINE</span>\n    <span class=\"k\">if</span> <span class=\"n\">use_cache</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">use_cache</span> <span class=\"o\">=</span> <span class=\"n\">USE_CACHE</span>\n    <span class=\"k\">if</span> <span class=\"n\">save_qcache</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">save_qcache</span> <span class=\"o\">=</span> <span class=\"n\">SAVE_CACHE</span>\n    <span class=\"k\">if</span> <span class=\"n\">use_bigcache</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">use_bigcache</span> <span class=\"o\">=</span> <span class=\"n\">USE_BIGCACHE</span>\n    <span class=\"k\">if</span> <span class=\"n\">use_supercache</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">use_supercache</span> <span class=\"o\">=</span> <span class=\"n\">USE_SUPERCACHE</span>\n    <span class=\"c1\"># Create new query request object to store temporary state</span>\n    <span class=\"k\">if</span> <span class=\"n\">verbose</span><span class=\"p\">:</span>\n        <span class=\"c1\">#print(&#39;[mc4] --- Submit QueryRequest_ --- &#39;)</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">colorprint</span><span class=\"p\">(</span><span class=\"s1\">&#39;[mc4] --- Submit QueryRequest_ --- &#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;darkyellow&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">qreq_</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">&#39;query request must be prebuilt&#39;</span>\n\n    <span class=\"c1\"># Check fo empty queries</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">daids</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;there are no database chips&#39;</span>\n        <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">qaids</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;there are no query chips&#39;</span>\n    <span class=\"k\">except</span> <span class=\"ne\">AssertionError</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">printex</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Impossible query request&#39;</span><span class=\"p\">,</span> <span class=\"n\">iswarning</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                   <span class=\"n\">keys</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;qreq_.qaids&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;qreq_.daids&#39;</span><span class=\"p\">])</span>\n        <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">SUPER_STRICT</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span>\n        <span class=\"n\">cm_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kc\">None</span> <span class=\"k\">for</span> <span class=\"n\">qaid</span> <span class=\"ow\">in</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">qaids</span><span class=\"p\">]</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"c1\"># --- BIG CACHE ---</span>\n        <span class=\"c1\"># Do not use bigcache single queries</span>\n        <span class=\"n\">is_big</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">qaids</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"n\">MIN_BIGCACHE_BUNDLE</span>\n        <span class=\"n\">use_bigcache_</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">use_bigcache</span> <span class=\"ow\">and</span> <span class=\"n\">use_cache</span> <span class=\"ow\">and</span> <span class=\"n\">is_big</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">use_bigcache_</span> <span class=\"ow\">or</span> <span class=\"n\">save_qcache</span><span class=\"p\">):</span>\n            <span class=\"n\">cacher</span> <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">get_big_cacher</span><span class=\"p\">()</span>\n            <span class=\"k\">if</span> <span class=\"n\">use_bigcache_</span><span class=\"p\">:</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"n\">qaid2_cm</span> <span class=\"o\">=</span> <span class=\"n\">cacher</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">()</span>\n                    <span class=\"n\">cm_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">qaid2_cm</span><span class=\"p\">[</span><span class=\"n\">qaid</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">qaid</span> <span class=\"ow\">in</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">qaids</span><span class=\"p\">]</span>\n                <span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">IOError</span><span class=\"p\">,</span> <span class=\"ne\">AttributeError</span><span class=\"p\">):</span>\n                    <span class=\"k\">pass</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"k\">return</span> <span class=\"n\">cm_list</span>\n        <span class=\"c1\"># ------------</span>\n        <span class=\"c1\"># Execute query request</span>\n        <span class=\"n\">qaid2_cm</span> <span class=\"o\">=</span> <span class=\"n\">execute_query_and_save_L1</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"p\">,</span> <span class=\"n\">use_cache</span><span class=\"p\">,</span> <span class=\"n\">save_qcache</span><span class=\"p\">,</span>\n                                             <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">verbose</span><span class=\"p\">,</span>\n                                             <span class=\"n\">use_supercache</span><span class=\"o\">=</span><span class=\"n\">use_supercache</span><span class=\"p\">,</span>\n                                             <span class=\"n\">invalidate_supercache</span><span class=\"o\">=</span><span class=\"n\">invalidate_supercache</span><span class=\"p\">)</span>\n        <span class=\"c1\"># ------------</span>\n        <span class=\"k\">if</span> <span class=\"n\">save_qcache</span> <span class=\"ow\">and</span> <span class=\"n\">is_big</span><span class=\"p\">:</span>\n            <span class=\"n\">cacher</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">qaid2_cm</span><span class=\"p\">)</span>\n\n        <span class=\"n\">cm_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">qaid2_cm</span><span class=\"p\">[</span><span class=\"n\">qaid</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">qaid</span> <span class=\"ow\">in</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">qaids</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">cm_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"execute_query_and_save_L1\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.hots/#ibeis.algo.hots.match_chips4.execute_query_and_save_L1\">[docs]</a><span class=\"nd\">@profile</span>\n<span class=\"k\">def</span> <span class=\"nf\">execute_query_and_save_L1</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"p\">,</span> <span class=\"n\">use_cache</span><span class=\"p\">,</span> <span class=\"n\">save_qcache</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                              <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">use_supercache</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                              <span class=\"n\">invalidate_supercache</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        qreq_ (ibeis.QueryRequest):</span>\n<span class=\"sd\">        use_cache (bool):</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        qaid2_cm</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.algo.hots.match_chips4 execute_query_and_save_L1:0</span>\n<span class=\"sd\">        python -m ibeis.algo.hots.match_chips4 execute_query_and_save_L1:1</span>\n<span class=\"sd\">        python -m ibeis.algo.hots.match_chips4 execute_query_and_save_L1:2</span>\n<span class=\"sd\">        python -m ibeis.algo.hots.match_chips4 execute_query_and_save_L1:3</span>\n\n\n<span class=\"sd\">    Example0:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # SLOW_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; # xdoctest: +SKIP</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.algo.hots.match_chips4 import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; cfgdict1 = dict(codename=&#39;vsmany&#39;, sv_on=True)</span>\n<span class=\"sd\">        &gt;&gt;&gt; p = &#39;default&#39; + ut.get_cfg_lbl(cfgdict1)</span>\n<span class=\"sd\">        &gt;&gt;&gt; qreq_ = ibeis.main_helpers.testdata_qreq_(p=p, qaid_override=[1, 2, 3, 4)</span>\n<span class=\"sd\">        &gt;&gt;&gt; use_cache, save_qcache, verbose = False, False, True</span>\n<span class=\"sd\">        &gt;&gt;&gt; qaid2_cm = execute_query_and_save_L1(qreq_, use_cache, save_qcache, verbose)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(qaid2_cm)</span>\n\n<span class=\"sd\">    Example1:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # SLOW_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; # xdoctest: +SKIP</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.algo.hots.match_chips4 import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; cfgdict1 = dict(codename=&#39;vsone&#39;, sv_on=True)</span>\n<span class=\"sd\">        &gt;&gt;&gt; p = &#39;default&#39; + ut.get_cfg_lbl(cfgdict1)</span>\n<span class=\"sd\">        &gt;&gt;&gt; qreq_ = ibeis.main_helpers.testdata_qreq_(p=p, qaid_override=[1, 2, 3, 4)</span>\n<span class=\"sd\">        &gt;&gt;&gt; use_cache, save_qcache, verbose = False, False, True</span>\n<span class=\"sd\">        &gt;&gt;&gt; qaid2_cm = execute_query_and_save_L1(qreq_, use_cache, save_qcache, verbose)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(qaid2_cm)</span>\n\n<span class=\"sd\">    Example1:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # SLOW_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; # xdoctest: +SKIP</span>\n<span class=\"sd\">        &gt;&gt;&gt; # TEST SAVE</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.algo.hots.match_chips4 import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; cfgdict1 = dict(codename=&#39;vsmany&#39;, sv_on=True)</span>\n<span class=\"sd\">        &gt;&gt;&gt; p = &#39;default&#39; + ut.get_cfg_lbl(cfgdict1)</span>\n<span class=\"sd\">        &gt;&gt;&gt; qreq_ = ibeis.main_helpers.testdata_qreq_(p=p, qaid_override=[1, 2, 3, 4)</span>\n<span class=\"sd\">        &gt;&gt;&gt; use_cache, save_qcache, verbose = False, True, True</span>\n<span class=\"sd\">        &gt;&gt;&gt; qaid2_cm = execute_query_and_save_L1(qreq_, use_cache, save_qcache, verbose)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(qaid2_cm)</span>\n\n<span class=\"sd\">    Example2:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # SLOW_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; # xdoctest: +SKIP</span>\n<span class=\"sd\">        &gt;&gt;&gt; # TEST LOAD</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.algo.hots.match_chips4 import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; cfgdict1 = dict(codename=&#39;vsmany&#39;, sv_on=True)</span>\n<span class=\"sd\">        &gt;&gt;&gt; p = &#39;default&#39; + ut.get_cfg_lbl(cfgdict1)</span>\n<span class=\"sd\">        &gt;&gt;&gt; qreq_ = ibeis.main_helpers.testdata_qreq_(p=p, qaid_override=[1, 2, 3, 4)</span>\n<span class=\"sd\">        &gt;&gt;&gt; use_cache, save_qcache, verbose = True, True, True</span>\n<span class=\"sd\">        &gt;&gt;&gt; qaid2_cm = execute_query_and_save_L1(qreq_, use_cache, save_qcache, verbose)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(qaid2_cm)</span>\n\n<span class=\"sd\">    Example2:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; # TEST PARTIAL HIT</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.algo.hots.match_chips4 import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; cfgdict1 = dict(codename=&#39;vsmany&#39;, sv_on=False, prescore_method=&#39;csum&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; p = &#39;default&#39; + ut.get_cfg_lbl(cfgdict1)</span>\n<span class=\"sd\">        &gt;&gt;&gt; qreq_ = ibeis.main_helpers.testdata_qreq_(p=p, qaid_override=[1, 2, 3,</span>\n<span class=\"sd\">        &gt;&gt;&gt;                                                               4, 5, 6,</span>\n<span class=\"sd\">        &gt;&gt;&gt;                                                               7, 8, 9])</span>\n<span class=\"sd\">        &gt;&gt;&gt; use_cache, save_qcache, verbose = False, True, False</span>\n<span class=\"sd\">        &gt;&gt;&gt; qaid2_cm = execute_query_and_save_L1(qreq_, use_cache,</span>\n<span class=\"sd\">        &gt;&gt;&gt;                                      save_qcache, verbose,</span>\n<span class=\"sd\">        &gt;&gt;&gt;                                      batch_size=3)</span>\n<span class=\"sd\">        &gt;&gt;&gt; cm = qaid2_cm[1]</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.delete(cm.get_fpath(qreq_))</span>\n<span class=\"sd\">        &gt;&gt;&gt; cm = qaid2_cm[4]</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.delete(cm.get_fpath(qreq_))</span>\n<span class=\"sd\">        &gt;&gt;&gt; cm = qaid2_cm[5]</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.delete(cm.get_fpath(qreq_))</span>\n<span class=\"sd\">        &gt;&gt;&gt; cm = qaid2_cm[6]</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.delete(cm.get_fpath(qreq_))</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&#39;Re-execute&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; qaid2_cm_ = execute_query_and_save_L1(qreq_, use_cache,</span>\n<span class=\"sd\">        &gt;&gt;&gt;                                       save_qcache, verbose,</span>\n<span class=\"sd\">        &gt;&gt;&gt;                                       batch_size=3)</span>\n<span class=\"sd\">        &gt;&gt;&gt; assert all([qaid2_cm_[qaid] == qaid2_cm[qaid] for qaid in qreq_.qaids])</span>\n<span class=\"sd\">        &gt;&gt;&gt; [ut.delete(fpath) for fpath in qreq_.get_chipmatch_fpaths(qreq_.qaids)]</span>\n\n<span class=\"sd\">    Ignore:</span>\n<span class=\"sd\">        other = cm_ = qaid2_cm_[qaid]</span>\n<span class=\"sd\">        cm = qaid2_cm[qaid]</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">invalidate_supercache</span><span class=\"p\">:</span>\n        <span class=\"n\">dpath</span> <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">get_qresdir</span><span class=\"p\">()</span>\n        <span class=\"n\">fpath_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">glob</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"si\">%s</span><span class=\"s1\">/*_cm_supercache_*&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">dpath</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n        <span class=\"k\">for</span> <span class=\"n\">fpath</span> <span class=\"ow\">in</span> <span class=\"n\">fpath_list</span><span class=\"p\">:</span>\n            <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">fpath</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">use_cache</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">verbose</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[mc4] cache-query is on&#39;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">use_supercache</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[mc4] supercache-query is on&#39;</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Try loading as many cached results as possible</span>\n        <span class=\"n\">qaid2_cm_hit</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"n\">external_qaids</span> <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">qaids</span>\n        <span class=\"n\">fpath_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">get_chipmatch_fpaths</span><span class=\"p\">(</span><span class=\"n\">external_qaids</span><span class=\"p\">,</span> <span class=\"n\">super_qres_cache</span><span class=\"o\">=</span><span class=\"n\">use_supercache</span><span class=\"p\">))</span>\n        <span class=\"n\">exists_flags</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">fpath</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">fpath</span> <span class=\"ow\">in</span> <span class=\"n\">fpath_list</span><span class=\"p\">]</span>\n        <span class=\"n\">qaids_hit</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">external_qaids</span><span class=\"p\">,</span> <span class=\"n\">exists_flags</span><span class=\"p\">)</span>\n        <span class=\"n\">fpaths_hit</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">fpath_list</span><span class=\"p\">,</span> <span class=\"n\">exists_flags</span><span class=\"p\">)</span>\n        <span class=\"n\">fpath_iter</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ProgIter</span><span class=\"p\">(</span>\n            <span class=\"n\">fpaths_hit</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">fpaths_hit</span><span class=\"p\">),</span> <span class=\"n\">enabled</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">fpaths_hit</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n            <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">&#39;loading cache hits&#39;</span><span class=\"p\">,</span> <span class=\"n\">adjust</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">cm_hit_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                <span class=\"n\">chip_match</span><span class=\"o\">.</span><span class=\"n\">ChipMatch</span><span class=\"o\">.</span><span class=\"n\">load_from_fpath</span><span class=\"p\">(</span><span class=\"n\">fpath</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n                <span class=\"k\">for</span> <span class=\"n\">fpath</span> <span class=\"ow\">in</span> <span class=\"n\">fpath_iter</span>\n            <span class=\"p\">]</span>\n            <span class=\"k\">assert</span> <span class=\"nb\">all</span><span class=\"p\">([</span><span class=\"n\">qaid</span> <span class=\"o\">==</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">qaid</span> <span class=\"k\">for</span> <span class=\"n\">qaid</span><span class=\"p\">,</span> <span class=\"n\">cm</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">qaids_hit</span><span class=\"p\">,</span> <span class=\"n\">cm_hit_list</span><span class=\"p\">)]),</span> <span class=\"p\">(</span>\n                <span class=\"s1\">&#39;inconsistent qaid and cm.qaid&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">qaid2_cm_hit</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">qaid</span><span class=\"p\">:</span> <span class=\"n\">cm</span> <span class=\"k\">for</span> <span class=\"n\">cm</span> <span class=\"ow\">in</span> <span class=\"n\">cm_hit_list</span><span class=\"p\">}</span>\n        <span class=\"k\">except</span> <span class=\"n\">chip_match</span><span class=\"o\">.</span><span class=\"n\">NeedRecomputeError</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;NeedRecomputeError: Some cached chips need to recompute&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">fpath_iter</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ProgIter</span><span class=\"p\">(</span>\n                <span class=\"n\">fpaths_hit</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">fpaths_hit</span><span class=\"p\">),</span> <span class=\"n\">enabled</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">fpaths_hit</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n                <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">&#39;checking chipmatch cache&#39;</span><span class=\"p\">,</span> <span class=\"n\">adjust</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"c1\"># Recompute those that fail loading</span>\n            <span class=\"n\">qaid2_cm_hit</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n            <span class=\"k\">for</span> <span class=\"n\">fpath</span> <span class=\"ow\">in</span> <span class=\"n\">fpath_iter</span><span class=\"p\">:</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"n\">cm</span> <span class=\"o\">=</span> <span class=\"n\">chip_match</span><span class=\"o\">.</span><span class=\"n\">ChipMatch</span><span class=\"o\">.</span><span class=\"n\">load_from_fpath</span><span class=\"p\">(</span><span class=\"n\">fpath</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n                <span class=\"k\">except</span> <span class=\"n\">chip_match</span><span class=\"o\">.</span><span class=\"n\">NeedRecomputeError</span><span class=\"p\">:</span>\n                    <span class=\"k\">pass</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">qaid2_cm_hit</span><span class=\"p\">[</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">qaid</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">cm</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"si\">%d</span><span class=\"s1\"> / </span><span class=\"si\">%d</span><span class=\"s1\"> cached matches need to be recomputed&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span>\n                <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">qaids_hit</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">qaid2_cm_hit</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">qaids_hit</span><span class=\"p\">)))</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">qaid2_cm_hit</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">external_qaids</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">qaid2_cm_hit</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">qaid2_cm_hit</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">QUIET</span><span class=\"p\">:</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;... partial cm cache hit </span><span class=\"si\">%d</span><span class=\"s1\">/</span><span class=\"si\">%d</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span>\n                    <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">qaid2_cm_hit</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">external_qaids</span><span class=\"p\">)))</span>\n        <span class=\"n\">cachehit_qaids</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">qaid2_cm_hit</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n        <span class=\"c1\"># mask queries that have already been executed</span>\n        <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">set_external_qaid_mask</span><span class=\"p\">(</span><span class=\"n\">cachehit_qaids</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">VERBOSE</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[mc4] cache-query is off&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">qaid2_cm_hit</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"n\">qaid2_cm</span> <span class=\"o\">=</span> <span class=\"n\">execute_query2</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"p\">,</span> <span class=\"n\">save_qcache</span><span class=\"p\">,</span> <span class=\"n\">batch_size</span><span class=\"p\">,</span> <span class=\"n\">use_supercache</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Merge cache hits with computed misses</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">qaid2_cm_hit</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"n\">qaid2_cm</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">qaid2_cm_hit</span><span class=\"p\">)</span>\n    <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">set_external_qaid_mask</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>  <span class=\"c1\"># undo state changes</span>\n    <span class=\"k\">return</span> <span class=\"n\">qaid2_cm</span></div>\n\n\n<div class=\"viewcode-block\" id=\"execute_query2\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.hots/#ibeis.algo.hots.match_chips4.execute_query2\">[docs]</a><span class=\"nd\">@profile</span>\n<span class=\"k\">def</span> <span class=\"nf\">execute_query2</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"p\">,</span> <span class=\"n\">save_qcache</span><span class=\"p\">,</span> <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">use_supercache</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Breaks up query request into several subrequests</span>\n<span class=\"sd\">    to process &quot;more efficiently&quot; and safer as well.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">prog_hook</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">preload_hook</span><span class=\"p\">,</span> <span class=\"n\">query_hook</span> <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">prog_hook</span><span class=\"o\">.</span><span class=\"n\">subdivide</span><span class=\"p\">(</span><span class=\"n\">spacing</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">8</span><span class=\"p\">])</span>\n        <span class=\"n\">preload_hook</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">lbl</span><span class=\"o\">=</span><span class=\"s1\">&#39;preloading&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">prog_hook</span> <span class=\"o\">=</span> <span class=\"n\">query_hook</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">preload_hook</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"c1\"># Load features / weights for all annotations</span>\n    <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">lazy_preload</span><span class=\"p\">(</span><span class=\"n\">prog_hook</span><span class=\"o\">=</span><span class=\"n\">preload_hook</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">verbose</span> <span class=\"ow\">and</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">NOT_QUIET</span><span class=\"p\">)</span>\n\n    <span class=\"n\">all_qaids</span> <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">qaids</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;len(missed_qaids) = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">all_qaids</span><span class=\"p\">),))</span>\n    <span class=\"n\">qaid2_cm</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"c1\"># vsone must have a chunksize of 1</span>\n    <span class=\"k\">if</span> <span class=\"n\">batch_size</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">HOTS_BATCH_SIZE</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">hots_batch_size</span> <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">other_cfg</span><span class=\"o\">.</span><span class=\"n\">hots_batch_size</span>\n            <span class=\"c1\">#hots_batch_size = 256</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">hots_batch_size</span> <span class=\"o\">=</span> <span class=\"n\">HOTS_BATCH_SIZE</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">hots_batch_size</span> <span class=\"o\">=</span> <span class=\"n\">batch_size</span>\n    <span class=\"n\">chunksize</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"k\">if</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">qparams</span><span class=\"o\">.</span><span class=\"n\">vsone</span> <span class=\"k\">else</span> <span class=\"n\">hots_batch_size</span>\n\n    <span class=\"c1\"># Iterate over vsone queries in chunks.</span>\n    <span class=\"n\">n_total_chunks</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_num_chunks</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">all_qaids</span><span class=\"p\">),</span> <span class=\"n\">chunksize</span><span class=\"p\">)</span>\n    <span class=\"n\">qaid_chunk_iter</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ichunks</span><span class=\"p\">(</span><span class=\"n\">all_qaids</span><span class=\"p\">,</span> <span class=\"n\">chunksize</span><span class=\"p\">)</span>\n    <span class=\"n\">_qreq_iter</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">shallowcopy</span><span class=\"p\">(</span><span class=\"n\">qaids</span><span class=\"o\">=</span><span class=\"n\">qaids</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">qaids</span> <span class=\"ow\">in</span> <span class=\"n\">qaid_chunk_iter</span><span class=\"p\">)</span>\n    <span class=\"n\">sub_qreq_iter</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ProgIter</span><span class=\"p\">(</span><span class=\"n\">_qreq_iter</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"o\">=</span><span class=\"n\">n_total_chunks</span><span class=\"p\">,</span> <span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n                                <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">&#39;[mc4] query chunk: &#39;</span><span class=\"p\">,</span>\n                                <span class=\"n\">prog_hook</span><span class=\"o\">=</span><span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">prog_hook</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">sub_qreq_</span> <span class=\"ow\">in</span> <span class=\"n\">sub_qreq_iter</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">VERBOSE</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Generating vsmany chunk&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">sub_cm_list</span> <span class=\"o\">=</span> <span class=\"n\">pipeline</span><span class=\"o\">.</span><span class=\"n\">request_ibeis_query_L0</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">sub_qreq_</span><span class=\"p\">,</span>\n                                                      <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">verbose</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">sub_qreq_</span><span class=\"o\">.</span><span class=\"n\">qaids</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">sub_cm_list</span><span class=\"p\">),</span> <span class=\"s1\">&#39;not aligned&#39;</span>\n        <span class=\"k\">assert</span> <span class=\"nb\">all</span><span class=\"p\">([</span><span class=\"n\">qaid</span> <span class=\"o\">==</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">qaid</span> <span class=\"k\">for</span> <span class=\"n\">qaid</span><span class=\"p\">,</span> <span class=\"n\">cm</span> <span class=\"ow\">in</span>\n                    <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">sub_qreq_</span><span class=\"o\">.</span><span class=\"n\">qaids</span><span class=\"p\">,</span> <span class=\"n\">sub_cm_list</span><span class=\"p\">)]),</span> <span class=\"s1\">&#39;not corresonding&#39;</span>\n        <span class=\"k\">if</span> <span class=\"n\">save_qcache</span><span class=\"p\">:</span>\n            <span class=\"n\">fpath_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">get_chipmatch_fpaths</span><span class=\"p\">(</span><span class=\"n\">sub_qreq_</span><span class=\"o\">.</span><span class=\"n\">qaids</span><span class=\"p\">,</span> <span class=\"n\">super_qres_cache</span><span class=\"o\">=</span><span class=\"n\">use_supercache</span><span class=\"p\">))</span>\n            <span class=\"n\">_iter</span> <span class=\"o\">=</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">sub_cm_list</span><span class=\"p\">,</span> <span class=\"n\">fpath_list</span><span class=\"p\">)</span>\n            <span class=\"n\">_iter</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ProgIter</span><span class=\"p\">(</span><span class=\"n\">_iter</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">sub_cm_list</span><span class=\"p\">),</span>\n                                <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">&#39;saving chip matches&#39;</span><span class=\"p\">,</span> <span class=\"n\">adjust</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">cm</span><span class=\"p\">,</span> <span class=\"n\">fpath</span> <span class=\"ow\">in</span> <span class=\"n\">_iter</span><span class=\"p\">:</span>\n                <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">save_to_fpath</span><span class=\"p\">(</span><span class=\"n\">fpath</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">VERBOSE</span><span class=\"p\">:</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[mc4] not saving vsmany chunk&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">qaid2_cm</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">({</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">qaid</span><span class=\"p\">:</span> <span class=\"n\">cm</span> <span class=\"k\">for</span> <span class=\"n\">cm</span> <span class=\"ow\">in</span> <span class=\"n\">sub_cm_list</span><span class=\"p\">})</span>\n    <span class=\"k\">return</span> <span class=\"n\">qaid2_cm</span></div>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    python -m ibeis.algo.hots.match_chips4</span>\n<span class=\"sd\">    python -m ibeis.algo.hots.match_chips4 --allexamples --testslow</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">multiprocessing</span>\n    <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">freeze_support</span><span class=\"p\">()</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">doctest_funcs</span><span class=\"p\">()</span>\n</pre></div>", "current_page_name": "_modules/ibeis/algo/hots/match_chips4", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}