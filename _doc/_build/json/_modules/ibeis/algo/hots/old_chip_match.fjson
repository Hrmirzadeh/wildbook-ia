{"parents": [{"link": "../../../../", "title": "Module code"}, {"link": "../../../", "title": "ibeis"}, {"link": "../../", "title": "ibeis.algo"}, {"link": "../", "title": "ibeis.algo.hots"}], "title": "ibeis.algo.hots.old_chip_match", "body": "<h1>Source code for ibeis.algo.hots.old_chip_match</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"k\">import</span> <span class=\"n\">absolute_import</span><span class=\"p\">,</span> <span class=\"n\">division</span><span class=\"p\">,</span> <span class=\"n\">print_function</span><span class=\"p\">,</span> <span class=\"n\">unicode_literals</span>\n<span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n<span class=\"kn\">import</span> <span class=\"nn\">six</span>\n<span class=\"nb\">print</span><span class=\"p\">,</span> <span class=\"n\">rrr</span><span class=\"p\">,</span> <span class=\"n\">profile</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">inject2</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"AlignedListDictProxy\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.hots/#ibeis.algo.hots.old_chip_match.AlignedListDictProxy\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">AlignedListDictProxy</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">DictLike_old</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    simulates a dict when using parallel lists the point of this class is that</span>\n<span class=\"sd\">    when there are many instances of this class, then key2_idx can be shared between</span>\n<span class=\"sd\">    them. Ideally this class wont be used and will disappear when the parallel</span>\n<span class=\"sd\">    lists are being used properly.</span>\n\n<span class=\"sd\">    DEPCIRATE AlignedListDictProxy&#39;s defaultdict behavior is weird</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key2_idx</span><span class=\"p\">,</span> <span class=\"n\">key_list</span><span class=\"p\">,</span> <span class=\"n\">val_list</span><span class=\"p\">):</span>\n        <span class=\"c1\">#if isinstance(key_list, np.ndarray):</span>\n        <span class=\"c1\">#    key_list = key_list.tolist()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">key_list</span> <span class=\"o\">=</span> <span class=\"n\">key_list</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">val_list</span> <span class=\"o\">=</span> <span class=\"n\">val_list</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">key2_idx</span> <span class=\"o\">=</span> <span class=\"n\">key2_idx</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">default_function</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__eq__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">()</span>\n\n<div class=\"viewcode-block\" id=\"AlignedListDictProxy.pop\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.hots/#ibeis.algo.hots.old_chip_match.AlignedListDictProxy.pop\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">pop</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">()</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__getitem__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">):</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">idx</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">key2_idx</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span>\n        <span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">KeyError</span><span class=\"p\">,</span> <span class=\"ne\">IndexError</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">default_function</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"c1\"># behave like a default dict here</span>\n                <span class=\"bp\">self</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">default_function</span><span class=\"p\">()</span>\n                <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">val_list</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span>\n        <span class=\"c1\">#return ut.take(self.val_list, ut.dict_take(self.key2_idx, key))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__setitem__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">):</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">idx</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">key2_idx</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span>\n        <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n            <span class=\"n\">idx</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">key_list</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">key_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">key2_idx</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">idx</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">val_list</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n        <span class=\"k\">except</span> <span class=\"ne\">IndexError</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">idx</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">val_list</span><span class=\"p\">):</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">val_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span>\n            <span class=\"c1\">#else:</span>\n            <span class=\"c1\">#    offset = idx - len(self.val_list)</span>\n            <span class=\"c1\">#    self.val_list.extend(([None] * offset) + [val])</span>\n\n<div class=\"viewcode-block\" id=\"AlignedListDictProxy.iteritems\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.hots/#ibeis.algo.hots.old_chip_match.AlignedListDictProxy.iteritems\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">iteritems</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">val</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">key_list</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">val_list</span><span class=\"p\">):</span>\n            <span class=\"k\">yield</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">val</span></div>\n\n<div class=\"viewcode-block\" id=\"AlignedListDictProxy.iterkeys\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.hots/#ibeis.algo.hots.old_chip_match.AlignedListDictProxy.iterkeys\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">iterkeys</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">iter</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">key_list</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"AlignedListDictProxy.itervalues\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.hots/#ibeis.algo.hots.old_chip_match.AlignedListDictProxy.itervalues\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">itervalues</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">iter</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">val_list</span><span class=\"p\">)</span></div></div>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">_OldStyleChipMatchSimulator</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"c1\"># SIMULATE OLD CHIPMATCHES UNTIL TRANSFER IS COMPLETE</span>\n    <span class=\"c1\"># TRY NOT TO USE THESE AS THEY WILL BE MUCH SLOWER THAN</span>\n    <span class=\"c1\"># NORMAL.</span>\n    <span class=\"n\">_oldfields</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;aid2_fm&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;aid2_fsv&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;aid2_fk&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;aid2_score&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;aid2_H&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__iter__</span><span class=\"p\">(</span><span class=\"n\">cm</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">field</span> <span class=\"ow\">in</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">_oldfields</span><span class=\"p\">:</span>\n            <span class=\"k\">yield</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">cm</span><span class=\"p\">,</span> <span class=\"n\">field</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__getitem__</span><span class=\"p\">(</span><span class=\"n\">cm</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">six</span><span class=\"o\">.</span><span class=\"n\">string_types</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">cm</span><span class=\"p\">,</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">_oldfields</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">])</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">aid2_fm</span><span class=\"p\">(</span><span class=\"n\">cm</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">AlignedListDictProxy</span><span class=\"p\">(</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">daid2_idx</span><span class=\"p\">,</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">daid_list</span><span class=\"p\">,</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">fm_list</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">aid2_fsv</span><span class=\"p\">(</span><span class=\"n\">cm</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">AlignedListDictProxy</span><span class=\"p\">(</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">daid2_idx</span><span class=\"p\">,</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">daid_list</span><span class=\"p\">,</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">fsv_list</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">aid2_fk</span><span class=\"p\">(</span><span class=\"n\">cm</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">AlignedListDictProxy</span><span class=\"p\">(</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">daid2_idx</span><span class=\"p\">,</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">daid_list</span><span class=\"p\">,</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">fk_list</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">aid2_H</span><span class=\"p\">(</span><span class=\"n\">cm</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"kc\">None</span> <span class=\"k\">if</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">H_list</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"k\">else</span>\n                <span class=\"n\">AlignedListDictProxy</span><span class=\"p\">(</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">daid2_idx</span><span class=\"p\">,</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">daid_list</span><span class=\"p\">,</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">H_list</span><span class=\"p\">))</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">aid2_score</span><span class=\"p\">(</span><span class=\"n\">cm</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">({}</span> <span class=\"k\">if</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">score_list</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"k\">else</span>\n                <span class=\"n\">AlignedListDictProxy</span><span class=\"p\">(</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">daid2_idx</span><span class=\"p\">,</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">daid_list</span><span class=\"p\">,</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">score_list</span><span class=\"p\">))</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">aid2_fs</span><span class=\"p\">(</span><span class=\"n\">cm</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">fs_list</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">fs_list</span> <span class=\"o\">=</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">get_fsv_prod_list</span><span class=\"p\">()</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">fs_list</span> <span class=\"o\">=</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">fs_list</span>\n        <span class=\"k\">return</span> <span class=\"n\">AlignedListDictProxy</span><span class=\"p\">(</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">daid2_idx</span><span class=\"p\">,</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">daid_list</span><span class=\"p\">,</span> <span class=\"n\">fs_list</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># qres compatibility</span>\n\n    <span class=\"c1\"># @property</span>\n    <span class=\"c1\"># def filtkey_list(cm):</span>\n    <span class=\"c1\">#     &quot;&quot;&quot; for compatibility with qres &quot;&quot;&quot;</span>\n    <span class=\"c1\">#     return cm.fsv_col_lbls</span>\n\n    <span class=\"c1\"># @property</span>\n    <span class=\"c1\"># def nid2_name_score(cm):</span>\n    <span class=\"c1\">#     &quot;&quot;&quot;</span>\n    <span class=\"c1\">#     DEPCIRATE AlignedListDictProxy&#39;s defaultdict behavior is weird</span>\n\n    <span class=\"c1\">#     &quot;&quot;&quot;</span>\n    <span class=\"c1\">#     return ({} if cm.score_list is None else</span>\n    <span class=\"c1\">#             AlignedListDictProxy(cm.nid2_nidx, cm.unique_nids, cm.name_score_list))</span>\n\n    <span class=\"c1\"># @property</span>\n    <span class=\"c1\"># def aid2_annot_score(cm):</span>\n    <span class=\"c1\">#     &quot;&quot;&quot; DEPCIRATE AlignedListDictProxy&#39;s defaultdict behavior is weird</span>\n\n    <span class=\"c1\">#     ute cm.get_annot_scores instead</span>\n\n    <span class=\"c1\">#     &quot;&quot;&quot;</span>\n    <span class=\"c1\">#     return ({} if cm.annot_score_list is None else</span>\n    <span class=\"c1\">#             AlignedListDictProxy(cm.daid2_idx, cm.daid_list, cm.annot_score_list))</span>\n\n    <span class=\"c1\"># def get_nscoretup(cm):</span>\n    <span class=\"c1\">#     return cm.get_ranked_nids_and_aids()</span>\n\n    <span class=\"c1\"># def tokwargs(cm):</span>\n    <span class=\"c1\">#     &quot;&quot;&quot;</span>\n    <span class=\"c1\">#     Can be unpacked and passed as kwargs</span>\n    <span class=\"c1\">#     **cm.tokwargs()</span>\n    <span class=\"c1\">#     &quot;&quot;&quot;</span>\n    <span class=\"c1\">#     return ut.KwargsWrapper(cm)</span>\n</pre></div>", "current_page_name": "_modules/ibeis/algo/hots/old_chip_match", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}