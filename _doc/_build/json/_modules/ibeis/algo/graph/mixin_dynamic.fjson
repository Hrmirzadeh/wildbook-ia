{"parents": [{"link": "../../../../", "title": "Module code"}, {"link": "../../../", "title": "ibeis"}, {"link": "../../", "title": "ibeis.algo"}, {"link": "../", "title": "ibeis.algo.graph"}], "title": "ibeis.algo.graph.mixin_dynamic", "body": "<h1>Source code for ibeis.algo.graph.mixin_dynamic</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">TODO:</span>\n<span class=\"sd\">    Negative bookkeeping, needs a small re-organization fix.</span>\n<span class=\"sd\">    MOVE FROM neg_redun_metagraph TO neg_metagraph</span>\n\n<span class=\"sd\">    Instead of maintaining a graph that contains PCCS which are neg redundant</span>\n<span class=\"sd\">    to each other, the graph should maintain PCCs that have ANY negative edge</span>\n<span class=\"sd\">    between them (aka 1 neg redundant). Then that edge should store a flag</span>\n<span class=\"sd\">    indicating the strength / redundancy of that connection.</span>\n<span class=\"sd\">    A better idea might be to store both neg_redun_metagraph AND neg_metagraph.</span>\n\n<span class=\"sd\">    TODO: this (all neg-redun functionality can be easilly consolidated into</span>\n<span class=\"sd\">    the neg-metagraph-update. note, we have to allow inconsistent pccs to be in</span>\n<span class=\"sd\">    the neg redun graph, we just filter them out afterwords)</span>\n\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"k\">import</span> <span class=\"n\">absolute_import</span><span class=\"p\">,</span> <span class=\"n\">division</span><span class=\"p\">,</span> <span class=\"n\">print_function</span><span class=\"p\">,</span> <span class=\"n\">unicode_literals</span>\n<span class=\"kn\">import</span> <span class=\"nn\">six</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n<span class=\"kn\">import</span> <span class=\"nn\">itertools</span> <span class=\"k\">as</span> <span class=\"nn\">it</span>\n<span class=\"kn\">import</span> <span class=\"nn\">networkx</span> <span class=\"k\">as</span> <span class=\"nn\">nx</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis</span> <span class=\"k\">import</span> <span class=\"n\">constants</span> <span class=\"k\">as</span> <span class=\"n\">const</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph</span> <span class=\"k\">import</span> <span class=\"n\">nx_utils</span> <span class=\"k\">as</span> <span class=\"n\">nxu</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.state</span> <span class=\"k\">import</span> <span class=\"p\">(</span><span class=\"n\">POSTV</span><span class=\"p\">,</span> <span class=\"n\">NEGTV</span><span class=\"p\">,</span> <span class=\"n\">INCMP</span><span class=\"p\">,</span> <span class=\"n\">UNREV</span><span class=\"p\">,</span> <span class=\"n\">UNKWN</span><span class=\"p\">,</span>\n                                    <span class=\"n\">UNINFERABLE</span><span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.state</span> <span class=\"k\">import</span> <span class=\"p\">(</span><span class=\"n\">SAME</span><span class=\"p\">,</span> <span class=\"n\">DIFF</span><span class=\"p\">,</span> <span class=\"n\">NULL</span><span class=\"p\">)</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"nb\">print</span><span class=\"p\">,</span> <span class=\"n\">rrr</span><span class=\"p\">,</span> <span class=\"n\">profile</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">inject2</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n<span class=\"n\">DECISION_LEVEL</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n\n\n<div class=\"viewcode-block\" id=\"DynamicUpdate\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.mixin_dynamic.DynamicUpdate\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">DynamicUpdate</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    # 12 total possible states</span>\n\n<span class=\"sd\">    # details of these states.</span>\n<span class=\"sd\">    POSITIVE, WITHIN, CONSISTENT</span>\n<span class=\"sd\">        * pos-within never changes PCC status</span>\n<span class=\"sd\">        * never introduces inconsistency</span>\n<span class=\"sd\">        * might add pos-redun</span>\n<span class=\"sd\">    POSITIVE, WITHIN, INCONSISTENT</span>\n<span class=\"sd\">        * pos-within never changes PCC status</span>\n<span class=\"sd\">        * might fix inconsistent edge</span>\n<span class=\"sd\">    POSITIVE, BETWEEN, BOTH_CONSISTENT</span>\n<span class=\"sd\">        * pos-between edge always does merge</span>\n<span class=\"sd\">    POSITIVE, BETWEEN, ANY_INCONSISTENT</span>\n<span class=\"sd\">        * pos-between edge always does merge</span>\n<span class=\"sd\">        * pos-between never fixes inconsistency</span>\n\n<span class=\"sd\">    NEGATIVE, WITHIN, CONSISTENT</span>\n<span class=\"sd\">        * might split PCC, results will be consistent</span>\n<span class=\"sd\">        * might causes an inconsistency</span>\n<span class=\"sd\">    NEGATIVE, WITHIN, INCONSISTENT</span>\n<span class=\"sd\">        * might split PCC, results may be inconsistent</span>\n<span class=\"sd\">    NEGATIVE, BETWEEN, BOTH_CONSISTENT</span>\n<span class=\"sd\">        * might add neg-redun</span>\n<span class=\"sd\">    NEGATIVE, BETWEEN, ANY_INCONSISTENT</span>\n<span class=\"sd\">        * might add to incon-neg-external</span>\n<span class=\"sd\">        * neg-redun not tracked for incon.</span>\n\n<span class=\"sd\">    UNINFERABLE, WITHIN, CONSISTENT</span>\n<span class=\"sd\">        * might remove pos-redun</span>\n<span class=\"sd\">        * might split PCC, results will be consistent</span>\n<span class=\"sd\">    UNINFERABLE, WITHIN, INCONSISTENT</span>\n<span class=\"sd\">        * might split PCC, results may be inconsistent</span>\n<span class=\"sd\">    UNINFERABLE, BETWEEN, BOTH_CONSISTENT</span>\n<span class=\"sd\">        * might remove neg-redun</span>\n<span class=\"sd\">    UNINFERABLE, BETWEEN, ANY_INCONSISTENT</span>\n<span class=\"sd\">        * might remove incon-neg-external</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n<div class=\"viewcode-block\" id=\"DynamicUpdate.ensure_edges_from\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.mixin_dynamic.DynamicUpdate.ensure_edges_from\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">ensure_edges_from</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Finds edges that don&#39;t exist and adds them as unreviwed edges.</span>\n<span class=\"sd\">        Returns new edges that were added.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Only add edges that don&#39;t exist</span>\n        <span class=\"n\">new_edges</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">e</span> <span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">edges</span> <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">has_edge</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)]</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edges_from</span><span class=\"p\">(</span><span class=\"n\">new_edges</span><span class=\"p\">,</span>\n                                  <span class=\"n\">evidence_decision</span><span class=\"o\">=</span><span class=\"n\">UNREV</span><span class=\"p\">,</span>\n                                  <span class=\"n\">meta_decision</span><span class=\"o\">=</span><span class=\"n\">UNREV</span><span class=\"p\">,</span>\n                                  <span class=\"n\">decision</span><span class=\"o\">=</span><span class=\"n\">UNREV</span><span class=\"p\">,</span>\n                                  <span class=\"n\">num_reviews</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"c1\"># No inference is needed by expliclty creating unreviewed edges that</span>\n        <span class=\"c1\"># already implicitly existsed.</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_add_review_edges_from</span><span class=\"p\">(</span><span class=\"n\">new_edges</span><span class=\"p\">,</span> <span class=\"n\">decision</span><span class=\"o\">=</span><span class=\"n\">UNREV</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">new_edges</span></div>\n\n<div class=\"viewcode-block\" id=\"DynamicUpdate.add_review_edge\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.mixin_dynamic.DynamicUpdate.add_review_edge\">[docs]</a>    <span class=\"nd\">@profile</span>\n    <span class=\"k\">def</span> <span class=\"nf\">add_review_edge</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">decision</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Adds edge to the dynamically connected graphs and updates dynamically</span>\n<span class=\"sd\">        inferrable edge attributes.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">decision</span> <span class=\"o\">==</span> <span class=\"n\">POSTV</span><span class=\"p\">:</span>\n            <span class=\"n\">action</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_positive_decision</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"n\">decision</span> <span class=\"o\">==</span> <span class=\"n\">NEGTV</span><span class=\"p\">:</span>\n            <span class=\"n\">action</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_negative_decision</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"n\">decision</span> <span class=\"ow\">in</span> <span class=\"n\">UNINFERABLE</span><span class=\"p\">:</span>\n            <span class=\"c1\"># incomparable and unreview have the same inference structure</span>\n            <span class=\"n\">action</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_uninferable_decision</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">decision</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">AssertionError</span><span class=\"p\">(</span><span class=\"s1\">&#39;Unknown decision=</span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">decision</span><span class=\"p\">,))</span>\n        <span class=\"k\">return</span> <span class=\"n\">action</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_add_review_edges_from</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"p\">,</span> <span class=\"n\">decision</span><span class=\"o\">=</span><span class=\"n\">UNREV</span><span class=\"p\">):</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;add </span><span class=\"si\">{}</span><span class=\"s1\"> edges decision=</span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">),</span> <span class=\"n\">decision</span><span class=\"p\">),</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Add to review graph corresponding to decision</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">review_graphs</span><span class=\"p\">[</span><span class=\"n\">decision</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">add_edges_from</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Remove from previously existing graphs</span>\n        <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">G</span> <span class=\"ow\">in</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">review_graphs</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"o\">!=</span> <span class=\"n\">decision</span><span class=\"p\">:</span>\n                <span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">remove_edges_from</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_add_review_edge</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">decision</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Adds an edge to the appropriate data structure</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># infr.print(&#39;add review edge=%r, decision=%r&#39; % (edge, decision), 20)</span>\n        <span class=\"c1\"># Add to review graph corresponding to decision</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">review_graphs</span><span class=\"p\">[</span><span class=\"n\">decision</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">edge</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Remove from previously existing graphs</span>\n        <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">G</span> <span class=\"ow\">in</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">review_graphs</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"o\">!=</span> <span class=\"n\">decision</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">has_edge</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">edge</span><span class=\"p\">):</span>\n                    <span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">remove_edge</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">edge</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@profile</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_get_current_decision</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">edge</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Find if any data structure has the edge</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">for</span> <span class=\"n\">decision</span><span class=\"p\">,</span> <span class=\"n\">G</span> <span class=\"ow\">in</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">review_graphs</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"k\">if</span> <span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">has_edge</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">edge</span><span class=\"p\">):</span>\n                <span class=\"k\">return</span> <span class=\"n\">decision</span>\n        <span class=\"k\">return</span> <span class=\"n\">UNREV</span>\n\n<div class=\"viewcode-block\" id=\"DynamicUpdate.on_between\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.mixin_dynamic.DynamicUpdate.on_between\">[docs]</a>    <span class=\"nd\">@profile</span>\n    <span class=\"k\">def</span> <span class=\"nf\">on_between</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">decision</span><span class=\"p\">,</span> <span class=\"n\">prev_decision</span><span class=\"p\">,</span> <span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">nid2</span><span class=\"p\">,</span>\n                   <span class=\"n\">merge_nid</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Callback when a review is made between two PCCs</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">action</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;between&#39;</span><span class=\"p\">]</span>\n\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_update_neg_metagraph</span><span class=\"p\">(</span>\n            <span class=\"n\">decision</span><span class=\"p\">,</span> <span class=\"n\">prev_decision</span><span class=\"p\">,</span> <span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">nid2</span><span class=\"p\">,</span> <span class=\"n\">merge_nid</span><span class=\"o\">=</span><span class=\"n\">merge_nid</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">merge_nid</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"c1\"># A merge occurred</span>\n            <span class=\"k\">if</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"s1\">&#39;inference.update_attrs&#39;</span><span class=\"p\">]:</span>\n                <span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">component</span><span class=\"p\">(</span><span class=\"n\">merge_nid</span><span class=\"p\">)</span>\n                <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">set_node_attrs</span><span class=\"p\">(</span><span class=\"s1\">&#39;name_label&#39;</span><span class=\"p\">,</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dzip</span><span class=\"p\">(</span><span class=\"n\">cc</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">merge_nid</span><span class=\"p\">]))</span>\n            <span class=\"c1\"># FIXME: this state is ugly</span>\n            <span class=\"n\">action</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;merge&#39;</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">decision</span> <span class=\"o\">==</span> <span class=\"n\">NEGTV</span><span class=\"p\">:</span>\n                <span class=\"n\">action</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;neg-evidence&#39;</span><span class=\"p\">]</span>\n            <span class=\"k\">elif</span> <span class=\"n\">decision</span> <span class=\"o\">==</span> <span class=\"n\">INCMP</span><span class=\"p\">:</span>\n                <span class=\"n\">action</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;incomp-evidence&#39;</span><span class=\"p\">]</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">action</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;other-evidence&#39;</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">action</span></div>\n\n<div class=\"viewcode-block\" id=\"DynamicUpdate.on_within\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.mixin_dynamic.DynamicUpdate.on_within\">[docs]</a>    <span class=\"nd\">@profile</span>\n    <span class=\"k\">def</span> <span class=\"nf\">on_within</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">decision</span><span class=\"p\">,</span> <span class=\"n\">prev_decision</span><span class=\"p\">,</span> <span class=\"n\">nid</span><span class=\"p\">,</span> <span class=\"n\">split_nids</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Callback when a review is made inside a PCC</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">action</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;within&#39;</span><span class=\"p\">]</span>\n\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_update_neg_metagraph</span><span class=\"p\">(</span>\n            <span class=\"n\">decision</span><span class=\"p\">,</span> <span class=\"n\">prev_decision</span><span class=\"p\">,</span> <span class=\"n\">nid</span><span class=\"p\">,</span> <span class=\"n\">nid</span><span class=\"p\">,</span> <span class=\"n\">split_nids</span><span class=\"o\">=</span><span class=\"n\">split_nids</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">split_nids</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"c1\"># A split occurred</span>\n            <span class=\"k\">if</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"s1\">&#39;inference.update_attrs&#39;</span><span class=\"p\">]:</span>\n                <span class=\"n\">new_nid1</span><span class=\"p\">,</span> <span class=\"n\">new_nid2</span> <span class=\"o\">=</span> <span class=\"n\">split_nids</span>\n                <span class=\"n\">cc1</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">component</span><span class=\"p\">(</span><span class=\"n\">new_nid1</span><span class=\"p\">)</span>\n                <span class=\"n\">cc2</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">component</span><span class=\"p\">(</span><span class=\"n\">new_nid2</span><span class=\"p\">)</span>\n                <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">set_node_attrs</span><span class=\"p\">(</span><span class=\"s1\">&#39;name_label&#39;</span><span class=\"p\">,</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dzip</span><span class=\"p\">(</span><span class=\"n\">cc1</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">new_nid1</span><span class=\"p\">]))</span>\n                <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">set_node_attrs</span><span class=\"p\">(</span><span class=\"s1\">&#39;name_label&#39;</span><span class=\"p\">,</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dzip</span><span class=\"p\">(</span><span class=\"n\">cc2</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">new_nid2</span><span class=\"p\">]))</span>\n            <span class=\"n\">action</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;split&#39;</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">decision</span> <span class=\"o\">==</span> <span class=\"n\">POSTV</span><span class=\"p\">:</span>\n                <span class=\"n\">action</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;pos-evidence&#39;</span><span class=\"p\">]</span>\n            <span class=\"k\">elif</span> <span class=\"n\">decision</span> <span class=\"o\">==</span> <span class=\"n\">INCMP</span><span class=\"p\">:</span>\n                <span class=\"n\">action</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;incomp-evidence&#39;</span><span class=\"p\">]</span>\n            <span class=\"k\">elif</span> <span class=\"n\">decision</span> <span class=\"o\">==</span> <span class=\"n\">NEGTV</span><span class=\"p\">:</span>\n                <span class=\"n\">action</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;neg-evidence&#39;</span><span class=\"p\">]</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">action</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;other-evidence&#39;</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">action</span></div>\n\n    <span class=\"nd\">@profile</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_update_neg_metagraph</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">decision</span><span class=\"p\">,</span> <span class=\"n\">prev_decision</span><span class=\"p\">,</span> <span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">nid2</span><span class=\"p\">,</span>\n                              <span class=\"n\">merge_nid</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">split_nids</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Update the negative metagraph based a new review</span>\n\n<span class=\"sd\">        TODO:</span>\n<span class=\"sd\">            we can likely consolidate lots of neg_redun_metagraph</span>\n<span class=\"sd\">            functionality into this function. Just check when the</span>\n<span class=\"sd\">            weights are above or under the threshold and update</span>\n<span class=\"sd\">            accordingly.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">nmg</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">neg_metagraph</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">decision</span> <span class=\"o\">==</span> <span class=\"n\">NEGTV</span> <span class=\"ow\">and</span> <span class=\"n\">prev_decision</span> <span class=\"o\">!=</span> <span class=\"n\">NEGTV</span><span class=\"p\">:</span>\n            <span class=\"c1\"># New negative feedback. Add meta edge or increase weight</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">has_edge</span><span class=\"p\">(</span><span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">nid2</span><span class=\"p\">):</span>\n                <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">nid2</span><span class=\"p\">,</span> <span class=\"n\">weight</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">[</span><span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">nid2</span><span class=\"p\">][</span><span class=\"s1\">&#39;weight&#39;</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">elif</span> <span class=\"n\">decision</span> <span class=\"o\">!=</span> <span class=\"n\">NEGTV</span> <span class=\"ow\">and</span> <span class=\"n\">prev_decision</span> <span class=\"o\">==</span> <span class=\"n\">NEGTV</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Undid negative feedback. Remove meta edge or decrease weight.</span>\n            <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">[</span><span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">nid2</span><span class=\"p\">][</span><span class=\"s1\">&#39;weight&#39;</span><span class=\"p\">]</span> <span class=\"o\">-=</span> <span class=\"mi\">1</span>\n            <span class=\"k\">if</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">[</span><span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">nid2</span><span class=\"p\">][</span><span class=\"s1\">&#39;weight&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">remove_edge</span><span class=\"p\">(</span><span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">nid2</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">merge_nid</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Combine the negative edges between the merged PCCS</span>\n            <span class=\"k\">assert</span> <span class=\"n\">split_nids</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n            <span class=\"c1\"># Find external nids marked as negative</span>\n            <span class=\"n\">prev_edges</span> <span class=\"o\">=</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">(</span><span class=\"n\">nbunch</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">nid2</span><span class=\"p\">],</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"c1\"># Map external neg edges onto new merged PCC</span>\n            <span class=\"c1\"># Accumulate weights between duplicate new name edges</span>\n            <span class=\"n\">lookup</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">nid1</span><span class=\"p\">:</span> <span class=\"n\">merge_nid</span><span class=\"p\">,</span> <span class=\"n\">nid2</span><span class=\"p\">:</span> <span class=\"n\">merge_nid</span><span class=\"p\">}</span>\n            <span class=\"n\">ne_accum</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"n\">prev_edges</span><span class=\"p\">:</span>\n                <span class=\"n\">new_ne</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">e_</span><span class=\"p\">(</span><span class=\"n\">lookup</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">u</span><span class=\"p\">),</span> <span class=\"n\">lookup</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">))</span>\n                <span class=\"k\">if</span> <span class=\"n\">new_ne</span> <span class=\"ow\">in</span> <span class=\"n\">ne_accum</span><span class=\"p\">:</span>\n                    <span class=\"n\">ne_accum</span><span class=\"p\">[</span><span class=\"n\">new_ne</span><span class=\"p\">][</span><span class=\"s1\">&#39;weight&#39;</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"s1\">&#39;weight&#39;</span><span class=\"p\">]</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">ne_accum</span><span class=\"p\">[</span><span class=\"n\">new_ne</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">d</span>\n            <span class=\"n\">merged_edges</span> <span class=\"o\">=</span> <span class=\"p\">((</span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">),</span> <span class=\"n\">d</span> <span class=\"ow\">in</span> <span class=\"n\">ne_accum</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">())</span>\n\n            <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">remove_nodes_from</span><span class=\"p\">([</span><span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">nid2</span><span class=\"p\">])</span>\n            <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">add_node</span><span class=\"p\">(</span><span class=\"n\">merge_nid</span><span class=\"p\">)</span>\n            <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">add_edges_from</span><span class=\"p\">(</span><span class=\"n\">merged_edges</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">split_nids</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Splitup the negative edges between the split PCCS</span>\n            <span class=\"k\">assert</span> <span class=\"n\">merge_nid</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n            <span class=\"k\">assert</span> <span class=\"n\">nid1</span> <span class=\"o\">==</span> <span class=\"n\">nid2</span>\n            <span class=\"n\">old_nid</span> <span class=\"o\">=</span> <span class=\"n\">nid1</span>\n\n            <span class=\"c1\"># Find the nodes we need to check against</span>\n            <span class=\"n\">extern_nids</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">neighbors</span><span class=\"p\">(</span><span class=\"n\">old_nid</span><span class=\"p\">))</span>\n            <span class=\"k\">if</span> <span class=\"n\">old_nid</span> <span class=\"ow\">in</span> <span class=\"n\">extern_nids</span><span class=\"p\">:</span>\n                <span class=\"n\">extern_nids</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">old_nid</span><span class=\"p\">)</span>\n                <span class=\"n\">extern_nids</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">split_nids</span><span class=\"p\">)</span>\n\n            <span class=\"c1\"># Determine how to split existing negative edges between the split</span>\n            <span class=\"c1\"># by going back to the original negative graph.</span>\n            <span class=\"n\">split_edges</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">for</span> <span class=\"n\">new_nid</span> <span class=\"ow\">in</span> <span class=\"n\">split_nids</span><span class=\"p\">:</span>\n                <span class=\"n\">cc1</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">component</span><span class=\"p\">(</span><span class=\"n\">new_nid</span><span class=\"p\">)</span>\n                <span class=\"k\">for</span> <span class=\"n\">other_nid</span> <span class=\"ow\">in</span> <span class=\"n\">extern_nids</span><span class=\"p\">:</span>\n                    <span class=\"n\">cc2</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">component</span><span class=\"p\">(</span><span class=\"n\">other_nid</span><span class=\"p\">)</span>\n                    <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"n\">nxu</span><span class=\"o\">.</span><span class=\"n\">edges_between</span><span class=\"p\">(</span>\n                        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">neg_graph</span><span class=\"p\">,</span> <span class=\"n\">cc1</span><span class=\"p\">,</span> <span class=\"n\">cc2</span><span class=\"p\">,</span> <span class=\"n\">assume_dense</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">))</span>\n                    <span class=\"k\">if</span> <span class=\"n\">num</span><span class=\"p\">:</span>\n                        <span class=\"n\">split_edges</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span>\n                            <span class=\"p\">(</span><span class=\"n\">new_nid</span><span class=\"p\">,</span> <span class=\"n\">other_nid</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;weight&#39;</span><span class=\"p\">:</span> <span class=\"n\">num</span><span class=\"p\">}))</span>\n\n            <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">remove_node</span><span class=\"p\">(</span><span class=\"n\">old_nid</span><span class=\"p\">)</span>\n            <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">add_nodes_from</span><span class=\"p\">(</span><span class=\"n\">split_nids</span><span class=\"p\">)</span>\n            <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">add_edges_from</span><span class=\"p\">(</span><span class=\"n\">split_edges</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@profile</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_positive_decision</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">edge</span><span class=\"p\">):</span>\n        <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Logic for a dynamic positive decision.  A positive decision is evidence</span>\n<span class=\"sd\">        that two annots should be in the same PCC</span>\n\n<span class=\"sd\">        Note, this could be an incomparable edge, but with a meta_decision of</span>\n<span class=\"sd\">        same.</span>\n\n<span class=\"sd\">        Ignore:</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.algo.graph.mixin_dynamic import *  # NOQA</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.algo.graph import demo</span>\n<span class=\"sd\">            &gt;&gt;&gt; kwargs = dict(num_pccs=3, p_incon=0, size=100)</span>\n<span class=\"sd\">            &gt;&gt;&gt; infr = demo.demodata_infr(infer=False, **kwargs)</span>\n<span class=\"sd\">            &gt;&gt;&gt; infr.apply_nondynamic_update()</span>\n<span class=\"sd\">            &gt;&gt;&gt; cc1 = next(infr.positive_components())</span>\n\n<span class=\"sd\">            %timeit list(infr.pos_graph.subgraph(cc1, dynamic=True).edges())</span>\n<span class=\"sd\">            %timeit list(infr.pos_graph.subgraph(cc1, dynamic=False).edges())</span>\n<span class=\"sd\">            %timeit list(nxu.edges_inside(infr.pos_graph, cc1))</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">decision</span> <span class=\"o\">=</span> <span class=\"n\">POSTV</span>\n        <span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">nid2</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">node_labels</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">edge</span><span class=\"p\">)</span>\n        <span class=\"n\">incon1</span><span class=\"p\">,</span> <span class=\"n\">incon2</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">recover_graph</span><span class=\"o\">.</span><span class=\"n\">has_nodes</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">)</span>\n        <span class=\"n\">all_consistent</span> <span class=\"o\">=</span> <span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"n\">incon1</span> <span class=\"ow\">or</span> <span class=\"n\">incon2</span><span class=\"p\">)</span>\n        <span class=\"n\">was_within</span> <span class=\"o\">=</span> <span class=\"n\">nid1</span> <span class=\"o\">==</span> <span class=\"n\">nid2</span>\n\n        <span class=\"n\">print_</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n        <span class=\"n\">prev_decision</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_get_current_decision</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">was_within</span><span class=\"p\">:</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_add_review_edge</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">decision</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">all_consistent</span><span class=\"p\">:</span>\n                <span class=\"n\">print_</span><span class=\"p\">(</span><span class=\"s1\">&#39;pos-within-clean&#39;</span><span class=\"p\">)</span>\n                <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">update_pos_redun</span><span class=\"p\">(</span><span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">may_remove</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">print_</span><span class=\"p\">(</span><span class=\"s1\">&#39;pos-within-dirty&#39;</span><span class=\"p\">)</span>\n                <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_check_inconsistency</span><span class=\"p\">(</span><span class=\"n\">nid1</span><span class=\"p\">)</span>\n            <span class=\"n\">action</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">on_within</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">decision</span><span class=\"p\">,</span> <span class=\"n\">prev_decision</span><span class=\"p\">,</span> <span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># print_(&#39;Merge case&#39;)</span>\n            <span class=\"n\">cc1</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">component</span><span class=\"p\">(</span><span class=\"n\">nid1</span><span class=\"p\">)</span>\n            <span class=\"n\">cc2</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">component</span><span class=\"p\">(</span><span class=\"n\">nid2</span><span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">all_consistent</span><span class=\"p\">:</span>\n                <span class=\"n\">print_</span><span class=\"p\">(</span><span class=\"s1\">&#39;pos-between-dirty-merge&#39;</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">incon1</span><span class=\"p\">:</span>\n                    <span class=\"n\">recover_edges</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">nxu</span><span class=\"o\">.</span><span class=\"n\">edges_inside</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"p\">,</span> <span class=\"n\">cc1</span><span class=\"p\">))</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">recover_edges</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">nxu</span><span class=\"o\">.</span><span class=\"n\">edges_inside</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"p\">,</span> <span class=\"n\">cc2</span><span class=\"p\">))</span>\n                <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">recover_graph</span><span class=\"o\">.</span><span class=\"n\">add_edges_from</span><span class=\"p\">(</span><span class=\"n\">recover_edges</span><span class=\"p\">)</span>\n                <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_purge_redun_flags</span><span class=\"p\">(</span><span class=\"n\">nid1</span><span class=\"p\">)</span>\n                <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_purge_redun_flags</span><span class=\"p\">(</span><span class=\"n\">nid2</span><span class=\"p\">)</span>\n                <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_add_review_edge</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">decision</span><span class=\"p\">)</span>\n                <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">recover_graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">edge</span><span class=\"p\">)</span>\n                <span class=\"n\">new_nid</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">node_label</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n            <span class=\"k\">elif</span> <span class=\"nb\">any</span><span class=\"p\">(</span><span class=\"n\">nxu</span><span class=\"o\">.</span><span class=\"n\">edges_cross</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">neg_graph</span><span class=\"p\">,</span> <span class=\"n\">cc1</span><span class=\"p\">,</span> <span class=\"n\">cc2</span><span class=\"p\">)):</span>\n                <span class=\"n\">print_</span><span class=\"p\">(</span><span class=\"s1\">&#39;pos-between-clean-merge-dirty&#39;</span><span class=\"p\">)</span>\n                <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_purge_redun_flags</span><span class=\"p\">(</span><span class=\"n\">nid1</span><span class=\"p\">)</span>\n                <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_purge_redun_flags</span><span class=\"p\">(</span><span class=\"n\">nid2</span><span class=\"p\">)</span>\n                <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_add_review_edge</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">decision</span><span class=\"p\">)</span>\n                <span class=\"n\">new_nid</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">node_label</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n                <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_new_inconsistency</span><span class=\"p\">(</span><span class=\"n\">new_nid</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">print_</span><span class=\"p\">(</span><span class=\"s1\">&#39;pos-between-clean-merge-clean&#39;</span><span class=\"p\">)</span>\n                <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_purge_redun_flags</span><span class=\"p\">(</span><span class=\"n\">nid1</span><span class=\"p\">)</span>\n                <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_purge_redun_flags</span><span class=\"p\">(</span><span class=\"n\">nid2</span><span class=\"p\">)</span>\n                <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_add_review_edge</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">decision</span><span class=\"p\">)</span>\n                <span class=\"n\">new_nid</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">node_label</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n                <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">update_extern_neg_redun</span><span class=\"p\">(</span><span class=\"n\">new_nid</span><span class=\"p\">,</span> <span class=\"n\">may_remove</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n                <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">update_pos_redun</span><span class=\"p\">(</span><span class=\"n\">new_nid</span><span class=\"p\">,</span> <span class=\"n\">may_remove</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n            <span class=\"n\">action</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">on_between</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">decision</span><span class=\"p\">,</span> <span class=\"n\">prev_decision</span><span class=\"p\">,</span> <span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">nid2</span><span class=\"p\">,</span>\n                                     <span class=\"n\">merge_nid</span><span class=\"o\">=</span><span class=\"n\">new_nid</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">action</span>\n\n    <span class=\"nd\">@profile</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_negative_decision</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">edge</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Logic for a dynamic negative decision.  A negative decision is evidence</span>\n<span class=\"sd\">        that two annots should not be in the same PCC</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">decision</span> <span class=\"o\">=</span> <span class=\"n\">NEGTV</span>\n        <span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">nid2</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">node_labels</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">edge</span><span class=\"p\">)</span>\n        <span class=\"n\">incon1</span><span class=\"p\">,</span> <span class=\"n\">incon2</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">recover_graph</span><span class=\"o\">.</span><span class=\"n\">has_nodes</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">)</span>\n        <span class=\"n\">all_consistent</span> <span class=\"o\">=</span> <span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"n\">incon1</span> <span class=\"ow\">or</span> <span class=\"n\">incon2</span><span class=\"p\">)</span>\n        <span class=\"n\">prev_decision</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_get_current_decision</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">)</span>\n\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_add_review_edge</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">decision</span><span class=\"p\">)</span>\n        <span class=\"n\">new_nid1</span><span class=\"p\">,</span> <span class=\"n\">new_nid2</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">node_labels</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">edge</span><span class=\"p\">)</span>\n\n        <span class=\"n\">was_within</span> <span class=\"o\">=</span> <span class=\"n\">nid1</span> <span class=\"o\">==</span> <span class=\"n\">nid2</span>\n        <span class=\"n\">was_split</span> <span class=\"o\">=</span> <span class=\"n\">was_within</span> <span class=\"ow\">and</span> <span class=\"n\">new_nid1</span> <span class=\"o\">!=</span> <span class=\"n\">new_nid2</span>\n\n        <span class=\"n\">print_</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">was_within</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">was_split</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">all_consistent</span><span class=\"p\">:</span>\n                    <span class=\"n\">print_</span><span class=\"p\">(</span><span class=\"s1\">&#39;neg-within-split-clean&#39;</span><span class=\"p\">)</span>\n                    <span class=\"n\">prev_neg_nids</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_purge_redun_flags</span><span class=\"p\">(</span><span class=\"n\">nid1</span><span class=\"p\">)</span>\n                    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">update_neg_redun_to</span><span class=\"p\">(</span><span class=\"n\">new_nid1</span><span class=\"p\">,</span> <span class=\"n\">prev_neg_nids</span><span class=\"p\">)</span>\n                    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">update_neg_redun_to</span><span class=\"p\">(</span><span class=\"n\">new_nid2</span><span class=\"p\">,</span> <span class=\"n\">prev_neg_nids</span><span class=\"p\">)</span>\n                    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">update_neg_redun_to</span><span class=\"p\">(</span><span class=\"n\">new_nid1</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">new_nid2</span><span class=\"p\">])</span>\n                    <span class=\"c1\"># infr.update_extern_neg_redun(new_nid1, may_remove=False)</span>\n                    <span class=\"c1\"># infr.update_extern_neg_redun(new_nid2, may_remove=False)</span>\n                    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">update_pos_redun</span><span class=\"p\">(</span><span class=\"n\">new_nid1</span><span class=\"p\">,</span> <span class=\"n\">may_remove</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n                    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">update_pos_redun</span><span class=\"p\">(</span><span class=\"n\">new_nid2</span><span class=\"p\">,</span> <span class=\"n\">may_remove</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">print_</span><span class=\"p\">(</span><span class=\"s1\">&#39;neg-within-split-dirty&#39;</span><span class=\"p\">)</span>\n                    <span class=\"k\">if</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">recover_graph</span><span class=\"o\">.</span><span class=\"n\">has_edge</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">edge</span><span class=\"p\">):</span>\n                        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">recover_graph</span><span class=\"o\">.</span><span class=\"n\">remove_edge</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">edge</span><span class=\"p\">)</span>\n                    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_purge_error_edges</span><span class=\"p\">(</span><span class=\"n\">nid1</span><span class=\"p\">)</span>\n                    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_purge_redun_flags</span><span class=\"p\">(</span><span class=\"n\">nid1</span><span class=\"p\">)</span>\n                    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_check_inconsistency</span><span class=\"p\">(</span><span class=\"n\">new_nid1</span><span class=\"p\">)</span>\n                    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_check_inconsistency</span><span class=\"p\">(</span><span class=\"n\">new_nid2</span><span class=\"p\">)</span>\n                <span class=\"c1\"># Signal that a split occurred</span>\n                <span class=\"n\">action</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">on_within</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">decision</span><span class=\"p\">,</span> <span class=\"n\">prev_decision</span><span class=\"p\">,</span> <span class=\"n\">nid1</span><span class=\"p\">,</span>\n                                        <span class=\"n\">split_nids</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">new_nid1</span><span class=\"p\">,</span> <span class=\"n\">new_nid2</span><span class=\"p\">))</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">all_consistent</span><span class=\"p\">:</span>\n                    <span class=\"n\">print_</span><span class=\"p\">(</span><span class=\"s1\">&#39;neg-within-clean&#39;</span><span class=\"p\">)</span>\n                    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_purge_redun_flags</span><span class=\"p\">(</span><span class=\"n\">new_nid1</span><span class=\"p\">)</span>\n                    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_new_inconsistency</span><span class=\"p\">(</span><span class=\"n\">new_nid1</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">print_</span><span class=\"p\">(</span><span class=\"s1\">&#39;neg-within-dirty&#39;</span><span class=\"p\">)</span>\n                    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_check_inconsistency</span><span class=\"p\">(</span><span class=\"n\">new_nid1</span><span class=\"p\">)</span>\n                <span class=\"n\">action</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">on_within</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">decision</span><span class=\"p\">,</span> <span class=\"n\">prev_decision</span><span class=\"p\">,</span> <span class=\"n\">new_nid1</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">all_consistent</span><span class=\"p\">:</span>\n                <span class=\"n\">print_</span><span class=\"p\">(</span><span class=\"s1\">&#39;neg-between-clean&#39;</span><span class=\"p\">)</span>\n                <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">update_neg_redun_to</span><span class=\"p\">(</span><span class=\"n\">new_nid1</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">new_nid2</span><span class=\"p\">],</span> <span class=\"n\">may_remove</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">print_</span><span class=\"p\">(</span><span class=\"s1\">&#39;neg-between-dirty&#39;</span><span class=\"p\">)</span>\n                <span class=\"c1\"># nothing to do if a negative edge is added between two PCCs</span>\n                <span class=\"c1\"># where at least one is inconsistent</span>\n                <span class=\"k\">pass</span>\n            <span class=\"n\">action</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">on_between</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">decision</span><span class=\"p\">,</span> <span class=\"n\">prev_decision</span><span class=\"p\">,</span> <span class=\"n\">new_nid1</span><span class=\"p\">,</span>\n                                     <span class=\"n\">new_nid2</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">action</span>\n\n    <span class=\"nd\">@profile</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_uninferable_decision</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">decision</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Logic for a dynamic uninferable negative decision An uninferrable</span>\n<span class=\"sd\">        decision does not provide any evidence about PCC status and is either:</span>\n<span class=\"sd\">            incomparable, unreviewed, or unknown</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">nid2</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">node_labels</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">edge</span><span class=\"p\">)</span>\n        <span class=\"n\">incon1</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">recover_graph</span><span class=\"o\">.</span><span class=\"n\">has_node</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n        <span class=\"n\">incon2</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">recover_graph</span><span class=\"o\">.</span><span class=\"n\">has_node</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n        <span class=\"n\">all_consistent</span> <span class=\"o\">=</span> <span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"n\">incon1</span> <span class=\"ow\">or</span> <span class=\"n\">incon2</span><span class=\"p\">)</span>\n\n        <span class=\"n\">was_within</span> <span class=\"o\">=</span> <span class=\"n\">nid1</span> <span class=\"o\">==</span> <span class=\"n\">nid2</span>\n        <span class=\"n\">prev_decision</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_get_current_decision</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">)</span>\n\n        <span class=\"n\">print_</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">prefix</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">INCMP</span><span class=\"p\">:</span> <span class=\"s1\">&#39;incmp&#39;</span><span class=\"p\">,</span> <span class=\"n\">UNREV</span><span class=\"p\">:</span> <span class=\"s1\">&#39;unrev&#39;</span><span class=\"p\">,</span>\n                      <span class=\"n\">UNKWN</span><span class=\"p\">:</span> <span class=\"s1\">&#39;unkown&#39;</span><span class=\"p\">}[</span><span class=\"n\">decision</span><span class=\"p\">]</span>\n        <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">KeyError</span><span class=\"p\">(</span><span class=\"s1\">&#39;decision can only be UNREV, INCMP, or UNKWN&#39;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_add_review_edge</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">decision</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">was_within</span><span class=\"p\">:</span>\n            <span class=\"n\">new_nid1</span><span class=\"p\">,</span> <span class=\"n\">new_nid2</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">node_labels</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">edge</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">prev_decision</span> <span class=\"o\">==</span> <span class=\"n\">POSTV</span><span class=\"p\">:</span>\n                <span class=\"c1\"># changed an existing positive edge</span>\n                <span class=\"k\">if</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">recover_graph</span><span class=\"o\">.</span><span class=\"n\">has_edge</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">edge</span><span class=\"p\">):</span>\n                    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">recover_graph</span><span class=\"o\">.</span><span class=\"n\">remove_edge</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">edge</span><span class=\"p\">)</span>\n                <span class=\"n\">was_split</span> <span class=\"o\">=</span> <span class=\"n\">new_nid1</span> <span class=\"o\">!=</span> <span class=\"n\">new_nid2</span>\n                <span class=\"k\">if</span> <span class=\"n\">was_split</span><span class=\"p\">:</span>\n                    <span class=\"n\">old_nid</span> <span class=\"o\">=</span> <span class=\"n\">nid1</span>\n                    <span class=\"n\">prev_neg_nids</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_purge_redun_flags</span><span class=\"p\">(</span><span class=\"n\">old_nid</span><span class=\"p\">)</span>\n                    <span class=\"k\">if</span> <span class=\"n\">all_consistent</span><span class=\"p\">:</span>\n                        <span class=\"n\">print_</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"si\">%s</span><span class=\"s1\">-within-pos-split-clean&#39;</span> <span class=\"o\">%</span> <span class=\"n\">prefix</span><span class=\"p\">)</span>\n                        <span class=\"c1\"># split case</span>\n                        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">update_neg_redun_to</span><span class=\"p\">(</span><span class=\"n\">new_nid1</span><span class=\"p\">,</span> <span class=\"n\">prev_neg_nids</span><span class=\"p\">)</span>\n                        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">update_neg_redun_to</span><span class=\"p\">(</span><span class=\"n\">new_nid2</span><span class=\"p\">,</span> <span class=\"n\">prev_neg_nids</span><span class=\"p\">)</span>\n                        <span class=\"c1\"># for other_nid in prev_neg_nids:</span>\n                        <span class=\"c1\">#     infr.update_neg_redun_to(new_nid1, [other_nid])</span>\n                        <span class=\"c1\">#     infr.update_neg_redun_to(new_nid2, [other_nid])</span>\n                        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">update_neg_redun_to</span><span class=\"p\">(</span><span class=\"n\">new_nid1</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">new_nid2</span><span class=\"p\">])</span>\n                        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">update_pos_redun</span><span class=\"p\">(</span><span class=\"n\">new_nid1</span><span class=\"p\">,</span> <span class=\"n\">may_remove</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n                        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">update_pos_redun</span><span class=\"p\">(</span><span class=\"n\">new_nid2</span><span class=\"p\">,</span> <span class=\"n\">may_remove</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"n\">print_</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"si\">%s</span><span class=\"s1\">-within-pos-split-dirty&#39;</span> <span class=\"o\">%</span> <span class=\"n\">prefix</span><span class=\"p\">)</span>\n                        <span class=\"k\">if</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">recover_graph</span><span class=\"o\">.</span><span class=\"n\">has_edge</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">edge</span><span class=\"p\">):</span>\n                            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">recover_graph</span><span class=\"o\">.</span><span class=\"n\">remove_edge</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">edge</span><span class=\"p\">)</span>\n                        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_purge_error_edges</span><span class=\"p\">(</span><span class=\"n\">nid1</span><span class=\"p\">)</span>\n                        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_check_inconsistency</span><span class=\"p\">(</span><span class=\"n\">new_nid1</span><span class=\"p\">)</span>\n                        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_check_inconsistency</span><span class=\"p\">(</span><span class=\"n\">new_nid2</span><span class=\"p\">)</span>\n                    <span class=\"c1\"># Signal that a split occurred</span>\n                    <span class=\"n\">action</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">on_within</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">decision</span><span class=\"p\">,</span> <span class=\"n\">prev_decision</span><span class=\"p\">,</span>\n                                            <span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">split_nids</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">new_nid1</span><span class=\"p\">,</span>\n                                                              <span class=\"n\">new_nid2</span><span class=\"p\">))</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"n\">all_consistent</span><span class=\"p\">:</span>\n                        <span class=\"n\">print_</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"si\">%s</span><span class=\"s1\">-within-pos-clean&#39;</span> <span class=\"o\">%</span> <span class=\"n\">prefix</span><span class=\"p\">)</span>\n                        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">update_pos_redun</span><span class=\"p\">(</span><span class=\"n\">new_nid1</span><span class=\"p\">,</span> <span class=\"n\">may_add</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"n\">print_</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"si\">%s</span><span class=\"s1\">-within-pos-dirty&#39;</span> <span class=\"o\">%</span> <span class=\"n\">prefix</span><span class=\"p\">)</span>\n                        <span class=\"c1\"># Overwriting a positive edge that is not a split</span>\n                        <span class=\"c1\"># in an inconsistent component, means no inference.</span>\n                    <span class=\"n\">action</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">on_within</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">decision</span><span class=\"p\">,</span> <span class=\"n\">prev_decision</span><span class=\"p\">,</span>\n                                            <span class=\"n\">new_nid1</span><span class=\"p\">)</span>\n            <span class=\"k\">elif</span> <span class=\"n\">prev_decision</span> <span class=\"o\">==</span> <span class=\"n\">NEGTV</span><span class=\"p\">:</span>\n                <span class=\"n\">print_</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"si\">%s</span><span class=\"s1\">-within-neg-dirty&#39;</span> <span class=\"o\">%</span> <span class=\"n\">prefix</span><span class=\"p\">)</span>\n                <span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">all_consistent</span>\n                <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_check_inconsistency</span><span class=\"p\">(</span><span class=\"n\">nid1</span><span class=\"p\">)</span>\n                <span class=\"n\">action</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">on_within</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">decision</span><span class=\"p\">,</span> <span class=\"n\">prev_decision</span><span class=\"p\">,</span>\n                                        <span class=\"n\">new_nid1</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">all_consistent</span><span class=\"p\">:</span>\n                    <span class=\"n\">print_</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"si\">%s</span><span class=\"s1\">-within-clean&#39;</span> <span class=\"o\">%</span> <span class=\"n\">prefix</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">print_</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"si\">%s</span><span class=\"s1\">-within-dirty&#39;</span> <span class=\"o\">%</span> <span class=\"n\">prefix</span><span class=\"p\">)</span>\n                <span class=\"n\">action</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">on_within</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">decision</span><span class=\"p\">,</span> <span class=\"n\">prev_decision</span><span class=\"p\">,</span> <span class=\"n\">nid1</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">prev_decision</span> <span class=\"o\">==</span> <span class=\"n\">NEGTV</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">all_consistent</span><span class=\"p\">:</span>\n                    <span class=\"c1\"># changed and existing negative edge only influences</span>\n                    <span class=\"c1\"># consistent pairs of PCCs</span>\n                    <span class=\"n\">print_</span><span class=\"p\">(</span><span class=\"s1\">&#39;incon-between-neg-clean&#39;</span><span class=\"p\">)</span>\n                    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">update_neg_redun_to</span><span class=\"p\">(</span><span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">nid2</span><span class=\"p\">],</span> <span class=\"n\">may_add</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">print_</span><span class=\"p\">(</span><span class=\"s1\">&#39;incon-between-neg-dirty&#39;</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">print_</span><span class=\"p\">(</span><span class=\"s1\">&#39;incon-between&#39;</span><span class=\"p\">)</span>\n                <span class=\"c1\"># HACK, this sortof fixes inferred state not being set</span>\n                <span class=\"k\">if</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"s1\">&#39;inference.update_attrs&#39;</span><span class=\"p\">]:</span>\n                    <span class=\"k\">if</span> <span class=\"n\">decision</span> <span class=\"o\">==</span> <span class=\"n\">INCMP</span><span class=\"p\">:</span>\n                        <span class=\"k\">pass</span>\n                        <span class=\"c1\"># if not infr.is_neg_redundant(cc1, cc2, k=1):</span>\n                        <span class=\"c1\">#     # TODO: verify that there isn&#39;t a negative inferred</span>\n                        <span class=\"c1\">#     # state</span>\n                        <span class=\"c1\">#     infr.set_edge_attrs(</span>\n                        <span class=\"c1\">#         &#39;inferred_state&#39;, ut.dzip([edge], [INCMP])</span>\n                        <span class=\"c1\">#     )</span>\n            <span class=\"n\">action</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">on_between</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">decision</span><span class=\"p\">,</span> <span class=\"n\">prev_decision</span><span class=\"p\">,</span> <span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">nid2</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">action</span></div>\n\n\n<div class=\"viewcode-block\" id=\"Recovery\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.mixin_dynamic.Recovery\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Recovery</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; recovery funcs &quot;&quot;&quot;</span>\n\n<div class=\"viewcode-block\" id=\"Recovery.is_recovering\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.mixin_dynamic.Recovery.is_recovering\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">is_recovering</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">edge</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Checks to see if the graph is inconsinsistent.</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            edge (None): If None, then returns True if the graph contains any</span>\n<span class=\"sd\">                inconsistency. Otherwise, returns True if the edge is related</span>\n<span class=\"sd\">                to an inconsistent component via a positive or negative</span>\n<span class=\"sd\">                connection.</span>\n\n<span class=\"sd\">        Returns:</span>\n<span class=\"sd\">            bool: flag</span>\n\n<span class=\"sd\">        CommandLine:</span>\n<span class=\"sd\">            python -m ibeis.algo.graph.mixin_dynamic is_recovering</span>\n\n<span class=\"sd\">        Doctest:</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.algo.graph.mixin_dynamic import *  # NOQA</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.algo.graph import demo</span>\n<span class=\"sd\">            &gt;&gt;&gt; infr = demo.demodata_infr(num_pccs=4, size=4, ignore_pair=True)</span>\n<span class=\"sd\">            &gt;&gt;&gt; infr.ensure_cliques(meta_decision=SAME)</span>\n<span class=\"sd\">            &gt;&gt;&gt; a, b, c, d = map(list, infr.positive_components())</span>\n<span class=\"sd\">            &gt;&gt;&gt; assert infr.is_recovering() is False</span>\n<span class=\"sd\">            &gt;&gt;&gt; infr.add_feedback((a[0], a[1]), NEGTV)</span>\n<span class=\"sd\">            &gt;&gt;&gt; assert infr.is_recovering() is True</span>\n<span class=\"sd\">            &gt;&gt;&gt; assert infr.is_recovering((a[2], a[3])) is True</span>\n<span class=\"sd\">            &gt;&gt;&gt; assert infr.is_recovering((a[3], b[0])) is True</span>\n<span class=\"sd\">            &gt;&gt;&gt; assert infr.is_recovering((b[0], b[1])) is False</span>\n<span class=\"sd\">            &gt;&gt;&gt; infr.add_feedback((a[3], b[2]), NEGTV)</span>\n<span class=\"sd\">            &gt;&gt;&gt; assert infr.is_recovering((b[0], b[1])) is True</span>\n<span class=\"sd\">            &gt;&gt;&gt; assert infr.is_recovering((c[0], d[0])) is False</span>\n<span class=\"sd\">            &gt;&gt;&gt; infr.add_feedback((b[2], c[0]), NEGTV)</span>\n<span class=\"sd\">            &gt;&gt;&gt; assert infr.is_recovering((c[0], d[0])) is False</span>\n<span class=\"sd\">            &gt;&gt;&gt; result = ut.repr4({</span>\n<span class=\"sd\">            &gt;&gt;&gt;     &#39;pccs&#39;: sorted(list(infr.positive_components())),</span>\n<span class=\"sd\">            &gt;&gt;&gt;     &#39;iccs&#39;: sorted(list(infr.inconsistent_components())),</span>\n<span class=\"sd\">            &gt;&gt;&gt; }, nobr=True, si=True, itemsep=&#39;&#39;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">            iccs: [{1,2,3,4}],</span>\n<span class=\"sd\">            pccs: [{5,6,7,8},{9,10,11,12},{13,14,15,16},{1,2,3,4}],</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">recover_graph</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"c1\"># We can short-circuit if there is no inconsistency</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">if</span> <span class=\"n\">edge</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"c1\"># By the short circuit we know the graph is inconsistent</span>\n            <span class=\"k\">return</span> <span class=\"kc\">True</span>\n        <span class=\"k\">for</span> <span class=\"n\">nid</span> <span class=\"ow\">in</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">node_labels</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">edge</span><span class=\"p\">)):</span>\n            <span class=\"c1\"># Is this edge part of a CC that has an error?</span>\n            <span class=\"k\">if</span> <span class=\"n\">nid</span> <span class=\"ow\">in</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">nid_to_errors</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"kc\">True</span>\n            <span class=\"c1\"># Is this edge connected to a CC that has an error?</span>\n            <span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">component</span><span class=\"p\">(</span><span class=\"n\">nid</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">nid2</span> <span class=\"ow\">in</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">find_neg_nids_to</span><span class=\"p\">(</span><span class=\"n\">cc</span><span class=\"p\">):</span>\n                <span class=\"k\">if</span> <span class=\"n\">nid2</span> <span class=\"ow\">in</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">nid_to_errors</span><span class=\"p\">:</span>\n                    <span class=\"k\">return</span> <span class=\"kc\">True</span>\n        <span class=\"c1\"># If none of these conditions are true we are far enough away from the</span>\n        <span class=\"c1\"># inconsistency to ignore it.</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span></div>\n\n    <span class=\"nd\">@profile</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_purge_error_edges</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">nid</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Removes all error edges associated with a PCC so they can be recomputed</span>\n<span class=\"sd\">        or resolved.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">old_error_edges</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">nid_to_errors</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"n\">nid</span><span class=\"p\">,</span> <span class=\"p\">[])</span>\n        <span class=\"c1\"># Remove priority from old error edges</span>\n        <span class=\"k\">if</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"s1\">&#39;inference.update_attrs&#39;</span><span class=\"p\">]:</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">set_edge_attrs</span><span class=\"p\">(</span><span class=\"s1\">&#39;maybe_error&#39;</span><span class=\"p\">,</span>\n                                <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dzip</span><span class=\"p\">(</span><span class=\"n\">old_error_edges</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">]))</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_remove_edge_priority</span><span class=\"p\">(</span><span class=\"n\">old_error_edges</span><span class=\"p\">)</span>\n        <span class=\"n\">was_clean</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">old_error_edges</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span>\n        <span class=\"k\">return</span> <span class=\"n\">was_clean</span>\n\n    <span class=\"nd\">@profile</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_set_error_edges</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">nid</span><span class=\"p\">,</span> <span class=\"n\">new_error_edges</span><span class=\"p\">):</span>\n        <span class=\"c1\"># flag error edges</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">nid_to_errors</span><span class=\"p\">[</span><span class=\"n\">nid</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">new_error_edges</span>\n        <span class=\"c1\"># choose one and give it insanely high priority</span>\n        <span class=\"k\">if</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"s1\">&#39;inference.update_attrs&#39;</span><span class=\"p\">]:</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">set_edge_attrs</span><span class=\"p\">(</span><span class=\"s1\">&#39;maybe_error&#39;</span><span class=\"p\">,</span>\n                                <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dzip</span><span class=\"p\">(</span><span class=\"n\">new_error_edges</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"kc\">True</span><span class=\"p\">]))</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_increase_priority</span><span class=\"p\">(</span><span class=\"n\">new_error_edges</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"Recovery.maybe_error_edges\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.mixin_dynamic.Recovery.maybe_error_edges\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">maybe_error_edges</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">iflatten</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">nid_to_errors</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">())</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_new_inconsistency</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">nid</span><span class=\"p\">):</span>\n        <span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">component</span><span class=\"p\">(</span><span class=\"n\">nid</span><span class=\"p\">)</span>\n        <span class=\"n\">pos_edges</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">(</span><span class=\"n\">cc</span><span class=\"p\">)</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">recover_graph</span><span class=\"o\">.</span><span class=\"n\">add_edges_from</span><span class=\"p\">(</span><span class=\"n\">pos_edges</span><span class=\"p\">)</span>\n        <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">recover_graph</span><span class=\"o\">.</span><span class=\"n\">number_of_components</span><span class=\"p\">()</span>\n        <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;New inconsistency </span><span class=\"si\">{}</span><span class=\"s1\"> total&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">)</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">&#39;red&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_check_inconsistency</span><span class=\"p\">(</span><span class=\"n\">nid</span><span class=\"p\">,</span> <span class=\"n\">cc</span><span class=\"o\">=</span><span class=\"n\">cc</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@profile</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_check_inconsistency</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">nid</span><span class=\"p\">,</span> <span class=\"n\">cc</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Check if a PCC contains an error</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">cc</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">component</span><span class=\"p\">(</span><span class=\"n\">nid</span><span class=\"p\">)</span>\n        <span class=\"n\">was_clean</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_purge_error_edges</span><span class=\"p\">(</span><span class=\"n\">nid</span><span class=\"p\">)</span>\n        <span class=\"n\">neg_edges</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">nxu</span><span class=\"o\">.</span><span class=\"n\">edges_inside</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">neg_graph</span><span class=\"p\">,</span> <span class=\"n\">cc</span><span class=\"p\">))</span>\n        <span class=\"k\">if</span> <span class=\"n\">neg_edges</span><span class=\"p\">:</span>\n            <span class=\"n\">pos_subgraph_</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">subgraph</span><span class=\"p\">(</span><span class=\"n\">cc</span><span class=\"p\">,</span> <span class=\"n\">dynamic</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">is_connected</span><span class=\"p\">(</span><span class=\"n\">pos_subgraph_</span><span class=\"p\">):</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;cc = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">cc</span><span class=\"p\">,))</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;pos_subgraph_ = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">pos_subgraph_</span><span class=\"p\">,))</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">AssertionError</span><span class=\"p\">(</span><span class=\"s1\">&#39;must be connected&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">hypothesis</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">hypothesis_errors</span><span class=\"p\">(</span><span class=\"n\">pos_subgraph_</span><span class=\"p\">,</span> <span class=\"n\">neg_edges</span><span class=\"p\">))</span>\n            <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">hypothesis</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;must have at least one&#39;</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_set_error_edges</span><span class=\"p\">(</span><span class=\"n\">nid</span><span class=\"p\">,</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">hypothesis</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()))</span>\n            <span class=\"n\">is_clean</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">recover_graph</span><span class=\"o\">.</span><span class=\"n\">remove_nodes_from</span><span class=\"p\">(</span><span class=\"n\">cc</span><span class=\"p\">)</span>\n            <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">recover_graph</span><span class=\"o\">.</span><span class=\"n\">number_of_components</span><span class=\"p\">()</span>\n            <span class=\"c1\"># num = len(list(nx.connected_components(infr.recover_graph)))</span>\n            <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;An inconsistent PCC recovered, &#39;</span>\n                   <span class=\"s1\">&#39;</span><span class=\"si\">{}</span><span class=\"s1\"> inconsistent PCC(s) remain&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">)</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">&#39;green&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">update_pos_redun</span><span class=\"p\">(</span><span class=\"n\">nid</span><span class=\"p\">,</span> <span class=\"n\">force</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">update_extern_neg_redun</span><span class=\"p\">(</span><span class=\"n\">nid</span><span class=\"p\">,</span> <span class=\"n\">force</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"n\">is_clean</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">was_clean</span><span class=\"p\">,</span> <span class=\"n\">is_clean</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_mincut_edge_weights</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">edges_</span><span class=\"p\">):</span>\n        <span class=\"n\">conf_gen</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">gen_edge_values</span><span class=\"p\">(</span><span class=\"s1\">&#39;confidence&#39;</span><span class=\"p\">,</span> <span class=\"n\">edges_</span><span class=\"p\">,</span>\n                                        <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">&#39;unspecified&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">conf_gen</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;unspecified&#39;</span> <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"k\">else</span> <span class=\"n\">c</span> <span class=\"k\">for</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"n\">conf_gen</span><span class=\"p\">]</span>\n        <span class=\"n\">code_to_conf</span> <span class=\"o\">=</span> <span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">CONFIDENCE</span><span class=\"o\">.</span><span class=\"n\">CODE_TO_INT</span>\n        <span class=\"n\">code_to_conf</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;absolutely_sure&#39;</span> <span class=\"p\">:</span> <span class=\"mf\">4.0</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;pretty_sure&#39;</span>     <span class=\"p\">:</span> <span class=\"mf\">0.6</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;not_sure&#39;</span>        <span class=\"p\">:</span> <span class=\"mf\">0.2</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;guessing&#39;</span>        <span class=\"p\">:</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;unspecified&#39;</span>     <span class=\"p\">:</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">confs</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">code_to_conf</span><span class=\"p\">,</span> <span class=\"n\">conf_gen</span><span class=\"p\">))</span>\n        <span class=\"c1\"># confs = np.array([0 if c is None else c for c in confs])</span>\n\n        <span class=\"n\">prob_gen</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">gen_edge_values</span><span class=\"p\">(</span><span class=\"s1\">&#39;prob_match&#39;</span><span class=\"p\">,</span> <span class=\"n\">edges_</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"n\">probs</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">prob_gen</span><span class=\"p\">))</span>\n\n        <span class=\"n\">nrev_gen</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">gen_edge_values</span><span class=\"p\">(</span><span class=\"s1\">&#39;num_reviews&#39;</span><span class=\"p\">,</span> <span class=\"n\">edges_</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"n\">nrev</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">nrev_gen</span><span class=\"p\">))</span>\n\n        <span class=\"n\">weight</span> <span class=\"o\">=</span> <span class=\"n\">nrev</span> <span class=\"o\">+</span> <span class=\"n\">probs</span> <span class=\"o\">+</span> <span class=\"n\">confs</span>\n        <span class=\"k\">return</span> <span class=\"n\">weight</span>\n\n<div class=\"viewcode-block\" id=\"Recovery.hypothesis_errors\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.mixin_dynamic.Recovery.hypothesis_errors\">[docs]</a>    <span class=\"nd\">@profile</span>\n    <span class=\"k\">def</span> <span class=\"nf\">hypothesis_errors</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">pos_subgraph</span><span class=\"p\">,</span> <span class=\"n\">neg_edges</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">is_connected</span><span class=\"p\">(</span><span class=\"n\">pos_subgraph</span><span class=\"p\">):</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">AssertionError</span><span class=\"p\">(</span><span class=\"s1\">&#39;Not connected&#39;</span> <span class=\"o\">+</span> <span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">pos_subgraph</span><span class=\"p\">))</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span>\n            <span class=\"s1\">&#39;Find hypothesis errors in </span><span class=\"si\">{}</span><span class=\"s1\"> nodes with </span><span class=\"si\">{}</span><span class=\"s1\"> neg edges&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n                <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">pos_subgraph</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">neg_edges</span><span class=\"p\">)),</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n\n        <span class=\"n\">pos_edges</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">pos_subgraph</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">())</span>\n\n        <span class=\"n\">neg_weight</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_mincut_edge_weights</span><span class=\"p\">(</span><span class=\"n\">neg_edges</span><span class=\"p\">)</span>\n        <span class=\"n\">pos_weight</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_mincut_edge_weights</span><span class=\"p\">(</span><span class=\"n\">pos_edges</span><span class=\"p\">)</span>\n\n        <span class=\"n\">capacity</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;weight&#39;</span>\n        <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">set_edge_attributes</span><span class=\"p\">(</span><span class=\"n\">pos_subgraph</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">capacity</span><span class=\"p\">,</span> <span class=\"n\">values</span><span class=\"o\">=</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dzip</span><span class=\"p\">(</span><span class=\"n\">pos_edges</span><span class=\"p\">,</span> <span class=\"n\">pos_weight</span><span class=\"p\">))</span>\n\n        <span class=\"c1\"># Solve a multicut problem for multiple pairs of terminal nodes.</span>\n        <span class=\"c1\"># Running multiple min-cuts produces a k-factor approximation</span>\n        <span class=\"n\">maybe_error_edges</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">([])</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">),</span> <span class=\"n\">join_weight</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">neg_edges</span><span class=\"p\">,</span> <span class=\"n\">neg_weight</span><span class=\"p\">):</span>\n            <span class=\"n\">cut_weight</span><span class=\"p\">,</span> <span class=\"n\">parts</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">minimum_cut</span><span class=\"p\">(</span><span class=\"n\">pos_subgraph</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">,</span>\n                                               <span class=\"n\">capacity</span><span class=\"o\">=</span><span class=\"n\">capacity</span><span class=\"p\">)</span>\n            <span class=\"n\">cut_edgeset</span> <span class=\"o\">=</span> <span class=\"n\">nxu</span><span class=\"o\">.</span><span class=\"n\">edges_cross</span><span class=\"p\">(</span><span class=\"n\">pos_subgraph</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">parts</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">join_weight</span> <span class=\"o\">&lt;</span> <span class=\"n\">cut_weight</span><span class=\"p\">:</span>\n                <span class=\"n\">join_edgeset</span> <span class=\"o\">=</span> <span class=\"p\">{(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">)}</span>\n                <span class=\"n\">chosen</span> <span class=\"o\">=</span> <span class=\"n\">join_edgeset</span>\n                <span class=\"n\">hypothesis</span> <span class=\"o\">=</span> <span class=\"n\">POSTV</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">chosen</span> <span class=\"o\">=</span> <span class=\"n\">cut_edgeset</span>\n                <span class=\"n\">hypothesis</span> <span class=\"o\">=</span> <span class=\"n\">NEGTV</span>\n            <span class=\"k\">for</span> <span class=\"n\">edge</span> <span class=\"ow\">in</span> <span class=\"n\">chosen</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">edge</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">maybe_error_edges</span><span class=\"p\">:</span>\n                    <span class=\"n\">maybe_error_edges</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">)</span>\n                    <span class=\"k\">yield</span> <span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">hypothesis</span><span class=\"p\">)</span></div></div>\n\n\n<div class=\"viewcode-block\" id=\"Consistency\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.mixin_dynamic.Consistency\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Consistency</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n<div class=\"viewcode-block\" id=\"Consistency.is_consistent\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.mixin_dynamic.Consistency.is_consistent\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">is_consistent</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">cc</span><span class=\"p\">):</span>\n        <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Determines if a PCC contains inconsistencies</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            cc (set): nodes in a PCC</span>\n\n<span class=\"sd\">        Returns:</span>\n<span class=\"sd\">            flag: bool: returns True unless cc contains any negative edges</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.algo.graph import demo</span>\n<span class=\"sd\">            &gt;&gt;&gt; infr = demo.demodata_infr(num_pccs=1, p_incon=1)</span>\n<span class=\"sd\">            &gt;&gt;&gt; assert not infr.is_consistent(next(infr.positive_components()))</span>\n<span class=\"sd\">            &gt;&gt;&gt; infr = demo.demodata_infr(num_pccs=1, p_incon=0)</span>\n<span class=\"sd\">            &gt;&gt;&gt; assert infr.is_consistent(next(infr.positive_components()))</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cc</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">2</span> <span class=\"ow\">or</span> <span class=\"ow\">not</span> <span class=\"nb\">any</span><span class=\"p\">(</span><span class=\"n\">nxu</span><span class=\"o\">.</span><span class=\"n\">edges_inside</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">neg_graph</span><span class=\"p\">,</span> <span class=\"n\">cc</span><span class=\"p\">))</span></div>\n\n<div class=\"viewcode-block\" id=\"Consistency.positive_components\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.mixin_dynamic.Consistency.positive_components\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">positive_components</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">graph</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Generates the positive connected compoments (PCCs) in the graph</span>\n<span class=\"sd\">        These will contain both consistent and inconsinstent PCCs.</span>\n\n<span class=\"sd\">        Yields:</span>\n<span class=\"sd\">            cc: set: nodes within the PCC</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">pos_graph</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span>\n        <span class=\"k\">if</span> <span class=\"n\">graph</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"n\">graph</span> <span class=\"ow\">is</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"p\">:</span>\n            <span class=\"n\">ccs</span> <span class=\"o\">=</span> <span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">connected_components</span><span class=\"p\">()</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">unique_labels</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                <span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">node_label</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">node</span> <span class=\"ow\">in</span> <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">nodes</span><span class=\"p\">()}</span>\n            <span class=\"n\">ccs</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">connected_to</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">node</span> <span class=\"ow\">in</span> <span class=\"n\">unique_labels</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">cc</span> <span class=\"ow\">in</span> <span class=\"n\">ccs</span><span class=\"p\">:</span>\n            <span class=\"k\">yield</span> <span class=\"n\">cc</span></div>\n\n<div class=\"viewcode-block\" id=\"Consistency.inconsistent_components\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.mixin_dynamic.Consistency.inconsistent_components\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">inconsistent_components</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">graph</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Generates inconsistent PCCs.</span>\n<span class=\"sd\">        These PCCs contain internal negative edges indicating an error exists.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">for</span> <span class=\"n\">cc</span> <span class=\"ow\">in</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">positive_components</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">is_consistent</span><span class=\"p\">(</span><span class=\"n\">cc</span><span class=\"p\">):</span>\n                <span class=\"k\">yield</span> <span class=\"n\">cc</span></div>\n\n<div class=\"viewcode-block\" id=\"Consistency.consistent_components\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.mixin_dynamic.Consistency.consistent_components\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">consistent_components</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">graph</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Generates consistent PCCs.</span>\n<span class=\"sd\">        These PCCs contain no internal negative edges.</span>\n\n<span class=\"sd\">        Yields:</span>\n<span class=\"sd\">            cc: set: nodes within the PCC</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># Find PCCs without any negative edges</span>\n        <span class=\"k\">for</span> <span class=\"n\">cc</span> <span class=\"ow\">in</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">positive_components</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">is_consistent</span><span class=\"p\">(</span><span class=\"n\">cc</span><span class=\"p\">):</span>\n                <span class=\"k\">yield</span> <span class=\"n\">cc</span></div></div>\n\n\n<span class=\"nd\">@six</span><span class=\"o\">.</span><span class=\"n\">add_metaclass</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ReloadingMetaclass</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">_RedundancyComputers</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    methods for computing redundancy</span>\n\n<span class=\"sd\">    These are used to compute redundancy bookkeeping structures.</span>\n<span class=\"sd\">    Thus, they should not use them in their calculations.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"c1\"># def pos_redundancy(infr, cc):</span>\n    <span class=\"c1\">#     &quot;&quot;&quot; Returns how positive redundant a cc is &quot;&quot;&quot;</span>\n    <span class=\"c1\">#     pos_subgraph = infr.pos_graph.subgraph(cc, dynamic=False)</span>\n    <span class=\"c1\">#     if nxu.is_complete(pos_subgraph):</span>\n    <span class=\"c1\">#         return np.inf</span>\n    <span class=\"c1\">#     else:</span>\n    <span class=\"c1\">#         return nx.edge_connectivity(pos_subgraph)</span>\n\n    <span class=\"c1\"># def neg_redundancy(infr, cc1, cc2):</span>\n    <span class=\"c1\">#     &quot;&quot;&quot; Returns how negative redundant a cc is &quot;&quot;&quot;</span>\n    <span class=\"c1\">#     neg_edge_gen = nxu.edges_cross(infr.neg_graph, cc1, cc2)</span>\n    <span class=\"c1\">#     num_neg = len(list(neg_edge_gen))</span>\n    <span class=\"c1\">#     if num_neg == len(cc1) or num_neg == len(cc2):</span>\n    <span class=\"c1\">#         return np.inf</span>\n    <span class=\"c1\">#     else:</span>\n    <span class=\"c1\">#         return num_neg</span>\n\n    <span class=\"nd\">@profile</span>\n    <span class=\"k\">def</span> <span class=\"nf\">is_pos_redundant</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">cc</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">relax</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">assume_connected</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Tests if a group of nodes is positive redundant.</span>\n<span class=\"sd\">        (ie. if the group is k-edge-connected)</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.algo.graph.mixin_dynamic import *  # NOQA</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.algo.graph import demo</span>\n<span class=\"sd\">            &gt;&gt;&gt; infr = demo.make_demo_infr(ccs=[(1, 2, 3, 4, 5)])</span>\n<span class=\"sd\">            &gt;&gt;&gt; infr.params[&#39;redun.pos&#39;] = 2</span>\n<span class=\"sd\">            &gt;&gt;&gt; cc = infr.pos_graph.connected_to(1)</span>\n<span class=\"sd\">            &gt;&gt;&gt; flag1 = infr.is_pos_redundant(cc)</span>\n<span class=\"sd\">            &gt;&gt;&gt; infr.add_feedback((1, 5), POSTV)</span>\n<span class=\"sd\">            &gt;&gt;&gt; flag2 = infr.is_pos_redundant(cc)</span>\n<span class=\"sd\">            &gt;&gt;&gt; flags = [flag1, flag2]</span>\n<span class=\"sd\">            &gt;&gt;&gt; print(&#39;flags = %r&#39; % (flags,))</span>\n<span class=\"sd\">            &gt;&gt;&gt; assert flags == [False, True]</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"s1\">&#39;redun.pos&#39;</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">assume_connected</span> <span class=\"ow\">and</span> <span class=\"n\">k</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">True</span>  <span class=\"c1\"># assumes cc is connected</span>\n        <span class=\"k\">if</span> <span class=\"n\">relax</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">relax</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"n\">pos_subgraph</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">subgraph</span><span class=\"p\">(</span><span class=\"n\">cc</span><span class=\"p\">,</span> <span class=\"n\">dynamic</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">relax</span><span class=\"p\">:</span>\n            <span class=\"c1\"># If we cannot add any more edges to the subgraph then we consider</span>\n            <span class=\"c1\"># it positive redundant.</span>\n            <span class=\"n\">n_incomp</span> <span class=\"o\">=</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"n\">nxu</span><span class=\"o\">.</span><span class=\"n\">edges_inside</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">incomp_graph</span><span class=\"p\">,</span> <span class=\"n\">cc</span><span class=\"p\">))</span>\n            <span class=\"n\">n_pos</span> <span class=\"o\">=</span> <span class=\"n\">pos_subgraph</span><span class=\"o\">.</span><span class=\"n\">number_of_edges</span><span class=\"p\">()</span>\n            <span class=\"n\">n_nodes</span> <span class=\"o\">=</span> <span class=\"n\">pos_subgraph</span><span class=\"o\">.</span><span class=\"n\">number_of_nodes</span><span class=\"p\">()</span>\n            <span class=\"n\">n_max</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">n_nodes</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">n_nodes</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"o\">//</span> <span class=\"mi\">2</span>\n            <span class=\"k\">if</span> <span class=\"n\">n_max</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"n\">n_pos</span> <span class=\"o\">+</span> <span class=\"n\">n_incomp</span><span class=\"p\">):</span>\n                <span class=\"k\">return</span> <span class=\"kc\">True</span>\n        <span class=\"c1\"># In all other cases test edge-connectivity</span>\n        <span class=\"k\">return</span> <span class=\"n\">nxu</span><span class=\"o\">.</span><span class=\"n\">is_k_edge_connected</span><span class=\"p\">(</span><span class=\"n\">pos_subgraph</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"n\">k</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@profile</span>\n    <span class=\"k\">def</span> <span class=\"nf\">is_neg_redundant</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">cc1</span><span class=\"p\">,</span> <span class=\"n\">cc2</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Tests if two disjoint groups of nodes are negative redundant</span>\n<span class=\"sd\">        (ie. have at least k negative edges between them).</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.algo.graph.mixin_dynamic import *  # NOQA</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.algo.graph import demo</span>\n<span class=\"sd\">            &gt;&gt;&gt; infr = demo.make_demo_infr(ccs=[(1, 2), (3, 4)])</span>\n<span class=\"sd\">            &gt;&gt;&gt; infr.params[&#39;redun.neg&#39;] = 2</span>\n<span class=\"sd\">            &gt;&gt;&gt; cc1 = infr.pos_graph.connected_to(1)</span>\n<span class=\"sd\">            &gt;&gt;&gt; cc2 = infr.pos_graph.connected_to(3)</span>\n<span class=\"sd\">            &gt;&gt;&gt; flag1 = infr.is_neg_redundant(cc1, cc2)</span>\n<span class=\"sd\">            &gt;&gt;&gt; infr.add_feedback((1, 3), NEGTV)</span>\n<span class=\"sd\">            &gt;&gt;&gt; flag2 = infr.is_neg_redundant(cc1, cc2)</span>\n<span class=\"sd\">            &gt;&gt;&gt; infr.add_feedback((2, 4), NEGTV)</span>\n<span class=\"sd\">            &gt;&gt;&gt; flag3 = infr.is_neg_redundant(cc1, cc2)</span>\n<span class=\"sd\">            &gt;&gt;&gt; flags = [flag1, flag2, flag3]</span>\n<span class=\"sd\">            &gt;&gt;&gt; print(&#39;flags = %r&#39; % (flags,))</span>\n<span class=\"sd\">            &gt;&gt;&gt; assert flags == [False, False, True]</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"s1\">&#39;redun.neg&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">neg_edge_gen</span> <span class=\"o\">=</span> <span class=\"n\">nxu</span><span class=\"o\">.</span><span class=\"n\">edges_cross</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">neg_graph</span><span class=\"p\">,</span> <span class=\"n\">cc1</span><span class=\"p\">,</span> <span class=\"n\">cc2</span><span class=\"p\">)</span>\n        <span class=\"c1\"># do a lazy count of negative edges</span>\n        <span class=\"k\">for</span> <span class=\"n\">count</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">neg_edge_gen</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">count</span> <span class=\"o\">&gt;=</span> <span class=\"n\">k</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"kc\">True</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">find_neg_nids_to</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">cc</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Find the nids with at least one negative edge external</span>\n<span class=\"sd\">        to this cc.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">pos_graph</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span>\n        <span class=\"n\">neg_graph</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">neg_graph</span>\n        <span class=\"n\">out_neg_nids</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">([])</span>\n        <span class=\"k\">for</span> <span class=\"n\">u</span> <span class=\"ow\">in</span> <span class=\"n\">cc</span><span class=\"p\">:</span>\n            <span class=\"n\">nid1</span> <span class=\"o\">=</span> <span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">node_label</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">neg_graph</span><span class=\"o\">.</span><span class=\"n\">neighbors</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">):</span>\n                <span class=\"n\">nid2</span> <span class=\"o\">=</span> <span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">node_label</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">nid1</span> <span class=\"o\">==</span> <span class=\"n\">nid2</span> <span class=\"ow\">and</span> <span class=\"n\">v</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">cc</span><span class=\"p\">:</span>\n                    <span class=\"k\">continue</span>\n                <span class=\"n\">out_neg_nids</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">nid2</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">out_neg_nids</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">find_neg_nid_freq_to</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">cc</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Find the number of edges leaving `cc` and directed towards specific</span>\n<span class=\"sd\">        names.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">pos_graph</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span>\n        <span class=\"n\">neg_graph</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">neg_graph</span>\n        <span class=\"n\">neg_nid_freq</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ddict</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">u</span> <span class=\"ow\">in</span> <span class=\"n\">cc</span><span class=\"p\">:</span>\n            <span class=\"n\">nid1</span> <span class=\"o\">=</span> <span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">node_label</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">neg_graph</span><span class=\"o\">.</span><span class=\"n\">neighbors</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">):</span>\n                <span class=\"n\">nid2</span> <span class=\"o\">=</span> <span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">node_label</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">nid1</span> <span class=\"o\">==</span> <span class=\"n\">nid2</span> <span class=\"ow\">and</span> <span class=\"n\">v</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">cc</span><span class=\"p\">:</span>\n                    <span class=\"k\">continue</span>\n                <span class=\"n\">neg_nid_freq</span><span class=\"p\">[</span><span class=\"n\">nid2</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">return</span> <span class=\"n\">neg_nid_freq</span>\n\n    <span class=\"nd\">@profile</span>\n    <span class=\"k\">def</span> <span class=\"nf\">find_neg_redun_nids_to</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">cc</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Get PCCs that are k-negative redundant with `cc`</span>\n\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.algo.graph.mixin_dynamic import *  # NOQA</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.algo.graph import demo</span>\n<span class=\"sd\">            &gt;&gt;&gt; import plottool as pt</span>\n<span class=\"sd\">            &gt;&gt;&gt; pt.qtensure()</span>\n<span class=\"sd\">            &gt;&gt;&gt; infr = demo.demodata_infr2()</span>\n<span class=\"sd\">            &gt;&gt;&gt; node = 20</span>\n<span class=\"sd\">            &gt;&gt;&gt; cc = infr.pos_graph.connected_to(node)</span>\n<span class=\"sd\">            &gt;&gt;&gt; infr.params[&#39;redun.neg&#39;] = 2</span>\n<span class=\"sd\">            &gt;&gt;&gt; infr.find_neg_redun_nids_to(cc)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">neg_nid_freq</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">find_neg_nid_freq_to</span><span class=\"p\">(</span><span class=\"n\">cc</span><span class=\"p\">)</span>\n        <span class=\"c1\"># check for k-negative redundancy</span>\n        <span class=\"n\">k_neg</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"s1\">&#39;redun.neg&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">pos_graph</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span>\n        <span class=\"n\">neg_nids</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"n\">nid2</span> <span class=\"k\">for</span> <span class=\"n\">nid2</span><span class=\"p\">,</span> <span class=\"n\">freq</span> <span class=\"ow\">in</span> <span class=\"n\">neg_nid_freq</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span>\n                <span class=\"n\">freq</span> <span class=\"o\">&gt;=</span> <span class=\"n\">k_neg</span> <span class=\"ow\">or</span>\n                <span class=\"n\">freq</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cc</span><span class=\"p\">)</span> <span class=\"ow\">or</span>\n                <span class=\"n\">freq</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">connected_to</span><span class=\"p\">(</span><span class=\"n\">nid2</span><span class=\"p\">))</span>\n            <span class=\"p\">)</span>\n        <span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">neg_nids</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">find_pos_redundant_pccs</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">relax</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"s1\">&#39;redun.pos&#39;</span><span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">cc</span> <span class=\"ow\">in</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">consistent_components</span><span class=\"p\">():</span>\n            <span class=\"k\">if</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">is_pos_redundant</span><span class=\"p\">(</span><span class=\"n\">cc</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">relax</span><span class=\"o\">=</span><span class=\"n\">relax</span><span class=\"p\">):</span>\n                <span class=\"k\">yield</span> <span class=\"n\">cc</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">find_non_pos_redundant_pccs</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">relax</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Get PCCs that are not k-positive-redundant</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"s1\">&#39;redun.pos&#39;</span><span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">cc</span> <span class=\"ow\">in</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">consistent_components</span><span class=\"p\">():</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">is_pos_redundant</span><span class=\"p\">(</span><span class=\"n\">cc</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">relax</span><span class=\"o\">=</span><span class=\"n\">relax</span><span class=\"p\">):</span>\n                <span class=\"k\">yield</span> <span class=\"n\">cc</span>\n\n    <span class=\"nd\">@profile</span>\n    <span class=\"k\">def</span> <span class=\"nf\">find_non_neg_redun_pccs</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Get pairs of PCCs that are not complete.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.algo.graph.mixin_matching import *  # NOQA</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.algo.graph import demo</span>\n<span class=\"sd\">            &gt;&gt;&gt; infr = demo.demodata_infr(pcc_sizes=[1, 1, 2, 3, 5, 8], ignore_pair=True)</span>\n<span class=\"sd\">            &gt;&gt;&gt; non_neg_pccs = list(infr.find_non_neg_redun_pccs(k=2))</span>\n<span class=\"sd\">            &gt;&gt;&gt; assert len(non_neg_pccs) == (6 * 5) / 2</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"s1\">&#39;redun.neg&#39;</span><span class=\"p\">]</span>\n        <span class=\"c1\"># need to ensure pccs is static in case new user input is added</span>\n        <span class=\"n\">pccs</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">positive_components</span><span class=\"p\">())</span>\n        <span class=\"c1\"># Loop through all pairs</span>\n        <span class=\"k\">for</span> <span class=\"n\">cc1</span><span class=\"p\">,</span> <span class=\"n\">cc2</span> <span class=\"ow\">in</span> <span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">combinations</span><span class=\"p\">(</span><span class=\"n\">pccs</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">is_neg_redundant</span><span class=\"p\">(</span><span class=\"n\">cc1</span><span class=\"p\">,</span> <span class=\"n\">cc2</span><span class=\"p\">):</span>\n                <span class=\"k\">yield</span> <span class=\"n\">cc1</span><span class=\"p\">,</span> <span class=\"n\">cc2</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">find_pos_redun_nids</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot; recomputes infr.pos_redun_nids &quot;&quot;&quot;</span>\n        <span class=\"k\">for</span> <span class=\"n\">cc</span> <span class=\"ow\">in</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">find_pos_redundant_pccs</span><span class=\"p\">():</span>\n            <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"nb\">iter</span><span class=\"p\">(</span><span class=\"n\">cc</span><span class=\"p\">))</span>\n            <span class=\"n\">nid</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">node_label</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span>\n            <span class=\"k\">yield</span> <span class=\"n\">nid</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">find_neg_redun_nids</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot; recomputes edges in infr.neg_redun_metagraph &quot;&quot;&quot;</span>\n        <span class=\"k\">for</span> <span class=\"n\">cc</span> <span class=\"ow\">in</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">consistent_components</span><span class=\"p\">():</span>\n            <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"nb\">iter</span><span class=\"p\">(</span><span class=\"n\">cc</span><span class=\"p\">))</span>\n            <span class=\"n\">nid1</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">node_label</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">nid2</span> <span class=\"ow\">in</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">find_neg_redun_nids_to</span><span class=\"p\">(</span><span class=\"n\">cc</span><span class=\"p\">):</span>\n                <span class=\"k\">if</span> <span class=\"n\">nid1</span> <span class=\"o\">&lt;</span> <span class=\"n\">nid2</span><span class=\"p\">:</span>\n                    <span class=\"k\">yield</span> <span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">nid2</span>\n\n\n<div class=\"viewcode-block\" id=\"Redundancy\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.mixin_dynamic.Redundancy\">[docs]</a><span class=\"nd\">@six</span><span class=\"o\">.</span><span class=\"n\">add_metaclass</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ReloadingMetaclass</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">Redundancy</span><span class=\"p\">(</span><span class=\"n\">_RedundancyComputers</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; methods for dynamic redundancy book-keeping &quot;&quot;&quot;</span>\n\n    <span class=\"c1\"># def pos_redun_edge_flag(infr, edge):</span>\n    <span class=\"c1\">#     &quot;&quot;&quot; Quickly check if edge is flagged as pos redundant &quot;&quot;&quot;</span>\n    <span class=\"c1\">#     nid1, nid2 = infr.pos_graph.node_labels(*edge)</span>\n    <span class=\"c1\">#     return nid1 == nid2 and nid1 in infr.pos_redun_nids</span>\n\n    <span class=\"c1\"># def neg_redun_edge_flag(infr, edge):</span>\n    <span class=\"c1\">#     &quot;&quot;&quot; Quickly check if edge is flagged as neg redundant &quot;&quot;&quot;</span>\n    <span class=\"c1\">#     nid1, nid2 = infr.pos_graph.node_labels(*edge)</span>\n    <span class=\"c1\">#     return infr.neg_redun_metagraph.has_edge(nid1, nid2)</span>\n\n<div class=\"viewcode-block\" id=\"Redundancy.is_flagged_as_redun\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.mixin_dynamic.Redundancy.is_flagged_as_redun\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">is_flagged_as_redun</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">edge</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Tests redundancy against bookkeeping structure against cache</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">nidu</span><span class=\"p\">,</span> <span class=\"n\">nidv</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">node_labels</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">edge</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">nidu</span> <span class=\"o\">==</span> <span class=\"n\">nidv</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">nidu</span> <span class=\"ow\">in</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_redun_nids</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"kc\">True</span>\n        <span class=\"k\">elif</span> <span class=\"n\">nidu</span> <span class=\"o\">!=</span> <span class=\"n\">nidv</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">neg_redun_metagraph</span><span class=\"o\">.</span><span class=\"n\">has_edge</span><span class=\"p\">(</span><span class=\"n\">nidu</span><span class=\"p\">,</span> <span class=\"n\">nidv</span><span class=\"p\">):</span>\n                <span class=\"k\">return</span> <span class=\"kc\">True</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span></div>\n\n<div class=\"viewcode-block\" id=\"Redundancy.filter_edges_flagged_as_redun\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.mixin_dynamic.Redundancy.filter_edges_flagged_as_redun\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">filter_edges_flagged_as_redun</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Returns only edges that are not flagged as redundant.</span>\n<span class=\"sd\">        Uses bookkeeping structures</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.algo.graph.mixin_dynamic import *  # NOQA</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.algo.graph import demo</span>\n<span class=\"sd\">            &gt;&gt;&gt; infr = demo.demodata_infr(num_pccs=1, size=4)</span>\n<span class=\"sd\">            &gt;&gt;&gt; infr.clear_edges()</span>\n<span class=\"sd\">            &gt;&gt;&gt; infr.ensure_cliques()</span>\n<span class=\"sd\">            &gt;&gt;&gt; infr.clear_feedback()</span>\n<span class=\"sd\">            &gt;&gt;&gt; print(ut.repr4(infr.status()))</span>\n<span class=\"sd\">            &gt;&gt;&gt; nonredun_edges = list(infr.filter_edges_flagged_as_redun(</span>\n<span class=\"sd\">            &gt;&gt;&gt;     infr.unreviewed_graph.edges()))</span>\n<span class=\"sd\">            &gt;&gt;&gt; assert len(nonredun_edges) == 6</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">for</span> <span class=\"n\">edge</span> <span class=\"ow\">in</span> <span class=\"n\">edges</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">is_flagged_as_redun</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">):</span>\n                <span class=\"k\">yield</span> <span class=\"n\">edge</span></div>\n\n<div class=\"viewcode-block\" id=\"Redundancy.update_extern_neg_redun\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.mixin_dynamic.Redundancy.update_extern_neg_redun\">[docs]</a>    <span class=\"nd\">@profile</span>\n    <span class=\"k\">def</span> <span class=\"nf\">update_extern_neg_redun</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">nid</span><span class=\"p\">,</span> <span class=\"n\">may_add</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">may_remove</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                                <span class=\"n\">force</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Checks if `nid` is negative redundant to any other `cc` it has at least</span>\n<span class=\"sd\">        one negative review to.</span>\n<span class=\"sd\">        (TODO: NEG REDUN CAN BE CONSOLIDATED VIA NEG-META-GRAPH)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"s1\">&#39;redun.enabled&#39;</span><span class=\"p\">]:</span>\n            <span class=\"k\">return</span>\n        <span class=\"c1\"># infr.print(&#39;neg_redun external update nid={}&#39;.format(nid), 5)</span>\n        <span class=\"n\">k_neg</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"s1\">&#39;redun.neg&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">cc1</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">component</span><span class=\"p\">(</span><span class=\"n\">nid</span><span class=\"p\">)</span>\n        <span class=\"n\">force</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"k\">if</span> <span class=\"n\">force</span><span class=\"p\">:</span>\n            <span class=\"c1\"># TODO: non-force versions</span>\n            <span class=\"n\">freqs</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">find_neg_nid_freq_to</span><span class=\"p\">(</span><span class=\"n\">cc1</span><span class=\"p\">)</span>\n            <span class=\"n\">other_nids</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"n\">flags</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">for</span> <span class=\"n\">other_nid</span><span class=\"p\">,</span> <span class=\"n\">freq</span> <span class=\"ow\">in</span> <span class=\"n\">freqs</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n                <span class=\"k\">if</span> <span class=\"n\">freq</span> <span class=\"o\">&gt;=</span> <span class=\"n\">k_neg</span><span class=\"p\">:</span>\n                    <span class=\"n\">other_nids</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">other_nid</span><span class=\"p\">)</span>\n                    <span class=\"n\">flags</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n                <span class=\"k\">elif</span> <span class=\"n\">may_remove</span><span class=\"p\">:</span>\n                    <span class=\"n\">other_nids</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">other_nid</span><span class=\"p\">)</span>\n                    <span class=\"n\">flags</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">other_nids</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_set_neg_redun_flags</span><span class=\"p\">(</span><span class=\"n\">nid</span><span class=\"p\">,</span> <span class=\"n\">other_nids</span><span class=\"p\">,</span> <span class=\"n\">flags</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;neg_redun skip update nid=</span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">nid</span><span class=\"p\">,),</span> <span class=\"mi\">6</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Redundancy.update_neg_redun_to\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.mixin_dynamic.Redundancy.update_neg_redun_to\">[docs]</a>    <span class=\"nd\">@profile</span>\n    <span class=\"k\">def</span> <span class=\"nf\">update_neg_redun_to</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">other_nids</span><span class=\"p\">,</span> <span class=\"n\">may_add</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">may_remove</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                            <span class=\"n\">force</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Checks if nid1 is neg redundant to other_nids.</span>\n<span class=\"sd\">        Edges are either removed or added to the queue appropriately.</span>\n<span class=\"sd\">        (TODO: NEG REDUN CAN BE CONSOLIDATED VIA NEG-META-GRAPH)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"s1\">&#39;redun.enabled&#39;</span><span class=\"p\">]:</span>\n            <span class=\"k\">return</span>\n        <span class=\"c1\"># infr.print(&#39;update_neg_redun_to&#39;, 5)</span>\n        <span class=\"n\">force</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"n\">cc1</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">component</span><span class=\"p\">(</span><span class=\"n\">nid1</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">force</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span><span class=\"s1\">&#39;implement non-forced version&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">flags</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">nid2</span> <span class=\"ow\">in</span> <span class=\"n\">other_nids</span><span class=\"p\">:</span>\n            <span class=\"n\">cc2</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">component</span><span class=\"p\">(</span><span class=\"n\">nid2</span><span class=\"p\">)</span>\n            <span class=\"n\">need_add</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">is_neg_redundant</span><span class=\"p\">(</span><span class=\"n\">cc1</span><span class=\"p\">,</span> <span class=\"n\">cc2</span><span class=\"p\">)</span>\n            <span class=\"n\">flags</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">need_add</span><span class=\"p\">)</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_set_neg_redun_flags</span><span class=\"p\">(</span><span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">other_nids</span><span class=\"p\">,</span> <span class=\"n\">flags</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Redundancy.update_pos_redun\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.mixin_dynamic.Redundancy.update_pos_redun\">[docs]</a>    <span class=\"nd\">@profile</span>\n    <span class=\"k\">def</span> <span class=\"nf\">update_pos_redun</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">nid</span><span class=\"p\">,</span> <span class=\"n\">may_add</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">may_remove</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                         <span class=\"n\">force</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Checks if a PCC is newly, or no longer positive redundant.</span>\n<span class=\"sd\">        Edges are either removed or added to the queue appropriately.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"s1\">&#39;redun.enabled&#39;</span><span class=\"p\">]:</span>\n            <span class=\"k\">return</span>\n\n        <span class=\"c1\"># force = True</span>\n        <span class=\"c1\"># infr.print(&#39;update_pos_redun&#39;)</span>\n        <span class=\"n\">need_add</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"n\">need_remove</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"k\">if</span> <span class=\"n\">force</span><span class=\"p\">:</span>\n            <span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">component</span><span class=\"p\">(</span><span class=\"n\">nid</span><span class=\"p\">)</span>\n            <span class=\"n\">need_add</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">is_pos_redundant</span><span class=\"p\">(</span><span class=\"n\">cc</span><span class=\"p\">)</span>\n            <span class=\"n\">need_remove</span> <span class=\"o\">=</span> <span class=\"ow\">not</span> <span class=\"n\">need_add</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">was_pos_redun</span> <span class=\"o\">=</span> <span class=\"n\">nid</span> <span class=\"ow\">in</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_redun_nids</span>\n            <span class=\"k\">if</span> <span class=\"n\">may_add</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">was_pos_redun</span><span class=\"p\">:</span>\n                <span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">component</span><span class=\"p\">(</span><span class=\"n\">nid</span><span class=\"p\">)</span>\n                <span class=\"n\">need_add</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">is_pos_redundant</span><span class=\"p\">(</span><span class=\"n\">cc</span><span class=\"p\">)</span>\n            <span class=\"k\">elif</span> <span class=\"n\">may_remove</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">was_pos_redun</span><span class=\"p\">:</span>\n                <span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">component</span><span class=\"p\">(</span><span class=\"n\">nid</span><span class=\"p\">)</span>\n                <span class=\"n\">need_remove</span> <span class=\"o\">=</span> <span class=\"ow\">not</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">is_pos_redundant</span><span class=\"p\">(</span><span class=\"n\">cc</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">need_add</span><span class=\"p\">:</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_set_pos_redun_flag</span><span class=\"p\">(</span><span class=\"n\">nid</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"n\">need_remove</span><span class=\"p\">:</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_set_pos_redun_flag</span><span class=\"p\">(</span><span class=\"n\">nid</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;pos_redun skip update nid=</span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">nid</span><span class=\"p\">,),</span> <span class=\"mi\">6</span><span class=\"p\">)</span></div>\n\n    <span class=\"nd\">@profile</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_set_pos_redun_flag</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">nid</span><span class=\"p\">,</span> <span class=\"n\">flag</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Flags or unflags an nid as positive redundant.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">was_pos_redun</span> <span class=\"o\">=</span> <span class=\"n\">nid</span> <span class=\"ow\">in</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_redun_nids</span>\n        <span class=\"k\">if</span> <span class=\"n\">flag</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">was_pos_redun</span><span class=\"p\">:</span>\n                <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;pos_redun flag=T nid=</span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">nid</span><span class=\"p\">,),</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;pos_redun flag=T nid=</span><span class=\"si\">%r</span><span class=\"s1\"> (already done)&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">nid</span><span class=\"p\">,),</span> <span class=\"mi\">6</span><span class=\"p\">)</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_redun_nids</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">nid</span><span class=\"p\">)</span>\n            <span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">component</span><span class=\"p\">(</span><span class=\"n\">nid</span><span class=\"p\">)</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">remove_internal_priority</span><span class=\"p\">(</span><span class=\"n\">cc</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"s1\">&#39;inference.update_attrs&#39;</span><span class=\"p\">]:</span>\n                <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">set_edge_attrs</span><span class=\"p\">(</span>\n                    <span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">,</span>\n                    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dzip</span><span class=\"p\">(</span><span class=\"n\">nxu</span><span class=\"o\">.</span><span class=\"n\">edges_inside</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"p\">,</span> <span class=\"n\">cc</span><span class=\"p\">),</span> <span class=\"p\">[</span><span class=\"s1\">&#39;same&#39;</span><span class=\"p\">])</span>\n                <span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">was_pos_redun</span><span class=\"p\">:</span>\n                <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;pos_redun flag=F nid=</span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">nid</span><span class=\"p\">,),</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;pos_redun flag=F nid=</span><span class=\"si\">%r</span><span class=\"s1\"> (already done)&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">nid</span><span class=\"p\">,),</span> <span class=\"mi\">6</span><span class=\"p\">)</span>\n            <span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">component</span><span class=\"p\">(</span><span class=\"n\">nid</span><span class=\"p\">)</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_redun_nids</span> <span class=\"o\">-=</span> <span class=\"p\">{</span><span class=\"n\">nid</span><span class=\"p\">}</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">reinstate_internal_priority</span><span class=\"p\">(</span><span class=\"n\">cc</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"s1\">&#39;inference.update_attrs&#39;</span><span class=\"p\">]:</span>\n                <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">set_edge_attrs</span><span class=\"p\">(</span>\n                    <span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">,</span>\n                    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dzip</span><span class=\"p\">(</span><span class=\"n\">nxu</span><span class=\"o\">.</span><span class=\"n\">edges_inside</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"p\">,</span> <span class=\"n\">cc</span><span class=\"p\">),</span> <span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">])</span>\n                <span class=\"p\">)</span>\n\n    <span class=\"nd\">@profile</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_set_neg_redun_flags</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">other_nids</span><span class=\"p\">,</span> <span class=\"n\">flags</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Flags or unflags an nid1 as negative redundant with other nids.</span>\n<span class=\"sd\">        (TODO: NEG REDUN CAN BE CONSOLIDATED VIA NEG-META-GRAPH)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">needs_unflag</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">needs_flag</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">already_flagged</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">already_unflagged</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">cc1</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">component</span><span class=\"p\">(</span><span class=\"n\">nid1</span><span class=\"p\">)</span>\n        <span class=\"n\">other_nids</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">other_nids</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Determine what needs what</span>\n        <span class=\"k\">for</span> <span class=\"n\">nid2</span><span class=\"p\">,</span> <span class=\"n\">flag</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">other_nids</span><span class=\"p\">,</span> <span class=\"n\">flags</span><span class=\"p\">):</span>\n            <span class=\"n\">was_neg_redun</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">neg_redun_metagraph</span><span class=\"o\">.</span><span class=\"n\">has_edge</span><span class=\"p\">(</span><span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">nid2</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">flag</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">was_neg_redun</span><span class=\"p\">:</span>\n                    <span class=\"n\">needs_flag</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">nid2</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">already_flagged</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">nid2</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">was_neg_redun</span><span class=\"p\">:</span>\n                    <span class=\"n\">needs_unflag</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">nid2</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">already_unflagged</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">nid2</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Print summary of what will be done</span>\n        <span class=\"k\">def</span> <span class=\"nf\">_print_helper</span><span class=\"p\">(</span><span class=\"n\">what</span><span class=\"p\">,</span> <span class=\"n\">others</span><span class=\"p\">,</span> <span class=\"n\">already</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">others</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span>\n            <span class=\"n\">n_other_thresh</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">others</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"n\">n_other_thresh</span><span class=\"p\">:</span>\n                <span class=\"n\">omsg</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;#others=</span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">others</span><span class=\"p\">))</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">omsg</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;others=</span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">others</span><span class=\"p\">)</span>\n            <span class=\"n\">amsg</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;(already done)&#39;</span> <span class=\"k\">if</span> <span class=\"n\">already</span> <span class=\"k\">else</span> <span class=\"s1\">&#39;&#39;</span>\n            <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"si\">{}</span><span class=\"s1\"> nid=</span><span class=\"si\">{}</span><span class=\"s1\">, </span><span class=\"si\">{}</span><span class=\"s1\"> </span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">what</span><span class=\"p\">,</span> <span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">omsg</span><span class=\"p\">,</span> <span class=\"n\">amsg</span><span class=\"p\">)</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">,</span> <span class=\"mi\">5</span> <span class=\"o\">+</span> <span class=\"n\">already</span><span class=\"p\">)</span>\n\n        <span class=\"n\">_print_helper</span><span class=\"p\">(</span><span class=\"s1\">&#39;neg_redun flag=T&#39;</span><span class=\"p\">,</span> <span class=\"n\">needs_flag</span><span class=\"p\">)</span>\n        <span class=\"n\">_print_helper</span><span class=\"p\">(</span><span class=\"s1\">&#39;neg_redun flag=T&#39;</span><span class=\"p\">,</span> <span class=\"n\">already_flagged</span><span class=\"p\">,</span> <span class=\"n\">already</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">_print_helper</span><span class=\"p\">(</span><span class=\"s1\">&#39;neg_redun flag=F&#39;</span><span class=\"p\">,</span> <span class=\"n\">needs_unflag</span><span class=\"p\">)</span>\n        <span class=\"n\">_print_helper</span><span class=\"p\">(</span><span class=\"s1\">&#39;neg_redun flag=F&#39;</span><span class=\"p\">,</span> <span class=\"n\">already_unflagged</span><span class=\"p\">,</span> <span class=\"n\">already</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Do the flagging/unflagging</span>\n        <span class=\"k\">for</span> <span class=\"n\">nid2</span> <span class=\"ow\">in</span> <span class=\"n\">needs_flag</span><span class=\"p\">:</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">neg_redun_metagraph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">nid2</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">nid2</span> <span class=\"ow\">in</span> <span class=\"n\">needs_unflag</span><span class=\"p\">:</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">neg_redun_metagraph</span><span class=\"o\">.</span><span class=\"n\">remove_edge</span><span class=\"p\">(</span><span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">nid2</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Update priorities and attributes</span>\n        <span class=\"k\">if</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"s1\">&#39;inference.update_attrs&#39;</span><span class=\"p\">]</span> <span class=\"ow\">or</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">queue</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">all_flagged_edges</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"c1\"># Unprioritize all edges between flagged nids</span>\n            <span class=\"k\">for</span> <span class=\"n\">nid2</span> <span class=\"ow\">in</span> <span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">chain</span><span class=\"p\">(</span><span class=\"n\">needs_flag</span><span class=\"p\">,</span> <span class=\"n\">already_flagged</span><span class=\"p\">):</span>\n                <span class=\"n\">cc2</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">component</span><span class=\"p\">(</span><span class=\"n\">nid2</span><span class=\"p\">)</span>\n                <span class=\"n\">all_flagged_edges</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">nxu</span><span class=\"o\">.</span><span class=\"n\">edges_cross</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"p\">,</span> <span class=\"n\">cc1</span><span class=\"p\">,</span> <span class=\"n\">cc2</span><span class=\"p\">))</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">queue</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"s1\">&#39;inference.update_attrs&#39;</span><span class=\"p\">]:</span>\n            <span class=\"n\">all_unflagged_edges</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"n\">unrev_unflagged_edges</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"n\">unrev_graph</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">unreviewed_graph</span>\n            <span class=\"c1\"># Reprioritize unreviewed edges between unflagged nids</span>\n            <span class=\"c1\"># Marked inferred state of all edges</span>\n            <span class=\"k\">for</span> <span class=\"n\">nid2</span> <span class=\"ow\">in</span> <span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">chain</span><span class=\"p\">(</span><span class=\"n\">needs_unflag</span><span class=\"p\">,</span> <span class=\"n\">already_unflagged</span><span class=\"p\">):</span>\n                <span class=\"n\">cc2</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">component</span><span class=\"p\">(</span><span class=\"n\">nid2</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">queue</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                    <span class=\"n\">_edges</span> <span class=\"o\">=</span> <span class=\"n\">nxu</span><span class=\"o\">.</span><span class=\"n\">edges_cross</span><span class=\"p\">(</span><span class=\"n\">unrev_graph</span><span class=\"p\">,</span> <span class=\"n\">cc1</span><span class=\"p\">,</span> <span class=\"n\">cc2</span><span class=\"p\">)</span>\n                    <span class=\"n\">unrev_unflagged_edges</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">_edges</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"s1\">&#39;inference.update_attrs&#39;</span><span class=\"p\">]:</span>\n                    <span class=\"n\">_edges</span> <span class=\"o\">=</span> <span class=\"n\">nxu</span><span class=\"o\">.</span><span class=\"n\">edges_cross</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"p\">,</span> <span class=\"n\">cc1</span><span class=\"p\">,</span> <span class=\"n\">cc2</span><span class=\"p\">)</span>\n                    <span class=\"n\">all_unflagged_edges</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">_edges</span><span class=\"p\">)</span>\n\n            <span class=\"c1\"># Batch set prioritize</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_remove_edge_priority</span><span class=\"p\">(</span><span class=\"n\">all_flagged_edges</span><span class=\"p\">)</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_reinstate_edge_priority</span><span class=\"p\">(</span><span class=\"n\">unrev_unflagged_edges</span><span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"s1\">&#39;inference.update_attrs&#39;</span><span class=\"p\">]:</span>\n                <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">set_edge_attrs</span><span class=\"p\">(</span>\n                    <span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">,</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dzip</span><span class=\"p\">(</span><span class=\"n\">all_flagged_edges</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">&#39;diff&#39;</span><span class=\"p\">])</span>\n                <span class=\"p\">)</span>\n                <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">set_edge_attrs</span><span class=\"p\">(</span>\n                    <span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">,</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dzip</span><span class=\"p\">(</span><span class=\"n\">all_unflagged_edges</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">])</span>\n                <span class=\"p\">)</span>\n\n    <span class=\"nd\">@profile</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_purge_redun_flags</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">nid</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Removes positive and negative redundancy from nids and all other PCCs</span>\n<span class=\"sd\">        touching nids respectively. Return the external PCC nids.</span>\n\n<span class=\"sd\">        (TODO: NEG REDUN CAN BE CONSOLIDATED VIA NEG-META-GRAPH)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"s1\">&#39;redun.enabled&#39;</span><span class=\"p\">]:</span>\n            <span class=\"k\">return</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">neg_redun_metagraph</span><span class=\"o\">.</span><span class=\"n\">has_node</span><span class=\"p\">(</span><span class=\"n\">nid</span><span class=\"p\">):</span>\n            <span class=\"n\">prev_neg_nids</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">neg_redun_metagraph</span><span class=\"o\">.</span><span class=\"n\">neighbors</span><span class=\"p\">(</span><span class=\"n\">nid</span><span class=\"p\">))</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">prev_neg_nids</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"c1\"># infr.print(&#39;_purge, nid=%r, prev_neg_nids = %r&#39; % (nid, prev_neg_nids,))</span>\n        <span class=\"c1\"># for other_nid in prev_neg_nids:</span>\n        <span class=\"c1\">#     flag = False</span>\n        <span class=\"c1\">#     if other_nid not in infr.pos_graph._ccs:</span>\n        <span class=\"c1\">#         flag = True</span>\n        <span class=\"c1\">#         infr.print(&#39;!!nid=%r did not update&#39; % (other_nid,))</span>\n        <span class=\"c1\">#     if flag:</span>\n        <span class=\"c1\">#         assert flag, &#39;nids not maintained&#39;</span>\n        <span class=\"k\">for</span> <span class=\"n\">other_nid</span> <span class=\"ow\">in</span> <span class=\"n\">prev_neg_nids</span><span class=\"p\">:</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_set_neg_redun_flags</span><span class=\"p\">(</span><span class=\"n\">nid</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">other_nid</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"kc\">False</span><span class=\"p\">])</span>\n        <span class=\"k\">if</span> <span class=\"n\">nid</span> <span class=\"ow\">in</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_redun_nids</span><span class=\"p\">:</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_set_pos_redun_flag</span><span class=\"p\">(</span><span class=\"n\">nid</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">prev_neg_nids</span></div>\n\n\n<div class=\"viewcode-block\" id=\"NonDynamicUpdate\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.mixin_dynamic.NonDynamicUpdate\">[docs]</a><span class=\"nd\">@six</span><span class=\"o\">.</span><span class=\"n\">add_metaclass</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ReloadingMetaclass</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">NonDynamicUpdate</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n\n<div class=\"viewcode-block\" id=\"NonDynamicUpdate.apply_nondynamic_update\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.mixin_dynamic.NonDynamicUpdate.apply_nondynamic_update\">[docs]</a>    <span class=\"nd\">@profile</span>\n    <span class=\"k\">def</span> <span class=\"nf\">apply_nondynamic_update</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">graph</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Recomputes all dynamic bookkeeping for a graph in any state.</span>\n<span class=\"sd\">        This ensures that subsequent dyanmic inference can be applied.</span>\n\n<span class=\"sd\">        CommandLine:</span>\n<span class=\"sd\">            python -m ibeis.algo.graph.mixin_dynamic apply_nondynamic_update</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.algo.graph.mixin_dynamic import *  # NOQA</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.algo.graph import demo</span>\n<span class=\"sd\">            &gt;&gt;&gt; num_pccs = 250</span>\n<span class=\"sd\">            &gt;&gt;&gt; kwargs = dict(num_pccs=100, p_incon=.3)</span>\n<span class=\"sd\">            &gt;&gt;&gt; infr = demo.demodata_infr(infer=False, **kwargs)</span>\n<span class=\"sd\">            &gt;&gt;&gt; graph = None</span>\n<span class=\"sd\">            &gt;&gt;&gt; infr.apply_nondynamic_update()</span>\n<span class=\"sd\">            &gt;&gt;&gt; infr.assert_neg_metagraph()</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># Cluster edges by category</span>\n        <span class=\"n\">ne_to_edges</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">collapsed_meta_edges</span><span class=\"p\">()</span>\n        <span class=\"n\">categories</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">categorize_edges</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"p\">,</span> <span class=\"n\">ne_to_edges</span><span class=\"p\">)</span>\n\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">set_edge_attrs</span><span class=\"p\">(</span>\n            <span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">,</span>\n            <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dzip</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">categories</span><span class=\"p\">[</span><span class=\"n\">POSTV</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()),</span> <span class=\"p\">[</span><span class=\"s1\">&#39;same&#39;</span><span class=\"p\">])</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">set_edge_attrs</span><span class=\"p\">(</span>\n            <span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">,</span>\n            <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dzip</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">categories</span><span class=\"p\">[</span><span class=\"n\">NEGTV</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()),</span> <span class=\"p\">[</span><span class=\"s1\">&#39;diff&#39;</span><span class=\"p\">])</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">set_edge_attrs</span><span class=\"p\">(</span>\n            <span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">,</span>\n            <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dzip</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">categories</span><span class=\"p\">[</span><span class=\"n\">INCMP</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()),</span> <span class=\"p\">[</span><span class=\"n\">INCMP</span><span class=\"p\">])</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">set_edge_attrs</span><span class=\"p\">(</span>\n            <span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">,</span>\n            <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dzip</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">categories</span><span class=\"p\">[</span><span class=\"n\">UNKWN</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()),</span> <span class=\"p\">[</span><span class=\"n\">UNKWN</span><span class=\"p\">])</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">set_edge_attrs</span><span class=\"p\">(</span>\n            <span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">,</span>\n            <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dzip</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">categories</span><span class=\"p\">[</span><span class=\"n\">UNREV</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()),</span> <span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">])</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">set_edge_attrs</span><span class=\"p\">(</span>\n            <span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">,</span>\n            <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dzip</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">categories</span><span class=\"p\">[</span><span class=\"s1\">&#39;inconsistent_internal&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()),</span>\n                    <span class=\"p\">[</span><span class=\"s1\">&#39;inconsistent_internal&#39;</span><span class=\"p\">])</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">set_edge_attrs</span><span class=\"p\">(</span>\n            <span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">,</span>\n            <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dzip</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">categories</span><span class=\"p\">[</span><span class=\"s1\">&#39;inconsistent_external&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()),</span>\n                    <span class=\"p\">[</span><span class=\"s1\">&#39;inconsistent_external&#39;</span><span class=\"p\">])</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"c1\"># Ensure bookkeeping is taken care of</span>\n        <span class=\"c1\"># * positive redundancy</span>\n        <span class=\"c1\"># * negative redundancy</span>\n        <span class=\"c1\"># * inconsistency</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_redun_nids</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">find_pos_redun_nids</span><span class=\"p\">())</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">neg_redun_metagraph</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_graph_cls</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">find_neg_redun_nids</span><span class=\"p\">()))</span>\n\n        <span class=\"c1\"># make a node for each PCC, and place an edge between any pccs with at</span>\n        <span class=\"c1\"># least one negative edge, with weight being the number of negative</span>\n        <span class=\"c1\"># edges. Self loops indicate inconsistency.</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">neg_metagraph</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_graph_cls</span><span class=\"p\">()</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">neg_metagraph</span><span class=\"o\">.</span><span class=\"n\">add_nodes_from</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">component_labels</span><span class=\"p\">())</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">nid2</span><span class=\"p\">),</span> <span class=\"n\">edges</span> <span class=\"ow\">in</span> <span class=\"n\">ne_to_edges</span><span class=\"p\">[</span><span class=\"n\">NEGTV</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">neg_metagraph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">nid2</span><span class=\"p\">,</span> <span class=\"n\">weight</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">))</span>\n\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">recover_graph</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n        <span class=\"n\">nid_to_errors</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">for</span> <span class=\"n\">nid</span><span class=\"p\">,</span> <span class=\"n\">intern_edges</span> <span class=\"ow\">in</span> <span class=\"n\">categories</span><span class=\"p\">[</span><span class=\"s1\">&#39;inconsistent_internal&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">component_nodes</span><span class=\"p\">(</span><span class=\"n\">nid</span><span class=\"p\">)</span>\n            <span class=\"n\">pos_subgraph</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">subgraph</span><span class=\"p\">(</span><span class=\"n\">cc</span><span class=\"p\">,</span> <span class=\"n\">dynamic</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n            <span class=\"n\">neg_edges</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">nxu</span><span class=\"o\">.</span><span class=\"n\">edges_inside</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">neg_graph</span><span class=\"p\">,</span> <span class=\"n\">cc</span><span class=\"p\">))</span>\n            <span class=\"n\">recover_hypothesis</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">hypothesis_errors</span><span class=\"p\">(</span><span class=\"n\">pos_subgraph</span><span class=\"p\">,</span>\n                                                             <span class=\"n\">neg_edges</span><span class=\"p\">))</span>\n            <span class=\"n\">nid_to_errors</span><span class=\"p\">[</span><span class=\"n\">nid</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">recover_hypothesis</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">recover_graph</span><span class=\"o\">.</span><span class=\"n\">add_edges_from</span><span class=\"p\">(</span><span class=\"n\">pos_subgraph</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">())</span>\n\n        <span class=\"c1\"># Delete old hypothesis</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">set_edge_attrs</span><span class=\"p\">(</span>\n            <span class=\"s1\">&#39;maybe_error&#39;</span><span class=\"p\">,</span>\n            <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dzip</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">nid_to_errors</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()),</span> <span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">])</span>\n        <span class=\"p\">)</span>\n        <span class=\"c1\"># Set new hypothesis</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">set_edge_attrs</span><span class=\"p\">(</span>\n            <span class=\"s1\">&#39;maybe_error&#39;</span><span class=\"p\">,</span>\n            <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dzip</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">nid_to_errors</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()),</span> <span class=\"p\">[</span><span class=\"kc\">True</span><span class=\"p\">])</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">nid_to_errors</span> <span class=\"o\">=</span> <span class=\"n\">nid_to_errors</span>\n\n        <span class=\"c1\"># no longer dirty</span>\n        <span class=\"k\">if</span> <span class=\"n\">graph</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">dirty</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></div>\n\n<div class=\"viewcode-block\" id=\"NonDynamicUpdate.collapsed_meta_edges\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.mixin_dynamic.NonDynamicUpdate.collapsed_meta_edges\">[docs]</a>    <span class=\"nd\">@profile</span>\n    <span class=\"k\">def</span> <span class=\"nf\">collapsed_meta_edges</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">graph</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Collapse the grah such that each PCC is a node. Get a list of edges</span>\n<span class=\"sd\">        within/between each PCC.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">states</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">POSTV</span><span class=\"p\">,</span> <span class=\"n\">NEGTV</span><span class=\"p\">,</span> <span class=\"n\">INCMP</span><span class=\"p\">,</span> <span class=\"n\">UNREV</span><span class=\"p\">,</span> <span class=\"n\">UNKWN</span><span class=\"p\">)</span>\n        <span class=\"n\">rev_graph</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">review_graphs</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">states</span><span class=\"p\">}</span>\n        <span class=\"k\">if</span> <span class=\"n\">graph</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"n\">graph</span> <span class=\"ow\">is</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"p\">:</span>\n            <span class=\"n\">graph</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">graph</span>\n            <span class=\"n\">nodes</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Need to extract relevant subgraphs</span>\n            <span class=\"n\">nodes</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">nodes</span><span class=\"p\">())</span>\n            <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">states</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">key</span> <span class=\"o\">==</span> <span class=\"n\">POSTV</span><span class=\"p\">:</span>\n                    <span class=\"n\">rev_graph</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">rev_graph</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">subgraph</span><span class=\"p\">(</span><span class=\"n\">nodes</span><span class=\"p\">,</span>\n                                                             <span class=\"n\">dynamic</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">rev_graph</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">rev_graph</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">subgraph</span><span class=\"p\">(</span><span class=\"n\">nodes</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># TODO: Rebalance union find to ensure parents is a single lookup</span>\n        <span class=\"c1\"># infr.pos_graph._union_find.rebalance(nodes)</span>\n        <span class=\"c1\"># node_to_label = infr.pos_graph._union_find.parents</span>\n        <span class=\"n\">node_to_label</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">_union_find</span>\n\n        <span class=\"c1\"># Get reviewed edges using fast lookup structures</span>\n        <span class=\"n\">ne_to_edges</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"n\">nxu</span><span class=\"o\">.</span><span class=\"n\">group_name_edges</span><span class=\"p\">(</span><span class=\"n\">rev_graph</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">],</span> <span class=\"n\">node_to_label</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">states</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">ne_to_edges</span></div>\n\n<div class=\"viewcode-block\" id=\"NonDynamicUpdate.categorize_edges\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.mixin_dynamic.NonDynamicUpdate.categorize_edges\">[docs]</a>    <span class=\"nd\">@profile</span>\n    <span class=\"k\">def</span> <span class=\"nf\">categorize_edges</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">graph</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">ne_to_edges</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Non-dynamically computes the status of each edge in the graph.</span>\n<span class=\"sd\">        This is can be used to verify the dynamic computations and update when</span>\n<span class=\"sd\">        the dynamic state is lost.</span>\n\n<span class=\"sd\">        CommandLine:</span>\n<span class=\"sd\">            python -m ibeis.algo.graph.mixin_dynamic categorize_edges --profile</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.algo.graph.mixin_dynamic import *  # NOQA</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.algo.graph import demo</span>\n<span class=\"sd\">            &gt;&gt;&gt; num_pccs = 250 if ut.get_argflag(&#39;--profile&#39;) else 100</span>\n<span class=\"sd\">            &gt;&gt;&gt; kwargs = dict(num_pccs=100, p_incon=.3)</span>\n<span class=\"sd\">            &gt;&gt;&gt; infr = demo.demodata_infr(infer=False, **kwargs)</span>\n<span class=\"sd\">            &gt;&gt;&gt; graph = None</span>\n<span class=\"sd\">            &gt;&gt;&gt; cat = infr.categorize_edges()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">states</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">POSTV</span><span class=\"p\">,</span> <span class=\"n\">NEGTV</span><span class=\"p\">,</span> <span class=\"n\">INCMP</span><span class=\"p\">,</span> <span class=\"n\">UNREV</span><span class=\"p\">,</span> <span class=\"n\">UNKWN</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">ne_to_edges</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">ne_to_edges</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">collapsed_meta_edges</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Use reviewed edges to determine status of PCCs (repr by name ids)</span>\n        <span class=\"c1\"># The next steps will rectify duplicates in these sets</span>\n        <span class=\"n\">name_edges</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">ne_to_edges</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span> <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">states</span><span class=\"p\">}</span>\n\n        <span class=\"c1\"># Positive and negative decisions override incomparable and unreviewed</span>\n        <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">UNINFERABLE</span><span class=\"p\">:</span>\n            <span class=\"n\">name_edges</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">difference_update</span><span class=\"p\">(</span><span class=\"n\">name_edges</span><span class=\"p\">[</span><span class=\"n\">POSTV</span><span class=\"p\">])</span>\n            <span class=\"n\">name_edges</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">difference_update</span><span class=\"p\">(</span><span class=\"n\">name_edges</span><span class=\"p\">[</span><span class=\"n\">NEGTV</span><span class=\"p\">])</span>\n\n        <span class=\"c1\"># Negative edges within a PCC signals that an inconsistency exists</span>\n        <span class=\"c1\"># Remove inconsistencies from the name edges</span>\n        <span class=\"n\">incon_internal_ne</span> <span class=\"o\">=</span> <span class=\"n\">name_edges</span><span class=\"p\">[</span><span class=\"n\">NEGTV</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">intersection</span><span class=\"p\">(</span><span class=\"n\">name_edges</span><span class=\"p\">[</span><span class=\"n\">POSTV</span><span class=\"p\">])</span>\n        <span class=\"n\">name_edges</span><span class=\"p\">[</span><span class=\"n\">POSTV</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">difference_update</span><span class=\"p\">(</span><span class=\"n\">incon_internal_ne</span><span class=\"p\">)</span>\n        <span class=\"n\">name_edges</span><span class=\"p\">[</span><span class=\"n\">NEGTV</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">difference_update</span><span class=\"p\">(</span><span class=\"n\">incon_internal_ne</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">__debug__</span><span class=\"p\">:</span>\n            <span class=\"k\">assert</span> <span class=\"nb\">all</span><span class=\"p\">(</span><span class=\"n\">n1</span> <span class=\"o\">==</span> <span class=\"n\">n2</span> <span class=\"k\">for</span> <span class=\"n\">n1</span><span class=\"p\">,</span> <span class=\"n\">n2</span> <span class=\"ow\">in</span> <span class=\"n\">name_edges</span><span class=\"p\">[</span><span class=\"n\">POSTV</span><span class=\"p\">]),</span> <span class=\"p\">(</span>\n                <span class=\"s1\">&#39;All positive edges should be internal to a PCC&#39;</span><span class=\"p\">)</span>\n            <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">name_edges</span><span class=\"p\">[</span><span class=\"n\">INCMP</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">intersection</span><span class=\"p\">(</span><span class=\"n\">incon_internal_ne</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n            <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">name_edges</span><span class=\"p\">[</span><span class=\"n\">UNREV</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">intersection</span><span class=\"p\">(</span><span class=\"n\">incon_internal_ne</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n            <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">name_edges</span><span class=\"p\">[</span><span class=\"n\">UNKWN</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">intersection</span><span class=\"p\">(</span><span class=\"n\">incon_internal_ne</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n            <span class=\"k\">assert</span> <span class=\"nb\">all</span><span class=\"p\">(</span><span class=\"n\">n1</span> <span class=\"o\">==</span> <span class=\"n\">n2</span> <span class=\"k\">for</span> <span class=\"n\">n1</span><span class=\"p\">,</span> <span class=\"n\">n2</span> <span class=\"ow\">in</span> <span class=\"n\">incon_internal_ne</span><span class=\"p\">),</span> <span class=\"p\">(</span>\n                <span class=\"s1\">&#39;incon_internal edges should be internal to a PCC&#39;</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># External inconsistentices are edges leaving inconsistent components</span>\n        <span class=\"n\">incon_internal_nids</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">n1</span> <span class=\"k\">for</span> <span class=\"n\">n1</span><span class=\"p\">,</span> <span class=\"n\">n2</span> <span class=\"ow\">in</span> <span class=\"n\">incon_internal_ne</span><span class=\"p\">}</span>\n        <span class=\"n\">incon_external_ne</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">([])</span>\n        <span class=\"c1\"># Find all edges leaving an inconsistent PCC</span>\n        <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"n\">NEGTV</span><span class=\"p\">,)</span> <span class=\"o\">+</span> <span class=\"n\">UNINFERABLE</span><span class=\"p\">:</span>\n            <span class=\"n\">incon_external_ne</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">({</span>\n                <span class=\"p\">(</span><span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">nid2</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">nid2</span> <span class=\"ow\">in</span> <span class=\"n\">name_edges</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span>\n                <span class=\"k\">if</span> <span class=\"n\">nid1</span> <span class=\"ow\">in</span> <span class=\"n\">incon_internal_nids</span> <span class=\"ow\">or</span> <span class=\"n\">nid2</span> <span class=\"ow\">in</span> <span class=\"n\">incon_internal_nids</span>\n            <span class=\"p\">})</span>\n        <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"n\">NEGTV</span><span class=\"p\">,)</span> <span class=\"o\">+</span> <span class=\"n\">UNINFERABLE</span><span class=\"p\">:</span>\n            <span class=\"n\">name_edges</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">difference_update</span><span class=\"p\">(</span><span class=\"n\">incon_external_ne</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Inference between names is now complete.</span>\n        <span class=\"c1\"># Now we expand this inference and project the labels onto the</span>\n        <span class=\"c1\"># annotation edges corresponding to each name edge.</span>\n\n        <span class=\"c1\"># Version of union that accepts generators</span>\n        <span class=\"n\">union</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">gen</span><span class=\"p\">:</span> <span class=\"nb\">set</span><span class=\"o\">.</span><span class=\"n\">union</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">gen</span><span class=\"p\">)</span>  <span class=\"c1\"># NOQA</span>\n\n        <span class=\"c1\"># Find edges within consistent PCCs</span>\n        <span class=\"n\">positive</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"n\">nid1</span><span class=\"p\">:</span> <span class=\"n\">union</span><span class=\"p\">(</span>\n                <span class=\"n\">ne_to_edges</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">][(</span><span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">nid2</span><span class=\"p\">)]</span>\n                <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"n\">POSTV</span><span class=\"p\">,)</span> <span class=\"o\">+</span> <span class=\"n\">UNINFERABLE</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">nid2</span> <span class=\"ow\">in</span> <span class=\"n\">name_edges</span><span class=\"p\">[</span><span class=\"n\">POSTV</span><span class=\"p\">]</span>\n        <span class=\"p\">}</span>\n        <span class=\"c1\"># Find edges between 1-negative-redundant consistent PCCs</span>\n        <span class=\"n\">negative</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"p\">(</span><span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">nid2</span><span class=\"p\">):</span> <span class=\"n\">union</span><span class=\"p\">(</span>\n                <span class=\"n\">ne_to_edges</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">][(</span><span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">nid2</span><span class=\"p\">)]</span>\n                <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"n\">NEGTV</span><span class=\"p\">,)</span> <span class=\"o\">+</span> <span class=\"n\">UNINFERABLE</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">nid2</span> <span class=\"ow\">in</span> <span class=\"n\">name_edges</span><span class=\"p\">[</span><span class=\"n\">NEGTV</span><span class=\"p\">]</span>\n        <span class=\"p\">}</span>\n        <span class=\"c1\"># Find edges internal to inconsistent PCCs</span>\n        <span class=\"n\">incon_internal</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"n\">nid</span><span class=\"p\">:</span> <span class=\"n\">union</span><span class=\"p\">(</span>\n                <span class=\"n\">ne_to_edges</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">][(</span><span class=\"n\">nid</span><span class=\"p\">,</span> <span class=\"n\">nid</span><span class=\"p\">)]</span>\n                <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"n\">POSTV</span><span class=\"p\">,</span> <span class=\"n\">NEGTV</span><span class=\"p\">,)</span> <span class=\"o\">+</span> <span class=\"n\">UNINFERABLE</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">nid</span> <span class=\"ow\">in</span> <span class=\"n\">incon_internal_nids</span>\n        <span class=\"p\">}</span>\n        <span class=\"c1\"># Find edges leaving inconsistent PCCs</span>\n        <span class=\"n\">incon_external</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"p\">(</span><span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">nid2</span><span class=\"p\">):</span> <span class=\"n\">union</span><span class=\"p\">(</span>\n                <span class=\"n\">ne_to_edges</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">][(</span><span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">nid2</span><span class=\"p\">)]</span>\n                <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"n\">NEGTV</span><span class=\"p\">,)</span> <span class=\"o\">+</span> <span class=\"n\">UNINFERABLE</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">nid2</span> <span class=\"ow\">in</span> <span class=\"n\">incon_external_ne</span>\n        <span class=\"p\">}</span>\n        <span class=\"c1\"># Unknown names may have been comparable but the reviewer did not</span>\n        <span class=\"c1\"># know and could not guess. Likely bad quality.</span>\n        <span class=\"n\">unknown</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"p\">(</span><span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">nid2</span><span class=\"p\">):</span> <span class=\"n\">ne_to_edges</span><span class=\"p\">[</span><span class=\"n\">UNKWN</span><span class=\"p\">][(</span><span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">nid2</span><span class=\"p\">)]</span>\n            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">nid2</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"n\">name_edges</span><span class=\"p\">[</span><span class=\"n\">UNKWN</span><span class=\"p\">]</span>\n        <span class=\"p\">}</span>\n        <span class=\"c1\"># Incomparable names cannot make inference about any other edges</span>\n        <span class=\"n\">notcomparable</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"p\">(</span><span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">nid2</span><span class=\"p\">):</span> <span class=\"n\">ne_to_edges</span><span class=\"p\">[</span><span class=\"n\">INCMP</span><span class=\"p\">][(</span><span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">nid2</span><span class=\"p\">)]</span>\n            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">nid2</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"n\">name_edges</span><span class=\"p\">[</span><span class=\"n\">INCMP</span><span class=\"p\">]</span>\n        <span class=\"p\">}</span>\n        <span class=\"c1\"># Unreviewed edges are between any name not known to be negative</span>\n        <span class=\"c1\"># (this ignores specific incomparable edges)</span>\n        <span class=\"n\">unreviewed</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"p\">(</span><span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">nid2</span><span class=\"p\">):</span> <span class=\"n\">ne_to_edges</span><span class=\"p\">[</span><span class=\"n\">UNREV</span><span class=\"p\">][(</span><span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">nid2</span><span class=\"p\">)]</span>\n            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">nid2</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"n\">name_edges</span><span class=\"p\">[</span><span class=\"n\">UNREV</span><span class=\"p\">]</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"n\">ne_categories</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"n\">POSTV</span><span class=\"p\">:</span> <span class=\"n\">positive</span><span class=\"p\">,</span>\n            <span class=\"n\">NEGTV</span><span class=\"p\">:</span> <span class=\"n\">negative</span><span class=\"p\">,</span>\n            <span class=\"n\">UNREV</span><span class=\"p\">:</span> <span class=\"n\">unreviewed</span><span class=\"p\">,</span>\n            <span class=\"n\">INCMP</span><span class=\"p\">:</span> <span class=\"n\">notcomparable</span><span class=\"p\">,</span>\n            <span class=\"n\">UNKWN</span><span class=\"p\">:</span> <span class=\"n\">unknown</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;inconsistent_internal&#39;</span><span class=\"p\">:</span> <span class=\"n\">incon_internal</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;inconsistent_external&#39;</span><span class=\"p\">:</span> <span class=\"n\">incon_external</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">ne_categories</span></div></div>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.algo.graph.mixin_dynamic</span>\n<span class=\"sd\">        python -m ibeis.algo.graph.mixin_dynamic --allexamples</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">multiprocessing</span>\n    <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">freeze_support</span><span class=\"p\">()</span>  <span class=\"c1\"># for win32</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>  <span class=\"c1\"># NOQA</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">doctest_funcs</span><span class=\"p\">()</span>\n</pre></div>", "current_page_name": "_modules/ibeis/algo/graph/mixin_dynamic", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}