{"parents": [{"link": "../../../../../", "title": "Module code"}, {"link": "../../../../", "title": "ibeis"}, {"link": "../../../", "title": "ibeis.algo"}, {"link": "../../", "title": "ibeis.algo.graph"}], "title": "ibeis.algo.graph.tests.dyn_cases", "body": "<h1>Source code for ibeis.algo.graph.tests.dyn_cases</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"k\">import</span> <span class=\"n\">absolute_import</span><span class=\"p\">,</span> <span class=\"n\">division</span><span class=\"p\">,</span> <span class=\"n\">print_function</span><span class=\"p\">,</span> <span class=\"n\">unicode_literals</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph</span> <span class=\"k\">import</span> <span class=\"n\">demo</span>\n<span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.state</span> <span class=\"k\">import</span> <span class=\"n\">POSTV</span><span class=\"p\">,</span> <span class=\"n\">NEGTV</span><span class=\"p\">,</span> <span class=\"n\">INCMP</span><span class=\"p\">,</span> <span class=\"n\">UNREV</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.state</span> <span class=\"k\">import</span> <span class=\"n\">SAME</span><span class=\"p\">,</span> <span class=\"n\">DIFF</span><span class=\"p\">,</span> <span class=\"n\">NULL</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"nb\">print</span><span class=\"p\">,</span> <span class=\"n\">rrr</span><span class=\"p\">,</span> <span class=\"n\">profile</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">inject2</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"do_infr_test\"><a class=\"viewcode-back\" href=\"../../../../../../ibeis.algo.graph.tests/#ibeis.algo.graph.tests.dyn_cases.do_infr_test\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">do_infr_test</span><span class=\"p\">(</span><span class=\"n\">ccs</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"p\">,</span> <span class=\"n\">new_edges</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Creates a graph with `ccs` + `edges` and then adds `new_edges`</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\"># import networkx as nx</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">plottool</span> <span class=\"k\">as</span> <span class=\"nn\">pt</span>\n\n    <span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">demo</span><span class=\"o\">.</span><span class=\"n\">make_demo_infr</span><span class=\"p\">(</span><span class=\"n\">ccs</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">show_was_requested</span><span class=\"p\">():</span>\n        <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">qtensure</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># Preshow</span>\n    <span class=\"n\">fnum</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n    <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">show_was_requested</span><span class=\"p\">():</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">set_node_attrs</span><span class=\"p\">(</span><span class=\"s1\">&#39;shape&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">pnum</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"n\">fnum</span><span class=\"p\">,</span> <span class=\"n\">show_unreviewed_edges</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                  <span class=\"n\">show_reviewed_cuts</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                  <span class=\"n\">splines</span><span class=\"o\">=</span><span class=\"s1\">&#39;spline&#39;</span><span class=\"p\">,</span>\n                  <span class=\"n\">show_inferred_diff</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">groupby</span><span class=\"o\">=</span><span class=\"s1\">&#39;name_label&#39;</span><span class=\"p\">,</span>\n                  <span class=\"n\">show_labels</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">pickable</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">set_title</span><span class=\"p\">(</span><span class=\"s1\">&#39;pre-review&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">gca</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">set_aspect</span><span class=\"p\">(</span><span class=\"s1\">&#39;equal&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">set_node_attrs</span><span class=\"p\">(</span><span class=\"s1\">&#39;pin&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;true&#39;</span><span class=\"p\">)</span>\n        <span class=\"c1\"># fig1 = pt.gcf()</span>\n        <span class=\"c1\"># fig1.canvas.mpl_connect(&#39;pick_event&#39;, ut.partial(on_pick, infr=infr))</span>\n\n    <span class=\"n\">infr1</span> <span class=\"o\">=</span> <span class=\"n\">infr</span>\n    <span class=\"n\">infr2</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n    <span class=\"k\">for</span> <span class=\"n\">new_edge</span> <span class=\"ow\">in</span> <span class=\"n\">new_edges</span><span class=\"p\">:</span>\n        <span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">,</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">new_edge</span>\n        <span class=\"n\">evidence_decision</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">infr2</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">((</span><span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">),</span> <span class=\"n\">evidence_decision</span><span class=\"p\">)</span>\n    <span class=\"n\">infr2</span><span class=\"o\">.</span><span class=\"n\">relabel_using_reviews</span><span class=\"p\">(</span><span class=\"n\">rectify</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">infr2</span><span class=\"o\">.</span><span class=\"n\">apply_nondynamic_update</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># Postshow</span>\n    <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">show_was_requested</span><span class=\"p\">():</span>\n        <span class=\"n\">infr2</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">pnum</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"n\">fnum</span><span class=\"p\">,</span> <span class=\"n\">show_unreviewed_edges</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                   <span class=\"n\">show_inferred_diff</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">show_labels</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">gca</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">set_aspect</span><span class=\"p\">(</span><span class=\"s1\">&#39;equal&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">set_title</span><span class=\"p\">(</span><span class=\"s1\">&#39;post-review&#39;</span><span class=\"p\">)</span>\n        <span class=\"c1\"># fig2 = pt.gcf()</span>\n        <span class=\"c1\"># if fig2 is not fig1:</span>\n        <span class=\"c1\">#     fig2.canvas.mpl_connect(&#39;pick_event&#39;, ut.partial(on_pick, infr=infr2))</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Checker</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Asserts pre and post test properties of the graph</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">infr1</span><span class=\"p\">,</span> <span class=\"n\">infr2</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_errors</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">infr1</span> <span class=\"o\">=</span> <span class=\"n\">infr1</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">infr2</span> <span class=\"o\">=</span> <span class=\"n\">infr2</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"p\">):</span>\n            <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">get_nonvisual_edge_data</span><span class=\"p\">((</span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">))</span>\n            <span class=\"k\">if</span> <span class=\"n\">data</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"k\">assert</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">has_edge</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">),</span> <span class=\"p\">(</span>\n                    <span class=\"s1\">&#39;uv=</span><span class=\"si\">%r</span><span class=\"s1\">, </span><span class=\"si\">%r</span><span class=\"s1\"> does not exist&#39;</span>  <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">))</span>\n            <span class=\"n\">got</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">got</span> <span class=\"o\">!=</span> <span class=\"n\">val</span><span class=\"p\">:</span>\n                <span class=\"n\">msg1</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;key=</span><span class=\"si\">%s</span><span class=\"s1\"> </span><span class=\"si\">%r</span><span class=\"s1\">!=</span><span class=\"si\">%r</span><span class=\"s1\">, &#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">got</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">)</span>\n                <span class=\"n\">errmsg</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"n\">msg1</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"p\">,</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">edge=&#39;</span><span class=\"p\">,</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr2</span><span class=\"p\">((</span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)),</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">,</span>\n                                 <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">repr_edge_data</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)])</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_errors</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">errmsg</span><span class=\"p\">)</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">custom_precheck</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">func</span><span class=\"p\">):</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">func</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">infr1</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"ne\">AssertionError</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_errors</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">after</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"p\">[]):</span>\n            <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">            Delays error reporting until after visualization</span>\n\n<span class=\"sd\">            prints errors, then shows you the graph, then</span>\n<span class=\"sd\">            finally if any errors were discovered they are raised</span>\n<span class=\"sd\">            &quot;&quot;&quot;</span>\n\n            <span class=\"n\">errors</span> <span class=\"o\">=</span> <span class=\"n\">errors</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_errors</span>\n            <span class=\"k\">if</span> <span class=\"n\">errors</span><span class=\"p\">:</span>\n                <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">cprint</span><span class=\"p\">(</span><span class=\"s1\">&#39;PRINTING </span><span class=\"si\">%d</span><span class=\"s1\"> FAILURE&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">errors</span><span class=\"p\">)),</span> <span class=\"s1\">&#39;red&#39;</span><span class=\"p\">)</span>\n                <span class=\"k\">for</span> <span class=\"n\">msg</span> <span class=\"ow\">in</span> <span class=\"n\">errors</span><span class=\"p\">:</span>\n                    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n                <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">cprint</span><span class=\"p\">(</span><span class=\"s1\">&#39;HAD </span><span class=\"si\">%d</span><span class=\"s1\"> FAILURE&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">errors</span><span class=\"p\">)),</span> <span class=\"s1\">&#39;red&#39;</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">show_was_requested</span><span class=\"p\">():</span>\n                <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">all_figures_tile</span><span class=\"p\">(</span><span class=\"n\">percent_w</span><span class=\"o\">=.</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n                <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">show_if_requested</span><span class=\"p\">()</span>\n            <span class=\"k\">if</span> <span class=\"n\">errors</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">AssertionError</span><span class=\"p\">(</span><span class=\"s1\">&#39;There were errors&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"n\">check</span> <span class=\"o\">=</span> <span class=\"n\">Checker</span><span class=\"p\">(</span><span class=\"n\">infr1</span><span class=\"p\">,</span> <span class=\"n\">infr2</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">infr1</span><span class=\"p\">,</span> <span class=\"n\">infr2</span><span class=\"p\">,</span> <span class=\"n\">check</span></div>\n\n\n<div class=\"viewcode-block\" id=\"case_negative_infr\"><a class=\"viewcode-back\" href=\"../../../../../../ibeis.algo.graph.tests/#ibeis.algo.graph.tests.dyn_cases.case_negative_infr\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">case_negative_infr</span><span class=\"p\">():</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.algo.graph.tests.dyn_cases case_negative_infr --show</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.algo.graph.tests.dyn_cases import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; case_negative_infr()</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\"># Initial positive reviews</span>\n    <span class=\"n\">ccs</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">]]</span>\n    <span class=\"c1\"># Add in initial reviews</span>\n    <span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">NEGTV</span><span class=\"p\">}),</span>\n        <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">}),</span>\n        <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">}),</span>\n    <span class=\"p\">]</span>\n    <span class=\"c1\"># Add in scored, but unreviewed edges</span>\n    <span class=\"n\">new_edges</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">NEGTV</span><span class=\"p\">})]</span>\n    <span class=\"n\">infr1</span><span class=\"p\">,</span> <span class=\"n\">infr2</span><span class=\"p\">,</span> <span class=\"n\">check</span> <span class=\"o\">=</span> <span class=\"n\">do_infr_test</span><span class=\"p\">(</span><span class=\"n\">ccs</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"p\">,</span> <span class=\"n\">new_edges</span><span class=\"p\">)</span>\n\n    <span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">infr2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n          <span class=\"s1\">&#39;negative review of an edge should not jump more than one component&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">infr2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;diff&#39;</span><span class=\"p\">,</span>\n          <span class=\"s1\">&#39;negative review of an edge should cut within one jump&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">after</span><span class=\"p\">()</span></div>\n\n\n<div class=\"viewcode-block\" id=\"case_match_infr\"><a class=\"viewcode-back\" href=\"../../../../../../ibeis.algo.graph.tests/#ibeis.algo.graph.tests.dyn_cases.case_match_infr\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">case_match_infr</span><span class=\"p\">():</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.algo.graph.tests.dyn_cases case_match_infr --show</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.algo.graph.tests.dyn_cases import *  # NOQA</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; case_match_infr()</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\"># Initial positive reviews</span>\n    <span class=\"n\">ccs</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">]]</span>\n    <span class=\"c1\"># Add in initial reviews</span>\n    <span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">NEGTV</span><span class=\"p\">}),</span>\n        <span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"p\">{}),</span>\n    <span class=\"p\">]</span>\n    <span class=\"c1\"># Add in scored, but unreviewed edges</span>\n    <span class=\"n\">edges</span> <span class=\"o\">+=</span> <span class=\"p\">[</span>\n        <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">}),</span>\n        <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">}),</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">new_edges</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">POSTV</span><span class=\"p\">})]</span>\n    <span class=\"n\">infr1</span><span class=\"p\">,</span> <span class=\"n\">infr2</span><span class=\"p\">,</span> <span class=\"n\">check</span> <span class=\"o\">=</span> <span class=\"n\">do_infr_test</span><span class=\"p\">(</span><span class=\"n\">ccs</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"p\">,</span> <span class=\"n\">new_edges</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Checks out of cc inferences</span>\n    <span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">infr2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;same&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;should infer a match&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">infr2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;diff&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;should infer a negative&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">infr1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">&#39;discon should have inference&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">infr2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">&#39;discon should have inference&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">after</span><span class=\"p\">()</span></div>\n\n\n<div class=\"viewcode-block\" id=\"case_inconsistent\"><a class=\"viewcode-back\" href=\"../../../../../../ibeis.algo.graph.tests/#ibeis.algo.graph.tests.dyn_cases.case_inconsistent\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">case_inconsistent</span><span class=\"p\">():</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.algo.graph.tests.dyn_cases case_inconsistent --show</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.algo.graph.tests.dyn_cases import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; case_inconsistent()</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">ccs</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]]</span>  <span class=\"c1\"># [6, 7]]</span>\n    <span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">NEGTV</span><span class=\"p\">}),</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">edges</span> <span class=\"o\">+=</span> <span class=\"p\">[</span>\n        <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">}),</span>\n        <span class=\"c1\"># (2, 7, {&#39;inferred_state&#39;: None}),</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">new_edges</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">POSTV</span><span class=\"p\">})]</span>\n    <span class=\"n\">infr1</span><span class=\"p\">,</span> <span class=\"n\">infr2</span><span class=\"p\">,</span> <span class=\"n\">check</span> <span class=\"o\">=</span> <span class=\"n\">do_infr_test</span><span class=\"p\">(</span><span class=\"n\">ccs</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"p\">,</span> <span class=\"n\">new_edges</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Make sure the previously inferred edge is no longer inferred</span>\n    <span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">infr1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;diff&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;should initially be an inferred diff&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">infr2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;inconsistent_internal&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;should not be inferred after incon&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">infr2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">&#39;maybe_error&#39;</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s1\">&#39;need to have a maybe split&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">after</span><span class=\"p\">()</span></div>\n\n\n<div class=\"viewcode-block\" id=\"case_redo_incon\"><a class=\"viewcode-back\" href=\"../../../../../../ibeis.algo.graph.tests/#ibeis.algo.graph.tests.dyn_cases.case_redo_incon\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">case_redo_incon</span><span class=\"p\">():</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.algo.graph.tests.dyn_cases case_redo_incon --show</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.algo.graph.tests.dyn_cases import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; case_redo_incon()</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">ccs</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]]</span>  <span class=\"c1\"># [6, 7]]</span>\n    <span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">NEGTV</span><span class=\"p\">}),</span>\n        <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">NEGTV</span><span class=\"p\">}),</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">edges</span> <span class=\"o\">+=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">new_edges</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">POSTV</span><span class=\"p\">})]</span>\n    <span class=\"n\">infr1</span><span class=\"p\">,</span> <span class=\"n\">infr2</span><span class=\"p\">,</span> <span class=\"n\">check</span> <span class=\"o\">=</span> <span class=\"n\">do_infr_test</span><span class=\"p\">(</span><span class=\"n\">ccs</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"p\">,</span> <span class=\"n\">new_edges</span><span class=\"p\">)</span>\n\n    <span class=\"n\">maybe_splits</span> <span class=\"o\">=</span> <span class=\"n\">infr2</span><span class=\"o\">.</span><span class=\"n\">get_edge_attrs</span><span class=\"p\">(</span><span class=\"s1\">&#39;maybe_error&#39;</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;maybe_splits = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">maybe_splits</span><span class=\"p\">,))</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">any</span><span class=\"p\">(</span><span class=\"n\">maybe_splits</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()):</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">cprint</span><span class=\"p\">(</span><span class=\"s1\">&#39;FAILURE&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;red&#39;</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;At least one edge should be marked as a split&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">after</span><span class=\"p\">()</span></div>\n\n\n<div class=\"viewcode-block\" id=\"case_override_inference\"><a class=\"viewcode-back\" href=\"../../../../../../ibeis.algo.graph.tests/#ibeis.algo.graph.tests.dyn_cases.case_override_inference\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">case_override_inference</span><span class=\"p\">():</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.algo.graph.tests.dyn_cases case_override_inference --show</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.algo.graph.tests.dyn_cases import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; case_override_inference()</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">ccs</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]]</span>\n    <span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;same&#39;</span><span class=\"p\">}),</span>\n        <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;same&#39;</span><span class=\"p\">}),</span>\n        <span class=\"c1\"># (1, 5, {&#39;inferred_state&#39;: &#39;same&#39;}),</span>\n        <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;same&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;num_reviews&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">}),</span>\n        <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;same&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;num_reviews&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">}),</span>\n        <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;same&#39;</span><span class=\"p\">}),</span>\n        <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;same&#39;</span><span class=\"p\">}),</span>\n        <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;same&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;num_reviews&#39;</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">}),</span>\n        <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;same&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;num_reviews&#39;</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"mi\">01</span><span class=\"p\">}),</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">edges</span> <span class=\"o\">+=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">new_edges</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">NEGTV</span><span class=\"p\">}),</span>\n        <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">NEGTV</span><span class=\"p\">}),</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">infr1</span><span class=\"p\">,</span> <span class=\"n\">infr2</span><span class=\"p\">,</span> <span class=\"n\">check</span> <span class=\"o\">=</span> <span class=\"n\">do_infr_test</span><span class=\"p\">(</span><span class=\"n\">ccs</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"p\">,</span> <span class=\"n\">new_edges</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Make sure that the inferred edges are no longer inferred when an</span>\n    <span class=\"c1\"># inconsistent case is introduced</span>\n    <span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">infr2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s1\">&#39;maybe_error&#39;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">&#39;should not split inferred edge&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">infr2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s1\">&#39;maybe_error&#39;</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s1\">&#39;split me&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">infr2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;inconsistent_internal&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;inference should be overriden&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">after</span><span class=\"p\">()</span></div>\n\n\n<div class=\"viewcode-block\" id=\"case_undo_match\"><a class=\"viewcode-back\" href=\"../../../../../../ibeis.algo.graph.tests/#ibeis.algo.graph.tests.dyn_cases.case_undo_match\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">case_undo_match</span><span class=\"p\">():</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.algo.graph.tests.dyn_cases case_undo_match --show</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.algo.graph.tests.dyn_cases import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; case_undo_match()</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">ccs</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]]</span>\n    <span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">new_edges</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">NEGTV</span><span class=\"p\">})]</span>\n    <span class=\"n\">infr1</span><span class=\"p\">,</span> <span class=\"n\">infr2</span><span class=\"p\">,</span> <span class=\"n\">check</span> <span class=\"o\">=</span> <span class=\"n\">do_infr_test</span><span class=\"p\">(</span><span class=\"n\">ccs</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"p\">,</span> <span class=\"n\">new_edges</span><span class=\"p\">)</span>\n\n    <span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">infr2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;diff&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;should have cut edge&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">after</span><span class=\"p\">()</span></div>\n\n\n<div class=\"viewcode-block\" id=\"case_undo_negative\"><a class=\"viewcode-back\" href=\"../../../../../../ibeis.algo.graph.tests/#ibeis.algo.graph.tests.dyn_cases.case_undo_negative\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">case_undo_negative</span><span class=\"p\">():</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.algo.graph.tests.dyn_cases case_undo_negative --show</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.algo.graph.tests.dyn_cases import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; case_undo_negative()</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">ccs</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]]</span>\n    <span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">NEGTV</span><span class=\"p\">}),</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">new_edges</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">POSTV</span><span class=\"p\">})]</span>\n    <span class=\"n\">infr1</span><span class=\"p\">,</span> <span class=\"n\">infr2</span><span class=\"p\">,</span> <span class=\"n\">check</span> <span class=\"o\">=</span> <span class=\"n\">do_infr_test</span><span class=\"p\">(</span><span class=\"n\">ccs</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"p\">,</span> <span class=\"n\">new_edges</span><span class=\"p\">)</span>\n    <span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">infr2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;same&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;should have matched edge&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">after</span><span class=\"p\">()</span></div>\n\n\n<div class=\"viewcode-block\" id=\"case_incon_removes_inference\"><a class=\"viewcode-back\" href=\"../../../../../../ibeis.algo.graph.tests/#ibeis.algo.graph.tests.dyn_cases.case_incon_removes_inference\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">case_incon_removes_inference</span><span class=\"p\">():</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.algo.graph.tests.dyn_cases case_incon_removes_inference --show</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.algo.graph.tests.dyn_cases import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; case_incon_removes_inference()</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">ccs</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]]</span>\n    <span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">NEGTV</span><span class=\"p\">}),</span>\n        <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">NEGTV</span><span class=\"p\">}),</span>\n        <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"p\">{}),</span>\n        <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"p\">{}),</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">new_edges</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">POSTV</span><span class=\"p\">})]</span>\n    <span class=\"n\">infr1</span><span class=\"p\">,</span> <span class=\"n\">infr2</span><span class=\"p\">,</span> <span class=\"n\">check</span> <span class=\"o\">=</span> <span class=\"n\">do_infr_test</span><span class=\"p\">(</span><span class=\"n\">ccs</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"p\">,</span> <span class=\"n\">new_edges</span><span class=\"p\">)</span>\n\n    <span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">infr1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;diff&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;should be preinferred&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">infr2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;inconsistent_internal&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;should be uninferred on incon&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">after</span><span class=\"p\">()</span></div>\n\n\n<div class=\"viewcode-block\" id=\"case_inferable_notcomp1\"><a class=\"viewcode-back\" href=\"../../../../../../ibeis.algo.graph.tests/#ibeis.algo.graph.tests.dyn_cases.case_inferable_notcomp1\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">case_inferable_notcomp1</span><span class=\"p\">():</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    make sure notcomparable edges can be inferred</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.algo.graph.tests.dyn_cases case_inferable_notcomp1 --show</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.algo.graph.tests.dyn_cases import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; case_inferable_notcomp1()</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">ccs</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]]</span>\n    <span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">NEGTV</span><span class=\"p\">}),</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">new_edges</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">INCMP</span><span class=\"p\">})]</span>\n    <span class=\"n\">infr1</span><span class=\"p\">,</span> <span class=\"n\">infr2</span><span class=\"p\">,</span> <span class=\"n\">check</span> <span class=\"o\">=</span> <span class=\"n\">do_infr_test</span><span class=\"p\">(</span><span class=\"n\">ccs</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"p\">,</span> <span class=\"n\">new_edges</span><span class=\"p\">)</span>\n    <span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">infr2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;diff&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;should be inferred&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">after</span><span class=\"p\">()</span></div>\n\n\n<div class=\"viewcode-block\" id=\"case_inferable_update_notcomp\"><a class=\"viewcode-back\" href=\"../../../../../../ibeis.algo.graph.tests/#ibeis.algo.graph.tests.dyn_cases.case_inferable_update_notcomp\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">case_inferable_update_notcomp</span><span class=\"p\">():</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    make sure inference updates for nocomparable edges</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.algo.graph.tests.dyn_cases case_inferable_update_notcomp --show</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.algo.graph.tests.dyn_cases import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; case_inferable_update_notcomp()</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">ccs</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]]</span>\n    <span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">NEGTV</span><span class=\"p\">}),</span>\n        <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">INCMP</span><span class=\"p\">}),</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">new_edges</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">POSTV</span><span class=\"p\">})]</span>\n    <span class=\"n\">infr1</span><span class=\"p\">,</span> <span class=\"n\">infr2</span><span class=\"p\">,</span> <span class=\"n\">check</span> <span class=\"o\">=</span> <span class=\"n\">do_infr_test</span><span class=\"p\">(</span><span class=\"n\">ccs</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"p\">,</span> <span class=\"n\">new_edges</span><span class=\"p\">)</span>\n    <span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">infr1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;diff&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;should be inferred diff&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">infr2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;same&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;should be inferred same&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">after</span><span class=\"p\">()</span></div>\n\n\n<div class=\"viewcode-block\" id=\"case_notcomp_remove_infr\"><a class=\"viewcode-back\" href=\"../../../../../../ibeis.algo.graph.tests/#ibeis.algo.graph.tests.dyn_cases.case_notcomp_remove_infr\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">case_notcomp_remove_infr</span><span class=\"p\">():</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.algo.graph.tests.dyn_cases case_notcomp_remove_infr --show</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.algo.graph.tests.dyn_cases import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; case_notcomp_remove_infr()</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">ccs</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]]</span>\n    <span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">POSTV</span><span class=\"p\">}),</span>\n        <span class=\"c1\"># (1, 4, {&#39;evidence_decision&#39;: INCMP}),</span>\n        <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">INCMP</span><span class=\"p\">}),</span>\n        <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">INCMP</span><span class=\"p\">}),</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">new_edges</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">INCMP</span><span class=\"p\">})]</span>\n    <span class=\"n\">infr1</span><span class=\"p\">,</span> <span class=\"n\">infr2</span><span class=\"p\">,</span> <span class=\"n\">check</span> <span class=\"o\">=</span> <span class=\"n\">do_infr_test</span><span class=\"p\">(</span><span class=\"n\">ccs</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"p\">,</span> <span class=\"n\">new_edges</span><span class=\"p\">)</span>\n    <span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">infr2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">,</span> <span class=\"n\">INCMP</span><span class=\"p\">,</span> <span class=\"s1\">&#39;can not infer match here!&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">infr2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">,</span> <span class=\"n\">INCMP</span><span class=\"p\">,</span> <span class=\"s1\">&#39;can not infer match here!&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">infr2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">,</span> <span class=\"n\">INCMP</span><span class=\"p\">,</span> <span class=\"s1\">&#39;can not infer match here!&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">after</span><span class=\"p\">()</span></div>\n\n\n<div class=\"viewcode-block\" id=\"case_notcomp_remove_cuts\"><a class=\"viewcode-back\" href=\"../../../../../../ibeis.algo.graph.tests/#ibeis.algo.graph.tests.dyn_cases.case_notcomp_remove_cuts\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">case_notcomp_remove_cuts</span><span class=\"p\">():</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.algo.graph.tests.dyn_cases case_notcomp_remove_cuts --show</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.algo.graph.tests.dyn_cases import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; case_notcomp_remove_cuts()</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">ccs</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]]</span>\n    <span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">NEGTV</span><span class=\"p\">}),</span>\n        <span class=\"c1\"># (1, 4, {&#39;evidence_decision&#39;: INCMP}),</span>\n        <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">INCMP</span><span class=\"p\">}),</span>\n        <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">INCMP</span><span class=\"p\">}),</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">new_edges</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">INCMP</span><span class=\"p\">})]</span>\n    <span class=\"n\">infr1</span><span class=\"p\">,</span> <span class=\"n\">infr2</span><span class=\"p\">,</span> <span class=\"n\">check</span> <span class=\"o\">=</span> <span class=\"n\">do_infr_test</span><span class=\"p\">(</span><span class=\"n\">ccs</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"p\">,</span> <span class=\"n\">new_edges</span><span class=\"p\">)</span>\n    <span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">infr1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;diff&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;should infer diff!&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">infr1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;diff&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;should infer diff!&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">infr1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;diff&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;should infer diff!&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">infr2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">,</span> <span class=\"n\">INCMP</span><span class=\"p\">,</span> <span class=\"s1\">&#39;can not infer cut here!&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">infr2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">,</span> <span class=\"n\">INCMP</span><span class=\"p\">,</span> <span class=\"s1\">&#39;can not infer cut here!&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">infr2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">,</span> <span class=\"n\">INCMP</span><span class=\"p\">,</span> <span class=\"s1\">&#39;can not infer cut here!&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">after</span><span class=\"p\">()</span></div>\n\n\n<div class=\"viewcode-block\" id=\"case_keep_in_cc_infr_post_negative\"><a class=\"viewcode-back\" href=\"../../../../../../ibeis.algo.graph.tests/#ibeis.algo.graph.tests.dyn_cases.case_keep_in_cc_infr_post_negative\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">case_keep_in_cc_infr_post_negative</span><span class=\"p\">():</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.algo.graph.tests.dyn_cases case_keep_in_cc_infr_post_negative --show</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.algo.graph.tests.dyn_cases import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; case_keep_in_cc_infr_post_negative()</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">ccs</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]]</span>\n    <span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)]</span>\n    <span class=\"n\">new_edges</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">NEGTV</span><span class=\"p\">})]</span>\n    <span class=\"n\">infr1</span><span class=\"p\">,</span> <span class=\"n\">infr2</span><span class=\"p\">,</span> <span class=\"n\">check</span> <span class=\"o\">=</span> <span class=\"n\">do_infr_test</span><span class=\"p\">(</span><span class=\"n\">ccs</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"p\">,</span> <span class=\"n\">new_edges</span><span class=\"p\">)</span>\n    <span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">infr1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">&#39;should be no inference&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">infr1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;same&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;should be inferred&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">infr2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;same&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;should remain inferred&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">infr2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;diff&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;should become inferred&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">after</span><span class=\"p\">()</span></div>\n\n\n<div class=\"viewcode-block\" id=\"case_keep_in_cc_infr_post_notcomp\"><a class=\"viewcode-back\" href=\"../../../../../../ibeis.algo.graph.tests/#ibeis.algo.graph.tests.dyn_cases.case_keep_in_cc_infr_post_notcomp\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">case_keep_in_cc_infr_post_notcomp</span><span class=\"p\">():</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.algo.graph.tests.dyn_cases case_keep_in_cc_infr_post_notcomp --show</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.algo.graph.tests.dyn_cases import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; case_keep_in_cc_infr_post_notcomp()</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">ccs</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]]</span>\n    <span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)]</span>\n    <span class=\"n\">new_edges</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">INCMP</span><span class=\"p\">})]</span>\n    <span class=\"n\">infr1</span><span class=\"p\">,</span> <span class=\"n\">infr2</span><span class=\"p\">,</span> <span class=\"n\">check</span> <span class=\"o\">=</span> <span class=\"n\">do_infr_test</span><span class=\"p\">(</span><span class=\"n\">ccs</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"p\">,</span> <span class=\"n\">new_edges</span><span class=\"p\">)</span>\n    <span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">infr1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">&#39;should not be inferred&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">infr1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;same&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;should be inferred&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">infr2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;same&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;should remain inferred&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">infr2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">&#39;should not become inferred&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">after</span><span class=\"p\">()</span></div>\n\n\n<div class=\"viewcode-block\" id=\"case_out_of_subgraph_modification\"><a class=\"viewcode-back\" href=\"../../../../../../ibeis.algo.graph.tests/#ibeis.algo.graph.tests.dyn_cases.case_out_of_subgraph_modification\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">case_out_of_subgraph_modification</span><span class=\"p\">():</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.algo.graph.tests.dyn_cases case_out_of_subgraph_modification --show</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.algo.graph.tests.dyn_cases import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; case_out_of_subgraph_modification()</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\"># A case where a review between two ccs modifies state outside of</span>\n    <span class=\"c1\"># the subgraph of ccs</span>\n    <span class=\"n\">ccs</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]]</span>\n    <span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">NEGTV</span><span class=\"p\">})</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">new_edges</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">POSTV</span><span class=\"p\">})]</span>\n    <span class=\"n\">infr1</span><span class=\"p\">,</span> <span class=\"n\">infr2</span><span class=\"p\">,</span> <span class=\"n\">check</span> <span class=\"o\">=</span> <span class=\"n\">do_infr_test</span><span class=\"p\">(</span><span class=\"n\">ccs</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"p\">,</span> <span class=\"n\">new_edges</span><span class=\"p\">)</span>\n    <span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">infr1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">&#39;should not be inferred&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">infr2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;diff&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;should be inferred&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">after</span><span class=\"p\">()</span></div>\n\n\n<div class=\"viewcode-block\" id=\"case_flag_merge\"><a class=\"viewcode-back\" href=\"../../../../../../ibeis.algo.graph.tests/#ibeis.algo.graph.tests.dyn_cases.case_flag_merge\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">case_flag_merge</span><span class=\"p\">():</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.algo.graph.tests.dyn_cases case_flag_merge --show</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.algo.graph.tests.dyn_cases import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; case_flag_merge()</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\"># A case where a review between two ccs modifies state outside of</span>\n    <span class=\"c1\"># the subgraph of ccs</span>\n    <span class=\"n\">ccs</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">POSTV</span><span class=\"p\">,</span> <span class=\"s1\">&#39;num_reviews&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">}),</span>\n        <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">POSTV</span><span class=\"p\">,</span> <span class=\"s1\">&#39;num_reviews&#39;</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">}),</span>\n        <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">NEGTV</span><span class=\"p\">,</span> <span class=\"s1\">&#39;num_reviews&#39;</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">}),</span>\n    <span class=\"p\">]</span>\n    <span class=\"c1\"># Ensure that the negative edge comes back as potentially in error</span>\n    <span class=\"n\">new_edges</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">POSTV</span><span class=\"p\">})]</span>\n    <span class=\"n\">infr1</span><span class=\"p\">,</span> <span class=\"n\">infr2</span><span class=\"p\">,</span> <span class=\"n\">check</span> <span class=\"o\">=</span> <span class=\"n\">do_infr_test</span><span class=\"p\">(</span><span class=\"n\">ccs</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"p\">,</span> <span class=\"n\">new_edges</span><span class=\"p\">)</span>\n    <span class=\"nd\">@check</span><span class=\"o\">.</span><span class=\"n\">custom_precheck</span>\n    <span class=\"k\">def</span> <span class=\"nf\">check_pre_state</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">):</span>\n        <span class=\"k\">assert</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">nid_to_errors</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"p\">{(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)}</span>\n\n    <span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">infr1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s1\">&#39;maybe_error&#39;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">&#39;match edge should flag first None&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">infr1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s1\">&#39;maybe_error&#39;</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s1\">&#39;match edge should flag first True&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">infr2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s1\">&#39;maybe_error&#39;</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s1\">&#39;negative edge should flag second True&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">infr2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s1\">&#39;maybe_error&#39;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">&#39;negative edge should flag second None&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">after</span><span class=\"p\">()</span></div>\n\n\n<div class=\"viewcode-block\" id=\"case_all_types\"><a class=\"viewcode-back\" href=\"../../../../../../ibeis.algo.graph.tests/#ibeis.algo.graph.tests.dyn_cases.case_all_types\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">case_all_types</span><span class=\"p\">():</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.algo.graph.tests.dyn_cases case_all_types --show</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.algo.graph.tests.dyn_cases import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; case_all_types()</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\"># A case where a review between two ccs modifies state outside of</span>\n    <span class=\"c1\"># the subgraph of ccs</span>\n    <span class=\"n\">ccs</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"c1\"># Define edges within components</span>\n    <span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"c1\"># Inconsistent component</span>\n        <span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">POSTV</span><span class=\"p\">}),</span>\n        <span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">POSTV</span><span class=\"p\">}),</span>\n        <span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">NEGTV</span><span class=\"p\">}),</span>\n        <span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">POSTV</span><span class=\"p\">}),</span>\n        <span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">POSTV</span><span class=\"p\">}),</span>\n        <span class=\"p\">(</span><span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"p\">{}),</span>\n        <span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">POSTV</span><span class=\"p\">}),</span>\n        <span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">INCMP</span><span class=\"p\">}),</span>\n\n        <span class=\"c1\"># Positive component (with notcomp)</span>\n        <span class=\"p\">(</span><span class=\"mi\">21</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">POSTV</span><span class=\"p\">}),</span>\n        <span class=\"p\">(</span><span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"mi\">23</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">POSTV</span><span class=\"p\">}),</span>\n        <span class=\"p\">(</span><span class=\"mi\">21</span><span class=\"p\">,</span> <span class=\"mi\">23</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">INCMP</span><span class=\"p\">}),</span>\n        <span class=\"p\">(</span><span class=\"mi\">21</span><span class=\"p\">,</span> <span class=\"mi\">24</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">POSTV</span><span class=\"p\">}),</span>\n        <span class=\"p\">(</span><span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"mi\">24</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">POSTV</span><span class=\"p\">}),</span>\n        <span class=\"p\">(</span><span class=\"mi\">23</span><span class=\"p\">,</span> <span class=\"mi\">24</span><span class=\"p\">,</span> <span class=\"p\">{}),</span>\n\n        <span class=\"c1\"># Positive component (with unreview)</span>\n        <span class=\"p\">(</span><span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">POSTV</span><span class=\"p\">}),</span>\n        <span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">POSTV</span><span class=\"p\">}),</span>\n        <span class=\"p\">(</span><span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">POSTV</span><span class=\"p\">}),</span>\n        <span class=\"p\">(</span><span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"mi\">34</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">POSTV</span><span class=\"p\">}),</span>\n        <span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">34</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">POSTV</span><span class=\"p\">}),</span>\n        <span class=\"p\">(</span><span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"mi\">34</span><span class=\"p\">,</span> <span class=\"p\">{}),</span>\n\n        <span class=\"c1\"># Positive component</span>\n        <span class=\"p\">(</span><span class=\"mi\">41</span><span class=\"p\">,</span> <span class=\"mi\">42</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">POSTV</span><span class=\"p\">}),</span>\n        <span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">,</span> <span class=\"mi\">43</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">POSTV</span><span class=\"p\">}),</span>\n        <span class=\"p\">(</span><span class=\"mi\">41</span><span class=\"p\">,</span> <span class=\"mi\">43</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">POSTV</span><span class=\"p\">}),</span>\n\n        <span class=\"c1\"># Positive component (extra)</span>\n        <span class=\"p\">(</span><span class=\"mi\">51</span><span class=\"p\">,</span> <span class=\"mi\">52</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">POSTV</span><span class=\"p\">}),</span>\n        <span class=\"p\">(</span><span class=\"mi\">52</span><span class=\"p\">,</span> <span class=\"mi\">53</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">POSTV</span><span class=\"p\">}),</span>\n        <span class=\"p\">(</span><span class=\"mi\">51</span><span class=\"p\">,</span> <span class=\"mi\">53</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">POSTV</span><span class=\"p\">}),</span>\n\n        <span class=\"c1\"># Positive component (isolated)</span>\n        <span class=\"p\">(</span><span class=\"mi\">61</span><span class=\"p\">,</span> <span class=\"mi\">62</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">POSTV</span><span class=\"p\">}),</span>\n    <span class=\"p\">]</span>\n    <span class=\"c1\"># Define edges between components</span>\n    <span class=\"n\">edges</span> <span class=\"o\">+=</span> <span class=\"p\">[</span>\n        <span class=\"c1\"># 1 - 2</span>\n        <span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">21</span><span class=\"p\">,</span> <span class=\"p\">{}),</span>\n        <span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"p\">{}),</span>\n        <span class=\"c1\"># 1 - 3</span>\n        <span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"p\">{}),</span>\n        <span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">NEGTV</span><span class=\"p\">}),</span>\n        <span class=\"p\">(</span><span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"p\">{}),</span>\n        <span class=\"c1\"># 1 - 4</span>\n        <span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">41</span><span class=\"p\">,</span> <span class=\"p\">{}),</span>\n        <span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">42</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">INCMP</span><span class=\"p\">}),</span>\n        <span class=\"p\">(</span><span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">43</span><span class=\"p\">,</span> <span class=\"p\">{}),</span>\n        <span class=\"c1\"># 1 - 5</span>\n        <span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">51</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">INCMP</span><span class=\"p\">}),</span>\n        <span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">52</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">NEGTV</span><span class=\"p\">}),</span>\n        <span class=\"p\">(</span><span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">53</span><span class=\"p\">,</span> <span class=\"p\">{}),</span>\n\n        <span class=\"c1\"># 2 - 3</span>\n        <span class=\"p\">(</span><span class=\"mi\">21</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">INCMP</span><span class=\"p\">}),</span>\n        <span class=\"p\">(</span><span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"p\">{}),</span>\n        <span class=\"c1\"># 2 - 4</span>\n        <span class=\"p\">(</span><span class=\"mi\">21</span><span class=\"p\">,</span> <span class=\"mi\">41</span><span class=\"p\">,</span> <span class=\"p\">{}),</span>\n        <span class=\"p\">(</span><span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"mi\">42</span><span class=\"p\">,</span> <span class=\"p\">{}),</span>\n        <span class=\"c1\"># 2 - 5</span>\n        <span class=\"p\">(</span><span class=\"mi\">21</span><span class=\"p\">,</span> <span class=\"mi\">51</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">INCMP</span><span class=\"p\">}),</span>\n        <span class=\"p\">(</span><span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"mi\">52</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">NEGTV</span><span class=\"p\">}),</span>\n\n        <span class=\"c1\"># 3 - 4</span>\n        <span class=\"p\">(</span><span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"mi\">41</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">NEGTV</span><span class=\"p\">}),</span>\n        <span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">42</span><span class=\"p\">,</span> <span class=\"p\">{}),</span>\n    <span class=\"p\">]</span>\n    <span class=\"c1\"># Ensure that the negative edge comes back as potentially in error</span>\n    <span class=\"c1\"># new_edges = [(2, 5, {&#39;evidence_decision&#39;: POSTV})]</span>\n    <span class=\"n\">new_edges</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">infr1</span><span class=\"p\">,</span> <span class=\"n\">infr2</span><span class=\"p\">,</span> <span class=\"n\">check</span> <span class=\"o\">=</span> <span class=\"n\">do_infr_test</span><span class=\"p\">(</span><span class=\"n\">ccs</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"p\">,</span> <span class=\"n\">new_edges</span><span class=\"p\">)</span>\n    <span class=\"n\">errors</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">d</span> <span class=\"ow\">in</span> <span class=\"n\">infr2</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">u</span> <span class=\"o\">&lt;</span> <span class=\"mi\">20</span> <span class=\"ow\">or</span> <span class=\"n\">v</span> <span class=\"o\">&lt;</span> <span class=\"mi\">20</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">state</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"s1\">&#39;inconsistent&#39;</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">state</span><span class=\"p\">:</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;u, v, state = </span><span class=\"si\">%r</span><span class=\"s1\">, </span><span class=\"si\">%r</span><span class=\"s1\">, </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">))</span>\n                <span class=\"n\">err</span> <span class=\"o\">=</span> <span class=\"ne\">AssertionError</span><span class=\"p\">(</span><span class=\"s1\">&#39;all of cc0 should be incon&#39;</span><span class=\"p\">)</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span>\n                <span class=\"n\">errors</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">state</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"s1\">&#39;inconsistent&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">state</span><span class=\"p\">:</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;u, v, state = </span><span class=\"si\">%r</span><span class=\"s1\">, </span><span class=\"si\">%r</span><span class=\"s1\">, </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">))</span>\n                <span class=\"n\">err</span> <span class=\"o\">=</span> <span class=\"ne\">AssertionError</span><span class=\"p\">(</span><span class=\"s1\">&#39;outside of cc0 should not be incon&#39;</span><span class=\"p\">)</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span>\n                <span class=\"n\">errors</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span>\n    <span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">infr1</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;inconsistent_internal&#39;</span><span class=\"p\">,</span>\n          <span class=\"s1\">&#39;notcomp edge should be incon&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">infr1</span><span class=\"p\">,</span> <span class=\"mi\">21</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">,</span> <span class=\"n\">INCMP</span><span class=\"p\">,</span> <span class=\"s1\">&#39;notcomp edge should remain notcomp&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">infr1</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">&#39;notcomp edge should transfer knowledge&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">infr1</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">42</span><span class=\"p\">,</span> <span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;inconsistent_external&#39;</span><span class=\"p\">,</span>\n          <span class=\"s1\">&#39;inconsistency should override notcomp&#39;</span><span class=\"p\">)</span>\n    <span class=\"c1\"># check(infr1, 1, 4, &#39;maybe_error&#39;, True, &#39;match edge should flag first&#39;)</span>\n    <span class=\"c1\"># check(infr2, 2, 4, &#39;maybe_error&#39;, True, &#39;negative edge should flag second&#39;)</span>\n    <span class=\"c1\"># check(infr2, 1, 4, &#39;maybe_error&#39;, False, &#39;negative edge should flag second&#39;)</span>\n    <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">after</span><span class=\"p\">(</span><span class=\"n\">errors</span><span class=\"p\">)</span></div>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.algo.graph.tests.dyn_cases</span>\n<span class=\"sd\">        python -m ibeis.algo.graph.tests.dyn_cases --allexamples</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">multiprocessing</span>\n    <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">freeze_support</span><span class=\"p\">()</span>  <span class=\"c1\"># for win32</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>  <span class=\"c1\"># NOQA</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">doctest_funcs</span><span class=\"p\">()</span>\n</pre></div>", "current_page_name": "_modules/ibeis/algo/graph/tests/dyn_cases", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}