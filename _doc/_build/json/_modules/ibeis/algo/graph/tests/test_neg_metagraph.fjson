{"parents": [{"link": "../../../../../", "title": "Module code"}, {"link": "../../../../", "title": "ibeis"}, {"link": "../../../", "title": "ibeis.algo"}, {"link": "../../", "title": "ibeis.algo.graph"}], "title": "ibeis.algo.graph.tests.test_neg_metagraph", "body": "<h1>Source code for ibeis.algo.graph.tests.test_neg_metagraph</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">TODO: These tests are good and important to run.</span>\n<span class=\"sd\">Ensure they are run via run_tests even though they are not doctests.</span>\n\n<span class=\"sd\">Consider moving to pytest and using xdoctest (because regular doctest does not</span>\n<span class=\"sd\">accept the syntax of IBEIS doctests)</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n\n\n<div class=\"viewcode-block\" id=\"test_neg_metagraph_simple_add_remove\"><a class=\"viewcode-back\" href=\"../../../../../../ibeis.algo.graph.tests/#ibeis.algo.graph.tests.test_neg_metagraph.test_neg_metagraph_simple_add_remove\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">test_neg_metagraph_simple_add_remove</span><span class=\"p\">():</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Test that the negative metagraph tracks the number of negative edges</span>\n<span class=\"sd\">    between PCCs through non-label-changing operations</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph</span> <span class=\"k\">import</span> <span class=\"n\">demo</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.state</span> <span class=\"k\">import</span> <span class=\"p\">(</span><span class=\"n\">POSTV</span><span class=\"p\">,</span> <span class=\"n\">NEGTV</span><span class=\"p\">,</span> <span class=\"n\">INCMP</span><span class=\"p\">,</span> <span class=\"n\">UNREV</span><span class=\"p\">,</span> <span class=\"n\">UNKWN</span><span class=\"p\">)</span>  <span class=\"c1\"># NOQA</span>\n\n    <span class=\"c1\"># Create a graph with 5-sized CCs, with 3-pos-redun, and no negative edges</span>\n    <span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">demo</span><span class=\"o\">.</span><span class=\"n\">demodata_infr</span><span class=\"p\">(</span><span class=\"n\">num_pccs</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">pcc_size</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">pos_redun</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span>\n                              <span class=\"n\">ignore_pair</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">infer</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">cc_a</span><span class=\"p\">,</span> <span class=\"n\">cc_b</span><span class=\"p\">,</span> <span class=\"n\">cc_c</span><span class=\"p\">,</span> <span class=\"n\">cc_d</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">positive_components</span><span class=\"p\">()</span>\n    <span class=\"n\">a1</span><span class=\"p\">,</span> <span class=\"n\">a2</span><span class=\"p\">,</span> <span class=\"n\">a3</span><span class=\"p\">,</span> <span class=\"n\">a4</span><span class=\"p\">,</span> <span class=\"n\">a5</span> <span class=\"o\">=</span> <span class=\"n\">cc_a</span>\n    <span class=\"n\">b1</span><span class=\"p\">,</span> <span class=\"n\">b2</span><span class=\"p\">,</span> <span class=\"n\">b3</span><span class=\"p\">,</span> <span class=\"n\">b4</span><span class=\"p\">,</span> <span class=\"n\">b5</span> <span class=\"o\">=</span> <span class=\"n\">cc_b</span>\n\n    <span class=\"n\">nmg</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">neg_metagraph</span>\n\n    <span class=\"c1\"># Check there are 4 meta-nodes and no edges</span>\n    <span class=\"k\">assert</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">number_of_edges</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n    <span class=\"k\">assert</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">number_of_nodes</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">4</span>\n\n    <span class=\"c1\"># Should add 1 edge to the negative metagraph</span>\n    <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">a1</span><span class=\"p\">,</span> <span class=\"n\">b1</span>\n    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">((</span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">),</span> <span class=\"n\">NEGTV</span><span class=\"p\">)</span>\n    <span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">nid2</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">node_labels</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">[</span><span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">nid2</span><span class=\"p\">][</span><span class=\"s1\">&#39;weight&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n    <span class=\"k\">assert</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">number_of_edges</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n    <span class=\"k\">assert</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">number_of_nodes</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">4</span>\n\n    <span class=\"c1\"># Adding a second time should do nothing</span>\n    <span class=\"n\">edge</span> <span class=\"o\">=</span> <span class=\"n\">a1</span><span class=\"p\">,</span> <span class=\"n\">b1</span>\n    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">NEGTV</span><span class=\"p\">)</span>\n    <span class=\"n\">name_edge</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">node_labels</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">edge</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">[</span><span class=\"n\">name_edge</span><span class=\"p\">][</span><span class=\"s1\">&#39;weight&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n    <span class=\"k\">assert</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">number_of_edges</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n    <span class=\"k\">assert</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">number_of_nodes</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">4</span>\n\n    <span class=\"c1\"># But adding a second between different nodes will increase the weight</span>\n    <span class=\"n\">edge</span> <span class=\"o\">=</span> <span class=\"n\">a1</span><span class=\"p\">,</span> <span class=\"n\">b2</span>\n    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">NEGTV</span><span class=\"p\">)</span>\n    <span class=\"n\">name_edge</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">node_labels</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">edge</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">[</span><span class=\"n\">name_edge</span><span class=\"p\">][</span><span class=\"s1\">&#39;weight&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n    <span class=\"k\">assert</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">number_of_edges</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n    <span class=\"k\">assert</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">number_of_nodes</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">4</span>\n\n    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">((</span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">),</span> <span class=\"n\">NEGTV</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">[</span><span class=\"n\">name_edge</span><span class=\"p\">][</span><span class=\"s1\">&#39;weight&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n\n    <span class=\"c1\"># Removing or relabeling the edge will decrease the weight</span>\n    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">((</span><span class=\"n\">a1</span><span class=\"p\">,</span> <span class=\"n\">b2</span><span class=\"p\">),</span> <span class=\"n\">INCMP</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">[</span><span class=\"n\">name_edge</span><span class=\"p\">][</span><span class=\"s1\">&#39;weight&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n\n    <span class=\"c1\"># And removing all will remove the negative edge</span>\n    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">((</span><span class=\"n\">a1</span><span class=\"p\">,</span> <span class=\"n\">b1</span><span class=\"p\">),</span> <span class=\"n\">INCMP</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">has_edge</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">name_edge</span><span class=\"p\">)</span>\n\n    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">assert_neg_metagraph</span><span class=\"p\">()</span></div>\n\n\n<div class=\"viewcode-block\" id=\"test_neg_metagraph_merge\"><a class=\"viewcode-back\" href=\"../../../../../../ibeis.algo.graph.tests/#ibeis.algo.graph.tests.test_neg_metagraph.test_neg_metagraph_merge\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">test_neg_metagraph_merge</span><span class=\"p\">():</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Test that the negative metagraph tracks the number of negative edges</span>\n<span class=\"sd\">    between PCCs through label-changing merge operations</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph</span> <span class=\"k\">import</span> <span class=\"n\">demo</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.state</span> <span class=\"k\">import</span> <span class=\"p\">(</span><span class=\"n\">POSTV</span><span class=\"p\">,</span> <span class=\"n\">NEGTV</span><span class=\"p\">,</span> <span class=\"n\">INCMP</span><span class=\"p\">,</span> <span class=\"n\">UNREV</span><span class=\"p\">,</span> <span class=\"n\">UNKWN</span><span class=\"p\">)</span>  <span class=\"c1\"># NOQA</span>\n    <span class=\"c1\"># Create a graph with 4 CCs, with 3-pos-redun, and no negative edges</span>\n    <span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">demo</span><span class=\"o\">.</span><span class=\"n\">demodata_infr</span><span class=\"p\">(</span><span class=\"n\">num_pccs</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">pcc_size</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">pos_redun</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span>\n                              <span class=\"n\">ignore_pair</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">infer</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">cc_a</span><span class=\"p\">,</span> <span class=\"n\">cc_b</span><span class=\"p\">,</span> <span class=\"n\">cc_c</span><span class=\"p\">,</span> <span class=\"n\">cc_d</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">positive_components</span><span class=\"p\">()</span>\n    <span class=\"n\">a1</span><span class=\"p\">,</span> <span class=\"n\">a2</span><span class=\"p\">,</span> <span class=\"n\">a3</span><span class=\"p\">,</span> <span class=\"n\">a4</span><span class=\"p\">,</span> <span class=\"n\">a5</span> <span class=\"o\">=</span> <span class=\"n\">cc_a</span>\n    <span class=\"n\">b1</span><span class=\"p\">,</span> <span class=\"n\">b2</span><span class=\"p\">,</span> <span class=\"n\">b3</span><span class=\"p\">,</span> <span class=\"n\">b4</span><span class=\"p\">,</span> <span class=\"n\">b5</span> <span class=\"o\">=</span> <span class=\"n\">cc_b</span>\n    <span class=\"n\">c1</span><span class=\"p\">,</span> <span class=\"n\">c2</span><span class=\"p\">,</span> <span class=\"n\">c3</span><span class=\"p\">,</span> <span class=\"n\">c4</span><span class=\"p\">,</span> <span class=\"n\">c5</span> <span class=\"o\">=</span> <span class=\"n\">cc_c</span>\n    <span class=\"n\">d1</span><span class=\"p\">,</span> <span class=\"n\">d2</span><span class=\"p\">,</span> <span class=\"n\">d3</span><span class=\"p\">,</span> <span class=\"n\">d4</span><span class=\"p\">,</span> <span class=\"n\">d5</span> <span class=\"o\">=</span> <span class=\"n\">cc_d</span>\n\n    <span class=\"n\">nmg</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">neg_metagraph</span>\n\n    <span class=\"c1\"># Add three negative edges between a and b</span>\n    <span class=\"c1\"># one between (a, c), (b, d), (a, d), and (c, d)</span>\n    <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"n\">D</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">node_labels</span><span class=\"p\">(</span><span class=\"n\">a1</span><span class=\"p\">,</span> <span class=\"n\">b1</span><span class=\"p\">,</span> <span class=\"n\">c1</span><span class=\"p\">,</span> <span class=\"n\">d1</span><span class=\"p\">)</span>\n\n    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">((</span><span class=\"n\">a1</span><span class=\"p\">,</span> <span class=\"n\">b1</span><span class=\"p\">),</span> <span class=\"n\">NEGTV</span><span class=\"p\">)</span>\n    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">((</span><span class=\"n\">a2</span><span class=\"p\">,</span> <span class=\"n\">b2</span><span class=\"p\">),</span> <span class=\"n\">NEGTV</span><span class=\"p\">)</span>\n    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">((</span><span class=\"n\">a3</span><span class=\"p\">,</span> <span class=\"n\">b3</span><span class=\"p\">),</span> <span class=\"n\">NEGTV</span><span class=\"p\">)</span>\n    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">((</span><span class=\"n\">a4</span><span class=\"p\">,</span> <span class=\"n\">c4</span><span class=\"p\">),</span> <span class=\"n\">NEGTV</span><span class=\"p\">)</span>\n    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">((</span><span class=\"n\">b4</span><span class=\"p\">,</span> <span class=\"n\">d4</span><span class=\"p\">),</span> <span class=\"n\">NEGTV</span><span class=\"p\">)</span>\n    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">((</span><span class=\"n\">c1</span><span class=\"p\">,</span> <span class=\"n\">d1</span><span class=\"p\">),</span> <span class=\"n\">NEGTV</span><span class=\"p\">)</span>\n    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">((</span><span class=\"n\">a4</span><span class=\"p\">,</span> <span class=\"n\">d4</span><span class=\"p\">),</span> <span class=\"n\">NEGTV</span><span class=\"p\">)</span>\n\n    <span class=\"k\">assert</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">[(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">)][</span><span class=\"s1\">&#39;weight&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>\n    <span class=\"k\">assert</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">[(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">C</span><span class=\"p\">)][</span><span class=\"s1\">&#39;weight&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n    <span class=\"k\">assert</span> <span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">C</span><span class=\"p\">)</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">edges</span>\n    <span class=\"k\">assert</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">[(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">D</span><span class=\"p\">)][</span><span class=\"s1\">&#39;weight&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n    <span class=\"k\">assert</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">[(</span><span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">D</span><span class=\"p\">)][</span><span class=\"s1\">&#39;weight&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n    <span class=\"k\">assert</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">number_of_edges</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">5</span>\n    <span class=\"k\">assert</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">number_of_nodes</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">4</span>\n\n    <span class=\"c1\"># Now merge A and B</span>\n    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">((</span><span class=\"n\">a1</span><span class=\"p\">,</span> <span class=\"n\">b1</span><span class=\"p\">),</span> <span class=\"n\">POSTV</span><span class=\"p\">)</span>\n    <span class=\"n\">AB</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">node_label</span><span class=\"p\">(</span><span class=\"n\">a1</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># The old meta-nodes should not be combined into AB</span>\n    <span class=\"k\">assert</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">node_label</span><span class=\"p\">(</span><span class=\"n\">b1</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">AB</span>\n    <span class=\"k\">assert</span> <span class=\"n\">A</span> <span class=\"o\">!=</span> <span class=\"n\">B</span>\n    <span class=\"k\">assert</span> <span class=\"n\">A</span> <span class=\"o\">==</span> <span class=\"n\">AB</span> <span class=\"ow\">or</span> <span class=\"n\">A</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">nodes</span>\n    <span class=\"k\">assert</span> <span class=\"n\">B</span> <span class=\"o\">==</span> <span class=\"n\">AB</span> <span class=\"ow\">or</span> <span class=\"n\">B</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">nodes</span>\n\n    <span class=\"c1\"># Should have combined weights from (A, D) and (B, D)</span>\n    <span class=\"c1\"># And (A, C) should be brought over as-is</span>\n    <span class=\"k\">assert</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">[(</span><span class=\"n\">AB</span><span class=\"p\">,</span> <span class=\"n\">D</span><span class=\"p\">)][</span><span class=\"s1\">&#39;weight&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n    <span class=\"k\">assert</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">[(</span><span class=\"n\">AB</span><span class=\"p\">,</span> <span class=\"n\">C</span><span class=\"p\">)][</span><span class=\"s1\">&#39;weight&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n\n    <span class=\"c1\"># should not have a self-loop weight weight 2</span>\n    <span class=\"c1\"># (it decreased because we changed a previously neg edge to pos)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">[(</span><span class=\"n\">AB</span><span class=\"p\">,</span> <span class=\"n\">AB</span><span class=\"p\">)][</span><span class=\"s1\">&#39;weight&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">selfloop_edges</span><span class=\"p\">()))</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n\n    <span class=\"c1\"># nothing should change between C and D</span>\n    <span class=\"k\">assert</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">[(</span><span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"n\">D</span><span class=\"p\">)][</span><span class=\"s1\">&#39;weight&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n\n    <span class=\"c1\"># Should decrease number of nodes and edges</span>\n    <span class=\"k\">assert</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">number_of_nodes</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>\n    <span class=\"k\">assert</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">number_of_edges</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">4</span>\n\n    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">assert_neg_metagraph</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># Additional merge</span>\n    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">((</span><span class=\"n\">c2</span><span class=\"p\">,</span> <span class=\"n\">d2</span><span class=\"p\">),</span> <span class=\"n\">POSTV</span><span class=\"p\">)</span>\n    <span class=\"n\">CD</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">node_label</span><span class=\"p\">(</span><span class=\"n\">c1</span><span class=\"p\">)</span>\n    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">assert_neg_metagraph</span><span class=\"p\">()</span>\n\n    <span class=\"k\">assert</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">number_of_nodes</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n    <span class=\"k\">assert</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">number_of_edges</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>\n\n    <span class=\"k\">assert</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">[(</span><span class=\"n\">CD</span><span class=\"p\">,</span> <span class=\"n\">CD</span><span class=\"p\">)][</span><span class=\"s1\">&#39;weight&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n    <span class=\"k\">assert</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">[(</span><span class=\"n\">AB</span><span class=\"p\">,</span> <span class=\"n\">CD</span><span class=\"p\">)][</span><span class=\"s1\">&#39;weight&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>\n    <span class=\"k\">assert</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">[(</span><span class=\"n\">AB</span><span class=\"p\">,</span> <span class=\"n\">AB</span><span class=\"p\">)][</span><span class=\"s1\">&#39;weight&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n\n    <span class=\"c1\"># Yet another merge</span>\n    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">((</span><span class=\"n\">a1</span><span class=\"p\">,</span> <span class=\"n\">c1</span><span class=\"p\">),</span> <span class=\"n\">POSTV</span><span class=\"p\">)</span>\n    <span class=\"n\">ABCD</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">node_label</span><span class=\"p\">(</span><span class=\"n\">c1</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">number_of_nodes</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n    <span class=\"k\">assert</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">number_of_edges</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n    <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">[(</span><span class=\"n\">ABCD</span><span class=\"p\">,</span> <span class=\"n\">ABCD</span><span class=\"p\">)][</span><span class=\"s1\">&#39;weight&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">6</span>\n    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">assert_neg_metagraph</span><span class=\"p\">()</span></div>\n\n\n<div class=\"viewcode-block\" id=\"test_neg_metagraph_split_neg\"><a class=\"viewcode-back\" href=\"../../../../../../ibeis.algo.graph.tests/#ibeis.algo.graph.tests.test_neg_metagraph.test_neg_metagraph_split_neg\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">test_neg_metagraph_split_neg</span><span class=\"p\">():</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Test that the negative metagraph tracks the number of negative edges</span>\n<span class=\"sd\">    between PCCs through label-changing split operations</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph</span> <span class=\"k\">import</span> <span class=\"n\">demo</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.state</span> <span class=\"k\">import</span> <span class=\"p\">(</span><span class=\"n\">POSTV</span><span class=\"p\">,</span> <span class=\"n\">NEGTV</span><span class=\"p\">,</span> <span class=\"n\">INCMP</span><span class=\"p\">,</span> <span class=\"n\">UNREV</span><span class=\"p\">,</span> <span class=\"n\">UNKWN</span><span class=\"p\">)</span>  <span class=\"c1\"># NOQA</span>\n    <span class=\"c1\"># Create a graph with 4 CCs, with 3-pos-redun, and no negative edges</span>\n    <span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">demo</span><span class=\"o\">.</span><span class=\"n\">demodata_infr</span><span class=\"p\">(</span><span class=\"n\">num_pccs</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">pcc_size</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">pos_redun</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span>\n                              <span class=\"n\">ignore_pair</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">infer</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">nmg</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">neg_metagraph</span>\n    <span class=\"k\">assert</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">number_of_nodes</span><span class=\"p\">()</span> <span class=\"o\">!=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">neg_graph</span><span class=\"o\">.</span><span class=\"n\">number_of_nodes</span><span class=\"p\">()</span>\n    <span class=\"k\">assert</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">number_of_edges</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n    <span class=\"c1\"># remove all positive edges</span>\n    <span class=\"k\">for</span> <span class=\"n\">edge</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">()):</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">NEGTV</span><span class=\"p\">)</span>\n    <span class=\"c1\"># metagraph should not be isomorphic to infr.neg_graph</span>\n    <span class=\"k\">assert</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">number_of_nodes</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">neg_graph</span><span class=\"o\">.</span><span class=\"n\">number_of_nodes</span><span class=\"p\">()</span>\n    <span class=\"k\">assert</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">number_of_edges</span><span class=\"p\">()</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span>\n    <span class=\"k\">assert</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">number_of_edges</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">neg_graph</span><span class=\"o\">.</span><span class=\"n\">number_of_edges</span><span class=\"p\">()</span>\n    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">assert_neg_metagraph</span><span class=\"p\">()</span></div>\n\n\n<div class=\"viewcode-block\" id=\"test_neg_metagraph_split_incomp\"><a class=\"viewcode-back\" href=\"../../../../../../ibeis.algo.graph.tests/#ibeis.algo.graph.tests.test_neg_metagraph.test_neg_metagraph_split_incomp\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">test_neg_metagraph_split_incomp</span><span class=\"p\">():</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph</span> <span class=\"k\">import</span> <span class=\"n\">demo</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.state</span> <span class=\"k\">import</span> <span class=\"p\">(</span><span class=\"n\">POSTV</span><span class=\"p\">,</span> <span class=\"n\">NEGTV</span><span class=\"p\">,</span> <span class=\"n\">INCMP</span><span class=\"p\">,</span> <span class=\"n\">UNREV</span><span class=\"p\">,</span> <span class=\"n\">UNKWN</span><span class=\"p\">)</span>  <span class=\"c1\"># NOQA</span>\n    <span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">demo</span><span class=\"o\">.</span><span class=\"n\">demodata_infr</span><span class=\"p\">(</span><span class=\"n\">num_pccs</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">pcc_size</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">pos_redun</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span>\n                              <span class=\"n\">ignore_pair</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">infer</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">nmg</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">neg_metagraph</span>\n    <span class=\"k\">assert</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">number_of_nodes</span><span class=\"p\">()</span> <span class=\"o\">&lt;</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">neg_graph</span><span class=\"o\">.</span><span class=\"n\">number_of_nodes</span><span class=\"p\">()</span>\n    <span class=\"k\">assert</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">number_of_edges</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n    <span class=\"c1\"># remove all positive edges</span>\n    <span class=\"k\">for</span> <span class=\"n\">edge</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">()):</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">INCMP</span><span class=\"p\">)</span>\n    <span class=\"c1\"># metagraph should not be isomorphic to infr.neg_graph</span>\n    <span class=\"k\">assert</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">number_of_nodes</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">neg_graph</span><span class=\"o\">.</span><span class=\"n\">number_of_nodes</span><span class=\"p\">()</span>\n    <span class=\"k\">assert</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">number_of_edges</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">assert_neg_metagraph</span><span class=\"p\">()</span></div>\n\n\n<div class=\"viewcode-block\" id=\"test_neg_metagraph_split_and_merge\"><a class=\"viewcode-back\" href=\"../../../../../../ibeis.algo.graph.tests/#ibeis.algo.graph.tests.test_neg_metagraph.test_neg_metagraph_split_and_merge\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">test_neg_metagraph_split_and_merge</span><span class=\"p\">():</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Test that the negative metagraph tracks the number of negative edges</span>\n<span class=\"sd\">    between PCCs through label-changing split and merge operations</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph</span> <span class=\"k\">import</span> <span class=\"n\">demo</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.state</span> <span class=\"k\">import</span> <span class=\"p\">(</span><span class=\"n\">POSTV</span><span class=\"p\">,</span> <span class=\"n\">NEGTV</span><span class=\"p\">,</span> <span class=\"n\">INCMP</span><span class=\"p\">,</span> <span class=\"n\">UNREV</span><span class=\"p\">,</span> <span class=\"n\">UNKWN</span><span class=\"p\">)</span>  <span class=\"c1\"># NOQA</span>\n    <span class=\"c1\"># Create a graph with 4 CCs, with 3-pos-redun, and no negative edges</span>\n    <span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">demo</span><span class=\"o\">.</span><span class=\"n\">demodata_infr</span><span class=\"p\">(</span><span class=\"n\">num_pccs</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">pcc_size</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">pos_redun</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span>\n                              <span class=\"n\">ignore_pair</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">infer</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">cc_a</span><span class=\"p\">,</span> <span class=\"n\">cc_b</span><span class=\"p\">,</span> <span class=\"n\">cc_c</span><span class=\"p\">,</span> <span class=\"n\">cc_d</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">positive_components</span><span class=\"p\">()</span>\n    <span class=\"n\">a1</span><span class=\"p\">,</span> <span class=\"n\">a2</span><span class=\"p\">,</span> <span class=\"n\">a3</span><span class=\"p\">,</span> <span class=\"n\">a4</span><span class=\"p\">,</span> <span class=\"n\">a5</span> <span class=\"o\">=</span> <span class=\"n\">cc_a</span>\n    <span class=\"n\">b1</span><span class=\"p\">,</span> <span class=\"n\">b2</span><span class=\"p\">,</span> <span class=\"n\">b3</span><span class=\"p\">,</span> <span class=\"n\">b4</span><span class=\"p\">,</span> <span class=\"n\">b5</span> <span class=\"o\">=</span> <span class=\"n\">cc_b</span>\n    <span class=\"n\">c1</span><span class=\"p\">,</span> <span class=\"n\">c2</span><span class=\"p\">,</span> <span class=\"n\">c3</span><span class=\"p\">,</span> <span class=\"n\">c4</span><span class=\"p\">,</span> <span class=\"n\">c5</span> <span class=\"o\">=</span> <span class=\"n\">cc_c</span>\n    <span class=\"n\">d1</span><span class=\"p\">,</span> <span class=\"n\">d2</span><span class=\"p\">,</span> <span class=\"n\">d3</span><span class=\"p\">,</span> <span class=\"n\">d4</span><span class=\"p\">,</span> <span class=\"n\">d5</span> <span class=\"o\">=</span> <span class=\"n\">cc_d</span>\n\n    <span class=\"n\">nmg</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">neg_metagraph</span>\n\n    <span class=\"c1\"># Add three negative edges between a and b</span>\n    <span class=\"c1\"># one between (a, c), (b, d), (a, d), and (c, d)</span>\n    <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"n\">D</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">node_labels</span><span class=\"p\">(</span><span class=\"n\">a1</span><span class=\"p\">,</span> <span class=\"n\">b1</span><span class=\"p\">,</span> <span class=\"n\">c1</span><span class=\"p\">,</span> <span class=\"n\">d1</span><span class=\"p\">)</span>\n\n    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">((</span><span class=\"n\">a1</span><span class=\"p\">,</span> <span class=\"n\">b1</span><span class=\"p\">),</span> <span class=\"n\">NEGTV</span><span class=\"p\">)</span>\n    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">((</span><span class=\"n\">a2</span><span class=\"p\">,</span> <span class=\"n\">b2</span><span class=\"p\">),</span> <span class=\"n\">NEGTV</span><span class=\"p\">)</span>\n    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">((</span><span class=\"n\">a3</span><span class=\"p\">,</span> <span class=\"n\">b3</span><span class=\"p\">),</span> <span class=\"n\">NEGTV</span><span class=\"p\">)</span>\n    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">((</span><span class=\"n\">a4</span><span class=\"p\">,</span> <span class=\"n\">c4</span><span class=\"p\">),</span> <span class=\"n\">NEGTV</span><span class=\"p\">)</span>\n    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">((</span><span class=\"n\">b4</span><span class=\"p\">,</span> <span class=\"n\">d4</span><span class=\"p\">),</span> <span class=\"n\">NEGTV</span><span class=\"p\">)</span>\n    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">((</span><span class=\"n\">c1</span><span class=\"p\">,</span> <span class=\"n\">d1</span><span class=\"p\">),</span> <span class=\"n\">NEGTV</span><span class=\"p\">)</span>\n    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">((</span><span class=\"n\">a4</span><span class=\"p\">,</span> <span class=\"n\">d4</span><span class=\"p\">),</span> <span class=\"n\">NEGTV</span><span class=\"p\">)</span>\n\n    <span class=\"k\">assert</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">[(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">)][</span><span class=\"s1\">&#39;weight&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>\n    <span class=\"k\">assert</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">[(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">C</span><span class=\"p\">)][</span><span class=\"s1\">&#39;weight&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n    <span class=\"k\">assert</span> <span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">C</span><span class=\"p\">)</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">edges</span>\n    <span class=\"k\">assert</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">[(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">D</span><span class=\"p\">)][</span><span class=\"s1\">&#39;weight&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n    <span class=\"k\">assert</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">[(</span><span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">D</span><span class=\"p\">)][</span><span class=\"s1\">&#39;weight&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n    <span class=\"k\">assert</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">number_of_edges</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">5</span>\n    <span class=\"k\">assert</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">number_of_nodes</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">4</span>\n\n    <span class=\"c1\"># merge A and B</span>\n    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">((</span><span class=\"n\">a1</span><span class=\"p\">,</span> <span class=\"n\">b1</span><span class=\"p\">),</span> <span class=\"n\">POSTV</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">number_of_edges</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">4</span>\n    <span class=\"k\">assert</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">number_of_nodes</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>\n    <span class=\"n\">AB</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">node_label</span><span class=\"p\">(</span><span class=\"n\">a1</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">[(</span><span class=\"n\">AB</span><span class=\"p\">,</span> <span class=\"n\">AB</span><span class=\"p\">)][</span><span class=\"s1\">&#39;weight&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n\n    <span class=\"c1\"># split A and B</span>\n    <span class=\"c1\"># the number of nodes should increase, but the edges should stay the</span>\n    <span class=\"c1\"># same because we added an incmp edge</span>\n    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">((</span><span class=\"n\">a1</span><span class=\"p\">,</span> <span class=\"n\">b1</span><span class=\"p\">),</span> <span class=\"n\">INCMP</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">number_of_edges</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">5</span>\n    <span class=\"k\">assert</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">number_of_nodes</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">4</span>\n    <span class=\"k\">assert</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">[(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">)][</span><span class=\"s1\">&#39;weight&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">assert_neg_metagraph</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># remove all positive edges</span>\n    <span class=\"k\">for</span> <span class=\"n\">edge</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">()):</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">INCMP</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># metagraph should not be isomorphic to infr.neg_graph</span>\n    <span class=\"k\">assert</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">number_of_nodes</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">neg_graph</span><span class=\"o\">.</span><span class=\"n\">number_of_nodes</span><span class=\"p\">()</span>\n    <span class=\"k\">assert</span> <span class=\"n\">nmg</span><span class=\"o\">.</span><span class=\"n\">number_of_edges</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">neg_graph</span><span class=\"o\">.</span><span class=\"n\">number_of_edges</span><span class=\"p\">()</span>\n    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">assert_neg_metagraph</span><span class=\"p\">()</span></div>\n</pre></div>", "current_page_name": "_modules/ibeis/algo/graph/tests/test_neg_metagraph", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}