{"parents": [{"link": "../../../../", "title": "Module code"}, {"link": "../../../", "title": "ibeis"}, {"link": "../../", "title": "ibeis.algo"}, {"link": "../", "title": "ibeis.algo.graph"}], "title": "ibeis.algo.graph.mixin_groundtruth", "body": "<h1>Source code for ibeis.algo.graph.mixin_groundtruth</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"k\">import</span> <span class=\"n\">absolute_import</span><span class=\"p\">,</span> <span class=\"n\">division</span><span class=\"p\">,</span> <span class=\"n\">print_function</span><span class=\"p\">,</span> <span class=\"n\">unicode_literals</span>\n<span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">vtool</span> <span class=\"k\">as</span> <span class=\"nn\">vt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.nx_utils</span> <span class=\"k\">import</span> <span class=\"n\">ensure_multi_index</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.state</span> <span class=\"k\">import</span> <span class=\"n\">POSTV</span><span class=\"p\">,</span> <span class=\"n\">NEGTV</span><span class=\"p\">,</span> <span class=\"n\">INCMP</span>\n<span class=\"nb\">print</span><span class=\"p\">,</span> <span class=\"n\">rrr</span><span class=\"p\">,</span> <span class=\"n\">profile</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">inject2</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"Groundtruth\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.mixin_groundtruth.Groundtruth\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Groundtruth</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n<div class=\"viewcode-block\" id=\"Groundtruth.is_comparable\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.mixin_groundtruth.Groundtruth.is_comparable\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">is_comparable</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">aid_pairs</span><span class=\"p\">,</span> <span class=\"n\">allow_guess</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Guesses by default when real comparable information is not available.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">ibs</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">ibeis_is_comparable</span><span class=\"p\">(</span><span class=\"n\">aid_pairs</span><span class=\"p\">,</span> <span class=\"n\">allow_guess</span><span class=\"p\">)</span>\n        <span class=\"n\">is_comp</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">gen_edge_values</span><span class=\"p\">(</span><span class=\"s1\">&#39;gt_comparable&#39;</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"o\">=</span><span class=\"n\">aid_pairs</span><span class=\"p\">,</span>\n                                            <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                                            <span class=\"n\">on_missing</span><span class=\"o\">=</span><span class=\"s1\">&#39;default&#39;</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">is_comp</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Groundtruth.is_photobomb\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.mixin_groundtruth.Groundtruth.is_photobomb\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">is_photobomb</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">aid_pairs</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">ibs</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">ibeis_is_photobomb</span><span class=\"p\">(</span><span class=\"n\">aid_pairs</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"kc\">False</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aid_pairs</span><span class=\"p\">))</span></div>\n\n<div class=\"viewcode-block\" id=\"Groundtruth.is_same\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.mixin_groundtruth.Groundtruth.is_same\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">is_same</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">aid_pairs</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">ibs</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">ibeis_is_same</span><span class=\"p\">(</span><span class=\"n\">aid_pairs</span><span class=\"p\">)</span>\n        <span class=\"n\">node_dict</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">nx_node_dict</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"p\">)</span>\n        <span class=\"n\">nid1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">node_dict</span><span class=\"p\">[</span><span class=\"n\">n1</span><span class=\"p\">][</span><span class=\"s1\">&#39;orig_name_label&#39;</span><span class=\"p\">]</span>\n                <span class=\"k\">for</span> <span class=\"n\">n1</span><span class=\"p\">,</span> <span class=\"n\">n2</span> <span class=\"ow\">in</span> <span class=\"n\">aid_pairs</span><span class=\"p\">]</span>\n        <span class=\"n\">nid2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">node_dict</span><span class=\"p\">[</span><span class=\"n\">n2</span><span class=\"p\">][</span><span class=\"s1\">&#39;orig_name_label&#39;</span><span class=\"p\">]</span>\n                <span class=\"k\">for</span> <span class=\"n\">n1</span><span class=\"p\">,</span> <span class=\"n\">n2</span> <span class=\"ow\">in</span> <span class=\"n\">aid_pairs</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">equal</span><span class=\"p\">(</span><span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">nid2</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Groundtruth.apply_edge_truth\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.mixin_groundtruth.Groundtruth.apply_edge_truth\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">apply_edge_truth</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">edges</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">())</span>\n        <span class=\"n\">edge_truth_df</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">match_state_df</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">)</span>\n        <span class=\"n\">edge_truth</span> <span class=\"o\">=</span> <span class=\"n\">edge_truth_df</span><span class=\"o\">.</span><span class=\"n\">idxmax</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">()</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">set_edge_attrs</span><span class=\"p\">(</span><span class=\"s1\">&#39;truth&#39;</span><span class=\"p\">,</span> <span class=\"n\">edge_truth</span><span class=\"p\">)</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">edge_truth</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">edge_truth</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Groundtruth.match_state_df\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.mixin_groundtruth.Groundtruth.match_state_df\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">match_state_df</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot; Returns groundtruth state based on ibeis controller &quot;&quot;&quot;</span>\n        <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">ensure_multi_index</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s1\">&#39;aid1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;aid2&#39;</span><span class=\"p\">))</span>\n        <span class=\"n\">aid_pairs</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">asarray</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">tolist</span><span class=\"p\">())</span>\n        <span class=\"n\">aid_pairs</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">ensure_shape</span><span class=\"p\">(</span><span class=\"n\">aid_pairs</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n        <span class=\"n\">is_same</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">is_same</span><span class=\"p\">(</span><span class=\"n\">aid_pairs</span><span class=\"p\">)</span>\n        <span class=\"n\">is_comp</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">is_comparable</span><span class=\"p\">(</span><span class=\"n\">aid_pairs</span><span class=\"p\">)</span>\n        <span class=\"n\">match_state_df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"o\">.</span><span class=\"n\">from_items</span><span class=\"p\">([</span>\n            <span class=\"p\">(</span><span class=\"n\">NEGTV</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">is_same</span> <span class=\"o\">&amp;</span> <span class=\"n\">is_comp</span><span class=\"p\">),</span>\n            <span class=\"p\">(</span><span class=\"n\">POSTV</span><span class=\"p\">,</span>  <span class=\"n\">is_same</span> <span class=\"o\">&amp;</span> <span class=\"n\">is_comp</span><span class=\"p\">),</span>\n            <span class=\"p\">(</span><span class=\"n\">INCMP</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">is_comp</span><span class=\"p\">),</span>\n        <span class=\"p\">])</span>\n        <span class=\"n\">match_state_df</span><span class=\"o\">.</span><span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">index</span>\n        <span class=\"k\">return</span> <span class=\"n\">match_state_df</span></div>\n\n<div class=\"viewcode-block\" id=\"Groundtruth.match_state_gt\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.mixin_groundtruth.Groundtruth.match_state_gt\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">match_state_gt</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">edge</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">edge</span> <span class=\"ow\">in</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">edge_truth</span><span class=\"p\">:</span>\n            <span class=\"n\">truth</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">edge_truth</span><span class=\"p\">[</span><span class=\"n\">edge</span><span class=\"p\">]</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"s1\">&#39;dummy_verif&#39;</span><span class=\"p\">):</span>\n            <span class=\"n\">truth</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">dummy_verif</span><span class=\"o\">.</span><span class=\"n\">_get_truth</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">aid_pairs</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">asarray</span><span class=\"p\">([</span><span class=\"n\">edge</span><span class=\"p\">])</span>\n            <span class=\"n\">is_same</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">is_same</span><span class=\"p\">(</span><span class=\"n\">aid_pairs</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"n\">is_comp</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">is_comparable</span><span class=\"p\">(</span><span class=\"n\">aid_pairs</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"n\">match_state</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">([</span>\n                <span class=\"p\">(</span><span class=\"n\">NEGTV</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">is_same</span> <span class=\"o\">&amp;</span> <span class=\"n\">is_comp</span><span class=\"p\">),</span>\n                <span class=\"p\">(</span><span class=\"n\">POSTV</span><span class=\"p\">,</span>  <span class=\"n\">is_same</span> <span class=\"o\">&amp;</span> <span class=\"n\">is_comp</span><span class=\"p\">),</span>\n                <span class=\"p\">(</span><span class=\"n\">INCMP</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">is_comp</span><span class=\"p\">),</span>\n            <span class=\"p\">]))</span>\n            <span class=\"n\">truth</span> <span class=\"o\">=</span> <span class=\"n\">match_state</span><span class=\"o\">.</span><span class=\"n\">idxmax</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">truth</span></div>\n\n<div class=\"viewcode-block\" id=\"Groundtruth.edge_attr_df\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.mixin_groundtruth.Groundtruth.edge_attr_df\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">edge_attr_df</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">NoParam</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot; constructs DataFrame using current predictions &quot;&quot;&quot;</span>\n        <span class=\"n\">edge_states</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">gen_edge_attrs</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"o\">=</span><span class=\"n\">edges</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">default</span><span class=\"p\">)</span>\n        <span class=\"n\">edge_states</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">edge_states</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">,</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">MultiIndex</span><span class=\"p\">):</span>\n            <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">edges</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">edges</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">edges_</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take_column</span><span class=\"p\">(</span><span class=\"n\">edge_states</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">edges_</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">lmap</span><span class=\"p\">(</span><span class=\"nb\">tuple</span><span class=\"p\">,</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">aslist</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">))</span>\n            <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">MultiIndex</span><span class=\"o\">.</span><span class=\"n\">from_tuples</span><span class=\"p\">(</span><span class=\"n\">edges_</span><span class=\"p\">,</span> <span class=\"n\">names</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;aid1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;aid2&#39;</span><span class=\"p\">))</span>\n        <span class=\"n\">records</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">itake_column</span><span class=\"p\">(</span><span class=\"n\">edge_states</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">edge_df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"o\">.</span><span class=\"n\">from_array</span><span class=\"p\">(</span><span class=\"n\">records</span><span class=\"p\">)</span>\n        <span class=\"n\">edge_df</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">key</span>\n        <span class=\"n\">edge_df</span><span class=\"o\">.</span><span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">index</span>\n        <span class=\"k\">return</span> <span class=\"n\">edge_df</span></div></div>\n</pre></div>", "current_page_name": "_modules/ibeis/algo/graph/mixin_groundtruth", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}