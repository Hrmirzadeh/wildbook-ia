{"parents": [{"link": "../../../../", "title": "Module code"}, {"link": "../../../", "title": "ibeis"}, {"link": "../../", "title": "ibeis.algo"}, {"link": "../", "title": "ibeis.algo.graph"}], "title": "ibeis.algo.graph.core", "body": "<h1>Source code for ibeis.algo.graph.core</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"k\">import</span> <span class=\"n\">absolute_import</span><span class=\"p\">,</span> <span class=\"n\">division</span><span class=\"p\">,</span> <span class=\"n\">print_function</span><span class=\"p\">,</span> <span class=\"n\">unicode_literals</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n<span class=\"c1\"># import logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">itertools</span> <span class=\"k\">as</span> <span class=\"nn\">it</span>\n<span class=\"kn\">import</span> <span class=\"nn\">copy</span>\n<span class=\"kn\">import</span> <span class=\"nn\">six</span>\n<span class=\"kn\">import</span> <span class=\"nn\">collections</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis</span> <span class=\"k\">import</span> <span class=\"n\">constants</span> <span class=\"k\">as</span> <span class=\"n\">const</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph</span> <span class=\"k\">import</span> <span class=\"n\">nx_dynamic_graph</span>\n<span class=\"c1\"># from ibeis.algo.graph import _dep_mixins</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph</span> <span class=\"k\">import</span> <span class=\"n\">mixin_viz</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph</span> <span class=\"k\">import</span> <span class=\"n\">mixin_helpers</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph</span> <span class=\"k\">import</span> <span class=\"n\">mixin_dynamic</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph</span> <span class=\"k\">import</span> <span class=\"n\">mixin_priority</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph</span> <span class=\"k\">import</span> <span class=\"n\">mixin_loops</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph</span> <span class=\"k\">import</span> <span class=\"n\">mixin_matching</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph</span> <span class=\"k\">import</span> <span class=\"n\">mixin_groundtruth</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph</span> <span class=\"k\">import</span> <span class=\"n\">mixin_simulation</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph</span> <span class=\"k\">import</span> <span class=\"n\">mixin_ibeis</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph</span> <span class=\"k\">import</span> <span class=\"n\">nx_utils</span> <span class=\"k\">as</span> <span class=\"n\">nxu</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.state</span> <span class=\"k\">import</span> <span class=\"n\">POSTV</span><span class=\"p\">,</span> <span class=\"n\">NEGTV</span><span class=\"p\">,</span> <span class=\"n\">INCMP</span><span class=\"p\">,</span> <span class=\"n\">UNREV</span><span class=\"p\">,</span> <span class=\"n\">UNKWN</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.state</span> <span class=\"k\">import</span> <span class=\"n\">UNINFERABLE</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.state</span> <span class=\"k\">import</span> <span class=\"n\">SAME</span><span class=\"p\">,</span> <span class=\"n\">DIFF</span><span class=\"p\">,</span> <span class=\"n\">NULL</span>\n<span class=\"kn\">import</span> <span class=\"nn\">networkx</span> <span class=\"k\">as</span> <span class=\"nn\">nx</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"nb\">print</span><span class=\"p\">,</span> <span class=\"n\">rrr</span><span class=\"p\">,</span> <span class=\"n\">profile</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">inject2</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">DEBUG_CC</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"c1\"># DEBUG_CC = True</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_rectify_decision</span><span class=\"p\">(</span><span class=\"n\">evidence_decision</span><span class=\"p\">,</span> <span class=\"n\">meta_decision</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    If evidence decision is not explicitly set, then meta decision is used to</span>\n<span class=\"sd\">    make a guess. Raises a ValueError if decisions are in incompatible states.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\"># Default to the decision based on the media evidence</span>\n    <span class=\"n\">decision</span> <span class=\"o\">=</span> <span class=\"n\">evidence_decision</span>\n    <span class=\"c1\"># Overwrite the graph decision with the meta decision if necessary</span>\n    <span class=\"k\">if</span> <span class=\"n\">meta_decision</span> <span class=\"o\">==</span> <span class=\"n\">SAME</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">decision</span> <span class=\"ow\">in</span> <span class=\"n\">UNINFERABLE</span><span class=\"p\">:</span>\n            <span class=\"n\">decision</span> <span class=\"o\">=</span> <span class=\"n\">POSTV</span>\n        <span class=\"k\">elif</span> <span class=\"n\">decision</span> <span class=\"o\">==</span> <span class=\"n\">NEGTV</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s1\">&#39;evidence=negative and meta=same&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">meta_decision</span> <span class=\"o\">==</span> <span class=\"n\">DIFF</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">decision</span> <span class=\"ow\">in</span> <span class=\"n\">UNINFERABLE</span><span class=\"p\">:</span>\n            <span class=\"n\">decision</span> <span class=\"o\">=</span> <span class=\"n\">NEGTV</span>\n        <span class=\"k\">elif</span> <span class=\"n\">decision</span> <span class=\"o\">==</span> <span class=\"n\">POSTV</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s1\">&#39;evidence=positive and meta=diff&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">decision</span>\n\n\n<div class=\"viewcode-block\" id=\"Feedback\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.core.Feedback\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Feedback</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_check_edge</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">edge</span><span class=\"p\">):</span>\n        <span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span> <span class=\"o\">=</span> <span class=\"n\">edge</span>\n        <span class=\"k\">if</span> <span class=\"n\">aid1</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">aids_set</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s1\">&#39;aid1=</span><span class=\"si\">%r</span><span class=\"s1\"> is not part of the graph&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">aid1</span><span class=\"p\">,))</span>\n        <span class=\"k\">if</span> <span class=\"n\">aid2</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">aids_set</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s1\">&#39;aid2=</span><span class=\"si\">%r</span><span class=\"s1\"> is not part of the graph&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">aid2</span><span class=\"p\">,))</span>\n\n<div class=\"viewcode-block\" id=\"Feedback.add_feedback_from\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.core.Feedback.add_feedback_from\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">add_feedback_from</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">items</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">verbose</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">verbose</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">verbose</span> <span class=\"o\">&gt;</span> <span class=\"mi\">5</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">,</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">names</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"s1\">&#39;aid1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;aid2&#39;</span><span class=\"p\">]:</span>\n                <span class=\"k\">for</span> <span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">data</span> <span class=\"ow\">in</span> <span class=\"n\">items</span><span class=\"o\">.</span><span class=\"n\">iterrows</span><span class=\"p\">():</span>\n                    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"o\">=</span><span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">verbose</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">data</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                    <span class=\"s1\">&#39;Cannot interpret pd.DataFrame without edge index&#39;</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Dangerous if item length &gt; 3</span>\n            <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">items</span><span class=\"p\">:</span>\n                <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n                <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                    <span class=\"c1\"># Case where items=[edge1, edge2]</span>\n                    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"o\">!=</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n                        <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s1\">&#39;invalid edge&#39;</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n                    <span class=\"c1\"># Case where items=[(edge1, state), (edge2, state)]</span>\n                    <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">isiterable</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]):</span>\n                        <span class=\"n\">edge</span> <span class=\"o\">=</span> <span class=\"n\">item</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                        <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"n\">item</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"n\">edge</span> <span class=\"o\">=</span> <span class=\"n\">item</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s1\">&#39;invalid edge&#39;</span><span class=\"p\">)</span>\n                    <span class=\"c1\"># Case where items=[(u, v, state), (u, v, state)]</span>\n                <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">3</span><span class=\"p\">:</span>\n                    <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s1\">&#39;pass in data as a dataframe or &#39;</span>\n                                     <span class=\"s1\">&#39;use kwargs&#39;</span><span class=\"p\">)</span>\n                <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">verbose</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Feedback.edge_decision\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.core.Feedback.edge_decision\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">edge_decision</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">edge</span><span class=\"p\">):</span>\n        <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Gets a decision on an edge, either explicitly or implicitly</span>\n\n<span class=\"sd\">        CommandLine:</span>\n<span class=\"sd\">            python -m ibeis.algo.graph.core edge_decision</span>\n\n<span class=\"sd\">        Doctest:</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.algo.graph.core import *  # NOQA</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.algo.graph import demo</span>\n<span class=\"sd\">            &gt;&gt;&gt; infr = demo.demodata_infr(num_pccs=1, p_incon=1)</span>\n<span class=\"sd\">            &gt;&gt;&gt; decision = infr.edge_decision((1, 2))</span>\n<span class=\"sd\">            &gt;&gt;&gt; print(&#39;decision = %r&#39; % (decision,))</span>\n<span class=\"sd\">            &gt;&gt;&gt; assert decision == POSTV</span>\n<span class=\"sd\">            &gt;&gt;&gt; decision = infr.edge_decision((199, 299))</span>\n<span class=\"sd\">            &gt;&gt;&gt; print(&#39;decision = %r&#39; % (decision,))</span>\n<span class=\"sd\">            &gt;&gt;&gt; assert decision == UNREV</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">evidence_decision</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">get_edge_attr</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">,</span>\n                                               <span class=\"n\">on_missing</span><span class=\"o\">=</span><span class=\"s1\">&#39;default&#39;</span><span class=\"p\">,</span>\n                                               <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">UNREV</span><span class=\"p\">)</span>\n        <span class=\"n\">meta_decision</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">get_edge_attr</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"s1\">&#39;meta_decision&#39;</span><span class=\"p\">,</span>\n                                           <span class=\"n\">on_missing</span><span class=\"o\">=</span><span class=\"s1\">&#39;default&#39;</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">NULL</span><span class=\"p\">)</span>\n        <span class=\"n\">decision</span> <span class=\"o\">=</span> <span class=\"n\">_rectify_decision</span><span class=\"p\">(</span><span class=\"n\">evidence_decision</span><span class=\"p\">,</span> <span class=\"n\">meta_decision</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">decision</span></div>\n\n<div class=\"viewcode-block\" id=\"Feedback.edge_decision_from\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.core.Feedback.edge_decision_from\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">edge_decision_from</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"p\">):</span>\n        <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Gets a decision for multiple edges</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">)</span>\n        <span class=\"n\">evidence_decisions</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">gen_edge_values</span><span class=\"p\">(</span>\n            <span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"p\">,</span> <span class=\"n\">on_missing</span><span class=\"o\">=</span><span class=\"s1\">&#39;default&#39;</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">UNREV</span><span class=\"p\">)</span>\n        <span class=\"n\">meta_decisions</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">gen_edge_values</span><span class=\"p\">(</span>\n            <span class=\"s1\">&#39;meta_decision&#39;</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"p\">,</span> <span class=\"n\">on_missing</span><span class=\"o\">=</span><span class=\"s1\">&#39;default&#39;</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">NULL</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">ed</span><span class=\"p\">,</span> <span class=\"n\">md</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">evidence_decisions</span><span class=\"p\">,</span> <span class=\"n\">meta_decisions</span><span class=\"p\">):</span>\n            <span class=\"k\">yield</span> <span class=\"n\">_rectify_decision</span><span class=\"p\">(</span><span class=\"n\">ed</span><span class=\"p\">,</span> <span class=\"n\">md</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Feedback.add_node_feedback\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.core.Feedback.add_node_feedback\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">add_node_feedback</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">aid</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">attrs</span><span class=\"p\">):</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Writing annot aid=</span><span class=\"si\">%r</span><span class=\"s1\"> </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">aid</span><span class=\"p\">,</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr2</span><span class=\"p\">(</span><span class=\"n\">attrs</span><span class=\"p\">)))</span>\n        <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">ibs</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_annot_quality_texts</span><span class=\"p\">([</span><span class=\"n\">aid</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"n\">attrs</span><span class=\"p\">[</span><span class=\"s1\">&#39;quality_texts&#39;</span><span class=\"p\">]])</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_annot_viewpoint_code</span><span class=\"p\">([</span><span class=\"n\">aid</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"n\">attrs</span><span class=\"p\">[</span><span class=\"s1\">&#39;viewpoint_code&#39;</span><span class=\"p\">]])</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">overwrite_annot_case_tags</span><span class=\"p\">([</span><span class=\"n\">aid</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"n\">attrs</span><span class=\"p\">[</span><span class=\"s1\">&#39;case_tags&#39;</span><span class=\"p\">]])</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">set_annot_multiple</span><span class=\"p\">([</span><span class=\"n\">aid</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"n\">attrs</span><span class=\"p\">[</span><span class=\"s1\">&#39;multiple&#39;</span><span class=\"p\">]])</span></div>\n\n<div class=\"viewcode-block\" id=\"Feedback.add_feedback\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.core.Feedback.add_feedback\">[docs]</a>    <span class=\"nd\">@profile</span>\n    <span class=\"k\">def</span> <span class=\"nf\">add_feedback</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">evidence_decision</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                     <span class=\"n\">user_id</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">meta_decision</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">confidence</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                     <span class=\"n\">timestamp_c1</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">timestamp_c2</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">timestamp_s1</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                     <span class=\"n\">timestamp</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">priority</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Doctest:</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.algo.graph.core import *  # NOQA</span>\n<span class=\"sd\">            &gt;&gt;&gt; infr = testdata_infr(&#39;testdb1&#39;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; infr.add_feedback((5, 6), POSTV)</span>\n<span class=\"sd\">            &gt;&gt;&gt; infr.add_feedback((5, 6), NEGTV, tags=[&#39;photobomb&#39;])</span>\n<span class=\"sd\">            &gt;&gt;&gt; infr.add_feedback((1, 2), INCMP)</span>\n<span class=\"sd\">            &gt;&gt;&gt; print(ut.repr2(infr.internal_feedback, nl=2))</span>\n<span class=\"sd\">            &gt;&gt;&gt; assert len(infr.external_feedback) == 0</span>\n<span class=\"sd\">            &gt;&gt;&gt; assert len(infr.internal_feedback) == 2</span>\n<span class=\"sd\">            &gt;&gt;&gt; assert len(infr.internal_feedback[(5, 6)]) == 2</span>\n<span class=\"sd\">            &gt;&gt;&gt; assert len(infr.internal_feedback[(1, 2)]) == 1</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">prev_verbose</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">verbose</span>\n        <span class=\"k\">if</span> <span class=\"n\">verbose</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">verbose</span> <span class=\"o\">=</span> <span class=\"n\">verbose</span>\n        <span class=\"n\">edge</span> <span class=\"o\">=</span> <span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span> <span class=\"o\">=</span> <span class=\"n\">nxu</span><span class=\"o\">.</span><span class=\"n\">e_</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">edge</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">has_edge</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Allow new aids</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">has_node</span><span class=\"p\">(</span><span class=\"n\">aid1</span><span class=\"p\">):</span>\n                    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_aids</span><span class=\"p\">([</span><span class=\"n\">aid1</span><span class=\"p\">])</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">has_node</span><span class=\"p\">(</span><span class=\"n\">aid2</span><span class=\"p\">):</span>\n                    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_aids</span><span class=\"p\">([</span><span class=\"n\">aid2</span><span class=\"p\">])</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_check_edge</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">)</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">evidence_decision</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">evidence_decision</span> <span class=\"o\">=</span> <span class=\"n\">UNREV</span>\n        <span class=\"k\">if</span> <span class=\"n\">meta_decision</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">meta_decision</span> <span class=\"o\">=</span> <span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">META_DECISION</span><span class=\"o\">.</span><span class=\"n\">CODE</span><span class=\"o\">.</span><span class=\"n\">NULL</span>\n        <span class=\"k\">if</span> <span class=\"n\">confidence</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">confidence</span> <span class=\"o\">=</span> <span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">CONFIDENCE</span><span class=\"o\">.</span><span class=\"n\">CODE</span><span class=\"o\">.</span><span class=\"n\">UNKNOWN</span>\n        <span class=\"k\">if</span> <span class=\"n\">timestamp</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">timestamp</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_timestamp</span><span class=\"p\">(</span><span class=\"s1\">&#39;int&#39;</span><span class=\"p\">,</span> <span class=\"n\">isutc</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n        <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;add_feedback (</span><span class=\"si\">{}</span><span class=\"s1\">, </span><span class=\"si\">{}</span><span class=\"s1\">), &#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">)</span>\n        <span class=\"n\">loc</span> <span class=\"o\">=</span> <span class=\"nb\">locals</span><span class=\"p\">()</span>\n        <span class=\"n\">msg</span> <span class=\"o\">+=</span> <span class=\"s1\">&#39;, &#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">([</span>\n            <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">)</span>\n            <span class=\"c1\"># key + &#39;=&#39; + str(val)</span>\n            <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">val</span> <span class=\"ow\">in</span> <span class=\"p\">(</span>\n                <span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">])</span>\n                <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;tags&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;user_id&#39;</span><span class=\"p\">,</span>\n                            <span class=\"s1\">&#39;confidence&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;meta_decision&#39;</span><span class=\"p\">])</span>\n            <span class=\"k\">if</span> <span class=\"n\">val</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span>\n        <span class=\"p\">])</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">&#39;white&#39;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">meta_decision</span> <span class=\"o\">==</span> <span class=\"n\">NULL</span><span class=\"p\">:</span>\n            <span class=\"c1\"># TODO: check previous meta_decision and use that if its consistent</span>\n            <span class=\"c1\"># with the evidence decision.</span>\n            <span class=\"k\">pass</span>\n\n        <span class=\"n\">decision</span> <span class=\"o\">=</span> <span class=\"n\">_rectify_decision</span><span class=\"p\">(</span><span class=\"n\">evidence_decision</span><span class=\"p\">,</span> <span class=\"n\">meta_decision</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">decision</span> <span class=\"o\">==</span> <span class=\"n\">UNREV</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Unreviewing an edge deletes anything not yet committed</span>\n            <span class=\"k\">if</span> <span class=\"n\">edge</span> <span class=\"ow\">in</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">external_feedback</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s1\">&#39;External edge reviews cannot be undone&#39;</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">edge</span> <span class=\"ow\">in</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">internal_feedback</span><span class=\"p\">:</span>\n                <span class=\"k\">del</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">internal_feedback</span><span class=\"p\">[</span><span class=\"n\">edge</span><span class=\"p\">]</span>\n\n        <span class=\"c1\"># Remove the edge from the queue if it is in there.</span>\n        <span class=\"k\">if</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">queue</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">edge</span> <span class=\"ow\">in</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">queue</span><span class=\"p\">:</span>\n                <span class=\"k\">del</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">queue</span><span class=\"p\">[</span><span class=\"n\">edge</span><span class=\"p\">]</span>\n\n        <span class=\"c1\"># Keep track of sequential reviews and set properties on global graph</span>\n        <span class=\"n\">num_reviews</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">get_edge_attr</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"s1\">&#39;num_reviews&#39;</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n        <span class=\"n\">review_id</span> <span class=\"o\">=</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">review_counter</span><span class=\"p\">)</span>\n        <span class=\"n\">feedback_item</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;tags&#39;</span><span class=\"p\">:</span> <span class=\"n\">tags</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">evidence_decision</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;meta_decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">meta_decision</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;timestamp_c1&#39;</span><span class=\"p\">:</span> <span class=\"n\">timestamp_c1</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;timestamp_c2&#39;</span><span class=\"p\">:</span> <span class=\"n\">timestamp_c2</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;timestamp_s1&#39;</span><span class=\"p\">:</span> <span class=\"n\">timestamp_s1</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;timestamp&#39;</span><span class=\"p\">:</span> <span class=\"n\">timestamp</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;confidence&#39;</span><span class=\"p\">:</span> <span class=\"n\">confidence</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;user_id&#39;</span><span class=\"p\">:</span> <span class=\"n\">user_id</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;num_reviews&#39;</span><span class=\"p\">:</span> <span class=\"n\">num_reviews</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;review_id&#39;</span><span class=\"p\">:</span> <span class=\"n\">review_id</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">internal_feedback</span><span class=\"p\">[</span><span class=\"n\">edge</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">feedback_item</span><span class=\"p\">)</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">set_edge_attr</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">feedback_item</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">test_mode</span><span class=\"p\">:</span>\n            <span class=\"n\">prev_decision</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_get_current_decision</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">)</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_dynamic_test_callback</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">decision</span><span class=\"p\">,</span> <span class=\"n\">prev_decision</span><span class=\"p\">,</span> <span class=\"n\">user_id</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># must happen after dynamic test callback</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">set_edge_attr</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;decision&#39;</span><span class=\"p\">:</span> <span class=\"n\">decision</span><span class=\"p\">})</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"s1\">&#39;inference.enabled&#39;</span><span class=\"p\">]:</span>\n            <span class=\"k\">assert</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">dirty</span> <span class=\"ow\">is</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"p\">(</span>\n                <span class=\"s1\">&#39;need to recompute before dynamic inference continues&#39;</span><span class=\"p\">)</span>\n            <span class=\"c1\"># Update priority queue based on the new edge</span>\n            <span class=\"n\">action</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_review_edge</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">decision</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">test_mode</span><span class=\"p\">:</span>\n                <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">test_state</span><span class=\"p\">[</span><span class=\"s1\">&#39;action&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">action</span>\n            <span class=\"k\">if</span> <span class=\"kc\">False</span><span class=\"p\">:</span>\n                <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_print_debug_ccs</span><span class=\"p\">()</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">action</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">dirty</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_add_review_edge</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">decision</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"s1\">&#39;inference.enabled&#39;</span><span class=\"p\">]</span> <span class=\"ow\">and</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">refresh</span><span class=\"p\">:</span>\n            <span class=\"c1\"># only add to criteria if this wasn&#39;t requested as a fix edge</span>\n            <span class=\"k\">if</span> <span class=\"n\">priority</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">priority</span> <span class=\"o\">&lt;=</span> <span class=\"mf\">1.0</span><span class=\"p\">:</span>\n                <span class=\"n\">meaningful</span> <span class=\"o\">=</span> <span class=\"nb\">bool</span><span class=\"p\">({</span><span class=\"s1\">&#39;merge&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;split&#39;</span><span class=\"p\">}</span> <span class=\"o\">&amp;</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">action</span><span class=\"p\">))</span>\n                <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">refresh</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">meaningful</span><span class=\"p\">,</span> <span class=\"n\">user_id</span><span class=\"p\">,</span> <span class=\"n\">decision</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">test_mode</span><span class=\"p\">:</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">metrics_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">measure_metrics</span><span class=\"p\">())</span>\n\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">verbose</span> <span class=\"o\">=</span> <span class=\"n\">prev_verbose</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_print_debug_ccs</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">):</span>\n        <span class=\"k\">assert</span> <span class=\"nb\">all</span><span class=\"p\">([</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">allsame</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">node_labels</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">cc</span><span class=\"p\">))</span>\n                    <span class=\"k\">for</span> <span class=\"n\">cc</span> <span class=\"ow\">in</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">positive_components</span><span class=\"p\">()])</span>\n        <span class=\"n\">sorted_ccs</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">([</span>\n            <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">cc</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">cc</span> <span class=\"ow\">in</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">connected_components</span><span class=\"p\">()</span>\n        <span class=\"p\">])</span>\n        <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;[&#39;</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;, &#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">([</span>\n            <span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">cc</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">is_consistent</span><span class=\"p\">(</span><span class=\"n\">cc</span><span class=\"p\">)</span> <span class=\"k\">else</span>\n            <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">highlight_text</span><span class=\"p\">(</span><span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">cc</span><span class=\"p\">),</span> <span class=\"s1\">&#39;red&#39;</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">cc</span> <span class=\"ow\">in</span> <span class=\"n\">sorted_ccs</span><span class=\"p\">])</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;]&#39;</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@ut</span><span class=\"o\">.</span><span class=\"n\">classproperty</span>\n    <span class=\"k\">def</span> <span class=\"nf\">feedback_keys</span><span class=\"p\">(</span><span class=\"n\">Infr</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot; edge attribute keys used for feedback &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">Infr</span><span class=\"o\">.</span><span class=\"n\">feedback_data_keys</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"s1\">&#39;num_reviews&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;review_id&#39;</span><span class=\"p\">]</span>\n\n    <span class=\"nd\">@ut</span><span class=\"o\">.</span><span class=\"n\">classproperty</span>\n    <span class=\"k\">def</span> <span class=\"nf\">feedback_data_keys</span><span class=\"p\">(</span><span class=\"n\">Infr</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot; edge attribute keys used for feedback &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span>\n            <span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;tags&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;user_id&#39;</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;meta_decision&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;timestamp_c1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;timestamp_c2&#39;</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;timestamp_s1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;timestamp&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;confidence&#39;</span>\n        <span class=\"p\">]</span>\n\n<div class=\"viewcode-block\" id=\"Feedback.apply_feedback_edges\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.core.Feedback.apply_feedback_edges\">[docs]</a>    <span class=\"nd\">@profile</span>\n    <span class=\"k\">def</span> <span class=\"nf\">apply_feedback_edges</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">):</span>\n        <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Transforms the feedback dictionaries into nx graph edge attributes</span>\n\n<span class=\"sd\">        CommandLine:</span>\n<span class=\"sd\">            python -m ibeis.algo.graph.core apply_feedback_edges</span>\n\n<span class=\"sd\">        Doctest:</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.algo.graph.core import *  # NOQA</span>\n<span class=\"sd\">            &gt;&gt;&gt; infr = testdata_infr(&#39;testdb1&#39;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; infr.reset_feedback()</span>\n<span class=\"sd\">            &gt;&gt;&gt; infr.params[&#39;inference.enabled&#39;] = False</span>\n<span class=\"sd\">            &gt;&gt;&gt; #infr.add_feedback((1, 2), &#39;unknown&#39;, tags=[])</span>\n<span class=\"sd\">            &gt;&gt;&gt; infr.add_feedback((1, 2), INCMP, tags=[])</span>\n<span class=\"sd\">            &gt;&gt;&gt; infr.apply_feedback_edges()</span>\n<span class=\"sd\">            &gt;&gt;&gt; print(&#39;edges = &#39; + ut.repr4(dict(infr.graph.edges)))</span>\n<span class=\"sd\">            &gt;&gt;&gt; result = str(infr)</span>\n<span class=\"sd\">            &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">            &lt;AnnotInference(nNodes=6, nEdges=3, nCCs=4)&gt;</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;apply_feedback_edges&#39;</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Transforms dictionary feedback into numpy array</span>\n        <span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">attr_lists</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"p\">[]</span> <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">feedback_keys</span><span class=\"p\">}</span>\n        <span class=\"k\">for</span> <span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">vals</span> <span class=\"ow\">in</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">all_feedback_items</span><span class=\"p\">():</span>\n            <span class=\"c1\"># hack for feedback rectification</span>\n            <span class=\"n\">feedback_item</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_rectify_feedback_item</span><span class=\"p\">(</span><span class=\"n\">vals</span><span class=\"p\">)</span>\n            <span class=\"n\">feedback_item</span><span class=\"p\">[</span><span class=\"s1\">&#39;review_id&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">review_counter</span><span class=\"p\">)</span>\n            <span class=\"n\">feedback_item</span><span class=\"p\">[</span><span class=\"s1\">&#39;num_reviews&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">vals</span><span class=\"p\">)</span>\n            <span class=\"c1\"># if feedback_item[&#39;decision&#39;] == &#39;unknown&#39;:</span>\n            <span class=\"c1\">#     continue</span>\n            <span class=\"n\">set1</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">feedback_item</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n            <span class=\"n\">set2</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">attr_lists</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n            <span class=\"k\">if</span> <span class=\"n\">set1</span> <span class=\"o\">!=</span> <span class=\"n\">set2</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">AssertionError</span><span class=\"p\">(</span>\n                    <span class=\"s1\">&#39;Bad feedback keys: &#39;</span> <span class=\"o\">+</span>\n                    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr2</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">set_overlap_items</span><span class=\"p\">(</span><span class=\"n\">set1</span><span class=\"p\">,</span> <span class=\"n\">set2</span><span class=\"p\">,</span> <span class=\"s1\">&#39;got&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;want&#39;</span><span class=\"p\">),</span> <span class=\"n\">nl</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n                    <span class=\"c1\"># ut.repr2(sorted(feedback_item.keys()), sv=True) + &#39; &#39; +</span>\n                    <span class=\"c1\"># ut.repr2(sorted(attr_lists.keys()), sv=True)</span>\n                <span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">val</span> <span class=\"ow\">in</span> <span class=\"n\">feedback_item</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n                <span class=\"n\">attr_lists</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">)</span>\n            <span class=\"n\">edges</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">)</span>\n\n        <span class=\"k\">assert</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">allsame</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">,</span> <span class=\"n\">attr_lists</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">())))</span>\n        <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"nb\">iter</span><span class=\"p\">(</span><span class=\"n\">attr_lists</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">())))</span>\n\n        <span class=\"c1\"># Put pair orders in context of the graph</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;_set_feedback_edges(nEdges=</span><span class=\"si\">%d</span><span class=\"s1\">)&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">),),</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Ensure edges exist</span>\n        <span class=\"k\">for</span> <span class=\"n\">edge</span> <span class=\"ow\">in</span> <span class=\"n\">edges</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">has_edge</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">edge</span><span class=\"p\">):</span>\n                <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">edge</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># take evidence_decision and meta_decision into account</span>\n        <span class=\"n\">decisions</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"n\">_rectify_decision</span><span class=\"p\">(</span><span class=\"n\">ed</span><span class=\"p\">,</span> <span class=\"n\">md</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">ed</span><span class=\"p\">,</span> <span class=\"n\">md</span> <span class=\"ow\">in</span>\n            <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">attr_lists</span><span class=\"p\">[</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">],</span> <span class=\"n\">attr_lists</span><span class=\"p\">[</span><span class=\"s1\">&#39;meta_decision&#39;</span><span class=\"p\">])</span>\n        <span class=\"p\">]</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"n\">es</span> <span class=\"ow\">in</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">group_items</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">,</span> <span class=\"n\">decisions</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_add_review_edges_from</span><span class=\"p\">(</span><span class=\"n\">es</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">)</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">val_list</span> <span class=\"ow\">in</span> <span class=\"n\">attr_lists</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">set_edge_attrs</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dzip</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">,</span> <span class=\"n\">val_list</span><span class=\"p\">))</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"s1\">&#39;inference.enabled&#39;</span><span class=\"p\">]:</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">apply_nondynamic_update</span><span class=\"p\">()</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_rectify_feedback</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">feedback</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"n\">edge</span><span class=\"p\">:</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_rectify_feedback_item</span><span class=\"p\">(</span><span class=\"n\">vals</span><span class=\"p\">)</span>\n                <span class=\"k\">for</span> <span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">vals</span> <span class=\"ow\">in</span> <span class=\"n\">feedback</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_rectify_feedback_item</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">vals</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot; uses most recently use strategy &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">vals</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n<div class=\"viewcode-block\" id=\"Feedback.all_feedback_items\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.core.Feedback.all_feedback_items\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">all_feedback_items</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">vals</span> <span class=\"ow\">in</span> <span class=\"n\">six</span><span class=\"o\">.</span><span class=\"n\">iteritems</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">external_feedback</span><span class=\"p\">):</span>\n            <span class=\"k\">yield</span> <span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">vals</span>\n        <span class=\"k\">for</span> <span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">vals</span> <span class=\"ow\">in</span> <span class=\"n\">six</span><span class=\"o\">.</span><span class=\"n\">iteritems</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">internal_feedback</span><span class=\"p\">):</span>\n            <span class=\"k\">yield</span> <span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">vals</span></div>\n\n<div class=\"viewcode-block\" id=\"Feedback.all_feedback\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.core.Feedback.all_feedback\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">all_feedback</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">):</span>\n        <span class=\"n\">all_feedback</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ddict</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">)</span>\n        <span class=\"n\">all_feedback</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">all_feedback_items</span><span class=\"p\">())</span>\n        <span class=\"k\">return</span> <span class=\"n\">all_feedback</span></div>\n\n<div class=\"viewcode-block\" id=\"Feedback.clear_feedback\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.core.Feedback.clear_feedback\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">clear_feedback</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot; Delete all edges properties related to feedback &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">edges</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">()</span>\n        <span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">)</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;clear_feedback len(edges) = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">)),</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">external_feedback</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ddict</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">)</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">internal_feedback</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ddict</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Kill all feedback, remote edge labels, but leave graph edges alone</span>\n        <span class=\"n\">keys</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">feedback_keys</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"s1\">&#39;inferred_state&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">nx_delete_edge_attr</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"p\">,</span> <span class=\"n\">keys</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Move reviewed edges back into the unreviewed graph</span>\n        <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"n\">POSTV</span><span class=\"p\">,</span> <span class=\"n\">NEGTV</span><span class=\"p\">,</span> <span class=\"n\">INCMP</span><span class=\"p\">):</span>\n            <span class=\"n\">subgraph</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">review_graphs</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span>\n            <span class=\"n\">prev_edges</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">subgraph</span><span class=\"o\">.</span><span class=\"n\">has_edges</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">)))</span>\n            <span class=\"n\">subgraph</span><span class=\"o\">.</span><span class=\"n\">remove_edges_from</span><span class=\"p\">(</span><span class=\"n\">prev_edges</span><span class=\"p\">)</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">review_graphs</span><span class=\"p\">[</span><span class=\"n\">UNREV</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">add_edges_from</span><span class=\"p\">(</span><span class=\"n\">prev_edges</span><span class=\"p\">)</span>\n\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_redun_nids</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">neg_redun_metagraph</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">nid_to_errors</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">__debug__</span><span class=\"p\">:</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">assert_disjoint_invariant</span><span class=\"p\">()</span></div>\n\n<div class=\"viewcode-block\" id=\"Feedback.clear_edges\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.core.Feedback.clear_edges\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">clear_edges</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Removes all edges from the graph</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">for</span> <span class=\"n\">graph</span> <span class=\"ow\">in</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">review_graphs</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">():</span>\n            <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">remove_edges_from</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">()))</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">remove_edges_from</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">()))</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_redun_nids</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">neg_redun_metagraph</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">nid_to_errors</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span></div>\n\n<div class=\"viewcode-block\" id=\"Feedback.reset_feedback\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.core.Feedback.reset_feedback\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">reset_feedback</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;annotmatch&#39;</span><span class=\"p\">,</span> <span class=\"n\">apply</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot; Resets feedback edges to state of the SQL annotmatch table &quot;&quot;&quot;</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;reset_feedback mode=</span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">mode</span><span class=\"p\">,),</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">clear_feedback</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">mode</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;annotmatch&#39;</span><span class=\"p\">:</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">external_feedback</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">read_ibeis_annotmatch_feedback</span><span class=\"p\">()</span>\n        <span class=\"k\">elif</span> <span class=\"n\">mode</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;staging&#39;</span><span class=\"p\">:</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">external_feedback</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">read_ibeis_staging_feedback</span><span class=\"p\">()</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s1\">&#39;no mode=</span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">mode</span><span class=\"p\">,))</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">internal_feedback</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ddict</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">apply</span><span class=\"p\">:</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">apply_feedback_edges</span><span class=\"p\">()</span></div>\n\n<div class=\"viewcode-block\" id=\"Feedback.reset\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.core.Feedback.reset\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">reset</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"o\">=</span><span class=\"s1\">&#39;empty&#39;</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Removes all edges from graph and resets name labels.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.algo.graph.core import *  # NOQA</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.algo.graph import demo</span>\n<span class=\"sd\">            &gt;&gt;&gt; infr = demo.demodata_infr(num_pccs=5)</span>\n<span class=\"sd\">            &gt;&gt;&gt; assert len(list(infr.edges())) &gt; 0</span>\n<span class=\"sd\">            &gt;&gt;&gt; infr.reset(state=&#39;empty&#39;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; assert len(list(infr.edges())) == 0</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">clear_edges</span><span class=\"p\">()</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">clear_feedback</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">state</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;empty&#39;</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Remove all edges, and component names</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">clear_name_labels</span><span class=\"p\">()</span>\n        <span class=\"k\">elif</span> <span class=\"n\">state</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;orig&#39;</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span><span class=\"s1\">&#39;unused&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">reset_name_labels</span><span class=\"p\">()</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s1\">&#39;Unknown state=</span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">,))</span></div>\n\n<div class=\"viewcode-block\" id=\"Feedback.reset_name_labels\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.core.Feedback.reset_name_labels\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">reset_name_labels</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot; Resets all annotation node name labels to their initial values &quot;&quot;&quot;</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;reset_name_labels&#39;</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">orig_names</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">get_node_attrs</span><span class=\"p\">(</span><span class=\"s1\">&#39;orig_name_label&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">set_node_attrs</span><span class=\"p\">(</span><span class=\"s1\">&#39;name_label&#39;</span><span class=\"p\">,</span> <span class=\"n\">orig_names</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Feedback.clear_name_labels\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.core.Feedback.clear_name_labels\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">clear_name_labels</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot; Sets all annotation node name labels to be unknown &quot;&quot;&quot;</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;clear_name_labels()&#39;</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"c1\"># make distinct names for all nodes</span>\n        <span class=\"n\">distinct_names</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"n\">node</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"n\">aid</span> <span class=\"k\">for</span> <span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"n\">aid</span> <span class=\"ow\">in</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">get_node_attrs</span><span class=\"p\">(</span><span class=\"s1\">&#39;aid&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">set_node_attrs</span><span class=\"p\">(</span><span class=\"s1\">&#39;name_label&#39;</span><span class=\"p\">,</span> <span class=\"n\">distinct_names</span><span class=\"p\">)</span></div></div>\n\n\n<div class=\"viewcode-block\" id=\"NameRelabel\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.core.NameRelabel\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">NameRelabel</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n\n<div class=\"viewcode-block\" id=\"NameRelabel.node_label\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.core.NameRelabel.node_label\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">node_label</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">aid</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">node_label</span><span class=\"p\">(</span><span class=\"n\">aid</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"NameRelabel.node_labels\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.core.NameRelabel.node_labels\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">node_labels</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">aids</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">node_labels</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">aids</span><span class=\"p\">)</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_next_nid</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"s1\">&#39;nid_counter&#39;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">nids</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">get_node_attributes</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"p\">,</span> <span class=\"s1\">&#39;name_label&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">nid_counter</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">nids</span><span class=\"p\">)</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">nid_counter</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"n\">new_nid</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">nid_counter</span>\n        <span class=\"k\">return</span> <span class=\"n\">new_nid</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_rectify_names</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">old_names</span><span class=\"p\">,</span> <span class=\"n\">new_labels</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Finds the best assignment of old names based on the new groups each is</span>\n<span class=\"sd\">        assigned to.</span>\n\n<span class=\"sd\">        old_names  = [None, None, None, 1, 2, 3, 3, 4, 4, 4, 5, None]</span>\n<span class=\"sd\">        new_labels = [   1,    2,    2, 3, 4, 5, 5, 6, 3, 3, 7, 7]</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;rectifying name lists&#39;</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">ibeis.scripts</span> <span class=\"k\">import</span> <span class=\"n\">name_recitifer</span>\n        <span class=\"n\">newlabel_to_oldnames</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">group_items</span><span class=\"p\">(</span><span class=\"n\">old_names</span><span class=\"p\">,</span> <span class=\"n\">new_labels</span><span class=\"p\">)</span>\n        <span class=\"n\">unique_newlabels</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">newlabel_to_oldnames</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n        <span class=\"n\">grouped_oldnames_</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">newlabel_to_oldnames</span><span class=\"p\">,</span> <span class=\"n\">unique_newlabels</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Mark annots that are unknown and still grouped by themselves</span>\n        <span class=\"n\">still_unknown</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"ow\">and</span> <span class=\"n\">g</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"k\">for</span> <span class=\"n\">g</span> <span class=\"ow\">in</span> <span class=\"n\">grouped_oldnames_</span><span class=\"p\">]</span>\n        <span class=\"c1\"># Remove nones for name rectifier</span>\n        <span class=\"n\">grouped_oldnames</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"p\">[</span><span class=\"n\">n</span> <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"n\">oldgroup</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">]</span>\n            <span class=\"k\">for</span> <span class=\"n\">oldgroup</span> <span class=\"ow\">in</span> <span class=\"n\">grouped_oldnames_</span><span class=\"p\">]</span>\n        <span class=\"n\">new_names</span> <span class=\"o\">=</span> <span class=\"n\">name_recitifer</span><span class=\"o\">.</span><span class=\"n\">find_consistent_labeling</span><span class=\"p\">(</span>\n            <span class=\"n\">grouped_oldnames</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">verbose</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">extra_prefix</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n\n        <span class=\"n\">unknown_labels</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">unique_newlabels</span><span class=\"p\">,</span> <span class=\"n\">still_unknown</span><span class=\"p\">)</span>\n\n        <span class=\"n\">new_flags</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">n</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"n\">new_names</span><span class=\"p\">]</span>\n        <span class=\"c1\">#     isinstance(n, six.string_types) and n.startswith(&#39;_extra_name&#39;)</span>\n        <span class=\"c1\">#     for n in new_names</span>\n        <span class=\"c1\"># ]</span>\n        <span class=\"n\">label_to_name</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dzip</span><span class=\"p\">(</span><span class=\"n\">unique_newlabels</span><span class=\"p\">,</span> <span class=\"n\">new_names</span><span class=\"p\">)</span>\n        <span class=\"n\">needs_assign</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">unique_newlabels</span><span class=\"p\">,</span> <span class=\"n\">new_flags</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">label_to_name</span><span class=\"p\">,</span> <span class=\"n\">needs_assign</span><span class=\"p\">,</span> <span class=\"n\">unknown_labels</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_rectified_relabel</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">cc_subgraphs</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Reuses as many names as possible</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># Determine which names can be reused</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">ibeis.scripts</span> <span class=\"k\">import</span> <span class=\"n\">name_recitifer</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;grouping names for rectification&#39;</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n        <span class=\"n\">grouped_oldnames_</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">get_node_attributes</span><span class=\"p\">(</span><span class=\"n\">subgraph</span><span class=\"p\">,</span> <span class=\"s1\">&#39;name_label&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">())</span>\n            <span class=\"k\">for</span> <span class=\"n\">count</span><span class=\"p\">,</span> <span class=\"n\">subgraph</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">cc_subgraphs</span><span class=\"p\">)</span>\n        <span class=\"p\">]</span>\n        <span class=\"c1\"># Make sure negatives dont get priority</span>\n        <span class=\"n\">grouped_oldnames</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"p\">[</span><span class=\"n\">n</span> <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"n\">group</span> <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">group</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"ow\">or</span> <span class=\"n\">n</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"k\">for</span> <span class=\"n\">group</span> <span class=\"ow\">in</span> <span class=\"n\">grouped_oldnames_</span>\n        <span class=\"p\">]</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;begin rectification of </span><span class=\"si\">%d</span><span class=\"s1\"> grouped old names&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span>\n            <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">grouped_oldnames</span><span class=\"p\">)),</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"n\">new_labels</span> <span class=\"o\">=</span> <span class=\"n\">name_recitifer</span><span class=\"o\">.</span><span class=\"n\">find_consistent_labeling</span><span class=\"p\">(</span>\n            <span class=\"n\">grouped_oldnames</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">verbose</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;done rectifying new names&#39;</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"n\">new_flags</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">n</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">&#39;_extra_name&#39;</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"n\">new_labels</span>\n        <span class=\"p\">]</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">idx</span> <span class=\"ow\">in</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">new_flags</span><span class=\"p\">):</span>\n            <span class=\"n\">new_labels</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_next_nid</span><span class=\"p\">()</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">idx</span><span class=\"p\">,</span> <span class=\"n\">label</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">new_labels</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">label</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">grouped_oldnames</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">])</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Remove negative ids for grouped items</span>\n                <span class=\"n\">new_labels</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_next_nid</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">new_labels</span>\n\n<div class=\"viewcode-block\" id=\"NameRelabel.relabel_using_reviews\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.core.NameRelabel.relabel_using_reviews\">[docs]</a>    <span class=\"nd\">@profile</span>\n    <span class=\"k\">def</span> <span class=\"nf\">relabel_using_reviews</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">graph</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">rectify</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Relabels nodes in graph based on positive connected components</span>\n\n<span class=\"sd\">        This will change all of the names on the nodes to be consistent while</span>\n<span class=\"sd\">        preserving any existing names as best as possible. If rectify=False,</span>\n<span class=\"sd\">        this will be faster, but the old names will not be preserved and each</span>\n<span class=\"sd\">        PCC will be assigned an arbitrary name.</span>\n\n<span class=\"sd\">        Note:</span>\n<span class=\"sd\">            if something messes up you can call infr.reset_labels_to_ibeis() to</span>\n<span class=\"sd\">            reset node labels to their original values --- this will almost</span>\n<span class=\"sd\">            always put the graph in an inconsistent state --- but then you can</span>\n<span class=\"sd\">            this with rectify=True to fix everything up.</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            graph (nx.Graph, optional): only edges in `graph` are relabeled</span>\n<span class=\"sd\">                defaults to current graph.</span>\n<span class=\"sd\">            rectify (bool, optional): if True names attempt to remain</span>\n<span class=\"sd\">                consistent otherwise there are no restrictions on name labels</span>\n<span class=\"sd\">                other than that they are distinct.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;relabel_using_reviews&#39;</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">graph</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">graph</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">graph</span>\n\n        <span class=\"c1\"># Get subgraphs and check consistency</span>\n        <span class=\"n\">cc_subgraphs</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">num_inconsistent</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">for</span> <span class=\"n\">cc</span> <span class=\"ow\">in</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">positive_components</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"o\">=</span><span class=\"n\">graph</span><span class=\"p\">):</span>\n            <span class=\"n\">cc_subgraphs</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">subgraph</span><span class=\"p\">(</span><span class=\"n\">cc</span><span class=\"p\">))</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">is_consistent</span><span class=\"p\">(</span><span class=\"n\">cc</span><span class=\"p\">):</span>\n                <span class=\"n\">num_inconsistent</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;num_inconsistent = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">num_inconsistent</span><span class=\"p\">,),</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">verbose</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n            <span class=\"n\">cc_sizes</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">,</span> <span class=\"n\">cc_subgraphs</span><span class=\"p\">))</span>\n            <span class=\"n\">pcc_size_hist</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dict_hist</span><span class=\"p\">(</span><span class=\"n\">cc_sizes</span><span class=\"p\">)</span>\n            <span class=\"n\">pcc_size_stats</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_stats</span><span class=\"p\">(</span><span class=\"n\">cc_sizes</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">pcc_size_hist</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">8</span><span class=\"p\">:</span>\n                <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;PCC size hist = </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr2</span><span class=\"p\">(</span><span class=\"n\">pcc_size_hist</span><span class=\"p\">),))</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;PCC size stats = </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr2</span><span class=\"p\">(</span><span class=\"n\">pcc_size_stats</span><span class=\"p\">),))</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">rectify</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Rectified relabeling, preserves grouping and labeling if possible</span>\n            <span class=\"n\">new_labels</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_rectified_relabel</span><span class=\"p\">(</span><span class=\"n\">cc_subgraphs</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Arbitrary relabeling, only preserves grouping</span>\n            <span class=\"k\">if</span> <span class=\"n\">graph</span> <span class=\"ow\">is</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Use union find labels</span>\n                <span class=\"n\">new_labels</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                    <span class=\"n\">count</span><span class=\"p\">:</span>\n                    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">node_label</span><span class=\"p\">(</span><span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"nb\">iter</span><span class=\"p\">(</span><span class=\"n\">subgraph</span><span class=\"o\">.</span><span class=\"n\">nodes</span><span class=\"p\">())))</span>\n                    <span class=\"k\">for</span> <span class=\"n\">count</span><span class=\"p\">,</span> <span class=\"n\">subgraph</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">cc_subgraphs</span><span class=\"p\">)</span>\n                <span class=\"p\">}</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">new_labels</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">count</span><span class=\"p\">:</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_next_nid</span><span class=\"p\">()</span>\n                              <span class=\"k\">for</span> <span class=\"n\">count</span><span class=\"p\">,</span> <span class=\"n\">subgraph</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">cc_subgraphs</span><span class=\"p\">)}</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">count</span><span class=\"p\">,</span> <span class=\"n\">subgraph</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">cc_subgraphs</span><span class=\"p\">):</span>\n            <span class=\"n\">new_nid</span> <span class=\"o\">=</span> <span class=\"n\">new_labels</span><span class=\"p\">[</span><span class=\"n\">count</span><span class=\"p\">]</span>\n            <span class=\"n\">node_to_newlabel</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dzip</span><span class=\"p\">(</span><span class=\"n\">subgraph</span><span class=\"o\">.</span><span class=\"n\">nodes</span><span class=\"p\">(),</span> <span class=\"p\">[</span><span class=\"n\">new_nid</span><span class=\"p\">])</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">set_node_attrs</span><span class=\"p\">(</span><span class=\"s1\">&#39;name_label&#39;</span><span class=\"p\">,</span> <span class=\"n\">node_to_newlabel</span><span class=\"p\">)</span>\n\n        <span class=\"n\">num_names</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cc_subgraphs</span><span class=\"p\">)</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;done relabeling&#39;</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">num_names</span><span class=\"p\">,</span> <span class=\"n\">num_inconsistent</span></div>\n\n<div class=\"viewcode-block\" id=\"NameRelabel.connected_component_status\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.core.NameRelabel.connected_component_status\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">connected_component_status</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">):</span>\n        <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Returns:</span>\n<span class=\"sd\">            dict: num_inconsistent, num_names_max</span>\n\n<span class=\"sd\">        CommandLine:</span>\n<span class=\"sd\">            python -m ibeis.algo.graph.core connected_component_status</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.algo.graph.core import *  # NOQA</span>\n<span class=\"sd\">            &gt;&gt;&gt; infr = testdata_infr(&#39;testdb1&#39;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; infr.add_feedback_from([(2, 3), NEGTV) (5, 6), NEGTV)</span>\n<span class=\"sd\">            &gt;&gt;&gt;                         (1, 2), POSTV)]</span>\n<span class=\"sd\">            &gt;&gt;&gt; status = infr.connected_component_status()</span>\n<span class=\"sd\">            &gt;&gt;&gt; print(ut.repr3(status))</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;checking status&#39;</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n\n        <span class=\"n\">num_inconsistent</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">recovery_ccs</span><span class=\"p\">)</span>\n        <span class=\"n\">num_names_max</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">number_of_components</span><span class=\"p\">()</span>\n\n        <span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span>\n            <span class=\"n\">num_names_max</span><span class=\"o\">=</span><span class=\"n\">num_names_max</span><span class=\"p\">,</span>\n            <span class=\"n\">num_inconsistent</span><span class=\"o\">=</span><span class=\"n\">num_inconsistent</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;done checking status&#39;</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">status</span></div></div>\n\n\n<div class=\"viewcode-block\" id=\"MiscHelpers\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.core.MiscHelpers\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">MiscHelpers</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_rectify_nids</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"n\">nids</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">nids</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">ibs</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">nids</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">aid</span> <span class=\"k\">for</span> <span class=\"n\">aid</span> <span class=\"ow\">in</span> <span class=\"n\">aids</span><span class=\"p\">]</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">nids</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_nids</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">isscalar</span><span class=\"p\">(</span><span class=\"n\">nids</span><span class=\"p\">):</span>\n            <span class=\"n\">nids</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">nids</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">nids</span>\n\n<div class=\"viewcode-block\" id=\"MiscHelpers.remove_aids\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.core.MiscHelpers.remove_aids\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">remove_aids</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Remove annotations from the graph.</span>\n<span class=\"sd\">        Returns:</span>\n<span class=\"sd\">            dict: split: indicates which PCCs were split by this action.</span>\n<span class=\"sd\">        Note:</span>\n<span class=\"sd\">            This may cause unintended splits!</span>\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; from graphid import demo, util</span>\n<span class=\"sd\">            &gt;&gt;&gt; infr = demo.demodata_infr(num_pccs=5, pos_redun=1)</span>\n<span class=\"sd\">            &gt;&gt;&gt; infr.refresh_candidate_edges()</span>\n<span class=\"sd\">            &gt;&gt;&gt; infr.pin_node_layout()</span>\n<span class=\"sd\">            &gt;&gt;&gt; before = infr.copy()</span>\n<span class=\"sd\">            &gt;&gt;&gt; aids = infr.aids[::5]</span>\n<span class=\"sd\">            &gt;&gt;&gt; splits = infr.remove_aids(aids)</span>\n<span class=\"sd\">            &gt;&gt;&gt; assert len(splits[&#39;old&#39;]) &gt; 0</span>\n<span class=\"sd\">            &gt;&gt;&gt; infr.assert_invariants()</span>\n<span class=\"sd\">            &gt;&gt;&gt; # xdoc: +REQUIRES(--show)</span>\n<span class=\"sd\">            &gt;&gt;&gt; util.qtensure()</span>\n<span class=\"sd\">            &gt;&gt;&gt; after = infr</span>\n<span class=\"sd\">            &gt;&gt;&gt; before.show(fnum=1, pnum=(1, 2, 1), pickable=True)</span>\n<span class=\"sd\">            &gt;&gt;&gt; after.show(fnum=1, pnum=(1, 2, 2), pickable=True)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;remove_aids len(aids)=</span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">)),</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Determine which edges are going to be removed</span>\n        <span class=\"n\">remove_edges</span> <span class=\"o\">=</span> <span class=\"n\">nxu</span><span class=\"o\">.</span><span class=\"n\">edges_outgoing</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"p\">)</span>\n\n        <span class=\"n\">old_groups</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">positive_components</span><span class=\"p\">())</span>\n\n        <span class=\"c1\"># Remove from tertiary bookkeeping structures</span>\n        <span class=\"n\">remove_idxs</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">make_index_lookup</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">aids</span><span class=\"p\">),</span> <span class=\"n\">aids</span><span class=\"p\">))</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">delete_items_by_index</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">orig_name_labels</span><span class=\"p\">,</span> <span class=\"n\">remove_idxs</span><span class=\"p\">)</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">delete_items_by_index</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"n\">remove_idxs</span><span class=\"p\">)</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">aids_set</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">aids</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Remove from secondary bookkeeping structures</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">delete_dict_keys</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">external_feedback</span><span class=\"p\">,</span> <span class=\"n\">remove_edges</span><span class=\"p\">)</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">delete_dict_keys</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">internal_feedback</span><span class=\"p\">,</span> <span class=\"n\">remove_edges</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Remove from core bookkeeping structures</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">remove_nodes_from</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">graph</span> <span class=\"ow\">in</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">review_graphs</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">():</span>\n            <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">remove_nodes_from</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">)</span>\n\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">delete_items</span><span class=\"p\">(</span><span class=\"n\">remove_edges</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># TODO: should refactor to preform a dyanmic step, but in this case is</span>\n        <span class=\"c1\"># less work to use a bazooka to shoot a fly.</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">apply_nondynamic_update</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># I&#39;m unsure if relabeling is necessary</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">relabel_using_reviews</span><span class=\"p\">()</span>\n\n        <span class=\"n\">new_groups</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">positive_components</span><span class=\"p\">())</span>\n\n        <span class=\"c1\"># print(&#39;old_groups = {!r}&#39;.format(old_groups))</span>\n        <span class=\"c1\"># print(&#39;new_groups = {!r}&#39;.format(new_groups))</span>\n        <span class=\"n\">delta</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">grouping_delta</span><span class=\"p\">(</span><span class=\"n\">old_groups</span><span class=\"p\">,</span> <span class=\"n\">new_groups</span><span class=\"p\">)</span>\n        <span class=\"n\">splits</span> <span class=\"o\">=</span> <span class=\"n\">delta</span><span class=\"p\">[</span><span class=\"s1\">&#39;splits&#39;</span><span class=\"p\">]</span>\n\n        <span class=\"n\">n_old</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">splits</span><span class=\"p\">[</span><span class=\"s1\">&#39;old&#39;</span><span class=\"p\">])</span>\n        <span class=\"n\">n_new</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">splits</span><span class=\"p\">[</span><span class=\"s1\">&#39;new&#39;</span><span class=\"p\">])))</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span>\n            <span class=\"s1\">&#39;removing </span><span class=\"si\">{}</span><span class=\"s1\"> aids split </span><span class=\"si\">{}</span><span class=\"s1\"> old PCCs into </span><span class=\"si\">{}</span><span class=\"s1\"> new PCCs&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n                <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">),</span> <span class=\"n\">n_old</span><span class=\"p\">,</span> <span class=\"n\">n_new</span><span class=\"p\">))</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">splits</span></div>\n        <span class=\"c1\"># print(ub.repr2(delta, nl=2))</span>\n\n<div class=\"viewcode-block\" id=\"MiscHelpers.add_aids\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.core.MiscHelpers.add_aids\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">add_aids</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"n\">nids</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        CommandLine:</span>\n<span class=\"sd\">            python -m ibeis.algo.graph.core add_aids --show</span>\n\n<span class=\"sd\">        Doctest:</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.algo.graph.core import *  # NOQA</span>\n<span class=\"sd\">            &gt;&gt;&gt; aids_ = [1, 2, 3, 4, 5, 6, 7, 9]</span>\n<span class=\"sd\">            &gt;&gt;&gt; infr = AnnotInference(ibs=None, aids=aids_, autoinit=True)</span>\n<span class=\"sd\">            &gt;&gt;&gt; aids = [2, 22, 7, 9, 8]</span>\n<span class=\"sd\">            &gt;&gt;&gt; nids = None</span>\n<span class=\"sd\">            &gt;&gt;&gt; infr.add_aids(aids, nids)</span>\n<span class=\"sd\">            &gt;&gt;&gt; result = infr.aids</span>\n<span class=\"sd\">            &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">            &gt;&gt;&gt; assert len(infr.graph) == len(infr.aids)</span>\n<span class=\"sd\">            [1, 2, 3, 4, 5, 6, 7, 9, 22, 8]</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">nids</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_rectify_nids</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"n\">nids</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">nids</span><span class=\"p\">),</span> <span class=\"s1\">&#39;must correspond&#39;</span>\n        <span class=\"k\">if</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">aids</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">nids</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_rectify_nids</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"n\">nids</span><span class=\"p\">)</span>\n            <span class=\"c1\"># Set object attributes</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">aids</span> <span class=\"o\">=</span> <span class=\"n\">aids</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">aids_set</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">aids</span><span class=\"p\">)</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">orig_name_labels</span> <span class=\"o\">=</span> <span class=\"n\">nids</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">aid_to_idx</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">make_index_lookup</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">aids</span><span class=\"p\">)</span>\n            <span class=\"n\">orig_idxs</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dict_take</span><span class=\"p\">(</span><span class=\"n\">aid_to_idx</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n            <span class=\"n\">new_flags</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flag_None_items</span><span class=\"p\">(</span><span class=\"n\">orig_idxs</span><span class=\"p\">)</span>\n            <span class=\"n\">new_aids</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"n\">new_flags</span><span class=\"p\">)</span>\n            <span class=\"n\">new_nids</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">nids</span><span class=\"p\">,</span> <span class=\"n\">new_flags</span><span class=\"p\">)</span>\n            <span class=\"c1\"># Extend object attributes</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">aids</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">new_aids</span><span class=\"p\">)</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">orig_name_labels</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">new_nids</span><span class=\"p\">)</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">aids_set</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">new_aids</span><span class=\"p\">)</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">update_node_attributes</span><span class=\"p\">(</span><span class=\"n\">new_aids</span><span class=\"p\">,</span> <span class=\"n\">new_nids</span><span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">graph</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_nodes_from</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">)</span>\n                <span class=\"k\">for</span> <span class=\"n\">subgraph</span> <span class=\"ow\">in</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">review_graphs</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">():</span>\n                    <span class=\"n\">subgraph</span><span class=\"o\">.</span><span class=\"n\">add_nodes_from</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">)</span>\n            <span class=\"n\">nids</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">node_labels</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">aids</span><span class=\"p\">))</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">neg_metagraph</span><span class=\"o\">.</span><span class=\"n\">add_nodes_from</span><span class=\"p\">(</span><span class=\"n\">nids</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"MiscHelpers.update_node_attributes\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.core.MiscHelpers.update_node_attributes\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">update_node_attributes</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">nids</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">aids</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">aids</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">aids</span>\n            <span class=\"n\">nids</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">orig_name_labels</span>\n        <span class=\"k\">assert</span> <span class=\"n\">aids</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">&#39;must have aids&#39;</span>\n        <span class=\"k\">assert</span> <span class=\"n\">nids</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">&#39;must have nids&#39;</span>\n        <span class=\"n\">node_to_aid</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">aid</span><span class=\"p\">:</span> <span class=\"n\">aid</span> <span class=\"k\">for</span> <span class=\"n\">aid</span> <span class=\"ow\">in</span> <span class=\"n\">aids</span><span class=\"p\">}</span>\n        <span class=\"n\">node_to_nid</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">aid</span><span class=\"p\">:</span> <span class=\"n\">nid</span> <span class=\"k\">for</span> <span class=\"n\">aid</span><span class=\"p\">,</span> <span class=\"n\">nid</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"n\">nids</span><span class=\"p\">)}</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">assert_eq_len</span><span class=\"p\">(</span><span class=\"n\">node_to_nid</span><span class=\"p\">,</span> <span class=\"n\">node_to_aid</span><span class=\"p\">)</span>\n\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_nodes_from</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">subgraph</span> <span class=\"ow\">in</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">review_graphs</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">():</span>\n            <span class=\"n\">subgraph</span><span class=\"o\">.</span><span class=\"n\">add_nodes_from</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">)</span>\n\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">set_node_attrs</span><span class=\"p\">(</span><span class=\"s1\">&#39;aid&#39;</span><span class=\"p\">,</span> <span class=\"n\">node_to_aid</span><span class=\"p\">)</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">set_node_attrs</span><span class=\"p\">(</span><span class=\"s1\">&#39;name_label&#39;</span><span class=\"p\">,</span> <span class=\"n\">node_to_nid</span><span class=\"p\">)</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">set_node_attrs</span><span class=\"p\">(</span><span class=\"s1\">&#39;orig_name_label&#39;</span><span class=\"p\">,</span> <span class=\"n\">node_to_nid</span><span class=\"p\">)</span></div>\n        <span class=\"c1\"># TODO: depricate these, they will always be identity I think</span>\n\n<div class=\"viewcode-block\" id=\"MiscHelpers.initialize_graph\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.core.MiscHelpers.initialize_graph\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">initialize_graph</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">graph</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;initialize_graph&#39;</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">graph</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">graph</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_graph_cls</span><span class=\"p\">()</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">graph</span> <span class=\"o\">=</span> <span class=\"n\">graph</span>\n\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">review_graphs</span><span class=\"p\">[</span><span class=\"n\">POSTV</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">nx_dynamic_graph</span><span class=\"o\">.</span><span class=\"n\">DynConnGraph</span><span class=\"p\">()</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">review_graphs</span><span class=\"p\">[</span><span class=\"n\">NEGTV</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_graph_cls</span><span class=\"p\">()</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">review_graphs</span><span class=\"p\">[</span><span class=\"n\">INCMP</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_graph_cls</span><span class=\"p\">()</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">review_graphs</span><span class=\"p\">[</span><span class=\"n\">UNKWN</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_graph_cls</span><span class=\"p\">()</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">review_graphs</span><span class=\"p\">[</span><span class=\"n\">UNREV</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_graph_cls</span><span class=\"p\">()</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">graph</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">d</span> <span class=\"ow\">in</span> <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n                <span class=\"n\">evidence_decision</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">,</span> <span class=\"n\">UNREV</span><span class=\"p\">)</span>\n                <span class=\"n\">meta_decision</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;meta_decision&#39;</span><span class=\"p\">,</span> <span class=\"n\">NULL</span><span class=\"p\">)</span>\n                <span class=\"n\">decision</span> <span class=\"o\">=</span> <span class=\"n\">_rectify_decision</span><span class=\"p\">(</span><span class=\"n\">evidence_decision</span><span class=\"p\">,</span> <span class=\"n\">meta_decision</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">decision</span> <span class=\"ow\">in</span> <span class=\"p\">{</span><span class=\"n\">POSTV</span><span class=\"p\">,</span> <span class=\"n\">NEGTV</span><span class=\"p\">,</span> <span class=\"n\">INCMP</span><span class=\"p\">,</span> <span class=\"n\">UNREV</span><span class=\"p\">,</span> <span class=\"n\">UNKWN</span><span class=\"p\">}:</span>\n                    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">review_graphs</span><span class=\"p\">[</span><span class=\"n\">decision</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s1\">&#39;Unknown decision=</span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">decision</span><span class=\"p\">,))</span>\n\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">update_node_attributes</span><span class=\"p\">()</span></div>\n\n<div class=\"viewcode-block\" id=\"MiscHelpers.log_message\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.core.MiscHelpers.log_message\">[docs]</a>    <span class=\"nd\">@profile</span>\n    <span class=\"k\">def</span> <span class=\"nf\">log_message</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">color</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;blue&#39;</span>\n\n        <span class=\"k\">if</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Record the name of the calling function</span>\n            <span class=\"n\">parent_name</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_parent_frame</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">f_code</span><span class=\"o\">.</span><span class=\"n\">co_name</span>\n            <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;[</span><span class=\"si\">{}</span><span class=\"s1\">] &#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">parent_name</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">msg</span>\n\n        <span class=\"k\">if</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Append the message to an internal log deque</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">logs</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">msg</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"p\">))</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">logs</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">logs</span><span class=\"o\">.</span><span class=\"n\">maxlen</span><span class=\"p\">:</span>\n                <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">log_index</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">log_index</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">verbose</span> <span class=\"o\">&gt;=</span> <span class=\"n\">level</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Print the message to stdout</span>\n            <span class=\"n\">loglevel</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">INFO</span>\n            <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">cprint</span><span class=\"p\">(</span><span class=\"s1\">&#39;[infr] &#39;</span> <span class=\"o\">+</span> <span class=\"n\">msg</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">loglevel</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span>\n        <span class=\"k\">if</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Send the message to a python logger</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"n\">loglevel</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"p\">)</span>\n\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span></div>\n\n    <span class=\"nb\">print</span> <span class=\"o\">=</span> <span class=\"n\">log_message</span>\n\n<div class=\"viewcode-block\" id=\"MiscHelpers.latest_logs\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.core.MiscHelpers.latest_logs\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">latest_logs</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">colored</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">log_index</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">log_index</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">logs</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">colored</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">logs</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">logs</span><span class=\"p\">))]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">logs</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">logs</span><span class=\"p\">))]</span></div>\n\n<div class=\"viewcode-block\" id=\"MiscHelpers.dump_logs\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.core.MiscHelpers.dump_logs\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">dump_logs</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;--- &lt;LOG DUMP&gt; ---&#39;</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">msg</span><span class=\"p\">,</span> <span class=\"n\">color</span> <span class=\"ow\">in</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">logs</span><span class=\"p\">:</span>\n            <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">cprint</span><span class=\"p\">(</span><span class=\"s1\">&#39;[infr] &#39;</span> <span class=\"o\">+</span> <span class=\"n\">msg</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;--- &lt;\\LOG DUMP&gt; ---&#39;</span><span class=\"p\">)</span></div></div>\n\n\n<div class=\"viewcode-block\" id=\"AltConstructors\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.core.AltConstructors\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">AltConstructors</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"n\">_graph_cls</span> <span class=\"o\">=</span> <span class=\"n\">nx_dynamic_graph</span><span class=\"o\">.</span><span class=\"n\">NiceGraph</span>\n    <span class=\"c1\"># _graph_cls = nx.Graph</span>\n    <span class=\"c1\"># nx.Graph</span>\n    <span class=\"c1\"># _graph_cls = nx.DiGraph</span>\n\n<div class=\"viewcode-block\" id=\"AltConstructors.from_pairs\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.core.AltConstructors.from_pairs\">[docs]</a>    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">from_pairs</span><span class=\"p\">(</span><span class=\"n\">AnnotInference</span><span class=\"p\">,</span> <span class=\"n\">aid_pairs</span><span class=\"p\">,</span> <span class=\"n\">attrs</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">ibs</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">networkx</span> <span class=\"k\">as</span> <span class=\"nn\">nx</span>\n        <span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">AnnotInference</span><span class=\"o\">.</span><span class=\"n\">_graph_cls</span><span class=\"p\">()</span>\n        <span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"nb\">any</span><span class=\"p\">([</span><span class=\"n\">a1</span> <span class=\"o\">==</span> <span class=\"n\">a2</span> <span class=\"k\">for</span> <span class=\"n\">a1</span><span class=\"p\">,</span> <span class=\"n\">a2</span> <span class=\"ow\">in</span> <span class=\"n\">aid_pairs</span><span class=\"p\">]),</span> <span class=\"s1\">&#39;cannot have self-edges&#39;</span>\n        <span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">add_edges_from</span><span class=\"p\">(</span><span class=\"n\">aid_pairs</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">attrs</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">attrs</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">():</span>\n                <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">set_edge_attributes</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">values</span><span class=\"o\">=</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dzip</span><span class=\"p\">(</span><span class=\"n\">aid_pairs</span><span class=\"p\">,</span> <span class=\"n\">attrs</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]))</span>\n        <span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">AnnotInference</span><span class=\"o\">.</span><span class=\"n\">from_netx</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">,</span> <span class=\"n\">ibs</span><span class=\"o\">=</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">verbose</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">infr</span></div>\n\n<div class=\"viewcode-block\" id=\"AltConstructors.from_netx\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.core.AltConstructors.from_netx\">[docs]</a>    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">from_netx</span><span class=\"p\">(</span><span class=\"n\">AnnotInference</span><span class=\"p\">,</span> <span class=\"n\">G</span><span class=\"p\">,</span> <span class=\"n\">ibs</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">infer</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"n\">aids</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">nodes</span><span class=\"p\">())</span>\n        <span class=\"k\">if</span> <span class=\"n\">ibs</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">nids</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">nids</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">a</span> <span class=\"k\">for</span> <span class=\"n\">a</span> <span class=\"ow\">in</span> <span class=\"n\">aids</span><span class=\"p\">]</span>\n        <span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">AnnotInference</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"n\">nids</span><span class=\"p\">,</span> <span class=\"n\">autoinit</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                              <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">verbose</span><span class=\"p\">)</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">initialize_graph</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"o\">=</span><span class=\"n\">G</span><span class=\"p\">)</span>\n        <span class=\"c1\"># hack</span>\n        <span class=\"n\">orig_name_labels</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">node_label</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">a</span> <span class=\"ow\">in</span> <span class=\"n\">aids</span><span class=\"p\">]</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">orig_name_labels</span> <span class=\"o\">=</span> <span class=\"n\">orig_name_labels</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">set_node_attrs</span><span class=\"p\">(</span><span class=\"s1\">&#39;orig_name_label&#39;</span><span class=\"p\">,</span>\n                            <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dzip</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"n\">orig_name_labels</span><span class=\"p\">))</span>\n        <span class=\"k\">if</span> <span class=\"n\">infer</span><span class=\"p\">:</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">apply_nondynamic_update</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">infr</span></div>\n\n<div class=\"viewcode-block\" id=\"AltConstructors.from_qreq_\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.core.AltConstructors.from_qreq_\">[docs]</a>    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">from_qreq_</span><span class=\"p\">(</span><span class=\"n\">AnnotInference</span><span class=\"p\">,</span> <span class=\"n\">qreq_</span><span class=\"p\">,</span> <span class=\"n\">cm_list</span><span class=\"p\">,</span> <span class=\"n\">autoinit</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Create a AnnotInference object using a precomputed query / results</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># raise NotImplementedError(&#39;do not use&#39;)</span>\n        <span class=\"n\">aids</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">unique</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">([</span><span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">qaids</span><span class=\"p\">,</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">daids</span><span class=\"p\">]))</span>\n        <span class=\"n\">nids</span> <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">get_qreq_annot_nids</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">)</span>\n        <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">ibs</span>\n        <span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">AnnotInference</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"n\">nids</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">autoinit</span><span class=\"o\">=</span><span class=\"n\">autoinit</span><span class=\"p\">)</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">cm_list</span> <span class=\"o\">=</span> <span class=\"n\">cm_list</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">qreq_</span> <span class=\"o\">=</span> <span class=\"n\">qreq_</span>\n        <span class=\"k\">return</span> <span class=\"n\">infr</span></div>\n\n<div class=\"viewcode-block\" id=\"AltConstructors.status\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.core.AltConstructors.status\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">status</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">extended</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"n\">status_dict</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">odict</span><span class=\"p\">([</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;nNodes&#39;</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">aids</span><span class=\"p\">)),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;nEdges&#39;</span><span class=\"p\">,</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">number_of_edges</span><span class=\"p\">()),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;nCCs&#39;</span><span class=\"p\">,</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">number_of_components</span><span class=\"p\">()),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;nPostvEdges&#39;</span><span class=\"p\">,</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">number_of_edges</span><span class=\"p\">()),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;nNegtvEdges&#39;</span><span class=\"p\">,</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">neg_graph</span><span class=\"o\">.</span><span class=\"n\">number_of_edges</span><span class=\"p\">()),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;nIncmpEdges&#39;</span><span class=\"p\">,</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">incomp_graph</span><span class=\"o\">.</span><span class=\"n\">number_of_edges</span><span class=\"p\">()),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;nUnrevEdges&#39;</span><span class=\"p\">,</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">unreviewed_graph</span><span class=\"o\">.</span><span class=\"n\">number_of_edges</span><span class=\"p\">()),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;nPosRedunCCs&#39;</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_redun_nids</span><span class=\"p\">)),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;nNegRedunPairs&#39;</span><span class=\"p\">,</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">neg_redun_metagraph</span><span class=\"o\">.</span><span class=\"n\">number_of_edges</span><span class=\"p\">()),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;nInconsistentCCs&#39;</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">nid_to_errors</span><span class=\"p\">)),</span>\n            <span class=\"c1\">#(&#39;nUnkwnEdges&#39;, infr.unknown_graph.number_of_edges()),</span>\n        <span class=\"p\">])</span>\n        <span class=\"k\">if</span> <span class=\"n\">extended</span><span class=\"p\">:</span>\n            <span class=\"k\">def</span> <span class=\"nf\">count_within_between</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">):</span>\n                <span class=\"n\">n_within</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n                <span class=\"n\">n_between</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n                <span class=\"k\">for</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">edges</span><span class=\"p\">:</span>\n                    <span class=\"n\">nid1</span><span class=\"p\">,</span> <span class=\"n\">nid2</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">node_labels</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n                    <span class=\"k\">if</span> <span class=\"n\">nid1</span> <span class=\"o\">==</span> <span class=\"n\">nid2</span><span class=\"p\">:</span>\n                        <span class=\"n\">n_within</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"n\">n_between</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                <span class=\"k\">return</span> <span class=\"n\">n_within</span><span class=\"p\">,</span> <span class=\"n\">n_between</span>\n\n            <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">count_within_between</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">neg_graph</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">())</span>\n            <span class=\"n\">status_dict</span><span class=\"p\">[</span><span class=\"s1\">&#39;nNegEdgesWithin&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">a</span>\n            <span class=\"n\">status_dict</span><span class=\"p\">[</span><span class=\"s1\">&#39;nNegEdgesBetween&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">b</span>\n\n            <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">count_within_between</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">incomp_graph</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">())</span>\n            <span class=\"n\">status_dict</span><span class=\"p\">[</span><span class=\"s1\">&#39;nIncompEdgesWithin&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">a</span>\n            <span class=\"n\">status_dict</span><span class=\"p\">[</span><span class=\"s1\">&#39;nIncompEdgesBetween&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">b</span>\n\n            <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">count_within_between</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">unreviewed_graph</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">())</span>\n            <span class=\"n\">status_dict</span><span class=\"p\">[</span><span class=\"s1\">&#39;nUnrevEdgesWithin&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">a</span>\n            <span class=\"n\">status_dict</span><span class=\"p\">[</span><span class=\"s1\">&#39;nUrevEdgesBetween&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">b</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">status_dict</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__nice__</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">graph</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s1\">&#39;nAids=</span><span class=\"si\">%r</span><span class=\"s1\">, G=None&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">aids</span><span class=\"p\">))</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">fmt</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;nNodes=</span><span class=\"si\">{}</span><span class=\"s1\">, nEdges=</span><span class=\"si\">{}</span><span class=\"s1\">, nCCs=</span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span>\n            <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n                <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">aids</span><span class=\"p\">),</span>\n                <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">number_of_edges</span><span class=\"p\">(),</span>\n                <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">number_of_components</span><span class=\"p\">(),</span>\n                <span class=\"c1\"># infr.incomp_graph.number_of_edges(),</span>\n                <span class=\"c1\"># infr.unreviewed_graph.number_of_edges(),</span>\n            <span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">msg</span></div>\n            <span class=\"c1\"># return &#39;nAids={}, nEdges={}, nCCs={}&#39;.format(</span>\n            <span class=\"c1\">#     len(infr.aids),</span>\n            <span class=\"c1\">#     infr.graph.number_of_edges(),</span>\n            <span class=\"c1\">#     infr.pos_graph.number_of_components()</span>\n            <span class=\"c1\"># )</span>\n\n\n<div class=\"viewcode-block\" id=\"AnnotInference\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.core.AnnotInference\">[docs]</a><span class=\"nd\">@six</span><span class=\"o\">.</span><span class=\"n\">add_metaclass</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ReloadingMetaclass</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">AnnotInference</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">NiceRepr</span><span class=\"p\">,</span>\n                     <span class=\"c1\"># Old internal stuffs</span>\n                     <span class=\"n\">AltConstructors</span><span class=\"p\">,</span>\n                     <span class=\"n\">MiscHelpers</span><span class=\"p\">,</span>\n                     <span class=\"n\">Feedback</span><span class=\"p\">,</span>\n                     <span class=\"n\">NameRelabel</span><span class=\"p\">,</span>\n                     <span class=\"c1\"># New core algorithm stuffs</span>\n                     <span class=\"n\">mixin_dynamic</span><span class=\"o\">.</span><span class=\"n\">NonDynamicUpdate</span><span class=\"p\">,</span>\n                     <span class=\"n\">mixin_dynamic</span><span class=\"o\">.</span><span class=\"n\">Recovery</span><span class=\"p\">,</span>\n                     <span class=\"n\">mixin_dynamic</span><span class=\"o\">.</span><span class=\"n\">Consistency</span><span class=\"p\">,</span>\n                     <span class=\"n\">mixin_dynamic</span><span class=\"o\">.</span><span class=\"n\">Redundancy</span><span class=\"p\">,</span>\n                     <span class=\"n\">mixin_dynamic</span><span class=\"o\">.</span><span class=\"n\">DynamicUpdate</span><span class=\"p\">,</span>\n                     <span class=\"n\">mixin_priority</span><span class=\"o\">.</span><span class=\"n\">Priority</span><span class=\"p\">,</span>\n                     <span class=\"n\">mixin_matching</span><span class=\"o\">.</span><span class=\"n\">CandidateSearch</span><span class=\"p\">,</span>\n                     <span class=\"n\">mixin_matching</span><span class=\"o\">.</span><span class=\"n\">InfrLearning</span><span class=\"p\">,</span>\n                     <span class=\"n\">mixin_matching</span><span class=\"o\">.</span><span class=\"n\">AnnotInfrMatching</span><span class=\"p\">,</span>\n                     <span class=\"c1\"># General helpers</span>\n                     <span class=\"n\">mixin_helpers</span><span class=\"o\">.</span><span class=\"n\">AssertInvariants</span><span class=\"p\">,</span>\n                     <span class=\"n\">mixin_helpers</span><span class=\"o\">.</span><span class=\"n\">DummyEdges</span><span class=\"p\">,</span>\n                     <span class=\"n\">mixin_helpers</span><span class=\"o\">.</span><span class=\"n\">Convenience</span><span class=\"p\">,</span>\n                     <span class=\"n\">mixin_helpers</span><span class=\"o\">.</span><span class=\"n\">AttrAccess</span><span class=\"p\">,</span>\n                     <span class=\"c1\"># Simulation and Loops</span>\n                     <span class=\"n\">mixin_simulation</span><span class=\"o\">.</span><span class=\"n\">SimulationHelpers</span><span class=\"p\">,</span>\n                     <span class=\"n\">mixin_loops</span><span class=\"o\">.</span><span class=\"n\">InfrReviewers</span><span class=\"p\">,</span>\n                     <span class=\"n\">mixin_loops</span><span class=\"o\">.</span><span class=\"n\">InfrLoops</span><span class=\"p\">,</span>\n                     <span class=\"c1\"># Visualization</span>\n                     <span class=\"n\">mixin_viz</span><span class=\"o\">.</span><span class=\"n\">GraphVisualization</span><span class=\"p\">,</span>\n                     <span class=\"c1\"># plugging into IBEIS</span>\n                     <span class=\"n\">mixin_groundtruth</span><span class=\"o\">.</span><span class=\"n\">Groundtruth</span><span class=\"p\">,</span>\n                     <span class=\"n\">mixin_ibeis</span><span class=\"o\">.</span><span class=\"n\">IBEISIO</span><span class=\"p\">,</span>\n                     <span class=\"n\">mixin_ibeis</span><span class=\"o\">.</span><span class=\"n\">IBEISGroundtruth</span><span class=\"p\">,</span>\n                     <span class=\"c1\"># _dep_mixins._AnnotInfrDepMixin,</span>\n                     <span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    class for maintaining state of an identification</span>\n\n<span class=\"sd\">    Terminology and Concepts:</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        ibeis make_qt_graph_interface --show --aids=1,2,3,4,5,6,7</span>\n<span class=\"sd\">        ibeis AnnotInference:0 --show</span>\n<span class=\"sd\">        ibeis AnnotInference:1 --show</span>\n<span class=\"sd\">        ibeis AnnotInference:2 --show</span>\n\n<span class=\"sd\">        ibeis AnnotInference:0 --loginfr</span>\n\n<span class=\"sd\">    Doctest:</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.algo.graph.core import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(defaultdb=&#39;PZ_MTEST&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; aids = [1, 2, 3, 4, 5, 6]</span>\n<span class=\"sd\">        &gt;&gt;&gt; infr = AnnotInference(ibs, aids, autoinit=True, verbose=1000)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = (&#39;infr = %s&#39; % (infr,))</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.quit_if_noshow()</span>\n<span class=\"sd\">        &gt;&gt;&gt; use_image = True</span>\n<span class=\"sd\">        &gt;&gt;&gt; infr.initialize_visual_node_attrs()</span>\n<span class=\"sd\">        &gt;&gt;&gt; # Note that there are initially no edges</span>\n<span class=\"sd\">        &gt;&gt;&gt; infr.show_graph(use_image=use_image)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.show_if_requested()</span>\n<span class=\"sd\">        infr = &lt;AnnotInference(nNodes=6, nEdges=0, nCCs=6)&gt;</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # SCRIPT</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.algo.graph.core import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(defaultdb=&#39;PZ_MTEST&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; aids = [1, 2, 3, 4, 5, 6, 7, 9]</span>\n<span class=\"sd\">        &gt;&gt;&gt; infr = AnnotInference(ibs, aids, autoinit=True)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = (&#39;infr = %s&#39; % (infr,))</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.quit_if_noshow()</span>\n<span class=\"sd\">        &gt;&gt;&gt; use_image = False</span>\n<span class=\"sd\">        &gt;&gt;&gt; infr.initialize_visual_node_attrs()</span>\n<span class=\"sd\">        &gt;&gt;&gt; # Note that there are initially no edges</span>\n<span class=\"sd\">        &gt;&gt;&gt; infr.show_graph(use_image=use_image)</span>\n<span class=\"sd\">        &gt;&gt;&gt; # But we can add nodes between the same names</span>\n<span class=\"sd\">        &gt;&gt;&gt; infr.ensure_mst()</span>\n<span class=\"sd\">        &gt;&gt;&gt; infr.show_graph(use_image=use_image)</span>\n<span class=\"sd\">        &gt;&gt;&gt; # Add some feedback</span>\n<span class=\"sd\">        &gt;&gt;&gt; infr.add_feedback((1, 4), NEGTV)</span>\n<span class=\"sd\">        &gt;&gt;&gt; infr.apply_feedback_edges()</span>\n<span class=\"sd\">        &gt;&gt;&gt; infr.show_graph(use_image=use_image)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.show_if_requested()</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # SCRIPT</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.algo.graph.core import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(defaultdb=&#39;PZ_MTEST&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; aids = [1, 2, 3, 4, 5, 6, 7, 9]</span>\n<span class=\"sd\">        &gt;&gt;&gt; infr = AnnotInference(ibs, aids, autoinit=True)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = (&#39;infr = %s&#39; % (infr,))</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.quit_if_noshow()</span>\n<span class=\"sd\">        &gt;&gt;&gt; use_image = False</span>\n<span class=\"sd\">        &gt;&gt;&gt; infr.initialize_visual_node_attrs()</span>\n<span class=\"sd\">        &gt;&gt;&gt; infr.ensure_mst()</span>\n<span class=\"sd\">        &gt;&gt;&gt; # Add some feedback</span>\n<span class=\"sd\">        &gt;&gt;&gt; infr.add_feedback((1, 4), NEGTV)</span>\n<span class=\"sd\">        &gt;&gt;&gt; try:</span>\n<span class=\"sd\">        &gt;&gt;&gt;     infr.add_feedback((1, 10), NEGTV)</span>\n<span class=\"sd\">        &gt;&gt;&gt; except ValueError:</span>\n<span class=\"sd\">        &gt;&gt;&gt;     pass</span>\n<span class=\"sd\">        &gt;&gt;&gt; try:</span>\n<span class=\"sd\">        &gt;&gt;&gt;     infr.add_feedback((11, 12), NEGTV)</span>\n<span class=\"sd\">        &gt;&gt;&gt; except ValueError:</span>\n<span class=\"sd\">        &gt;&gt;&gt;     pass</span>\n<span class=\"sd\">        &gt;&gt;&gt; infr.apply_feedback_edges()</span>\n<span class=\"sd\">        &gt;&gt;&gt; infr.show_graph(use_image=use_image)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.show_if_requested()</span>\n\n<span class=\"sd\">    Ignore:</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; import utool as ut</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(defaultdb=&#39;PZ_MTEST&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; infr = ibeis.AnnotInference(ibs, &#39;all&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; class_ = infr</span>\n<span class=\"sd\">        &gt;&gt;&gt; fpath = None</span>\n<span class=\"sd\">        &gt;&gt;&gt; static_attrs = ut.check_static_member_vars(class_, fpath)</span>\n<span class=\"sd\">        &gt;&gt;&gt; uninitialized = set(infr.__dict__.keys()) - set(static_attrs)</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__getstate__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n        <span class=\"c1\"># Dont pickle generators</span>\n        <span class=\"n\">state</span><span class=\"p\">[</span><span class=\"s1\">&#39;_gen&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">state</span><span class=\"p\">[</span><span class=\"s1\">&#39;logger&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">return</span> <span class=\"n\">state</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"o\">=</span><span class=\"p\">[],</span> <span class=\"n\">nids</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">autoinit</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Ignore:</span>\n<span class=\"sd\">            pass</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># infr.verbose = verbose</span>\n\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">verbose</span> <span class=\"o\">=</span> <span class=\"n\">verbose</span>\n\n        <span class=\"c1\"># ibeis controller and initial nodes</span>\n        <span class=\"c1\"># TODO: aids can be abstracted as a property that simply looks at the</span>\n        <span class=\"c1\"># nodes in infr.graph.</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">six</span><span class=\"o\">.</span><span class=\"n\">string_types</span><span class=\"p\">):</span>\n            <span class=\"kn\">import</span> <span class=\"nn\">ibeis</span>\n            <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">opendb</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># setup logging</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">do_logging</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argflag</span><span class=\"p\">((</span><span class=\"s1\">&#39;--loginfr&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;--log-infr&#39;</span><span class=\"p\">))</span>\n        <span class=\"c1\"># do_logging = True</span>\n        <span class=\"k\">if</span> <span class=\"n\">do_logging</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">ibs</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"kn\">from</span> <span class=\"nn\">os.path</span> <span class=\"k\">import</span> <span class=\"n\">join</span>\n                <span class=\"c1\"># import ubelt as ub</span>\n                <span class=\"c1\"># logdir = ibs.get_logdir_local()</span>\n                <span class=\"n\">logdir</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;.&#39;</span>\n                <span class=\"n\">logname</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;AnnotInference&#39;</span> <span class=\"o\">+</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">timestamp</span><span class=\"p\">()</span>\n                <span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"n\">logname</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">handlers</span><span class=\"p\">:</span>\n                    <span class=\"n\">fh</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">FileHandler</span><span class=\"p\">(</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">logdir</span><span class=\"p\">,</span> <span class=\"n\">logname</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;.log&#39;</span><span class=\"p\">))</span>\n                    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;logger.handlers = </span><span class=\"si\">{!r}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">handlers</span><span class=\"p\">))</span>\n                    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">fh</span><span class=\"p\">)</span>\n                <span class=\"c1\"># logger.setLevel(logging.INFO)</span>\n                <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">setLevel</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n                <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logger</span>\n\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">logs</span> <span class=\"o\">=</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">deque</span><span class=\"p\">(</span><span class=\"n\">maxlen</span><span class=\"o\">=</span><span class=\"mi\">10000</span><span class=\"p\">)</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">log_index</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;__init__ queue&#39;</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># If not dirty, new feedback should dynamically maintain a consistent</span>\n        <span class=\"c1\"># state. If dirty it means we need to recompute connected compoments</span>\n        <span class=\"c1\"># before we can continue with dynamic review.</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">dirty</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">readonly</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">aids</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">aids_set</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">orig_name_labels</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n        <span class=\"c1\"># Underlying graph structure</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">graph</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">review_graphs</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"n\">POSTV</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n            <span class=\"n\">NEGTV</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n            <span class=\"n\">INCMP</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n            <span class=\"n\">UNKWN</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n            <span class=\"n\">UNREV</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;__init__ structures&#39;</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Criterion</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">queue</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">PriorityQueue</span><span class=\"p\">()</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">refresh</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">review_counter</span> <span class=\"o\">=</span> <span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">nid_counter</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n        <span class=\"c1\"># Dynamic Properties (requires bookkeeping)</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">nid_to_errors</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">recovery_ccs</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n        <span class=\"c1\"># Recover graph holds positive edges of inconsistent PCCs</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">recover_graph</span> <span class=\"o\">=</span> <span class=\"n\">nx_dynamic_graph</span><span class=\"o\">.</span><span class=\"n\">DynConnGraph</span><span class=\"p\">()</span>\n        <span class=\"c1\"># Set of PCCs that are positive redundant</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_redun_nids</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">([])</span>\n        <span class=\"c1\"># Represents the metagraph of negative edges between PCCs</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">neg_redun_metagraph</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_graph_cls</span><span class=\"p\">()</span>\n        <span class=\"c1\"># NEW VERSION: metagraph of PCCs with ANY number of negative edges</span>\n        <span class=\"c1\"># between them. The weight on the edge should represent the strength.</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">neg_metagraph</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_graph_cls</span><span class=\"p\">()</span>\n\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;__init__ feedback&#39;</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># This should represent The feedback read from a database. We do not</span>\n        <span class=\"c1\"># need to do any updates to an external database based on this data.</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">external_feedback</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ddict</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Feedback that has not been synced with the external database.</span>\n        <span class=\"c1\"># Once we sync, this is merged into external feedback.</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">internal_feedback</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ddict</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Bookkeeping</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">edge_truth</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">task_probs</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ddict</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># A generator that maintains the state of the algorithm</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_gen</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n        <span class=\"c1\"># Computer vision algorithms</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">ranker</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">verifiers</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;__init__ configuration&#39;</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"c1\"># TODO: move to params</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">task_thresh_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;zebra_grevys&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"s1\">&#39;match_state&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                    <span class=\"n\">POSTV</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">inf</span><span class=\"p\">,</span>  <span class=\"c1\"># GGR2 - 0.7732</span>\n                    <span class=\"n\">NEGTV</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">inf</span><span class=\"p\">,</span>  <span class=\"c1\"># GGR2 - 0.8605</span>\n                    <span class=\"n\">INCMP</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">inf</span><span class=\"p\">,</span>\n                <span class=\"p\">},</span>\n                <span class=\"s1\">&#39;photobomb_state&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                    <span class=\"s1\">&#39;pb&#39;</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">inf</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;nopb&#39;</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">inf</span><span class=\"p\">,</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">},</span>\n            <span class=\"s1\">&#39;zebra_plains&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"s1\">&#39;match_state&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                    <span class=\"n\">POSTV</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">inf</span><span class=\"p\">,</span>\n                    <span class=\"n\">NEGTV</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">inf</span><span class=\"p\">,</span>\n                    <span class=\"n\">INCMP</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">inf</span><span class=\"p\">,</span>\n                <span class=\"p\">},</span>\n                <span class=\"s1\">&#39;photobomb_state&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                    <span class=\"s1\">&#39;pb&#39;</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">inf</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;nopb&#39;</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">inf</span><span class=\"p\">,</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">},</span>\n            <span class=\"s1\">&#39;giraffe_reticulated&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"s1\">&#39;match_state&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                    <span class=\"n\">POSTV</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">inf</span><span class=\"p\">,</span>  <span class=\"c1\"># GGR2 - 0.7460</span>\n                    <span class=\"n\">NEGTV</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">inf</span><span class=\"p\">,</span>  <span class=\"c1\"># GGR2 - 0.8876</span>\n                    <span class=\"n\">INCMP</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">inf</span><span class=\"p\">,</span>\n                <span class=\"p\">},</span>\n                <span class=\"s1\">&#39;photobomb_state&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                    <span class=\"s1\">&#39;pb&#39;</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">inf</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;nopb&#39;</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">inf</span><span class=\"p\">,</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">},</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">task_thresh</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n        <span class=\"c1\"># Parameters / Configurations / Callbacks</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">callbacks</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;request_review&#39;</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;review_ready&#39;</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;review_finished&#39;</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;manual.n_peek&#39;</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;manual.autosave&#39;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n\n            <span class=\"s1\">&#39;ranking.enabled&#39;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;ranking.ntop&#39;</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span>\n\n            <span class=\"s1\">&#39;algo.max_outer_loops&#39;</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;algo.quickstart&#39;</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;algo.hardcase&#39;</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n\n            <span class=\"c1\"># Dynamic Inference</span>\n            <span class=\"s1\">&#39;inference.enabled&#39;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;inference.update_attrs&#39;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n\n            <span class=\"c1\"># Termination / Refresh</span>\n            <span class=\"s1\">&#39;refresh.window&#39;</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;refresh.patience&#39;</span><span class=\"p\">:</span> <span class=\"mi\">72</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;refresh.thresh&#39;</span><span class=\"p\">:</span> <span class=\"mf\">0.052</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;refresh.method&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;binomial&#39;</span><span class=\"p\">,</span>\n\n            <span class=\"c1\"># Redundancy</span>\n            <span class=\"c1\"># if redun.enabled is True, then redundant edges will be ignored by</span>\n            <span class=\"c1\"># # the priority queue and extra edges needed to achieve minimum</span>\n            <span class=\"c1\"># redundancy will be searched for if the queue is empty.</span>\n            <span class=\"s1\">&#39;redun.enabled&#39;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"c1\"># positive/negative k</span>\n            <span class=\"s1\">&#39;redun.pos&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;redun.neg&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n            <span class=\"c1\"># does positive/negative augmentation</span>\n            <span class=\"s1\">&#39;redun.enforce_pos&#39;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;redun.enforce_neg&#39;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"c1\"># prevents user interaction in final phase</span>\n            <span class=\"s1\">&#39;redun.neg.only_auto&#39;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n\n            <span class=\"c1\"># Only review CCs connected by confidence less than this value</span>\n            <span class=\"c1\"># a good values is &#39;pretty_sure&#39;</span>\n            <span class=\"s1\">&#39;queue.conf.thresh&#39;</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n\n            <span class=\"c1\"># Autoreviewer params</span>\n            <span class=\"s1\">&#39;autoreview.enabled&#39;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;autoreview.prioritize_nonpos&#39;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_viz_image_config</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;in_image&#39;</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;thumbsize&#39;</span><span class=\"p\">:</span> <span class=\"mi\">221</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;__init__ storage&#39;</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">verifier_params</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>  <span class=\"c1\"># TODO</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">ranker_params</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;K&#39;</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"c1\"># Developer modes (consoldate this)</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">test_mode</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">simulation_mode</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n        <span class=\"c1\"># set to the current phase of the main loop</span>\n        <span class=\"c1\"># (mostly for testing)</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">phase</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">loop_phase</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n        <span class=\"c1\"># Testing state</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">metrics_list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">test_state</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">test_gt_pos_graph</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">nid_to_gt_cc</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">node_truth</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">real_n_pcc_mst_edges</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n        <span class=\"c1\"># External: Can we remove these?</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">cm_list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">vsone_matches</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">qreq_</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">manual_wgt</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;__init__ aids&#39;</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">aids</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;all&#39;</span><span class=\"p\">:</span>\n            <span class=\"n\">aids</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_aids</span><span class=\"p\">()</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_aids</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"n\">nids</span><span class=\"p\">)</span>\n\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;__init__ autoinit&#39;</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">autoinit</span><span class=\"p\">:</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">initialize_graph</span><span class=\"p\">()</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">autoinit</span><span class=\"p\">,</span> <span class=\"n\">six</span><span class=\"o\">.</span><span class=\"n\">string_types</span><span class=\"p\">):</span>\n                <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">reset_feedback</span><span class=\"p\">(</span><span class=\"n\">autoinit</span><span class=\"p\">)</span>\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;__init__ done&#39;</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"AnnotInference.subparams\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.core.AnnotInference.subparams\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">subparams</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">prefix</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Returns dict of params prefixed with &lt;prefix&gt;.</span>\n<span class=\"sd\">        The returned dict does not contain the prefix</span>\n\n<span class=\"sd\">        Doctest:</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.algo.graph.core import *</span>\n<span class=\"sd\">            &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">            &gt;&gt;&gt; infr = ibeis.AnnotInference(None)</span>\n<span class=\"sd\">            &gt;&gt;&gt; result = ut.repr2(infr.subparams(&#39;refresh&#39;))</span>\n<span class=\"sd\">            &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">            {&#39;method&#39;: &#39;binomial&#39;, &#39;patience&#39;: 72, &#39;thresh&#39;: 0.052, &#39;window&#39;: 20}</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">prefix_</span> <span class=\"o\">=</span> <span class=\"n\">prefix</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;.&#39;</span>\n        <span class=\"n\">subparams</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">k</span><span class=\"p\">[</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">prefix_</span><span class=\"p\">):]:</span> <span class=\"n\">v</span> <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()</span>\n                     <span class=\"k\">if</span> <span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"n\">prefix_</span><span class=\"p\">)}</span>\n        <span class=\"k\">return</span> <span class=\"n\">subparams</span></div>\n\n<div class=\"viewcode-block\" id=\"AnnotInference.copy\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.core.AnnotInference.copy\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">copy</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">):</span>\n        <span class=\"c1\"># shallow copy ibs</span>\n        <span class=\"n\">infr2</span> <span class=\"o\">=</span> <span class=\"n\">AnnotInference</span><span class=\"p\">(</span>\n            <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">aids</span><span class=\"p\">),</span>\n            <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">orig_name_labels</span><span class=\"p\">),</span> <span class=\"n\">autoinit</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n            <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">verbose</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># shallow algorithm classes</span>\n        <span class=\"n\">infr2</span><span class=\"o\">.</span><span class=\"n\">verifiers</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">verifiers</span>\n        <span class=\"n\">infr2</span><span class=\"o\">.</span><span class=\"n\">ranker</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">ranker</span>\n\n        <span class=\"n\">infr2</span><span class=\"o\">.</span><span class=\"n\">graph</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n        <span class=\"n\">infr2</span><span class=\"o\">.</span><span class=\"n\">external_feedback</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">external_feedback</span><span class=\"p\">)</span>\n        <span class=\"n\">infr2</span><span class=\"o\">.</span><span class=\"n\">internal_feedback</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">internal_feedback</span><span class=\"p\">)</span>\n        <span class=\"n\">infr2</span><span class=\"o\">.</span><span class=\"n\">cm_list</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">cm_list</span><span class=\"p\">)</span>\n        <span class=\"n\">infr2</span><span class=\"o\">.</span><span class=\"n\">qreq_</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">qreq_</span><span class=\"p\">)</span>\n        <span class=\"n\">infr2</span><span class=\"o\">.</span><span class=\"n\">nid_counter</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">nid_counter</span>\n\n        <span class=\"n\">infr2</span><span class=\"o\">.</span><span class=\"n\">recover_graph</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">recover_graph</span><span class=\"p\">)</span>\n\n        <span class=\"n\">infr2</span><span class=\"o\">.</span><span class=\"n\">pos_redun_nids</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_redun_nids</span><span class=\"p\">)</span>\n        <span class=\"n\">infr2</span><span class=\"o\">.</span><span class=\"n\">neg_redun_metagraph</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">neg_redun_metagraph</span><span class=\"p\">)</span>\n        <span class=\"n\">infr2</span><span class=\"o\">.</span><span class=\"n\">neg_metagraph</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">neg_metagraph</span><span class=\"p\">)</span>\n\n        <span class=\"n\">infr2</span><span class=\"o\">.</span><span class=\"n\">review_graphs</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">review_graphs</span><span class=\"p\">)</span>\n        <span class=\"n\">infr2</span><span class=\"o\">.</span><span class=\"n\">nid_to_errors</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">nid_to_errors</span><span class=\"p\">)</span>\n        <span class=\"n\">infr2</span><span class=\"o\">.</span><span class=\"n\">recovery_ccs</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">recovery_ccs</span><span class=\"p\">)</span>\n\n        <span class=\"n\">infr2</span><span class=\"o\">.</span><span class=\"n\">readonly</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">readonly</span>\n        <span class=\"n\">infr2</span><span class=\"o\">.</span><span class=\"n\">dirty</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">dirty</span>\n\n        <span class=\"n\">infr2</span><span class=\"o\">.</span><span class=\"n\">test_mode</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">test_mode</span>\n        <span class=\"n\">infr2</span><span class=\"o\">.</span><span class=\"n\">test_mode</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">test_mode</span>\n        <span class=\"n\">infr2</span><span class=\"o\">.</span><span class=\"n\">simulation_mode</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">simulation_mode</span>\n\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">queue</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">queue</span><span class=\"p\">)</span>\n\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">)</span>\n        <span class=\"n\">infr2</span><span class=\"o\">.</span><span class=\"n\">_viz_image_config</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_viz_image_config</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">test_mode</span><span class=\"p\">:</span>\n            <span class=\"n\">infr2</span><span class=\"o\">.</span><span class=\"n\">test_state</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">test_state</span><span class=\"p\">)</span>\n            <span class=\"n\">infr2</span><span class=\"o\">.</span><span class=\"n\">metrics_list</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">metrics_list</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">infr2</span></div>\n\n<div class=\"viewcode-block\" id=\"AnnotInference.subgraph\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.core.AnnotInference.subgraph\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">subgraph</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Makes a new inference object that is a subset of the original.</span>\n\n<span class=\"sd\">        Note, this is not robust, be careful. The subgraph should be treated as</span>\n<span class=\"sd\">        read only. Do not commit any reviews made from here.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">orig_name_labels</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">gen_node_values</span><span class=\"p\">(</span><span class=\"s1\">&#39;orig_name_label&#39;</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"p\">))</span>\n        <span class=\"n\">infr2</span> <span class=\"o\">=</span> <span class=\"n\">AnnotInference</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"n\">orig_name_labels</span><span class=\"p\">,</span>\n                               <span class=\"n\">autoinit</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">verbose</span><span class=\"p\">)</span>\n        <span class=\"c1\"># deep copy the graph structure</span>\n        <span class=\"n\">infr2</span><span class=\"o\">.</span><span class=\"n\">graph</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">subgraph</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n        <span class=\"n\">infr2</span><span class=\"o\">.</span><span class=\"n\">readonly</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"n\">infr2</span><span class=\"o\">.</span><span class=\"n\">verifiers</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">verifiers</span>\n        <span class=\"n\">infr2</span><span class=\"o\">.</span><span class=\"n\">ranker</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">ranker</span>\n\n        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">)</span>\n        <span class=\"n\">infr2</span><span class=\"o\">.</span><span class=\"n\">_viz_image_config</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_viz_image_config</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># infr2._viz_init_nodes = infr._viz_image_config</span>\n        <span class=\"c1\"># infr2._viz_image_config_dirty = infr._viz_image_config_dirty</span>\n        <span class=\"n\">infr2</span><span class=\"o\">.</span><span class=\"n\">edge_truth</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"n\">e</span><span class=\"p\">:</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">edge_truth</span><span class=\"p\">[</span><span class=\"n\">e</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">infr2</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">()</span>\n            <span class=\"k\">if</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">edge_truth</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"c1\"># TODO: internal/external feedback</span>\n\n        <span class=\"n\">infr2</span><span class=\"o\">.</span><span class=\"n\">nid_counter</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">nid_counter</span>\n        <span class=\"n\">infr2</span><span class=\"o\">.</span><span class=\"n\">dirty</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"n\">infr2</span><span class=\"o\">.</span><span class=\"n\">cm_list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">infr2</span><span class=\"o\">.</span><span class=\"n\">qreq_</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n        <span class=\"c1\"># TODO:</span>\n        <span class=\"c1\"># infr2.nid_to_errors {}  # = copy.deepcopy(infr.nid_to_errors)</span>\n        <span class=\"c1\"># infr2.recover_graph = copy.deepcopy(infr.recover_graph)</span>\n        <span class=\"c1\"># infr2.pos_redun_nids = copy.deepcopy(infr.pos_redun_nids)</span>\n        <span class=\"c1\"># infr2.neg_redun_metagraph = copy.deepcopy(infr.neg_redun_metagraph)</span>\n\n        <span class=\"n\">infr2</span><span class=\"o\">.</span><span class=\"n\">review_graphs</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">g</span> <span class=\"ow\">in</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">review_graphs</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"k\">if</span> <span class=\"n\">g</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">infr2</span><span class=\"o\">.</span><span class=\"n\">review_graphs</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n            <span class=\"k\">elif</span> <span class=\"n\">k</span> <span class=\"o\">==</span> <span class=\"n\">POSTV</span><span class=\"p\">:</span>\n                <span class=\"n\">infr2</span><span class=\"o\">.</span><span class=\"n\">review_graphs</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">subgraph</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"n\">dynamic</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">infr2</span><span class=\"o\">.</span><span class=\"n\">review_graphs</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">subgraph</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">infr2</span></div>\n\n<div class=\"viewcode-block\" id=\"AnnotInference.set_config\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.core.AnnotInference.set_config\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">set_config</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kw</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span></div></div>\n\n\n<div class=\"viewcode-block\" id=\"testdata_infr\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.graph/#ibeis.algo.graph.core.testdata_infr\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">testdata_infr</span><span class=\"p\">(</span><span class=\"n\">defaultdb</span><span class=\"o\">=</span><span class=\"s1\">&#39;PZ_MTEST&#39;</span><span class=\"p\">):</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">ibeis</span>\n    <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">opendb</span><span class=\"p\">(</span><span class=\"n\">defaultdb</span><span class=\"o\">=</span><span class=\"n\">defaultdb</span><span class=\"p\">)</span>\n    <span class=\"n\">aids</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span>\n    <span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">AnnotInference</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"n\">autoinit</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">infr</span></div>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.viz.viz_graph2 make_qt_graph_interface --show --aids=1,2,3,4,5,6,7 --graph --match=1,4 --nomatch=3,1,5,7</span>\n<span class=\"sd\">        python -m ibeis.algo.graph.core</span>\n\n<span class=\"sd\">        python -m ibeis.algo.graph all</span>\n\n<span class=\"sd\">        python -m ibeis.algo.graph.core --allexamples</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">multiprocessing</span>\n    <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">freeze_support</span><span class=\"p\">()</span>  <span class=\"c1\"># for win32</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>  <span class=\"c1\"># NOQA</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">doctest_funcs</span><span class=\"p\">()</span>\n</pre></div>", "current_page_name": "_modules/ibeis/algo/graph/core", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}