{"parents": [{"link": "../../../../", "title": "Module code"}, {"link": "../../../", "title": "ibeis"}, {"link": "../../", "title": "ibeis.algo"}, {"link": "../", "title": "ibeis.algo.preproc"}], "title": "ibeis.algo.preproc.preproc_image", "body": "<h1>Source code for ibeis.algo.preproc.preproc_image</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"k\">import</span> <span class=\"n\">absolute_import</span><span class=\"p\">,</span> <span class=\"n\">division</span><span class=\"p\">,</span> <span class=\"n\">print_function</span><span class=\"p\">,</span> <span class=\"n\">unicode_literals</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">os.path</span> <span class=\"k\">import</span> <span class=\"n\">splitext</span><span class=\"p\">,</span> <span class=\"n\">basename</span><span class=\"p\">,</span> <span class=\"n\">isabs</span>\n<span class=\"kn\">import</span> <span class=\"nn\">warnings</span>\n<span class=\"kn\">import</span> <span class=\"nn\">vtool.exif</span> <span class=\"k\">as</span> <span class=\"nn\">vtexif</span>\n<span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n<span class=\"kn\">import</span> <span class=\"nn\">six</span>\n<span class=\"p\">(</span><span class=\"nb\">print</span><span class=\"p\">,</span> <span class=\"n\">rrr</span><span class=\"p\">,</span> <span class=\"n\">profile</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">inject2</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"parse_exif\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.preproc/#ibeis.algo.preproc.preproc_image.parse_exif\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">parse_exif</span><span class=\"p\">(</span><span class=\"n\">pil_img</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; Image EXIF helper &quot;&quot;&quot;</span>\n    <span class=\"n\">exif_dict</span> <span class=\"o\">=</span> <span class=\"n\">vtexif</span><span class=\"o\">.</span><span class=\"n\">get_exif_dict</span><span class=\"p\">(</span><span class=\"n\">pil_img</span><span class=\"p\">)</span>\n    <span class=\"c1\"># TODO: More tags</span>\n    <span class=\"c1\"># (mainly the orientation tag)</span>\n    <span class=\"n\">lat</span><span class=\"p\">,</span> <span class=\"n\">lon</span> <span class=\"o\">=</span> <span class=\"n\">vtexif</span><span class=\"o\">.</span><span class=\"n\">get_lat_lon</span><span class=\"p\">(</span><span class=\"n\">exif_dict</span><span class=\"p\">)</span>\n    <span class=\"n\">orient</span> <span class=\"o\">=</span> <span class=\"n\">vtexif</span><span class=\"o\">.</span><span class=\"n\">get_orientation</span><span class=\"p\">(</span><span class=\"n\">exif_dict</span><span class=\"p\">,</span> <span class=\"n\">on_error</span><span class=\"o\">=</span><span class=\"s1\">&#39;warn&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">time</span> <span class=\"o\">=</span> <span class=\"n\">vtexif</span><span class=\"o\">.</span><span class=\"n\">get_unixtime</span><span class=\"p\">(</span><span class=\"n\">exif_dict</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">time</span><span class=\"p\">,</span> <span class=\"n\">lat</span><span class=\"p\">,</span> <span class=\"n\">lon</span><span class=\"p\">,</span> <span class=\"n\">orient</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_standard_ext\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.preproc/#ibeis.algo.preproc.preproc_image.get_standard_ext\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">get_standard_ext</span><span class=\"p\">(</span><span class=\"n\">gpath</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; Returns standardized image extension &quot;&quot;&quot;</span>\n    <span class=\"n\">ext</span> <span class=\"o\">=</span> <span class=\"n\">splitext</span><span class=\"p\">(</span><span class=\"n\">gpath</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"s1\">&#39;.jpg&#39;</span> <span class=\"k\">if</span> <span class=\"n\">ext</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;.jpeg&#39;</span> <span class=\"k\">else</span> <span class=\"n\">ext</span></div>\n\n\n<div class=\"viewcode-block\" id=\"parse_imageinfo\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.preproc/#ibeis.algo.preproc.preproc_image.parse_imageinfo\">[docs]</a><span class=\"nd\">@profile</span>\n<span class=\"k\">def</span> <span class=\"nf\">parse_imageinfo</span><span class=\"p\">(</span><span class=\"n\">gpath</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; Worker function: gpath must be in UNIX-PATH format!</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        gpath (str): image path</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        tuple: param_tup -</span>\n<span class=\"sd\">            if successful returns a tuple of image parameters which are values</span>\n<span class=\"sd\">            for SQL columns on else returns None</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.algo.preproc.preproc_image --exec-parse_imageinfo</span>\n\n<span class=\"sd\">    Doctest:</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.algo.preproc.preproc_image import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; gpath = ut.grab_test_imgpath(&#39;patsy.jpg&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; param_tup = parse_imageinfo(gpath)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = (&#39;param_tup = %s&#39; % (str(param_tup),))</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">        &gt;&gt;&gt; uuid = param_tup[0]</span>\n<span class=\"sd\">        &gt;&gt;&gt; assert str(uuid) == &#39;16008058-788c-2d48-cd50-f6029f726cbf&#39;</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\"># Try to open the image</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">PIL</span> <span class=\"k\">import</span> <span class=\"n\">Image</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">tempfile</span>\n    <span class=\"k\">if</span> <span class=\"n\">six</span><span class=\"o\">.</span><span class=\"n\">PY2</span><span class=\"p\">:</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">urlparse</span>\n        <span class=\"n\">urlsplit</span> <span class=\"o\">=</span> <span class=\"n\">urlparse</span><span class=\"o\">.</span><span class=\"n\">urlsplit</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">urllib</span>\n        <span class=\"n\">urlsplit</span> <span class=\"o\">=</span> <span class=\"n\">urllib</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"o\">.</span><span class=\"n\">urlsplit</span>\n\n    <span class=\"n\">gpath</span> <span class=\"o\">=</span> <span class=\"n\">gpath</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span>\n\n    <span class=\"n\">url_protos</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;https://&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;http://&#39;</span><span class=\"p\">]</span>\n    <span class=\"n\">s3_proto</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;s3://&#39;</span><span class=\"p\">]</span>\n    <span class=\"n\">valid_protos</span> <span class=\"o\">=</span> <span class=\"n\">s3_proto</span> <span class=\"o\">+</span> <span class=\"n\">url_protos</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">isproto</span><span class=\"p\">(</span><span class=\"n\">gpath</span><span class=\"p\">,</span> <span class=\"n\">valid_protos</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">any</span><span class=\"p\">(</span><span class=\"n\">gpath</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"n\">proto</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">proto</span> <span class=\"ow\">in</span> <span class=\"n\">valid_protos</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">islocal</span><span class=\"p\">(</span><span class=\"n\">gpath</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"n\">isabs</span><span class=\"p\">(</span><span class=\"n\">gpath</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">isproto</span><span class=\"p\">(</span><span class=\"n\">gpath</span><span class=\"p\">,</span> <span class=\"n\">valid_protos</span><span class=\"p\">))</span>\n\n    <span class=\"k\">with</span> <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">catch_warnings</span><span class=\"p\">(</span><span class=\"n\">record</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">w</span><span class=\"p\">:</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">isproto</span><span class=\"p\">(</span><span class=\"n\">gpath</span><span class=\"p\">,</span> <span class=\"n\">valid_protos</span><span class=\"p\">):</span>\n                <span class=\"c1\"># suffix = &#39;.%s&#39; % (basename(gpath), )</span>\n                <span class=\"n\">filename</span> <span class=\"o\">=</span> <span class=\"n\">basename</span><span class=\"p\">(</span><span class=\"n\">gpath</span><span class=\"p\">)</span>\n                <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">ext</span> <span class=\"o\">=</span> <span class=\"n\">splitext</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">)</span>\n                <span class=\"c1\"># base = filename</span>\n                <span class=\"n\">base</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">random_nonce</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">)</span>\n                <span class=\"n\">suffix</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;.</span><span class=\"si\">%s%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">base</span><span class=\"p\">,</span> <span class=\"n\">ext</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n                <span class=\"n\">temp_file</span><span class=\"p\">,</span> <span class=\"n\">temp_filepath</span> <span class=\"o\">=</span> <span class=\"n\">tempfile</span><span class=\"o\">.</span><span class=\"n\">mkstemp</span><span class=\"p\">(</span><span class=\"n\">suffix</span><span class=\"o\">=</span><span class=\"n\">suffix</span><span class=\"p\">)</span>\n                <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">gpath</span><span class=\"p\">,</span> <span class=\"n\">temp_filepath</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[preproc] Caching remote </span><span class=\"si\">%s</span><span class=\"s1\"> file to temporary file </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n\n                <span class=\"k\">if</span> <span class=\"n\">isproto</span><span class=\"p\">(</span><span class=\"n\">gpath</span><span class=\"p\">,</span> <span class=\"n\">s3_proto</span><span class=\"p\">):</span>\n                    <span class=\"n\">s3_dict</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">s3_str_decode_to_dict</span><span class=\"p\">(</span><span class=\"n\">gpath</span><span class=\"p\">)</span>\n                    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">grab_s3_contents</span><span class=\"p\">(</span><span class=\"n\">temp_filepath</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">s3_dict</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">isproto</span><span class=\"p\">(</span><span class=\"n\">gpath</span><span class=\"p\">,</span> <span class=\"n\">url_protos</span><span class=\"p\">):</span>\n                    <span class=\"c1\"># Ensure that the Unicode string is properly encoded for web requests</span>\n                    <span class=\"n\">uri_</span> <span class=\"o\">=</span> <span class=\"n\">urlsplit</span><span class=\"p\">(</span><span class=\"n\">gpath</span><span class=\"p\">)</span>\n                    <span class=\"n\">uri_path</span> <span class=\"o\">=</span> <span class=\"n\">six</span><span class=\"o\">.</span><span class=\"n\">moves</span><span class=\"o\">.</span><span class=\"n\">urllib</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"o\">.</span><span class=\"n\">quote</span><span class=\"p\">(</span><span class=\"n\">uri_</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s1\">&#39;utf8&#39;</span><span class=\"p\">))</span>\n                    <span class=\"n\">uri_</span> <span class=\"o\">=</span> <span class=\"n\">uri_</span><span class=\"o\">.</span><span class=\"n\">_replace</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"n\">uri_path</span><span class=\"p\">)</span>\n                    <span class=\"n\">uri_</span> <span class=\"o\">=</span> <span class=\"n\">uri_</span><span class=\"o\">.</span><span class=\"n\">geturl</span><span class=\"p\">()</span>\n                    <span class=\"n\">six</span><span class=\"o\">.</span><span class=\"n\">moves</span><span class=\"o\">.</span><span class=\"n\">urllib</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">urlretrieve</span><span class=\"p\">(</span><span class=\"n\">uri_</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"n\">temp_filepath</span><span class=\"p\">)</span>\n                <span class=\"n\">gpath_</span> <span class=\"o\">=</span> <span class=\"n\">temp_filepath</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">temp_file</span><span class=\"p\">,</span> <span class=\"n\">temp_filepath</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span>\n                <span class=\"n\">gpath_</span> <span class=\"o\">=</span> <span class=\"n\">gpath</span>\n\n            <span class=\"c1\"># Open image with Exif support</span>\n            <span class=\"n\">pil_img</span> <span class=\"o\">=</span> <span class=\"n\">Image</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">gpath_</span><span class=\"p\">,</span> <span class=\"s1\">&#39;r&#39;</span><span class=\"p\">)</span>\n            <span class=\"c1\"># We cannot use pixel data as libjpeg is not determenistic (even for reads!)</span>\n            <span class=\"n\">image_uuid</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_file_uuid</span><span class=\"p\">(</span><span class=\"n\">gpath_</span><span class=\"p\">)</span>  <span class=\"c1\"># Read file ]-hash-&gt; guid = gid</span>\n        <span class=\"k\">except</span> <span class=\"ne\">IOError</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n            <span class=\"c1\"># ut.embed()</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[preproc] IOError: </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">),))</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"c1\"># for warn in w:</span>\n            <span class=\"c1\">#     warnings.showwarning(warn.message, warn.category,</span>\n            <span class=\"c1\">#                          warn.filename, warn.lineno, warn.file,</span>\n            <span class=\"c1\">#                          warn.line)</span>\n            <span class=\"c1\">#     warnstr = warnings.formatwarning</span>\n            <span class=\"c1\">#     print(warnstr)</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"si\">%d</span><span class=\"s1\"> warnings issued by </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"p\">),</span> <span class=\"n\">gpath</span><span class=\"p\">,))</span>\n    <span class=\"c1\"># Parse out the data</span>\n    <span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"n\">height</span>  <span class=\"o\">=</span> <span class=\"n\">pil_img</span><span class=\"o\">.</span><span class=\"n\">size</span>         <span class=\"c1\"># Read width, height</span>\n    <span class=\"n\">time</span><span class=\"p\">,</span> <span class=\"n\">lat</span><span class=\"p\">,</span> <span class=\"n\">lon</span><span class=\"p\">,</span> <span class=\"n\">orient</span> <span class=\"o\">=</span> <span class=\"n\">parse_exif</span><span class=\"p\">(</span><span class=\"n\">pil_img</span><span class=\"p\">)</span>  <span class=\"c1\"># Read exif tags</span>\n    <span class=\"k\">if</span> <span class=\"n\">orient</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]:</span>\n        <span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"n\">height</span> <span class=\"o\">=</span> <span class=\"n\">height</span><span class=\"p\">,</span> <span class=\"n\">width</span>\n    <span class=\"c1\">#orig_gpath = gpath</span>\n    <span class=\"n\">orig_gname</span> <span class=\"o\">=</span> <span class=\"n\">basename</span><span class=\"p\">(</span><span class=\"n\">gpath</span><span class=\"p\">)</span>\n    <span class=\"n\">ext</span> <span class=\"o\">=</span> <span class=\"n\">get_standard_ext</span><span class=\"p\">(</span><span class=\"n\">gpath</span><span class=\"p\">)</span>\n    <span class=\"n\">notes</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>\n    <span class=\"c1\"># Build parameters tuple</span>\n    <span class=\"n\">param_tup</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n        <span class=\"n\">image_uuid</span><span class=\"p\">,</span>\n        <span class=\"n\">gpath</span><span class=\"p\">,</span>\n        <span class=\"n\">gpath</span><span class=\"p\">,</span>\n        <span class=\"n\">orig_gname</span><span class=\"p\">,</span>\n        <span class=\"c1\">#orig_gpath,</span>\n        <span class=\"n\">ext</span><span class=\"p\">,</span>\n        <span class=\"n\">width</span><span class=\"p\">,</span>\n        <span class=\"n\">height</span><span class=\"p\">,</span>\n        <span class=\"n\">time</span><span class=\"p\">,</span>\n        <span class=\"n\">lat</span><span class=\"p\">,</span>\n        <span class=\"n\">lon</span><span class=\"p\">,</span>\n        <span class=\"n\">orient</span><span class=\"p\">,</span>\n        <span class=\"n\">notes</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">temp_filepath</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">(</span><span class=\"n\">temp_file</span><span class=\"p\">)</span>\n        <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">unlink</span><span class=\"p\">(</span><span class=\"n\">temp_filepath</span><span class=\"p\">)</span>\n    <span class=\"c1\">#print(&#39;[ginfo] %r %r&#39; % (image_uuid, orig_gname))</span>\n    <span class=\"k\">return</span> <span class=\"n\">param_tup</span></div>\n\n\n<span class=\"c1\"># def add_images_params_gen(gpath_list):</span>\n<span class=\"c1\">#     &quot;&quot;&quot;</span>\n<span class=\"c1\">#     generates values for add_images sqlcommands asychronously</span>\n\n<span class=\"c1\">#     Args:</span>\n<span class=\"c1\">#         gpath_list (list):</span>\n\n<span class=\"c1\">#     Kwargs:</span>\n<span class=\"c1\">#         ordered, force_serial, chunksize, prog, verbose, quiet, nTasks, freq,</span>\n<span class=\"c1\">#         adjust</span>\n\n<span class=\"c1\">#     Returns:</span>\n<span class=\"c1\">#         generator: params_gen</span>\n\n<span class=\"c1\">#     CommandLine:</span>\n<span class=\"c1\">#         python -m ibeis.algo.preproc.preproc_image --exec-add_images_params_gen</span>\n\n<span class=\"c1\">#     Example0:</span>\n<span class=\"c1\">#         &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"c1\">#         &gt;&gt;&gt; from ibeis.algo.preproc.preproc_image import *   # NOQA</span>\n<span class=\"c1\">#         &gt;&gt;&gt; from vtool.tests import grabdata</span>\n<span class=\"c1\">#         &gt;&gt;&gt; gpath_list = grabdata.get_test_gpaths(ndata=3) + [&#39;doesnotexist.jpg&#39;]</span>\n<span class=\"c1\">#         &gt;&gt;&gt; params_list = list(add_images_params_gen(gpath_list))</span>\n<span class=\"c1\">#         &gt;&gt;&gt; assert str(params_list[0][0]) == &#39;66ec193a-1619-b3b6-216d-1784b4833b61&#39;, &#39;UUID gen method changed&#39;</span>\n<span class=\"c1\">#         &gt;&gt;&gt; assert str(params_list[0][3]) == &#39;easy1.JPG&#39;, &#39;orig name is different&#39;</span>\n<span class=\"c1\">#         &gt;&gt;&gt; assert params_list[3] is None</span>\n<span class=\"c1\">#     &quot;&quot;&quot;</span>\n<span class=\"c1\">#     params_gen = ut.generate2(parse_imageinfo, zip(gpath_list), adjust=True,</span>\n<span class=\"c1\">#                               force_serial=True)</span>\n<span class=\"c1\">#     return params_gen</span>\n\n\n<div class=\"viewcode-block\" id=\"on_delete\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.preproc/#ibeis.algo.preproc.preproc_image.on_delete\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">on_delete</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">featweight_rowid_list</span><span class=\"p\">,</span> <span class=\"n\">qreq_</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Warning: Not Implemented&#39;</span><span class=\"p\">)</span></div>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    python -m ibeis.algo.preproc.preproc_image</span>\n<span class=\"sd\">    python -m ibeis.algo.preproc.preproc_image --allexamples</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">multiprocessing</span>\n    <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">freeze_support</span><span class=\"p\">()</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">doctest_funcs</span><span class=\"p\">()</span>\n</pre></div>", "current_page_name": "_modules/ibeis/algo/preproc/preproc_image", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}