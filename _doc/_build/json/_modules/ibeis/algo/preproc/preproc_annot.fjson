{"parents": [{"link": "../../../../", "title": "Module code"}, {"link": "../../../", "title": "ibeis"}, {"link": "../../", "title": "ibeis.algo"}, {"link": "../", "title": "ibeis.algo.preproc"}], "title": "ibeis.algo.preproc.preproc_annot", "body": "<h1>Source code for ibeis.algo.preproc.preproc_annot</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">helpers for controller manual_annot_funcs</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"k\">import</span> <span class=\"n\">absolute_import</span><span class=\"p\">,</span> <span class=\"n\">division</span><span class=\"p\">,</span> <span class=\"n\">print_function</span><span class=\"p\">,</span> <span class=\"n\">unicode_literals</span>\n<span class=\"kn\">from</span> <span class=\"nn\">six.moves</span> <span class=\"k\">import</span> <span class=\"nb\">zip</span><span class=\"p\">,</span> <span class=\"nb\">range</span><span class=\"p\">,</span> <span class=\"nb\">filter</span><span class=\"p\">,</span> <span class=\"nb\">map</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"kn\">import</span> <span class=\"nn\">six</span>\n<span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n<span class=\"kn\">import</span> <span class=\"nn\">uuid</span>\n<span class=\"kn\">from</span> <span class=\"nn\">vtool</span> <span class=\"k\">import</span> <span class=\"n\">geometry</span>\n<span class=\"p\">(</span><span class=\"nb\">print</span><span class=\"p\">,</span> <span class=\"n\">rrr</span><span class=\"p\">,</span> <span class=\"n\">profile</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">inject2</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">,</span> <span class=\"s1\">&#39;[preproc_annot]&#39;</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"make_annotation_uuids\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.preproc/#ibeis.algo.preproc.preproc_annot.make_annotation_uuids\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">make_annotation_uuids</span><span class=\"p\">(</span><span class=\"n\">image_uuid_list</span><span class=\"p\">,</span> <span class=\"n\">bbox_list</span><span class=\"p\">,</span> <span class=\"n\">theta_list</span><span class=\"p\">,</span> <span class=\"n\">deterministic</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Check to make sure bbox input is a tuple-list, not a list-list</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">bbox_list</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">bbox_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"nb\">tuple</span><span class=\"p\">),</span> <span class=\"s1\">&#39;Bounding boxes must be tuples of ints!&#39;</span>\n                <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">bbox_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"nb\">int</span><span class=\"p\">),</span> <span class=\"s1\">&#39;Bounding boxes must be tuples of ints!&#39;</span>\n            <span class=\"k\">except</span> <span class=\"ne\">AssertionError</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n                <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">printex</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">)</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;bbox_list = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">bbox_list</span><span class=\"p\">,))</span>\n                <span class=\"k\">raise</span>\n        <span class=\"n\">annotation_uuid_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">augment_uuid</span><span class=\"p\">(</span><span class=\"n\">img_uuid</span><span class=\"p\">,</span> <span class=\"n\">bbox</span><span class=\"p\">,</span> <span class=\"n\">theta</span><span class=\"p\">)</span>\n                                <span class=\"k\">for</span> <span class=\"n\">img_uuid</span><span class=\"p\">,</span> <span class=\"n\">bbox</span><span class=\"p\">,</span> <span class=\"n\">theta</span>\n                                <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">image_uuid_list</span><span class=\"p\">,</span> <span class=\"n\">bbox_list</span><span class=\"p\">,</span> <span class=\"n\">theta_list</span><span class=\"p\">)]</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">deterministic</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Augment determenistic uuid with a random uuid to ensure randomness</span>\n            <span class=\"c1\"># (this should be ensured in all hardward situations)</span>\n            <span class=\"n\">annotation_uuid_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">augment_uuid</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">random_uuid</span><span class=\"p\">(),</span> <span class=\"n\">_uuid</span><span class=\"p\">)</span>\n                                    <span class=\"k\">for</span> <span class=\"n\">_uuid</span> <span class=\"ow\">in</span> <span class=\"n\">annotation_uuid_list</span><span class=\"p\">]</span>\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">printex</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Error building annotation_uuids&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;[add_annot]&#39;</span><span class=\"p\">,</span>\n                      <span class=\"n\">key_list</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;image_uuid_list&#39;</span><span class=\"p\">])</span>\n        <span class=\"k\">raise</span>\n    <span class=\"k\">return</span> <span class=\"n\">annotation_uuid_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"generate_annot_properties\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.preproc/#ibeis.algo.preproc.preproc_annot.generate_annot_properties\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">generate_annot_properties</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">gid_list</span><span class=\"p\">,</span> <span class=\"n\">bbox_list</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">theta_list</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                              <span class=\"n\">species_list</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">nid_list</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">name_list</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                              <span class=\"n\">detect_confidence_list</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">notes_list</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                              <span class=\"n\">vert_list</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">annot_uuid_list</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                              <span class=\"n\">yaw_list</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">quiet_delete_thumbs</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"c1\">#annot_uuid_list = ibsfuncs.make_annotation_uuids(image_uuid_list, bbox_list,</span>\n    <span class=\"c1\">#                                                      theta_list, deterministic=False)</span>\n    <span class=\"n\">image_uuid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_uuids</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">annot_uuid_list</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">annot_uuid_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">uuid</span><span class=\"o\">.</span><span class=\"n\">uuid4</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">image_uuid_list</span><span class=\"p\">))]</span>\n    <span class=\"c1\"># Prepare the SQL input</span>\n    <span class=\"k\">assert</span> <span class=\"n\">name_list</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"n\">nid_list</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"p\">(</span>\n        <span class=\"s1\">&#39;cannot specify both names and nids&#39;</span><span class=\"p\">)</span>\n    <span class=\"c1\"># For import only, we can specify both by setting import_override to True</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">bool</span><span class=\"p\">(</span><span class=\"n\">bbox_list</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"nb\">bool</span><span class=\"p\">(</span><span class=\"n\">vert_list</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">),</span> <span class=\"p\">(</span>\n        <span class=\"s1\">&#39;must specify exactly one of bbox_list or vert_list&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">theta_list</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">theta_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">0.0</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">))]</span>\n    <span class=\"k\">if</span> <span class=\"n\">name_list</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">nid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">add_names</span><span class=\"p\">(</span><span class=\"n\">name_list</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">detect_confidence_list</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">detect_confidence_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">0.0</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">))]</span>\n    <span class=\"k\">if</span> <span class=\"n\">notes_list</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">notes_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;&#39;</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">))]</span>\n    <span class=\"k\">if</span> <span class=\"n\">vert_list</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">vert_list</span> <span class=\"o\">=</span> <span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">verts_list_from_bboxes_list</span><span class=\"p\">(</span><span class=\"n\">bbox_list</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">bbox_list</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">bbox_list</span> <span class=\"o\">=</span> <span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">bboxes_from_vert_list</span><span class=\"p\">(</span><span class=\"n\">vert_list</span><span class=\"p\">)</span>\n\n    <span class=\"n\">len_bbox</span>    <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">bbox_list</span><span class=\"p\">)</span>\n    <span class=\"n\">len_vert</span>    <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">vert_list</span><span class=\"p\">)</span>\n    <span class=\"n\">len_gid</span>     <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">len_notes</span>   <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">notes_list</span><span class=\"p\">)</span>\n    <span class=\"n\">len_theta</span>   <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">theta_list</span><span class=\"p\">)</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">assert</span> <span class=\"n\">len_vert</span> <span class=\"o\">==</span> <span class=\"n\">len_bbox</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bbox and verts are not of same size&#39;</span>\n        <span class=\"k\">assert</span> <span class=\"n\">len_gid</span>  <span class=\"o\">==</span> <span class=\"n\">len_bbox</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bbox and gid are not of same size&#39;</span>\n        <span class=\"k\">assert</span> <span class=\"n\">len_gid</span>  <span class=\"o\">==</span> <span class=\"n\">len_theta</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bbox and gid are not of same size&#39;</span>\n        <span class=\"k\">assert</span> <span class=\"n\">len_notes</span> <span class=\"o\">==</span> <span class=\"n\">len_gid</span><span class=\"p\">,</span> <span class=\"s1\">&#39;notes and gids are not of same size&#39;</span>\n    <span class=\"k\">except</span> <span class=\"ne\">AssertionError</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">printex</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">,</span> <span class=\"n\">key_list</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;len_vert&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;len_gid&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;len_bbox&#39;</span>\n                                    <span class=\"s1\">&#39;len_theta&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;len_notes&#39;</span><span class=\"p\">])</span>\n        <span class=\"k\">raise</span>\n\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"c1\"># nothing is being added</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[ibs] WARNING: 0 annotations are beign added!&#39;</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr2</span><span class=\"p\">(</span><span class=\"nb\">locals</span><span class=\"p\">()))</span>\n        <span class=\"k\">return</span> <span class=\"p\">[]</span>\n\n    <span class=\"c1\"># Build ~~deterministic?~~ random and unique ANNOTATION ids</span>\n    <span class=\"n\">image_uuid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_uuids</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n    <span class=\"c1\">#annot_uuid_list = ibsfuncs.make_annotation_uuids(image_uuid_list, bbox_list,</span>\n    <span class=\"c1\">#                                                      theta_list, deterministic=False)</span>\n    <span class=\"k\">if</span> <span class=\"n\">annot_uuid_list</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">annot_uuid_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">uuid</span><span class=\"o\">.</span><span class=\"n\">uuid4</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">image_uuid_list</span><span class=\"p\">))]</span>\n    <span class=\"k\">if</span> <span class=\"n\">yaw_list</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">yaw_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">1.0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">image_uuid_list</span><span class=\"p\">)</span>\n    <span class=\"n\">nVert_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">verts</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">verts</span> <span class=\"ow\">in</span> <span class=\"n\">vert_list</span><span class=\"p\">]</span>\n    <span class=\"n\">vertstr_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">six</span><span class=\"o\">.</span><span class=\"n\">text_type</span><span class=\"p\">(</span><span class=\"n\">verts</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">verts</span> <span class=\"ow\">in</span> <span class=\"n\">vert_list</span><span class=\"p\">]</span>\n    <span class=\"n\">xtl_list</span><span class=\"p\">,</span> <span class=\"n\">ytl_list</span><span class=\"p\">,</span> <span class=\"n\">width_list</span><span class=\"p\">,</span> <span class=\"n\">height_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">bbox_list</span><span class=\"p\">))</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">nVert_list</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">vertstr_list</span><span class=\"p\">)</span></div>\n    <span class=\"c1\"># Define arguments to insert</span>\n\n\n<div class=\"viewcode-block\" id=\"testdata_preproc_annot\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.preproc/#ibeis.algo.preproc.preproc_annot.testdata_preproc_annot\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">testdata_preproc_annot</span><span class=\"p\">():</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">ibeis</span>\n    <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">opendb</span><span class=\"p\">(</span><span class=\"s1\">&#39;testdb1&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">aid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_aids</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"postget_annot_verts\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.preproc/#ibeis.algo.preproc.preproc_annot.postget_annot_verts\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">postget_annot_verts</span><span class=\"p\">(</span><span class=\"n\">vertstr_list</span><span class=\"p\">):</span>\n    <span class=\"c1\"># TODO: Sanatize input for eval</span>\n    <span class=\"c1\">#print(&#39;vertstr_list = %r&#39; % (vertstr_list,))</span>\n    <span class=\"n\">locals_</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"n\">globals_</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"n\">vert_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">eval</span><span class=\"p\">(</span><span class=\"n\">vertstr</span><span class=\"p\">,</span> <span class=\"n\">globals_</span><span class=\"p\">,</span> <span class=\"n\">locals_</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">vertstr</span> <span class=\"ow\">in</span> <span class=\"n\">vertstr_list</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">vert_list</span></div>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.control.template_generator --tbls annotations --Tflags getters native</span>\n\n<span class=\"sd\">        python -m ibeis.algo.preproc.preproc_annot</span>\n<span class=\"sd\">        python -m ibeis.algo.preproc.preproc_annot --allexamples</span>\n<span class=\"sd\">        python -m ibeis.algo.preproc.preproc_annot --allexamples --noface --nosrc</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">multiprocessing</span>\n    <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">freeze_support</span><span class=\"p\">()</span>  <span class=\"c1\"># for win32</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>  <span class=\"c1\"># NOQA</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">doctest_funcs</span><span class=\"p\">()</span>\n</pre></div>", "current_page_name": "_modules/ibeis/algo/preproc/preproc_annot", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}