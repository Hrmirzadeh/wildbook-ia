{"parents": [{"link": "../../../../../", "title": "Module code"}, {"link": "../../../../", "title": "ibeis"}, {"link": "../../../", "title": "ibeis.algo"}, {"link": "../../", "title": "ibeis.algo.verif"}], "title": "ibeis.algo.verif.torch.gpu_util", "body": "<h1>Source code for ibeis.algo.verif.torch.gpu_util</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"k\">import</span> <span class=\"n\">absolute_import</span><span class=\"p\">,</span> <span class=\"n\">division</span><span class=\"p\">,</span> <span class=\"n\">print_function</span>\n<span class=\"kn\">import</span> <span class=\"nn\">ubelt</span> <span class=\"k\">as</span> <span class=\"nn\">ub</span>\n<span class=\"kn\">import</span> <span class=\"nn\">warnings</span>\n\n\n<div class=\"viewcode-block\" id=\"have_gpu\"><a class=\"viewcode-back\" href=\"../../../../../../ibeis.algo.verif.torch/#ibeis.algo.verif.torch.gpu_util.have_gpu\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">have_gpu</span><span class=\"p\">(</span><span class=\"n\">min_memory</span><span class=\"o\">=</span><span class=\"mi\">8000</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; Determine if we are on a machine with a good GPU &quot;&quot;&quot;</span>\n    <span class=\"c1\"># FIXME: HACK</span>\n    <span class=\"n\">gpus</span> <span class=\"o\">=</span> <span class=\"n\">gpu_info</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">gpus</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n    <span class=\"k\">return</span> <span class=\"nb\">any</span><span class=\"p\">(</span><span class=\"n\">gpu</span><span class=\"p\">[</span><span class=\"s1\">&#39;mem_total&#39;</span><span class=\"p\">]</span> <span class=\"o\">&gt;=</span> <span class=\"n\">min_memory</span> <span class=\"k\">for</span> <span class=\"n\">gpu</span> <span class=\"ow\">in</span> <span class=\"n\">gpus</span><span class=\"p\">)</span></div>\n    <span class=\"c1\"># import platform</span>\n    <span class=\"c1\"># GPU_MACHINES = {&#39;arisia&#39;, &#39;aretha&#39;}</span>\n    <span class=\"c1\"># # Maybe we look at nvidia-smi instead?</span>\n    <span class=\"c1\"># hostname = platform.node()</span>\n    <span class=\"c1\"># return hostname in GPU_MACHINES</span>\n\n\n<div class=\"viewcode-block\" id=\"find_unused_gpu\"><a class=\"viewcode-back\" href=\"../../../../../../ibeis.algo.verif.torch/#ibeis.algo.verif.torch.gpu_util.find_unused_gpu\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">find_unused_gpu</span><span class=\"p\">(</span><span class=\"n\">min_memory</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Finds GPU with the lowest memory usage by parsing output of nvidia-smi</span>\n\n<span class=\"sd\">    python -c &quot;from pysseg.util import gpu_util; print(gpu_util.find_unused_gpu())&quot;</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">gpus</span> <span class=\"o\">=</span> <span class=\"n\">gpu_info</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"n\">gpus</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"kc\">None</span>\n    <span class=\"n\">gpu_avail_mem</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"n\">gpu</span><span class=\"p\">[</span><span class=\"s1\">&#39;mem_avail&#39;</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">gpu</span> <span class=\"ow\">in</span> <span class=\"n\">gpus</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()}</span>\n    <span class=\"n\">usage_order</span> <span class=\"o\">=</span> <span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">argsort</span><span class=\"p\">(</span><span class=\"n\">gpu_avail_mem</span><span class=\"p\">)</span>\n    <span class=\"n\">gpu_num</span> <span class=\"o\">=</span> <span class=\"n\">usage_order</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n    <span class=\"k\">if</span> <span class=\"n\">gpu_avail_mem</span><span class=\"p\">[</span><span class=\"n\">gpu_num</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">min_memory</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"kc\">None</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">gpu_num</span></div>\n\n\n<div class=\"viewcode-block\" id=\"gpu_info\"><a class=\"viewcode-back\" href=\"../../../../../../ibeis.algo.verif.torch/#ibeis.algo.verif.torch.gpu_util.gpu_info\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">gpu_info</span><span class=\"p\">():</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Parses nvidia-smi</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">cmd</span><span class=\"p\">(</span><span class=\"s1\">&#39;nvidia-smi&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s1\">&#39;ret&#39;</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span><span class=\"s1\">&#39;Could not run nvidia-smi.&#39;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n    <span class=\"n\">lines</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s1\">&#39;out&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">splitlines</span><span class=\"p\">()</span>\n\n    <span class=\"n\">gpu_lines</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">lines</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">current</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Signals the start of GPU info</span>\n            <span class=\"k\">if</span> <span class=\"n\">line</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">&#39;|=====&#39;</span><span class=\"p\">):</span>\n                <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">())</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"c1\"># End of GPU info</span>\n                <span class=\"k\">break</span>\n            <span class=\"k\">elif</span> <span class=\"n\">line</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">&#39;+----&#39;</span><span class=\"p\">):</span>\n                <span class=\"c1\"># Move to the next GPU</span>\n                <span class=\"n\">gpu_lines</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">)</span>\n                <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">current</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">parse_gpu_lines</span><span class=\"p\">(</span><span class=\"n\">lines</span><span class=\"p\">):</span>\n        <span class=\"n\">line1</span> <span class=\"o\">=</span> <span class=\"n\">lines</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">line2</span> <span class=\"o\">=</span> <span class=\"n\">lines</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"n\">gpu</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"n\">gpu</span><span class=\"p\">[</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39; &#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">line1</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;|&#39;</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">()[</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n        <span class=\"n\">gpu</span><span class=\"p\">[</span><span class=\"s1\">&#39;num&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"s1\">&#39; &#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">line1</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;|&#39;</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">]))</span>\n\n        <span class=\"n\">mempart</span> <span class=\"o\">=</span> <span class=\"n\">line2</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;|&#39;</span><span class=\"p\">)[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span>\n        <span class=\"n\">part1</span><span class=\"p\">,</span> <span class=\"n\">part2</span> <span class=\"o\">=</span> <span class=\"n\">mempart</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;/&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">gpu</span><span class=\"p\">[</span><span class=\"s1\">&#39;mem_used&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">part1</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">&#39;MiB&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">))</span>\n        <span class=\"n\">gpu</span><span class=\"p\">[</span><span class=\"s1\">&#39;mem_total&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">part2</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">&#39;MiB&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">))</span>\n        <span class=\"n\">gpu</span><span class=\"p\">[</span><span class=\"s1\">&#39;mem_avail&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">gpu</span><span class=\"p\">[</span><span class=\"s1\">&#39;mem_total&#39;</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">gpu</span><span class=\"p\">[</span><span class=\"s1\">&#39;mem_used&#39;</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">gpu</span>\n\n    <span class=\"n\">gpus</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"k\">for</span> <span class=\"n\">num</span><span class=\"p\">,</span> <span class=\"n\">lines</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">gpu_lines</span><span class=\"p\">):</span>\n        <span class=\"n\">gpu</span> <span class=\"o\">=</span> <span class=\"n\">parse_gpu_lines</span><span class=\"p\">(</span><span class=\"n\">lines</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"n\">num</span> <span class=\"o\">==</span> <span class=\"n\">gpu</span><span class=\"p\">[</span><span class=\"s1\">&#39;num&#39;</span><span class=\"p\">],</span> <span class=\"p\">(</span>\n            <span class=\"s1\">&#39;nums (</span><span class=\"si\">{}</span><span class=\"s1\">, </span><span class=\"si\">{}</span><span class=\"s1\">) do not agree. probably a parsing error&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">,</span> <span class=\"n\">gpu</span><span class=\"p\">[</span><span class=\"s1\">&#39;num&#39;</span><span class=\"p\">]))</span>\n        <span class=\"k\">assert</span> <span class=\"n\">num</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">gpus</span><span class=\"p\">,</span> <span class=\"p\">(</span>\n            <span class=\"s1\">&#39;Multiple GPUs labeled as num </span><span class=\"si\">{}</span><span class=\"s1\">. Probably a parsing error&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">))</span>\n        <span class=\"n\">gpus</span><span class=\"p\">[</span><span class=\"n\">num</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">gpu</span>\n    <span class=\"k\">return</span> <span class=\"n\">gpus</span></div>\n</pre></div>", "current_page_name": "_modules/ibeis/algo/verif/torch/gpu_util", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}