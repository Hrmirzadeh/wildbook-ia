{"parents": [{"link": "../../../../../", "title": "Module code"}, {"link": "../../../../", "title": "ibeis"}, {"link": "../../../", "title": "ibeis.algo"}, {"link": "../../", "title": "ibeis.algo.verif"}], "title": "ibeis.algo.verif.torch.train_main", "body": "<h1>Source code for ibeis.algo.verif.torch.train_main</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"k\">import</span> <span class=\"n\">absolute_import</span><span class=\"p\">,</span> <span class=\"n\">division</span><span class=\"p\">,</span> <span class=\"n\">print_function</span><span class=\"p\">,</span> <span class=\"n\">unicode_literals</span>\n<span class=\"kn\">from</span> <span class=\"nn\">os.path</span> <span class=\"k\">import</span> <span class=\"n\">join</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"kn\">import</span> <span class=\"nn\">cv2</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">torch</span>\n<span class=\"kn\">import</span> <span class=\"nn\">torch.nn</span>\n<span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n<span class=\"kn\">import</span> <span class=\"nn\">torchvision</span>\n<span class=\"nb\">print</span><span class=\"p\">,</span> <span class=\"n\">rrr</span><span class=\"p\">,</span> <span class=\"n\">profile</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">inject2</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"LRSchedule\"><a class=\"viewcode-back\" href=\"../../../../../../ibeis.algo.verif.torch/#ibeis.algo.verif.torch.train_main.LRSchedule\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">LRSchedule</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n<div class=\"viewcode-block\" id=\"LRSchedule.exp\"><a class=\"viewcode-back\" href=\"../../../../../../ibeis.algo.verif.torch/#ibeis.algo.verif.torch.train_main.LRSchedule.exp\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">exp</span><span class=\"p\">(</span><span class=\"n\">optimizer</span><span class=\"p\">,</span> <span class=\"n\">epoch</span><span class=\"p\">,</span> <span class=\"n\">init_lr</span><span class=\"o\">=</span><span class=\"mf\">0.001</span><span class=\"p\">,</span> <span class=\"n\">lr_decay_epoch</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Decay learning rate by a factor of 0.1 every lr_decay_epoch epochs.&quot;&quot;&quot;</span>\n        <span class=\"n\">lr</span> <span class=\"o\">=</span> <span class=\"n\">init_lr</span>\n        <span class=\"c1\"># epoch += 1</span>\n        <span class=\"k\">if</span> <span class=\"n\">epoch</span> <span class=\"o\">%</span> <span class=\"n\">lr_decay_epoch</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"n\">epoch</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">lr</span> <span class=\"o\">*=</span> <span class=\"mf\">0.1</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">epoch</span> <span class=\"o\">%</span> <span class=\"n\">lr_decay_epoch</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;LR is set to </span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">lr</span><span class=\"p\">))</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">param_group</span> <span class=\"ow\">in</span> <span class=\"n\">optimizer</span><span class=\"o\">.</span><span class=\"n\">param_groups</span><span class=\"p\">:</span>\n            <span class=\"n\">param_group</span><span class=\"p\">[</span><span class=\"s1\">&#39;lr&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">lr</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">optimizer</span><span class=\"p\">,</span> <span class=\"n\">lr</span></div></div>\n\n\n<div class=\"viewcode-block\" id=\"siam_vsone_train\"><a class=\"viewcode-back\" href=\"../../../../../../ibeis.algo.verif.torch/#ibeis.algo.verif.torch.train_main.siam_vsone_train\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">siam_vsone_train</span><span class=\"p\">():</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.algo.verif.torch.train_main siam_vsone_train</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.algo.verif.torch.train_main import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; siam_vsone_train()</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\"># wrapper around the RF vsone problem</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.verif</span> <span class=\"k\">import</span> <span class=\"n\">vsone</span>\n    <span class=\"c1\"># pblm = vsone.OneVsOneProblem.from_empty(&#39;PZ_MTEST&#39;)</span>\n    <span class=\"n\">pblm</span> <span class=\"o\">=</span> <span class=\"n\">vsone</span><span class=\"o\">.</span><span class=\"n\">OneVsOneProblem</span><span class=\"o\">.</span><span class=\"n\">from_empty</span><span class=\"p\">(</span><span class=\"s1\">&#39;GZ_Master1&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">ibs</span>\n    <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">load_samples</span><span class=\"p\">()</span>\n    <span class=\"n\">samples</span> <span class=\"o\">=</span> <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">samples</span>\n    <span class=\"n\">samples</span><span class=\"o\">.</span><span class=\"n\">print_info</span><span class=\"p\">()</span>\n    <span class=\"n\">xval_kw</span> <span class=\"o\">=</span> <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">xval_kw</span><span class=\"o\">.</span><span class=\"n\">asdict</span><span class=\"p\">()</span>\n    <span class=\"n\">skf_list</span> <span class=\"o\">=</span> <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">samples</span><span class=\"o\">.</span><span class=\"n\">stratified_kfold_indices</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">xval_kw</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">load_dataset</span><span class=\"p\">(</span><span class=\"n\">subset_idx</span><span class=\"p\">):</span>\n        <span class=\"n\">aids1</span><span class=\"p\">,</span> <span class=\"n\">aids2</span> <span class=\"o\">=</span> <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">samples</span><span class=\"o\">.</span><span class=\"n\">aid_pairs</span><span class=\"p\">[</span><span class=\"n\">subset_idx</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">T</span>\n        <span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">samples</span><span class=\"p\">[</span><span class=\"s1\">&#39;match_state&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">y_enc</span><span class=\"p\">[</span><span class=\"n\">subset_idx</span><span class=\"p\">]</span>\n\n        <span class=\"c1\"># train only on positive-vs-negative (ignore incomparable)</span>\n        <span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">labels</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">int64</span><span class=\"p\">)</span>\n\n        <span class=\"n\">chip_config</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;resize_dim&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;wh&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;dim_size&#39;</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">224</span><span class=\"p\">,</span> <span class=\"mi\">224</span><span class=\"p\">)}</span>\n        <span class=\"n\">img1_fpaths</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">depc_annot</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;chips&#39;</span><span class=\"p\">,</span> <span class=\"n\">aids1</span><span class=\"p\">,</span> <span class=\"n\">read_extern</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">colnames</span><span class=\"o\">=</span><span class=\"s1\">&#39;img&#39;</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">chip_config</span><span class=\"p\">)</span>\n        <span class=\"n\">img2_fpaths</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">depc_annot</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;chips&#39;</span><span class=\"p\">,</span> <span class=\"n\">aids2</span><span class=\"p\">,</span> <span class=\"n\">read_extern</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">colnames</span><span class=\"o\">=</span><span class=\"s1\">&#39;img&#39;</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">chip_config</span><span class=\"p\">)</span>\n        <span class=\"n\">dataset</span> <span class=\"o\">=</span> <span class=\"n\">LabeledPairDataset</span><span class=\"p\">(</span><span class=\"n\">img1_fpaths</span><span class=\"p\">,</span> <span class=\"n\">img2_fpaths</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">dataset</span>\n\n    <span class=\"n\">learn_idx</span><span class=\"p\">,</span> <span class=\"n\">test_idx</span> <span class=\"o\">=</span> <span class=\"n\">skf_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"n\">train_idx</span><span class=\"p\">,</span> <span class=\"n\">val_idx</span> <span class=\"o\">=</span> <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">samples</span><span class=\"o\">.</span><span class=\"n\">subsplit_indices</span><span class=\"p\">(</span><span class=\"n\">learn_idx</span><span class=\"p\">,</span> <span class=\"n\">n_splits</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n    <span class=\"c1\"># Split everything in the learning set into training / validation</span>\n    <span class=\"n\">train_dataset</span> <span class=\"o\">=</span> <span class=\"n\">load_dataset</span><span class=\"p\">(</span><span class=\"n\">train_idx</span><span class=\"p\">)</span>\n    <span class=\"n\">vali_dataset</span> <span class=\"o\">=</span> <span class=\"n\">load_dataset</span><span class=\"p\">(</span><span class=\"n\">val_idx</span><span class=\"p\">)</span>\n    <span class=\"n\">test_dataset</span> <span class=\"o\">=</span> <span class=\"n\">load_dataset</span><span class=\"p\">(</span><span class=\"n\">test_idx</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;* len(train_dataset) = </span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">train_dataset</span><span class=\"p\">)))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;* len(vali_dataset) = </span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">vali_dataset</span><span class=\"p\">)))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;* len(test_dataset) = </span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">test_dataset</span><span class=\"p\">)))</span>\n\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.verif.torch</span> <span class=\"k\">import</span> <span class=\"n\">gpu_util</span>\n    <span class=\"n\">gpu_num</span> <span class=\"o\">=</span> <span class=\"n\">gpu_util</span><span class=\"o\">.</span><span class=\"n\">find_unused_gpu</span><span class=\"p\">(</span><span class=\"n\">min_memory</span><span class=\"o\">=</span><span class=\"mi\">6000</span><span class=\"p\">)</span>\n\n    <span class=\"n\">use_cuda</span> <span class=\"o\">=</span> <span class=\"n\">gpu_num</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span>\n    <span class=\"n\">data_kw</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"k\">if</span> <span class=\"n\">use_cuda</span><span class=\"p\">:</span>\n        <span class=\"n\">data_kw</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;num_workers&#39;</span><span class=\"p\">:</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"s1\">&#39;pin_memory&#39;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">}</span>\n    <span class=\"n\">batch_size</span> <span class=\"o\">=</span> <span class=\"mi\">64</span>\n    <span class=\"n\">train_loader</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">DataLoader</span><span class=\"p\">(</span><span class=\"n\">train_dataset</span><span class=\"p\">,</span>\n                                               <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"n\">batch_size</span><span class=\"p\">,</span>\n                                               <span class=\"n\">shuffle</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">data_kw</span><span class=\"p\">)</span>\n    <span class=\"n\">vali_loader</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">DataLoader</span><span class=\"p\">(</span><span class=\"n\">train_dataset</span><span class=\"p\">,</span>\n                                              <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"n\">batch_size</span><span class=\"p\">,</span>\n                                              <span class=\"n\">shuffle</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">data_kw</span><span class=\"p\">)</span>\n    <span class=\"n\">test_loader</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">DataLoader</span><span class=\"p\">(</span><span class=\"n\">test_dataset</span><span class=\"p\">,</span>\n                                              <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"n\">batch_size</span><span class=\"p\">,</span>\n                                              <span class=\"n\">shuffle</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">data_kw</span><span class=\"p\">)</span>\n\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.verif.torch</span> <span class=\"k\">import</span> <span class=\"n\">fit_harness</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.verif.torch</span> <span class=\"k\">import</span> <span class=\"n\">models</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.verif.torch</span> <span class=\"k\">import</span> <span class=\"n\">netmath</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.verif.torch</span> <span class=\"k\">import</span> <span class=\"n\">lr_schedule</span>\n\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Siamese</span><span class=\"p\">()</span>\n\n    <span class=\"n\">criterion</span> <span class=\"o\">=</span> <span class=\"n\">netmath</span><span class=\"o\">.</span><span class=\"n\">Criterions</span><span class=\"o\">.</span><span class=\"n\">ContrastiveLoss</span><span class=\"p\">(</span><span class=\"n\">margin</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">lr_scheduler</span> <span class=\"o\">=</span> <span class=\"n\">lr_schedule</span><span class=\"o\">.</span><span class=\"n\">Exponential</span><span class=\"p\">()</span>\n    <span class=\"n\">optimizer_cls</span> <span class=\"o\">=</span> <span class=\"n\">netmath</span><span class=\"o\">.</span><span class=\"n\">Optimizers</span><span class=\"o\">.</span><span class=\"n\">Adam</span>\n\n    <span class=\"n\">class_weights</span> <span class=\"o\">=</span> <span class=\"n\">train_dataset</span><span class=\"o\">.</span><span class=\"n\">class_weights</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;class_weights = </span><span class=\"si\">{!r}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">class_weights</span><span class=\"p\">))</span>\n\n    <span class=\"n\">harn</span> <span class=\"o\">=</span> <span class=\"n\">fit_harness</span><span class=\"o\">.</span><span class=\"n\">FitHarness</span><span class=\"p\">(</span>\n        <span class=\"n\">model</span><span class=\"o\">=</span><span class=\"n\">model</span><span class=\"p\">,</span>\n        <span class=\"n\">criterion</span><span class=\"o\">=</span><span class=\"n\">criterion</span><span class=\"p\">,</span>\n        <span class=\"n\">lr_scheduler</span><span class=\"o\">=</span><span class=\"n\">lr_scheduler</span><span class=\"p\">,</span>\n        <span class=\"n\">train_loader</span><span class=\"o\">=</span><span class=\"n\">train_loader</span><span class=\"p\">,</span>\n        <span class=\"n\">vali_loader</span><span class=\"o\">=</span><span class=\"n\">vali_loader</span><span class=\"p\">,</span>\n        <span class=\"n\">test_loader</span><span class=\"o\">=</span><span class=\"n\">test_loader</span><span class=\"p\">,</span>\n        <span class=\"n\">optimizer_cls</span><span class=\"o\">=</span><span class=\"n\">optimizer_cls</span><span class=\"p\">,</span>\n        <span class=\"n\">class_weights</span><span class=\"o\">=</span><span class=\"n\">class_weights</span><span class=\"p\">,</span>\n        <span class=\"n\">gpu_num</span><span class=\"o\">=</span><span class=\"n\">gpu_num</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">harn</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span></div>\n\n\n<div class=\"viewcode-block\" id=\"LabeledPairDataset\"><a class=\"viewcode-back\" href=\"../../../../../../ibeis.algo.verif.torch/#ibeis.algo.verif.torch.train_main.LabeledPairDataset\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">LabeledPairDataset</span><span class=\"p\">(</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">Dataset</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    transform=transforms.Compose([</span>\n<span class=\"sd\">                       transforms.Scale(224),</span>\n<span class=\"sd\">                       transforms.ToTensor(),</span>\n<span class=\"sd\">                       torchvision.transforms.Normalize([0.5, 0.5, 0.5], [0.225, 0.225, 0.225])</span>\n<span class=\"sd\">                   ]</span>\n\n<span class=\"sd\">    Ignore:</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.algo.verif.torch.train_main import *</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.algo.verif.vsone import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; pblm = OneVsOneProblem.from_empty(&#39;PZ_MTEST&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = pblm.infr.ibs</span>\n<span class=\"sd\">        &gt;&gt;&gt; pblm.load_samples()</span>\n<span class=\"sd\">        &gt;&gt;&gt; samples = pblm.samples</span>\n<span class=\"sd\">        &gt;&gt;&gt; samples.print_info()</span>\n<span class=\"sd\">        &gt;&gt;&gt; xval_kw = pblm.xval_kw.asdict()</span>\n<span class=\"sd\">        &gt;&gt;&gt; skf_list = pblm.samples.stratified_kfold_indices(**xval_kw)</span>\n<span class=\"sd\">        &gt;&gt;&gt; train_idx, test_idx = skf_list[0]</span>\n<span class=\"sd\">        &gt;&gt;&gt; aids1, aids2 = pblm.samples.aid_pairs[train_idx].T</span>\n<span class=\"sd\">        &gt;&gt;&gt; labels = pblm.samples[&#39;match_state&#39;].y_enc[train_idx]</span>\n<span class=\"sd\">        &gt;&gt;&gt; labels = (labels == 1).astype(np.int64)</span>\n<span class=\"sd\">        &gt;&gt;&gt; chip_config = {&#39;resize_dim&#39;: &#39;wh&#39;, &#39;dim_size&#39;: (224, 224)}</span>\n<span class=\"sd\">        &gt;&gt;&gt; img1_fpaths = ibs.depc_annot.get(&#39;chips&#39;, aids1, read_extern=False, colnames=&#39;img&#39;, config=chip_config)</span>\n<span class=\"sd\">        &gt;&gt;&gt; img2_fpaths = ibs.depc_annot.get(&#39;chips&#39;, aids2, read_extern=False, colnames=&#39;img&#39;, config=chip_config)</span>\n<span class=\"sd\">        &gt;&gt;&gt; self = LabeledPairDataset(img1_fpaths, img2_fpaths, labels)</span>\n<span class=\"sd\">        &gt;&gt;&gt; img1, img2, label = self[0]</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">img1_fpaths</span><span class=\"p\">,</span> <span class=\"n\">img2_fpaths</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"p\">,</span> <span class=\"n\">transform</span><span class=\"o\">=</span><span class=\"s1\">&#39;default&#39;</span><span class=\"p\">):</span>\n        <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">img1_fpaths</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">img2_fpaths</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">labels</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">img2_fpaths</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">img1_fpaths</span> <span class=\"o\">=</span> <span class=\"n\">img1_fpaths</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">img2_fpaths</span> <span class=\"o\">=</span> <span class=\"n\">img2_fpaths</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"n\">labels</span>\n        <span class=\"k\">if</span> <span class=\"n\">transform</span>  <span class=\"o\">==</span> <span class=\"s1\">&#39;default&#39;</span><span class=\"p\">:</span>\n            <span class=\"n\">transform</span> <span class=\"o\">=</span> <span class=\"n\">torchvision</span><span class=\"o\">.</span><span class=\"n\">transforms</span><span class=\"o\">.</span><span class=\"n\">Compose</span><span class=\"p\">([</span>\n                <span class=\"c1\"># torchvision.transforms.Scale(224),</span>\n                <span class=\"n\">torchvision</span><span class=\"o\">.</span><span class=\"n\">transforms</span><span class=\"o\">.</span><span class=\"n\">ToTensor</span><span class=\"p\">(),</span>\n                <span class=\"n\">torchvision</span><span class=\"o\">.</span><span class=\"n\">transforms</span><span class=\"o\">.</span><span class=\"n\">Normalize</span><span class=\"p\">([</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">],</span>\n                                                 <span class=\"p\">[</span><span class=\"mf\">0.225</span><span class=\"p\">,</span> <span class=\"mf\">0.225</span><span class=\"p\">,</span> <span class=\"mf\">0.225</span><span class=\"p\">]),</span>\n            <span class=\"p\">])</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">transform</span> <span class=\"o\">=</span> <span class=\"n\">transform</span>\n\n<div class=\"viewcode-block\" id=\"LabeledPairDataset.class_weights\"><a class=\"viewcode-back\" href=\"../../../../../../ibeis.algo.verif.torch/#ibeis.algo.verif.torch.train_main.LabeledPairDataset.class_weights\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">class_weights</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n        <span class=\"n\">label_freq</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">value_counts</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">labels</span><span class=\"p\">)</span>\n        <span class=\"n\">class_weights</span> <span class=\"o\">=</span> <span class=\"n\">label_freq</span><span class=\"o\">.</span><span class=\"n\">median</span><span class=\"p\">()</span> <span class=\"o\">/</span> <span class=\"n\">label_freq</span>\n        <span class=\"n\">class_weights</span> <span class=\"o\">=</span> <span class=\"n\">class_weights</span><span class=\"o\">.</span><span class=\"n\">sort_index</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">values</span>\n        <span class=\"n\">class_weights</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">from_numpy</span><span class=\"p\">(</span><span class=\"n\">class_weights</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"n\">class_weights</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__getitem__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            index (int): Index</span>\n\n<span class=\"sd\">        Returns:</span>\n<span class=\"sd\">            tuple: (image1, image2, label)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">fpath1</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">img1_fpaths</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span>\n        <span class=\"n\">fpath2</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">img2_fpaths</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span>\n        <span class=\"n\">label</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">labels</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">loader</span><span class=\"p\">(</span><span class=\"n\">fpath</span><span class=\"p\">):</span>\n            <span class=\"n\">bgr_255</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">imread</span><span class=\"p\">(</span><span class=\"n\">fpath</span><span class=\"p\">)</span>\n            <span class=\"n\">bgr_01</span> <span class=\"o\">=</span> <span class=\"n\">bgr_255</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mf\">255.0</span>\n            <span class=\"n\">rgb_01</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">cvtColor</span><span class=\"p\">(</span><span class=\"n\">bgr_01</span><span class=\"p\">,</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">COLOR_BGR2RGB</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">rgb_01</span>\n\n        <span class=\"n\">img1</span> <span class=\"o\">=</span> <span class=\"n\">loader</span><span class=\"p\">(</span><span class=\"n\">fpath1</span><span class=\"p\">)</span>\n        <span class=\"n\">img2</span> <span class=\"o\">=</span> <span class=\"n\">loader</span><span class=\"p\">(</span><span class=\"n\">fpath2</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">:</span>\n            <span class=\"n\">img1</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">img1</span><span class=\"p\">)</span>\n            <span class=\"n\">img2</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">img2</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">img1</span><span class=\"p\">,</span> <span class=\"n\">img2</span><span class=\"p\">,</span> <span class=\"n\">label</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__len__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">img1_fpaths</span><span class=\"p\">)</span></div>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.algo.verif.torch.train_main</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">xdoctest</span>\n    <span class=\"n\">xdoctest</span><span class=\"o\">.</span><span class=\"n\">doctest_module</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">)</span>\n</pre></div>", "current_page_name": "_modules/ibeis/algo/verif/torch/train_main", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}