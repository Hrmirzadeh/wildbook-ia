{"parents": [{"link": "../../../../", "title": "Module code"}, {"link": "../../../", "title": "ibeis"}, {"link": "../../", "title": "ibeis.algo"}, {"link": "../", "title": "ibeis.algo.verif"}], "title": "ibeis.algo.verif.pairfeat", "body": "<h1>Source code for ibeis.algo.verif.pairfeat</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"k\">import</span> <span class=\"n\">absolute_import</span><span class=\"p\">,</span> <span class=\"n\">division</span><span class=\"p\">,</span> <span class=\"n\">print_function</span><span class=\"p\">,</span> <span class=\"n\">unicode_literals</span>\n<span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n<span class=\"kn\">import</span> <span class=\"nn\">vtool</span> <span class=\"k\">as</span> <span class=\"nn\">vt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">ubelt</span> <span class=\"k\">as</span> <span class=\"nn\">ub</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">import</span> <span class=\"nn\">dtool</span> <span class=\"k\">as</span> <span class=\"nn\">dt</span>\n<span class=\"kn\">from</span> <span class=\"nn\">os.path</span> <span class=\"k\">import</span> <span class=\"n\">join</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph</span> <span class=\"k\">import</span> <span class=\"n\">nx_utils</span> <span class=\"k\">as</span> <span class=\"n\">nxu</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.core_annots</span> <span class=\"k\">import</span> <span class=\"n\">ChipConfig</span>\n<span class=\"nb\">print</span><span class=\"p\">,</span> <span class=\"n\">rrr</span><span class=\"p\">,</span> <span class=\"n\">profile</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">inject2</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"PairFeatureConfig\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.verif/#ibeis.algo.verif.pairfeat.PairFeatureConfig\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">PairFeatureConfig</span><span class=\"p\">(</span><span class=\"n\">dt</span><span class=\"o\">.</span><span class=\"n\">Config</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Config for building pairwise feature dimensions</span>\n\n<span class=\"sd\">    I.E. Config to distil unordered feature correspondences into a fixed length</span>\n<span class=\"sd\">    vector.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">_param_info_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"c1\"># ut.ParamInfo(&#39;indices&#39;, slice(0, 5)),</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ParamInfo</span><span class=\"p\">(</span><span class=\"s1\">&#39;indices&#39;</span><span class=\"p\">,</span> <span class=\"p\">[]),</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ParamInfo</span><span class=\"p\">(</span><span class=\"s1\">&#39;summary_ops&#39;</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n            <span class=\"c1\"># &#39;invsum&#39;,</span>\n            <span class=\"s1\">&#39;sum&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;mean&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;len&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;med&#39;</span><span class=\"p\">}),</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ParamInfo</span><span class=\"p\">(</span><span class=\"s1\">&#39;local_keys&#39;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">),</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ParamInfo</span><span class=\"p\">(</span><span class=\"s1\">&#39;sorters&#39;</span><span class=\"p\">,</span> <span class=\"p\">[</span>\n            <span class=\"c1\"># &#39;ratio&#39;, &#39;norm_dist&#39;, &#39;match_dist&#39;</span>\n            <span class=\"c1\"># &#39;lnbnn&#39;, &#39;lnbnn_norm_dist&#39;,</span>\n        <span class=\"p\">]),</span>\n        <span class=\"c1\"># ut.ParamInfo(&#39;bin_key&#39;, None, valid_values=[None, &#39;ratio&#39;]),</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ParamInfo</span><span class=\"p\">(</span><span class=\"s1\">&#39;bin_key&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ratio&#39;</span><span class=\"p\">,</span> <span class=\"n\">valid_values</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ratio&#39;</span><span class=\"p\">]),</span>\n        <span class=\"c1\"># ut.ParamInfo(&#39;bins&#39;, [.5, .6, .7, .8])</span>\n        <span class=\"c1\"># ut.ParamInfo(&#39;bins&#39;, None, type_=eval),</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ParamInfo</span><span class=\"p\">(</span><span class=\"s1\">&#39;bins&#39;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"o\">.</span><span class=\"mi\">625</span><span class=\"p\">,),</span> <span class=\"n\">type_</span><span class=\"o\">=</span><span class=\"nb\">eval</span><span class=\"p\">),</span>\n        <span class=\"c1\"># ut.ParamInfo(&#39;need_lnbnn&#39;, False),</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ParamInfo</span><span class=\"p\">(</span><span class=\"s1\">&#39;use_na&#39;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">),</span>  <span class=\"c1\"># change to True if sklearn has RFs with nan support</span>\n    <span class=\"p\">]</span></div>\n\n\n<div class=\"viewcode-block\" id=\"VsOneMatchConfig\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.verif/#ibeis.algo.verif.pairfeat.VsOneMatchConfig\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">VsOneMatchConfig</span><span class=\"p\">(</span><span class=\"n\">dt</span><span class=\"o\">.</span><span class=\"n\">Config</span><span class=\"p\">):</span>\n    <span class=\"n\">_param_info_list</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">matching</span><span class=\"o\">.</span><span class=\"n\">VSONE_DEFAULT_CONFIG</span></div>\n\n\n<div class=\"viewcode-block\" id=\"VsOneFeatConfig\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.verif/#ibeis.algo.verif.pairfeat.VsOneFeatConfig\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">VsOneFeatConfig</span><span class=\"p\">(</span><span class=\"n\">dt</span><span class=\"o\">.</span><span class=\"n\">Config</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; keypoint params &quot;&quot;&quot;</span>\n    <span class=\"n\">_param_info_list</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">matching</span><span class=\"o\">.</span><span class=\"n\">VSONE_FEAT_CONFIG</span></div>\n\n\n<div class=\"viewcode-block\" id=\"MatchConfig\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.verif/#ibeis.algo.verif.pairfeat.MatchConfig\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">MatchConfig</span><span class=\"p\">(</span><span class=\"n\">dt</span><span class=\"o\">.</span><span class=\"n\">Config</span><span class=\"p\">):</span>\n    <span class=\"n\">_param_info_list</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n        <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">matching</span><span class=\"o\">.</span><span class=\"n\">VSONE_DEFAULT_CONFIG</span> <span class=\"o\">+</span>\n        <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">matching</span><span class=\"o\">.</span><span class=\"n\">VSONE_FEAT_CONFIG</span> <span class=\"o\">+</span>\n        <span class=\"n\">ChipConfig</span><span class=\"o\">.</span><span class=\"n\">_param_info_list</span>\n    <span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"PairwiseFeatureExtractor\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.verif/#ibeis.algo.verif.pairfeat.PairwiseFeatureExtractor\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">PairwiseFeatureExtractor</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (ibeis.IBEISController): image analysis api</span>\n<span class=\"sd\">        match_config (dict): config for building feature correspondences</span>\n<span class=\"sd\">        pairfeat_cfg (dict): config for making the pairwise feat vec</span>\n<span class=\"sd\">        global_keys (list): global keys to use</span>\n<span class=\"sd\">        need_lnbnn (bool): use LNBNN for enrichment</span>\n<span class=\"sd\">        feat_dims (list): subset of feature dimensions (from pruning)</span>\n<span class=\"sd\">                          if None, then all dimensions are used</span>\n<span class=\"sd\">        use_cache (bool):  turns on disk based caching (default = True)</span>\n<span class=\"sd\">        verbose (int):  verbosity flag (default = 1)</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.algo.verif.pairfeat PairwiseFeatureExtractor</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.algo.verif.pairfeat import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; extr = PairwiseFeatureExtractor(ibs)</span>\n<span class=\"sd\">        &gt;&gt;&gt; edges = [(1, 2), (2, 3)]</span>\n<span class=\"sd\">        &gt;&gt;&gt; X = extr.transform(edges)</span>\n<span class=\"sd\">        &gt;&gt;&gt; featinfo = vt.AnnotPairFeatInfo(X.columns)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(featinfo.get_infostr())</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">extr</span><span class=\"p\">,</span> <span class=\"n\">ibs</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"p\">{},</span> <span class=\"n\">use_cache</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n                 <span class=\"c1\"># Nested config props</span>\n                 <span class=\"n\">match_config</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">pairfeat_cfg</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">global_keys</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                 <span class=\"n\">need_lnbnn</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">feat_dims</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n\n        <span class=\"n\">extr</span><span class=\"o\">.</span><span class=\"n\">verbose</span> <span class=\"o\">=</span> <span class=\"n\">verbose</span>\n        <span class=\"n\">extr</span><span class=\"o\">.</span><span class=\"n\">use_cache</span> <span class=\"o\">=</span> <span class=\"n\">use_cache</span>\n        <span class=\"n\">extr</span><span class=\"o\">.</span><span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span>\n\n        <span class=\"c1\"># Configs for this are a bit foobar. Allow config to be a catch-all It</span>\n        <span class=\"c1\"># can either store params in nested or flat form</span>\n        <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n        <span class=\"n\">vars_</span> <span class=\"o\">=</span> <span class=\"nb\">vars</span><span class=\"p\">()</span>\n        <span class=\"k\">def</span> <span class=\"nf\">_popconfig</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"p\">):</span>\n            <span class=\"sd\">&quot;&quot;&quot; ensures param is either specified in func args xor config &quot;&quot;&quot;</span>\n            <span class=\"k\">if</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">config</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">vars_</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                    <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"si\">{}</span><span class=\"s1\"> specified twice&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">))</span>\n                <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"c1\"># See if the local namespace has it</span>\n                <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">vars_</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">value</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">default</span>\n            <span class=\"k\">return</span> <span class=\"n\">value</span>\n\n        <span class=\"c1\"># These also sort-of belong to pair-feat config</span>\n        <span class=\"n\">extr</span><span class=\"o\">.</span><span class=\"n\">global_keys</span> <span class=\"o\">=</span> <span class=\"n\">_popconfig</span><span class=\"p\">(</span><span class=\"s1\">&#39;global_keys&#39;</span><span class=\"p\">,</span> <span class=\"p\">[])</span>\n        <span class=\"n\">extr</span><span class=\"o\">.</span><span class=\"n\">need_lnbnn</span> <span class=\"o\">=</span> <span class=\"n\">_popconfig</span><span class=\"p\">(</span><span class=\"s1\">&#39;need_lnbnn&#39;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"n\">extr</span><span class=\"o\">.</span><span class=\"n\">feat_dims</span> <span class=\"o\">=</span> <span class=\"n\">_popconfig</span><span class=\"p\">(</span><span class=\"s1\">&#39;feat_dims&#39;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n\n        <span class=\"n\">extr</span><span class=\"o\">.</span><span class=\"n\">match_config</span> <span class=\"o\">=</span> <span class=\"n\">MatchConfig</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">_popconfig</span><span class=\"p\">(</span><span class=\"s1\">&#39;match_config&#39;</span><span class=\"p\">,</span> <span class=\"p\">{}))</span>\n        <span class=\"n\">extr</span><span class=\"o\">.</span><span class=\"n\">pairfeat_cfg</span> <span class=\"o\">=</span> <span class=\"n\">PairFeatureConfig</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">_popconfig</span><span class=\"p\">(</span><span class=\"s1\">&#39;pairfeat_cfg&#39;</span><span class=\"p\">,</span> <span class=\"p\">{}))</span>\n\n        <span class=\"c1\"># Allow config to store flat versions of these params</span>\n        <span class=\"n\">extr</span><span class=\"o\">.</span><span class=\"n\">match_config</span><span class=\"o\">.</span><span class=\"n\">pop_update</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">)</span>\n        <span class=\"n\">extr</span><span class=\"o\">.</span><span class=\"n\">pairfeat_cfg</span><span class=\"o\">.</span><span class=\"n\">pop_update</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s1\">&#39;Unused config items: &#39;</span> <span class=\"o\">+</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr4</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">))</span>\n\n<div class=\"viewcode-block\" id=\"PairwiseFeatureExtractor.transform\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.verif/#ibeis.algo.verif.pairfeat.PairwiseFeatureExtractor.transform\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">transform</span><span class=\"p\">(</span><span class=\"n\">extr</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Converts an annotation edge into their corresponding feature.</span>\n<span class=\"sd\">        By default this is a caching operation.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">extr</span><span class=\"o\">.</span><span class=\"n\">use_cache</span><span class=\"p\">:</span>\n            <span class=\"n\">feats</span> <span class=\"o\">=</span> <span class=\"n\">extr</span><span class=\"o\">.</span><span class=\"n\">_cached_pairwise_features</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">feats</span> <span class=\"o\">=</span> <span class=\"n\">extr</span><span class=\"o\">.</span><span class=\"n\">_make_pairwise_features</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">)</span>\n            <span class=\"n\">feats</span> <span class=\"o\">=</span> <span class=\"n\">extr</span><span class=\"o\">.</span><span class=\"n\">_postprocess_feats</span><span class=\"p\">(</span><span class=\"n\">feats</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">feats</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_exec_pairwise_match</span><span class=\"p\">(</span><span class=\"n\">extr</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"p\">,</span> <span class=\"n\">prog_hook</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Performs one-vs-one matching between pairs of annotations.</span>\n<span class=\"sd\">        This establishes the feature correspondences.</span>\n\n<span class=\"sd\">        CommandLine:</span>\n<span class=\"sd\">            python -m ibeis.algo.verif.pairfeat _exec_pairwise_match --show</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.algo.verif.pairfeat import *  # NOQA</span>\n<span class=\"sd\">            &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">            &gt;&gt;&gt; ibs = ibeis.opendb(&#39;testdb1&#39;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; match_config = dict(histeq=True)</span>\n<span class=\"sd\">            &gt;&gt;&gt; extr = PairwiseFeatureExtractor(ibs, match_config=match_config)</span>\n<span class=\"sd\">            &gt;&gt;&gt; edges = [(1, 2), (2, 3)]</span>\n<span class=\"sd\">            &gt;&gt;&gt; prog_hook = None</span>\n<span class=\"sd\">            &gt;&gt;&gt; match_list = extr._exec_pairwise_match(edges)</span>\n<span class=\"sd\">            &gt;&gt;&gt; match1, match2 = match_list</span>\n<span class=\"sd\">            &gt;&gt;&gt; assert match1.annot2 is match2.annot1</span>\n<span class=\"sd\">            &gt;&gt;&gt; assert match1.annot1 is not match2.annot2</span>\n<span class=\"sd\">            &gt;&gt;&gt; ut.quit_if_noshow()</span>\n<span class=\"sd\">            &gt;&gt;&gt; match2.show()</span>\n<span class=\"sd\">            &gt;&gt;&gt; ut.show_if_requested()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">extr</span><span class=\"o\">.</span><span class=\"n\">verbose</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[extr] executing pairwise one-vs-one matching&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">extr</span><span class=\"o\">.</span><span class=\"n\">ibs</span>\n        <span class=\"n\">match_config</span> <span class=\"o\">=</span> <span class=\"n\">extr</span><span class=\"o\">.</span><span class=\"n\">match_config</span>\n        <span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">lmap</span><span class=\"p\">(</span><span class=\"nb\">tuple</span><span class=\"p\">,</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">aslist</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">))</span>\n        <span class=\"n\">qaids</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take_column</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"n\">daids</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take_column</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># The depcache does the pairwise matching procedure</span>\n        <span class=\"n\">match_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">depc</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;pairwise_match&#39;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">qaids</span><span class=\"p\">,</span> <span class=\"n\">daids</span><span class=\"p\">),</span> <span class=\"s1\">&#39;match&#39;</span><span class=\"p\">,</span>\n                                  <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">match_config</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Hack: Postprocess matches to re-add ibeis annotation info</span>\n        <span class=\"c1\"># in lazy-dict format</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">ibeis</span> <span class=\"k\">import</span> <span class=\"n\">core_annots</span>\n        <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">hashdict</span><span class=\"p\">(</span><span class=\"n\">match_config</span><span class=\"p\">)</span>\n        <span class=\"n\">qannot_cfg</span> <span class=\"o\">=</span> <span class=\"n\">dannot_cfg</span> <span class=\"o\">=</span> <span class=\"n\">config</span>\n        <span class=\"n\">preload</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"n\">configured_lazy_annots</span> <span class=\"o\">=</span> <span class=\"n\">core_annots</span><span class=\"o\">.</span><span class=\"n\">make_configured_annots</span><span class=\"p\">(</span>\n            <span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">qaids</span><span class=\"p\">,</span> <span class=\"n\">daids</span><span class=\"p\">,</span> <span class=\"n\">qannot_cfg</span><span class=\"p\">,</span> <span class=\"n\">dannot_cfg</span><span class=\"p\">,</span> <span class=\"n\">preload</span><span class=\"o\">=</span><span class=\"n\">preload</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">qaid</span><span class=\"p\">,</span> <span class=\"n\">daid</span><span class=\"p\">,</span> <span class=\"n\">match</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">qaids</span><span class=\"p\">,</span> <span class=\"n\">daids</span><span class=\"p\">,</span> <span class=\"n\">match_list</span><span class=\"p\">):</span>\n            <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">annot1</span> <span class=\"o\">=</span> <span class=\"n\">configured_lazy_annots</span><span class=\"p\">[</span><span class=\"n\">config</span><span class=\"p\">][</span><span class=\"n\">qaid</span><span class=\"p\">]</span>\n            <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">annot2</span> <span class=\"o\">=</span> <span class=\"n\">configured_lazy_annots</span><span class=\"p\">[</span><span class=\"n\">config</span><span class=\"p\">][</span><span class=\"n\">daid</span><span class=\"p\">]</span>\n            <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">config</span>\n        <span class=\"k\">return</span> <span class=\"n\">match_list</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_enrich_matches_lnbnn</span><span class=\"p\">(</span><span class=\"n\">extr</span><span class=\"p\">,</span> <span class=\"n\">matches</span><span class=\"p\">,</span> <span class=\"n\">other_aids</span><span class=\"p\">,</span> <span class=\"n\">other_nids</span><span class=\"p\">,</span>\n                              <span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Given a set of one-vs-one matches, searches for LNBNN normalizers in a</span>\n<span class=\"sd\">        larger database to enrich the matches with database-level</span>\n<span class=\"sd\">        distinctiveness.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.hots</span> <span class=\"k\">import</span> <span class=\"n\">nn_weights</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span><span class=\"s1\">&#39;havent tested since the re-work. &#39;</span>\n                                  <span class=\"s1\">&#39;Need to ensure that things work correctly.&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">extr</span><span class=\"o\">.</span><span class=\"n\">ibs</span>\n        <span class=\"n\">cfgdict</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;can_match_samename&#39;</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;can_match_sameimg&#39;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;K&#39;</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;Knorm&#39;</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;prescore_method&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;csum&#39;</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;score_method&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;csum&#39;</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">custom_nid_lookup</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dzip</span><span class=\"p\">(</span><span class=\"n\">other_aids</span><span class=\"p\">,</span> <span class=\"n\">other_nids</span><span class=\"p\">)</span>\n        <span class=\"n\">aids</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">annot2</span><span class=\"p\">[</span><span class=\"s1\">&#39;aid&#39;</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">m</span> <span class=\"ow\">in</span> <span class=\"n\">matches</span><span class=\"p\">]</span>\n        <span class=\"n\">qreq_</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">new_query_request</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"n\">other_aids</span><span class=\"p\">,</span> <span class=\"n\">cfgdict</span><span class=\"o\">=</span><span class=\"n\">cfgdict</span><span class=\"p\">,</span>\n                                      <span class=\"n\">custom_nid_lookup</span><span class=\"o\">=</span><span class=\"n\">custom_nid_lookup</span><span class=\"p\">,</span>\n                                      <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">extr</span><span class=\"o\">.</span><span class=\"n\">verbose</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n        <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">load_indexer</span><span class=\"p\">()</span>\n        <span class=\"n\">indexer</span> <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">indexer</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">inplace</span><span class=\"p\">:</span>\n            <span class=\"n\">matches_</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">match</span> <span class=\"ow\">in</span> <span class=\"n\">matches</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">matches_</span> <span class=\"o\">=</span> <span class=\"n\">matches</span>\n        <span class=\"n\">K</span> <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">qparams</span><span class=\"o\">.</span><span class=\"n\">K</span>\n        <span class=\"n\">Knorm</span> <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">qparams</span><span class=\"o\">.</span><span class=\"n\">Knorm</span>\n        <span class=\"n\">normalizer_rule</span>  <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">qparams</span><span class=\"o\">.</span><span class=\"n\">normalizer_rule</span>\n\n        <span class=\"n\">extr</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Stacking vecs for batch lnbnn matching&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">offset_list</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">cumsum</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"n\">match_</span><span class=\"o\">.</span><span class=\"n\">fm</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">match_</span> <span class=\"ow\">in</span> <span class=\"n\">matches_</span><span class=\"p\">])</span>\n        <span class=\"n\">stacked_vecs</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">vstack</span><span class=\"p\">([</span>\n            <span class=\"n\">match_</span><span class=\"o\">.</span><span class=\"n\">matched_vecs2</span><span class=\"p\">()</span>\n            <span class=\"k\">for</span> <span class=\"n\">match_</span> <span class=\"ow\">in</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ProgIter</span><span class=\"p\">(</span><span class=\"n\">matches_</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">&#39;stack matched vecs&#39;</span><span class=\"p\">)</span>\n        <span class=\"p\">])</span>\n\n        <span class=\"n\">vecs</span> <span class=\"o\">=</span> <span class=\"n\">stacked_vecs</span>\n        <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">K</span> <span class=\"o\">+</span> <span class=\"n\">Knorm</span><span class=\"p\">)</span>\n        <span class=\"n\">idxs</span><span class=\"p\">,</span> <span class=\"n\">dists</span> <span class=\"o\">=</span> <span class=\"n\">indexer</span><span class=\"o\">.</span><span class=\"n\">batch_knn</span><span class=\"p\">(</span><span class=\"n\">vecs</span><span class=\"p\">,</span> <span class=\"n\">num</span><span class=\"p\">,</span> <span class=\"n\">chunksize</span><span class=\"o\">=</span><span class=\"mi\">8192</span><span class=\"p\">,</span>\n                                        <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">&#39;lnbnn scoring&#39;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">idx_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">idxs</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">:</span><span class=\"n\">r</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"ow\">in</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">itertwo</span><span class=\"p\">(</span><span class=\"n\">offset_list</span><span class=\"p\">)]</span>\n        <span class=\"n\">dist_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">dists</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">:</span><span class=\"n\">r</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"ow\">in</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">itertwo</span><span class=\"p\">(</span><span class=\"n\">offset_list</span><span class=\"p\">)]</span>\n        <span class=\"n\">iter_</span> <span class=\"o\">=</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">matches_</span><span class=\"p\">,</span> <span class=\"n\">idx_list</span><span class=\"p\">,</span> <span class=\"n\">dist_list</span><span class=\"p\">)</span>\n        <span class=\"n\">prog</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ProgIter</span><span class=\"p\">(</span><span class=\"n\">iter_</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">matches_</span><span class=\"p\">),</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">&#39;lnbnn scoring&#39;</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">match_</span><span class=\"p\">,</span> <span class=\"n\">neighb_idx</span><span class=\"p\">,</span> <span class=\"n\">neighb_dist</span> <span class=\"ow\">in</span> <span class=\"n\">prog</span><span class=\"p\">:</span>\n            <span class=\"n\">qaid</span> <span class=\"o\">=</span> <span class=\"n\">match_</span><span class=\"o\">.</span><span class=\"n\">annot2</span><span class=\"p\">[</span><span class=\"s1\">&#39;aid&#39;</span><span class=\"p\">]</span>\n            <span class=\"n\">norm_k</span> <span class=\"o\">=</span> <span class=\"n\">nn_weights</span><span class=\"o\">.</span><span class=\"n\">get_normk</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"p\">,</span> <span class=\"n\">qaid</span><span class=\"p\">,</span> <span class=\"n\">neighb_idx</span><span class=\"p\">,</span> <span class=\"n\">Knorm</span><span class=\"p\">,</span>\n                                          <span class=\"n\">normalizer_rule</span><span class=\"p\">)</span>\n            <span class=\"n\">ndist</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">take_col_per_row</span><span class=\"p\">(</span><span class=\"n\">neighb_dist</span><span class=\"p\">,</span> <span class=\"n\">norm_k</span><span class=\"p\">)</span>\n            <span class=\"n\">vdist</span> <span class=\"o\">=</span> <span class=\"n\">match_</span><span class=\"o\">.</span><span class=\"n\">local_measures</span><span class=\"p\">[</span><span class=\"s1\">&#39;match_dist&#39;</span><span class=\"p\">]</span>\n            <span class=\"n\">lnbnn_dist</span> <span class=\"o\">=</span> <span class=\"n\">nn_weights</span><span class=\"o\">.</span><span class=\"n\">lnbnn_fn</span><span class=\"p\">(</span><span class=\"n\">vdist</span><span class=\"p\">,</span> <span class=\"n\">ndist</span><span class=\"p\">)</span>\n            <span class=\"n\">lnbnn_clip_dist</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">clip</span><span class=\"p\">(</span><span class=\"n\">lnbnn_dist</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">inf</span><span class=\"p\">)</span>\n            <span class=\"n\">match_</span><span class=\"o\">.</span><span class=\"n\">local_measures</span><span class=\"p\">[</span><span class=\"s1\">&#39;lnbnn_norm_dist&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ndist</span>\n            <span class=\"n\">match_</span><span class=\"o\">.</span><span class=\"n\">local_measures</span><span class=\"p\">[</span><span class=\"s1\">&#39;lnbnn&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">lnbnn_dist</span>\n            <span class=\"n\">match_</span><span class=\"o\">.</span><span class=\"n\">local_measures</span><span class=\"p\">[</span><span class=\"s1\">&#39;lnbnn_clip&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">lnbnn_clip_dist</span>\n            <span class=\"n\">match_</span><span class=\"o\">.</span><span class=\"n\">fs</span> <span class=\"o\">=</span> <span class=\"n\">lnbnn_dist</span>\n        <span class=\"k\">return</span> <span class=\"n\">matches_</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_enriched_pairwise_matches</span><span class=\"p\">(</span><span class=\"n\">extr</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"p\">,</span> <span class=\"n\">prog_hook</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Adds extra domain specific local and global properties that the match</span>\n<span class=\"sd\">        object (feature corresopndences) doesnt directly provide.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.algo.verif.pairfeat import *  # NOQA</span>\n<span class=\"sd\">            &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">            &gt;&gt;&gt; ibs = ibeis.opendb(&#39;testdb1&#39;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; match_config = {</span>\n<span class=\"sd\">            &gt;&gt;&gt;     &#39;K&#39;: 1, &#39;Knorm&#39;: 3, &#39;affine_invariance&#39;: True,</span>\n<span class=\"sd\">            &gt;&gt;&gt;     &#39;augment_orientation&#39;: True, &#39;checks&#39;: 20, &#39;ratio_thresh&#39;: 0.8,</span>\n<span class=\"sd\">            &gt;&gt;&gt;     &#39;refine_method&#39;: &#39;homog&#39;, &#39;sv_on&#39;: True, &#39;sver_xy_thresh&#39;: 0.01,</span>\n<span class=\"sd\">            &gt;&gt;&gt;     &#39;symmetric&#39;: True, &#39;weight&#39;: &#39;fgweights&#39;</span>\n<span class=\"sd\">            &gt;&gt;&gt; }</span>\n<span class=\"sd\">            &gt;&gt;&gt; global_keys = [&#39;gps&#39;, &#39;qual&#39;, &#39;time&#39;]</span>\n<span class=\"sd\">            &gt;&gt;&gt; extr = PairwiseFeatureExtractor(ibs, match_config=match_config,</span>\n<span class=\"sd\">            &gt;&gt;&gt;                                 global_keys=global_keys)</span>\n<span class=\"sd\">            &gt;&gt;&gt; assert extr.global_keys == global_keys</span>\n<span class=\"sd\">            &gt;&gt;&gt; edges = [(1, 2), (2, 3)]</span>\n<span class=\"sd\">            &gt;&gt;&gt; prog_hook = None</span>\n<span class=\"sd\">            &gt;&gt;&gt; match_list = extr._enriched_pairwise_matches(edges)</span>\n<span class=\"sd\">            &gt;&gt;&gt; match1, match2 = match_list</span>\n<span class=\"sd\">            &gt;&gt;&gt; assert match1.annot2 is match2.annot1</span>\n<span class=\"sd\">            &gt;&gt;&gt; assert match1.annot1 is not match2.annot2</span>\n<span class=\"sd\">            &gt;&gt;&gt; print(&#39;match1.global_measures = {!r}&#39;.format(match1.global_measures))</span>\n<span class=\"sd\">            &gt;&gt;&gt; assert len(match1.global_measures) == 3, &#39;global measures&#39;</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># print(&#39;extr.global_keys = {!r}&#39;.format(extr.global_keys))</span>\n        <span class=\"k\">if</span> <span class=\"n\">extr</span><span class=\"o\">.</span><span class=\"n\">global_keys</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s1\">&#39;specify global keys&#39;</span><span class=\"p\">)</span>\n            <span class=\"c1\"># global_keys = [&#39;view_int&#39;, &#39;qual&#39;, &#39;gps&#39;, &#39;time&#39;]</span>\n            <span class=\"c1\"># global_keys = [&#39;view&#39;, &#39;qual&#39;, &#39;gps&#39;, &#39;time&#39;]</span>\n        <span class=\"n\">matches</span> <span class=\"o\">=</span> <span class=\"n\">extr</span><span class=\"o\">.</span><span class=\"n\">_exec_pairwise_match</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">,</span> <span class=\"n\">prog_hook</span><span class=\"o\">=</span><span class=\"n\">prog_hook</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">extr</span><span class=\"o\">.</span><span class=\"n\">need_lnbnn</span><span class=\"p\">:</span>\n            <span class=\"n\">extr</span><span class=\"o\">.</span><span class=\"n\">_enrich_matches_lnbnn</span><span class=\"p\">(</span><span class=\"n\">matches</span><span class=\"p\">,</span> <span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">extr</span><span class=\"o\">.</span><span class=\"n\">verbose</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[extr] enriching match attributes&#39;</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Ensure matches know about relavent metadata</span>\n        <span class=\"k\">for</span> <span class=\"n\">match</span> <span class=\"ow\">in</span> <span class=\"n\">matches</span><span class=\"p\">:</span>\n            <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">matching</span><span class=\"o\">.</span><span class=\"n\">ensure_metadata_normxy</span><span class=\"p\">(</span><span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">annot1</span><span class=\"p\">)</span>\n            <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">matching</span><span class=\"o\">.</span><span class=\"n\">ensure_metadata_normxy</span><span class=\"p\">(</span><span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">annot2</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">match</span> <span class=\"ow\">in</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ProgIter</span><span class=\"p\">(</span><span class=\"n\">matches</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">&#39;setup globals&#39;</span><span class=\"p\">):</span>\n            <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">add_global_measures</span><span class=\"p\">(</span><span class=\"n\">extr</span><span class=\"o\">.</span><span class=\"n\">global_keys</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">match</span> <span class=\"ow\">in</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ProgIter</span><span class=\"p\">(</span><span class=\"n\">matches</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">&#39;setup locals&#39;</span><span class=\"p\">):</span>\n            <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">add_local_measures</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">matches</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_make_pairwise_features</span><span class=\"p\">(</span><span class=\"n\">extr</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Construct matches and their pairwise features</span>\n\n<span class=\"sd\">        CommandLine:</span>\n<span class=\"sd\">            python -m ibeis.algo.verif.pairfeat _make_pairwise_features</span>\n\n<span class=\"sd\">        Doctest:</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.algo.verif.pairfeat import *</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.algo.graph import demo</span>\n<span class=\"sd\">            &gt;&gt;&gt; infr = demo.demodata_mtest_infr()</span>\n<span class=\"sd\">            &gt;&gt;&gt; extr = PairwiseFeatureExtractor(ibs=infr.ibs)</span>\n<span class=\"sd\">            &gt;&gt;&gt; match_config = {&#39;K&#39;: 1, &#39;Knorm&#39;: 3, &#39;affine_invariance&#39;: True,</span>\n<span class=\"sd\">            &gt;&gt;&gt;           &#39;augment_orientation&#39;: True, &#39;checks&#39;: 20,</span>\n<span class=\"sd\">            &gt;&gt;&gt;           &#39;ratio_thresh&#39;: 0.8, &#39;refine_method&#39;: &#39;homog&#39;,</span>\n<span class=\"sd\">            &gt;&gt;&gt;           &#39;sv_on&#39;: True, &#39;sver_xy_thresh&#39;: 0.01,</span>\n<span class=\"sd\">            &gt;&gt;&gt;           &#39;symmetric&#39;: True, &#39;weight&#39;: &#39;fgweights&#39;}</span>\n<span class=\"sd\">            &gt;&gt;&gt; local_keys =  [</span>\n<span class=\"sd\">            &gt;&gt;&gt;     &#39;fgweights&#39;, &#39;match_dist&#39;, &#39;norm_dist&#39;, &#39;norm_x1&#39;, &#39;norm_x2&#39;,</span>\n<span class=\"sd\">            &gt;&gt;&gt;     &#39;norm_y1&#39;, &#39;norm_y2&#39;, &#39;ratio_score&#39;, &#39;scale1&#39;, &#39;scale2&#39;,</span>\n<span class=\"sd\">            &gt;&gt;&gt;     &#39;sver_err_ori&#39;, &#39;sver_err_scale&#39;, &#39;sver_err_xy&#39;,</span>\n<span class=\"sd\">            &gt;&gt;&gt;     &#39;weighted_norm_dist&#39;, &#39;weighted_ratio_score&#39;]</span>\n<span class=\"sd\">            &gt;&gt;&gt; pairfeat_cfg = {</span>\n<span class=\"sd\">            &gt;&gt;&gt;     &#39;bin_key&#39;: &#39;ratio&#39;,</span>\n<span class=\"sd\">            &gt;&gt;&gt;     &#39;bins&#39;: [0.6, 0.7, 0.8],</span>\n<span class=\"sd\">            &gt;&gt;&gt;     &#39;indices&#39;: [],</span>\n<span class=\"sd\">            &gt;&gt;&gt;     &#39;local_keys&#39;: local_keys,</span>\n<span class=\"sd\">            &gt;&gt;&gt;     &#39;sorters&#39;: [],</span>\n<span class=\"sd\">            &gt;&gt;&gt;     &#39;summary_ops&#39;: {&#39;len&#39;, &#39;mean&#39;, &#39;sum&#39;}</span>\n<span class=\"sd\">            &gt;&gt;&gt; }</span>\n<span class=\"sd\">            &gt;&gt;&gt; global_keys = [&#39;gps&#39;, &#39;qual&#39;, &#39;time&#39;, &#39;view&#39;]</span>\n<span class=\"sd\">            &gt;&gt;&gt; ibs = infr.ibs</span>\n<span class=\"sd\">            &gt;&gt;&gt; extr = PairwiseFeatureExtractor(ibs, match_config=match_config,</span>\n<span class=\"sd\">            &gt;&gt;&gt;                                 pairfeat_cfg=pairfeat_cfg,</span>\n<span class=\"sd\">            &gt;&gt;&gt;                                 global_keys=global_keys)</span>\n<span class=\"sd\">            &gt;&gt;&gt; multi_index = True</span>\n<span class=\"sd\">            &gt;&gt;&gt; edges = [(1, 2), (2, 3)]</span>\n<span class=\"sd\">            &gt;&gt;&gt; matches, X = extr._make_pairwise_features(edges)</span>\n<span class=\"sd\">            &gt;&gt;&gt; featinfo = vt.AnnotPairFeatInfo(X.columns)</span>\n<span class=\"sd\">            &gt;&gt;&gt; print(featinfo.get_infostr())</span>\n<span class=\"sd\">            &gt;&gt;&gt; match = matches[0]</span>\n<span class=\"sd\">            &gt;&gt;&gt; glob_X = match._make_global_feature_vector(global_keys)</span>\n<span class=\"sd\">            &gt;&gt;&gt; assert len(glob_X) == 19</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">lmap</span><span class=\"p\">(</span><span class=\"nb\">tuple</span><span class=\"p\">,</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">aslist</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">))</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"p\">[],</span> <span class=\"p\">[]</span>\n\n        <span class=\"n\">matches</span> <span class=\"o\">=</span> <span class=\"n\">extr</span><span class=\"o\">.</span><span class=\"n\">_enriched_pairwise_matches</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">)</span>\n        <span class=\"c1\"># ---------------</span>\n        <span class=\"c1\"># Try different feature constructions</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[extr] building pairwise features&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">pairfeat_cfg</span> <span class=\"o\">=</span> <span class=\"n\">extr</span><span class=\"o\">.</span><span class=\"n\">pairfeat_cfg</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n        <span class=\"n\">use_na</span> <span class=\"o\">=</span> <span class=\"n\">pairfeat_cfg</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s1\">&#39;use_na&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">pairfeat_cfg</span><span class=\"p\">[</span><span class=\"s1\">&#39;summary_ops&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">pairfeat_cfg</span><span class=\"p\">[</span><span class=\"s1\">&#39;summary_ops&#39;</span><span class=\"p\">])</span>\n        <span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">([</span>\n            <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">make_feature_vector</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">pairfeat_cfg</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">m</span> <span class=\"ow\">in</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ProgIter</span><span class=\"p\">(</span><span class=\"n\">matches</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">&#39;making pairwise feats&#39;</span><span class=\"p\">)</span>\n        <span class=\"p\">])</span>\n        <span class=\"n\">multi_index</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"k\">if</span> <span class=\"n\">multi_index</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Index features by edges</span>\n            <span class=\"n\">uv_index</span> <span class=\"o\">=</span> <span class=\"n\">nxu</span><span class=\"o\">.</span><span class=\"n\">ensure_multi_index</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s1\">&#39;aid1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;aid2&#39;</span><span class=\"p\">))</span>\n            <span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">uv_index</span>\n        <span class=\"n\">X</span><span class=\"p\">[</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">isnull</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span>\n        <span class=\"n\">X</span><span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">isinf</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span>\n        <span class=\"c1\"># Re-order column names to ensure dimensions are consistent</span>\n        <span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">reindex_axis</span><span class=\"p\">(</span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">columns</span><span class=\"p\">),</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># hack to fix feature validity</span>\n        <span class=\"k\">if</span> <span class=\"s1\">&#39;global(speed)&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">columns</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">any</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">isinf</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">[</span><span class=\"s1\">&#39;global(speed)&#39;</span><span class=\"p\">])):</span>\n                <span class=\"n\">flags</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">isinf</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">[</span><span class=\"s1\">&#39;global(speed)&#39;</span><span class=\"p\">])</span>\n                <span class=\"n\">numer</span> <span class=\"o\">=</span> <span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">flags</span><span class=\"p\">,</span> <span class=\"s1\">&#39;global(gps_delta)&#39;</span><span class=\"p\">]</span>\n                <span class=\"n\">denom</span> <span class=\"o\">=</span> <span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">flags</span><span class=\"p\">,</span> <span class=\"s1\">&#39;global(time_delta)&#39;</span><span class=\"p\">]</span>\n                <span class=\"n\">newvals</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">full</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">numer</span><span class=\"p\">),</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">)</span>\n                <span class=\"n\">newvals</span><span class=\"p\">[(</span><span class=\"n\">numer</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"n\">denom</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n                <span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">flags</span><span class=\"p\">,</span> <span class=\"s1\">&#39;global(speed)&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">newvals</span>\n\n        <span class=\"n\">aid_pairs_</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">annot1</span><span class=\"p\">[</span><span class=\"s1\">&#39;aid&#39;</span><span class=\"p\">],</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">annot2</span><span class=\"p\">[</span><span class=\"s1\">&#39;aid&#39;</span><span class=\"p\">])</span> <span class=\"k\">for</span> <span class=\"n\">m</span> <span class=\"ow\">in</span> <span class=\"n\">matches</span><span class=\"p\">]</span>\n        <span class=\"k\">assert</span> <span class=\"n\">aid_pairs_</span> <span class=\"o\">==</span> <span class=\"n\">edges</span><span class=\"p\">,</span> <span class=\"s1\">&#39;edge ordering changed&#39;</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">use_na</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Fill nan values with very large values to workaround lack of nan</span>\n            <span class=\"c1\"># support in sklearn master.</span>\n            <span class=\"n\">X</span><span class=\"p\">[</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">isnull</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">**</span> <span class=\"mi\">30</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n        <span class=\"k\">return</span> <span class=\"n\">matches</span><span class=\"p\">,</span> <span class=\"n\">X</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_make_cfgstr</span><span class=\"p\">(</span><span class=\"n\">extr</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"p\">):</span>\n        <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">extr</span><span class=\"o\">.</span><span class=\"n\">ibs</span>\n        <span class=\"n\">edge_uuids</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">unflat_map</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_visual_uuids</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"p\">)</span>\n        <span class=\"n\">edge_hashid</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">hashid_arr</span><span class=\"p\">(</span><span class=\"n\">edge_uuids</span><span class=\"p\">,</span> <span class=\"s1\">&#39;edges&#39;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">_cfg_lbl</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr2</span><span class=\"p\">,</span> <span class=\"n\">si</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">itemsep</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"n\">kvsep</span><span class=\"o\">=</span><span class=\"s1\">&#39;:&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">match_configclass</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">depc_annot</span><span class=\"o\">.</span><span class=\"n\">configclass_dict</span><span class=\"p\">[</span><span class=\"s1\">&#39;pairwise_match&#39;</span><span class=\"p\">]</span>\n\n        <span class=\"n\">cfgstr</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;_&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">([</span>\n            <span class=\"n\">edge_hashid</span><span class=\"p\">,</span>\n            <span class=\"n\">_cfg_lbl</span><span class=\"p\">(</span><span class=\"n\">extr</span><span class=\"o\">.</span><span class=\"n\">match_config</span><span class=\"p\">),</span>\n            <span class=\"n\">_cfg_lbl</span><span class=\"p\">(</span><span class=\"n\">extr</span><span class=\"o\">.</span><span class=\"n\">pairfeat_cfg</span><span class=\"p\">),</span>\n            <span class=\"s1\">&#39;global(&#39;</span> <span class=\"o\">+</span> <span class=\"n\">_cfg_lbl</span><span class=\"p\">(</span><span class=\"n\">extr</span><span class=\"o\">.</span><span class=\"n\">global_keys</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;)&#39;</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;pairwise_match_version=</span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">match_configclass</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">version</span><span class=\"p\">,)</span>\n        <span class=\"p\">])</span>\n        <span class=\"k\">return</span> <span class=\"n\">cfgstr</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_postprocess_feats</span><span class=\"p\">(</span><span class=\"n\">extr</span><span class=\"p\">,</span> <span class=\"n\">feats</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Take the filtered subset of columns</span>\n        <span class=\"k\">if</span> <span class=\"n\">extr</span><span class=\"o\">.</span><span class=\"n\">feat_dims</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">missing</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">extr</span><span class=\"o\">.</span><span class=\"n\">feat_dims</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">difference</span><span class=\"p\">(</span><span class=\"n\">feats</span><span class=\"o\">.</span><span class=\"n\">columns</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"nb\">any</span><span class=\"p\">(</span><span class=\"n\">missing</span><span class=\"p\">):</span>\n                <span class=\"c1\"># print(&#39;We have: &#39; + ut.repr4(feats.columns))</span>\n                <span class=\"n\">alt</span> <span class=\"o\">=</span> <span class=\"n\">feats</span><span class=\"o\">.</span><span class=\"n\">columns</span><span class=\"o\">.</span><span class=\"n\">difference</span><span class=\"p\">(</span><span class=\"n\">extr</span><span class=\"o\">.</span><span class=\"n\">feat_dims</span><span class=\"p\">)</span>\n                <span class=\"n\">mis_msg</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;Missing feature dims: &#39;</span> <span class=\"o\">+</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr4</span><span class=\"p\">(</span><span class=\"n\">missing</span><span class=\"p\">))</span>\n                <span class=\"n\">alt_msg</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;Did you mean? &#39;</span> <span class=\"o\">+</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr4</span><span class=\"p\">(</span><span class=\"n\">alt</span><span class=\"p\">))</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mis_msg</span><span class=\"p\">)</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">alt_msg</span><span class=\"p\">)</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">KeyError</span><span class=\"p\">(</span><span class=\"n\">mis_msg</span><span class=\"p\">)</span>\n            <span class=\"n\">feats</span> <span class=\"o\">=</span> <span class=\"n\">feats</span><span class=\"p\">[</span><span class=\"n\">extr</span><span class=\"o\">.</span><span class=\"n\">feat_dims</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">feats</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_cached_pairwise_features</span><span class=\"p\">(</span><span class=\"n\">extr</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Create pairwise features for annotations in a test inference object</span>\n<span class=\"sd\">        based on the features used to learn here</span>\n\n<span class=\"sd\">        TODO: need a more systematic way of specifying which feature dimensions</span>\n<span class=\"sd\">        need to be computed</span>\n\n<span class=\"sd\">        Notes:</span>\n<span class=\"sd\">            Given a edge (u, v), we need to:</span>\n<span class=\"sd\">            * Check which classifiers we have</span>\n<span class=\"sd\">            * Check which feat-cols the classifier needs,</span>\n<span class=\"sd\">               and construct a configuration that can acheive that.</span>\n<span class=\"sd\">                * Construct the chip/feat config</span>\n<span class=\"sd\">                * Construct the vsone config</span>\n<span class=\"sd\">                * Additional LNBNN enriching config</span>\n<span class=\"sd\">                * Pairwise feature construction config</span>\n<span class=\"sd\">            * Then we can apply the feature to the classifier</span>\n\n<span class=\"sd\">        edges = [(1, 2)]</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">extr</span><span class=\"o\">.</span><span class=\"n\">verbose</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[pairfeat] Requesting </span><span class=\"si\">{}</span><span class=\"s1\"> cached pairwise features&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n                <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">)))</span>\n\n        <span class=\"c1\"># TODO: use object properties</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">assert</span> <span class=\"n\">extr</span><span class=\"o\">.</span><span class=\"n\">feat_dims</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">&#39;no edges and unset feat dims&#39;</span>\n            <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">nxu</span><span class=\"o\">.</span><span class=\"n\">ensure_multi_index</span><span class=\"p\">([],</span> <span class=\"p\">(</span><span class=\"s1\">&#39;aid1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;aid2&#39;</span><span class=\"p\">))</span>\n            <span class=\"n\">feats</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"n\">extr</span><span class=\"o\">.</span><span class=\"n\">feat_dims</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"n\">index</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">feats</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">use_cache</span> <span class=\"o\">=</span> <span class=\"ow\">not</span> <span class=\"n\">extr</span><span class=\"o\">.</span><span class=\"n\">need_lnbnn</span> <span class=\"ow\">and</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span>\n            <span class=\"n\">cache_dir</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">extr</span><span class=\"o\">.</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_cachedir</span><span class=\"p\">(),</span> <span class=\"s1\">&#39;infr_bulk_cache&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">feat_cfgstr</span> <span class=\"o\">=</span> <span class=\"n\">extr</span><span class=\"o\">.</span><span class=\"n\">_make_cfgstr</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">)</span>\n            <span class=\"n\">cacher</span> <span class=\"o\">=</span> <span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">Cacher</span><span class=\"p\">(</span>\n                <span class=\"s1\">&#39;bulk_pairfeats_v3&#39;</span><span class=\"p\">,</span> <span class=\"n\">feat_cfgstr</span><span class=\"p\">,</span> <span class=\"n\">enabled</span><span class=\"o\">=</span><span class=\"n\">use_cache</span><span class=\"p\">,</span>\n                <span class=\"n\">dpath</span><span class=\"o\">=</span><span class=\"n\">cache_dir</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">extr</span><span class=\"o\">.</span><span class=\"n\">verbose</span> <span class=\"o\">-</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n\n            <span class=\"c1\"># if cacher.exists() and extr.verbose &gt; 3:</span>\n            <span class=\"c1\">#     fpath = cacher.get_fpath()</span>\n            <span class=\"c1\">#     print(&#39;Load match cache size: {}&#39;.format(</span>\n            <span class=\"c1\">#         ut.get_file_nBytes_str(fpath)))</span>\n\n            <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">cacher</span><span class=\"o\">.</span><span class=\"n\">tryload</span><span class=\"p\">()</span>\n            <span class=\"k\">if</span> <span class=\"n\">data</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">extr</span><span class=\"o\">.</span><span class=\"n\">_make_pairwise_features</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">)</span>\n                <span class=\"n\">cacher</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n                <span class=\"c1\"># if cacher.enabled and extr.verbose &gt; 3:</span>\n                <span class=\"c1\">#     fpath = cacher.get_fpath()</span>\n                <span class=\"c1\">#     print(&#39;Save match cache size: {}&#39;.format(</span>\n                <span class=\"c1\">#         ut.get_file_nBytes_str(fpath)))</span>\n\n            <span class=\"n\">matches</span><span class=\"p\">,</span> <span class=\"n\">feats</span> <span class=\"o\">=</span> <span class=\"n\">data</span>\n            <span class=\"n\">feats</span> <span class=\"o\">=</span> <span class=\"n\">extr</span><span class=\"o\">.</span><span class=\"n\">_postprocess_feats</span><span class=\"p\">(</span><span class=\"n\">feats</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">feats</span></div>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.algo.verif.pairfeat</span>\n<span class=\"sd\">        python -m ibeis.algo.verif.pairfeat --allexamples</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">multiprocessing</span>\n    <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">freeze_support</span><span class=\"p\">()</span>  <span class=\"c1\"># for win32</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>  <span class=\"c1\"># NOQA</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">doctest_funcs</span><span class=\"p\">()</span>\n</pre></div>", "current_page_name": "_modules/ibeis/algo/verif/pairfeat", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}