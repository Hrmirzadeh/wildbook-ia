{"parents": [{"link": "../../../../", "title": "Module code"}, {"link": "../../../", "title": "ibeis"}, {"link": "../../", "title": "ibeis.algo"}, {"link": "../", "title": "ibeis.algo.verif"}], "title": "ibeis.algo.verif.sklearn_utils", "body": "<h1>Source code for ibeis.algo.verif.sklearn_utils</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"k\">import</span> <span class=\"n\">absolute_import</span><span class=\"p\">,</span> <span class=\"n\">division</span><span class=\"p\">,</span> <span class=\"n\">print_function</span><span class=\"p\">,</span> <span class=\"n\">unicode_literals</span>\n<span class=\"c1\"># import warning</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.utils.validation</span> <span class=\"k\">import</span> <span class=\"n\">check_array</span>\n<span class=\"c1\"># from sklearn.utils import check_random_state</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.externals.six.moves</span> <span class=\"k\">import</span> <span class=\"nb\">zip</span>\n<span class=\"c1\"># from sklearn.model_selection._split import (_BaseKFold, KFold)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection._split</span> <span class=\"k\">import</span> <span class=\"p\">(</span><span class=\"n\">_BaseKFold</span><span class=\"p\">,)</span>\n<span class=\"nb\">print</span><span class=\"p\">,</span> <span class=\"n\">rrr</span><span class=\"p\">,</span> <span class=\"n\">profile</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">inject2</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># from sklearn.utils.fixes import bincount</span>\n<span class=\"n\">bincount</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">bincount</span>\n\n\n<div class=\"viewcode-block\" id=\"StratifiedGroupKFold\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.verif/#ibeis.algo.verif.sklearn_utils.StratifiedGroupKFold\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">StratifiedGroupKFold</span><span class=\"p\">(</span><span class=\"n\">_BaseKFold</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Stratified K-Folds cross-validator with Grouping</span>\n\n<span class=\"sd\">    Provides train/test indices to split data in train/test sets.</span>\n\n<span class=\"sd\">    This cross-validation object is a variation of GroupKFold that returns</span>\n<span class=\"sd\">    stratified folds. The folds are made by preserving the percentage of</span>\n<span class=\"sd\">    samples for each class.</span>\n\n<span class=\"sd\">    Read more in the :ref:`User Guide &lt;cross_validation&gt;`.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    n_splits : int, default=3</span>\n<span class=\"sd\">        Number of folds. Must be at least 2.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">n_splits</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">shuffle</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">StratifiedGroupKFold</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">n_splits</span><span class=\"p\">,</span> <span class=\"n\">shuffle</span><span class=\"p\">,</span> <span class=\"n\">random_state</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_make_test_folds</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">groups</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            self (?):</span>\n<span class=\"sd\">            X (ndarray):  data</span>\n<span class=\"sd\">            y (ndarray):  labels(default = None)</span>\n<span class=\"sd\">            groups (None): (default = None)</span>\n\n<span class=\"sd\">        Returns:</span>\n<span class=\"sd\">            ?: test_folds</span>\n\n<span class=\"sd\">        CommandLine:</span>\n<span class=\"sd\">            python -m ibeis.algo.verif.sklearn_utils _make_test_folds</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.algo.verif.sklearn_utils import *  # NOQA</span>\n<span class=\"sd\">            &gt;&gt;&gt; import utool as ut</span>\n<span class=\"sd\">            &gt;&gt;&gt; rng = ut.ensure_rng(0)</span>\n<span class=\"sd\">            &gt;&gt;&gt; groups = [1, 1, 3, 4, 2, 2, 7, 8, 8]</span>\n<span class=\"sd\">            &gt;&gt;&gt; y      = [1, 1, 1, 1, 2, 2, 2, 3, 3]</span>\n<span class=\"sd\">            &gt;&gt;&gt; X = np.empty((len(y), 0))</span>\n<span class=\"sd\">            &gt;&gt;&gt; self = StratifiedGroupKFold(random_state=rng)</span>\n<span class=\"sd\">            &gt;&gt;&gt; skf_list = list(self.split(X=X, y=y, groups=groups))</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># if self.shuffle:</span>\n        <span class=\"c1\">#     rng = check_random_state(self.random_state)</span>\n        <span class=\"c1\"># else:</span>\n        <span class=\"c1\">#     rng = self.random_state</span>\n        <span class=\"n\">n_splits</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">n_splits</span>\n        <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">asarray</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span>\n        <span class=\"n\">n_samples</span> <span class=\"o\">=</span> <span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n        <span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n\n        <span class=\"c1\"># y_counts = bincount(y_inversed)</span>\n        <span class=\"c1\"># min_classes_ = np.min(y_counts)</span>\n        <span class=\"c1\"># if np.all(self.n_splits &gt; y_counts):</span>\n        <span class=\"c1\">#     raise ValueError(&quot;All the n_groups for individual classes&quot;</span>\n        <span class=\"c1\">#                      &quot; are less than n_splits=%d.&quot;</span>\n        <span class=\"c1\">#                      % (self.n_splits))</span>\n        <span class=\"c1\"># if self.n_splits &gt; min_classes_:</span>\n        <span class=\"c1\">#     warnings.warn((&quot;The least populated class in y has only %d&quot;</span>\n        <span class=\"c1\">#                    &quot; members, which is too few. The minimum&quot;</span>\n        <span class=\"c1\">#                    &quot; number of groups for any class cannot&quot;</span>\n        <span class=\"c1\">#                    &quot; be less than n_splits=%d.&quot;</span>\n        <span class=\"c1\">#                    % (min_classes_, self.n_splits)), Warning)</span>\n\n        <span class=\"n\">unique_y</span><span class=\"p\">,</span> <span class=\"n\">y_inversed</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">unique</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">return_inverse</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">n_classes</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">unique_y</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n        <span class=\"n\">unique_groups</span><span class=\"p\">,</span> <span class=\"n\">group_idxs</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">group_indices</span><span class=\"p\">(</span><span class=\"n\">groups</span><span class=\"p\">)</span>\n        <span class=\"c1\"># grouped_ids = list(grouping.keys())</span>\n        <span class=\"n\">grouped_y</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">apply_grouping</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">group_idxs</span><span class=\"p\">)</span>\n        <span class=\"n\">grouped_y_counts</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span>\n            <span class=\"n\">bincount</span><span class=\"p\">(</span><span class=\"n\">y_</span><span class=\"p\">,</span> <span class=\"n\">minlength</span><span class=\"o\">=</span><span class=\"n\">n_classes</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">y_</span> <span class=\"ow\">in</span> <span class=\"n\">grouped_y</span><span class=\"p\">])</span>\n\n        <span class=\"n\">target_freq</span> <span class=\"o\">=</span> <span class=\"n\">grouped_y_counts</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"n\">target_ratio</span> <span class=\"o\">=</span> <span class=\"n\">target_freq</span> <span class=\"o\">/</span> <span class=\"n\">target_freq</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Greedilly choose the split assignment that minimizes the local</span>\n        <span class=\"c1\"># * squared differences in target from actual frequencies</span>\n        <span class=\"c1\"># * and best equalizes the number of items per fold</span>\n        <span class=\"c1\"># Distribute groups with most members first</span>\n        <span class=\"n\">split_freq</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">((</span><span class=\"n\">n_splits</span><span class=\"p\">,</span> <span class=\"n\">n_classes</span><span class=\"p\">))</span>\n        <span class=\"c1\"># split_ratios = split_freq / split_freq.sum(axis=1)</span>\n        <span class=\"n\">split_ratios</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"n\">split_freq</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">split_freq</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"n\">split_diffs</span> <span class=\"o\">=</span> <span class=\"p\">((</span><span class=\"n\">split_freq</span> <span class=\"o\">-</span> <span class=\"n\">target_ratio</span><span class=\"p\">)</span> <span class=\"o\">**</span> <span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">sortx</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">argsort</span><span class=\"p\">(</span><span class=\"n\">grouped_y_counts</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">))[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"n\">grouped_splitx</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">count</span><span class=\"p\">,</span> <span class=\"n\">group_idx</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">sortx</span><span class=\"p\">):</span>\n            <span class=\"c1\"># print(&#39;---------\\n&#39;)</span>\n            <span class=\"n\">group_freq</span> <span class=\"o\">=</span> <span class=\"n\">grouped_y_counts</span><span class=\"p\">[</span><span class=\"n\">group_idx</span><span class=\"p\">]</span>\n            <span class=\"n\">cand_freq</span> <span class=\"o\">=</span> <span class=\"n\">split_freq</span> <span class=\"o\">+</span> <span class=\"n\">group_freq</span>\n            <span class=\"n\">cand_ratio</span> <span class=\"o\">=</span> <span class=\"n\">cand_freq</span> <span class=\"o\">/</span> <span class=\"n\">cand_freq</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)[:,</span> <span class=\"kc\">None</span><span class=\"p\">]</span>\n            <span class=\"n\">cand_diffs</span> <span class=\"o\">=</span> <span class=\"p\">((</span><span class=\"n\">cand_ratio</span> <span class=\"o\">-</span> <span class=\"n\">target_ratio</span><span class=\"p\">)</span> <span class=\"o\">**</span> <span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"c1\"># Compute loss</span>\n            <span class=\"n\">losses</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"c1\"># others = np.nan_to_num(split_diffs)</span>\n            <span class=\"n\">other_diffs</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span>\n                <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">split_diffs</span><span class=\"p\">[</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">:])</span> <span class=\"o\">+</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">split_diffs</span><span class=\"p\">[:</span><span class=\"n\">x</span><span class=\"p\">])</span>\n                <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n_splits</span><span class=\"p\">)</span>\n            <span class=\"p\">])</span>\n            <span class=\"c1\"># penalize unbalanced splits</span>\n            <span class=\"n\">ratio_loss</span> <span class=\"o\">=</span> <span class=\"n\">other_diffs</span> <span class=\"o\">+</span> <span class=\"n\">cand_diffs</span>\n            <span class=\"c1\"># penalize heavy splits</span>\n            <span class=\"n\">freq_loss</span> <span class=\"o\">=</span> <span class=\"n\">split_freq</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"n\">freq_loss</span> <span class=\"o\">=</span> <span class=\"n\">freq_loss</span> <span class=\"o\">/</span> <span class=\"n\">freq_loss</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span>\n            <span class=\"n\">losses</span> <span class=\"o\">=</span> <span class=\"n\">ratio_loss</span> <span class=\"o\">+</span> <span class=\"n\">freq_loss</span>\n            <span class=\"c1\"># print(&#39;group_freq = %r&#39; % (group_freq,))</span>\n            <span class=\"c1\"># print(&#39;freq_loss = %s&#39; % (ut.repr2(freq_loss, precision=2),))</span>\n            <span class=\"c1\"># print(&#39;ratio_loss = %s&#39; % (ut.repr2(ratio_loss, precision=2),))</span>\n            <span class=\"c1\">#-------</span>\n            <span class=\"n\">splitx</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">argmin</span><span class=\"p\">(</span><span class=\"n\">losses</span><span class=\"p\">)</span>\n            <span class=\"c1\"># print(&#39;losses = %r, splitx=%r&#39; % (losses, splitx))</span>\n            <span class=\"n\">split_freq</span><span class=\"p\">[</span><span class=\"n\">splitx</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">cand_freq</span><span class=\"p\">[</span><span class=\"n\">splitx</span><span class=\"p\">]</span>\n            <span class=\"n\">split_ratios</span><span class=\"p\">[</span><span class=\"n\">splitx</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">cand_ratio</span><span class=\"p\">[</span><span class=\"n\">splitx</span><span class=\"p\">]</span>\n            <span class=\"n\">split_diffs</span><span class=\"p\">[</span><span class=\"n\">splitx</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">cand_diffs</span><span class=\"p\">[</span><span class=\"n\">splitx</span><span class=\"p\">]</span>\n            <span class=\"n\">grouped_splitx</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">splitx</span><span class=\"p\">)</span>\n\n            <span class=\"c1\"># if count &gt; 4:</span>\n            <span class=\"c1\">#     break</span>\n            <span class=\"c1\"># else:</span>\n            <span class=\"c1\">#     print(&#39;split_freq = \\n&#39; +</span>\n            <span class=\"c1\">#           ut.repr2(split_freq, precision=2, suppress_small=True))</span>\n            <span class=\"c1\">#     print(&#39;target_ratio = \\n&#39; +</span>\n            <span class=\"c1\">#           ut.repr2(target_ratio, precision=2, suppress_small=True))</span>\n            <span class=\"c1\">#     print(&#39;split_ratios = \\n&#39; +</span>\n            <span class=\"c1\">#           ut.repr2(split_ratios, precision=2, suppress_small=True))</span>\n            <span class=\"c1\">#     print(ut.dict_hist(grouped_splitx))</span>\n\n        <span class=\"c1\"># final_ratio_loss = ((split_ratios - target_ratio) ** 2).sum(axis=1)</span>\n        <span class=\"c1\"># print(&#39;split_freq = \\n&#39; +</span>\n        <span class=\"c1\">#       ut.repr2(split_freq, precision=3, suppress_small=True))</span>\n        <span class=\"c1\"># print(&#39;target_ratio = \\n&#39; +</span>\n        <span class=\"c1\">#       ut.repr2(target_ratio, precision=3, suppress_small=True))</span>\n        <span class=\"c1\"># print(&#39;split_ratios = \\n&#39; +</span>\n        <span class=\"c1\">#       ut.repr2(split_ratios, precision=3, suppress_small=True))</span>\n        <span class=\"c1\"># print(ut.dict_hist(grouped_splitx))</span>\n\n        <span class=\"n\">test_folds</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"p\">(</span><span class=\"n\">n_samples</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">int</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">group_idx</span><span class=\"p\">,</span> <span class=\"n\">splitx</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">sortx</span><span class=\"p\">,</span> <span class=\"n\">grouped_splitx</span><span class=\"p\">):</span>\n            <span class=\"n\">idxs</span> <span class=\"o\">=</span> <span class=\"n\">group_idxs</span><span class=\"p\">[</span><span class=\"n\">group_idx</span><span class=\"p\">]</span>\n            <span class=\"n\">test_folds</span><span class=\"p\">[</span><span class=\"n\">idxs</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">splitx</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">test_folds</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_iter_test_masks</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">groups</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"n\">test_folds</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_make_test_folds</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">groups</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">n_splits</span><span class=\"p\">):</span>\n            <span class=\"k\">yield</span> <span class=\"n\">test_folds</span> <span class=\"o\">==</span> <span class=\"n\">i</span>\n\n<div class=\"viewcode-block\" id=\"StratifiedGroupKFold.split\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.verif/#ibeis.algo.verif.sklearn_utils.StratifiedGroupKFold.split\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">groups</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Generate indices to split data into training and test set.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">check_array</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">ensure_2d</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">StratifiedGroupKFold</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">groups</span><span class=\"p\">)</span></div></div>\n\n\n<div class=\"viewcode-block\" id=\"temp\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.verif/#ibeis.algo.verif.sklearn_utils.temp\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">temp</span><span class=\"p\">(</span><span class=\"n\">samples</span><span class=\"p\">):</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">sklearn</span> <span class=\"k\">import</span> <span class=\"n\">model_selection</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.verif</span> <span class=\"k\">import</span> <span class=\"n\">sklearn_utils</span>\n    <span class=\"k\">def</span> <span class=\"nf\">check_balance</span><span class=\"p\">(</span><span class=\"n\">idxs</span><span class=\"p\">):</span>\n        <span class=\"c1\"># from sklearn.utils.fixes import bincount</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;-------&#39;</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">count</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">,</span> <span class=\"n\">train</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">idxs</span><span class=\"p\">):</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;split </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">count</span><span class=\"p\">))</span>\n            <span class=\"n\">groups_train</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">groups</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">train</span><span class=\"p\">))</span>\n            <span class=\"n\">groups_test</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">groups</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">))</span>\n            <span class=\"n\">n_group_isect</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">groups_train</span><span class=\"o\">.</span><span class=\"n\">intersection</span><span class=\"p\">(</span><span class=\"n\">groups_test</span><span class=\"p\">))</span>\n            <span class=\"n\">y_train_freq</span> <span class=\"o\">=</span> <span class=\"n\">bincount</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">train</span><span class=\"p\">))</span>\n            <span class=\"n\">y_test_freq</span> <span class=\"o\">=</span> <span class=\"n\">bincount</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">))</span>\n            <span class=\"n\">y_test_ratio</span> <span class=\"o\">=</span> <span class=\"n\">y_test_freq</span> <span class=\"o\">/</span> <span class=\"n\">y_test_freq</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span>\n            <span class=\"n\">y_train_ratio</span> <span class=\"o\">=</span> <span class=\"n\">y_train_freq</span> <span class=\"o\">/</span> <span class=\"n\">y_train_freq</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span>\n            <span class=\"n\">balance_error</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">((</span><span class=\"n\">y_test_ratio</span> <span class=\"o\">-</span> <span class=\"n\">y_train_ratio</span><span class=\"p\">)</span> <span class=\"o\">**</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;n_group_isect = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">n_group_isect</span><span class=\"p\">,))</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;y_test_ratio = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">y_test_ratio</span><span class=\"p\">,))</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;y_train_ratio = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">y_train_ratio</span><span class=\"p\">,))</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;balance_error = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">balance_error</span><span class=\"p\">,))</span>\n\n    <span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"p\">((</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">samples</span><span class=\"p\">),</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n    <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">samples</span><span class=\"o\">.</span><span class=\"n\">encoded_1d</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">values</span>\n    <span class=\"n\">groups</span> <span class=\"o\">=</span> <span class=\"n\">samples</span><span class=\"o\">.</span><span class=\"n\">group_ids</span>\n\n    <span class=\"n\">n_splits</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n\n    <span class=\"n\">splitter</span> <span class=\"o\">=</span> <span class=\"n\">model_selection</span><span class=\"o\">.</span><span class=\"n\">GroupShuffleSplit</span><span class=\"p\">(</span><span class=\"n\">n_splits</span><span class=\"o\">=</span><span class=\"n\">n_splits</span><span class=\"p\">)</span>\n    <span class=\"n\">idxs</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">splitter</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"o\">=</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">groups</span><span class=\"o\">=</span><span class=\"n\">groups</span><span class=\"p\">))</span>\n    <span class=\"n\">check_balance</span><span class=\"p\">(</span><span class=\"n\">idxs</span><span class=\"p\">)</span>\n\n    <span class=\"n\">splitter</span> <span class=\"o\">=</span> <span class=\"n\">model_selection</span><span class=\"o\">.</span><span class=\"n\">GroupKFold</span><span class=\"p\">(</span><span class=\"n\">n_splits</span><span class=\"o\">=</span><span class=\"n\">n_splits</span><span class=\"p\">)</span>\n    <span class=\"n\">idxs</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">splitter</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"o\">=</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">groups</span><span class=\"o\">=</span><span class=\"n\">groups</span><span class=\"p\">))</span>\n    <span class=\"n\">check_balance</span><span class=\"p\">(</span><span class=\"n\">idxs</span><span class=\"p\">)</span>\n\n    <span class=\"n\">splitter</span> <span class=\"o\">=</span> <span class=\"n\">model_selection</span><span class=\"o\">.</span><span class=\"n\">StratifiedKFold</span><span class=\"p\">(</span><span class=\"n\">n_splits</span><span class=\"o\">=</span><span class=\"n\">n_splits</span><span class=\"p\">)</span>\n    <span class=\"n\">idxs</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">splitter</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"o\">=</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">groups</span><span class=\"o\">=</span><span class=\"n\">groups</span><span class=\"p\">))</span>\n    <span class=\"n\">check_balance</span><span class=\"p\">(</span><span class=\"n\">idxs</span><span class=\"p\">)</span>\n\n    <span class=\"n\">splitter</span> <span class=\"o\">=</span> <span class=\"n\">sklearn_utils</span><span class=\"o\">.</span><span class=\"n\">StratifiedGroupKFold</span><span class=\"p\">(</span><span class=\"n\">n_splits</span><span class=\"o\">=</span><span class=\"n\">n_splits</span><span class=\"p\">)</span>\n    <span class=\"n\">idxs</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">splitter</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"o\">=</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">groups</span><span class=\"o\">=</span><span class=\"n\">groups</span><span class=\"p\">))</span>\n    <span class=\"n\">check_balance</span><span class=\"p\">(</span><span class=\"n\">idxs</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"testdata_ytrue\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.verif/#ibeis.algo.verif.sklearn_utils.testdata_ytrue\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">testdata_ytrue</span><span class=\"p\">(</span><span class=\"n\">p_classes</span><span class=\"p\">,</span> <span class=\"n\">p_wrong</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"n\">rng</span><span class=\"p\">):</span>\n    <span class=\"n\">classes_</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">p_classes</span><span class=\"p\">)))</span>\n    <span class=\"c1\"># Generate samples at specified fractions</span>\n    <span class=\"n\">y_true</span> <span class=\"o\">=</span> <span class=\"n\">rng</span><span class=\"o\">.</span><span class=\"n\">choice</span><span class=\"p\">(</span><span class=\"n\">classes_</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"o\">=</span><span class=\"n\">p_classes</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">y_true</span></div>\n\n\n<div class=\"viewcode-block\" id=\"testdata_ypred\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.verif/#ibeis.algo.verif.sklearn_utils.testdata_ypred\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">testdata_ypred</span><span class=\"p\">(</span><span class=\"n\">y_true</span><span class=\"p\">,</span> <span class=\"n\">p_wrong</span><span class=\"p\">,</span> <span class=\"n\">rng</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Make mistakes at specified rate</span>\n    <span class=\"n\">classes_</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">p_wrong</span><span class=\"p\">)))</span>\n    <span class=\"n\">y_pred</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span>\n        <span class=\"p\">[</span><span class=\"n\">y</span> <span class=\"k\">if</span> <span class=\"n\">rng</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">()</span> <span class=\"o\">&gt;</span> <span class=\"n\">p_wrong</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">]</span> <span class=\"k\">else</span> <span class=\"n\">rng</span><span class=\"o\">.</span><span class=\"n\">choice</span><span class=\"p\">(</span><span class=\"n\">classes_</span><span class=\"p\">)</span>\n         <span class=\"k\">for</span> <span class=\"n\">y</span> <span class=\"ow\">in</span> <span class=\"n\">y_true</span><span class=\"p\">])</span>\n    <span class=\"k\">return</span> <span class=\"n\">y_pred</span></div>\n\n\n<div class=\"viewcode-block\" id=\"classification_report2\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.verif/#ibeis.algo.verif.sklearn_utils.classification_report2\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">classification_report2</span><span class=\"p\">(</span><span class=\"n\">y_true</span><span class=\"p\">,</span> <span class=\"n\">y_pred</span><span class=\"p\">,</span> <span class=\"n\">target_names</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                           <span class=\"n\">sample_weight</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    References:</span>\n<span class=\"sd\">        https://csem.flinders.edu.au/research/techreps/SIE07001.pdf</span>\n<span class=\"sd\">        https://www.mathworks.com/matlabcentral/fileexchange/5648-bm-cm-?requestedDomain=www.mathworks.com</span>\n<span class=\"sd\">        Jurman, Riccadonna, Furlanello, (2012). A Comparison of MCC and CEN</span>\n<span class=\"sd\">            Error Measures in MultiClass Prediction</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.algo.verif.sklearn_utils import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; y_true = [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3]</span>\n<span class=\"sd\">        &gt;&gt;&gt; y_pred = [1, 2, 1, 3, 1, 2, 2, 3, 2, 2, 3, 3, 2, 3, 3, 3, 1, 3]</span>\n<span class=\"sd\">        &gt;&gt;&gt; target_names = None</span>\n<span class=\"sd\">        &gt;&gt;&gt; sample_weight = None</span>\n<span class=\"sd\">        &gt;&gt;&gt; verbose = True</span>\n<span class=\"sd\">        &gt;&gt;&gt; report = classification_report2(y_true, y_pred, verbose=verbose)</span>\n\n<span class=\"sd\">    Ignore:</span>\n<span class=\"sd\">        &gt;&gt;&gt; size = 100</span>\n<span class=\"sd\">        &gt;&gt;&gt; rng = np.random.RandomState(0)</span>\n<span class=\"sd\">        &gt;&gt;&gt; p_classes = np.array([.90, .05, .05][0:2])</span>\n<span class=\"sd\">        &gt;&gt;&gt; p_classes = p_classes / p_classes.sum()</span>\n<span class=\"sd\">        &gt;&gt;&gt; p_wrong   = np.array([.03, .01, .02][0:2])</span>\n<span class=\"sd\">        &gt;&gt;&gt; y_true = testdata_ytrue(p_classes, p_wrong, size, rng)</span>\n<span class=\"sd\">        &gt;&gt;&gt; rs = []</span>\n<span class=\"sd\">        &gt;&gt;&gt; for x in range(17):</span>\n<span class=\"sd\">        &gt;&gt;&gt;     p_wrong += .05</span>\n<span class=\"sd\">        &gt;&gt;&gt;     y_pred = testdata_ypred(y_true, p_wrong, rng)</span>\n<span class=\"sd\">        &gt;&gt;&gt;     report = classification_report2(y_true, y_pred, verbose=&#39;hack&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt;     rs.append(report)</span>\n<span class=\"sd\">        &gt;&gt;&gt; import plottool as pt</span>\n<span class=\"sd\">        &gt;&gt;&gt; pt.qtensure()</span>\n<span class=\"sd\">        &gt;&gt;&gt; df = pd.DataFrame(rs).drop([&#39;raw&#39;], axis=1)</span>\n<span class=\"sd\">        &gt;&gt;&gt; delta = df.subtract(df[&#39;target&#39;], axis=0)</span>\n<span class=\"sd\">        &gt;&gt;&gt; sqrd_error = np.sqrt((delta ** 2).sum(axis=0))</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&#39;Error&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(sqrd_error.sort_values())</span>\n<span class=\"sd\">        &gt;&gt;&gt; ys = df.to_dict(orient=&#39;list&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; pt.multi_plot(ydata_list=ys)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">sklearn.metrics</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">sklearn.preprocessing</span> <span class=\"k\">import</span> <span class=\"n\">LabelEncoder</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">target_names</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">unique_labels</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">unique</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">hstack</span><span class=\"p\">([</span><span class=\"n\">y_true</span><span class=\"p\">,</span> <span class=\"n\">y_pred</span><span class=\"p\">]))</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">unique_labels</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"ow\">and</span> <span class=\"p\">(</span><span class=\"n\">unique_labels</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"ow\">or</span> <span class=\"n\">unique_labels</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n            <span class=\"n\">target_names</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">])</span>\n            <span class=\"n\">y_true_</span> <span class=\"o\">=</span> <span class=\"n\">y_true</span>\n            <span class=\"n\">y_pred_</span> <span class=\"o\">=</span> <span class=\"n\">y_pred</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">lb</span> <span class=\"o\">=</span> <span class=\"n\">LabelEncoder</span><span class=\"p\">()</span>\n            <span class=\"n\">lb</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">unique_labels</span><span class=\"p\">)</span>\n            <span class=\"n\">y_true_</span> <span class=\"o\">=</span> <span class=\"n\">lb</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">y_true</span><span class=\"p\">)</span>\n            <span class=\"n\">y_pred_</span> <span class=\"o\">=</span> <span class=\"n\">lb</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">y_pred</span><span class=\"p\">)</span>\n            <span class=\"n\">target_names</span> <span class=\"o\">=</span> <span class=\"n\">lb</span><span class=\"o\">.</span><span class=\"n\">classes_</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">y_true_</span> <span class=\"o\">=</span> <span class=\"n\">y_true</span>\n        <span class=\"n\">y_pred_</span> <span class=\"o\">=</span> <span class=\"n\">y_pred</span>\n\n    <span class=\"c1\"># Real data is on the rows,</span>\n    <span class=\"c1\"># Pred data is on the cols.</span>\n\n    <span class=\"n\">cm</span> <span class=\"o\">=</span> <span class=\"n\">sklearn</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">confusion_matrix</span><span class=\"p\">(</span>\n        <span class=\"n\">y_true_</span><span class=\"p\">,</span> <span class=\"n\">y_pred_</span><span class=\"p\">,</span> <span class=\"n\">sample_weight</span><span class=\"o\">=</span><span class=\"n\">sample_weight</span><span class=\"p\">)</span>\n    <span class=\"n\">confusion</span> <span class=\"o\">=</span> <span class=\"n\">cm</span>  <span class=\"c1\"># NOQA</span>\n\n    <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cm</span><span class=\"p\">)</span>  <span class=\"c1\"># number of classes</span>\n    <span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span>  <span class=\"c1\"># number of examples</span>\n\n    <span class=\"n\">real_total</span> <span class=\"o\">=</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">pred_total</span> <span class=\"o\">=</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># the number of &quot;positive&quot; cases **per class**</span>\n    <span class=\"n\">n_pos</span> <span class=\"o\">=</span> <span class=\"n\">real_total</span>  <span class=\"c1\"># NOQA</span>\n    <span class=\"c1\"># the number of times a class was predicted.</span>\n    <span class=\"n\">n_neg</span> <span class=\"o\">=</span> <span class=\"n\">N</span> <span class=\"o\">-</span> <span class=\"n\">n_pos</span>  <span class=\"c1\"># NOQA</span>\n\n    <span class=\"c1\"># number of true positives per class</span>\n    <span class=\"n\">n_tps</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">diag</span><span class=\"p\">(</span><span class=\"n\">cm</span><span class=\"p\">)</span>\n    <span class=\"c1\"># number of true negatives per class</span>\n    <span class=\"n\">n_fps</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">cm</span> <span class=\"o\">-</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">diagflat</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">diag</span><span class=\"p\">(</span><span class=\"n\">cm</span><span class=\"p\">)))</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n    <span class=\"n\">tprs</span> <span class=\"o\">=</span> <span class=\"n\">n_tps</span> <span class=\"o\">/</span> <span class=\"n\">real_total</span>  <span class=\"c1\"># true pos rate (recall)</span>\n    <span class=\"n\">tpas</span> <span class=\"o\">=</span> <span class=\"n\">n_tps</span> <span class=\"o\">/</span> <span class=\"n\">pred_total</span>  <span class=\"c1\"># true pos accuracy (precision)</span>\n\n    <span class=\"n\">unused</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">real_total</span> <span class=\"o\">+</span> <span class=\"n\">pred_total</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n\n    <span class=\"n\">fprs</span> <span class=\"o\">=</span> <span class=\"n\">n_fps</span> <span class=\"o\">/</span> <span class=\"n\">n_neg</span>  <span class=\"c1\"># false pose rate</span>\n    <span class=\"n\">fprs</span><span class=\"p\">[</span><span class=\"n\">unused</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span>\n    <span class=\"c1\"># tnrs = 1 - fprs</span>\n\n    <span class=\"n\">rprob</span> <span class=\"o\">=</span> <span class=\"n\">real_total</span> <span class=\"o\">/</span> <span class=\"n\">N</span>\n    <span class=\"n\">pprob</span> <span class=\"o\">=</span> <span class=\"n\">pred_total</span> <span class=\"o\">/</span> <span class=\"n\">N</span>\n\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cm</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n        <span class=\"p\">[[</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">],</span>\n         <span class=\"p\">[</span><span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"n\">D</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"n\">cm</span>\n        <span class=\"p\">(</span><span class=\"n\">A</span> <span class=\"o\">*</span> <span class=\"n\">D</span> <span class=\"o\">-</span> <span class=\"n\">B</span> <span class=\"o\">*</span> <span class=\"n\">C</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">((</span><span class=\"n\">A</span> <span class=\"o\">+</span> <span class=\"n\">C</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">B</span> <span class=\"o\">+</span> <span class=\"n\">D</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">A</span> <span class=\"o\">+</span> <span class=\"n\">B</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">C</span> <span class=\"o\">+</span> <span class=\"n\">D</span><span class=\"p\">))</span>\n\n        <span class=\"c1\"># c2 = vt.ConfusionMetrics().fit(scores, y)</span>\n\n    <span class=\"c1\"># bookmaker is analogous to recall, but unbiased by class frequency</span>\n    <span class=\"n\">rprob_mat</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">tile</span><span class=\"p\">(</span><span class=\"n\">rprob</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">T</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">eye</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">))</span>\n    <span class=\"n\">bmcm</span> <span class=\"o\">=</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">T</span> <span class=\"o\">/</span> <span class=\"n\">rprob_mat</span>\n    <span class=\"n\">bms</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">bmcm</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">N</span>\n\n    <span class=\"c1\"># markedness is analogous to precision, but unbiased by class frequency</span>\n    <span class=\"n\">pprob_mat</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">tile</span><span class=\"p\">(</span><span class=\"n\">pprob</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">T</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">eye</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">))</span>\n    <span class=\"n\">mkcm</span> <span class=\"o\">=</span> <span class=\"n\">cm</span> <span class=\"o\">/</span> <span class=\"n\">pprob_mat</span>\n    <span class=\"n\">mks</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">mkcm</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">N</span>\n\n    <span class=\"n\">mccs</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sign</span><span class=\"p\">(</span><span class=\"n\">bms</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">abs</span><span class=\"p\">(</span><span class=\"n\">bms</span> <span class=\"o\">*</span> <span class=\"n\">mks</span><span class=\"p\">))</span>\n\n    <span class=\"n\">perclass_data</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">odict</span><span class=\"p\">([</span>\n        <span class=\"p\">(</span><span class=\"s1\">&#39;precision&#39;</span><span class=\"p\">,</span> <span class=\"n\">tpas</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s1\">&#39;recall&#39;</span><span class=\"p\">,</span> <span class=\"n\">tprs</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s1\">&#39;fpr&#39;</span><span class=\"p\">,</span> <span class=\"n\">fprs</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s1\">&#39;markedness&#39;</span><span class=\"p\">,</span> <span class=\"n\">mks</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s1\">&#39;bookmaker&#39;</span><span class=\"p\">,</span> <span class=\"n\">bms</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s1\">&#39;mcc&#39;</span><span class=\"p\">,</span> <span class=\"n\">mccs</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s1\">&#39;support&#39;</span><span class=\"p\">,</span> <span class=\"n\">real_total</span><span class=\"p\">),</span>\n    <span class=\"p\">])</span>\n\n    <span class=\"n\">tpa</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nansum</span><span class=\"p\">(</span><span class=\"n\">tpas</span> <span class=\"o\">*</span> <span class=\"n\">rprob</span><span class=\"p\">)</span>\n    <span class=\"n\">tpr</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nansum</span><span class=\"p\">(</span><span class=\"n\">tprs</span> <span class=\"o\">*</span> <span class=\"n\">rprob</span><span class=\"p\">)</span>\n\n    <span class=\"n\">fpr</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nansum</span><span class=\"p\">(</span><span class=\"n\">fprs</span> <span class=\"o\">*</span> <span class=\"n\">rprob</span><span class=\"p\">)</span>\n\n    <span class=\"n\">mk</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nansum</span><span class=\"p\">(</span><span class=\"n\">mks</span> <span class=\"o\">*</span> <span class=\"n\">rprob</span><span class=\"p\">)</span>\n    <span class=\"n\">bm</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nansum</span><span class=\"p\">(</span><span class=\"n\">bms</span> <span class=\"o\">*</span> <span class=\"n\">pprob</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># The simple mean seems to do the best</span>\n    <span class=\"n\">mccs_</span> <span class=\"o\">=</span> <span class=\"n\">mccs</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">isnan</span><span class=\"p\">(</span><span class=\"n\">mccs</span><span class=\"p\">)]</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">mccs_</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"n\">mcc_combo</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">mcc_combo</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nanmean</span><span class=\"p\">(</span><span class=\"n\">mccs_</span><span class=\"p\">)</span>\n\n    <span class=\"n\">combined_data</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">odict</span><span class=\"p\">([</span>\n        <span class=\"p\">(</span><span class=\"s1\">&#39;precision&#39;</span><span class=\"p\">,</span> <span class=\"n\">tpa</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s1\">&#39;recall&#39;</span><span class=\"p\">,</span> <span class=\"n\">tpr</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s1\">&#39;fpr&#39;</span><span class=\"p\">,</span> <span class=\"n\">fpr</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s1\">&#39;markedness&#39;</span><span class=\"p\">,</span> <span class=\"n\">mk</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s1\">&#39;bookmaker&#39;</span><span class=\"p\">,</span> <span class=\"n\">bm</span><span class=\"p\">),</span>\n        <span class=\"c1\"># (&#39;mcc&#39;, np.sign(bm) * np.sqrt(np.abs(bm * mk))),</span>\n        <span class=\"p\">(</span><span class=\"s1\">&#39;mcc&#39;</span><span class=\"p\">,</span> <span class=\"n\">mcc_combo</span><span class=\"p\">),</span>\n        <span class=\"c1\"># np.sign(bm) * np.sqrt(np.abs(bm * mk))),</span>\n        <span class=\"p\">(</span><span class=\"s1\">&#39;support&#39;</span><span class=\"p\">,</span> <span class=\"n\">real_total</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">())</span>\n    <span class=\"p\">])</span>\n\n    <span class=\"c1\"># Not sure how to compute this. Should it agree with the sklearn impl?</span>\n    <span class=\"k\">if</span> <span class=\"n\">verbose</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;hack&#39;</span><span class=\"p\">:</span>\n        <span class=\"n\">verbose</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"n\">mcc_known</span> <span class=\"o\">=</span> <span class=\"n\">sklearn</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">matthews_corrcoef</span><span class=\"p\">(</span>\n            <span class=\"n\">y_true</span><span class=\"p\">,</span> <span class=\"n\">y_pred</span><span class=\"p\">,</span> <span class=\"n\">sample_weight</span><span class=\"o\">=</span><span class=\"n\">sample_weight</span><span class=\"p\">)</span>\n        <span class=\"n\">mcc_raw</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sign</span><span class=\"p\">(</span><span class=\"n\">bm</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">abs</span><span class=\"p\">(</span><span class=\"n\">bm</span> <span class=\"o\">*</span> <span class=\"n\">mk</span><span class=\"p\">))</span>\n\n        <span class=\"kn\">import</span> <span class=\"nn\">scipy</span> <span class=\"k\">as</span> <span class=\"nn\">sp</span>\n        <span class=\"k\">def</span> <span class=\"nf\">gmean</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">w</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">sp</span><span class=\"o\">.</span><span class=\"n\">stats</span><span class=\"o\">.</span><span class=\"n\">gmean</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nansum</span><span class=\"p\">(</span><span class=\"n\">w</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span> <span class=\"o\">/</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nansum</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"p\">))</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">hmean</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">w</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">sp</span><span class=\"o\">.</span><span class=\"n\">stats</span><span class=\"o\">.</span><span class=\"n\">hmean</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"mi\">1</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nansum</span><span class=\"p\">(</span><span class=\"n\">w</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">/</span> <span class=\"n\">x</span><span class=\"p\">))</span> <span class=\"o\">/</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nansum</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"p\">))</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">amean</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">w</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nansum</span><span class=\"p\">(</span><span class=\"n\">w</span> <span class=\"o\">*</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nansum</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"p\">)</span>\n\n        <span class=\"n\">report</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;target&#39;</span><span class=\"p\">:</span> <span class=\"n\">mcc_known</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;raw&#39;</span><span class=\"p\">:</span> <span class=\"n\">mcc_raw</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"c1\"># print(&#39;%r &lt;&lt;&lt;&#39; % (mcc_known,))</span>\n        <span class=\"n\">means</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;a&#39;</span><span class=\"p\">:</span> <span class=\"n\">amean</span><span class=\"p\">,</span>\n            <span class=\"c1\"># &#39;h&#39;: hmean,</span>\n            <span class=\"s1\">&#39;g&#39;</span><span class=\"p\">:</span> <span class=\"n\">gmean</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">weights</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;p&#39;</span><span class=\"p\">:</span> <span class=\"n\">pprob</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;r&#39;</span><span class=\"p\">:</span> <span class=\"n\">rprob</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;&#39;</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">for</span> <span class=\"n\">mean_key</span><span class=\"p\">,</span> <span class=\"n\">mean</span> <span class=\"ow\">in</span> <span class=\"n\">means</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"k\">for</span> <span class=\"n\">w_key</span><span class=\"p\">,</span> <span class=\"n\">w</span> <span class=\"ow\">in</span> <span class=\"n\">weights</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n                <span class=\"c1\"># Hack of very wrong items</span>\n                <span class=\"k\">if</span> <span class=\"n\">mean_key</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;g&#39;</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"n\">w_key</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s1\">&#39;r&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;p&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">]:</span>\n                        <span class=\"k\">continue</span>\n                <span class=\"k\">if</span> <span class=\"n\">mean_key</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;g&#39;</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"n\">w_key</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s1\">&#39;r&#39;</span><span class=\"p\">]:</span>\n                        <span class=\"k\">continue</span>\n                <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">mccs</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">)</span>\n                <span class=\"n\">r_key</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"si\">{}</span><span class=\"s1\"> </span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">mean_key</span><span class=\"p\">,</span> <span class=\"n\">w_key</span><span class=\"p\">)</span>\n                <span class=\"n\">report</span><span class=\"p\">[</span><span class=\"n\">r_key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">m</span>\n                <span class=\"c1\"># print(r_key)</span>\n                <span class=\"c1\"># print(np.abs(m - mcc_known))</span>\n\n        <span class=\"c1\"># print(ut.repr4(report, precision=8))</span>\n        <span class=\"k\">return</span> <span class=\"n\">report</span>\n        <span class=\"c1\"># print(&#39;mcc_known = %r&#39; % (mcc_known,))</span>\n        <span class=\"c1\"># print(&#39;mcc_combo1 = %r&#39; % (mcc_combo1,))</span>\n        <span class=\"c1\"># print(&#39;mcc_combo2 = %r&#39; % (mcc_combo2,))</span>\n        <span class=\"c1\"># print(&#39;mcc_combo3 = %r&#39; % (mcc_combo3,))</span>\n\n    <span class=\"c1\"># if target_names is None:</span>\n    <span class=\"c1\">#     target_names = list(range(k))</span>\n    <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Index</span><span class=\"p\">(</span><span class=\"n\">target_names</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;class&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"n\">perclass_df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">perclass_data</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"n\">index</span><span class=\"p\">)</span>\n    <span class=\"c1\"># combined_df = pd.DataFrame(combined_data, index=[&#39;ave/sum&#39;])</span>\n    <span class=\"n\">combined_df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">combined_data</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;combined&#39;</span><span class=\"p\">])</span>\n\n    <span class=\"n\">metric_df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">concat</span><span class=\"p\">([</span><span class=\"n\">perclass_df</span><span class=\"p\">,</span> <span class=\"n\">combined_df</span><span class=\"p\">])</span>\n    <span class=\"n\">metric_df</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;class&#39;</span>\n    <span class=\"n\">metric_df</span><span class=\"o\">.</span><span class=\"n\">columns</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;metric&#39;</span>\n\n    <span class=\"n\">pred_id</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;</span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">m</span> <span class=\"k\">for</span> <span class=\"n\">m</span> <span class=\"ow\">in</span> <span class=\"n\">target_names</span><span class=\"p\">]</span>\n    <span class=\"n\">real_id</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;</span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">m</span> <span class=\"k\">for</span> <span class=\"n\">m</span> <span class=\"ow\">in</span> <span class=\"n\">target_names</span><span class=\"p\">]</span>\n    <span class=\"n\">confusion_df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">confusion</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"n\">pred_id</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"n\">real_id</span><span class=\"p\">)</span>\n\n    <span class=\"n\">confusion_df</span> <span class=\"o\">=</span> <span class=\"n\">confusion_df</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span>\n        <span class=\"p\">[</span><span class=\"n\">confusion</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)],</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"n\">pred_id</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;\u03a3p&#39;</span><span class=\"p\">]))</span>\n    <span class=\"n\">confusion_df</span><span class=\"p\">[</span><span class=\"s1\">&#39;\u03a3r&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">hstack</span><span class=\"p\">([</span><span class=\"n\">confusion</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]])</span>\n    <span class=\"n\">confusion_df</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;real&#39;</span>\n    <span class=\"n\">confusion_df</span><span class=\"o\">.</span><span class=\"n\">columns</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;pred&#39;</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">(</span><span class=\"n\">confusion_df</span> <span class=\"o\">-</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">floor</span><span class=\"p\">(</span><span class=\"n\">confusion_df</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"o\">.</span><span class=\"mi\">000001</span><span class=\"p\">):</span>\n        <span class=\"n\">confusion_df</span> <span class=\"o\">=</span> <span class=\"n\">confusion_df</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">int</span><span class=\"p\">)</span>\n    <span class=\"n\">confusion_df</span><span class=\"o\">.</span><span class=\"n\">iloc</span><span class=\"p\">[(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"n\">N</span>\n    <span class=\"k\">if</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">(</span><span class=\"n\">confusion_df</span> <span class=\"o\">-</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">floor</span><span class=\"p\">(</span><span class=\"n\">confusion_df</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"o\">.</span><span class=\"mi\">000001</span><span class=\"p\">):</span>\n        <span class=\"n\">confusion_df</span> <span class=\"o\">=</span> <span class=\"n\">confusion_df</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">int</span><span class=\"p\">)</span>\n    <span class=\"c1\"># np.nan</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">verbose</span><span class=\"p\">:</span>\n        <span class=\"n\">cfsm_str</span> <span class=\"o\">=</span> <span class=\"n\">confusion_df</span><span class=\"o\">.</span><span class=\"n\">to_string</span><span class=\"p\">(</span><span class=\"n\">float_format</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"s1\">&#39;</span><span class=\"si\">%.1f</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,))</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Confusion Matrix (real \u00d7 pred) :&#39;</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">hz_str</span><span class=\"p\">(</span><span class=\"s1\">&#39;    &#39;</span><span class=\"p\">,</span> <span class=\"n\">cfsm_str</span><span class=\"p\">))</span>\n\n        <span class=\"c1\"># ut.cprint(&#39;\\nExtended Report&#39;, &#39;turquoise&#39;)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">Evaluation Metric Report:&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">float_precision</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n        <span class=\"n\">float_format</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;%.&#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">float_precision</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;f&#39;</span>\n        <span class=\"n\">ext_report</span> <span class=\"o\">=</span> <span class=\"n\">metric_df</span><span class=\"o\">.</span><span class=\"n\">to_string</span><span class=\"p\">(</span><span class=\"n\">float_format</span><span class=\"o\">=</span><span class=\"n\">float_format</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">hz_str</span><span class=\"p\">(</span><span class=\"s1\">&#39;    &#39;</span><span class=\"p\">,</span> <span class=\"n\">ext_report</span><span class=\"p\">))</span>\n\n    <span class=\"n\">report</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">&#39;metrics&#39;</span><span class=\"p\">:</span> <span class=\"n\">metric_df</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;confusion&#39;</span><span class=\"p\">:</span> <span class=\"n\">confusion_df</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\"># FIXME: What is the difference between sklearn multiclass-MCC</span>\n    <span class=\"c1\"># and BM * MK MCC?</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">matthews_corrcoef</span><span class=\"p\">(</span><span class=\"n\">y_true</span><span class=\"p\">,</span> <span class=\"n\">y_pred</span><span class=\"p\">,</span> <span class=\"n\">sample_weight</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">sklearn.metrics.classification</span> <span class=\"k\">import</span> <span class=\"p\">(</span>\n            <span class=\"n\">_check_targets</span><span class=\"p\">,</span> <span class=\"n\">LabelEncoder</span><span class=\"p\">,</span> <span class=\"n\">confusion_matrix</span><span class=\"p\">)</span>\n        <span class=\"n\">y_type</span><span class=\"p\">,</span> <span class=\"n\">y_true</span><span class=\"p\">,</span> <span class=\"n\">y_pred</span> <span class=\"o\">=</span> <span class=\"n\">_check_targets</span><span class=\"p\">(</span><span class=\"n\">y_true</span><span class=\"p\">,</span> <span class=\"n\">y_pred</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">y_type</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"p\">{</span><span class=\"s2\">&quot;binary&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;multiclass&quot;</span><span class=\"p\">}:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\"> is not supported&quot;</span> <span class=\"o\">%</span> <span class=\"n\">y_type</span><span class=\"p\">)</span>\n        <span class=\"n\">lb</span> <span class=\"o\">=</span> <span class=\"n\">LabelEncoder</span><span class=\"p\">()</span>\n        <span class=\"n\">lb</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">hstack</span><span class=\"p\">([</span><span class=\"n\">y_true</span><span class=\"p\">,</span> <span class=\"n\">y_pred</span><span class=\"p\">]))</span>\n        <span class=\"n\">y_true</span> <span class=\"o\">=</span> <span class=\"n\">lb</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">y_true</span><span class=\"p\">)</span>\n        <span class=\"n\">y_pred</span> <span class=\"o\">=</span> <span class=\"n\">lb</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">y_pred</span><span class=\"p\">)</span>\n        <span class=\"n\">C</span> <span class=\"o\">=</span> <span class=\"n\">confusion_matrix</span><span class=\"p\">(</span><span class=\"n\">y_true</span><span class=\"p\">,</span> <span class=\"n\">y_pred</span><span class=\"p\">,</span> <span class=\"n\">sample_weight</span><span class=\"o\">=</span><span class=\"n\">sample_weight</span><span class=\"p\">)</span>\n        <span class=\"n\">t_sum</span> <span class=\"o\">=</span> <span class=\"n\">C</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">p_sum</span> <span class=\"o\">=</span> <span class=\"n\">C</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"n\">n_correct</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">trace</span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">)</span>\n        <span class=\"n\">n_samples</span> <span class=\"o\">=</span> <span class=\"n\">p_sum</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span>\n        <span class=\"n\">cov_ytyp</span> <span class=\"o\">=</span> <span class=\"n\">n_correct</span> <span class=\"o\">*</span> <span class=\"n\">n_samples</span> <span class=\"o\">-</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">t_sum</span><span class=\"p\">,</span> <span class=\"n\">p_sum</span><span class=\"p\">)</span>\n        <span class=\"n\">cov_ypyp</span> <span class=\"o\">=</span> <span class=\"n\">n_samples</span> <span class=\"o\">**</span> <span class=\"mi\">2</span> <span class=\"o\">-</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">p_sum</span><span class=\"p\">,</span> <span class=\"n\">p_sum</span><span class=\"p\">)</span>\n        <span class=\"n\">cov_ytyt</span> <span class=\"o\">=</span> <span class=\"n\">n_samples</span> <span class=\"o\">**</span> <span class=\"mi\">2</span> <span class=\"o\">-</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">t_sum</span><span class=\"p\">,</span> <span class=\"n\">t_sum</span><span class=\"p\">)</span>\n        <span class=\"n\">mcc</span> <span class=\"o\">=</span> <span class=\"n\">cov_ytyp</span> <span class=\"o\">/</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">cov_ytyt</span> <span class=\"o\">*</span> <span class=\"n\">cov_ypyp</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">isnan</span><span class=\"p\">(</span><span class=\"n\">mcc</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"mf\">0.</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">mcc</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"c1\"># mcc = sklearn.metrics.matthews_corrcoef(</span>\n        <span class=\"c1\">#     y_true, y_pred, sample_weight=sample_weight)</span>\n        <span class=\"n\">mcc</span> <span class=\"o\">=</span> <span class=\"n\">matthews_corrcoef</span><span class=\"p\">(</span><span class=\"n\">y_true</span><span class=\"p\">,</span> <span class=\"n\">y_pred</span><span class=\"p\">,</span> <span class=\"n\">sample_weight</span><span class=\"o\">=</span><span class=\"n\">sample_weight</span><span class=\"p\">)</span>\n        <span class=\"c1\"># These scales are chosen somewhat arbitrarily in the context of a</span>\n        <span class=\"c1\"># computer vision application with relatively reasonable quality data</span>\n        <span class=\"c1\"># https://stats.stackexchange.com/questions/118219/how-to-interpret</span>\n        <span class=\"n\">mcc_significance_scales</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">odict</span><span class=\"p\">([</span>\n            <span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;perfect&#39;</span><span class=\"p\">),</span>\n            <span class=\"p\">(</span><span class=\"mf\">0.9</span><span class=\"p\">,</span> <span class=\"s1\">&#39;very strong&#39;</span><span class=\"p\">),</span>\n            <span class=\"p\">(</span><span class=\"mf\">0.7</span><span class=\"p\">,</span> <span class=\"s1\">&#39;strong&#39;</span><span class=\"p\">),</span>\n            <span class=\"p\">(</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"s1\">&#39;significant&#39;</span><span class=\"p\">),</span>\n            <span class=\"p\">(</span><span class=\"mf\">0.3</span><span class=\"p\">,</span> <span class=\"s1\">&#39;moderate&#39;</span><span class=\"p\">),</span>\n            <span class=\"p\">(</span><span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"s1\">&#39;weak&#39;</span><span class=\"p\">),</span>\n            <span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;negligible&#39;</span><span class=\"p\">),</span>\n        <span class=\"p\">])</span>\n        <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">mcc_significance_scales</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"k\">if</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">abs</span><span class=\"p\">(</span><span class=\"n\">mcc</span><span class=\"p\">)</span> <span class=\"o\">&gt;=</span> <span class=\"n\">k</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">verbose</span><span class=\"p\">:</span>\n                    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;classifier correlation is </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,))</span>\n                <span class=\"k\">break</span>\n        <span class=\"k\">if</span> <span class=\"n\">verbose</span><span class=\"p\">:</span>\n            <span class=\"n\">float_precision</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n            <span class=\"nb\">print</span><span class=\"p\">((</span><span class=\"s1\">&#39;MCC</span><span class=\"se\">\\&#39;</span><span class=\"s1\"> = %.&#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">float_precision</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;f&#39;</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">mcc</span><span class=\"p\">,))</span>\n        <span class=\"n\">report</span><span class=\"p\">[</span><span class=\"s1\">&#39;mcc&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">mcc</span>\n    <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n    <span class=\"k\">return</span> <span class=\"n\">report</span></div>\n\n\n<div class=\"viewcode-block\" id=\"predict_from_probs\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.verif/#ibeis.algo.verif.sklearn_utils.predict_from_probs\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">predict_from_probs</span><span class=\"p\">(</span><span class=\"n\">probs</span><span class=\"p\">,</span> <span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;argmax&#39;</span><span class=\"p\">,</span> <span class=\"n\">target_names</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Predictions are returned as indices into columns or target_names</span>\n\n<span class=\"sd\">    Doctest:</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.algo.verif.sklearn_utils import *</span>\n<span class=\"sd\">        &gt;&gt;&gt; rng = np.random.RandomState(0)</span>\n<span class=\"sd\">        &gt;&gt;&gt; probs = pd.DataFrame(rng.rand(10, 3), columns=[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;])</span>\n<span class=\"sd\">        &gt;&gt;&gt; pred1 = predict_from_probs(probs, &#39;argmax&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; pred2 = predict_from_probs(probs, &#39;argmax&#39;, target_names=probs.columns)</span>\n<span class=\"sd\">        &gt;&gt;&gt; threshes = probs.loc[0]</span>\n<span class=\"sd\">        &gt;&gt;&gt; pred3 = predict_from_probs(probs, threshes.values, force=True,</span>\n<span class=\"sd\">        &gt;&gt;&gt;                            target_names=probs.columns)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">six</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"p\">,</span> <span class=\"n\">six</span><span class=\"o\">.</span><span class=\"n\">string_types</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">method</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;argmax&#39;</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">probs</span><span class=\"p\">,</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">):</span>\n            <span class=\"n\">pred_enc</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">(</span><span class=\"n\">probs</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"o\">.</span><span class=\"n\">argmax</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"n\">probs</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">pred_enc</span> <span class=\"o\">=</span> <span class=\"n\">probs</span><span class=\"o\">.</span><span class=\"n\">argmax</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">threshes</span> <span class=\"o\">=</span> <span class=\"n\">method</span>\n        <span class=\"n\">pred_enc</span> <span class=\"o\">=</span> <span class=\"n\">predict_with_thresh</span><span class=\"p\">(</span><span class=\"n\">probs</span><span class=\"p\">,</span> <span class=\"n\">threshes</span><span class=\"p\">,</span> <span class=\"n\">target_names</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">pred_enc</span></div>\n\n\n<div class=\"viewcode-block\" id=\"predict_with_thresh\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.verif/#ibeis.algo.verif.sklearn_utils.predict_with_thresh\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">predict_with_thresh</span><span class=\"p\">(</span><span class=\"n\">probs</span><span class=\"p\">,</span> <span class=\"n\">threshes</span><span class=\"p\">,</span> <span class=\"n\">target_names</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">force</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                        <span class=\"n\">multi</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">return_flags</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n\n<span class=\"sd\">    if force is true, everything will make a prediction, even if nothing passes</span>\n<span class=\"sd\">    the thresholds. In that case it will use argmax.</span>\n\n<span class=\"sd\">    if more than one thing passes the thresold we take the highest one if</span>\n<span class=\"sd\">    multi=True, and return nan otherwise.</span>\n\n<span class=\"sd\">    Doctest:</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.algo.verif.sklearn_utils import *</span>\n<span class=\"sd\">        &gt;&gt;&gt; probs = np.array([</span>\n<span class=\"sd\">        &gt;&gt;&gt;     [0.5, 0.5, 0.0],</span>\n<span class=\"sd\">        &gt;&gt;&gt;     [0.4, 0.5, 0.1],</span>\n<span class=\"sd\">        &gt;&gt;&gt;     [1.0, 0.0, 0.0],</span>\n<span class=\"sd\">        &gt;&gt;&gt;     [0.3, 0.3, 0.4],</span>\n<span class=\"sd\">        &gt;&gt;&gt;     [0.1, 0.3, 0.6],</span>\n<span class=\"sd\">        &gt;&gt;&gt;     [0.1, 0.6, 0.3],</span>\n<span class=\"sd\">        &gt;&gt;&gt;     [0.6, 0.1, 0.3],])</span>\n<span class=\"sd\">        &gt;&gt;&gt; threshes = [.5, .5, .5]</span>\n<span class=\"sd\">        &gt;&gt;&gt; pred_enc = predict_with_thresh(probs, threshes)</span>\n<span class=\"sd\">        &gt;&gt;&gt; a = predict_with_thresh(probs, [.5, .5, .5])</span>\n<span class=\"sd\">        &gt;&gt;&gt; b = predict_with_thresh(probs, [.5, .5, .5], force=True)</span>\n<span class=\"sd\">        &gt;&gt;&gt; assert np.isnan(a).sum() == 3</span>\n<span class=\"sd\">        &gt;&gt;&gt; assert np.isnan(b).sum() == 0</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">df_index</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">probs</span><span class=\"p\">,</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">):</span>\n        <span class=\"n\">df_index</span> <span class=\"o\">=</span> <span class=\"n\">probs</span><span class=\"o\">.</span><span class=\"n\">index</span>\n        <span class=\"k\">if</span> <span class=\"n\">target_names</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">threshes</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n            <span class=\"n\">target_names</span> <span class=\"o\">=</span> <span class=\"n\">probs</span><span class=\"o\">.</span><span class=\"n\">columns</span><span class=\"o\">.</span><span class=\"n\">tolist</span><span class=\"p\">()</span>\n        <span class=\"n\">probs</span> <span class=\"o\">=</span> <span class=\"n\">probs</span><span class=\"o\">.</span><span class=\"n\">values</span>\n\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">threshes</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">target_names</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s1\">&#39;need target names to use a dict of threshes&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">threshes</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">threshes</span><span class=\"p\">,</span> <span class=\"n\">target_names</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># if force:</span>\n    <span class=\"c1\">#     bin_flags = (probs &gt;= threshes)</span>\n    <span class=\"n\">bin_flags</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">probs</span> <span class=\"o\">&gt;</span> <span class=\"n\">threshes</span><span class=\"p\">)</span>\n    <span class=\"n\">num_states</span> <span class=\"o\">=</span> <span class=\"n\">bin_flags</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n    <span class=\"n\">no_predict</span>    <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">num_states</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">multi_predict</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">num_states</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n    <span class=\"n\">pred_enc</span> <span class=\"o\">=</span> <span class=\"n\">bin_flags</span><span class=\"o\">.</span><span class=\"n\">argmax</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">any</span><span class=\"p\">(</span><span class=\"n\">no_predict</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">force</span> <span class=\"ow\">or</span> <span class=\"n\">return_flags</span><span class=\"p\">:</span>\n            <span class=\"n\">pred_enc</span><span class=\"p\">[</span><span class=\"n\">no_predict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">probs</span><span class=\"p\">[</span><span class=\"n\">no_predict</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">argmax</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">pred_enc</span> <span class=\"o\">=</span> <span class=\"n\">pred_enc</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float</span><span class=\"p\">)</span>\n            <span class=\"n\">pred_enc</span><span class=\"p\">[</span><span class=\"n\">no_predict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">any</span><span class=\"p\">(</span><span class=\"n\">multi_predict</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">multi</span> <span class=\"ow\">or</span> <span class=\"n\">return_flags</span><span class=\"p\">:</span>\n            <span class=\"n\">pred_enc</span><span class=\"p\">[</span><span class=\"n\">multi_predict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">probs</span><span class=\"p\">[</span><span class=\"n\">multi_predict</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">argmax</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">pred_enc</span> <span class=\"o\">=</span> <span class=\"n\">pred_enc</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float</span><span class=\"p\">)</span>\n            <span class=\"n\">pred_enc</span><span class=\"p\">[</span><span class=\"n\">multi_predict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">df_index</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">pred_enc</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">(</span><span class=\"n\">pred_enc</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"n\">df_index</span><span class=\"p\">)</span>\n        <span class=\"c1\"># pred = pred_enc.apply(lambda x: target_names[x])</span>\n    <span class=\"k\">if</span> <span class=\"n\">return_flags</span><span class=\"p\">:</span>\n        <span class=\"n\">flags</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">probs</span><span class=\"p\">),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">bool</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">force</span><span class=\"p\">:</span>\n            <span class=\"n\">flags</span><span class=\"p\">[</span><span class=\"n\">no_predict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">multi</span><span class=\"p\">:</span>\n            <span class=\"n\">flags</span><span class=\"p\">[</span><span class=\"n\">no_predict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"k\">return</span> <span class=\"n\">pred_enc</span><span class=\"p\">,</span> <span class=\"n\">flags</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">pred_enc</span></div>\n\n\n<div class=\"viewcode-block\" id=\"predict_proba_df\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.verif/#ibeis.algo.verif.sklearn_utils.predict_proba_df\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">predict_proba_df</span><span class=\"p\">(</span><span class=\"n\">clf</span><span class=\"p\">,</span> <span class=\"n\">X_df</span><span class=\"p\">,</span> <span class=\"n\">class_names</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Calls sklearn classifier predict_proba but then puts results in a dataframe</span>\n<span class=\"sd\">    using the same index as X_df and incorporating all possible class_names</span>\n<span class=\"sd\">    given</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">class_names</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">columns</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">class_names</span><span class=\"p\">,</span> <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">classes_</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">columns</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">X_df</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"n\">columns</span><span class=\"p\">)</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">probs</span> <span class=\"o\">=</span> <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">predict_proba</span><span class=\"p\">(</span><span class=\"n\">X_df</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n        <span class=\"c1\"># solves a problem when values are infinity for whatever reason</span>\n        <span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">X_df</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n        <span class=\"n\">X</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">isfinite</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span>\n        <span class=\"n\">probs</span> <span class=\"o\">=</span> <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">predict_proba</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)</span>\n\n    <span class=\"n\">probs_df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">probs</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"n\">columns</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"n\">X_df</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">)</span>\n    <span class=\"c1\"># add in zero probability for classes without training data</span>\n    <span class=\"k\">if</span> <span class=\"n\">class_names</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">missing</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">setdiff</span><span class=\"p\">(</span><span class=\"n\">class_names</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">missing</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">classname</span> <span class=\"ow\">in</span> <span class=\"n\">missing</span><span class=\"p\">:</span>\n                <span class=\"n\">probs_df</span> <span class=\"o\">=</span> <span class=\"n\">probs_df</span><span class=\"o\">.</span><span class=\"n\">assign</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"p\">{</span>\n                    <span class=\"n\">classname</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">probs_df</span><span class=\"p\">))})</span>\n    <span class=\"k\">return</span> <span class=\"n\">probs_df</span></div>\n\n\n<div class=\"viewcode-block\" id=\"PrefitEstimatorEnsemble\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.verif/#ibeis.algo.verif.sklearn_utils.PrefitEstimatorEnsemble\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">PrefitEstimatorEnsemble</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n\n<span class=\"sd\">    hacks around limitations of sklearn.ensemble.VotingClassifier</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">clf_list</span><span class=\"p\">,</span> <span class=\"n\">voting</span><span class=\"o\">=</span><span class=\"s1\">&#39;soft&#39;</span><span class=\"p\">,</span> <span class=\"n\">weights</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">clf_list</span> <span class=\"o\">=</span> <span class=\"n\">clf_list</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">voting</span> <span class=\"o\">=</span> <span class=\"n\">voting</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">weights</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n        <span class=\"n\">classes_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">classes_</span> <span class=\"k\">for</span> <span class=\"n\">clf</span> <span class=\"ow\">in</span> <span class=\"n\">clf_list</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">allsame</span><span class=\"p\">(</span><span class=\"n\">classes_list</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">classes_</span> <span class=\"o\">=</span> <span class=\"n\">classes_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">class_idx_mappers</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Need to make a mapper from individual clf classes to ensemble</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">class_idx_mappers</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"n\">classes_</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"o\">.</span><span class=\"n\">union</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">,</span> <span class=\"n\">classes_list</span><span class=\"p\">)))</span>\n            <span class=\"k\">for</span> <span class=\"n\">clf</span> <span class=\"ow\">in</span> <span class=\"n\">clf_list</span><span class=\"p\">:</span>\n                <span class=\"c1\"># For each index of the clf classes, find that index in the</span>\n                <span class=\"c1\"># ensemble classes. Eg. class y=4 might be at cx=1 and ex=0</span>\n                <span class=\"n\">mapper</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">classes_</span><span class=\"p\">),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">int</span><span class=\"p\">)</span>\n                <span class=\"k\">for</span> <span class=\"n\">cx</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">classes_</span><span class=\"p\">):</span>\n                    <span class=\"n\">ex</span> <span class=\"o\">=</span> <span class=\"n\">classes_</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span>\n                    <span class=\"n\">mapper</span><span class=\"p\">[</span><span class=\"n\">cx</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ex</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">class_idx_mappers</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">mapper</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">classes_</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">classes_</span><span class=\"p\">)</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">clf</span> <span class=\"ow\">in</span> <span class=\"n\">clf_list</span><span class=\"p\">:</span>\n            <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">classes_</span>\n            <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_collect_probas</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Collect results from clf.predict calls. &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">class_idx_mappers</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">probas</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">asarray</span><span class=\"p\">([</span><span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">predict_proba</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">clf</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">clf_list</span><span class=\"p\">])</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">n_estimators</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">clf_list</span><span class=\"p\">)</span>\n            <span class=\"n\">n_samples</span> <span class=\"o\">=</span> <span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"n\">n_classes</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">classes_</span><span class=\"p\">)</span>\n            <span class=\"n\">probas</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">((</span><span class=\"n\">n_estimators</span><span class=\"p\">,</span> <span class=\"n\">n_samples</span><span class=\"p\">,</span> <span class=\"n\">n_classes</span><span class=\"p\">))</span>\n            <span class=\"k\">for</span> <span class=\"n\">ex</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">clf</span><span class=\"p\">,</span> <span class=\"n\">mapper</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">clf_list</span><span class=\"p\">,</span>\n                                                   <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">class_idx_mappers</span><span class=\"p\">)):</span>\n                <span class=\"n\">proba</span> <span class=\"o\">=</span> <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">predict_proba</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)</span>\n                <span class=\"c1\"># Use mapper to map indicies of clf classes to ensemble classes</span>\n                <span class=\"n\">probas</span><span class=\"p\">[</span><span class=\"n\">ex</span><span class=\"p\">][:,</span> <span class=\"n\">mapper</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">proba</span>\n        <span class=\"k\">return</span> <span class=\"n\">probas</span>\n\n<div class=\"viewcode-block\" id=\"PrefitEstimatorEnsemble.predict_proba\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.verif/#ibeis.algo.verif.sklearn_utils.PrefitEstimatorEnsemble.predict_proba\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">predict_proba</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Predict class probabilities for X in &#39;soft&#39; voting &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">voting</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;hard&#39;</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">AttributeError</span><span class=\"p\">(</span><span class=\"s2\">&quot;predict_proba is not available when&quot;</span>\n                                 <span class=\"s2\">&quot; voting=</span><span class=\"si\">%r</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">voting</span><span class=\"p\">)</span>\n        <span class=\"n\">avg</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">average</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_collect_probas</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">),</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">weights</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">weights</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">avg</span></div>\n\n<div class=\"viewcode-block\" id=\"PrefitEstimatorEnsemble.predict\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.verif/#ibeis.algo.verif.sklearn_utils.PrefitEstimatorEnsemble.predict\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">predict</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot; Predict class labels for X.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        X : {array-like, sparse matrix}, shape = [n_samples, n_features]</span>\n<span class=\"sd\">            Training vectors, where n_samples is the number of samples and</span>\n<span class=\"sd\">            n_features is the number of features.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        maj : array-like, shape = [n_samples]</span>\n<span class=\"sd\">            Predicted class labels.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">voting</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;soft&#39;</span><span class=\"p\">:</span>\n            <span class=\"n\">maj</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">argmax</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">predict_proba</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">),</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>  <span class=\"c1\"># &#39;hard&#39; voting</span>\n            <span class=\"n\">predictions</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_predict</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)</span>\n            <span class=\"n\">maj</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">apply_along_axis</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span>\n                                      <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">argmax</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">bincount</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span>\n                                                <span class=\"n\">weights</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">weights</span><span class=\"p\">)),</span>\n                                      <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n                                      <span class=\"n\">arr</span><span class=\"o\">=</span><span class=\"n\">predictions</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"s1\">&#39;int&#39;</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"n\">maj</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_predict</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Collect results from clf.predict calls. &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">asarray</span><span class=\"p\">([</span><span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">clf</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">clf_list</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">T</span></div>\n\n\n<div class=\"viewcode-block\" id=\"voting_ensemble\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.verif/#ibeis.algo.verif.sklearn_utils.voting_ensemble\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">voting_ensemble</span><span class=\"p\">(</span><span class=\"n\">clf_list</span><span class=\"p\">,</span> <span class=\"n\">voting</span><span class=\"o\">=</span><span class=\"s1\">&#39;hard&#39;</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    hack to construct a VotingClassifier from pretrained classifiers</span>\n<span class=\"sd\">    TODO: contribute similar functionality to sklearn</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">eclf</span> <span class=\"o\">=</span> <span class=\"n\">PrefitEstimatorEnsemble</span><span class=\"p\">(</span><span class=\"n\">clf_list</span><span class=\"p\">,</span> <span class=\"n\">voting</span><span class=\"o\">=</span><span class=\"n\">voting</span><span class=\"p\">)</span>\n    <span class=\"c1\"># classes_ = ut.list_getattr(clf_list, &#39;classes_&#39;)</span>\n    <span class=\"c1\"># if not ut.allsame(classes_):</span>\n    <span class=\"c1\">#     for clf in clf_list:</span>\n    <span class=\"c1\">#         print(clf.predict_proba(X_train))</span>\n    <span class=\"c1\">#         pass</span>\n    <span class=\"c1\">#     # Note: There is a corner case where one fold doesn&#39;t get any labels of</span>\n    <span class=\"c1\">#     # a certain class. Because y_train is an encoded integer, the</span>\n    <span class=\"c1\">#     # clf.classes_ attribute will cause predictions to agree with other</span>\n    <span class=\"c1\">#     # classifiers trained on the same labels. Therefore, the voting</span>\n    <span class=\"c1\">#     # classifer will still work. But</span>\n    <span class=\"c1\">#     raise ValueError(</span>\n    <span class=\"c1\">#         &#39;Classifiers predict different things. classes_={}&#39;.format(</span>\n    <span class=\"c1\">#             classes_)</span>\n    <span class=\"c1\">#     )</span>\n    <span class=\"c1\"># estimators = [(&#39;clf%d&#39; % count, clf) for count, clf in enumerate(clf_list)]</span>\n    <span class=\"c1\"># eclf = sklearn.ensemble.VotingClassifier(estimators=estimators,</span>\n    <span class=\"c1\">#                                          voting=voting)</span>\n    <span class=\"c1\"># eclf.classes_ = clf_list[0].classes_</span>\n    <span class=\"c1\"># eclf.estimators_ = clf_list</span>\n    <span class=\"k\">return</span> <span class=\"n\">eclf</span></div>\n</pre></div>", "current_page_name": "_modules/ibeis/algo/verif/sklearn_utils", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}