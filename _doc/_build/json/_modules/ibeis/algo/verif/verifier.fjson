{"parents": [{"link": "../../../../", "title": "Module code"}, {"link": "../../../", "title": "ibeis"}, {"link": "../../", "title": "ibeis.algo"}, {"link": "../", "title": "ibeis.algo.verif"}], "title": "ibeis.algo.verif.verifier", "body": "<h1>Source code for ibeis.algo.verif.verifier</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"k\">import</span> <span class=\"n\">absolute_import</span><span class=\"p\">,</span> <span class=\"n\">division</span><span class=\"p\">,</span> <span class=\"n\">print_function</span><span class=\"p\">,</span> <span class=\"n\">unicode_literals</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.verif</span> <span class=\"k\">import</span> <span class=\"n\">pairfeat</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.verif</span> <span class=\"k\">import</span> <span class=\"n\">sklearn_utils</span>\n<span class=\"kn\">import</span> <span class=\"nn\">vtool</span> <span class=\"k\">as</span> <span class=\"nn\">vt</span>\n<span class=\"c1\"># import itertools as it</span>\n<span class=\"c1\"># from os.path import join</span>\n<span class=\"nb\">print</span><span class=\"p\">,</span> <span class=\"n\">rrr</span><span class=\"p\">,</span> <span class=\"n\">profile</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">inject2</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"BaseVerifier\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.verif/#ibeis.algo.verif.verifier.BaseVerifier\">[docs]</a><span class=\"nd\">@ut</span><span class=\"o\">.</span><span class=\"n\">reloadable_class</span>\n<span class=\"k\">class</span> <span class=\"nc\">BaseVerifier</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">NiceRepr</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__nice__</span><span class=\"p\">(</span><span class=\"n\">verif</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s1\">&#39;.&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"n\">verif</span><span class=\"o\">.</span><span class=\"n\">metadata</span><span class=\"p\">[</span><span class=\"s1\">&#39;task_key&#39;</span><span class=\"p\">],</span>\n                         <span class=\"n\">verif</span><span class=\"o\">.</span><span class=\"n\">metadata</span><span class=\"p\">[</span><span class=\"s1\">&#39;clf_key&#39;</span><span class=\"p\">]])</span>\n\n<div class=\"viewcode-block\" id=\"BaseVerifier.predict_proba_df\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.verif/#ibeis.algo.verif.verifier.BaseVerifier.predict_proba_df\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">predict_proba_df</span><span class=\"p\">(</span><span class=\"n\">verif</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span><span class=\"s1\">&#39;abstract&#39;</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"BaseVerifier.fit\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.verif/#ibeis.algo.verif.verifier.BaseVerifier.fit\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">fit</span><span class=\"p\">(</span><span class=\"n\">verif</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        The vsone.OneVsOneProblem currently handles fitting a model based on</span>\n<span class=\"sd\">        edges. The actual fit call is in clf_helpers.py</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span><span class=\"s1\">&#39;Need to use OneVsOneProblem to do this&#39;</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"BaseVerifier.predict\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.verif/#ibeis.algo.verif.verifier.BaseVerifier.predict\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">predict</span><span class=\"p\">(</span><span class=\"n\">verif</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"p\">,</span> <span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;argmax&#39;</span><span class=\"p\">,</span> <span class=\"n\">encoded</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"n\">probs</span> <span class=\"o\">=</span> <span class=\"n\">verif</span><span class=\"o\">.</span><span class=\"n\">predict_proba_df</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">)</span>\n        <span class=\"n\">target_names</span> <span class=\"o\">=</span> <span class=\"n\">verif</span><span class=\"o\">.</span><span class=\"n\">class_names</span>\n        <span class=\"n\">pred_enc</span> <span class=\"o\">=</span> <span class=\"n\">sklearn_utils</span><span class=\"o\">.</span><span class=\"n\">predict_from_probs</span><span class=\"p\">(</span>\n            <span class=\"n\">probs</span><span class=\"p\">,</span> <span class=\"n\">method</span><span class=\"o\">=</span><span class=\"n\">method</span><span class=\"p\">,</span> <span class=\"n\">target_names</span><span class=\"o\">=</span><span class=\"n\">target_names</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">encoded</span><span class=\"p\">:</span>\n            <span class=\"n\">pred</span> <span class=\"o\">=</span> <span class=\"n\">pred_enc</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">pred</span> <span class=\"o\">=</span> <span class=\"n\">pred_enc</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"p\">(</span><span class=\"n\">verif</span><span class=\"o\">.</span><span class=\"n\">class_names</span><span class=\"o\">.</span><span class=\"fm\">__getitem__</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">pred</span></div>\n\n<div class=\"viewcode-block\" id=\"BaseVerifier.easiness\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.verif/#ibeis.algo.verif.verifier.BaseVerifier.easiness\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">easiness</span><span class=\"p\">(</span><span class=\"n\">verif</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"p\">,</span> <span class=\"n\">real</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Gets the probability of the class each edge is labeled as.  Indicates</span>\n<span class=\"sd\">        how easy it is to classify this example.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">probs</span> <span class=\"o\">=</span> <span class=\"n\">verif</span><span class=\"o\">.</span><span class=\"n\">predict_proba_df</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">)</span>\n        <span class=\"n\">target_names</span> <span class=\"o\">=</span> <span class=\"n\">probs</span><span class=\"o\">.</span><span class=\"n\">columns</span><span class=\"o\">.</span><span class=\"n\">tolist</span><span class=\"p\">()</span>\n        <span class=\"n\">real_enc</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"n\">target_names</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">r</span> <span class=\"ow\">in</span> <span class=\"n\">real</span><span class=\"p\">])</span>\n        <span class=\"n\">easiness</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ziptake</span><span class=\"p\">(</span><span class=\"n\">probs</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">,</span> <span class=\"n\">real_enc</span><span class=\"p\">))</span>\n        <span class=\"c1\"># easiness = pd.Series(easiness, index=probs.index)</span>\n        <span class=\"k\">return</span> <span class=\"n\">easiness</span></div></div>\n\n\n<div class=\"viewcode-block\" id=\"Verifier\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.verif/#ibeis.algo.verif.verifier.Verifier\">[docs]</a><span class=\"nd\">@ut</span><span class=\"o\">.</span><span class=\"n\">reloadable_class</span>\n<span class=\"k\">class</span> <span class=\"nc\">Verifier</span><span class=\"p\">(</span><span class=\"n\">BaseVerifier</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Notes:</span>\n<span class=\"sd\">        deploy_info should be a dict with the following keys:</span>\n<span class=\"sd\">            clf: sklearn classifier</span>\n<span class=\"sd\">            metadata: another dict with key:</span>\n<span class=\"sd\">                class_names - classes that clf predicts</span>\n<span class=\"sd\">                task_key - str</span>\n<span class=\"sd\">                clf_key - str</span>\n<span class=\"sd\">                data_info - tuple of (feat_extract_config, feat_dims)  # TODO: make feat dims part of feat_extract_config defaulted to None</span>\n<span class=\"sd\">                data_info - tuple of (feat_extract_config, feat_dims)</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.algo.verif.vsone import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(&#39;PZ_MTEST&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; speceis = &#39;zebra_plains&#39;</span>\n<span class=\"sd\">        &gt;&gt;&gt; task_key = &#39;match_state&#39;</span>\n<span class=\"sd\">        &gt;&gt;&gt; verif = Deployer()._load_published(ibs, species, task_key)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">verif</span><span class=\"p\">,</span> <span class=\"n\">ibs</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">deploy_info</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"n\">verif</span><span class=\"o\">.</span><span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span>\n        <span class=\"n\">verif</span><span class=\"o\">.</span><span class=\"n\">clf</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">verif</span><span class=\"o\">.</span><span class=\"n\">metadata</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n        <span class=\"n\">verif</span><span class=\"o\">.</span><span class=\"n\">class_names</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">verif</span><span class=\"o\">.</span><span class=\"n\">extr</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">deploy_info</span><span class=\"p\">:</span>\n            <span class=\"n\">verif</span><span class=\"o\">.</span><span class=\"n\">clf</span> <span class=\"o\">=</span> <span class=\"n\">deploy_info</span><span class=\"p\">[</span><span class=\"s1\">&#39;clf&#39;</span><span class=\"p\">]</span>\n            <span class=\"n\">verif</span><span class=\"o\">.</span><span class=\"n\">metadata</span> <span class=\"o\">=</span> <span class=\"n\">deploy_info</span><span class=\"p\">[</span><span class=\"s1\">&#39;metadata&#39;</span><span class=\"p\">]</span>\n            <span class=\"n\">verif</span><span class=\"o\">.</span><span class=\"n\">class_names</span> <span class=\"o\">=</span> <span class=\"n\">verif</span><span class=\"o\">.</span><span class=\"n\">metadata</span><span class=\"p\">[</span><span class=\"s1\">&#39;class_names&#39;</span><span class=\"p\">]</span>\n\n            <span class=\"n\">data_info</span> <span class=\"o\">=</span> <span class=\"n\">verif</span><span class=\"o\">.</span><span class=\"n\">metadata</span><span class=\"p\">[</span><span class=\"s1\">&#39;data_info&#39;</span><span class=\"p\">]</span>\n            <span class=\"n\">feat_extract_config</span><span class=\"p\">,</span> <span class=\"n\">feat_dims</span> <span class=\"o\">=</span> <span class=\"n\">data_info</span>\n\n            <span class=\"n\">feat_extract_config</span> <span class=\"o\">=</span> <span class=\"n\">feat_extract_config</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n            <span class=\"n\">feat_extract_config</span><span class=\"p\">[</span><span class=\"s1\">&#39;feat_dims&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">feat_dims</span>\n\n            <span class=\"n\">verif</span><span class=\"o\">.</span><span class=\"n\">extr</span> <span class=\"o\">=</span> <span class=\"n\">pairfeat</span><span class=\"o\">.</span><span class=\"n\">PairwiseFeatureExtractor</span><span class=\"p\">(</span>\n                <span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">feat_extract_config</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"Verifier.predict_proba_df\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.verif/#ibeis.algo.verif.verifier.Verifier.predict_proba_df\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">predict_proba_df</span><span class=\"p\">(</span><span class=\"n\">verif</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"p\">):</span>\n        <span class=\"c1\"># TODO: if multiple verifiers have the same feature extractor we should</span>\n        <span class=\"c1\"># be able to cache it before we run the verification algo.</span>\n        <span class=\"c1\"># (we used to do this)</span>\n        <span class=\"n\">X_df</span> <span class=\"o\">=</span> <span class=\"n\">verif</span><span class=\"o\">.</span><span class=\"n\">extr</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">)</span>\n        <span class=\"n\">probs_df</span> <span class=\"o\">=</span> <span class=\"n\">sklearn_utils</span><span class=\"o\">.</span><span class=\"n\">predict_proba_df</span><span class=\"p\">(</span><span class=\"n\">verif</span><span class=\"o\">.</span><span class=\"n\">clf</span><span class=\"p\">,</span> <span class=\"n\">X_df</span><span class=\"p\">,</span>\n                                                  <span class=\"n\">verif</span><span class=\"o\">.</span><span class=\"n\">class_names</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">probs_df</span></div></div>\n        <span class=\"c1\"># prev_data_info = None</span>\n        <span class=\"c1\"># task_keys = list(infr.verifiers.keys())</span>\n        <span class=\"c1\"># task_probs = {}</span>\n        <span class=\"c1\"># for task_key in task_keys:</span>\n        <span class=\"c1\">#     deploy_info = infr.verifiers[task_key]</span>\n        <span class=\"c1\">#     data_info = deploy_info[&#39;metadata&#39;][&#39;data_info&#39;]</span>\n        <span class=\"c1\">#     class_names = deploy_info[&#39;metadata&#39;][&#39;class_names&#39;]</span>\n        <span class=\"c1\">#     clf = deploy_info[&#39;clf&#39;]</span>\n        <span class=\"c1\">#     if prev_data_info != data_info:</span>\n        <span class=\"c1\">#         X_df = infr._cached_pairwise_features(edges, data_info)</span>\n        <span class=\"c1\">#         prev_data_info = data_info</span>\n        <span class=\"c1\">#     probs_df = sklearn_utils.predict_proba_df(clf, X_df, class_names)</span>\n        <span class=\"c1\"># task_probs[task_key] = probs_df</span>\n\n\n<div class=\"viewcode-block\" id=\"IntraVerifier\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.verif/#ibeis.algo.verif.verifier.IntraVerifier\">[docs]</a><span class=\"nd\">@ut</span><span class=\"o\">.</span><span class=\"n\">reloadable_class</span>\n<span class=\"k\">class</span> <span class=\"nc\">IntraVerifier</span><span class=\"p\">(</span><span class=\"n\">BaseVerifier</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Predicts cross-validated intra-training sample probs.</span>\n\n<span class=\"sd\">    Note:</span>\n<span class=\"sd\">        Requires the original OneVsOneProblem object.</span>\n<span class=\"sd\">        This classifier is for intra-dataset evaulation and is not meant to be</span>\n<span class=\"sd\">        pushlished for use on external datasets.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">verif</span><span class=\"p\">,</span> <span class=\"n\">pblm</span><span class=\"p\">,</span> <span class=\"n\">task_key</span><span class=\"p\">,</span> <span class=\"n\">clf_key</span><span class=\"p\">,</span> <span class=\"n\">data_key</span><span class=\"p\">):</span>\n        <span class=\"n\">verif</span><span class=\"o\">.</span><span class=\"n\">pblm</span> <span class=\"o\">=</span> <span class=\"n\">pblm</span>\n        <span class=\"n\">verif</span><span class=\"o\">.</span><span class=\"n\">task_key</span> <span class=\"o\">=</span> <span class=\"n\">task_key</span>\n        <span class=\"n\">verif</span><span class=\"o\">.</span><span class=\"n\">clf_key</span> <span class=\"o\">=</span> <span class=\"n\">clf_key</span>\n        <span class=\"n\">verif</span><span class=\"o\">.</span><span class=\"n\">data_key</span> <span class=\"o\">=</span> <span class=\"n\">data_key</span>\n\n        <span class=\"n\">verif</span><span class=\"o\">.</span><span class=\"n\">metadata</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;task_key&#39;</span><span class=\"p\">:</span> <span class=\"n\">task_key</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;clf_key&#39;</span><span class=\"p\">:</span> <span class=\"n\">clf_key</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"c1\"># Make an ensemble of the evaluation classifiers</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.verif</span> <span class=\"k\">import</span> <span class=\"n\">deploy</span>\n        <span class=\"n\">deployer</span> <span class=\"o\">=</span> <span class=\"n\">deploy</span><span class=\"o\">.</span><span class=\"n\">Deployer</span><span class=\"p\">(</span><span class=\"n\">pblm</span><span class=\"o\">=</span><span class=\"n\">verif</span><span class=\"o\">.</span><span class=\"n\">pblm</span><span class=\"p\">)</span>\n        <span class=\"n\">verif</span><span class=\"o\">.</span><span class=\"n\">ensemble</span> <span class=\"o\">=</span> <span class=\"n\">deployer</span><span class=\"o\">.</span><span class=\"n\">_make_ensemble_verifier</span><span class=\"p\">(</span>\n            <span class=\"n\">verif</span><span class=\"o\">.</span><span class=\"n\">task_key</span><span class=\"p\">,</span> <span class=\"n\">verif</span><span class=\"o\">.</span><span class=\"n\">clf_key</span><span class=\"p\">,</span> <span class=\"n\">verif</span><span class=\"o\">.</span><span class=\"n\">data_key</span><span class=\"p\">)</span>\n\n        <span class=\"n\">verif</span><span class=\"o\">.</span><span class=\"n\">class_names</span> <span class=\"o\">=</span> <span class=\"n\">verif</span><span class=\"o\">.</span><span class=\"n\">ensemble</span><span class=\"o\">.</span><span class=\"n\">class_names</span>\n\n<div class=\"viewcode-block\" id=\"IntraVerifier.predict_proba_df\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.verif/#ibeis.algo.verif.verifier.IntraVerifier.predict_proba_df\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">predict_proba_df</span><span class=\"p\">(</span><span class=\"n\">verif</span><span class=\"p\">,</span> <span class=\"n\">want_edges</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Predicts task probabilities in one of two ways:</span>\n<span class=\"sd\">            (1) if the edge was in the training set then its cross-validated</span>\n<span class=\"sd\">                probability is returned.</span>\n<span class=\"sd\">            (2) if the edge was not in the training set, then the average</span>\n<span class=\"sd\">                prediction over all cross validated classifiers are used.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">clf_key</span> <span class=\"o\">=</span> <span class=\"n\">verif</span><span class=\"o\">.</span><span class=\"n\">clf_key</span>\n        <span class=\"n\">task_key</span> <span class=\"o\">=</span> <span class=\"n\">verif</span><span class=\"o\">.</span><span class=\"n\">task_key</span>\n        <span class=\"n\">data_key</span> <span class=\"o\">=</span> <span class=\"n\">verif</span><span class=\"o\">.</span><span class=\"n\">data_key</span>\n\n        <span class=\"n\">pblm</span> <span class=\"o\">=</span> <span class=\"n\">verif</span><span class=\"o\">.</span><span class=\"n\">pblm</span>\n\n        <span class=\"c1\"># Load pre-predicted probabilities for intra-training set edges</span>\n        <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">task_combo_res</span><span class=\"p\">[</span><span class=\"n\">task_key</span><span class=\"p\">][</span><span class=\"n\">clf_key</span><span class=\"p\">][</span><span class=\"n\">data_key</span><span class=\"p\">]</span>\n\n        <span class=\"c1\"># Normalize and align combined result sample edges</span>\n        <span class=\"n\">train_uv</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">probs_df</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">tolist</span><span class=\"p\">())</span>\n        <span class=\"k\">assert</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">(</span><span class=\"n\">train_uv</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">train_uv</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]),</span> <span class=\"p\">(</span>\n            <span class=\"s1\">&#39;edges must be in lower triangular form&#39;</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">unique_row_indexes</span><span class=\"p\">(</span><span class=\"n\">train_uv</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">train_uv</span><span class=\"p\">),</span> <span class=\"p\">(</span>\n            <span class=\"s1\">&#39;edges must be unique&#39;</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"p\">(</span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">emap</span><span class=\"p\">(</span><span class=\"nb\">tuple</span><span class=\"p\">,</span> <span class=\"n\">train_uv</span><span class=\"o\">.</span><span class=\"n\">tolist</span><span class=\"p\">()))</span> <span class=\"o\">==</span>\n                <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">emap</span><span class=\"p\">(</span><span class=\"nb\">tuple</span><span class=\"p\">,</span> <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">samples</span><span class=\"o\">.</span><span class=\"n\">aid_pairs</span><span class=\"o\">.</span><span class=\"n\">tolist</span><span class=\"p\">())))</span>\n        <span class=\"n\">want_uv</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">want_edges</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Determine which edges need/have probabilities</span>\n        <span class=\"n\">want_uv_</span><span class=\"p\">,</span> <span class=\"n\">train_uv_</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">structure_rows</span><span class=\"p\">(</span><span class=\"n\">want_uv</span><span class=\"p\">,</span> <span class=\"n\">train_uv</span><span class=\"p\">)</span>\n        <span class=\"n\">unordered_have_uv_</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">intersect1d</span><span class=\"p\">(</span><span class=\"n\">want_uv_</span><span class=\"p\">,</span> <span class=\"n\">train_uv_</span><span class=\"p\">)</span>\n        <span class=\"n\">need_uv_</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">setdiff1d</span><span class=\"p\">(</span><span class=\"n\">want_uv_</span><span class=\"p\">,</span> <span class=\"n\">unordered_have_uv_</span><span class=\"p\">)</span>\n        <span class=\"n\">flags</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">flag_intersection</span><span class=\"p\">(</span><span class=\"n\">train_uv_</span><span class=\"p\">,</span> <span class=\"n\">unordered_have_uv_</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Re-order have_edges to agree with test_idx</span>\n        <span class=\"n\">have_uv_</span> <span class=\"o\">=</span> <span class=\"n\">train_uv_</span><span class=\"p\">[</span><span class=\"n\">flags</span><span class=\"p\">]</span>\n        <span class=\"n\">need_uv</span><span class=\"p\">,</span> <span class=\"n\">have_uv</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">unstructure_rows</span><span class=\"p\">(</span><span class=\"n\">need_uv_</span><span class=\"p\">,</span> <span class=\"n\">have_uv_</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Convert to tuples for pandas lookup. bleh...</span>\n        <span class=\"n\">have_edges</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">emap</span><span class=\"p\">(</span><span class=\"nb\">tuple</span><span class=\"p\">,</span> <span class=\"n\">have_uv</span><span class=\"o\">.</span><span class=\"n\">tolist</span><span class=\"p\">())</span>\n        <span class=\"n\">need_edges</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">emap</span><span class=\"p\">(</span><span class=\"nb\">tuple</span><span class=\"p\">,</span> <span class=\"n\">need_uv</span><span class=\"o\">.</span><span class=\"n\">tolist</span><span class=\"p\">())</span>\n        <span class=\"n\">want_edges</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">emap</span><span class=\"p\">(</span><span class=\"nb\">tuple</span><span class=\"p\">,</span> <span class=\"n\">want_uv</span><span class=\"o\">.</span><span class=\"n\">tolist</span><span class=\"p\">())</span>\n        <span class=\"k\">assert</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">have_edges</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">need_edges</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">set</span><span class=\"p\">([])</span>\n        <span class=\"k\">assert</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">have_edges</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">need_edges</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">want_edges</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Predict on unseen edges using an ensemble of evaluation classifiers</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Predicting </span><span class=\"si\">%s</span><span class=\"s1\"> probabilities&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">task_key</span><span class=\"p\">,))</span>\n        <span class=\"n\">eclf_probs</span> <span class=\"o\">=</span> <span class=\"n\">verif</span><span class=\"o\">.</span><span class=\"n\">ensemble</span><span class=\"o\">.</span><span class=\"n\">predict_proba_df</span><span class=\"p\">(</span><span class=\"n\">need_edges</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Combine probabilities --- get probabilites for each sample</span>\n        <span class=\"c1\"># edges = have_edges + need_edges</span>\n        <span class=\"n\">have_probs</span> <span class=\"o\">=</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">probs_df</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">have_edges</span><span class=\"p\">]</span>\n        <span class=\"k\">assert</span> <span class=\"n\">have_probs</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">intersection</span><span class=\"p\">(</span><span class=\"n\">eclf_probs</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">size</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"p\">(</span>\n            <span class=\"s1\">&#39;training (have) data was not disjoint from new (want) data &#39;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">probs</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">concat</span><span class=\"p\">([</span><span class=\"n\">have_probs</span><span class=\"p\">,</span> <span class=\"n\">eclf_probs</span><span class=\"p\">])</span>\n        <span class=\"k\">return</span> <span class=\"n\">probs</span></div></div>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.algo.verif.verifier</span>\n<span class=\"sd\">        python -m ibeis.algo.verif.verifier --allexamples</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">multiprocessing</span>\n    <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">freeze_support</span><span class=\"p\">()</span>  <span class=\"c1\"># for win32</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>  <span class=\"c1\"># NOQA</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">doctest_funcs</span><span class=\"p\">()</span>\n</pre></div>", "current_page_name": "_modules/ibeis/algo/verif/verifier", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}