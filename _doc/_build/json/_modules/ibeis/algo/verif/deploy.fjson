{"parents": [{"link": "../../../../", "title": "Module code"}, {"link": "../../../", "title": "ibeis"}, {"link": "../../", "title": "ibeis.algo"}, {"link": "../", "title": "ibeis.algo.verif"}], "title": "ibeis.algo.verif.deploy", "body": "<h1>Source code for ibeis.algo.verif.deploy</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"k\">import</span> <span class=\"n\">absolute_import</span><span class=\"p\">,</span> <span class=\"n\">division</span><span class=\"p\">,</span> <span class=\"n\">print_function</span><span class=\"p\">,</span> <span class=\"n\">unicode_literals</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"kn\">from</span> <span class=\"nn\">os.path</span> <span class=\"k\">import</span> <span class=\"n\">join</span><span class=\"p\">,</span> <span class=\"n\">exists</span><span class=\"p\">,</span> <span class=\"n\">basename</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.verif</span> <span class=\"k\">import</span> <span class=\"n\">sklearn_utils</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.verif</span> <span class=\"k\">import</span> <span class=\"n\">verifier</span>\n<span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n<span class=\"nb\">print</span><span class=\"p\">,</span> <span class=\"n\">rrr</span><span class=\"p\">,</span> <span class=\"n\">profile</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">inject2</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"Deployer\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.verif/#ibeis.algo.verif.deploy.Deployer\">[docs]</a><span class=\"nd\">@ut</span><span class=\"o\">.</span><span class=\"n\">reloadable_class</span>\n<span class=\"k\">class</span> <span class=\"nc\">Deployer</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Transforms a OneVsOne problem into a deployable model.</span>\n<span class=\"sd\">    Registers and loads published models.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"n\">fname_parts</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;vsone&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;</span><span class=\"si\">{species}</span><span class=\"s1\">&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;</span><span class=\"si\">{task_key}</span><span class=\"s1\">&#39;</span><span class=\"p\">,</span>\n                   <span class=\"s1\">&#39;</span><span class=\"si\">{clf_key}</span><span class=\"s1\">&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;</span><span class=\"si\">{n_dims}</span><span class=\"s1\">&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;</span><span class=\"si\">{hashid}</span><span class=\"s1\">&#39;</span><span class=\"p\">]</span>\n\n    <span class=\"n\">fname_fmtstr</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;.&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">fname_parts</span><span class=\"p\">)</span>\n\n    <span class=\"n\">meta_suffix</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;.meta.json&#39;</span>\n\n    <span class=\"n\">publish_info</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">&#39;remote&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;cthulhu.dyn.wildme.io&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;path&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;/media/hdd/PUBLIC/models/pairclf&#39;</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">published</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">&#39;zebra_grevys&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"c1\"># &#39;photobomb_state&#39;: &#39;vsone.zebra_grevys.photobomb_state.RF.131.thwzdtnkjcwjqeve.cPkl&#39;,</span>\n            <span class=\"c1\"># &#39;match_state&#39;: &#39;vsone.zebra_grevys.match_state.RF.131.tranflbhimyzeeqi.cPkl&#39;,  # OLD PRE-TRAINED 0</span>\n            <span class=\"c1\"># &#39;match_state&#39;: &#39;vsone.zebra_grevys.match_state.RF.131.dlncrbzlpwjyqrdx.cPkl&#39;,  # OLD PRE-TRAINED 1</span>\n            <span class=\"c1\"># &#39;match_state&#39;: &#39;vsone.zebra_grevys.match_state.RF.131.kukigovqipdrjihg.ggr2.cPkl&#39;,  # GGR2 0</span>\n            <span class=\"s1\">&#39;match_state&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;vsone.zebra_grevys.match_state.RF.131.djvqkmyzrjgaudok.ggr2.cPkl&#39;</span><span class=\"p\">,</span>  <span class=\"c1\"># GGR2 1</span>\n        <span class=\"p\">},</span>\n        <span class=\"s1\">&#39;zebra_plains&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;match_state&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;vsone.zebra_plains.match_state.RF.131.eurizlstehqjvlsu.cPkl&#39;</span><span class=\"p\">,</span>  <span class=\"c1\"># OLD PRE-TRAINED</span>\n        <span class=\"p\">},</span>\n        <span class=\"s1\">&#39;giraffe_reticulated&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"c1\"># &#39;match_state&#39;: &#39;vsone.giraffe_reticulated.match_state.RF.107.clvhhvwgwxpflnhu.ggr2.cPkl&#39;,  # GGR2 0</span>\n            <span class=\"s1\">&#39;match_state&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;vsone.giraffe_reticulated.match_state.RF.131.kqbaqnrdyxpjrzjd.ggr2.cPkl&#39;</span><span class=\"p\">,</span>  <span class=\"c1\"># GGR2 1</span>\n        <span class=\"p\">},</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">dpath</span><span class=\"o\">=</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">,</span> <span class=\"n\">pblm</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dpath</span> <span class=\"o\">=</span> <span class=\"n\">dpath</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pblm</span> <span class=\"o\">=</span> <span class=\"n\">pblm</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_load_published</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">species</span><span class=\"p\">,</span> <span class=\"n\">task_key</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.algo.verif.vsone import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; self = Deployer()</span>\n<span class=\"sd\">        &gt;&gt;&gt; species = &#39;zebra_plains&#39;</span>\n<span class=\"sd\">        &gt;&gt;&gt; task_key = &#39;match_state&#39;</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">base_url</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://</span><span class=\"si\">{remote}</span><span class=\"s1\">/public/models/pairclf&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n            <span class=\"o\">**</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">publish_info</span><span class=\"p\">)</span>\n\n        <span class=\"n\">task_fnames</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">published</span><span class=\"p\">[</span><span class=\"n\">species</span><span class=\"p\">]</span>\n        <span class=\"n\">fname</span> <span class=\"o\">=</span> <span class=\"n\">task_fnames</span><span class=\"p\">[</span><span class=\"n\">task_key</span><span class=\"p\">]</span>\n\n        <span class=\"n\">grabkw</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">appname</span><span class=\"o\">=</span><span class=\"s1\">&#39;ibeis&#39;</span><span class=\"p\">,</span> <span class=\"n\">check_hash</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># meta_url = base_url + &#39;/&#39; + fname + self.meta_suffix</span>\n        <span class=\"c1\"># meta_fpath = ut.grab_file_url(meta_url, **grabkw)</span>\n\n        <span class=\"n\">deploy_url</span> <span class=\"o\">=</span> <span class=\"n\">base_url</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;/&#39;</span> <span class=\"o\">+</span> <span class=\"n\">fname</span>\n        <span class=\"n\">deploy_fpath</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">grab_file_url</span><span class=\"p\">(</span><span class=\"n\">deploy_url</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">grabkw</span><span class=\"p\">)</span>\n\n        <span class=\"n\">verif</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_make_verifier</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">deploy_fpath</span><span class=\"p\">,</span> <span class=\"n\">task_key</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">verif</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_make_ensemble_verifier</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">task_key</span><span class=\"p\">,</span> <span class=\"n\">clf_key</span><span class=\"p\">,</span> <span class=\"n\">data_key</span><span class=\"p\">):</span>\n        <span class=\"n\">pblm</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pblm</span>\n        <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">ibs</span>\n        <span class=\"n\">data_info</span> <span class=\"o\">=</span> <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">feat_extract_info</span><span class=\"p\">[</span><span class=\"n\">data_key</span><span class=\"p\">]</span>\n        <span class=\"c1\"># Hack together an ensemble verifier</span>\n        <span class=\"n\">clf_list</span> <span class=\"o\">=</span> <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">eval_task_clfs</span><span class=\"p\">[</span><span class=\"n\">task_key</span><span class=\"p\">][</span><span class=\"n\">clf_key</span><span class=\"p\">][</span><span class=\"n\">data_key</span><span class=\"p\">]</span>\n        <span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">samples</span><span class=\"o\">.</span><span class=\"n\">subtasks</span><span class=\"p\">[</span><span class=\"n\">task_key</span><span class=\"p\">]</span>\n        <span class=\"n\">eclf</span> <span class=\"o\">=</span> <span class=\"n\">sklearn_utils</span><span class=\"o\">.</span><span class=\"n\">voting_ensemble</span><span class=\"p\">(</span><span class=\"n\">clf_list</span><span class=\"p\">,</span> <span class=\"n\">voting</span><span class=\"o\">=</span><span class=\"s1\">&#39;soft&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">deploy_info</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;clf&#39;</span><span class=\"p\">:</span> <span class=\"n\">eclf</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;metadata&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"s1\">&#39;task_key&#39;</span><span class=\"p\">:</span> <span class=\"n\">task_key</span><span class=\"p\">,</span>\n                <span class=\"s1\">&#39;clf_key&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;ensemble(</span><span class=\"si\">{}</span><span class=\"s1\">)&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">data_key</span><span class=\"p\">),</span>\n                <span class=\"s1\">&#39;data_key&#39;</span><span class=\"p\">:</span> <span class=\"n\">data_key</span><span class=\"p\">,</span>\n                <span class=\"s1\">&#39;class_names&#39;</span><span class=\"p\">:</span> <span class=\"n\">labels</span><span class=\"o\">.</span><span class=\"n\">class_names</span><span class=\"p\">,</span>\n                <span class=\"s1\">&#39;data_info&#39;</span><span class=\"p\">:</span> <span class=\"n\">data_info</span><span class=\"p\">,</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">verif</span> <span class=\"o\">=</span> <span class=\"n\">verifier</span><span class=\"o\">.</span><span class=\"n\">Verifier</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">deploy_info</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">verif</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_make_verifier</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">deploy_fpath</span><span class=\"p\">,</span> <span class=\"n\">task_key</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Ignore:</span>\n<span class=\"sd\">            # py3 side</span>\n<span class=\"sd\">            clf = deploy_info[&#39;clf&#39;]</span>\n<span class=\"sd\">            a = clf.estimators_[0]</span>\n<span class=\"sd\">            b = a.tree_</span>\n<span class=\"sd\">            ut.save_data(&#39;_tree.pkl&#39;, b)</span>\n<span class=\"sd\">            c = b.__getstate__()</span>\n<span class=\"sd\">            d = c[&#39;nodes&#39;]</span>\n<span class=\"sd\">            ut.save_data(&#39;_nodes.pkl&#39;, d)</span>\n\n<span class=\"sd\">            a.estimators_[0].tree_.__getstate__()[&#39;nodes&#39;]</span>\n\n\n<span class=\"sd\">        Ignore:</span>\n<span class=\"sd\">            # py2 side</span>\n<span class=\"sd\">            ut.load_data(&#39;_tree.pkl&#39;)</span>\n<span class=\"sd\">            ut.load_data(&#39;_nodes.pkl&#39;)</span>\n\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.algo.verif.vsone import *  # NOQA</span>\n<span class=\"sd\">            &gt;&gt;&gt; params = dict(sample_method=&#39;random&#39;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; pblm = OneVsOneProblem.from_empty(&#39;PZ_MTEST&#39;, **params)</span>\n<span class=\"sd\">            &gt;&gt;&gt; pblm.setup(with_simple=False)</span>\n<span class=\"sd\">            &gt;&gt;&gt; task_key = pblm.primary_task_key</span>\n<span class=\"sd\">            &gt;&gt;&gt; self = Deployer(dpath=&#39;.&#39;, pblm=pblm)</span>\n<span class=\"sd\">            &gt;&gt;&gt; deploy_info = self.deploy()</span>\n\n<span class=\"sd\">            a = deploy_info[&#39;clf&#39;]</span>\n<span class=\"sd\">            d = a.estimators_[0].tree_.__getstate__()[&#39;nodes&#39;]</span>\n\n\n<span class=\"sd\">        Ignore:</span>\n<span class=\"sd\">            I&#39;m having a similar issue when trying to use python2 to load a</span>\n<span class=\"sd\">            sklearn RandomForestClassifier that I saved in python3. I created a</span>\n<span class=\"sd\">            MWE.</span>\n\n<span class=\"sd\">            In python 3</span>\n\n<span class=\"sd\">                import numpy as np</span>\n<span class=\"sd\">                import pickle</span>\n<span class=\"sd\">                data = np.array(</span>\n<span class=\"sd\">                    [( 1, 26, 69,   5.32214928e+00,  0.69562945, 563,  908.,  1),</span>\n<span class=\"sd\">                     ( 2,  7, 62,   1.74883020e+00,  0.33854101, 483,  780.,  1),</span>\n<span class=\"sd\">                     (-1, -1, -2,  -2.00000000e+00,  0.76420451,   7,    9., -2),</span>\n<span class=\"sd\">                     (-1, -1, -2,  -2.00000000e+00,  0.        ,  62,  106., -2)],</span>\n<span class=\"sd\">                  dtype=[(&#39;left_child&#39;, &#39;&lt;i8&#39;), (&#39;right_child&#39;, &#39;&lt;i8&#39;),</span>\n<span class=\"sd\">                  (&#39;feature&#39;, &#39;&lt;i8&#39;), (&#39;threshold&#39;, &#39;&lt;f8&#39;), (&#39;impurity&#39;,</span>\n<span class=\"sd\">                  &#39;&lt;f8&#39;), (&#39;n_node_samples&#39;, &#39;&lt;i8&#39;),</span>\n<span class=\"sd\">                  (&#39;weighted_n_node_samples&#39;, &#39;&lt;f8&#39;), (&#39;missing_direction&#39;,</span>\n<span class=\"sd\">                  &#39;&lt;i8&#39;)])</span>\n\n<span class=\"sd\">                # Save using pickle</span>\n<span class=\"sd\">                with open(&#39;data.pkl&#39;, &#39;wb&#39;) as file_:</span>\n<span class=\"sd\">                    # Use protocol 2 to support python2 and 3</span>\n<span class=\"sd\">                    pickle.dump(data, file_, protocol=2)</span>\n\n<span class=\"sd\">                # Save with numpy directly</span>\n<span class=\"sd\">                np.save(&#39;data.npy&#39;, data)</span>\n\n<span class=\"sd\">            Then in python 2</span>\n<span class=\"sd\">                # Load with pickle</span>\n<span class=\"sd\">                import pickle</span>\n<span class=\"sd\">                with open(&#39;data.pkl&#39;, &#39;rb&#39;) as file_:</span>\n<span class=\"sd\">                    data = pickle.load(file_)</span>\n<span class=\"sd\">                # This results in `ValueError: non-string names in Numpy dtype unpickling`</span>\n\n<span class=\"sd\">                # Load with numpy directly</span>\n<span class=\"sd\">                data = np.load(&#39;data.npy&#39;)</span>\n<span class=\"sd\">                # This works</span>\n\n<span class=\"sd\">            However this still doesn&#39;t make sklearn play nice between 2 and 3.</span>\n<span class=\"sd\">            So, how can we get pickle to load this numpy object correctly?</span>\n<span class=\"sd\">            Here is the fix suggested in the link:</span>\n\n<span class=\"sd\">                from lib2to3.fixes.fix_imports import MAPPING</span>\n<span class=\"sd\">                import sys</span>\n<span class=\"sd\">                import pickle</span>\n\n<span class=\"sd\">                # MAPPING maps Python 2 names to Python 3 names. We want this in reverse.</span>\n<span class=\"sd\">                REVERSE_MAPPING = {}</span>\n<span class=\"sd\">                for key, val in MAPPING.items():</span>\n<span class=\"sd\">                    REVERSE_MAPPING[val] = key</span>\n\n<span class=\"sd\">                # We can override the Unpickler and loads</span>\n<span class=\"sd\">                class Python_3_Unpickler(pickle.Unpickler):</span>\n<span class=\"sd\">                    def find_class(self, module, name):</span>\n<span class=\"sd\">                        if module in REVERSE_MAPPING:</span>\n<span class=\"sd\">                            module = REVERSE_MAPPING[module]</span>\n<span class=\"sd\">                        __import__(module)</span>\n<span class=\"sd\">                        mod = sys.modules[module]</span>\n<span class=\"sd\">                        klass = getattr(mod, name)</span>\n<span class=\"sd\">                        return klass</span>\n\n<span class=\"sd\">                with open(&#39;data.pkl&#39;, &#39;rb&#39;) as file_:</span>\n<span class=\"sd\">                    data = Python_3_Unpickler(file_).load()</span>\n\n<span class=\"sd\">            This still doesn&#39;t work</span>\n\n\n\n<span class=\"sd\">            https://stackoverflow.com/questions/41720952/unpickle-sklearn-tree-descisiontreeregressor-in-python-2-from-python3</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">deploy_info</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">load_data</span><span class=\"p\">(</span><span class=\"n\">deploy_fpath</span><span class=\"p\">)</span>\n        <span class=\"n\">verif</span> <span class=\"o\">=</span> <span class=\"n\">verifier</span><span class=\"o\">.</span><span class=\"n\">Verifier</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">deploy_info</span><span class=\"o\">=</span><span class=\"n\">deploy_info</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">task_key</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">assert</span> <span class=\"n\">verif</span><span class=\"o\">.</span><span class=\"n\">metadata</span><span class=\"p\">[</span><span class=\"s1\">&#39;task_key&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">task_key</span><span class=\"p\">,</span> <span class=\"p\">(</span>\n                <span class=\"s1\">&#39;bad saved clf at fpath=</span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">deploy_fpath</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"n\">verif</span>\n\n<div class=\"viewcode-block\" id=\"Deployer.load_published\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.verif/#ibeis.algo.verif.deploy.Deployer.load_published\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">load_published</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">species</span><span class=\"p\">):</span>\n        <span class=\"n\">task_fnames</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">published</span><span class=\"p\">[</span><span class=\"n\">species</span><span class=\"p\">]</span>\n        <span class=\"n\">classifiers</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"n\">task_key</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_load_published</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">species</span><span class=\"p\">,</span> <span class=\"n\">task_key</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">task_key</span> <span class=\"ow\">in</span> <span class=\"n\">task_fnames</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">classifiers</span></div>\n\n<div class=\"viewcode-block\" id=\"Deployer.find_pretrained\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.verif/#ibeis.algo.verif.deploy.Deployer.find_pretrained\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">find_pretrained</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">glob</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">parse</span>\n        <span class=\"n\">fname_fmt</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fname_fmtstr</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;.cPkl&#39;</span>\n        <span class=\"n\">task_clf_candidates</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ddict</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">)</span>\n        <span class=\"n\">globstr</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fname_parts</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;.*.cPkl&#39;</span>\n        <span class=\"k\">for</span> <span class=\"n\">fpath</span> <span class=\"ow\">in</span> <span class=\"n\">glob</span><span class=\"o\">.</span><span class=\"n\">iglob</span><span class=\"p\">(</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dpath</span><span class=\"p\">,</span> <span class=\"n\">globstr</span><span class=\"p\">)):</span>\n            <span class=\"n\">fname</span> <span class=\"o\">=</span> <span class=\"n\">basename</span><span class=\"p\">(</span><span class=\"n\">fpath</span><span class=\"p\">)</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">parse</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"n\">fname_fmt</span><span class=\"p\">,</span> <span class=\"n\">fname</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">result</span><span class=\"p\">:</span>\n                <span class=\"n\">task_key</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">named</span><span class=\"p\">[</span><span class=\"s1\">&#39;task_key&#39;</span><span class=\"p\">]</span>\n                <span class=\"n\">task_clf_candidates</span><span class=\"p\">[</span><span class=\"n\">task_key</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">fpath</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">task_clf_candidates</span></div>\n\n<div class=\"viewcode-block\" id=\"Deployer.find_latest_remote\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.verif/#ibeis.algo.verif.deploy.Deployer.find_latest_remote\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">find_latest_remote</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Used to update the published dict</span>\n\n<span class=\"sd\">        CommandLine:</span>\n<span class=\"sd\">            python -m ibeis.algo.verif.vsone find_latest_remote</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.algo.verif.vsone import *  # NOQA</span>\n<span class=\"sd\">            &gt;&gt;&gt; self = Deployer()</span>\n<span class=\"sd\">            &gt;&gt;&gt; task_clf_names = self.find_latest_remote()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">base_url</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://</span><span class=\"si\">{remote}</span><span class=\"s1\">/public/models/pairclf&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n            <span class=\"o\">**</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">publish_info</span><span class=\"p\">)</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">bs4</span>\n        <span class=\"n\">resp</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">base_url</span><span class=\"p\">)</span>\n        <span class=\"n\">soup</span> <span class=\"o\">=</span> <span class=\"n\">bs4</span><span class=\"o\">.</span><span class=\"n\">BeautifulSoup</span><span class=\"p\">(</span><span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"s1\">&#39;html.parser&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">soup</span><span class=\"o\">.</span><span class=\"n\">findAll</span><span class=\"p\">(</span><span class=\"s1\">&#39;table&#39;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">parse_bs_table</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">):</span>\n            <span class=\"n\">n_columns</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n            <span class=\"n\">n_rows</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n            <span class=\"n\">column_names</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"c1\"># Find number of rows and columns</span>\n            <span class=\"c1\"># we also find the column titles if we can</span>\n            <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">find_all</span><span class=\"p\">(</span><span class=\"s1\">&#39;tr&#39;</span><span class=\"p\">):</span>\n                <span class=\"n\">td_tags</span> <span class=\"o\">=</span> <span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">find_all</span><span class=\"p\">(</span><span class=\"s1\">&#39;td&#39;</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">td_tags</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                    <span class=\"n\">n_rows</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                    <span class=\"k\">if</span> <span class=\"n\">n_columns</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                        <span class=\"n\">n_columns</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">td_tags</span><span class=\"p\">)</span>\n                <span class=\"c1\"># Handle column names if we find them</span>\n                <span class=\"n\">th_tags</span> <span class=\"o\">=</span> <span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">find_all</span><span class=\"p\">(</span><span class=\"s1\">&#39;th&#39;</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">th_tags</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">column_names</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                    <span class=\"k\">for</span> <span class=\"n\">th</span> <span class=\"ow\">in</span> <span class=\"n\">th_tags</span><span class=\"p\">:</span>\n                        <span class=\"n\">column_names</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">th</span><span class=\"o\">.</span><span class=\"n\">get_text</span><span class=\"p\">())</span>\n\n            <span class=\"c1\"># Safeguard on Column Titles</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">column_names</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">column_names</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"n\">n_columns</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"s2\">&quot;Column titles do not match the number of columns&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">columns</span> <span class=\"o\">=</span> <span class=\"n\">column_names</span> <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">column_names</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">n_columns</span><span class=\"p\">)</span>\n            <span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n            <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"n\">columns</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">n_rows</span><span class=\"p\">)))</span>\n            <span class=\"n\">row_marker</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n            <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">find_all</span><span class=\"p\">(</span><span class=\"s1\">&#39;tr&#39;</span><span class=\"p\">):</span>\n                <span class=\"n\">column_marker</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n                <span class=\"n\">columns</span> <span class=\"o\">=</span> <span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">find_all</span><span class=\"p\">(</span><span class=\"s1\">&#39;td&#39;</span><span class=\"p\">)</span>\n                <span class=\"k\">for</span> <span class=\"n\">column</span> <span class=\"ow\">in</span> <span class=\"n\">columns</span><span class=\"p\">:</span>\n                    <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">iat</span><span class=\"p\">[</span><span class=\"n\">row_marker</span><span class=\"p\">,</span> <span class=\"n\">column_marker</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">column</span><span class=\"o\">.</span><span class=\"n\">get_text</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span>\n                    <span class=\"n\">column_marker</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">columns</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                    <span class=\"n\">row_marker</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n            <span class=\"k\">return</span> <span class=\"n\">df</span>\n        <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">parse_bs_table</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Find all available models</span>\n        <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">&#39;Name&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s1\">&#39;.cPkl&#39;</span><span class=\"p\">))]</span>\n        <span class=\"c1\"># df = df[df[&#39;Last modified&#39;].map(len) &gt; 0]</span>\n\n        <span class=\"n\">fname_fmt</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fname_fmtstr</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;.cPkl&#39;</span>\n        <span class=\"n\">task_clf_candidates</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ddict</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">)</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">parse</span>\n        <span class=\"k\">for</span> <span class=\"n\">idx</span><span class=\"p\">,</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">iterrows</span><span class=\"p\">():</span>\n            <span class=\"n\">fname</span> <span class=\"o\">=</span> <span class=\"n\">basename</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">[</span><span class=\"s1\">&#39;Name&#39;</span><span class=\"p\">])</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">parse</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"n\">fname_fmt</span><span class=\"p\">,</span> <span class=\"n\">fname</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">result</span><span class=\"p\">:</span>\n                <span class=\"n\">task_key</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">named</span><span class=\"p\">[</span><span class=\"s1\">&#39;task_key&#39;</span><span class=\"p\">]</span>\n                <span class=\"n\">species</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">named</span><span class=\"p\">[</span><span class=\"s1\">&#39;species&#39;</span><span class=\"p\">]</span>\n                <span class=\"n\">task_clf_candidates</span><span class=\"p\">[(</span><span class=\"n\">species</span><span class=\"p\">,</span> <span class=\"n\">task_key</span><span class=\"p\">)]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">idx</span><span class=\"p\">)</span>\n\n        <span class=\"n\">task_clf_fnames</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ddict</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">idxs</span> <span class=\"ow\">in</span> <span class=\"n\">task_clf_candidates</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"n\">species</span><span class=\"p\">,</span> <span class=\"n\">task_key</span> <span class=\"o\">=</span> <span class=\"n\">key</span>\n            <span class=\"c1\"># Find the classifier most recently created</span>\n            <span class=\"n\">max_idx</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">argmax</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">idxs</span><span class=\"p\">][</span><span class=\"s1\">&#39;Last modified&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">tolist</span><span class=\"p\">())</span>\n            <span class=\"n\">fname</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">idxs</span><span class=\"p\">[</span><span class=\"n\">max_idx</span><span class=\"p\">]][</span><span class=\"s1\">&#39;Name&#39;</span><span class=\"p\">]</span>\n            <span class=\"n\">task_clf_fnames</span><span class=\"p\">[</span><span class=\"n\">species</span><span class=\"p\">][</span><span class=\"n\">task_key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">fname</span>\n\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;published = &#39;</span> <span class=\"o\">+</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr2</span><span class=\"p\">(</span><span class=\"n\">task_clf_fnames</span><span class=\"p\">,</span> <span class=\"n\">nl</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"n\">task_clf_fnames</span></div>\n\n<div class=\"viewcode-block\" id=\"Deployer.find_latest_local\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.verif/#ibeis.algo.verif.deploy.Deployer.find_latest_local\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">find_latest_local</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        &gt;&gt;&gt; self = Deployer()</span>\n<span class=\"sd\">        &gt;&gt;&gt; self.find_pretrained()</span>\n<span class=\"sd\">        &gt;&gt;&gt; self.find_latest_local()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">os.path</span> <span class=\"k\">import</span> <span class=\"n\">getctime</span>\n        <span class=\"n\">task_clf_candidates</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">find_pretrained</span><span class=\"p\">()</span>\n        <span class=\"n\">task_clf_fpaths</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">for</span> <span class=\"n\">task_key</span><span class=\"p\">,</span> <span class=\"n\">fpaths</span> <span class=\"ow\">in</span> <span class=\"n\">task_clf_candidates</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"c1\"># Find the classifier most recently created</span>\n            <span class=\"n\">fpath</span> <span class=\"o\">=</span> <span class=\"n\">fpaths</span><span class=\"p\">[</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">argmax</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"n\">getctime</span><span class=\"p\">,</span> <span class=\"n\">fpaths</span><span class=\"p\">))]</span>\n            <span class=\"n\">task_clf_fpaths</span><span class=\"p\">[</span><span class=\"n\">task_key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">fpath</span>\n        <span class=\"k\">return</span> <span class=\"n\">task_clf_fpaths</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_make_deploy_metadata</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">task_key</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"n\">pblm</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pblm</span>\n        <span class=\"k\">if</span> <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">samples</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"p\">()</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">task_key</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">task_key</span> <span class=\"o\">=</span> <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">primary_task_key</span>\n\n        <span class=\"c1\"># task_keys = list(pblm.samples.supported_tasks())</span>\n        <span class=\"n\">clf_key</span> <span class=\"o\">=</span> <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">default_clf_key</span>\n        <span class=\"n\">data_key</span> <span class=\"o\">=</span> <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">default_data_key</span>\n\n        <span class=\"c1\"># Save the classifie</span>\n        <span class=\"n\">data_info</span> <span class=\"o\">=</span> <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">feat_extract_info</span><span class=\"p\">[</span><span class=\"n\">data_key</span><span class=\"p\">]</span>\n        <span class=\"n\">feat_extract_config</span><span class=\"p\">,</span> <span class=\"n\">feat_dims</span> <span class=\"o\">=</span> <span class=\"n\">data_info</span>\n\n        <span class=\"n\">samples</span> <span class=\"o\">=</span> <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">samples</span>\n        <span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"n\">samples</span><span class=\"o\">.</span><span class=\"n\">subtasks</span><span class=\"p\">[</span><span class=\"n\">task_key</span><span class=\"p\">]</span>\n\n        <span class=\"n\">edge_hashid</span> <span class=\"o\">=</span> <span class=\"n\">samples</span><span class=\"o\">.</span><span class=\"n\">edge_set_hashid</span><span class=\"p\">()</span>\n        <span class=\"n\">label_hashid</span> <span class=\"o\">=</span> <span class=\"n\">samples</span><span class=\"o\">.</span><span class=\"n\">task_label_hashid</span><span class=\"p\">(</span><span class=\"n\">task_key</span><span class=\"p\">)</span>\n        <span class=\"n\">tasksamp_hashid</span> <span class=\"o\">=</span> <span class=\"n\">samples</span><span class=\"o\">.</span><span class=\"n\">task_sample_hashid</span><span class=\"p\">(</span><span class=\"n\">task_key</span><span class=\"p\">)</span>\n\n        <span class=\"n\">annot_hashid</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">hashid_arr</span><span class=\"p\">(</span><span class=\"n\">samples</span><span class=\"o\">.</span><span class=\"n\">_unique_annots</span><span class=\"o\">.</span><span class=\"n\">visual_uuids</span><span class=\"p\">,</span>\n                                     <span class=\"s1\">&#39;annots&#39;</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># species = pblm.infr.ibs.get_primary_database_species(</span>\n        <span class=\"c1\">#     samples._unique_annots.aid)</span>\n        <span class=\"n\">species</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;+&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">samples</span><span class=\"o\">.</span><span class=\"n\">_unique_annots</span><span class=\"o\">.</span><span class=\"n\">species</span><span class=\"p\">)))</span>\n\n        <span class=\"n\">metadata</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;tasksamp_hashid&#39;</span><span class=\"p\">:</span> <span class=\"n\">tasksamp_hashid</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;edge_hashid&#39;</span><span class=\"p\">:</span> <span class=\"n\">edge_hashid</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;label_hashid&#39;</span><span class=\"p\">:</span> <span class=\"n\">label_hashid</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;annot_hashid&#39;</span><span class=\"p\">:</span> <span class=\"n\">annot_hashid</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;class_hist&#39;</span><span class=\"p\">:</span> <span class=\"n\">labels</span><span class=\"o\">.</span><span class=\"n\">make_histogram</span><span class=\"p\">(),</span>\n            <span class=\"s1\">&#39;class_names&#39;</span><span class=\"p\">:</span> <span class=\"n\">labels</span><span class=\"o\">.</span><span class=\"n\">class_names</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;data_info&#39;</span><span class=\"p\">:</span> <span class=\"n\">data_info</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;task_key&#39;</span><span class=\"p\">:</span> <span class=\"n\">task_key</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;species&#39;</span><span class=\"p\">:</span> <span class=\"n\">species</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;data_key&#39;</span><span class=\"p\">:</span> <span class=\"n\">data_key</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;clf_key&#39;</span><span class=\"p\">:</span> <span class=\"n\">clf_key</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;n_dims&#39;</span><span class=\"p\">:</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">feat_dims</span><span class=\"p\">),</span>\n            <span class=\"c1\"># &#39;aid_pairs&#39;: samples.aid_pairs,</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"n\">meta_cfgstr</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr2</span><span class=\"p\">(</span><span class=\"n\">metadata</span><span class=\"p\">,</span> <span class=\"n\">kvsep</span><span class=\"o\">=</span><span class=\"s1\">&#39;:&#39;</span><span class=\"p\">,</span> <span class=\"n\">itemsep</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"n\">si</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">hashid</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">hash_data</span><span class=\"p\">(</span><span class=\"n\">meta_cfgstr</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">16</span><span class=\"p\">]</span>\n\n        <span class=\"n\">deploy_fname</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fname_fmtstr</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">hashid</span><span class=\"o\">=</span><span class=\"n\">hashid</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">metadata</span><span class=\"p\">)</span> <span class=\"o\">+</span>\n                        <span class=\"s1\">&#39;.cPkl&#39;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">deploy_metadata</span> <span class=\"o\">=</span> <span class=\"n\">metadata</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n        <span class=\"n\">deploy_metadata</span><span class=\"p\">[</span><span class=\"s1\">&#39;hashid&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">hashid</span>\n        <span class=\"n\">deploy_metadata</span><span class=\"p\">[</span><span class=\"s1\">&#39;fname&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">deploy_fname</span>\n        <span class=\"k\">return</span> <span class=\"n\">deploy_metadata</span><span class=\"p\">,</span> <span class=\"n\">deploy_fname</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_make_deploy_info</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">task_key</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"n\">pblm</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pblm</span>\n        <span class=\"k\">if</span> <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">samples</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"p\">()</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">task_key</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">task_key</span> <span class=\"o\">=</span> <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">primary_task_key</span>\n\n        <span class=\"n\">deploy_metadata</span><span class=\"p\">,</span> <span class=\"n\">deploy_fname</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_make_deploy_metadata</span><span class=\"p\">(</span><span class=\"n\">task_key</span><span class=\"p\">)</span>\n        <span class=\"n\">clf_key</span> <span class=\"o\">=</span> <span class=\"n\">deploy_metadata</span><span class=\"p\">[</span><span class=\"s1\">&#39;clf_key&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">data_key</span> <span class=\"o\">=</span> <span class=\"n\">deploy_metadata</span><span class=\"p\">[</span><span class=\"s1\">&#39;data_key&#39;</span><span class=\"p\">]</span>\n\n        <span class=\"n\">clf</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">if</span> <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">deploy_task_clfs</span><span class=\"p\">:</span>\n            <span class=\"n\">clf</span> <span class=\"o\">=</span> <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">deploy_task_clfs</span><span class=\"p\">[</span><span class=\"n\">task_key</span><span class=\"p\">][</span><span class=\"n\">clf_key</span><span class=\"p\">][</span><span class=\"n\">data_key</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">clf</span><span class=\"p\">:</span>\n            <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">learn_deploy_classifiers</span><span class=\"p\">([</span><span class=\"n\">task_key</span><span class=\"p\">],</span> <span class=\"n\">clf_key</span><span class=\"p\">,</span> <span class=\"n\">data_key</span><span class=\"p\">)</span>\n            <span class=\"n\">clf</span> <span class=\"o\">=</span> <span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">deploy_task_clfs</span><span class=\"p\">[</span><span class=\"n\">task_key</span><span class=\"p\">][</span><span class=\"n\">clf_key</span><span class=\"p\">][</span><span class=\"n\">data_key</span><span class=\"p\">]</span>\n\n        <span class=\"n\">deploy_info</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;clf&#39;</span><span class=\"p\">:</span> <span class=\"n\">clf</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;metadata&#39;</span><span class=\"p\">:</span> <span class=\"n\">deploy_metadata</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">deploy_info</span>\n\n<div class=\"viewcode-block\" id=\"Deployer.ensure\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.verif/#ibeis.algo.verif.deploy.Deployer.ensure\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">ensure</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">task_key</span><span class=\"p\">):</span>\n        <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">fname</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_make_deploy_metadata</span><span class=\"p\">(</span><span class=\"n\">task_key</span><span class=\"o\">=</span><span class=\"n\">task_key</span><span class=\"p\">)</span>\n        <span class=\"n\">fpath</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dpath</span><span class=\"p\">,</span> <span class=\"n\">fname</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">fpath</span><span class=\"p\">):</span>\n            <span class=\"n\">deploy_info</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">load_data</span><span class=\"p\">(</span><span class=\"n\">fpath</span><span class=\"p\">)</span>\n            <span class=\"k\">assert</span> <span class=\"nb\">bool</span><span class=\"p\">(</span><span class=\"n\">deploy_info</span><span class=\"p\">[</span><span class=\"s1\">&#39;clf&#39;</span><span class=\"p\">]),</span> <span class=\"s1\">&#39;must have clf&#39;</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">deploy_info</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">deploy</span><span class=\"p\">(</span><span class=\"n\">task_key</span><span class=\"o\">=</span><span class=\"n\">task_key</span><span class=\"p\">)</span>\n            <span class=\"k\">assert</span> <span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">fpath</span><span class=\"p\">),</span> <span class=\"s1\">&#39;must now exist&#39;</span>\n        <span class=\"n\">verif</span> <span class=\"o\">=</span> <span class=\"n\">verifier</span><span class=\"o\">.</span><span class=\"n\">Verifier</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pblm</span><span class=\"o\">.</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">deploy_info</span><span class=\"o\">=</span><span class=\"n\">deploy_info</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"n\">verif</span><span class=\"o\">.</span><span class=\"n\">metadata</span><span class=\"p\">[</span><span class=\"s1\">&#39;task_key&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">task_key</span><span class=\"p\">,</span> <span class=\"p\">(</span>\n            <span class=\"s1\">&#39;bad saved clf at fpath=</span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">fpath</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"n\">verif</span></div>\n\n<div class=\"viewcode-block\" id=\"Deployer.deploy\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.verif/#ibeis.algo.verif.deploy.Deployer.deploy\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">deploy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">task_key</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">publish</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Trains and saves a classifier for deployment</span>\n\n<span class=\"sd\">        Notes:</span>\n<span class=\"sd\">            A deployment consists of the following information</span>\n<span class=\"sd\">                * The classifier itself</span>\n<span class=\"sd\">                * Information needed to construct the input to the classifier</span>\n<span class=\"sd\">                    - TODO: can this be encoded as an sklearn pipeline?</span>\n<span class=\"sd\">                * Metadata concerning what data the classifier was trained with</span>\n<span class=\"sd\">                * PUBLISH TO /media/hdd/PUBLIC/models/pairclf</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.algo.verif.vsone import *  # NOQA</span>\n<span class=\"sd\">            &gt;&gt;&gt; params = dict(sample_method=&#39;random&#39;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; pblm = OneVsOneProblem.from_empty(&#39;PZ_MTEST&#39;, **params)</span>\n<span class=\"sd\">            &gt;&gt;&gt; pblm.setup(with_simple=False)</span>\n<span class=\"sd\">            &gt;&gt;&gt; task_key = pblm.primary_task_key</span>\n<span class=\"sd\">            &gt;&gt;&gt; self = Deployer(dpath=&#39;.&#39;, pblm=pblm)</span>\n<span class=\"sd\">            &gt;&gt;&gt; deploy_info = self.deploy()</span>\n\n<span class=\"sd\">        Ignore:</span>\n<span class=\"sd\">            pblm.evaluate_classifiers(with_simple=False)</span>\n<span class=\"sd\">            res = pblm.task_combo_res[pblm.primary_task_key][&#39;RF&#39;][&#39;learn(sum,glob)&#39;]</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">deploy_info</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_make_deploy_info</span><span class=\"p\">(</span><span class=\"n\">task_key</span><span class=\"o\">=</span><span class=\"n\">task_key</span><span class=\"p\">)</span>\n        <span class=\"n\">deploy_fname</span> <span class=\"o\">=</span> <span class=\"n\">deploy_info</span><span class=\"p\">[</span><span class=\"s1\">&#39;metadata&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;fname&#39;</span><span class=\"p\">]</span>\n\n        <span class=\"n\">meta_fname</span> <span class=\"o\">=</span> <span class=\"n\">deploy_fname</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">meta_suffix</span>\n        <span class=\"n\">deploy_fpath</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dpath</span><span class=\"p\">,</span> <span class=\"n\">deploy_fname</span><span class=\"p\">)</span>\n        <span class=\"n\">meta_fpath</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dpath</span><span class=\"p\">,</span> <span class=\"n\">meta_fname</span><span class=\"p\">)</span>\n\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">save_json</span><span class=\"p\">(</span><span class=\"n\">meta_fpath</span><span class=\"p\">,</span> <span class=\"n\">deploy_info</span><span class=\"p\">[</span><span class=\"s1\">&#39;metadata&#39;</span><span class=\"p\">])</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">save_data</span><span class=\"p\">(</span><span class=\"n\">deploy_fpath</span><span class=\"p\">,</span> <span class=\"n\">deploy_info</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">publish</span><span class=\"p\">:</span>\n            <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_user_name</span><span class=\"p\">()</span>\n            <span class=\"n\">remote_uri</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"si\">{user}</span><span class=\"s1\">@</span><span class=\"si\">{remote}</span><span class=\"s1\">:</span><span class=\"si\">{path}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">=</span><span class=\"n\">user</span><span class=\"p\">,</span>\n                                                         <span class=\"o\">**</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">publish_info</span><span class=\"p\">)</span>\n\n            <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">rsync</span><span class=\"p\">(</span><span class=\"n\">meta_fpath</span><span class=\"p\">,</span> <span class=\"n\">remote_uri</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;/&#39;</span> <span class=\"o\">+</span> <span class=\"n\">meta_fname</span><span class=\"p\">)</span>\n            <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">rsync</span><span class=\"p\">(</span><span class=\"n\">deploy_fpath</span><span class=\"p\">,</span> <span class=\"n\">remote_uri</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;/&#39;</span> <span class=\"o\">+</span> <span class=\"n\">deploy_fname</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">deploy_info</span></div></div>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.algo.verif.deploy</span>\n<span class=\"sd\">        python -m ibeis.algo.verif.deploy --allexamples</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">multiprocessing</span>\n    <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">freeze_support</span><span class=\"p\">()</span>  <span class=\"c1\"># for win32</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>  <span class=\"c1\"># NOQA</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">doctest_funcs</span><span class=\"p\">()</span>\n</pre></div>", "current_page_name": "_modules/ibeis/algo/verif/deploy", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}