{"parents": [{"link": "../../../../", "title": "Module code"}, {"link": "../../../", "title": "ibeis"}, {"link": "../../", "title": "ibeis.algo"}, {"link": "../", "title": "ibeis.algo.smk"}], "title": "ibeis.algo.smk.smk_pipeline", "body": "<h1>Source code for ibeis.algo.smk.smk_pipeline</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">Oxford Experiment:</span>\n<span class=\"sd\">    ibeis TestResult --db Oxford -p smk:nWords=[64000],nAssign=[1],SV=[False],can_match_sameimg=True -a oxford</span>\n\n\n<span class=\"sd\">Zebra Experiment:</span>\n<span class=\"sd\">    python -m ibeis draw_rank_cmc --db GZ_Master1 --show \\</span>\n<span class=\"sd\">        -p :proot=smk,num_words=[64000],fg_on=False,nAssign=[1],SV=[False] \\</span>\n<span class=\"sd\">           :proot=vsmany,fg_on=False,SV=[False] \\</span>\n<span class=\"sd\">        -a ctrl:qmingt=2</span>\n\n<span class=\"sd\">    python -m ibeis draw_rank_cmc --db PZ_Master1 --show \\</span>\n<span class=\"sd\">        -p :proot=smk,num_words=[64000],fg_on=False,nAssign=[1],SV=[False] \\</span>\n<span class=\"sd\">           :proot=vsmany,fg_on=False,SV=[False] \\</span>\n<span class=\"sd\">        -a ctrl:qmingt=2</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"k\">import</span> <span class=\"n\">absolute_import</span><span class=\"p\">,</span> <span class=\"n\">division</span><span class=\"p\">,</span> <span class=\"n\">print_function</span><span class=\"p\">,</span> <span class=\"n\">unicode_literals</span>\n<span class=\"kn\">import</span> <span class=\"nn\">dtool</span>\n<span class=\"kn\">import</span> <span class=\"nn\">six</span>\n<span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.smk</span> <span class=\"k\">import</span> <span class=\"n\">match_chips5</span> <span class=\"k\">as</span> <span class=\"n\">mc5</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.smk</span> <span class=\"k\">import</span> <span class=\"n\">vocab_indexer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.smk</span> <span class=\"k\">import</span> <span class=\"n\">inverted_index</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.smk</span> <span class=\"k\">import</span> <span class=\"n\">smk_funcs</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis</span> <span class=\"k\">import</span> <span class=\"n\">core_annots</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo</span> <span class=\"k\">import</span> <span class=\"n\">Config</span> <span class=\"k\">as</span> <span class=\"n\">old_config</span>\n<span class=\"p\">(</span><span class=\"nb\">print</span><span class=\"p\">,</span> <span class=\"n\">rrr</span><span class=\"p\">,</span> <span class=\"n\">profile</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">inject2</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"MatchHeuristicsConfig\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.smk/#ibeis.algo.smk.smk_pipeline.MatchHeuristicsConfig\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">MatchHeuristicsConfig</span><span class=\"p\">(</span><span class=\"n\">dtool</span><span class=\"o\">.</span><span class=\"n\">Config</span><span class=\"p\">):</span>\n    <span class=\"n\">_param_info_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ParamInfo</span><span class=\"p\">(</span><span class=\"s1\">&#39;can_match_self&#39;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">),</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ParamInfo</span><span class=\"p\">(</span><span class=\"s1\">&#39;can_match_samename&#39;</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">),</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ParamInfo</span><span class=\"p\">(</span><span class=\"s1\">&#39;can_match_sameimg&#39;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">),</span>\n    <span class=\"p\">]</span></div>\n\n\n<div class=\"viewcode-block\" id=\"SMKRequestConfig\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.smk/#ibeis.algo.smk.smk_pipeline.SMKRequestConfig\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">SMKRequestConfig</span><span class=\"p\">(</span><span class=\"n\">dtool</span><span class=\"o\">.</span><span class=\"n\">Config</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; Figure out how to do this &quot;&quot;&quot;</span>\n    <span class=\"n\">_param_info_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ParamInfo</span><span class=\"p\">(</span><span class=\"s1\">&#39;proot&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;smk&#39;</span><span class=\"p\">),</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ParamInfo</span><span class=\"p\">(</span><span class=\"s1\">&#39;smk_alpha&#39;</span><span class=\"p\">,</span> <span class=\"mf\">3.0</span><span class=\"p\">),</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ParamInfo</span><span class=\"p\">(</span><span class=\"s1\">&#39;smk_thresh&#39;</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">),</span>\n        <span class=\"c1\">#ut.ParamInfo(&#39;smk_thresh&#39;, -1.0),</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ParamInfo</span><span class=\"p\">(</span><span class=\"s1\">&#39;agg&#39;</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">),</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ParamInfo</span><span class=\"p\">(</span><span class=\"s1\">&#39;data_ma&#39;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">),</span>  <span class=\"c1\"># hack for query only multiple assignment</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ParamInfo</span><span class=\"p\">(</span><span class=\"s1\">&#39;word_weight_method&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;idf&#39;</span><span class=\"p\">,</span> <span class=\"n\">shortprefix</span><span class=\"o\">=</span><span class=\"s1\">&#39;wwm&#39;</span><span class=\"p\">),</span>  <span class=\"c1\"># hack for query only multiple assignment</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ParamInfo</span><span class=\"p\">(</span><span class=\"s1\">&#39;smk_version&#39;</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">_sub_config_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">core_annots</span><span class=\"o\">.</span><span class=\"n\">ChipConfig</span><span class=\"p\">,</span>\n        <span class=\"n\">core_annots</span><span class=\"o\">.</span><span class=\"n\">FeatConfig</span><span class=\"p\">,</span>\n        <span class=\"n\">old_config</span><span class=\"o\">.</span><span class=\"n\">SpatialVerifyConfig</span><span class=\"p\">,</span>\n        <span class=\"n\">vocab_indexer</span><span class=\"o\">.</span><span class=\"n\">VocabConfig</span><span class=\"p\">,</span>\n        <span class=\"n\">inverted_index</span><span class=\"o\">.</span><span class=\"n\">InvertedIndexConfig</span><span class=\"p\">,</span>\n        <span class=\"n\">MatchHeuristicsConfig</span><span class=\"p\">,</span>\n    <span class=\"p\">]</span></div>\n\n\n<div class=\"viewcode-block\" id=\"SMKRequest\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.smk/#ibeis.algo.smk.smk_pipeline.SMKRequest\">[docs]</a><span class=\"nd\">@ut</span><span class=\"o\">.</span><span class=\"n\">reloadable_class</span>\n<span class=\"k\">class</span> <span class=\"nc\">SMKRequest</span><span class=\"p\">(</span><span class=\"n\">mc5</span><span class=\"o\">.</span><span class=\"n\">EstimatorRequest</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    qreq_-like object. Trying to work on becoming more scikit-ish</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.algo.smk.smk_pipeline SMKRequest --profile</span>\n<span class=\"sd\">        python -m ibeis.algo.smk.smk_pipeline SMKRequest --show</span>\n\n<span class=\"sd\">        python -m ibeis draw_rank_cmc --db GZ_ALL --show \\</span>\n<span class=\"sd\">            -p :proot=smk,num_words=[64000,4000],nAssign=[1,5],sv_on=[False,True] \\</span>\n<span class=\"sd\">            -a ctrl:qmingt=2</span>\n\n<span class=\"sd\">        python -m ibeis draw_rank_cmc --db PZ_MTEST --show \\</span>\n<span class=\"sd\">            -p :proot=smk,num_words=[64000,8000,4000],nAssign=[1,2,4],sv_on=[True,False] \\</span>\n<span class=\"sd\">                default:proot=vsmany,sv_on=[True,False] \\</span>\n<span class=\"sd\">            -a default:qmingt=2</span>\n\n<span class=\"sd\">        python -m ibeis draw_rank_cmc --db PZ_MTEST --show \\</span>\n<span class=\"sd\">            -p :proot=smk,num_words=[64000],nAssign=[1],sv_on=[True] \\</span>\n<span class=\"sd\">                default:proot=vsmany,sv_on=[True] \\</span>\n<span class=\"sd\">            -a default:qmingt=2</span>\n\n<span class=\"sd\">        python -m ibeis draw_rank_cmc --db PZ_Master1 --show \\</span>\n<span class=\"sd\">            -p :proot=smk,num_words=[64000],nAssign=[1],sv_on=[False] \\</span>\n<span class=\"sd\">            -a ctrl:qmingt=2</span>\n\n<span class=\"sd\">        python -m ibeis draw_rank_cmc --db PZ_Master1 \\</span>\n<span class=\"sd\">            -p :proot=smk,num_words=[64000],nAssign=[1],sv_on=[True] \\</span>\n<span class=\"sd\">            -a ctrl:qmingt=2,qindex=60:80 --profile</span>\n\n<span class=\"sd\">        python -m ibeis draw_rank_cmc --db GZ_ALL \\</span>\n<span class=\"sd\">            -p :proot=smk,num_words=[64000],nAssign=[1],sv_on=[True] \\</span>\n<span class=\"sd\">            -a ctrl:qmingt=2,qindex=40:60 --profile</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.algo.smk.smk_pipeline import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs, aid_list = ibeis.testdata_aids(defaultdb=&#39;PZ_MTEST&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; qaids = aid_list[0:2]</span>\n<span class=\"sd\">        &gt;&gt;&gt; daids = aid_list[:]</span>\n<span class=\"sd\">        &gt;&gt;&gt; config = {&#39;nAssign&#39;: 2, &#39;num_words&#39;: 64000, &#39;sv_on&#39;: True}</span>\n<span class=\"sd\">        &gt;&gt;&gt; qreq_ = SMKRequest(ibs, qaids, daids, config)</span>\n<span class=\"sd\">        &gt;&gt;&gt; qreq_.ensure_data()</span>\n<span class=\"sd\">        &gt;&gt;&gt; cm_list = qreq_.execute()</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.quit_if_noshow()</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.qtensure()</span>\n<span class=\"sd\">        &gt;&gt;&gt; cm_list[0].ishow_analysis(qreq_, fnum=1, viz_name_score=False)</span>\n<span class=\"sd\">        &gt;&gt;&gt; cm_list[1].ishow_analysis(qreq_, fnum=2, viz_name_score=False)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.show_if_requested()</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"p\">,</span> <span class=\"n\">ibs</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">qaids</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">daids</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">SMKRequest</span><span class=\"p\">,</span> <span class=\"n\">qreq_</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">config</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n        <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span>\n        <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">qaids</span> <span class=\"o\">=</span> <span class=\"n\">qaids</span>\n        <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">daids</span> <span class=\"o\">=</span> <span class=\"n\">daids</span>\n\n        <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">config</span>\n\n        <span class=\"c1\">#qreq_.vocab = None</span>\n        <span class=\"c1\">#qreq_.dinva = None</span>\n\n        <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">qinva</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">dinva</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">smk</span> <span class=\"o\">=</span> <span class=\"n\">SMK</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Hack to work with existing hs code</span>\n        <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">stack_config</span> <span class=\"o\">=</span> <span class=\"n\">SMKRequestConfig</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">config</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Flat config</span>\n        <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">qparams</span> <span class=\"o\">=</span> <span class=\"n\">dtool</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">StackedConfig</span><span class=\"p\">([</span>\n            <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">stack_config</span><span class=\"o\">.</span><span class=\"n\">parse_items</span><span class=\"p\">())</span>\n        <span class=\"p\">])</span>\n        <span class=\"c1\">#    # TODO: add vocab, inva, features</span>\n        <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">cachedir</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ensuredir</span><span class=\"p\">((</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">cachedir</span><span class=\"p\">,</span> <span class=\"s1\">&#39;smk&#39;</span><span class=\"p\">))</span>\n\n<div class=\"viewcode-block\" id=\"SMKRequest.dump_vectors\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.smk/#ibeis.algo.smk.smk_pipeline.SMKRequest.dump_vectors\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">dump_vectors</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.algo.smk.smk_pipeline import *  # NOQA</span>\n<span class=\"sd\">            &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">            &gt;&gt;&gt; ibs, aid_list = ibeis.testdata_aids(defaultdb=&#39;PZ_MTEST&#39;, a=&#39;default:mingt=2,pername=2&#39;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; qaids = aid_list[0:2]</span>\n<span class=\"sd\">            &gt;&gt;&gt; daids = aid_list[:]</span>\n<span class=\"sd\">            &gt;&gt;&gt; config = {&#39;nAssign&#39;: 1, &#39;num_words&#39;: 8000,</span>\n<span class=\"sd\">            &gt;&gt;&gt;           &#39;sv_on&#39;: True}</span>\n<span class=\"sd\">            &gt;&gt;&gt; qreq_ = SMKRequest(ibs, qaids, daids, config)</span>\n<span class=\"sd\">            &gt;&gt;&gt; qreq_.ensure_data()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">inva</span> <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">dinva</span>\n        <span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">dinva</span><span class=\"o\">.</span><span class=\"n\">get_annot</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">daids</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n        <span class=\"n\">n_words</span> <span class=\"o\">=</span> <span class=\"n\">inva</span><span class=\"o\">.</span><span class=\"n\">wx_list</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n        <span class=\"n\">n_dims</span> <span class=\"o\">=</span> <span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">agg_rvecs</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"n\">n_annots</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">daids</span><span class=\"p\">)</span>\n        <span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">agg_rvecs</span><span class=\"o\">.</span><span class=\"n\">dtype</span>\n        <span class=\"n\">vlads</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">((</span><span class=\"n\">n_annots</span><span class=\"p\">,</span> <span class=\"n\">n_words</span><span class=\"p\">,</span> <span class=\"n\">n_dims</span><span class=\"p\">),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">)</span>\n        <span class=\"n\">ids_</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">dnids</span><span class=\"p\">,</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">daids</span><span class=\"p\">))</span>\n        <span class=\"k\">for</span> <span class=\"n\">count</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">nid</span><span class=\"p\">,</span> <span class=\"n\">aid</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ProgIter</span><span class=\"p\">(</span><span class=\"n\">ids_</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">&#39;vlad&#39;</span><span class=\"p\">)):</span>\n            <span class=\"c1\"># X.rrr()</span>\n            <span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">dinva</span><span class=\"o\">.</span><span class=\"n\">get_annot</span><span class=\"p\">(</span><span class=\"n\">aid</span><span class=\"p\">)</span>\n            <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">vlads</span><span class=\"p\">[</span><span class=\"n\">count</span><span class=\"p\">]</span>\n            <span class=\"n\">out</span><span class=\"p\">[</span><span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">wx_list</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">agg_rvecs</span>\n            <span class=\"c1\"># X.to_dense(out=out)</span>\n        <span class=\"c1\"># Flatten out</span>\n        <span class=\"n\">vlads</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">n_annots</span><span class=\"p\">,</span> <span class=\"n\">n_words</span> <span class=\"o\">*</span> <span class=\"n\">n_dims</span><span class=\"p\">)</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">print_object_size</span><span class=\"p\">(</span><span class=\"n\">vlads</span><span class=\"p\">)</span>\n        <span class=\"n\">fname</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;vlad_</span><span class=\"si\">%d</span><span class=\"s1\">_d</span><span class=\"si\">%d</span><span class=\"s1\">_</span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">n_annots</span><span class=\"p\">,</span> <span class=\"n\">n_words</span> <span class=\"o\">*</span> <span class=\"n\">n_dims</span><span class=\"p\">,</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_dbname</span><span class=\"p\">())</span>\n        <span class=\"n\">fpath</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">truepath</span><span class=\"p\">(</span><span class=\"s1\">&#39;~/&#39;</span> <span class=\"o\">+</span> <span class=\"n\">fname</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;.mat&#39;</span><span class=\"p\">)</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">scipy.io</span>\n        <span class=\"n\">mdict</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;vlads&#39;</span><span class=\"p\">:</span> <span class=\"n\">vlads</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;nids&#39;</span><span class=\"p\">:</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">dnids</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">scipy</span><span class=\"o\">.</span><span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">savemat</span><span class=\"p\">(</span><span class=\"n\">fpath</span><span class=\"p\">,</span> <span class=\"n\">mdict</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"SMKRequest.ensure_data\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.smk/#ibeis.algo.smk.smk_pipeline.SMKRequest.ensure_data\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">ensure_data</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">            &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">            qreq_ = ibeis.testdata_qreq_(</span>\n<span class=\"sd\">                defaultdb=&#39;Oxford&#39;, a=&#39;oxford&#39;,</span>\n<span class=\"sd\">                p=&#39;default:proot=smk,nAssign=1,num_words=64000,SV=False,can_match_sameimg=True,dim_size=None&#39;)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Ensure data for </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"p\">,))</span>\n\n        <span class=\"c1\">#qreq_.cachedir = ut.ensuredir((ibs.cachedir, &#39;smk&#39;))</span>\n        <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">ensure_nids</span><span class=\"p\">()</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">make_cacher</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">cfgstr</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">cfgstr</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">cfgstr</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">hashstr27</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">get_cfgstr</span><span class=\"p\">())</span>\n            <span class=\"k\">if</span> <span class=\"kc\">False</span> <span class=\"ow\">and</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">is_developer</span><span class=\"p\">():</span>\n                <span class=\"k\">return</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">Cacher</span><span class=\"p\">(</span>\n                    <span class=\"n\">fname</span><span class=\"o\">=</span><span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;_&#39;</span> <span class=\"o\">+</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_dbname</span><span class=\"p\">(),</span>\n                    <span class=\"n\">cfgstr</span><span class=\"o\">=</span><span class=\"n\">cfgstr</span><span class=\"p\">,</span>\n                    <span class=\"n\">cache_dir</span><span class=\"o\">=</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ensuredir</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">truepath</span><span class=\"p\">(</span><span class=\"s1\">&#39;~/Desktop/smkcache&#39;</span><span class=\"p\">))</span>\n                <span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">wrp</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">DynStruct</span><span class=\"p\">()</span>\n                <span class=\"k\">def</span> <span class=\"nf\">ensure</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">):</span>\n                    <span class=\"k\">return</span> <span class=\"n\">func</span><span class=\"p\">()</span>\n                <span class=\"n\">wrp</span><span class=\"o\">.</span><span class=\"n\">ensure</span> <span class=\"o\">=</span> <span class=\"n\">ensure</span>\n                <span class=\"k\">return</span> <span class=\"n\">wrp</span>\n\n        <span class=\"kn\">import</span> <span class=\"nn\">copy</span>\n        <span class=\"n\">dconfig</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">qparams</span><span class=\"p\">)</span>\n        <span class=\"n\">qconfig</span> <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">qparams</span>\n        <span class=\"k\">if</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">qparams</span><span class=\"p\">[</span><span class=\"s1\">&#39;data_ma&#39;</span><span class=\"p\">]:</span>\n            <span class=\"c1\"># Disable database-dise multi-assignment</span>\n            <span class=\"n\">dconfig</span><span class=\"p\">[</span><span class=\"s1\">&#39;nAssign&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n        <span class=\"n\">wwm</span> <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">qparams</span><span class=\"p\">[</span><span class=\"s1\">&#39;word_weight_method&#39;</span><span class=\"p\">]</span>\n\n        <span class=\"n\">depc</span> <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">depc</span>\n        <span class=\"n\">vocab_aids</span> <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">daids</span>\n\n        <span class=\"n\">cheat</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"k\">if</span> <span class=\"n\">cheat</span><span class=\"p\">:</span>\n            <span class=\"kn\">import</span> <span class=\"nn\">ibeis</span>\n            <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">cprint</span><span class=\"p\">(</span><span class=\"s1\">&#39;CHEATING&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;red&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">vocab_aids</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">init</span><span class=\"o\">.</span><span class=\"n\">filter_annots</span><span class=\"o\">.</span><span class=\"n\">sample_annots_wrt_ref</span><span class=\"p\">(</span>\n                <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">daids</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;exclude_ref_contact&#39;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">},</span>\n                <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">qaids</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"n\">vocab_rowid</span> <span class=\"o\">=</span> <span class=\"n\">depc</span><span class=\"o\">.</span><span class=\"n\">get_rowids</span><span class=\"p\">(</span><span class=\"s1\">&#39;vocab&#39;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">vocab_aids</span><span class=\"p\">,),</span> <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">dconfig</span><span class=\"p\">,</span> <span class=\"n\">ensure</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"k\">assert</span> <span class=\"n\">vocab_rowid</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span>\n\n        <span class=\"n\">depc</span> <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">depc</span>\n        <span class=\"n\">dinva_pcfgstr</span> <span class=\"o\">=</span> <span class=\"n\">depc</span><span class=\"o\">.</span><span class=\"n\">stacked_config</span><span class=\"p\">(</span>\n            <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">&#39;inverted_agg_assign&#39;</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">dconfig</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get_cfgstr</span><span class=\"p\">()</span>\n        <span class=\"n\">qinva_pcfgstr</span> <span class=\"o\">=</span> <span class=\"n\">depc</span><span class=\"o\">.</span><span class=\"n\">stacked_config</span><span class=\"p\">(</span>\n            <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">&#39;inverted_agg_assign&#39;</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">qconfig</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get_cfgstr</span><span class=\"p\">()</span>\n        <span class=\"n\">dannot_vuuid</span> <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_hashid_visual_uuid</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">daids</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">(</span><span class=\"s1\">&#39;_&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">qannot_vuuid</span> <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_hashid_visual_uuid</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">qaids</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">(</span><span class=\"s1\">&#39;_&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">tannot_vuuid</span> <span class=\"o\">=</span> <span class=\"n\">dannot_vuuid</span>\n        <span class=\"n\">dannot_suuid</span> <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_hashid_semantic_uuid</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">daids</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">(</span><span class=\"s1\">&#39;_&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">qannot_suuid</span> <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_hashid_semantic_uuid</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">qaids</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">(</span><span class=\"s1\">&#39;_&#39;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">dinva_phashid</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">hashstr27</span><span class=\"p\">(</span><span class=\"n\">dinva_pcfgstr</span> <span class=\"o\">+</span> <span class=\"n\">tannot_vuuid</span><span class=\"p\">)</span>\n        <span class=\"n\">qinva_phashid</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">hashstr27</span><span class=\"p\">(</span><span class=\"n\">qinva_pcfgstr</span> <span class=\"o\">+</span> <span class=\"n\">tannot_vuuid</span><span class=\"p\">)</span>\n        <span class=\"n\">dinva_cfgstr</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;_&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"n\">dannot_vuuid</span><span class=\"p\">,</span> <span class=\"n\">dinva_phashid</span><span class=\"p\">])</span>\n        <span class=\"n\">qinva_cfgstr</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;_&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"n\">qannot_vuuid</span><span class=\"p\">,</span> <span class=\"n\">qinva_phashid</span><span class=\"p\">])</span>\n\n        <span class=\"c1\">#vocab = inverted_index.new_load_vocab(ibs, qreq_.daids, config)</span>\n        <span class=\"n\">dinva_cacher</span> <span class=\"o\">=</span> <span class=\"n\">make_cacher</span><span class=\"p\">(</span><span class=\"s1\">&#39;inva&#39;</span><span class=\"p\">,</span> <span class=\"n\">dinva_cfgstr</span><span class=\"p\">)</span>\n        <span class=\"n\">qinva_cacher</span> <span class=\"o\">=</span> <span class=\"n\">make_cacher</span><span class=\"p\">(</span><span class=\"s1\">&#39;inva&#39;</span><span class=\"p\">,</span> <span class=\"n\">qinva_cfgstr</span><span class=\"p\">)</span>\n        <span class=\"n\">dwwm_cacher</span>  <span class=\"o\">=</span> <span class=\"n\">make_cacher</span><span class=\"p\">(</span><span class=\"s1\">&#39;word_weight&#39;</span><span class=\"p\">,</span> <span class=\"n\">wwm</span> <span class=\"o\">+</span> <span class=\"n\">dinva_cfgstr</span><span class=\"p\">)</span>\n\n        <span class=\"n\">gamma_phashid</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">hashstr27</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">get_pipe_cfgstr</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">tannot_vuuid</span><span class=\"p\">)</span>\n        <span class=\"n\">dgamma_cfgstr</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;_&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"n\">dannot_suuid</span><span class=\"p\">,</span> <span class=\"n\">gamma_phashid</span><span class=\"p\">])</span>\n        <span class=\"n\">qgamma_cfgstr</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;_&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"n\">qannot_suuid</span><span class=\"p\">,</span> <span class=\"n\">gamma_phashid</span><span class=\"p\">])</span>\n        <span class=\"n\">dgamma_cacher</span> <span class=\"o\">=</span> <span class=\"n\">make_cacher</span><span class=\"p\">(</span><span class=\"s1\">&#39;dgamma&#39;</span><span class=\"p\">,</span> <span class=\"n\">cfgstr</span><span class=\"o\">=</span><span class=\"n\">dgamma_cfgstr</span><span class=\"p\">)</span>\n        <span class=\"n\">qgamma_cacher</span> <span class=\"o\">=</span> <span class=\"n\">make_cacher</span><span class=\"p\">(</span><span class=\"s1\">&#39;qgamma&#39;</span><span class=\"p\">,</span> <span class=\"n\">cfgstr</span><span class=\"o\">=</span><span class=\"n\">qgamma_cfgstr</span><span class=\"p\">)</span>\n\n        <span class=\"n\">dinva</span> <span class=\"o\">=</span> <span class=\"n\">dinva_cacher</span><span class=\"o\">.</span><span class=\"n\">ensure</span><span class=\"p\">(</span>\n            <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">inverted_index</span><span class=\"o\">.</span><span class=\"n\">InvertedAnnots</span><span class=\"o\">.</span><span class=\"n\">from_depc</span><span class=\"p\">(</span>\n                <span class=\"n\">depc</span><span class=\"p\">,</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">daids</span><span class=\"p\">,</span> <span class=\"n\">vocab_aids</span><span class=\"p\">,</span> <span class=\"n\">dconfig</span><span class=\"p\">))</span>\n\n        <span class=\"n\">qinva</span> <span class=\"o\">=</span> <span class=\"n\">qinva_cacher</span><span class=\"o\">.</span><span class=\"n\">ensure</span><span class=\"p\">(</span>\n            <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">inverted_index</span><span class=\"o\">.</span><span class=\"n\">InvertedAnnots</span><span class=\"o\">.</span><span class=\"n\">from_depc</span><span class=\"p\">(</span>\n                <span class=\"n\">depc</span><span class=\"p\">,</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">qaids</span><span class=\"p\">,</span> <span class=\"n\">vocab_aids</span><span class=\"p\">,</span> <span class=\"n\">qconfig</span><span class=\"p\">))</span>\n\n        <span class=\"n\">dinva</span><span class=\"o\">.</span><span class=\"n\">wx_to_aids</span> <span class=\"o\">=</span> <span class=\"n\">dinva</span><span class=\"o\">.</span><span class=\"n\">compute_inverted_list</span><span class=\"p\">()</span>\n\n        <span class=\"n\">wx_to_weight</span> <span class=\"o\">=</span> <span class=\"n\">dwwm_cacher</span><span class=\"o\">.</span><span class=\"n\">ensure</span><span class=\"p\">(</span>\n            <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">dinva</span><span class=\"o\">.</span><span class=\"n\">compute_word_weights</span><span class=\"p\">(</span><span class=\"n\">wwm</span><span class=\"p\">))</span>\n        <span class=\"n\">dinva</span><span class=\"o\">.</span><span class=\"n\">wx_to_weight</span> <span class=\"o\">=</span> <span class=\"n\">wx_to_weight</span>\n        <span class=\"n\">qinva</span><span class=\"o\">.</span><span class=\"n\">wx_to_weight</span> <span class=\"o\">=</span> <span class=\"n\">wx_to_weight</span>\n\n        <span class=\"n\">thresh</span> <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">qparams</span><span class=\"p\">[</span><span class=\"s1\">&#39;smk_thresh&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">alpha</span> <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">qparams</span><span class=\"p\">[</span><span class=\"s1\">&#39;smk_alpha&#39;</span><span class=\"p\">]</span>\n\n        <span class=\"n\">dinva</span><span class=\"o\">.</span><span class=\"n\">gamma_list</span> <span class=\"o\">=</span> <span class=\"n\">dgamma_cacher</span><span class=\"o\">.</span><span class=\"n\">ensure</span><span class=\"p\">(</span>\n            <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">dinva</span><span class=\"o\">.</span><span class=\"n\">compute_gammas</span><span class=\"p\">(</span><span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">thresh</span><span class=\"p\">))</span>\n\n        <span class=\"n\">qinva</span><span class=\"o\">.</span><span class=\"n\">gamma_list</span> <span class=\"o\">=</span> <span class=\"n\">qgamma_cacher</span><span class=\"o\">.</span><span class=\"n\">ensure</span><span class=\"p\">(</span>\n            <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">qinva</span><span class=\"o\">.</span><span class=\"n\">compute_gammas</span><span class=\"p\">(</span><span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">thresh</span><span class=\"p\">))</span>\n\n        <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">qinva</span> <span class=\"o\">=</span> <span class=\"n\">qinva</span>\n        <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">dinva</span> <span class=\"o\">=</span> <span class=\"n\">dinva</span>\n\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;loading keypoints&#39;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">qparams</span><span class=\"o\">.</span><span class=\"n\">sv_on</span><span class=\"p\">:</span>\n            <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">data_kpts</span> <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_kpts</span><span class=\"p\">(</span>\n                <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">daids</span><span class=\"p\">,</span> <span class=\"n\">config2_</span><span class=\"o\">=</span><span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">extern_data_config2</span><span class=\"p\">)</span>\n\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;building aid index&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">daid_to_didx</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">make_index_lookup</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">daids</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"SMKRequest.execute_pipeline\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.smk/#ibeis.algo.smk.smk_pipeline.SMKRequest.execute_pipeline\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">execute_pipeline</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.algo.smk.smk_pipeline import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs, smk, qreq_ = testdata_smk()</span>\n<span class=\"sd\">        &gt;&gt;&gt; cm_list = qreq_.execute()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">smk</span> <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">smk</span>\n        <span class=\"n\">cm_list</span> <span class=\"o\">=</span> <span class=\"n\">smk</span><span class=\"o\">.</span><span class=\"n\">predict_matches</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">cm_list</span></div>\n\n<div class=\"viewcode-block\" id=\"SMKRequest.get_qreq_qannot_kpts\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.smk/#ibeis.algo.smk.smk_pipeline.SMKRequest.get_qreq_qannot_kpts\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_qreq_qannot_kpts</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"p\">,</span> <span class=\"n\">qaids</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_kpts</span><span class=\"p\">(</span>\n            <span class=\"n\">qaids</span><span class=\"p\">,</span> <span class=\"n\">config2_</span><span class=\"o\">=</span><span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">extern_query_config2</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"SMKRequest.get_qreq_dannot_kpts\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.smk/#ibeis.algo.smk.smk_pipeline.SMKRequest.get_qreq_dannot_kpts\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_qreq_dannot_kpts</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"p\">,</span> <span class=\"n\">daids</span><span class=\"p\">):</span>\n        <span class=\"n\">didx_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">daid_to_didx</span><span class=\"p\">,</span> <span class=\"n\">daids</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">data_kpts</span><span class=\"p\">,</span> <span class=\"n\">didx_list</span><span class=\"p\">)</span></div></div>\n        <span class=\"c1\">#return qreq_.ibs.get_annot_kpts(</span>\n        <span class=\"c1\">#    daids, config2_=qreq_.extern_data_config2)</span>\n\n\n<div class=\"viewcode-block\" id=\"SMK\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.smk/#ibeis.algo.smk.smk_pipeline.SMK\">[docs]</a><span class=\"nd\">@ut</span><span class=\"o\">.</span><span class=\"n\">reloadable_class</span>\n<span class=\"k\">class</span> <span class=\"nc\">SMK</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">NiceRepr</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Harness class that controls the execution of the SMK algorithm</span>\n\n<span class=\"sd\">    K(X, Y) = gamma(X) * gamma(Y) * sum([Mc(Xc, Yc) for c in words])</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n<div class=\"viewcode-block\" id=\"SMK.predict_matches\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.smk/#ibeis.algo.smk.smk_pipeline.SMK.predict_matches\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">predict_matches</span><span class=\"p\">(</span><span class=\"n\">smk</span><span class=\"p\">,</span> <span class=\"n\">qreq_</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.algo.smk.smk_pipeline import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs, smk, qreq_ = testdata_smk()</span>\n<span class=\"sd\">        &gt;&gt;&gt; verbose = True</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Predicting matches&#39;</span><span class=\"p\">)</span>\n        <span class=\"c1\">#assert qreq_.qinva.vocab is qreq_.dinva.vocab</span>\n        <span class=\"c1\">#X_list = qreq_.qinva.inverted_annots(qreq_.qaids)</span>\n        <span class=\"c1\">#Y_list = qreq_.dinva.inverted_annots(qreq_.daids)</span>\n        <span class=\"c1\">#verbose = 2</span>\n        <span class=\"n\">_prog</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ProgPartial</span><span class=\"p\">(</span><span class=\"n\">lbl</span><span class=\"o\">=</span><span class=\"s1\">&#39;smk query&#39;</span><span class=\"p\">,</span> <span class=\"n\">bs</span><span class=\"o\">=</span><span class=\"n\">verbose</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">enabled</span><span class=\"o\">=</span><span class=\"n\">verbose</span><span class=\"p\">)</span>\n        <span class=\"n\">daids</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">daids</span><span class=\"p\">)</span>\n        <span class=\"n\">cm_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">smk</span><span class=\"o\">.</span><span class=\"n\">match_single</span><span class=\"p\">(</span><span class=\"n\">qaid</span><span class=\"p\">,</span> <span class=\"n\">daids</span><span class=\"p\">,</span> <span class=\"n\">qreq_</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">verbose</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n                   <span class=\"k\">for</span> <span class=\"n\">qaid</span> <span class=\"ow\">in</span> <span class=\"n\">_prog</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">qaids</span><span class=\"p\">)]</span>\n        <span class=\"k\">return</span> <span class=\"n\">cm_list</span></div>\n\n<div class=\"viewcode-block\" id=\"SMK.match_single\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.smk/#ibeis.algo.smk.smk_pipeline.SMK.match_single\">[docs]</a>    <span class=\"nd\">@profile</span>\n    <span class=\"k\">def</span> <span class=\"nf\">match_single</span><span class=\"p\">(</span><span class=\"n\">smk</span><span class=\"p\">,</span> <span class=\"n\">qaid</span><span class=\"p\">,</span> <span class=\"n\">daids</span><span class=\"p\">,</span> <span class=\"n\">qreq_</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        CommandLine:</span>\n<span class=\"sd\">            python -m ibeis.algo.smk.smk_pipeline SMK.match_single --profile</span>\n<span class=\"sd\">            python -m ibeis.algo.smk.smk_pipeline SMK.match_single --show</span>\n\n<span class=\"sd\">            python -m ibeis SMK.match_single -a ctrl:qmingt=2 --profile --db PZ_Master1</span>\n<span class=\"sd\">            python -m ibeis SMK.match_single -a ctrl --profile --db GZ_ALL</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; # FUTURE_ENABLE</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.algo.smk.smk_pipeline import *  # NOQA</span>\n<span class=\"sd\">            &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">            &gt;&gt;&gt; qreq_ = ibeis.testdata_qreq_(defaultdb=&#39;PZ_MTEST&#39;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; ibs = qreq_.ibs</span>\n<span class=\"sd\">            &gt;&gt;&gt; daids = qreq_.daids</span>\n<span class=\"sd\">            &gt;&gt;&gt; #ibs, daids = ibeis.testdata_aids(defaultdb=&#39;PZ_MTEST&#39;, default_set=&#39;dcfg&#39;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; qreq_ = SMKRequest(ibs, daids[0:1], daids, {&#39;agg&#39;: True,</span>\n<span class=\"sd\">            &gt;&gt;&gt;                                             &#39;num_words&#39;: 1000,</span>\n<span class=\"sd\">            &gt;&gt;&gt;                                             &#39;sv_on&#39;: True})</span>\n<span class=\"sd\">            &gt;&gt;&gt; qreq_.ensure_data()</span>\n<span class=\"sd\">            &gt;&gt;&gt; qaid = qreq_.qaids[0]</span>\n<span class=\"sd\">            &gt;&gt;&gt; daids = qreq_.daids</span>\n<span class=\"sd\">            &gt;&gt;&gt; daid = daids[1]</span>\n<span class=\"sd\">            &gt;&gt;&gt; verbose = True</span>\n<span class=\"sd\">            &gt;&gt;&gt; cm = qreq_.smk.match_single(qaid, daids, qreq_)</span>\n<span class=\"sd\">            &gt;&gt;&gt; ut.quit_if_noshow()</span>\n<span class=\"sd\">            &gt;&gt;&gt; ut.qtensure()</span>\n<span class=\"sd\">            &gt;&gt;&gt; cm.ishow_analysis(qreq_)</span>\n<span class=\"sd\">            &gt;&gt;&gt; ut.show_if_requested()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.hots</span> <span class=\"k\">import</span> <span class=\"n\">chip_match</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.hots</span> <span class=\"k\">import</span> <span class=\"n\">pipeline</span>\n\n        <span class=\"n\">alpha</span>  <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">qparams</span><span class=\"p\">[</span><span class=\"s1\">&#39;smk_alpha&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">thresh</span> <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">qparams</span><span class=\"p\">[</span><span class=\"s1\">&#39;smk_thresh&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">agg</span>    <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">qparams</span><span class=\"p\">[</span><span class=\"s1\">&#39;agg&#39;</span><span class=\"p\">]</span>\n        <span class=\"c1\">#nAnnotPerName   = qreq_.qparams.nAnnotPerNameSVER</span>\n\n        <span class=\"n\">sv_on</span>   <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">qparams</span><span class=\"o\">.</span><span class=\"n\">sv_on</span>\n        <span class=\"k\">if</span> <span class=\"n\">sv_on</span><span class=\"p\">:</span>\n            <span class=\"n\">nNameShortList</span>  <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">qparams</span><span class=\"o\">.</span><span class=\"n\">nNameShortlistSVER</span>\n            <span class=\"n\">shortsize</span> <span class=\"o\">=</span> <span class=\"n\">nNameShortList</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">shortsize</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n        <span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">qinva</span><span class=\"o\">.</span><span class=\"n\">get_annot</span><span class=\"p\">(</span><span class=\"n\">qaid</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Determine which database annotations need to be checked</span>\n        <span class=\"c1\">#with ut.Timer(&#39;searching qaid=%r&#39; % (qaid,), verbose=verbose):</span>\n        <span class=\"n\">hit_inva_wxs</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">dinva</span><span class=\"o\">.</span><span class=\"n\">wx_to_aids</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">wx_list</span><span class=\"p\">)</span>\n        <span class=\"n\">hit_daids</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">iflatten</span><span class=\"p\">(</span><span class=\"n\">hit_inva_wxs</span><span class=\"p\">))))</span>\n\n        <span class=\"c1\"># Mark impossible daids</span>\n        <span class=\"c1\">#with ut.Timer(&#39;checking impossible daids=%r&#39; % (qaid,), verbose=verbose):</span>\n        <span class=\"n\">valid_flags</span> <span class=\"o\">=</span> <span class=\"n\">check_can_match</span><span class=\"p\">(</span><span class=\"n\">qaid</span><span class=\"p\">,</span> <span class=\"n\">hit_daids</span><span class=\"p\">,</span> <span class=\"n\">qreq_</span><span class=\"p\">)</span>\n        <span class=\"n\">valid_daids</span> <span class=\"o\">=</span> <span class=\"n\">hit_daids</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">valid_flags</span><span class=\"p\">)</span>\n\n        <span class=\"n\">shortlist</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">Shortlist</span><span class=\"p\">(</span><span class=\"n\">shortsize</span><span class=\"p\">)</span>\n        <span class=\"c1\">#gammaX = smk.gamma(X, wx_to_weight, agg, alpha, thresh)</span>\n        <span class=\"n\">_prog</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ProgPartial</span><span class=\"p\">(</span><span class=\"n\">lbl</span><span class=\"o\">=</span><span class=\"s1\">&#39;smk scoring qaid=</span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">qaid</span><span class=\"p\">,),</span>\n                               <span class=\"n\">enabled</span><span class=\"o\">=</span><span class=\"n\">verbose</span><span class=\"p\">,</span> <span class=\"n\">bs</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">adjust</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n        <span class=\"n\">wx_to_weight</span> <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">dinva</span><span class=\"o\">.</span><span class=\"n\">wx_to_weight</span>\n\n        <span class=\"n\">debug</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"k\">if</span> <span class=\"n\">debug</span><span class=\"p\">:</span>\n            <span class=\"n\">qnid</span> <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">get_qreq_annot_nids</span><span class=\"p\">([</span><span class=\"n\">qaid</span><span class=\"p\">])[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"n\">daids</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">daids</span><span class=\"p\">)</span>\n            <span class=\"n\">dnids</span> <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">get_qreq_annot_nids</span><span class=\"p\">(</span><span class=\"n\">daids</span><span class=\"p\">)</span>\n            <span class=\"n\">correct_aids</span> <span class=\"o\">=</span> <span class=\"n\">daids</span><span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">dnids</span> <span class=\"o\">==</span> <span class=\"n\">qnid</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]]</span>\n            <span class=\"n\">daid</span> <span class=\"o\">=</span> <span class=\"n\">correct_aids</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">agg</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">daid</span> <span class=\"ow\">in</span> <span class=\"n\">_prog</span><span class=\"p\">(</span><span class=\"n\">valid_daids</span><span class=\"p\">):</span>\n                <span class=\"n\">Y</span> <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">dinva</span><span class=\"o\">.</span><span class=\"n\">get_annot</span><span class=\"p\">(</span><span class=\"n\">daid</span><span class=\"p\">)</span>\n                <span class=\"n\">item</span> <span class=\"o\">=</span> <span class=\"n\">match_kernel_agg</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">wx_to_weight</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">thresh</span><span class=\"p\">)</span>\n                <span class=\"n\">shortlist</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">daid</span> <span class=\"ow\">in</span> <span class=\"n\">_prog</span><span class=\"p\">(</span><span class=\"n\">valid_daids</span><span class=\"p\">):</span>\n                <span class=\"n\">Y</span> <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">dinva</span><span class=\"o\">.</span><span class=\"n\">get_annot</span><span class=\"p\">(</span><span class=\"n\">daid</span><span class=\"p\">)</span>\n                <span class=\"n\">item</span> <span class=\"o\">=</span> <span class=\"n\">match_kernel_sep</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">wx_to_weight</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">thresh</span><span class=\"p\">)</span>\n                <span class=\"n\">shortlist</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Build chipmatches for the shortlist results</span>\n\n        <span class=\"c1\">#with ut.Timer(&#39;build cms&#39;, verbose=verbose):</span>\n        <span class=\"n\">cm</span> <span class=\"o\">=</span> <span class=\"n\">chip_match</span><span class=\"o\">.</span><span class=\"n\">ChipMatch</span><span class=\"p\">(</span><span class=\"n\">qaid</span><span class=\"o\">=</span><span class=\"n\">qaid</span><span class=\"p\">,</span> <span class=\"n\">fsv_col_lbls</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;smk&#39;</span><span class=\"p\">])</span>\n        <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">daid_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">fm_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">fsv_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">_prog</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ProgPartial</span><span class=\"p\">(</span><span class=\"n\">lbl</span><span class=\"o\">=</span><span class=\"s1\">&#39;smk build cm qaid=</span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">qaid</span><span class=\"p\">,),</span>\n                               <span class=\"n\">enabled</span><span class=\"o\">=</span><span class=\"n\">verbose</span><span class=\"p\">,</span> <span class=\"n\">bs</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">adjust</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">_prog</span><span class=\"p\">(</span><span class=\"n\">shortlist</span><span class=\"p\">):</span>\n            <span class=\"p\">(</span><span class=\"n\">score</span><span class=\"p\">,</span> <span class=\"n\">score_list</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">X_idx</span><span class=\"p\">,</span> <span class=\"n\">Y_idx</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">item</span>\n            <span class=\"n\">X_fxs</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">fxs_list</span><span class=\"p\">,</span> <span class=\"n\">X_idx</span><span class=\"p\">)</span>\n            <span class=\"n\">Y_fxs</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">Y</span><span class=\"o\">.</span><span class=\"n\">fxs_list</span><span class=\"p\">,</span> <span class=\"n\">Y_idx</span><span class=\"p\">)</span>\n            <span class=\"c1\"># Only build matches for those that sver will use</span>\n            <span class=\"k\">if</span> <span class=\"n\">agg</span><span class=\"p\">:</span>\n                <span class=\"n\">X_maws</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">maws_list</span><span class=\"p\">,</span> <span class=\"n\">X_idx</span><span class=\"p\">)</span>\n                <span class=\"n\">Y_maws</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">Y</span><span class=\"o\">.</span><span class=\"n\">maws_list</span><span class=\"p\">,</span> <span class=\"n\">Y_idx</span><span class=\"p\">)</span>\n                <span class=\"n\">fm</span><span class=\"p\">,</span> <span class=\"n\">fs</span> <span class=\"o\">=</span> <span class=\"n\">smk_funcs</span><span class=\"o\">.</span><span class=\"n\">build_matches_agg</span><span class=\"p\">(</span><span class=\"n\">X_fxs</span><span class=\"p\">,</span> <span class=\"n\">Y_fxs</span><span class=\"p\">,</span> <span class=\"n\">X_maws</span><span class=\"p\">,</span>\n                                                     <span class=\"n\">Y_maws</span><span class=\"p\">,</span> <span class=\"n\">score_list</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">fm</span><span class=\"p\">,</span> <span class=\"n\">fs</span> <span class=\"o\">=</span> <span class=\"n\">smk_funcs</span><span class=\"o\">.</span><span class=\"n\">build_matches_sep</span><span class=\"p\">(</span><span class=\"n\">X_fxs</span><span class=\"p\">,</span> <span class=\"n\">Y_fxs</span><span class=\"p\">,</span> <span class=\"n\">score_list</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">fm</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"c1\">#assert not np.any(np.isnan(fs))</span>\n                <span class=\"n\">daid</span> <span class=\"o\">=</span> <span class=\"n\">Y</span><span class=\"o\">.</span><span class=\"n\">aid</span>\n                <span class=\"n\">fsv</span> <span class=\"o\">=</span> <span class=\"n\">fs</span><span class=\"p\">[:,</span> <span class=\"kc\">None</span><span class=\"p\">]</span>\n                <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">daid_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">daid</span><span class=\"p\">)</span>\n                <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">fm_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">fm</span><span class=\"p\">)</span>\n                <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">fsv_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">fsv</span><span class=\"p\">)</span>\n        <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">_update_daid_index</span><span class=\"p\">()</span>\n        <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">arraycast_self</span><span class=\"p\">()</span>\n        <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">score_name_maxcsum</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"p\">)</span>\n\n        <span class=\"c1\">#if False:</span>\n        <span class=\"c1\">#    cm.assert_self(qreq_=qreq_, verbose=True)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">sv_on</span><span class=\"p\">:</span>\n            <span class=\"n\">cm</span> <span class=\"o\">=</span> <span class=\"n\">pipeline</span><span class=\"o\">.</span><span class=\"n\">sver_single_chipmatch</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"p\">,</span> <span class=\"n\">cm</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">verbose</span><span class=\"p\">)</span>\n            <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">score_name_maxcsum</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">cm</span></div></div>\n\n\n<div class=\"viewcode-block\" id=\"word_isect\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.smk/#ibeis.algo.smk.smk_pipeline.word_isect\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">word_isect</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">wx_to_weight</span><span class=\"p\">):</span>\n    <span class=\"n\">isect_words</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">words</span><span class=\"o\">.</span><span class=\"n\">intersection</span><span class=\"p\">(</span><span class=\"n\">Y</span><span class=\"o\">.</span><span class=\"n\">words</span><span class=\"p\">))</span>\n    <span class=\"n\">X_idx</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">wx_to_idx</span><span class=\"p\">,</span> <span class=\"n\">isect_words</span><span class=\"p\">)</span>\n    <span class=\"n\">Y_idx</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">Y</span><span class=\"o\">.</span><span class=\"n\">wx_to_idx</span><span class=\"p\">,</span> <span class=\"n\">isect_words</span><span class=\"p\">)</span>\n    <span class=\"n\">weights</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">wx_to_weight</span><span class=\"p\">,</span> <span class=\"n\">isect_words</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">X_idx</span><span class=\"p\">,</span> <span class=\"n\">Y_idx</span><span class=\"p\">,</span> <span class=\"n\">weights</span></div>\n\n\n<div class=\"viewcode-block\" id=\"match_kernel_agg\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.smk/#ibeis.algo.smk.smk_pipeline.match_kernel_agg\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">match_kernel_agg</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">wx_to_weight</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">thresh</span><span class=\"p\">):</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">utool</span>\n    <span class=\"k\">with</span> <span class=\"n\">utool</span><span class=\"o\">.</span><span class=\"n\">embed_on_exception_context</span><span class=\"p\">:</span>\n        <span class=\"n\">gammaXY</span> <span class=\"o\">=</span> <span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">gamma</span> <span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"o\">.</span><span class=\"n\">gamma</span>\n        <span class=\"c1\"># Words in common define matches</span>\n        <span class=\"n\">X_idx</span><span class=\"p\">,</span> <span class=\"n\">Y_idx</span><span class=\"p\">,</span> <span class=\"n\">weights</span> <span class=\"o\">=</span> <span class=\"n\">word_isect</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">wx_to_weight</span><span class=\"p\">)</span>\n\n        <span class=\"n\">PhisX</span><span class=\"p\">,</span> <span class=\"n\">flagsX</span> <span class=\"o\">=</span> <span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">Phis_flags</span><span class=\"p\">(</span><span class=\"n\">X_idx</span><span class=\"p\">)</span>\n        <span class=\"n\">PhisY</span><span class=\"p\">,</span> <span class=\"n\">flagsY</span> <span class=\"o\">=</span> <span class=\"n\">Y</span><span class=\"o\">.</span><span class=\"n\">Phis_flags</span><span class=\"p\">(</span><span class=\"n\">Y_idx</span><span class=\"p\">)</span>\n        <span class=\"n\">score_list</span> <span class=\"o\">=</span> <span class=\"n\">smk_funcs</span><span class=\"o\">.</span><span class=\"n\">match_scores_agg</span><span class=\"p\">(</span>\n            <span class=\"n\">PhisX</span><span class=\"p\">,</span> <span class=\"n\">PhisY</span><span class=\"p\">,</span> <span class=\"n\">flagsX</span><span class=\"p\">,</span> <span class=\"n\">flagsY</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">thresh</span><span class=\"p\">)</span>\n\n        <span class=\"n\">norm_weights</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">weights</span> <span class=\"o\">*</span> <span class=\"n\">gammaXY</span><span class=\"p\">)</span>\n        <span class=\"n\">score_list</span> <span class=\"o\">*=</span> <span class=\"n\">norm_weights</span>\n        <span class=\"n\">score</span> <span class=\"o\">=</span> <span class=\"n\">score_list</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span>\n        <span class=\"n\">item</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">score</span><span class=\"p\">,</span> <span class=\"n\">score_list</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">X_idx</span><span class=\"p\">,</span> <span class=\"n\">Y_idx</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">item</span></div>\n\n\n<div class=\"viewcode-block\" id=\"match_kernel_sep\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.smk/#ibeis.algo.smk.smk_pipeline.match_kernel_sep\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">match_kernel_sep</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">wx_to_weight</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">thresh</span><span class=\"p\">):</span>\n    <span class=\"n\">gammaXY</span> <span class=\"o\">=</span> <span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">gamma</span> <span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"o\">.</span><span class=\"n\">gamma</span>\n    <span class=\"c1\"># Words in common define matches</span>\n    <span class=\"n\">X_idx</span><span class=\"p\">,</span> <span class=\"n\">Y_idx</span><span class=\"p\">,</span> <span class=\"n\">weights</span> <span class=\"o\">=</span> <span class=\"n\">word_isect</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">wx_to_weight</span><span class=\"p\">)</span>\n\n    <span class=\"n\">phisX_list</span><span class=\"p\">,</span> <span class=\"n\">flagsY_list</span> <span class=\"o\">=</span> <span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">phis_flags_list</span><span class=\"p\">(</span><span class=\"n\">X_idx</span><span class=\"p\">)</span>\n    <span class=\"n\">phisY_list</span><span class=\"p\">,</span> <span class=\"n\">flagsX_list</span> <span class=\"o\">=</span> <span class=\"n\">Y</span><span class=\"o\">.</span><span class=\"n\">phis_flags_list</span><span class=\"p\">(</span><span class=\"n\">Y_idx</span><span class=\"p\">)</span>\n    <span class=\"n\">scores_list</span> <span class=\"o\">=</span> <span class=\"n\">smk_funcs</span><span class=\"o\">.</span><span class=\"n\">match_scores_sep</span><span class=\"p\">(</span>\n        <span class=\"n\">phisX_list</span><span class=\"p\">,</span> <span class=\"n\">phisY_list</span><span class=\"p\">,</span> <span class=\"n\">flagsX_list</span><span class=\"p\">,</span> <span class=\"n\">flagsY_list</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"p\">,</span>\n        <span class=\"n\">thresh</span><span class=\"p\">)</span>\n\n    <span class=\"n\">norm_weights</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">weights</span> <span class=\"o\">*</span> <span class=\"n\">gammaXY</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">scores</span><span class=\"p\">,</span> <span class=\"n\">w</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">scores_list</span><span class=\"p\">,</span> <span class=\"n\">norm_weights</span><span class=\"p\">):</span>\n        <span class=\"n\">scores</span> <span class=\"o\">*=</span> <span class=\"n\">w</span>\n\n    <span class=\"n\">score</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">s</span> <span class=\"ow\">in</span> <span class=\"n\">scores_list</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span>\n    <span class=\"n\">item</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">score</span><span class=\"p\">,</span> <span class=\"n\">scores_list</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">X_idx</span><span class=\"p\">,</span> <span class=\"n\">Y_idx</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">item</span></div>\n\n\n<div class=\"viewcode-block\" id=\"check_can_match\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.smk/#ibeis.algo.smk.smk_pipeline.check_can_match\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">check_can_match</span><span class=\"p\">(</span><span class=\"n\">qaid</span><span class=\"p\">,</span> <span class=\"n\">hit_daids</span><span class=\"p\">,</span> <span class=\"n\">qreq_</span><span class=\"p\">):</span>\n    <span class=\"n\">can_match_samename</span> <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">qparams</span><span class=\"o\">.</span><span class=\"n\">can_match_samename</span>\n    <span class=\"n\">can_match_sameimg</span> <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">qparams</span><span class=\"o\">.</span><span class=\"n\">can_match_sameimg</span>\n    <span class=\"n\">can_match_self</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n    <span class=\"n\">valid_flags</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">hit_daids</span><span class=\"p\">),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">bool</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Check that the two annots meet the conditions</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">can_match_self</span><span class=\"p\">:</span>\n        <span class=\"n\">valid_flags</span><span class=\"p\">[</span><span class=\"n\">hit_daids</span> <span class=\"o\">==</span> <span class=\"n\">qaid</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">can_match_samename</span><span class=\"p\">:</span>\n        <span class=\"n\">qnid</span> <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">get_qreq_annot_nids</span><span class=\"p\">([</span><span class=\"n\">qaid</span><span class=\"p\">])[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">hit_dnids</span> <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">get_qreq_annot_nids</span><span class=\"p\">(</span><span class=\"n\">hit_daids</span><span class=\"p\">)</span>\n        <span class=\"n\">valid_flags</span><span class=\"p\">[</span><span class=\"n\">hit_dnids</span> <span class=\"o\">==</span> <span class=\"n\">qnid</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">can_match_sameimg</span><span class=\"p\">:</span>\n        <span class=\"n\">qgid</span> <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">get_qreq_annot_gids</span><span class=\"p\">([</span><span class=\"n\">qaid</span><span class=\"p\">])[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">hit_dgids</span> <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">get_qreq_annot_gids</span><span class=\"p\">(</span><span class=\"n\">hit_daids</span><span class=\"p\">)</span>\n        <span class=\"n\">valid_flags</span><span class=\"p\">[</span><span class=\"n\">hit_dgids</span> <span class=\"o\">==</span> <span class=\"n\">qgid</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n    <span class=\"k\">return</span> <span class=\"n\">valid_flags</span></div>\n\n\n<div class=\"viewcode-block\" id=\"testdata_smk\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.smk/#ibeis.algo.smk.smk_pipeline.testdata_smk\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">testdata_smk</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    &gt;&gt;&gt; from ibeis.algo.smk.smk_pipeline import *  # NOQA</span>\n<span class=\"sd\">    &gt;&gt;&gt; kwargs = {}</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">ibeis</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">sklearn</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">sklearn.cross_validation</span>\n    <span class=\"c1\"># import sklearn.model_selection</span>\n    <span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">testdata_aids</span><span class=\"p\">(</span><span class=\"n\">defaultdb</span><span class=\"o\">=</span><span class=\"s1\">&#39;PZ_MTEST&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">nid_list</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">annots</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">nids</span><span class=\"p\">)</span>\n    <span class=\"n\">rng</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ensure_rng</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">xvalkw</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">n_folds</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">shuffle</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"n\">rng</span><span class=\"p\">)</span>\n\n    <span class=\"n\">skf</span> <span class=\"o\">=</span> <span class=\"n\">sklearn</span><span class=\"o\">.</span><span class=\"n\">cross_validation</span><span class=\"o\">.</span><span class=\"n\">StratifiedKFold</span><span class=\"p\">(</span><span class=\"n\">nid_list</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">xvalkw</span><span class=\"p\">)</span>\n    <span class=\"n\">train_idx</span><span class=\"p\">,</span> <span class=\"n\">test_idx</span> <span class=\"o\">=</span> <span class=\"n\">six</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">(</span><span class=\"nb\">iter</span><span class=\"p\">(</span><span class=\"n\">skf</span><span class=\"p\">))</span>\n    <span class=\"n\">daids</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">train_idx</span><span class=\"p\">)</span>\n    <span class=\"n\">qaids</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">test_idx</span><span class=\"p\">)</span>\n\n    <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">&#39;num_words&#39;</span><span class=\"p\">:</span> <span class=\"mi\">1000</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    <span class=\"n\">qreq_</span> <span class=\"o\">=</span> <span class=\"n\">SMKRequest</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">qaids</span><span class=\"p\">,</span> <span class=\"n\">daids</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">)</span>\n    <span class=\"n\">smk</span> <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">smk</span>\n    <span class=\"c1\">#qreq_ = ibs.new_query_request(qaids, daids, cfgdict={&#39;pipeline_root&#39;: &#39;smk&#39;, &#39;proot&#39;: &#39;smk&#39;})</span>\n    <span class=\"c1\">#qreq_ = ibs.new_query_request(qaids, daids, cfgdict={})</span>\n    <span class=\"k\">return</span> <span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">smk</span><span class=\"p\">,</span> <span class=\"n\">qreq_</span></div>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        export PYTHONPATH=$PYTHONPATH:/home/joncrall/code/ibeis/ibeis/algo/smk</span>\n<span class=\"sd\">        python ~/code/ibeis/ibeis/algo/smk/smk_pipeline.py</span>\n<span class=\"sd\">        python ~/code/ibeis/ibeis/algo/smk/smk_pipeline.py --allexamples</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">multiprocessing</span>\n    <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">freeze_support</span><span class=\"p\">()</span>  <span class=\"c1\"># for win32</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>  <span class=\"c1\"># NOQA</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">doctest_funcs</span><span class=\"p\">()</span>\n</pre></div>", "current_page_name": "_modules/ibeis/algo/smk/smk_pipeline", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}