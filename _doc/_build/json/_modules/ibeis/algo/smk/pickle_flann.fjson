{"parents": [{"link": "../../../../", "title": "Module code"}, {"link": "../../../", "title": "ibeis"}, {"link": "../../", "title": "ibeis.algo"}, {"link": "../", "title": "ibeis.algo.smk"}], "title": "ibeis.algo.smk.pickle_flann", "body": "<h1>Source code for ibeis.algo.smk.pickle_flann</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"k\">import</span> <span class=\"n\">absolute_import</span><span class=\"p\">,</span> <span class=\"n\">division</span><span class=\"p\">,</span> <span class=\"n\">print_function</span><span class=\"p\">,</span> <span class=\"n\">unicode_literals</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pyflann</span>\n<span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n<span class=\"kn\">import</span> <span class=\"nn\">uuid</span>\n<span class=\"kn\">import</span> <span class=\"nn\">six</span>\n<span class=\"kn\">from</span> <span class=\"nn\">os.path</span> <span class=\"k\">import</span> <span class=\"n\">exists</span><span class=\"p\">,</span> <span class=\"n\">join</span>\n<span class=\"kn\">import</span> <span class=\"nn\">lockfile</span>\n<span class=\"p\">(</span><span class=\"nb\">print</span><span class=\"p\">,</span> <span class=\"n\">rrr</span><span class=\"p\">,</span> <span class=\"n\">profile</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">inject2</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"Win32CompatTempFile\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.smk/#ibeis.algo.smk.pickle_flann.Win32CompatTempFile\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Win32CompatTempFile</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    mimics tempfile.NamedTemporaryFile but allows the file to be closed without</span>\n<span class=\"sd\">    being deleted.  This lets a second process (like the FLANN) read/write to</span>\n<span class=\"sd\">    the file in a win32 system. The file is instead deleted after the</span>\n<span class=\"sd\">    Win32CompatTempFile object goes out of scope.</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.algo.smk.pickle_flann import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; verbose = True</span>\n<span class=\"sd\">        &gt;&gt;&gt; temp = Win32CompatTempFile(verbose=verbose)</span>\n<span class=\"sd\">        &gt;&gt;&gt; data = six.b(str(&#39;10010&#39;))</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&#39;data = %r&#39; % (data,))</span>\n<span class=\"sd\">        &gt;&gt;&gt; data1 = temp.read()</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&#39;data1 = %r&#39; % (data1,))</span>\n<span class=\"sd\">        &gt;&gt;&gt; temp.write(data)</span>\n<span class=\"sd\">        &gt;&gt;&gt; data2 = temp.read()</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&#39;data2 = %r&#39; % (data2,))</span>\n<span class=\"sd\">        &gt;&gt;&gt; temp.close()</span>\n<span class=\"sd\">        &gt;&gt;&gt; assert data != data1</span>\n<span class=\"sd\">        &gt;&gt;&gt; assert data == data2</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.assert_raises(ValueError, temp.close)</span>\n<span class=\"sd\">        &gt;&gt;&gt; assert not ut.checkpath(temp.fpath, verbose=verbose)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">temp</span><span class=\"p\">,</span> <span class=\"n\">delete</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"n\">delete</span> <span class=\"o\">=</span> <span class=\"n\">delete</span>\n        <span class=\"n\">appname</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;ibeis&#39;</span>\n        <span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"n\">dpath</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ensure_app_resource_dir</span><span class=\"p\">(</span><span class=\"n\">appname</span><span class=\"p\">,</span> <span class=\"s1\">&#39;tempfiles&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"n\">fpath</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"n\">fname</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"n\">_isclosed</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"n\">verbose</span> <span class=\"o\">=</span> <span class=\"n\">verbose</span>\n        <span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"n\">_create_unique_file</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"n\">temp</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"n\">fpath</span>\n\n<div class=\"viewcode-block\" id=\"Win32CompatTempFile.read\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.smk/#ibeis.algo.smk.pickle_flann.Win32CompatTempFile.read\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">read</span><span class=\"p\">(</span><span class=\"n\">temp</span><span class=\"p\">):</span>\n        <span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"n\">_check_open</span><span class=\"p\">()</span>\n        <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"n\">fpath</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rb&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">file_</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">file_</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span></div>\n\n<div class=\"viewcode-block\" id=\"Win32CompatTempFile.write\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.smk/#ibeis.algo.smk.pickle_flann.Win32CompatTempFile.write\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"n\">temp</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n        <span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"n\">_check_open</span><span class=\"p\">()</span>\n        <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"n\">fpath</span><span class=\"p\">,</span> <span class=\"s1\">&#39;wb&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">file_</span><span class=\"p\">:</span>\n            <span class=\"n\">file_</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n            <span class=\"n\">file_</span><span class=\"o\">.</span><span class=\"n\">flush</span><span class=\"p\">()</span></div>\n\n<div class=\"viewcode-block\" id=\"Win32CompatTempFile.close\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.smk/#ibeis.algo.smk.pickle_flann.Win32CompatTempFile.close\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">close</span><span class=\"p\">(</span><span class=\"n\">temp</span><span class=\"p\">):</span>\n        <span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"n\">_check_open</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"n\">delete</span> <span class=\"ow\">and</span> <span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"n\">fpath</span><span class=\"p\">):</span>\n            <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"n\">fpath</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"n\">verbose</span><span class=\"p\">)</span>\n        <span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"n\">_isclosed</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_create_unique_file</span><span class=\"p\">(</span><span class=\"n\">temp</span><span class=\"p\">):</span>\n        <span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"n\">_check_open</span><span class=\"p\">()</span>\n        <span class=\"k\">with</span> <span class=\"n\">lockfile</span><span class=\"o\">.</span><span class=\"n\">LockFile</span><span class=\"p\">(</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"n\">dpath</span><span class=\"p\">,</span> <span class=\"s1\">&#39;tempfile.lock&#39;</span><span class=\"p\">)):</span>\n            <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"k\">while</span> <span class=\"n\">flag</span> <span class=\"ow\">or</span> <span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"n\">fpath</span><span class=\"p\">):</span>\n                <span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"n\">fname</span> <span class=\"o\">=</span> <span class=\"n\">six</span><span class=\"o\">.</span><span class=\"n\">text_type</span><span class=\"p\">(</span><span class=\"n\">uuid</span><span class=\"o\">.</span><span class=\"n\">uuid4</span><span class=\"p\">())</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;.temp&#39;</span>\n                <span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"n\">fpath</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"n\">dpath</span><span class=\"p\">,</span> <span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"n\">fname</span><span class=\"p\">)</span>\n                <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n            <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">touch</span><span class=\"p\">(</span><span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"n\">fpath</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"n\">verbose</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_check_open</span><span class=\"p\">(</span><span class=\"n\">temp</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"n\">_isclosed</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s1\">&#39;I/O operation on closed object&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__del__</span><span class=\"p\">(</span><span class=\"n\">temp</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"n\">_isclosed</span><span class=\"p\">:</span>\n            <span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span></div>\n\n\n<div class=\"viewcode-block\" id=\"PickleFLANN\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.smk/#ibeis.algo.smk.pickle_flann.PickleFLANN\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">PickleFLANN</span><span class=\"p\">(</span><span class=\"n\">pyflann</span><span class=\"o\">.</span><span class=\"n\">FLANN</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Adds the ability to pickle a flann class on a unix system.</span>\n<span class=\"sd\">    (Actually, pickle still wont work because we need the original point data.</span>\n<span class=\"sd\">    But we can do a custom dumps and a loads)</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.algo.smk.pickle_flann PickleFLANN</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.algo.smk.pickle_flann import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import numpy as np</span>\n<span class=\"sd\">        &gt;&gt;&gt; rng = np.random.RandomState(42)</span>\n<span class=\"sd\">        &gt;&gt;&gt; data = rng.rand(10, 2)</span>\n<span class=\"sd\">        &gt;&gt;&gt; query = rng.rand(5, 2)</span>\n<span class=\"sd\">        &gt;&gt;&gt; flann = PickleFLANN()</span>\n<span class=\"sd\">        &gt;&gt;&gt; flann.build_index(data, random_seed=42)</span>\n<span class=\"sd\">        &gt;&gt;&gt; index_bytes = flann.dumps()</span>\n<span class=\"sd\">        &gt;&gt;&gt; flann2 = PickleFLANN()</span>\n<span class=\"sd\">        &gt;&gt;&gt; flann2.loads(index_bytes, data)</span>\n<span class=\"sd\">        &gt;&gt;&gt; assert flann2 is not flann</span>\n<span class=\"sd\">        &gt;&gt;&gt; assert flann2.dumps() == index_bytes</span>\n<span class=\"sd\">        &gt;&gt;&gt; idx1 = flann.nn_index(query)[0]</span>\n<span class=\"sd\">        &gt;&gt;&gt; idx2 = flann2.nn_index(query)[0]</span>\n<span class=\"sd\">        &gt;&gt;&gt; assert np.all(idx1 == idx2)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n<div class=\"viewcode-block\" id=\"PickleFLANN.dumps\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.smk/#ibeis.algo.smk.pickle_flann.PickleFLANN.dumps\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">dumps</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        # Make a special wordflann pickle</span>\n<span class=\"sd\">        http://www.linuxscrew.com/2010/03/24/fastest-way-to-create-ramdisk-in-ubuntulinux/</span>\n<span class=\"sd\">        sudo mkdir /tmp/ramdisk; chmod 777 /tmp/ramdisk</span>\n<span class=\"sd\">        sudo mount -t tmpfs -o size=256M tmpfs /tmp/ramdisk/</span>\n<span class=\"sd\">        http://zeblog.co/?p=1588</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># import tempfile</span>\n        <span class=\"c1\"># assert not ut.WIN32, &#39;Fix on WIN32. Cannot write to temp file&#39;</span>\n        <span class=\"c1\"># temp = tempfile.NamedTemporaryFile(delete=True)</span>\n        <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">Win32CompatTempFile</span><span class=\"p\">(</span><span class=\"n\">delete</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">save_index</span><span class=\"p\">(</span><span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"n\">index_bytes</span> <span class=\"o\">=</span> <span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n        <span class=\"k\">except</span> <span class=\"ne\">Exception</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span>\n        <span class=\"k\">finally</span><span class=\"p\">:</span>\n            <span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">index_bytes</span></div>\n\n<div class=\"viewcode-block\" id=\"PickleFLANN.loads\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.smk/#ibeis.algo.smk.pickle_flann.PickleFLANN.loads\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">loads</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">index_bytes</span><span class=\"p\">,</span> <span class=\"n\">pts</span><span class=\"p\">):</span>\n        <span class=\"c1\"># import tempfile</span>\n        <span class=\"c1\"># assert not ut.WIN32, &#39;Fix on WIN32. Cannot write to temp file&#39;</span>\n        <span class=\"c1\"># temp = tempfile.NamedTemporaryFile(delete=True)</span>\n        <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">Win32CompatTempFile</span><span class=\"p\">(</span><span class=\"n\">delete</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">index_bytes</span><span class=\"p\">)</span>\n            <span class=\"c1\"># temp.file.flush()</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">load_index</span><span class=\"p\">(</span><span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">pts</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">Exception</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span>\n        <span class=\"k\">finally</span><span class=\"p\">:</span>\n            <span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span></div></div>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.algo.smk.pickle_flann</span>\n<span class=\"sd\">        python -m ibeis.algo.smk.pickle_flann --allexamples</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">multiprocessing</span>\n    <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">freeze_support</span><span class=\"p\">()</span>  <span class=\"c1\"># for win32</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>  <span class=\"c1\"># NOQA</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">doctest_funcs</span><span class=\"p\">()</span>\n</pre></div>", "current_page_name": "_modules/ibeis/algo/smk/pickle_flann", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}