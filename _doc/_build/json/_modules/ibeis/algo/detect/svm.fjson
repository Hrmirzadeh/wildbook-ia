{"parents": [{"link": "../../../../", "title": "Module code"}, {"link": "../../../", "title": "ibeis"}, {"link": "../../", "title": "ibeis.algo"}, {"link": "../", "title": "ibeis.algo.detect"}], "title": "ibeis.algo.detect.svm", "body": "<h1>Source code for ibeis.algo.detect.svm</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">Interface to Darknet object proposals.</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"k\">import</span> <span class=\"n\">absolute_import</span><span class=\"p\">,</span> <span class=\"n\">division</span><span class=\"p\">,</span> <span class=\"n\">print_function</span>\n<span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n<span class=\"kn\">from</span> <span class=\"nn\">os</span> <span class=\"k\">import</span> <span class=\"n\">listdir</span>\n<span class=\"kn\">from</span> <span class=\"nn\">os.path</span> <span class=\"k\">import</span> <span class=\"n\">join</span><span class=\"p\">,</span> <span class=\"n\">isfile</span><span class=\"p\">,</span> <span class=\"n\">isdir</span>\n<span class=\"p\">(</span><span class=\"nb\">print</span><span class=\"p\">,</span> <span class=\"n\">rrr</span><span class=\"p\">,</span> <span class=\"n\">profile</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">inject2</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">,</span> <span class=\"s1\">&#39;[svm]&#39;</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">VERBOSE_SVM</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argflag</span><span class=\"p\">(</span><span class=\"s1\">&#39;--verbsvm&#39;</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">VERBOSE</span>\n\n\n<span class=\"n\">CONFIG_URL_DICT</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"c1\"># &#39;localizer-zebra-10&#39;  : &#39;https://cthulhu.dyn.wildme.io/public/models/classifier.svm.localization.zebra.10.zip&#39;,</span>\n    <span class=\"c1\"># &#39;localizer-zebra-20&#39;  : &#39;https://cthulhu.dyn.wildme.io/public/models/classifier.svm.localization.zebra.20.zip&#39;,</span>\n    <span class=\"c1\"># &#39;localizer-zebra-30&#39;  : &#39;https://cthulhu.dyn.wildme.io/public/models/classifier.svm.localization.zebra.30.zip&#39;,</span>\n    <span class=\"c1\"># &#39;localizer-zebra-40&#39;  : &#39;https://cthulhu.dyn.wildme.io/public/models/classifier.svm.localization.zebra.40.zip&#39;,</span>\n    <span class=\"c1\"># &#39;localizer-zebra-50&#39;  : &#39;https://cthulhu.dyn.wildme.io/public/models/classifier.svm.localization.zebra.50.zip&#39;,</span>\n    <span class=\"c1\"># &#39;localizer-zebra-60&#39;  : &#39;https://cthulhu.dyn.wildme.io/public/models/classifier.svm.localization.zebra.60.zip&#39;,</span>\n    <span class=\"c1\"># &#39;localizer-zebra-70&#39;  : &#39;https://cthulhu.dyn.wildme.io/public/models/classifier.svm.localization.zebra.70.zip&#39;,</span>\n    <span class=\"c1\"># &#39;localizer-zebra-80&#39;  : &#39;https://cthulhu.dyn.wildme.io/public/models/classifier.svm.localization.zebra.80.zip&#39;,</span>\n    <span class=\"c1\"># &#39;localizer-zebra-90&#39;  : &#39;https://cthulhu.dyn.wildme.io/public/models/classifier.svm.localization.zebra.90.zip&#39;,</span>\n    <span class=\"c1\"># &#39;localizer-zebra-100&#39; : &#39;https://cthulhu.dyn.wildme.io/public/models/classifier.svm.localization.zebra.100.zip&#39;,</span>\n\n    <span class=\"c1\"># &#39;image-zebra&#39;         : &#39;https://cthulhu.dyn.wildme.io/public/models/classifier.svm.image.zebra.pkl&#39;,</span>\n\n    <span class=\"c1\"># &#39;default&#39;             : &#39;https://cthulhu.dyn.wildme.io/public/models/classifier.svm.image.zebra.pkl&#39;,</span>\n    <span class=\"c1\"># None                  : &#39;https://cthulhu.dyn.wildme.io/public/models/classifier.svm.image.zebra.pkl&#39;,</span>\n<span class=\"p\">}</span>\n\n\n<div class=\"viewcode-block\" id=\"classify_helper\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.detect/#ibeis.algo.detect.svm.classify_helper\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">classify_helper</span><span class=\"p\">(</span><span class=\"n\">weight_filepath</span><span class=\"p\">,</span> <span class=\"n\">vector_list</span><span class=\"p\">,</span> <span class=\"n\">index_list</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                    <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">VERBOSE_SVM</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">index_list</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">index_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">vector_list</span><span class=\"p\">)))</span>\n    <span class=\"c1\"># Init score and class holders</span>\n    <span class=\"n\">score_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"p\">[]</span> <span class=\"k\">for</span> <span class=\"n\">index</span> <span class=\"ow\">in</span> <span class=\"n\">index_list</span> <span class=\"p\">}</span>\n    <span class=\"n\">class_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"p\">[]</span> <span class=\"k\">for</span> <span class=\"n\">index</span> <span class=\"ow\">in</span> <span class=\"n\">index_list</span> <span class=\"p\">}</span>\n    <span class=\"c1\"># Load models</span>\n    <span class=\"n\">model_tup</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">load_cPkl</span><span class=\"p\">(</span><span class=\"n\">weight_filepath</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">verbose</span><span class=\"p\">)</span>\n    <span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">scaler</span> <span class=\"o\">=</span> <span class=\"n\">model_tup</span>\n    <span class=\"c1\"># Normalize</span>\n    <span class=\"n\">vector_list</span> <span class=\"o\">=</span> <span class=\"n\">scaler</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">vector_list</span><span class=\"p\">)</span>\n    <span class=\"c1\"># calculate decisions and predictions</span>\n    <span class=\"c1\"># score_list = model.decision_function(vector_list)</span>\n    <span class=\"n\">score_list</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">predict_proba</span><span class=\"p\">(</span><span class=\"n\">vector_list</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Take only the positive probability</span>\n    <span class=\"n\">score_list</span> <span class=\"o\">=</span> <span class=\"n\">score_list</span><span class=\"p\">[:,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n    <span class=\"n\">class_list</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">vector_list</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Zip together results</span>\n    <span class=\"n\">zipped</span> <span class=\"o\">=</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">index_list</span><span class=\"p\">,</span> <span class=\"n\">score_list</span><span class=\"p\">,</span> <span class=\"n\">class_list</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">score_</span><span class=\"p\">,</span> <span class=\"n\">class_</span> <span class=\"ow\">in</span> <span class=\"n\">zipped</span><span class=\"p\">:</span>\n        <span class=\"n\">score_dict</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">score_</span><span class=\"p\">)</span>\n        <span class=\"n\">class_dict</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">class_</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Return scores and classes</span>\n    <span class=\"k\">return</span> <span class=\"n\">score_dict</span><span class=\"p\">,</span> <span class=\"n\">class_dict</span></div>\n\n\n<div class=\"viewcode-block\" id=\"classify\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.detect/#ibeis.algo.detect.svm.classify\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">classify</span><span class=\"p\">(</span><span class=\"n\">vector_list</span><span class=\"p\">,</span> <span class=\"n\">weight_filepath</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">VERBOSE_SVM</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        thumbail_list (list of str): the list of image thumbnails that need classifying</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        iter</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">multiprocessing</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n    <span class=\"c1\"># Get correct weight if specified with shorthand</span>\n    <span class=\"k\">if</span> <span class=\"n\">weight_filepath</span> <span class=\"ow\">in</span> <span class=\"n\">CONFIG_URL_DICT</span><span class=\"p\">:</span>\n        <span class=\"n\">weight_url</span> <span class=\"o\">=</span> <span class=\"n\">CONFIG_URL_DICT</span><span class=\"p\">[</span><span class=\"n\">weight_filepath</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">weight_url</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s1\">&#39;.zip&#39;</span><span class=\"p\">):</span>\n            <span class=\"n\">weight_filepath</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">grab_zipped_url</span><span class=\"p\">(</span><span class=\"n\">weight_url</span><span class=\"p\">,</span> <span class=\"n\">appname</span><span class=\"o\">=</span><span class=\"s1\">&#39;ibeis&#39;</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">weight_filepath</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">grab_file_url</span><span class=\"p\">(</span><span class=\"n\">weight_url</span><span class=\"p\">,</span> <span class=\"n\">appname</span><span class=\"o\">=</span><span class=\"s1\">&#39;ibeis&#39;</span><span class=\"p\">,</span>\n                                               <span class=\"n\">check_hash</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Get ensemble</span>\n    <span class=\"n\">is_ensemble</span> <span class=\"o\">=</span> <span class=\"n\">isdir</span><span class=\"p\">(</span><span class=\"n\">weight_filepath</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">is_ensemble</span><span class=\"p\">:</span>\n        <span class=\"n\">weight_filepath_list</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">([</span>\n            <span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">weight_filepath</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">filename</span> <span class=\"ow\">in</span> <span class=\"n\">listdir</span><span class=\"p\">(</span><span class=\"n\">weight_filepath</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">isfile</span><span class=\"p\">(</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">weight_filepath</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"p\">))</span>\n        <span class=\"p\">])</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">weight_filepath_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">weight_filepath</span><span class=\"p\">]</span>\n    <span class=\"n\">num_weights</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">weight_filepath_list</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">num_weights</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span>\n\n    <span class=\"c1\"># Form dictionaries</span>\n    <span class=\"n\">num_vectors</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">vector_list</span><span class=\"p\">)</span>\n    <span class=\"n\">index_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">num_vectors</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># Generate parallelized wrapper</span>\n    <span class=\"n\">OLD</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n    <span class=\"k\">if</span> <span class=\"n\">is_ensemble</span> <span class=\"ow\">and</span> <span class=\"n\">OLD</span><span class=\"p\">:</span>\n        <span class=\"n\">vectors_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"n\">vector_list</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">num_weights</span><span class=\"p\">)</span> <span class=\"p\">]</span>\n        <span class=\"n\">args_list</span> <span class=\"o\">=</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">weight_filepath_list</span><span class=\"p\">,</span> <span class=\"n\">vectors_list</span><span class=\"p\">)</span>\n        <span class=\"n\">nTasks</span> <span class=\"o\">=</span> <span class=\"n\">num_weights</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Processing ensembles in parallel using </span><span class=\"si\">%d</span><span class=\"s1\"> ensembles&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">num_weights</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">num_cpus</span> <span class=\"o\">=</span> <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">cpu_count</span><span class=\"p\">()</span>\n        <span class=\"n\">vector_batch</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ceil</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">num_vectors</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">num_cpus</span><span class=\"p\">))</span>\n        <span class=\"n\">vector_rounds</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ceil</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">num_vectors</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">vector_batch</span><span class=\"p\">))</span>\n\n        <span class=\"n\">args_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">vector_round</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">vector_rounds</span><span class=\"p\">):</span>\n            <span class=\"n\">start_index</span> <span class=\"o\">=</span> <span class=\"n\">vector_round</span> <span class=\"o\">*</span> <span class=\"n\">vector_batch</span>\n            <span class=\"n\">stop_index</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">vector_round</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">vector_batch</span>\n            <span class=\"k\">assert</span> <span class=\"n\">start_index</span> <span class=\"o\">&lt;</span> <span class=\"n\">num_vectors</span>\n            <span class=\"n\">stop_index</span> <span class=\"o\">=</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">stop_index</span><span class=\"p\">,</span> <span class=\"n\">num_vectors</span><span class=\"p\">)</span>\n            <span class=\"c1\"># print(&#39;Slicing index range: [%r, %r)&#39; % (start_index, stop_index, ))</span>\n\n            <span class=\"c1\"># Slice gids and get feature data</span>\n            <span class=\"n\">index_list_</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">start_index</span><span class=\"p\">,</span> <span class=\"n\">stop_index</span><span class=\"p\">))</span>\n            <span class=\"n\">vector_list_</span> <span class=\"o\">=</span> <span class=\"n\">vector_list</span><span class=\"p\">[</span><span class=\"n\">start_index</span><span class=\"p\">:</span> <span class=\"n\">stop_index</span><span class=\"p\">]</span>\n            <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">index_list_</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">vector_list_</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">weight_filepath</span> <span class=\"ow\">in</span> <span class=\"n\">weight_filepath_list</span><span class=\"p\">:</span>\n                <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">weight_filepath</span><span class=\"p\">,</span> <span class=\"n\">vector_list_</span><span class=\"p\">,</span> <span class=\"n\">index_list_</span><span class=\"p\">)</span>\n                <span class=\"n\">args_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span>\n\n        <span class=\"n\">nTasks</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">args_list</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Processing vectors in parallel using vector_batch = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">vector_batch</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n\n    <span class=\"c1\"># Perform inference</span>\n    <span class=\"n\">classify_iter</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">generate2</span><span class=\"p\">(</span><span class=\"n\">classify_helper</span><span class=\"p\">,</span> <span class=\"n\">args_list</span><span class=\"p\">,</span> <span class=\"n\">nTasks</span><span class=\"o\">=</span><span class=\"n\">nTasks</span><span class=\"p\">,</span>\n                                 <span class=\"n\">ordered</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">force_serial</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Classify with SVM for each image vector</span>\n    <span class=\"n\">score_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"p\">[]</span> <span class=\"k\">for</span> <span class=\"n\">index</span> <span class=\"ow\">in</span> <span class=\"n\">index_list</span> <span class=\"p\">}</span>\n    <span class=\"n\">class_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"p\">[]</span> <span class=\"k\">for</span> <span class=\"n\">index</span> <span class=\"ow\">in</span> <span class=\"n\">index_list</span> <span class=\"p\">}</span>\n    <span class=\"k\">for</span> <span class=\"n\">score_dict_</span><span class=\"p\">,</span> <span class=\"n\">class_dict_</span> <span class=\"ow\">in</span> <span class=\"n\">classify_iter</span><span class=\"p\">:</span>\n        <span class=\"k\">for</span> <span class=\"n\">index</span> <span class=\"ow\">in</span> <span class=\"n\">index_list</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">index</span> <span class=\"ow\">in</span> <span class=\"n\">score_dict_</span><span class=\"p\">:</span>\n                <span class=\"n\">score_dict</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">score_dict_</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"n\">index</span> <span class=\"ow\">in</span> <span class=\"n\">class_dict_</span><span class=\"p\">:</span>\n                <span class=\"n\">class_dict</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">class_dict_</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span>\n\n    <span class=\"c1\"># Organize and compute mode and average for class and score</span>\n    <span class=\"k\">for</span> <span class=\"n\">index</span> <span class=\"ow\">in</span> <span class=\"n\">index_list</span><span class=\"p\">:</span>\n        <span class=\"n\">score_list_</span> <span class=\"o\">=</span> <span class=\"n\">score_dict</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span>\n        <span class=\"n\">class_list_</span> <span class=\"o\">=</span> <span class=\"n\">class_dict</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span>\n        <span class=\"n\">score_</span> <span class=\"o\">=</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">score_list_</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">score_list_</span><span class=\"p\">)</span>\n        <span class=\"n\">class_</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">class_list_</span><span class=\"p\">),</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"n\">class_list_</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">)</span>\n        <span class=\"n\">class_</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;positive&#39;</span> <span class=\"k\">if</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">class_</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"s1\">&#39;negative&#39;</span>\n        <span class=\"k\">yield</span> <span class=\"n\">score_</span><span class=\"p\">,</span> <span class=\"n\">class_</span></div>\n</pre></div>", "current_page_name": "_modules/ibeis/algo/detect/svm", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}