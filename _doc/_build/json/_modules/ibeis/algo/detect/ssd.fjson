{"parents": [{"link": "../../../../", "title": "Module code"}, {"link": "../../../", "title": "ibeis"}, {"link": "../../", "title": "ibeis.algo"}, {"link": "../", "title": "ibeis.algo.detect"}], "title": "ibeis.algo.detect.ssd", "body": "<h1>Source code for ibeis.algo.detect.ssd</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">Interface to SSD object proposals.</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"k\">import</span> <span class=\"n\">absolute_import</span><span class=\"p\">,</span> <span class=\"n\">division</span><span class=\"p\">,</span> <span class=\"n\">print_function</span>\n<span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n<span class=\"kn\">import</span> <span class=\"nn\">vtool</span> <span class=\"k\">as</span> <span class=\"nn\">vt</span>\n<span class=\"kn\">from</span> <span class=\"nn\">six.moves</span> <span class=\"k\">import</span> <span class=\"nb\">zip</span>\n<span class=\"kn\">from</span> <span class=\"nn\">os.path</span> <span class=\"k\">import</span> <span class=\"n\">abspath</span><span class=\"p\">,</span> <span class=\"n\">dirname</span><span class=\"p\">,</span> <span class=\"n\">expanduser</span><span class=\"p\">,</span> <span class=\"n\">join</span><span class=\"p\">,</span> <span class=\"n\">exists</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"p\">(</span><span class=\"nb\">print</span><span class=\"p\">,</span> <span class=\"n\">rrr</span><span class=\"p\">,</span> <span class=\"n\">profile</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">inject2</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">,</span> <span class=\"s1\">&#39;[ssd]&#39;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># SCRIPT_PATH = abspath(dirname(__file__))</span>\n<span class=\"n\">SCRIPT_PATH</span> <span class=\"o\">=</span> <span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"n\">expanduser</span><span class=\"p\">(</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"s1\">&#39;~&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;code&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ssd&#39;</span><span class=\"p\">)))</span>\n\n<span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argflag</span><span class=\"p\">(</span><span class=\"s1\">&#39;--no-ssd&#39;</span><span class=\"p\">):</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">assert</span> <span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">SCRIPT_PATH</span><span class=\"p\">)</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">add_path</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">):</span>\n            <span class=\"c1\"># if path not in sys.path:</span>\n            <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Add pycaffe to PYTHONPATH</span>\n        <span class=\"n\">pycaffe_path</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">SCRIPT_PATH</span><span class=\"p\">,</span> <span class=\"s1\">&#39;python&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">add_path</span><span class=\"p\">(</span><span class=\"n\">pycaffe_path</span><span class=\"p\">)</span>\n\n        <span class=\"kn\">import</span> <span class=\"nn\">caffe</span>\n        <span class=\"n\">reload</span><span class=\"p\">(</span><span class=\"n\">caffe</span><span class=\"p\">)</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">google.protobuf</span> <span class=\"k\">import</span> <span class=\"n\">text_format</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">caffe.proto</span> <span class=\"k\">import</span> <span class=\"n\">caffe_pb2</span>\n    <span class=\"k\">except</span> <span class=\"ne\">AssertionError</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;WARNING Failed to find ssd. &#39;</span>\n              <span class=\"s1\">&#39;SSD is unavailable&#39;</span><span class=\"p\">)</span>\n        <span class=\"c1\"># if ut.SUPER_STRICT:</span>\n        <span class=\"c1\">#     raise</span>\n    <span class=\"k\">except</span> <span class=\"ne\">ImportError</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;WARNING Failed to import caffe. &#39;</span>\n              <span class=\"s1\">&#39;SSD is unavailable&#39;</span><span class=\"p\">)</span>\n        <span class=\"c1\"># if ut.SUPER_STRICT:</span>\n        <span class=\"c1\">#     raise</span>\n\n\n<span class=\"n\">VERBOSE_SS</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argflag</span><span class=\"p\">(</span><span class=\"s1\">&#39;--verbssd&#39;</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">VERBOSE</span>\n\n\n<span class=\"n\">CONFIG_URL_DICT</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">&#39;pretrained-300-pascal&#39;</span>      <span class=\"p\">:</span> <span class=\"s1\">&#39;https://cthulhu.dyn.wildme.io/public/models/pretrained.ssd.300.pascal.prototxt&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;pretrained-512-pascal&#39;</span>      <span class=\"p\">:</span> <span class=\"s1\">&#39;https://cthulhu.dyn.wildme.io/public/models/pretrained.ssd.512.pascal.prototxt&#39;</span><span class=\"p\">,</span>\n\n    <span class=\"s1\">&#39;pretrained-300-pascal-plus&#39;</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;https://cthulhu.dyn.wildme.io/public/models/pretrained.ssd.300.pascal.plus.prototxt&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;pretrained-512-pascal-plus&#39;</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;https://cthulhu.dyn.wildme.io/public/models/pretrained.ssd.512.pascal.plus.prototxt&#39;</span><span class=\"p\">,</span>\n\n    <span class=\"s1\">&#39;pretrained-300-coco&#39;</span>        <span class=\"p\">:</span> <span class=\"s1\">&#39;https://cthulhu.dyn.wildme.io/public/models/pretrained.ssd.300.coco.prototxt&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;pretrained-512-coco&#39;</span>        <span class=\"p\">:</span> <span class=\"s1\">&#39;https://cthulhu.dyn.wildme.io/public/models/pretrained.ssd.512.coco.prototxt&#39;</span><span class=\"p\">,</span>\n\n    <span class=\"s1\">&#39;pretrained-300-ilsvrc&#39;</span>      <span class=\"p\">:</span> <span class=\"s1\">&#39;https://cthulhu.dyn.wildme.io/public/models/pretrained.ssd.300.ilsvrc.prototxt&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;pretrained-500-ilsvrc&#39;</span>      <span class=\"p\">:</span> <span class=\"s1\">&#39;https://cthulhu.dyn.wildme.io/public/models/pretrained.ssd.500.ilsvrc.prototxt&#39;</span><span class=\"p\">,</span>\n\n    <span class=\"s1\">&#39;default&#39;</span>                    <span class=\"p\">:</span> <span class=\"s1\">&#39;https://cthulhu.dyn.wildme.io/public/models/pretrained.ssd.512.pascal.plus.prototxt&#39;</span><span class=\"p\">,</span>\n    <span class=\"kc\">None</span>                         <span class=\"p\">:</span> <span class=\"s1\">&#39;https://cthulhu.dyn.wildme.io/public/models/pretrained.ssd.512.pascal.plus.prototxt&#39;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_parse_weight_from_cfg</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">url</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">&#39;.prototxt&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;.caffemodel&#39;</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_parse_classes_from_cfg</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">url</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">&#39;.prototxt&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;.classes&#39;</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_parse_class_list</span><span class=\"p\">(</span><span class=\"n\">classes_filepath</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Load classes from file into the class list</span>\n    <span class=\"k\">assert</span> <span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">classes_filepath</span><span class=\"p\">)</span>\n    <span class=\"n\">class_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">classes_filepath</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">classes</span><span class=\"p\">:</span>\n        <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">readlines</span><span class=\"p\">():</span>\n            <span class=\"n\">line</span> <span class=\"o\">=</span> <span class=\"n\">line</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"n\">class_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">class_list</span>\n\n\n<div class=\"viewcode-block\" id=\"detect_gid_list\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.detect/#ibeis.algo.detect.ssd.detect_gid_list\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">detect_gid_list</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">gid_list</span><span class=\"p\">,</span> <span class=\"n\">downsample</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">VERBOSE_SS</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        gid_list (list of int): the list of IBEIS image_rowids that need detection</span>\n<span class=\"sd\">        downsample (bool, optional): a flag to indicate if the original image</span>\n<span class=\"sd\">            sizes should be used; defaults to True</span>\n\n<span class=\"sd\">            True:  ibs.get_image_detectpaths() is used</span>\n<span class=\"sd\">            False: ibs.get_image_paths() is used</span>\n\n<span class=\"sd\">    Kwargs (optional): refer to the SSD documentation for configuration settings</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (ibeis.IBEISController):  image analysis api</span>\n<span class=\"sd\">        gid_list (list of int): the list of IBEIS image_rowids that need detection</span>\n<span class=\"sd\">        downsample (bool, optional): a flag to indicate if the original image</span>\n<span class=\"sd\">                sizes should be used; defaults to True</span>\n\n<span class=\"sd\">    Kwargs:</span>\n<span class=\"sd\">        detector, config_filepath, weights_filepath, verbose</span>\n\n<span class=\"sd\">    Yields:</span>\n<span class=\"sd\">        tuple: (gid, gpath, result_list)</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.algo.detect.ssd detect_gid_list --show</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.algo.detect.ssd import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.core_images import LocalizerConfig</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; gid_list = ibs.get_valid_gids()</span>\n<span class=\"sd\">        &gt;&gt;&gt; config = {&#39;verbose&#39;: True}</span>\n<span class=\"sd\">        &gt;&gt;&gt; downsample = False</span>\n<span class=\"sd\">        &gt;&gt;&gt; results_list = detect_gid_list(ibs, gid_list, downsample, **config)</span>\n<span class=\"sd\">        &gt;&gt;&gt; results_list = list(results_list)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&#39;result lens = %r&#39; % (map(len, list(results_list))))</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&#39;result[0] = %r&#39; % (len(list(results_list[0][2]))))</span>\n<span class=\"sd\">        &gt;&gt;&gt; config = {&#39;verbose&#39;: True}</span>\n<span class=\"sd\">        &gt;&gt;&gt; downsample = False</span>\n<span class=\"sd\">        &gt;&gt;&gt; results_list = detect_gid_list(ibs, gid_list, downsample, **config)</span>\n<span class=\"sd\">        &gt;&gt;&gt; results_list = list(results_list)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&#39;result lens = %r&#39; % (map(len, list(results_list))))</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&#39;result[0] = %r&#39; % (len(list(results_list[0][2]))))</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.quit_if_noshow()</span>\n<span class=\"sd\">        &gt;&gt;&gt; import plottool as pt</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.show_if_requested()</span>\n\n<span class=\"sd\">    Yields:</span>\n<span class=\"sd\">        results (list of dict)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\"># Get new gpaths if downsampling</span>\n    <span class=\"k\">if</span> <span class=\"n\">downsample</span><span class=\"p\">:</span>\n        <span class=\"n\">gpath_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_detectpaths</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n        <span class=\"n\">neww_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">open_image_size</span><span class=\"p\">(</span><span class=\"n\">gpath</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">gpath</span> <span class=\"ow\">in</span> <span class=\"n\">gpath_list</span><span class=\"p\">]</span>\n        <span class=\"n\">oldw_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">oldw</span> <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">oldw</span><span class=\"p\">,</span> <span class=\"n\">oldh</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_sizes</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)]</span>\n        <span class=\"n\">downsample_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">oldw</span> <span class=\"o\">/</span> <span class=\"n\">neww</span> <span class=\"k\">for</span> <span class=\"n\">oldw</span><span class=\"p\">,</span> <span class=\"n\">neww</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">oldw_list</span><span class=\"p\">,</span> <span class=\"n\">neww_list</span><span class=\"p\">)]</span>\n        <span class=\"n\">orient_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">gpath_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_paths</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n        <span class=\"n\">downsample_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">gpath_list</span><span class=\"p\">)</span>\n        <span class=\"n\">orient_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_orientation</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Run detection</span>\n    <span class=\"n\">results_iter</span> <span class=\"o\">=</span> <span class=\"n\">detect</span><span class=\"p\">(</span><span class=\"n\">gpath_list</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">verbose</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Upscale the results</span>\n    <span class=\"n\">_iter</span> <span class=\"o\">=</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">downsample_list</span><span class=\"p\">,</span> <span class=\"n\">gid_list</span><span class=\"p\">,</span> <span class=\"n\">orient_list</span><span class=\"p\">,</span> <span class=\"n\">results_iter</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">downsample</span><span class=\"p\">,</span> <span class=\"n\">gid</span><span class=\"p\">,</span> <span class=\"n\">orient</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">gpath</span><span class=\"p\">,</span> <span class=\"n\">result_list</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"n\">_iter</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Upscale the results back up to the original image size</span>\n        <span class=\"k\">for</span> <span class=\"n\">result</span> <span class=\"ow\">in</span> <span class=\"n\">result_list</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">downsample</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">downsample</span> <span class=\"o\">!=</span> <span class=\"mf\">1.0</span><span class=\"p\">:</span>\n                <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s1\">&#39;xtl&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ytl&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;width&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;height&#39;</span><span class=\"p\">]:</span>\n                    <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">downsample</span><span class=\"p\">)</span>\n            <span class=\"n\">bbox</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s1\">&#39;xtl&#39;</span><span class=\"p\">],</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s1\">&#39;ytl&#39;</span><span class=\"p\">],</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s1\">&#39;width&#39;</span><span class=\"p\">],</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s1\">&#39;height&#39;</span><span class=\"p\">],</span> <span class=\"p\">)</span>\n            <span class=\"n\">bbox_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"n\">bbox</span> <span class=\"p\">]</span>\n            <span class=\"n\">bbox</span> <span class=\"o\">=</span> <span class=\"n\">bbox_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s1\">&#39;xtl&#39;</span><span class=\"p\">],</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s1\">&#39;ytl&#39;</span><span class=\"p\">],</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s1\">&#39;width&#39;</span><span class=\"p\">],</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s1\">&#39;height&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">bbox</span>\n        <span class=\"k\">yield</span> <span class=\"p\">(</span><span class=\"n\">gid</span><span class=\"p\">,</span> <span class=\"n\">gpath</span><span class=\"p\">,</span> <span class=\"n\">result_list</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"detect\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.detect/#ibeis.algo.detect.ssd.detect\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">detect</span><span class=\"p\">(</span><span class=\"n\">gpath_list</span><span class=\"p\">,</span> <span class=\"n\">config_filepath</span><span class=\"p\">,</span> <span class=\"n\">weight_filepath</span><span class=\"p\">,</span> <span class=\"n\">class_filepath</span><span class=\"p\">,</span> <span class=\"n\">sensitivity</span><span class=\"p\">,</span>\n           <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">VERBOSE_SS</span><span class=\"p\">,</span> <span class=\"n\">use_gpu</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">use_gpu_id</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n           <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        gpath_list (list of str): the list of image paths that need proposal candidates</span>\n\n<span class=\"sd\">    Kwargs (optional): refer to the SSD documentation for configuration settings</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        iter</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_get_label_name</span><span class=\"p\">(</span><span class=\"n\">class_labelmap</span><span class=\"p\">,</span> <span class=\"n\">label_list</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">label_list</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n            <span class=\"n\">label_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">label_list</span><span class=\"p\">]</span>\n        <span class=\"n\">item_list</span> <span class=\"o\">=</span> <span class=\"n\">class_labelmap</span><span class=\"o\">.</span><span class=\"n\">item</span>\n        <span class=\"n\">name_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">label</span> <span class=\"ow\">in</span> <span class=\"n\">label_list</span><span class=\"p\">:</span>\n            <span class=\"n\">found</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n            <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">item_list</span><span class=\"p\">)):</span>\n                <span class=\"k\">if</span> <span class=\"n\">label</span> <span class=\"o\">==</span> <span class=\"n\">item_list</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">label</span><span class=\"p\">:</span>\n                    <span class=\"n\">found</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n                    <span class=\"n\">name_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">item_list</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">display_name</span><span class=\"p\">)</span>\n                    <span class=\"k\">break</span>\n            <span class=\"k\">assert</span> <span class=\"n\">found</span>\n        <span class=\"k\">return</span> <span class=\"n\">name_list</span>\n\n    <span class=\"c1\"># Get correct config if specified with shorthand</span>\n    <span class=\"n\">config_url</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"k\">if</span> <span class=\"n\">config_filepath</span> <span class=\"ow\">in</span> <span class=\"n\">CONFIG_URL_DICT</span><span class=\"p\">:</span>\n        <span class=\"n\">config_url</span> <span class=\"o\">=</span> <span class=\"n\">CONFIG_URL_DICT</span><span class=\"p\">[</span><span class=\"n\">config_filepath</span><span class=\"p\">]</span>\n        <span class=\"n\">config_filepath</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">grab_file_url</span><span class=\"p\">(</span><span class=\"n\">config_url</span><span class=\"p\">,</span> <span class=\"n\">appname</span><span class=\"o\">=</span><span class=\"s1\">&#39;ibeis&#39;</span><span class=\"p\">,</span>\n                                           <span class=\"n\">check_hash</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Get correct weights if specified with shorthand</span>\n    <span class=\"k\">if</span> <span class=\"n\">weight_filepath</span> <span class=\"ow\">in</span> <span class=\"n\">CONFIG_URL_DICT</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">weight_filepath</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">config_url</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">config_url_</span> <span class=\"o\">=</span> <span class=\"n\">config_url</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">config_url_</span> <span class=\"o\">=</span> <span class=\"n\">CONFIG_URL_DICT</span><span class=\"p\">[</span><span class=\"n\">weight_filepath</span><span class=\"p\">]</span>\n        <span class=\"n\">weight_url</span> <span class=\"o\">=</span> <span class=\"n\">_parse_weight_from_cfg</span><span class=\"p\">(</span><span class=\"n\">config_url_</span><span class=\"p\">)</span>\n        <span class=\"n\">weight_filepath</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">grab_file_url</span><span class=\"p\">(</span><span class=\"n\">weight_url</span><span class=\"p\">,</span> <span class=\"n\">appname</span><span class=\"o\">=</span><span class=\"s1\">&#39;ibeis&#39;</span><span class=\"p\">,</span>\n                                            <span class=\"n\">check_hash</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">class_filepath</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">class_url</span> <span class=\"o\">=</span> <span class=\"n\">_parse_classes_from_cfg</span><span class=\"p\">(</span><span class=\"n\">config_url</span><span class=\"p\">)</span>\n        <span class=\"n\">class_filepath</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">grab_file_url</span><span class=\"p\">(</span><span class=\"n\">class_url</span><span class=\"p\">,</span> <span class=\"n\">appname</span><span class=\"o\">=</span><span class=\"s1\">&#39;ibeis&#39;</span><span class=\"p\">,</span>\n                                          <span class=\"n\">check_hash</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">verbose</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># load class labels</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">class_filepath</span><span class=\"p\">,</span> <span class=\"s1\">&#39;r&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">class_file</span><span class=\"p\">:</span>\n        <span class=\"n\">class_labelmap</span> <span class=\"o\">=</span> <span class=\"n\">caffe_pb2</span><span class=\"o\">.</span><span class=\"n\">LabelMap</span><span class=\"p\">()</span>\n        <span class=\"n\">class_str</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">class_file</span><span class=\"p\">))</span>\n        <span class=\"n\">text_format</span><span class=\"o\">.</span><span class=\"n\">Merge</span><span class=\"p\">(</span><span class=\"n\">class_str</span><span class=\"p\">,</span> <span class=\"n\">class_labelmap</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Need to convert unicode strings to Python strings to support Boost Python</span>\n    <span class=\"c1\"># call signatures in caffe</span>\n    <span class=\"n\">prototxt_filepath</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">config_filepath</span><span class=\"p\">)</span>  <span class=\"c1\"># alias to Caffe nomenclature</span>\n    <span class=\"n\">caffemodel_filepath</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">weight_filepath</span><span class=\"p\">)</span>  <span class=\"c1\"># alias to Caffe nomenclature</span>\n\n    <span class=\"k\">assert</span> <span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">prototxt_filepath</span><span class=\"p\">),</span> <span class=\"s1\">&#39;Specified prototxt file not found&#39;</span>\n    <span class=\"k\">assert</span> <span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">caffemodel_filepath</span><span class=\"p\">),</span> <span class=\"s1\">&#39;Specified caffemodel file not found&#39;</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">use_gpu</span><span class=\"p\">:</span>\n        <span class=\"n\">caffe</span><span class=\"o\">.</span><span class=\"n\">set_mode_gpu</span><span class=\"p\">()</span>\n        <span class=\"n\">caffe</span><span class=\"o\">.</span><span class=\"n\">set_device</span><span class=\"p\">(</span><span class=\"n\">use_gpu_id</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">caffe</span><span class=\"o\">.</span><span class=\"n\">set_mode_cpu</span><span class=\"p\">()</span>\n\n    <span class=\"n\">net</span> <span class=\"o\">=</span> <span class=\"n\">caffe</span><span class=\"o\">.</span><span class=\"n\">Net</span><span class=\"p\">(</span><span class=\"n\">prototxt_filepath</span><span class=\"p\">,</span> <span class=\"n\">caffemodel_filepath</span><span class=\"p\">,</span> <span class=\"n\">caffe</span><span class=\"o\">.</span><span class=\"n\">TEST</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Determine input size from prototext</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">prototxt_filepath</span><span class=\"p\">,</span> <span class=\"s1\">&#39;r&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">prototxt_file</span><span class=\"p\">:</span>\n        <span class=\"c1\"># load all lines</span>\n        <span class=\"n\">line_list</span> <span class=\"o\">=</span> <span class=\"n\">prototxt_file</span><span class=\"o\">.</span><span class=\"n\">readlines</span><span class=\"p\">()</span>\n        <span class=\"c1\"># look for dim size lines</span>\n        <span class=\"n\">line_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">line</span> <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">line_list</span> <span class=\"k\">if</span> <span class=\"s1\">&#39;dim:&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">line</span><span class=\"p\">]</span>\n        <span class=\"n\">line_list</span> <span class=\"o\">=</span> <span class=\"n\">line_list</span><span class=\"p\">[:</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n        <span class=\"c1\"># Get last line</span>\n        <span class=\"n\">line</span> <span class=\"o\">=</span> <span class=\"n\">line_list</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"n\">line_</span> <span class=\"o\">=</span> <span class=\"n\">line</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39; &#39;</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Filter empty spaces</span>\n        <span class=\"n\">line_</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"n\">_</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"n\">line_</span> <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"c1\"># Get last value on line, which should be the image size</span>\n        <span class=\"n\">image_resize</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">line_</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n        <span class=\"c1\"># Check to make sure</span>\n        <span class=\"k\">assert</span> <span class=\"n\">image_resize</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">500</span><span class=\"p\">,</span> <span class=\"mi\">512</span><span class=\"p\">]</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;FOUND image_resize = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">image_resize</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n\n    <span class=\"c1\"># Input preprocessing: &#39;data&#39; is the name of the input blob == net.inputs[0]</span>\n    <span class=\"n\">transformer</span> <span class=\"o\">=</span> <span class=\"n\">caffe</span><span class=\"o\">.</span><span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">Transformer</span><span class=\"p\">({</span><span class=\"s1\">&#39;data&#39;</span><span class=\"p\">:</span> <span class=\"n\">net</span><span class=\"o\">.</span><span class=\"n\">blobs</span><span class=\"p\">[</span><span class=\"s1\">&#39;data&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">})</span>\n    <span class=\"n\">transformer</span><span class=\"o\">.</span><span class=\"n\">set_transpose</span><span class=\"p\">(</span><span class=\"s1\">&#39;data&#39;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n    <span class=\"c1\"># Mean pixel value</span>\n    <span class=\"n\">transformer</span><span class=\"o\">.</span><span class=\"n\">set_mean</span><span class=\"p\">(</span><span class=\"s1\">&#39;data&#39;</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">104</span><span class=\"p\">,</span> <span class=\"mi\">117</span><span class=\"p\">,</span> <span class=\"mi\">123</span><span class=\"p\">]))</span>\n    <span class=\"c1\"># The reference model operates on images in [0,255] range instead of [0,1]</span>\n    <span class=\"n\">transformer</span><span class=\"o\">.</span><span class=\"n\">set_raw_scale</span><span class=\"p\">(</span><span class=\"s1\">&#39;data&#39;</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">)</span>\n    <span class=\"c1\"># The reference model has channels in BGR order instead of RGB</span>\n    <span class=\"n\">transformer</span><span class=\"o\">.</span><span class=\"n\">set_channel_swap</span><span class=\"p\">(</span><span class=\"s1\">&#39;data&#39;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n    <span class=\"c1\"># Set batch size to 1 and set testing image size</span>\n    <span class=\"n\">net</span><span class=\"o\">.</span><span class=\"n\">blobs</span><span class=\"p\">[</span><span class=\"s1\">&#39;data&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">image_resize</span><span class=\"p\">,</span> <span class=\"n\">image_resize</span><span class=\"p\">)</span>\n\n    <span class=\"n\">results_list_</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">gpath</span> <span class=\"ow\">in</span> <span class=\"n\">gpath_list</span><span class=\"p\">:</span>\n        <span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">caffe</span><span class=\"o\">.</span><span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">load_image</span><span class=\"p\">(</span><span class=\"n\">gpath</span><span class=\"p\">)</span>\n        <span class=\"n\">transformed_image</span> <span class=\"o\">=</span> <span class=\"n\">transformer</span><span class=\"o\">.</span><span class=\"n\">preprocess</span><span class=\"p\">(</span><span class=\"s1\">&#39;data&#39;</span><span class=\"p\">,</span> <span class=\"n\">image</span><span class=\"p\">)</span>\n        <span class=\"n\">net</span><span class=\"o\">.</span><span class=\"n\">blobs</span><span class=\"p\">[</span><span class=\"s1\">&#39;data&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">transformed_image</span>\n\n        <span class=\"c1\"># Forward pass.</span>\n        <span class=\"n\">detections</span> <span class=\"o\">=</span> <span class=\"n\">net</span><span class=\"o\">.</span><span class=\"n\">forward</span><span class=\"p\">()[</span><span class=\"s1\">&#39;detection_out&#39;</span><span class=\"p\">]</span>\n\n        <span class=\"c1\"># Parse the outputs.</span>\n        <span class=\"n\">det_label</span> <span class=\"o\">=</span> <span class=\"n\">detections</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"p\">:</span> <span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"n\">det_conf</span>  <span class=\"o\">=</span> <span class=\"n\">detections</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"p\">:</span> <span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n        <span class=\"n\">det_xmin</span>  <span class=\"o\">=</span> <span class=\"n\">detections</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"p\">:</span> <span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n        <span class=\"n\">det_ymin</span>  <span class=\"o\">=</span> <span class=\"n\">detections</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"p\">:</span> <span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n        <span class=\"n\">det_xmax</span>  <span class=\"o\">=</span> <span class=\"n\">detections</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"p\">:</span> <span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n        <span class=\"n\">det_ymax</span>  <span class=\"o\">=</span> <span class=\"n\">detections</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"p\">:</span> <span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span>\n\n        <span class=\"c1\"># Get detections with confidence higher than 0.6.</span>\n        <span class=\"n\">top_indices</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"n\">i</span> <span class=\"k\">for</span>\n            <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">conf</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">det_conf</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">conf</span> <span class=\"o\">&gt;=</span> <span class=\"n\">sensitivity</span>\n        <span class=\"p\">]</span>\n        <span class=\"n\">top_conf</span> <span class=\"o\">=</span> <span class=\"n\">det_conf</span><span class=\"p\">[</span><span class=\"n\">top_indices</span><span class=\"p\">]</span>\n        <span class=\"n\">top_label_indices</span> <span class=\"o\">=</span> <span class=\"n\">det_label</span><span class=\"p\">[</span><span class=\"n\">top_indices</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">tolist</span><span class=\"p\">()</span>\n        <span class=\"n\">top_labels</span> <span class=\"o\">=</span> <span class=\"n\">_get_label_name</span><span class=\"p\">(</span><span class=\"n\">class_labelmap</span><span class=\"p\">,</span> <span class=\"n\">top_label_indices</span><span class=\"p\">)</span>\n        <span class=\"n\">top_xmin</span> <span class=\"o\">=</span> <span class=\"n\">det_xmin</span><span class=\"p\">[</span><span class=\"n\">top_indices</span><span class=\"p\">]</span>\n        <span class=\"n\">top_ymin</span> <span class=\"o\">=</span> <span class=\"n\">det_ymin</span><span class=\"p\">[</span><span class=\"n\">top_indices</span><span class=\"p\">]</span>\n        <span class=\"n\">top_xmax</span> <span class=\"o\">=</span> <span class=\"n\">det_xmax</span><span class=\"p\">[</span><span class=\"n\">top_indices</span><span class=\"p\">]</span>\n        <span class=\"n\">top_ymax</span> <span class=\"o\">=</span> <span class=\"n\">det_ymax</span><span class=\"p\">[</span><span class=\"n\">top_indices</span><span class=\"p\">]</span>\n        <span class=\"n\">height</span><span class=\"p\">,</span> <span class=\"n\">width</span> <span class=\"o\">=</span> <span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[:</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n\n        <span class=\"c1\"># Compile results</span>\n        <span class=\"n\">result_list_</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">zipped</span> <span class=\"o\">=</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">top_xmin</span><span class=\"p\">,</span> <span class=\"n\">top_ymin</span><span class=\"p\">,</span> <span class=\"n\">top_xmax</span><span class=\"p\">,</span> <span class=\"n\">top_ymax</span><span class=\"p\">,</span> <span class=\"n\">top_labels</span><span class=\"p\">,</span> <span class=\"n\">top_conf</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">xmin</span><span class=\"p\">,</span> <span class=\"n\">ymin</span><span class=\"p\">,</span> <span class=\"n\">xmax</span><span class=\"p\">,</span> <span class=\"n\">ymax</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"p\">,</span> <span class=\"n\">conf</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"n\">zipped</span><span class=\"p\">:</span>\n            <span class=\"n\">xtl</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">around</span><span class=\"p\">(</span><span class=\"n\">xmin</span> <span class=\"o\">*</span> <span class=\"n\">width</span><span class=\"p\">))</span>\n            <span class=\"n\">ytl</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">around</span><span class=\"p\">(</span><span class=\"n\">ymin</span> <span class=\"o\">*</span> <span class=\"n\">height</span><span class=\"p\">))</span>\n            <span class=\"n\">xbr</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">around</span><span class=\"p\">(</span><span class=\"n\">xmax</span> <span class=\"o\">*</span> <span class=\"n\">width</span><span class=\"p\">))</span>\n            <span class=\"n\">ybr</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">around</span><span class=\"p\">(</span><span class=\"n\">ymax</span> <span class=\"o\">*</span> <span class=\"n\">height</span><span class=\"p\">))</span>\n            <span class=\"n\">confidence</span> <span class=\"o\">=</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">conf</span><span class=\"p\">)</span>\n            <span class=\"n\">result_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                <span class=\"s1\">&#39;xtl&#39;</span>        <span class=\"p\">:</span> <span class=\"n\">xtl</span><span class=\"p\">,</span>\n                <span class=\"s1\">&#39;ytl&#39;</span>        <span class=\"p\">:</span> <span class=\"n\">ytl</span><span class=\"p\">,</span>\n                <span class=\"s1\">&#39;width&#39;</span>      <span class=\"p\">:</span> <span class=\"n\">xbr</span> <span class=\"o\">-</span> <span class=\"n\">xtl</span><span class=\"p\">,</span>\n                <span class=\"s1\">&#39;height&#39;</span>     <span class=\"p\">:</span> <span class=\"n\">ybr</span> <span class=\"o\">-</span> <span class=\"n\">ytl</span><span class=\"p\">,</span>\n                <span class=\"s1\">&#39;class&#39;</span>      <span class=\"p\">:</span> <span class=\"n\">label</span><span class=\"p\">,</span>\n                <span class=\"s1\">&#39;confidence&#39;</span> <span class=\"p\">:</span> <span class=\"n\">confidence</span><span class=\"p\">,</span>\n            <span class=\"p\">}</span>\n            <span class=\"n\">result_list_</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">result_dict</span><span class=\"p\">)</span>\n        <span class=\"n\">results_list_</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">result_list_</span><span class=\"p\">)</span>\n\n    <span class=\"n\">results_list</span> <span class=\"o\">=</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">gpath_list</span><span class=\"p\">,</span> <span class=\"n\">results_list_</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">results_list</span></div>\n</pre></div>", "current_page_name": "_modules/ibeis/algo/detect/ssd", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}