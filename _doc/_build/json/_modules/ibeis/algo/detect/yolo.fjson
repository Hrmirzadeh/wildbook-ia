{"parents": [{"link": "../../../../", "title": "Module code"}, {"link": "../../../", "title": "ibeis"}, {"link": "../../", "title": "ibeis.algo"}, {"link": "../", "title": "ibeis.algo.detect"}], "title": "ibeis.algo.detect.yolo", "body": "<h1>Source code for ibeis.algo.detect.yolo</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">Interface to pydarknet yolo object detection.</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"k\">import</span> <span class=\"n\">absolute_import</span><span class=\"p\">,</span> <span class=\"n\">division</span><span class=\"p\">,</span> <span class=\"n\">print_function</span>\n<span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n<span class=\"kn\">import</span> <span class=\"nn\">vtool</span> <span class=\"k\">as</span> <span class=\"nn\">vt</span>\n<span class=\"kn\">from</span> <span class=\"nn\">six.moves</span> <span class=\"k\">import</span> <span class=\"nb\">zip</span>\n<span class=\"p\">(</span><span class=\"nb\">print</span><span class=\"p\">,</span> <span class=\"n\">rrr</span><span class=\"p\">,</span> <span class=\"n\">profile</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">inject2</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">,</span> <span class=\"s1\">&#39;[yolo]&#39;</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argflag</span><span class=\"p\">(</span><span class=\"s1\">&#39;--no-pydarknet&#39;</span><span class=\"p\">):</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">pydarknet</span>\n    <span class=\"k\">except</span> <span class=\"ne\">ImportError</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;WARNING Failed to import pydarknet. &#39;</span>\n              <span class=\"s1\">&#39;PyDarknet YOLO detection is unavailable&#39;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">SUPER_STRICT</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span>\n\n\n<span class=\"n\">VERBOSE_DARK</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argflag</span><span class=\"p\">(</span><span class=\"s1\">&#39;--verbdark&#39;</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">VERBOSE</span>\n\n\n<span class=\"c1\"># def train_gid_list(ibs, gid_list, trees_path=None, species=None, setup=True,</span>\n\n\n<div class=\"viewcode-block\" id=\"detect_gid_list\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.detect/#ibeis.algo.detect.yolo.detect_gid_list\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">detect_gid_list</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">gid_list</span><span class=\"p\">,</span> <span class=\"n\">downsample</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        gid_list (list of int): the list of IBEIS image_rowids that need detection</span>\n<span class=\"sd\">        downsample (bool, optional): a flag to indicate if the original image</span>\n<span class=\"sd\">            sizes should be used; defaults to True</span>\n\n<span class=\"sd\">            True:  ibs.get_image_detectpaths() is used</span>\n<span class=\"sd\">            False: ibs.get_image_paths() is used</span>\n\n<span class=\"sd\">    Kwargs (optional): refer to the PyDarknet documentation for configuration settings</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (ibeis.IBEISController):  image analysis api</span>\n<span class=\"sd\">        gid_list (list of int): the list of IBEIS image_rowids that need detection</span>\n<span class=\"sd\">        downsample (bool, optional): a flag to indicate if the original image</span>\n<span class=\"sd\">                sizes should be used; defaults to True</span>\n\n<span class=\"sd\">    Kwargs:</span>\n<span class=\"sd\">        detector, config_filepath, weights_filepath, verbose</span>\n\n<span class=\"sd\">    Yields:</span>\n<span class=\"sd\">        tuple: (gid, gpath, result_list)</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.algo.detect.yolo detect_gid_list --show</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.algo.detect.yolo import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.core_images import LocalizerConfig</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(defaultdb=&#39;WS_ALL&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; gid_list = ibs.images()._rowids[0:1]</span>\n<span class=\"sd\">        &gt;&gt;&gt; kwargs = config = LocalizerConfig(**{</span>\n<span class=\"sd\">        &gt;&gt;&gt;     &#39;weights_filepath&#39;: &#39;/media/raid/work/WS_ALL/localizer_backup/detect.yolo.2.39000.weights&#39;,</span>\n<span class=\"sd\">        &gt;&gt;&gt;     &#39;config_filepath&#39;: &#39;/media/raid/work/WS_ALL/localizer_backup/detect.yolo.2.cfg&#39;,</span>\n<span class=\"sd\">        &gt;&gt;&gt; })</span>\n<span class=\"sd\">        &gt;&gt;&gt; exec(ut.execstr_dict(config), globals())</span>\n<span class=\"sd\">        &gt;&gt;&gt; #classes_fpath = &#39;/media/raid/work/WS_ALL/localizer_backup/detect.yolo.2.cfg.classes&#39;</span>\n<span class=\"sd\">        &gt;&gt;&gt; downsample = False</span>\n<span class=\"sd\">        &gt;&gt;&gt; (gid, gpath, result_list) = detect_gid_list(ibs, gid_list, downsample, **config)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = (&#39;(gid, gpath, result_list) = %s&#39; % (ut.repr2((gid, gpath, result_list)),))</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.quit_if_noshow()</span>\n<span class=\"sd\">        &gt;&gt;&gt; import plottool as pt</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.show_if_requested()</span>\n\n<span class=\"sd\">    Yields:</span>\n<span class=\"sd\">        results (list of dict)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\"># Get new gpaths if downsampling</span>\n    <span class=\"k\">if</span> <span class=\"n\">downsample</span><span class=\"p\">:</span>\n        <span class=\"n\">gpath_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_detectpaths</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n        <span class=\"n\">neww_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">open_image_size</span><span class=\"p\">(</span><span class=\"n\">gpath</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">gpath</span> <span class=\"ow\">in</span> <span class=\"n\">gpath_list</span><span class=\"p\">]</span>\n        <span class=\"n\">oldw_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">oldw</span> <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">oldw</span><span class=\"p\">,</span> <span class=\"n\">oldh</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_sizes</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)]</span>\n        <span class=\"n\">downsample_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">oldw</span> <span class=\"o\">/</span> <span class=\"n\">neww</span> <span class=\"k\">for</span> <span class=\"n\">oldw</span><span class=\"p\">,</span> <span class=\"n\">neww</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">oldw_list</span><span class=\"p\">,</span> <span class=\"n\">neww_list</span><span class=\"p\">)]</span>\n        <span class=\"n\">orient_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">gpath_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_paths</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n        <span class=\"n\">downsample_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">gpath_list</span><span class=\"p\">)</span>\n        <span class=\"n\">orient_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_orientation</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Run detection</span>\n    <span class=\"n\">results_iter</span> <span class=\"o\">=</span> <span class=\"n\">detect</span><span class=\"p\">(</span><span class=\"n\">gpath_list</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Upscale the results</span>\n    <span class=\"n\">_iter</span> <span class=\"o\">=</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">downsample_list</span><span class=\"p\">,</span> <span class=\"n\">gid_list</span><span class=\"p\">,</span> <span class=\"n\">orient_list</span><span class=\"p\">,</span> <span class=\"n\">results_iter</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">downsample</span><span class=\"p\">,</span> <span class=\"n\">gid</span><span class=\"p\">,</span> <span class=\"n\">orient</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">gpath</span><span class=\"p\">,</span> <span class=\"n\">result_list</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"n\">_iter</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Upscale the results back up to the original image size</span>\n        <span class=\"k\">for</span> <span class=\"n\">result</span> <span class=\"ow\">in</span> <span class=\"n\">result_list</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">downsample</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">downsample</span> <span class=\"o\">!=</span> <span class=\"mf\">1.0</span><span class=\"p\">:</span>\n                <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s1\">&#39;xtl&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ytl&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;width&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;height&#39;</span><span class=\"p\">]:</span>\n                    <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">downsample</span><span class=\"p\">)</span>\n            <span class=\"n\">bbox</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s1\">&#39;xtl&#39;</span><span class=\"p\">],</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s1\">&#39;ytl&#39;</span><span class=\"p\">],</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s1\">&#39;width&#39;</span><span class=\"p\">],</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s1\">&#39;height&#39;</span><span class=\"p\">],</span> <span class=\"p\">)</span>\n            <span class=\"n\">bbox_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"n\">bbox</span> <span class=\"p\">]</span>\n            <span class=\"n\">bbox</span> <span class=\"o\">=</span> <span class=\"n\">bbox_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s1\">&#39;xtl&#39;</span><span class=\"p\">],</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s1\">&#39;ytl&#39;</span><span class=\"p\">],</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s1\">&#39;width&#39;</span><span class=\"p\">],</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s1\">&#39;height&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">bbox</span>\n        <span class=\"k\">yield</span> <span class=\"p\">(</span><span class=\"n\">gid</span><span class=\"p\">,</span> <span class=\"n\">gpath</span><span class=\"p\">,</span> <span class=\"n\">result_list</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"detect\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.detect/#ibeis.algo.detect.yolo.detect\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">detect</span><span class=\"p\">(</span><span class=\"n\">gpath_list</span><span class=\"p\">,</span> <span class=\"n\">detector</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">config_filepath</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">weights_filepath</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n           <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        gpath_list (list of str): the list of image paths that need detection</span>\n\n<span class=\"sd\">    Kwargs (optional): refer to the PyDarknet documentation for configuration settings</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        iter</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.algo.detect.yolo import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.core_images import LocalizerConfig</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(defaultdb=&#39;WS_ALL&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; gid_list = ibs.images()._rowids[0:1]</span>\n<span class=\"sd\">        &gt;&gt;&gt; gpath_list = ibs.get_image_paths(gid_list)</span>\n<span class=\"sd\">        &gt;&gt;&gt; dpath = &#39;/media/raid/work/WS_ALL/localizer_backup/&#39;</span>\n<span class=\"sd\">        &gt;&gt;&gt; weights_filepath = join(dpath, &#39;detect.yolo.2.39000.weights&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; config_filepath = join(dpath, &#39;detect.yolo.2.cfg&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; config = LocalizerConfig(</span>\n<span class=\"sd\">        &gt;&gt;&gt;     weights_filepath=weights_filepath,</span>\n<span class=\"sd\">        &gt;&gt;&gt;     config_filepath=config_filepath,</span>\n<span class=\"sd\">        &gt;&gt;&gt; )</span>\n<span class=\"sd\">        &gt;&gt;&gt; kwargs = config.asdict()</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.delete_dict_keys(kwargs, [&#39;weights_filepath&#39;, &#39;config_filepath&#39;])</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.delete_dict_keys(kwargs, [&#39;thumbnail_cfg&#39;, &#39;species&#39;, &#39;algo&#39;])</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\"># Run detection</span>\n    <span class=\"k\">if</span> <span class=\"n\">detector</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">classes_filepath</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s1\">&#39;classes_filepath&#39;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"n\">verbose</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;verbose&#39;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"n\">detector</span> <span class=\"o\">=</span> <span class=\"n\">pydarknet</span><span class=\"o\">.</span><span class=\"n\">Darknet_YOLO_Detector</span><span class=\"p\">(</span><span class=\"n\">config_filepath</span><span class=\"o\">=</span><span class=\"n\">config_filepath</span><span class=\"p\">,</span>\n                                                   <span class=\"n\">weights_filepath</span><span class=\"o\">=</span><span class=\"n\">weights_filepath</span><span class=\"p\">,</span>\n                                                   <span class=\"n\">classes_filepath</span><span class=\"o\">=</span><span class=\"n\">classes_filepath</span><span class=\"p\">,</span>\n                                                   <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">verbose</span><span class=\"p\">)</span>\n    <span class=\"c1\">#dark = detector</span>\n    <span class=\"c1\">#input_gpath_list = gpath_list</span>\n    <span class=\"n\">results_iter</span> <span class=\"o\">=</span> <span class=\"n\">detector</span><span class=\"o\">.</span><span class=\"n\">detect</span><span class=\"p\">(</span><span class=\"n\">gpath_list</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    <span class=\"n\">results_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">results_iter</span><span class=\"p\">)</span>\n    <span class=\"k\">del</span> <span class=\"n\">detector</span>\n    <span class=\"k\">return</span> <span class=\"n\">results_list</span></div>\n</pre></div>", "current_page_name": "_modules/ibeis/algo/detect/yolo", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}