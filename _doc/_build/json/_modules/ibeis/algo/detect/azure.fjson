{"parents": [{"link": "../../../../", "title": "Module code"}, {"link": "../../../", "title": "ibeis"}, {"link": "../../", "title": "ibeis.algo"}, {"link": "../", "title": "ibeis.algo.detect"}], "title": "ibeis.algo.detect.azure", "body": "<h1>Source code for ibeis.algo.detect.azure</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"sd\">&quot;&quot;&quot;Interface to Azure object proposals.&quot;&quot;&quot;</span>\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"k\">import</span> <span class=\"n\">absolute_import</span><span class=\"p\">,</span> <span class=\"n\">division</span><span class=\"p\">,</span> <span class=\"n\">print_function</span>\n<span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">six.moves</span> <span class=\"k\">import</span> <span class=\"nb\">zip</span>\n<span class=\"kn\">import</span> <span class=\"nn\">ibeis.constants</span> <span class=\"k\">as</span> <span class=\"nn\">const</span>\n<span class=\"kn\">from</span> <span class=\"nn\">os.path</span> <span class=\"k\">import</span> <span class=\"n\">abspath</span><span class=\"p\">,</span> <span class=\"n\">dirname</span><span class=\"p\">,</span> <span class=\"n\">expanduser</span><span class=\"p\">,</span> <span class=\"n\">join</span><span class=\"p\">,</span> <span class=\"n\">exists</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"p\">(</span><span class=\"nb\">print</span><span class=\"p\">,</span> <span class=\"n\">rrr</span><span class=\"p\">,</span> <span class=\"n\">profile</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">inject2</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">,</span> <span class=\"s1\">&#39;[azure]&#39;</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">VERBOSE_AZURE</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argflag</span><span class=\"p\">(</span><span class=\"s1\">&#39;--verbazure&#39;</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">VERBOSE</span>\n\n\n<span class=\"n\">NPROC_MULTIPLIER</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n\n\n<span class=\"n\">DETECTION_URL</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://southcentralus.api.cognitive.microsoft.com/customvision/v2.0/Prediction/</span><span class=\"si\">%s</span><span class=\"s1\">/image?iterationId=</span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span>\n<span class=\"n\">DETECTION_HEADER</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">&#39;Prediction-Key&#39;</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;Content-Type&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;application/octet-stream&#39;</span>\n<span class=\"p\">}</span>\n<span class=\"n\">DETECTION_DICT</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"kc\">None</span>  <span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s1\">&#39;9bb5790b-7f59-4c0b-b571-21e68d29f4b2&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;a4fb7280-b0be-4706-91c6-7651d116ac46&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;34e5c511adfc449290e10868218906f9&#39;</span><span class=\"p\">),</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"n\">LABEL_URL</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://aiforearth.azure-api.net/species-recognition/v0.1/predict?topK=10&amp;predictMode=classifyOnly&#39;</span>\n<span class=\"n\">LABEL_HEADER</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">&#39;Ocp-Apim-Subscription-Key&#39;</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;Content-Type&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;application/octet-stream&#39;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n<span class=\"n\">LABEL_DICT</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"kc\">None</span>  <span class=\"p\">:</span> <span class=\"s1\">&#39;bdbeefeff1594ce086a79a36f81c3355&#39;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n\n<div class=\"viewcode-block\" id=\"detect_gid_list\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.detect/#ibeis.algo.detect.azure.detect_gid_list\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">detect_gid_list</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">gid_list</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">VERBOSE_AZURE</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Detect gid_list with azure.</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        gid_list (list of int): the list of IBEIS image_rowids that need detection</span>\n\n<span class=\"sd\">    Kwargs (optional): refer to the Azure documentation for configuration settings</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (ibeis.IBEISController):  image analysis api</span>\n<span class=\"sd\">        gid_list (list of int): the list of IBEIS image_rowids that need detection</span>\n\n<span class=\"sd\">    Kwargs:</span>\n<span class=\"sd\">        detector, config_filepath, weights_filepath, verbose</span>\n\n<span class=\"sd\">    Yields:</span>\n<span class=\"sd\">        tuple: (gid, gpath, result_list)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\"># Get new gpaths if downsampling</span>\n    <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">&#39;draw_annots&#39;</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;thumbsize&#39;</span><span class=\"p\">:</span> <span class=\"mi\">900</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">gpath_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_thumbpath</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">,</span> <span class=\"n\">ensure_paths</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">config</span><span class=\"p\">)</span>\n    <span class=\"n\">size_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_sizes</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Run detection</span>\n    <span class=\"n\">results_iter</span> <span class=\"o\">=</span> <span class=\"n\">detect</span><span class=\"p\">(</span><span class=\"n\">gpath_list</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">verbose</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Upscale the results</span>\n    <span class=\"n\">_iter</span> <span class=\"o\">=</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">,</span> <span class=\"n\">size_list</span><span class=\"p\">,</span> <span class=\"n\">results_iter</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">gid</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">gpath</span><span class=\"p\">,</span> <span class=\"n\">result_list</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"n\">_iter</span><span class=\"p\">:</span>\n        <span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"n\">height</span> <span class=\"o\">=</span> <span class=\"n\">size</span>\n\n        <span class=\"c1\"># Upscale the results back up to the original image size</span>\n        <span class=\"k\">for</span> <span class=\"n\">result</span> <span class=\"ow\">in</span> <span class=\"n\">result_list</span><span class=\"p\">:</span>\n            <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s1\">&#39;xtl&#39;</span><span class=\"p\">]</span>    <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">around</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s1\">&#39;xtl&#39;</span><span class=\"p\">]</span>    <span class=\"o\">*</span> <span class=\"n\">width</span> <span class=\"p\">))</span>\n            <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s1\">&#39;ytl&#39;</span><span class=\"p\">]</span>    <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">around</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s1\">&#39;ytl&#39;</span><span class=\"p\">]</span>    <span class=\"o\">*</span> <span class=\"n\">height</span><span class=\"p\">))</span>\n            <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s1\">&#39;width&#39;</span><span class=\"p\">]</span>  <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">around</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s1\">&#39;width&#39;</span><span class=\"p\">]</span>  <span class=\"o\">*</span> <span class=\"n\">width</span> <span class=\"p\">))</span>\n            <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s1\">&#39;height&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">around</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s1\">&#39;height&#39;</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">height</span><span class=\"p\">))</span>\n\n        <span class=\"k\">yield</span> <span class=\"p\">(</span><span class=\"n\">gid</span><span class=\"p\">,</span> <span class=\"n\">gpath</span><span class=\"p\">,</span> <span class=\"n\">result_list</span><span class=\"p\">)</span></div>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_detect</span><span class=\"p\">(</span><span class=\"n\">gpath</span><span class=\"p\">,</span> <span class=\"n\">prediction_project</span><span class=\"p\">,</span> <span class=\"n\">prediction_iteration</span><span class=\"p\">,</span> <span class=\"n\">prediction_model</span><span class=\"p\">):</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">gpath</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rb&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">image_file</span><span class=\"p\">:</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">image_file</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n\n    <span class=\"n\">prediction_url</span> <span class=\"o\">=</span> <span class=\"n\">DETECTION_URL</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">prediction_project</span><span class=\"p\">,</span> <span class=\"n\">prediction_iteration</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n    <span class=\"n\">prediction_header</span> <span class=\"o\">=</span> <span class=\"n\">DETECTION_HEADER</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n    <span class=\"n\">prediction_header</span><span class=\"p\">[</span><span class=\"s1\">&#39;Prediction-Key&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">prediction_model</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"o\">=</span><span class=\"n\">prediction_url</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">prediction_header</span><span class=\"p\">)</span>\n\n    <span class=\"n\">response_json</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span>\n    <span class=\"n\">output_list</span> <span class=\"o\">=</span> <span class=\"n\">response_json</span><span class=\"p\">[</span><span class=\"s1\">&#39;predictions&#39;</span><span class=\"p\">]</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">output_list</span>\n\n\n<div class=\"viewcode-block\" id=\"detect\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.detect/#ibeis.algo.detect.azure.detect\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">detect</span><span class=\"p\">(</span><span class=\"n\">gpath_list</span><span class=\"p\">,</span> <span class=\"n\">config_filepath</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">VERBOSE_AZURE</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Detect image filepaths with azure.</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        gpath_list (list of str): the list of image paths that need proposal candidates</span>\n\n<span class=\"sd\">    Kwargs (optional): refer to the Azure documentation for configuration settings</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        iter</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\"># Get correct weight if specified with shorthand</span>\n    <span class=\"k\">if</span> <span class=\"n\">config_filepath</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">DETECTION_DICT</span><span class=\"p\">:</span>\n        <span class=\"n\">config_filepath</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"n\">prediction</span> <span class=\"o\">=</span> <span class=\"n\">DETECTION_DICT</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">config_filepath</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">prediction</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Azure detection needs to have a model configuration&#39;</span>\n    <span class=\"n\">prediction_project</span><span class=\"p\">,</span> <span class=\"n\">prediction_iteration</span><span class=\"p\">,</span> <span class=\"n\">prediction_model</span> <span class=\"o\">=</span> <span class=\"n\">prediction</span>\n\n    <span class=\"n\">prediction_project_list</span>   <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">prediction_project</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">gpath_list</span><span class=\"p\">)</span>\n    <span class=\"n\">prediction_iteration_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">prediction_iteration</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">gpath_list</span><span class=\"p\">)</span>\n    <span class=\"n\">prediction_model_list</span>     <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">prediction_model</span><span class=\"p\">]</span>   <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">gpath_list</span><span class=\"p\">)</span>\n    <span class=\"n\">arg_iter</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">gpath_list</span><span class=\"p\">,</span> <span class=\"n\">prediction_project_list</span><span class=\"p\">,</span> <span class=\"n\">prediction_iteration_list</span><span class=\"p\">,</span> <span class=\"n\">prediction_model_list</span><span class=\"p\">))</span>\n    <span class=\"n\">nprocs</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">util_parallel</span><span class=\"o\">.</span><span class=\"n\">get_default_numprocs</span><span class=\"p\">()</span>\n    <span class=\"n\">nprocs</span> <span class=\"o\">*=</span> <span class=\"n\">NPROC_MULTIPLIER</span>\n    <span class=\"n\">nprocs</span> <span class=\"o\">=</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">nprocs</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">arg_iter</span><span class=\"p\">))</span>\n    <span class=\"n\">outputs_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">util_parallel</span><span class=\"o\">.</span><span class=\"n\">generate2</span><span class=\"p\">(</span><span class=\"n\">_detect</span><span class=\"p\">,</span> <span class=\"n\">arg_iter</span><span class=\"p\">,</span> <span class=\"n\">nprocs</span><span class=\"o\">=</span><span class=\"n\">nprocs</span><span class=\"p\">,</span> <span class=\"n\">ordered</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Execute detector for each image</span>\n    <span class=\"n\">results_list_</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">output_list</span> <span class=\"ow\">in</span> <span class=\"n\">outputs_list</span><span class=\"p\">:</span>\n        <span class=\"n\">result_list_</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">output</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">output_list</span><span class=\"p\">):</span>\n            <span class=\"n\">result_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                <span class=\"s1\">&#39;xtl&#39;</span>        <span class=\"p\">:</span> <span class=\"n\">output</span><span class=\"p\">[</span><span class=\"s1\">&#39;boundingBox&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;left&#39;</span><span class=\"p\">],</span>\n                <span class=\"s1\">&#39;ytl&#39;</span>        <span class=\"p\">:</span> <span class=\"n\">output</span><span class=\"p\">[</span><span class=\"s1\">&#39;boundingBox&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;top&#39;</span><span class=\"p\">],</span>\n                <span class=\"s1\">&#39;width&#39;</span>      <span class=\"p\">:</span> <span class=\"n\">output</span><span class=\"p\">[</span><span class=\"s1\">&#39;boundingBox&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;width&#39;</span><span class=\"p\">],</span>\n                <span class=\"s1\">&#39;height&#39;</span>     <span class=\"p\">:</span> <span class=\"n\">output</span><span class=\"p\">[</span><span class=\"s1\">&#39;boundingBox&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;height&#39;</span><span class=\"p\">],</span>\n                <span class=\"s1\">&#39;class&#39;</span>      <span class=\"p\">:</span> <span class=\"n\">output</span><span class=\"p\">[</span><span class=\"s1\">&#39;tagName&#39;</span><span class=\"p\">],</span>\n                <span class=\"s1\">&#39;confidence&#39;</span> <span class=\"p\">:</span> <span class=\"n\">output</span><span class=\"p\">[</span><span class=\"s1\">&#39;probability&#39;</span><span class=\"p\">],</span>\n            <span class=\"p\">}</span>\n            <span class=\"n\">result_list_</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">result_dict</span><span class=\"p\">)</span>\n        <span class=\"n\">results_list_</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">result_list_</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">results_list_</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">gpath_list</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s1\">&#39;Azure did not return valid data&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"n\">results_list</span> <span class=\"o\">=</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">gpath_list</span><span class=\"p\">,</span> <span class=\"n\">results_list_</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">results_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"label_aid_list\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.detect/#ibeis.algo.detect.azure.label_aid_list\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">label_aid_list</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">VERBOSE_AZURE</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Classify aid_list with azure.</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        aid_list (list of int): the list of IBEIS annotation rowids that need classifying</span>\n\n<span class=\"sd\">    Kwargs (optional): refer to the Azure documentation for configuration settings</span>\n\n<span class=\"sd\">    Yields:</span>\n<span class=\"sd\">        tuple: (gid, gpath, result_list)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\"># Get new gpaths if downsampling</span>\n    <span class=\"n\">chip_filepath_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_chip_fpath</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">ensure</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Run detection</span>\n    <span class=\"n\">results_iter</span> <span class=\"o\">=</span> <span class=\"n\">label</span><span class=\"p\">(</span><span class=\"n\">chip_filepath_list</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">verbose</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Package the results</span>\n    <span class=\"k\">for</span> <span class=\"n\">chip_filepath</span><span class=\"p\">,</span> <span class=\"n\">result_dict</span> <span class=\"ow\">in</span> <span class=\"n\">results_iter</span><span class=\"p\">:</span>\n        <span class=\"n\">species_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take_column</span><span class=\"p\">(</span><span class=\"n\">result_dict</span><span class=\"p\">,</span> <span class=\"s1\">&#39;species_common&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">confidence_list</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take_column</span><span class=\"p\">(</span><span class=\"n\">result_dict</span><span class=\"p\">,</span> <span class=\"s1\">&#39;confidence&#39;</span><span class=\"p\">))</span>\n        <span class=\"n\">confidence_list</span> <span class=\"o\">*=</span> <span class=\"mf\">0.01</span>\n        <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">argmax</span><span class=\"p\">(</span><span class=\"n\">confidence_list</span><span class=\"p\">)</span>\n\n        <span class=\"n\">species</span> <span class=\"o\">=</span> <span class=\"n\">species_list</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span>\n        <span class=\"n\">confidence</span> <span class=\"o\">=</span> <span class=\"n\">confidence_list</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span>\n        <span class=\"n\">viewpoint</span> <span class=\"o\">=</span> <span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">UNKNOWN</span>\n        <span class=\"n\">quality</span> <span class=\"o\">=</span> <span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">QUAL_UNKNOWN</span>\n        <span class=\"n\">orientation</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n        <span class=\"n\">probability_dict</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">species_list</span><span class=\"p\">,</span> <span class=\"n\">confidence_list</span><span class=\"p\">))</span>\n\n        <span class=\"k\">yield</span> <span class=\"n\">confidence</span><span class=\"p\">,</span> <span class=\"n\">species</span><span class=\"p\">,</span> <span class=\"n\">viewpoint</span><span class=\"p\">,</span> <span class=\"n\">quality</span><span class=\"p\">,</span> <span class=\"n\">orientation</span><span class=\"p\">,</span> <span class=\"n\">probability_dict</span></div>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_label</span><span class=\"p\">(</span><span class=\"n\">chip_filepath</span><span class=\"p\">,</span> <span class=\"n\">label_key</span><span class=\"p\">):</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">chip_filepath</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rb&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">image_file</span><span class=\"p\">:</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">image_file</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n\n    <span class=\"n\">label_url</span> <span class=\"o\">=</span> <span class=\"n\">LABEL_URL</span>\n    <span class=\"n\">label_header</span> <span class=\"o\">=</span> <span class=\"n\">LABEL_HEADER</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n    <span class=\"n\">label_header</span><span class=\"p\">[</span><span class=\"s1\">&#39;Ocp-Apim-Subscription-Key&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">label_key</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"o\">=</span><span class=\"n\">label_url</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">label_header</span><span class=\"p\">)</span>\n\n    <span class=\"n\">response_json</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span>\n    <span class=\"n\">output_list</span> <span class=\"o\">=</span> <span class=\"n\">response_json</span><span class=\"p\">[</span><span class=\"s1\">&#39;predictions&#39;</span><span class=\"p\">]</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">output_list</span>\n\n\n<div class=\"viewcode-block\" id=\"label\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.detect/#ibeis.algo.detect.azure.label\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">label</span><span class=\"p\">(</span><span class=\"n\">chip_filepath_list</span><span class=\"p\">,</span> <span class=\"n\">labeler_weight_filepath</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">VERBOSE_AZURE</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Classify aid_list with azure.&quot;&quot;&quot;</span>\n    <span class=\"c1\"># Get correct weight if specified with shorthand</span>\n    <span class=\"k\">if</span> <span class=\"n\">labeler_weight_filepath</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">LABEL_DICT</span><span class=\"p\">:</span>\n        <span class=\"n\">labeler_weight_filepath</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"n\">label_key</span> <span class=\"o\">=</span> <span class=\"n\">LABEL_DICT</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">labeler_weight_filepath</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">label_key</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Azure labeler needs to have a model configuration&#39;</span>\n\n    <span class=\"n\">label_key_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">label_key</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">chip_filepath_list</span><span class=\"p\">)</span>\n    <span class=\"n\">arg_iter</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">chip_filepath_list</span><span class=\"p\">,</span> <span class=\"n\">label_key_list</span><span class=\"p\">))</span>\n\n    <span class=\"n\">nprocs</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">util_parallel</span><span class=\"o\">.</span><span class=\"n\">get_default_numprocs</span><span class=\"p\">()</span>\n    <span class=\"n\">nprocs</span> <span class=\"o\">*=</span> <span class=\"n\">NPROC_MULTIPLIER</span>\n    <span class=\"n\">nprocs</span> <span class=\"o\">=</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">nprocs</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">arg_iter</span><span class=\"p\">))</span>\n    <span class=\"n\">outputs_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">util_parallel</span><span class=\"o\">.</span><span class=\"n\">generate2</span><span class=\"p\">(</span><span class=\"n\">_label</span><span class=\"p\">,</span> <span class=\"n\">arg_iter</span><span class=\"p\">,</span> <span class=\"n\">nprocs</span><span class=\"o\">=</span><span class=\"n\">nprocs</span><span class=\"p\">,</span> <span class=\"n\">ordered</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Execute detector for each image</span>\n    <span class=\"n\">results_list_</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">outputs_list</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">results_list_</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">chip_filepath_list</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s1\">&#39;Azure did not return valid data&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"n\">results_list</span> <span class=\"o\">=</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">chip_filepath_list</span><span class=\"p\">,</span> <span class=\"n\">results_list_</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">results_list</span></div>\n</pre></div>", "current_page_name": "_modules/ibeis/algo/detect/azure", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}