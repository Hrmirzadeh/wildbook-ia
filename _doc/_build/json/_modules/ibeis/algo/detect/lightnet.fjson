{"parents": [{"link": "../../../../", "title": "Module code"}, {"link": "../../../", "title": "ibeis"}, {"link": "../../", "title": "ibeis.algo"}, {"link": "../", "title": "ibeis.algo.detect"}], "title": "ibeis.algo.detect.lightnet", "body": "<h1>Source code for ibeis.algo.detect.lightnet</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"sd\">&quot;&quot;&quot;Interface to Lightnet object proposals.&quot;&quot;&quot;</span>\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"k\">import</span> <span class=\"n\">absolute_import</span><span class=\"p\">,</span> <span class=\"n\">division</span><span class=\"p\">,</span> <span class=\"n\">print_function</span>\n<span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n<span class=\"kn\">from</span> <span class=\"nn\">six.moves</span> <span class=\"k\">import</span> <span class=\"nb\">zip</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">os.path</span> <span class=\"k\">import</span> <span class=\"n\">abspath</span><span class=\"p\">,</span> <span class=\"n\">dirname</span><span class=\"p\">,</span> <span class=\"n\">expanduser</span><span class=\"p\">,</span> <span class=\"n\">join</span><span class=\"p\">,</span> <span class=\"n\">exists</span><span class=\"p\">,</span> <span class=\"n\">splitext</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tqdm</span> <span class=\"k\">import</span> <span class=\"n\">tqdm</span>\n<span class=\"kn\">import</span> <span class=\"nn\">cv2</span>\n<span class=\"p\">(</span><span class=\"nb\">print</span><span class=\"p\">,</span> <span class=\"n\">rrr</span><span class=\"p\">,</span> <span class=\"n\">profile</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">inject2</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">,</span> <span class=\"s1\">&#39;[lightnet]&#39;</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argflag</span><span class=\"p\">(</span><span class=\"s1\">&#39;--no-lightnet&#39;</span><span class=\"p\">):</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">torch</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">torchvision</span> <span class=\"k\">import</span> <span class=\"n\">transforms</span> <span class=\"k\">as</span> <span class=\"n\">tf</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">lightnet</span> <span class=\"k\">as</span> <span class=\"nn\">ln</span>\n    <span class=\"k\">except</span> <span class=\"ne\">ImportError</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;WARNING Failed to import lightnet. &#39;</span>\n              <span class=\"s1\">&#39;PyDarknet YOLO detection is unavailable&#39;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">SUPER_STRICT</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span>\n\n\n<span class=\"n\">VERBOSE_LN</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argflag</span><span class=\"p\">(</span><span class=\"s1\">&#39;--verbln&#39;</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">VERBOSE</span>\n\n\n<span class=\"n\">CONFIG_URL_DICT</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">&#39;hammerhead&#39;</span>                 <span class=\"p\">:</span> <span class=\"s1\">&#39;https://cthulhu.dyn.wildme.io/public/models/detect.lightnet.shark_hammerhead.py&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;jaguar&#39;</span>                     <span class=\"p\">:</span> <span class=\"s1\">&#39;https://cthulhu.dyn.wildme.io/public/models/detect.lightnet.jaguar.py&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;lynx&#39;</span>                       <span class=\"p\">:</span> <span class=\"s1\">&#39;https://cthulhu.dyn.wildme.io/public/models/detect.lightnet.lynx.py&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;manta&#39;</span>                      <span class=\"p\">:</span> <span class=\"s1\">&#39;https://cthulhu.dyn.wildme.io/public/models/detect.lightnet.manta_ray_giant.py&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;seaturtle&#39;</span>                  <span class=\"p\">:</span> <span class=\"s1\">&#39;https://cthulhu.dyn.wildme.io/public/models/detect.lightnet.sea_turtle.py&#39;</span><span class=\"p\">,</span>\n\n    <span class=\"s1\">&#39;hendrik_elephant&#39;</span>           <span class=\"p\">:</span> <span class=\"s1\">&#39;https://cthulhu.dyn.wildme.io/public/models/detect.lightnet.hendrik.elephant.py&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;hendrik_elephant_ears&#39;</span>      <span class=\"p\">:</span> <span class=\"s1\">&#39;https://cthulhu.dyn.wildme.io/public/models/detect.lightnet.hendrik.elephant.ears.py&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;hendrik_elephant_ears_left&#39;</span> <span class=\"p\">:</span> <span class=\"s1\">&#39;https://cthulhu.dyn.wildme.io/public/models/detect.lightnet.hendrik.elephant.ears.left.py&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;hendrik_dorsal&#39;</span>             <span class=\"p\">:</span> <span class=\"s1\">&#39;https://cthulhu.dyn.wildme.io/public/models/detect.lightnet.hendrik.dorsal.py&#39;</span><span class=\"p\">,</span>\n\n    <span class=\"s1\">&#39;candidacy&#39;</span>                  <span class=\"p\">:</span> <span class=\"s1\">&#39;https://cthulhu.dyn.wildme.io/public/models/detect.lightnet.candidacy.py&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;ggr2&#39;</span>                       <span class=\"p\">:</span> <span class=\"s1\">&#39;https://cthulhu.dyn.wildme.io/public/models/detect.lightnet.ggr2.py&#39;</span><span class=\"p\">,</span>\n\n    <span class=\"kc\">None</span>                         <span class=\"p\">:</span> <span class=\"s1\">&#39;https://cthulhu.dyn.wildme.io/public/models/detect.lightnet.candidacy.py&#39;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_parse_weights_from_cfg</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">url</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">&#39;.py&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;.weights&#39;</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_parse_class_list</span><span class=\"p\">(</span><span class=\"n\">config_filepath</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Load classes from file into the class list</span>\n    <span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"n\">ln</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">HyperParameters</span><span class=\"o\">.</span><span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"n\">config_filepath</span><span class=\"p\">)</span>\n    <span class=\"n\">class_list</span> <span class=\"o\">=</span> <span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">class_label_map</span>\n    <span class=\"k\">return</span> <span class=\"n\">class_list</span>\n\n\n<div class=\"viewcode-block\" id=\"detect_gid_list\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.detect/#ibeis.algo.detect.lightnet.detect_gid_list\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">detect_gid_list</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">gid_list</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">VERBOSE_LN</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Detect gid_list with lightnet.</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        gid_list (list of int): the list of IBEIS image_rowids that need detection</span>\n\n<span class=\"sd\">    Kwargs (optional): refer to the Lightnet documentation for configuration settings</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (ibeis.IBEISController):  image analysis api</span>\n<span class=\"sd\">        gid_list (list of int): the list of IBEIS image_rowids that need detection</span>\n\n<span class=\"sd\">    Kwargs:</span>\n<span class=\"sd\">        detector, config_filepath, weight_filepath, verbose</span>\n\n<span class=\"sd\">    Yields:</span>\n<span class=\"sd\">        tuple: (gid, gpath, result_list)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\"># Get new gpaths if downsampling</span>\n    <span class=\"n\">gpath_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_image_paths</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Run detection</span>\n    <span class=\"n\">results_iter</span> <span class=\"o\">=</span> <span class=\"n\">detect</span><span class=\"p\">(</span><span class=\"n\">gpath_list</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">verbose</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Upscale the results</span>\n    <span class=\"n\">_iter</span> <span class=\"o\">=</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">gid_list</span><span class=\"p\">,</span> <span class=\"n\">results_iter</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">gid</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">gpath</span><span class=\"p\">,</span> <span class=\"n\">result_list</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"n\">_iter</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Upscale the results back up to the original image size</span>\n        <span class=\"k\">for</span> <span class=\"n\">result</span> <span class=\"ow\">in</span> <span class=\"n\">result_list</span><span class=\"p\">:</span>\n            <span class=\"n\">bbox</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s1\">&#39;xtl&#39;</span><span class=\"p\">],</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s1\">&#39;ytl&#39;</span><span class=\"p\">],</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s1\">&#39;width&#39;</span><span class=\"p\">],</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s1\">&#39;height&#39;</span><span class=\"p\">],</span> <span class=\"p\">)</span>\n            <span class=\"n\">bbox_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"n\">bbox</span> <span class=\"p\">]</span>\n            <span class=\"n\">bbox</span> <span class=\"o\">=</span> <span class=\"n\">bbox_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s1\">&#39;xtl&#39;</span><span class=\"p\">],</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s1\">&#39;ytl&#39;</span><span class=\"p\">],</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s1\">&#39;width&#39;</span><span class=\"p\">],</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s1\">&#39;height&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">bbox</span>\n        <span class=\"k\">yield</span> <span class=\"p\">(</span><span class=\"n\">gid</span><span class=\"p\">,</span> <span class=\"n\">gpath</span><span class=\"p\">,</span> <span class=\"n\">result_list</span><span class=\"p\">)</span></div>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_create_network</span><span class=\"p\">(</span><span class=\"n\">config_filepath</span><span class=\"p\">,</span> <span class=\"n\">weight_filepath</span><span class=\"p\">,</span> <span class=\"n\">conf_thresh</span><span class=\"p\">,</span> <span class=\"n\">nms_thresh</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Create the lightnet network.&quot;&quot;&quot;</span>\n    <span class=\"n\">device</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">device</span><span class=\"p\">(</span><span class=\"s1\">&#39;cpu&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">cuda</span><span class=\"o\">.</span><span class=\"n\">is_available</span><span class=\"p\">():</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[lightnet] CUDA enabled&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">device</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">device</span><span class=\"p\">(</span><span class=\"s1\">&#39;cuda&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[lightnet] CUDA not available&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"n\">ln</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">HyperParameters</span><span class=\"o\">.</span><span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"n\">config_filepath</span><span class=\"p\">)</span>\n    <span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">weight_filepath</span><span class=\"p\">)</span>\n    <span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">device</span> <span class=\"o\">=</span> <span class=\"n\">device</span>\n\n    <span class=\"c1\"># Update conf_thresh and nms_thresh in postpsocess</span>\n    <span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">network</span><span class=\"o\">.</span><span class=\"n\">postprocess</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">conf_thresh</span> <span class=\"o\">=</span> <span class=\"n\">conf_thresh</span>\n    <span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">network</span><span class=\"o\">.</span><span class=\"n\">postprocess</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">nms_thresh</span> <span class=\"o\">=</span> <span class=\"n\">nms_thresh</span>\n\n    <span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">network</span><span class=\"o\">.</span><span class=\"n\">eval</span><span class=\"p\">()</span>\n    <span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">network</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">params</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_detect</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">,</span> <span class=\"n\">gpath_list</span><span class=\"p\">,</span> <span class=\"n\">flip</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Perform a detection.&quot;&quot;&quot;</span>\n    <span class=\"c1\"># Load image</span>\n    <span class=\"n\">imgs</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">img_sizes</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">gpath</span> <span class=\"ow\">in</span> <span class=\"n\">gpath_list</span><span class=\"p\">:</span>\n        <span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">imread</span><span class=\"p\">(</span><span class=\"n\">gpath</span><span class=\"p\">)</span>\n        <span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">cvtColor</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">COLOR_BGR2RGB</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">flip</span><span class=\"p\">:</span>\n            <span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">flip</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n        <span class=\"n\">img_h</span><span class=\"p\">,</span> <span class=\"n\">img_w</span> <span class=\"o\">=</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[:</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n        <span class=\"n\">img_size</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">img_w</span><span class=\"p\">,</span> <span class=\"n\">img_h</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n        <span class=\"n\">img_sizes</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">img_size</span><span class=\"p\">)</span>\n\n        <span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">ln</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">Letterbox</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"n\">dimension</span><span class=\"o\">=</span><span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">input_dimension</span><span class=\"p\">)</span>\n        <span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">ToTensor</span><span class=\"p\">()(</span><span class=\"n\">img</span><span class=\"p\">)</span>\n        <span class=\"n\">imgs</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">)</span>\n\n    <span class=\"n\">imgs</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">stack</span><span class=\"p\">(</span><span class=\"n\">imgs</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">imgs</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"mi\">4</span><span class=\"p\">:</span>\n        <span class=\"n\">imgs</span><span class=\"o\">.</span><span class=\"n\">unsqueeze_</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">cuda</span><span class=\"o\">.</span><span class=\"n\">is_available</span><span class=\"p\">():</span>\n        <span class=\"n\">imgs</span> <span class=\"o\">=</span> <span class=\"n\">imgs</span><span class=\"o\">.</span><span class=\"n\">cuda</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># Run detector</span>\n    <span class=\"k\">if</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">__version__</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">&#39;0.3&#39;</span><span class=\"p\">):</span>\n        <span class=\"n\">imgs_tf</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">autograd</span><span class=\"o\">.</span><span class=\"n\">Variable</span><span class=\"p\">(</span><span class=\"n\">imgs</span><span class=\"p\">,</span> <span class=\"n\">volatile</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">network</span><span class=\"p\">(</span><span class=\"n\">imgs_tf</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">with</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">no_grad</span><span class=\"p\">():</span>\n            <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">network</span><span class=\"p\">(</span><span class=\"n\">imgs</span><span class=\"p\">)</span>\n\n    <span class=\"n\">result_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">img_size</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">,</span> <span class=\"n\">img_sizes</span><span class=\"p\">):</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">ln</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">ReverseLetterbox</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"p\">([</span><span class=\"n\">result</span><span class=\"p\">],</span> <span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">input_dimension</span><span class=\"p\">,</span> <span class=\"n\">img_size</span><span class=\"p\">)</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">result_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">result_list</span><span class=\"p\">,</span> <span class=\"n\">img_sizes</span>\n\n\n<div class=\"viewcode-block\" id=\"detect\"><a class=\"viewcode-back\" href=\"../../../../../ibeis.algo.detect/#ibeis.algo.detect.lightnet.detect\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">detect</span><span class=\"p\">(</span><span class=\"n\">gpath_list</span><span class=\"p\">,</span> <span class=\"n\">config_filepath</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">weight_filepath</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n           <span class=\"n\">classes_filepath</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">sensitivity</span><span class=\"o\">=</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">VERBOSE_LN</span><span class=\"p\">,</span>\n           <span class=\"n\">flip</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Detect image filepaths with lightnet.</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        gpath_list (list of str): the list of image paths that need proposal candidates</span>\n\n<span class=\"sd\">    Kwargs (optional): refer to the Lightnet documentation for configuration settings</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        iter</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\"># Get correct weight if specified with shorthand</span>\n    <span class=\"n\">config_url</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"k\">if</span> <span class=\"n\">config_filepath</span> <span class=\"ow\">in</span> <span class=\"n\">CONFIG_URL_DICT</span><span class=\"p\">:</span>\n        <span class=\"n\">config_url</span> <span class=\"o\">=</span> <span class=\"n\">CONFIG_URL_DICT</span><span class=\"p\">[</span><span class=\"n\">config_filepath</span><span class=\"p\">]</span>\n        <span class=\"n\">config_filepath</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">grab_file_url</span><span class=\"p\">(</span><span class=\"n\">config_url</span><span class=\"p\">,</span> <span class=\"n\">appname</span><span class=\"o\">=</span><span class=\"s1\">&#39;lightnet&#39;</span><span class=\"p\">,</span>\n                                           <span class=\"n\">check_hash</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Get correct weights if specified with shorthand</span>\n    <span class=\"k\">if</span> <span class=\"n\">weight_filepath</span> <span class=\"ow\">in</span> <span class=\"n\">CONFIG_URL_DICT</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">weight_filepath</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">config_url</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">config_url_</span> <span class=\"o\">=</span> <span class=\"n\">config_url</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">config_url_</span> <span class=\"o\">=</span> <span class=\"n\">CONFIG_URL_DICT</span><span class=\"p\">[</span><span class=\"n\">weight_filepath</span><span class=\"p\">]</span>\n        <span class=\"n\">weight_url</span> <span class=\"o\">=</span> <span class=\"n\">_parse_weights_from_cfg</span><span class=\"p\">(</span><span class=\"n\">config_url_</span><span class=\"p\">)</span>\n        <span class=\"n\">weight_filepath</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">grab_file_url</span><span class=\"p\">(</span><span class=\"n\">weight_url</span><span class=\"p\">,</span> <span class=\"n\">appname</span><span class=\"o\">=</span><span class=\"s1\">&#39;lightnet&#39;</span><span class=\"p\">,</span>\n                                            <span class=\"n\">check_hash</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"k\">assert</span> <span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">config_filepath</span><span class=\"p\">)</span>\n    <span class=\"n\">config_filepath</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">truepath</span><span class=\"p\">(</span><span class=\"n\">config_filepath</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">weight_filepath</span><span class=\"p\">)</span>\n    <span class=\"n\">weight_filepath</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">truepath</span><span class=\"p\">(</span><span class=\"n\">weight_filepath</span><span class=\"p\">)</span>\n\n    <span class=\"n\">conf_thresh</span> <span class=\"o\">=</span> <span class=\"n\">sensitivity</span>\n    <span class=\"n\">nms_thresh</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>           <span class=\"c1\"># Turn off NMS</span>\n\n    <span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"n\">_create_network</span><span class=\"p\">(</span><span class=\"n\">config_filepath</span><span class=\"p\">,</span> <span class=\"n\">weight_filepath</span><span class=\"p\">,</span> <span class=\"n\">conf_thresh</span><span class=\"p\">,</span> <span class=\"n\">nms_thresh</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Execute detector for each image</span>\n    <span class=\"n\">results_list_</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">gpath_batch_list</span> <span class=\"ow\">in</span> <span class=\"n\">tqdm</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ichunks</span><span class=\"p\">(</span><span class=\"n\">gpath_list</span><span class=\"p\">,</span> <span class=\"n\">batch_size</span><span class=\"p\">)):</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">result_list</span><span class=\"p\">,</span> <span class=\"n\">img_sizes</span> <span class=\"o\">=</span> <span class=\"n\">_detect</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">,</span> <span class=\"n\">gpath_batch_list</span><span class=\"p\">,</span> <span class=\"n\">flip</span><span class=\"o\">=</span><span class=\"n\">flip</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">:</span>\n            <span class=\"n\">result_list</span><span class=\"p\">,</span> <span class=\"n\">img_sizes</span> <span class=\"o\">=</span> <span class=\"p\">[],</span> <span class=\"p\">[]</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">img_size</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">result_list</span><span class=\"p\">,</span> <span class=\"n\">img_sizes</span><span class=\"p\">):</span>\n            <span class=\"n\">img_w</span><span class=\"p\">,</span> <span class=\"n\">img_h</span> <span class=\"o\">=</span> <span class=\"n\">img_size</span>\n\n            <span class=\"n\">result_list_</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">for</span> <span class=\"n\">output</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">):</span>\n                <span class=\"n\">xtl</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">around</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">x_top_left</span><span class=\"p\">)))</span>\n                <span class=\"n\">ytl</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">around</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">y_top_left</span><span class=\"p\">)))</span>\n                <span class=\"n\">xbr</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">around</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">x_top_left</span> <span class=\"o\">+</span> <span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"p\">)))</span>\n                <span class=\"n\">ybr</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">around</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">y_top_left</span> <span class=\"o\">+</span> <span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">height</span><span class=\"p\">)))</span>\n                <span class=\"n\">width</span> <span class=\"o\">=</span> <span class=\"n\">xbr</span> <span class=\"o\">-</span> <span class=\"n\">xtl</span>\n                <span class=\"n\">height</span> <span class=\"o\">=</span> <span class=\"n\">ybr</span> <span class=\"o\">-</span> <span class=\"n\">ytl</span>\n                <span class=\"n\">class_</span> <span class=\"o\">=</span> <span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">class_label</span>\n                <span class=\"n\">conf</span> <span class=\"o\">=</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">confidence</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">flip</span><span class=\"p\">:</span>\n                    <span class=\"n\">xtl</span> <span class=\"o\">=</span> <span class=\"n\">img_w</span> <span class=\"o\">-</span> <span class=\"n\">xbr</span>\n                <span class=\"n\">result_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                    <span class=\"s1\">&#39;xtl&#39;</span>        <span class=\"p\">:</span> <span class=\"n\">xtl</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;ytl&#39;</span>        <span class=\"p\">:</span> <span class=\"n\">ytl</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;width&#39;</span>      <span class=\"p\">:</span> <span class=\"n\">width</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;height&#39;</span>     <span class=\"p\">:</span> <span class=\"n\">height</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;class&#39;</span>      <span class=\"p\">:</span> <span class=\"n\">class_</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;confidence&#39;</span> <span class=\"p\">:</span> <span class=\"n\">conf</span><span class=\"p\">,</span>\n                <span class=\"p\">}</span>\n                <span class=\"n\">result_list_</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">result_dict</span><span class=\"p\">)</span>\n            <span class=\"n\">results_list_</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">result_list_</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">results_list_</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">gpath_list</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s1\">&#39;Lightnet did not return valid data&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"n\">results_list</span> <span class=\"o\">=</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">gpath_list</span><span class=\"p\">,</span> <span class=\"n\">results_list_</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">results_list</span></div>\n</pre></div>", "current_page_name": "_modules/ibeis/algo/detect/lightnet", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}