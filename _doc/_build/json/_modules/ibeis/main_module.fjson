{"parents": [{"link": "../../", "title": "Module code"}, {"link": "../", "title": "ibeis"}], "title": "ibeis.main_module", "body": "<h1>Source code for ibeis.main_module</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">This module defines the entry point into the IBEIS system</span>\n<span class=\"sd\">ibeis.opendb and ibeis.main are the main entry points</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"k\">import</span> <span class=\"n\">absolute_import</span><span class=\"p\">,</span> <span class=\"n\">division</span><span class=\"p\">,</span> <span class=\"n\">print_function</span>\n<span class=\"c1\">#from six.moves import builtins</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">multiprocessing</span>\n\n<span class=\"c1\">#try:</span>\n<span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n<span class=\"n\">profile</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">profile</span>\n<span class=\"c1\">#profile = getattr(builtins, &#39;profile&#39;)</span>\n<span class=\"c1\">#except AttributeError:</span>\n<span class=\"c1\">#def profile(func):</span>\n<span class=\"c1\">#    return func</span>\n\n<span class=\"n\">QUIET</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;--quiet&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span>\n<span class=\"n\">NOT_QUIET</span> <span class=\"o\">=</span> <span class=\"ow\">not</span> <span class=\"n\">QUIET</span>\n<span class=\"n\">USE_GUI</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;--gui&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span> <span class=\"ow\">or</span> <span class=\"s1\">&#39;--nogui&#39;</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_on_ctrl_c</span><span class=\"p\">(</span><span class=\"n\">signal</span><span class=\"p\">,</span> <span class=\"n\">frame</span><span class=\"p\">):</span>\n    <span class=\"n\">proc_name</span> <span class=\"o\">=</span> <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">current_process</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">name</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[ibeis.main_module] Caught ctrl+c in </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">proc_name</span><span class=\"p\">,))</span>\n    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"c1\"># try:</span>\n    <span class=\"c1\">#     _close_parallel()</span>\n    <span class=\"c1\"># except Exception as ex:</span>\n    <span class=\"c1\">#     print(&#39;Something very bad happened&#39; + repr(ex))</span>\n    <span class=\"c1\"># finally:</span>\n    <span class=\"c1\">#     print(&#39;[ibeis.main_module] sys.exit(0)&#39;)</span>\n    <span class=\"c1\">#     sys.exit(0)</span>\n\n<span class=\"c1\">#-----------------------</span>\n<span class=\"c1\"># private init functions</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_init_signals</span><span class=\"p\">():</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">signal</span>\n    <span class=\"n\">signal</span><span class=\"o\">.</span><span class=\"n\">signal</span><span class=\"p\">(</span><span class=\"n\">signal</span><span class=\"o\">.</span><span class=\"n\">SIGINT</span><span class=\"p\">,</span> <span class=\"n\">_on_ctrl_c</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_reset_signals</span><span class=\"p\">():</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">signal</span>\n    <span class=\"n\">signal</span><span class=\"o\">.</span><span class=\"n\">signal</span><span class=\"p\">(</span><span class=\"n\">signal</span><span class=\"o\">.</span><span class=\"n\">SIGINT</span><span class=\"p\">,</span> <span class=\"n\">signal</span><span class=\"o\">.</span><span class=\"n\">SIG_DFL</span><span class=\"p\">)</span>  <span class=\"c1\"># reset ctrl+c behavior</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_parse_args</span><span class=\"p\">():</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis</span> <span class=\"k\">import</span> <span class=\"n\">params</span>\n    <span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">parse_args</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_init_matplotlib</span><span class=\"p\">():</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">plottool</span> <span class=\"k\">import</span> <span class=\"n\">__MPL_INIT__</span>\n    <span class=\"n\">__MPL_INIT__</span><span class=\"o\">.</span><span class=\"n\">init_matplotlib</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_init_gui</span><span class=\"p\">(</span><span class=\"n\">activate</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">guitool</span>\n    <span class=\"k\">if</span> <span class=\"n\">NOT_QUIET</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[main] _init_gui()&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">guitool</span><span class=\"o\">.</span><span class=\"n\">ensure_qtapp</span><span class=\"p\">()</span>\n    <span class=\"c1\">#USE_OLD_BACKEND = &#39;--old-backend&#39; in sys.argv</span>\n    <span class=\"c1\">#if USE_OLD_BACKEND:</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.gui</span> <span class=\"k\">import</span> <span class=\"n\">guiback</span>\n    <span class=\"n\">back</span> <span class=\"o\">=</span> <span class=\"n\">guiback</span><span class=\"o\">.</span><span class=\"n\">MainWindowBackend</span><span class=\"p\">()</span>\n    <span class=\"c1\">#else:</span>\n    <span class=\"c1\">#    from ibeis.gui import newgui</span>\n    <span class=\"c1\">#    back = newgui.IBEISGuiWidget()</span>\n    <span class=\"k\">if</span> <span class=\"n\">activate</span><span class=\"p\">:</span>\n        <span class=\"n\">guitool</span><span class=\"o\">.</span><span class=\"n\">activate_qwindow</span><span class=\"p\">(</span><span class=\"n\">back</span><span class=\"o\">.</span><span class=\"n\">mainwin</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">back</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_init_ibeis</span><span class=\"p\">(</span><span class=\"n\">dbdir</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">use_cache</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">web</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Private function that calls code to create an ibeis controller</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis</span> <span class=\"k\">import</span> <span class=\"n\">params</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.control</span> <span class=\"k\">import</span> <span class=\"n\">IBEISControl</span>\n    <span class=\"k\">if</span> <span class=\"n\">verbose</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">verbose</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">VERBOSE</span>\n    <span class=\"k\">if</span> <span class=\"n\">verbose</span> <span class=\"ow\">and</span> <span class=\"n\">NOT_QUIET</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[main] _init_ibeis()&#39;</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Use command line dbdir unless user specifies it</span>\n    <span class=\"k\">if</span> <span class=\"n\">dbdir</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[main!] WARNING: args.dbdir is None&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">kwargs</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n        <span class=\"n\">request_dbversion</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s1\">&#39;request_dbversion&#39;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"n\">force_serial</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;force_serial&#39;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">IBEISControl</span><span class=\"o\">.</span><span class=\"n\">request_IBEISController</span><span class=\"p\">(</span>\n            <span class=\"n\">dbdir</span><span class=\"o\">=</span><span class=\"n\">dbdir</span><span class=\"p\">,</span> <span class=\"n\">use_cache</span><span class=\"o\">=</span><span class=\"n\">use_cache</span><span class=\"p\">,</span>\n            <span class=\"n\">request_dbversion</span><span class=\"o\">=</span><span class=\"n\">request_dbversion</span><span class=\"p\">,</span>\n            <span class=\"n\">force_serial</span><span class=\"o\">=</span><span class=\"n\">force_serial</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">web</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">web</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argflag</span><span class=\"p\">((</span><span class=\"s1\">&#39;--webapp&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;--webapi&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;--web&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;--browser&#39;</span><span class=\"p\">),</span>\n                                 <span class=\"n\">help_</span><span class=\"o\">=</span><span class=\"s1\">&#39;automatically launch the web app / web api&#39;</span><span class=\"p\">)</span>\n            <span class=\"c1\">#web = params.args.webapp</span>\n        <span class=\"k\">if</span> <span class=\"n\">web</span><span class=\"p\">:</span>\n            <span class=\"kn\">from</span> <span class=\"nn\">ibeis.web</span> <span class=\"k\">import</span> <span class=\"n\">app</span>\n            <span class=\"n\">port</span> <span class=\"o\">=</span> <span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">webport</span>\n            <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">start_from_ibeis</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"n\">port</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">ibs</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_init_parallel</span><span class=\"p\">():</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n    <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">VERBOSE</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;_init_parallel&#39;</span><span class=\"p\">)</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">utool</span> <span class=\"k\">import</span> <span class=\"n\">util_parallel</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis</span> <span class=\"k\">import</span> <span class=\"n\">params</span>\n    <span class=\"c1\"># Import any modules which parallel process will use here</span>\n    <span class=\"c1\"># so they are accessable when the program forks</span>\n    <span class=\"c1\">#from utool import util_sysreq</span>\n    <span class=\"c1\">#util_sysreq.ensure_in_pythonpath(&#39;hesaff&#39;)</span>\n    <span class=\"c1\">#util_sysreq.ensure_in_pythonpath(&#39;pyrf&#39;)</span>\n    <span class=\"c1\">#util_sysreq.ensure_in_pythonpath(&#39;code&#39;)</span>\n    <span class=\"c1\">#import pyhesaff  # NOQA</span>\n    <span class=\"c1\">#import pyrf  # NOQA</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis</span> <span class=\"k\">import</span> <span class=\"n\">core_annots</span>  <span class=\"c1\"># NOQA</span>\n    <span class=\"c1\">#.algo.preproc import preproc_chip  # NOQA</span>\n    <span class=\"n\">util_parallel</span><span class=\"o\">.</span><span class=\"n\">set_num_procs</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">num_procs</span><span class=\"p\">)</span>\n    <span class=\"c1\">#if PREINIT_MULTIPROCESSING_POOLS:</span>\n    <span class=\"c1\">#    util_parallel.init_pool(params.args.num_procs)</span>\n\n\n<span class=\"c1\"># def _close_parallel():</span>\n<span class=\"c1\">#     #if ut.VERBOSE:</span>\n<span class=\"c1\">#     #    print(&#39;_close_parallel&#39;)</span>\n<span class=\"c1\">#     try:</span>\n<span class=\"c1\">#         from utool import util_parallel</span>\n<span class=\"c1\">#         util_parallel.close_pool(terminate=True)</span>\n<span class=\"c1\">#     except Exception as ex:</span>\n<span class=\"c1\">#         import utool as ut</span>\n<span class=\"c1\">#         ut.printex(ex, &#39;error closing parallel&#39;)</span>\n<span class=\"c1\">#         raise</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_init_numpy</span><span class=\"p\">():</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n    <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">VERBOSE</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;_init_numpy&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">error_options</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;ignore&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;warn&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;raise&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;call&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;print&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;log&#39;</span><span class=\"p\">]</span>\n    <span class=\"n\">on_err</span> <span class=\"o\">=</span> <span class=\"n\">error_options</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"c1\">#np.seterr(divide=&#39;ignore&#39;, invalid=&#39;ignore&#39;)</span>\n    <span class=\"n\">numpy_err</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">&#39;divide&#39;</span><span class=\"p\">:</span>  <span class=\"n\">on_err</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;over&#39;</span><span class=\"p\">:</span>    <span class=\"n\">on_err</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;under&#39;</span><span class=\"p\">:</span>   <span class=\"n\">on_err</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;invalid&#39;</span><span class=\"p\">:</span> <span class=\"n\">on_err</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n    <span class=\"c1\">#numpy_print = {</span>\n    <span class=\"c1\">#    &#39;precision&#39;: 8,</span>\n    <span class=\"c1\">#    &#39;threshold&#39;: 500,</span>\n    <span class=\"c1\">#    &#39;edgeitems&#39;: 3,</span>\n    <span class=\"c1\">#    &#39;linewidth&#39;: 200,  # default 75</span>\n    <span class=\"c1\">#    &#39;suppress&#39;: False,</span>\n    <span class=\"c1\">#    &#39;nanstr&#39;: &#39;nan&#39;,</span>\n    <span class=\"c1\">#    &#39;formatter&#39;: None,</span>\n    <span class=\"c1\">#}</span>\n    <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">seterr</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">numpy_err</span><span class=\"p\">)</span>\n    <span class=\"c1\">#np.set_printoptions(**numpy_print)</span>\n\n\n<span class=\"c1\">#-----------------------</span>\n<span class=\"c1\"># private loop functions</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_guitool_loop</span><span class=\"p\">(</span><span class=\"n\">main_locals</span><span class=\"p\">,</span> <span class=\"n\">ipy</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">guitool</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis</span> <span class=\"k\">import</span> <span class=\"n\">params</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[main] guitool loop&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">back</span> <span class=\"o\">=</span> <span class=\"n\">main_locals</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;back&#39;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">back</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">loop_freq</span> <span class=\"o\">=</span> <span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">loop_freq</span>\n        <span class=\"n\">ipy</span> <span class=\"o\">=</span> <span class=\"n\">ipy</span> <span class=\"ow\">or</span> <span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">cmd</span>\n        <span class=\"n\">guitool</span><span class=\"o\">.</span><span class=\"n\">qtapp_loop</span><span class=\"p\">(</span><span class=\"n\">qwin</span><span class=\"o\">=</span><span class=\"n\">back</span><span class=\"o\">.</span><span class=\"n\">mainwin</span><span class=\"p\">,</span> <span class=\"n\">ipy</span><span class=\"o\">=</span><span class=\"n\">ipy</span><span class=\"p\">,</span> <span class=\"n\">frequency</span><span class=\"o\">=</span><span class=\"n\">loop_freq</span><span class=\"p\">,</span> <span class=\"n\">init_signals</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">ipy</span><span class=\"p\">:</span>  <span class=\"c1\"># If we&#39;re in IPython, the qtapp loop won&#39;t block, so we need to refresh</span>\n            <span class=\"n\">back</span><span class=\"o\">.</span><span class=\"n\">refresh_state</span><span class=\"p\">()</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">NOT_QUIET</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;WARNING: back was not expected to be None&#39;</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"set_newfile_permissions\"><a class=\"viewcode-back\" href=\"../../../ibeis/#ibeis.main_module.set_newfile_permissions\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">set_newfile_permissions</span><span class=\"p\">():</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    sets this processes default permission bits when creating new files</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.main_module --test-set_newfile_permissions</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.main_module import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import os</span>\n<span class=\"sd\">        &gt;&gt;&gt; import utool as ut</span>\n<span class=\"sd\">        &gt;&gt;&gt; # write before umask</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.delete(&#39;tempfile1.txt&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.write_to(&#39;tempfile1.txt&#39;, &#39;foo&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; stat_result1 = os.stat(&#39;tempfile1.txt&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; # apply umask</span>\n<span class=\"sd\">        &gt;&gt;&gt; set_newfile_permissions()</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.delete(&#39;tempfile2.txt&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.write_to(&#39;tempfile2.txt&#39;, &#39;foo&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; stat_result2 = os.stat(&#39;tempfile2.txt&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; # verify results</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&#39;old masked all bits = %o&#39; % (stat_result1.st_mode))</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&#39;new masked all bits = %o&#39; % (stat_result2.st_mode))</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">os</span>\n    <span class=\"c1\">#import stat</span>\n    <span class=\"c1\"># Set umask so all files written will be group read and writable</span>\n    <span class=\"c1\"># To get the permissions we want subtract what you want from 0o0666 because</span>\n    <span class=\"c1\"># umask subtracts the mask you give it.</span>\n    <span class=\"c1\">#mask = stat.S_IRUSR | stat.S_IWUSR | stat.S_IRGRP | stat.S_IWGRP | stat.S_IROTH</span>\n    <span class=\"c1\">#mask = 0o000  # most permissive umask</span>\n    <span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"mo\">0o000</span>  <span class=\"c1\"># most permissive umask</span>\n    <span class=\"n\">prev_mask</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">umask</span><span class=\"p\">(</span><span class=\"n\">mask</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">prev_mask</span></div>\n    <span class=\"c1\">#print(&#39;prev_mask = %o&#39; % (prev_mask,))</span>\n    <span class=\"c1\">#print(&#39;new_mask  = %o&#39; % (mask,))</span>\n\n\n<div class=\"viewcode-block\" id=\"main\"><a class=\"viewcode-back\" href=\"../../../ibeis/#ibeis.main_module.main\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"n\">gui</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">dbdir</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">defaultdb</span><span class=\"o\">=</span><span class=\"s1\">&#39;cache&#39;</span><span class=\"p\">,</span>\n         <span class=\"n\">allow_newdir</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">db</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n         <span class=\"n\">delete_ibsdir</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n         <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Program entry point</span>\n<span class=\"sd\">    Inits the system environment, an IBEISControl, and a GUI if requested</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        gui (bool): (default=True) If gui is False a gui instance will not be created</span>\n<span class=\"sd\">        dbdir (None): full directory of a database to load</span>\n<span class=\"sd\">        db (None): name of database to load relative to the workdir</span>\n<span class=\"sd\">        allow_newdir (bool): (default=False) if False an error is raised if a</span>\n<span class=\"sd\">            a new database is created</span>\n<span class=\"sd\">        defaultdb (str): codename of database to load if db and dbdir is None. a value</span>\n<span class=\"sd\">            of &#39;cache&#39; will open the last database opened with the GUI.</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        dict: main_locals</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">set_newfile_permissions</span><span class=\"p\">()</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.init</span> <span class=\"k\">import</span> <span class=\"n\">main_commands</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.init</span> <span class=\"k\">import</span> <span class=\"n\">sysres</span>\n    <span class=\"c1\"># Display a visible intro message</span>\n    <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;&#39;</span>\n<span class=\"s1\">    _____ ______  _______ _____ _______</span>\n<span class=\"s1\">      |   |_____] |______   |   |______</span>\n<span class=\"s1\">    __|__ |_____] |______ __|__ ______|</span>\n<span class=\"s1\">    &#39;&#39;&#39;</span>\n    <span class=\"k\">if</span> <span class=\"n\">NOT_QUIET</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Init the only two main system api handles</span>\n    <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"n\">back</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"k\">if</span> <span class=\"n\">NOT_QUIET</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[main] ibeis.main_module.main()&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">_preload</span><span class=\"p\">()</span>\n    <span class=\"n\">DIAGNOSTICS</span> <span class=\"o\">=</span> <span class=\"n\">NOT_QUIET</span>\n    <span class=\"k\">if</span> <span class=\"n\">DIAGNOSTICS</span><span class=\"p\">:</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">os</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">ibeis</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[main] MAIN DIAGNOSTICS&#39;</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[main]  * username = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_user_name</span><span class=\"p\">()))</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[main]  * ibeis.__version__ = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">__version__</span><span class=\"p\">,))</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[main]  * computername = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_computer_name</span><span class=\"p\">()))</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[main]  * cwd = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getcwd</span><span class=\"p\">(),))</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[main]  * sys.argv = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">,))</span>\n    <span class=\"c1\"># Parse directory to be loaded from command line args</span>\n    <span class=\"c1\"># and explicit kwargs</span>\n    <span class=\"n\">dbdir</span> <span class=\"o\">=</span> <span class=\"n\">sysres</span><span class=\"o\">.</span><span class=\"n\">get_args_dbdir</span><span class=\"p\">(</span><span class=\"n\">defaultdb</span><span class=\"o\">=</span><span class=\"n\">defaultdb</span><span class=\"p\">,</span>\n                                  <span class=\"n\">allow_newdir</span><span class=\"o\">=</span><span class=\"n\">allow_newdir</span><span class=\"p\">,</span> <span class=\"n\">db</span><span class=\"o\">=</span><span class=\"n\">db</span><span class=\"p\">,</span>\n                                  <span class=\"n\">dbdir</span><span class=\"o\">=</span><span class=\"n\">dbdir</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">delete_ibsdir</span> <span class=\"ow\">is</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">ibeis.other</span> <span class=\"k\">import</span> <span class=\"n\">ibsfuncs</span>\n        <span class=\"k\">assert</span> <span class=\"n\">allow_newdir</span><span class=\"p\">,</span> <span class=\"s1\">&#39;must be making new directory if you are deleting everything!&#39;</span>\n        <span class=\"n\">ibsfuncs</span><span class=\"o\">.</span><span class=\"n\">delete_ibeis_database</span><span class=\"p\">(</span><span class=\"n\">dbdir</span><span class=\"p\">)</span>\n\n    <span class=\"c1\">#limit = sys.getrecursionlimit()</span>\n    <span class=\"c1\">#if limit == 1000:</span>\n    <span class=\"c1\">#    print(&#39;Setting Recursion Limit to 3000&#39;)</span>\n    <span class=\"c1\">#    sys.setrecursionlimit(3000)</span>\n    <span class=\"c1\"># Execute preload commands</span>\n    <span class=\"n\">main_commands</span><span class=\"o\">.</span><span class=\"n\">preload_commands</span><span class=\"p\">(</span><span class=\"n\">dbdir</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>  <span class=\"c1\"># PRELOAD CMDS</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Build IBEIS Control object</span>\n        <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">_init_ibeis</span><span class=\"p\">(</span><span class=\"n\">dbdir</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">gui</span> <span class=\"ow\">and</span> <span class=\"n\">USE_GUI</span><span class=\"p\">:</span>\n            <span class=\"n\">back</span> <span class=\"o\">=</span> <span class=\"n\">_init_gui</span><span class=\"p\">(</span><span class=\"n\">activate</span><span class=\"o\">=</span><span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;activate&#39;</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">))</span>\n            <span class=\"n\">back</span><span class=\"o\">.</span><span class=\"n\">connect_ibeis_control</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[main()] IBEIS LOAD encountered exception: </span><span class=\"si\">%s</span><span class=\"s1\"> </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">),</span> <span class=\"n\">ex</span><span class=\"p\">))</span>\n        <span class=\"k\">raise</span>\n    <span class=\"n\">main_commands</span><span class=\"o\">.</span><span class=\"n\">postload_commands</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">back</span><span class=\"p\">)</span>  <span class=\"c1\"># POSTLOAD CMDS</span>\n    <span class=\"n\">main_locals</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;ibs&#39;</span><span class=\"p\">:</span> <span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"s1\">&#39;back&#39;</span><span class=\"p\">:</span> <span class=\"n\">back</span><span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">main_locals</span></div>\n\n\n<div class=\"viewcode-block\" id=\"opendb_in_background\"><a class=\"viewcode-back\" href=\"../../../ibeis/#ibeis.main_module.opendb_in_background\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">opendb_in_background</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Starts a web server in the background</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">time</span>\n    <span class=\"n\">sec</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s1\">&#39;wait&#39;</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">sec</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">AssertionError</span><span class=\"p\">(</span><span class=\"s1\">&#39;wait is depricated&#39;</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;waiting </span><span class=\"si\">%s</span><span class=\"s1\"> seconds for startup&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">sec</span><span class=\"p\">,))</span>\n    <span class=\"n\">proc</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">spawn_background_process</span><span class=\"p\">(</span><span class=\"n\">opendb</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">sec</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">AssertionError</span><span class=\"p\">(</span><span class=\"s1\">&#39;wait is depricated&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"n\">sec</span><span class=\"p\">)</span>  <span class=\"c1\"># wait for process to initialize</span>\n    <span class=\"k\">return</span> <span class=\"n\">proc</span></div>\n\n\n<div class=\"viewcode-block\" id=\"opendb_bg_web\"><a class=\"viewcode-back\" href=\"../../../ibeis/#ibeis.main_module.opendb_bg_web\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">opendb_bg_web</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Wrapper around opendb_in_background, returns a nice web_ibs</span>\n<span class=\"sd\">    object to execute web calls using normal python-like syntax</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        *args: passed to opendb_in_background</span>\n<span class=\"sd\">        **kwargs:</span>\n<span class=\"sd\">            port (int):</span>\n<span class=\"sd\">            domain (str): if specified assumes server is already running</span>\n<span class=\"sd\">                somewhere otherwise kwargs is passed to opendb_in_background</span>\n<span class=\"sd\">            start_job_queue (bool)</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        web_ibs - this is a KillableProcess object with special functions</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.main_module opendb_bg_web</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.main_module import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; args = tuple()</span>\n<span class=\"sd\">        &gt;&gt;&gt; kwargs = {}</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&#39;Opening a web_ibs&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; web_ibs = opendb_bg_web()</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&#39;SUCESS Opened a web_ibs!&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(web_ibs)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&#39;Now kill the web_ibs&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; web_ibs.terminate2()</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.web</span> <span class=\"k\">import</span> <span class=\"n\">appfuncs</span>\n    <span class=\"n\">domain</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s1\">&#39;domain&#39;</span><span class=\"p\">,</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argval</span><span class=\"p\">(</span><span class=\"s1\">&#39;--domain&#39;</span><span class=\"p\">,</span> <span class=\"n\">type_</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">))</span>\n    <span class=\"n\">port</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s1\">&#39;port&#39;</span><span class=\"p\">,</span> <span class=\"n\">appfuncs</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_WEB_API_PORT</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"s1\">&#39;wait&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">kwargs</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;NOTE: No need to specify wait param anymore. &#39;</span>\n              <span class=\"s1\">&#39;This is automatically taken care of.&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">domain</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Requesting a local test server</span>\n        <span class=\"n\">_kw</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">web</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">browser</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"n\">_kw</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"n\">web_ibs</span> <span class=\"o\">=</span> <span class=\"n\">opendb_in_background</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">_kw</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Using a remote controller, no need to spin up anything</span>\n        <span class=\"n\">web_ibs</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">DynStruct</span><span class=\"p\">()</span>\n        <span class=\"n\">web_ibs</span><span class=\"o\">.</span><span class=\"n\">terminate2</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"kc\">None</span>\n    <span class=\"c1\"># Augment web instance with usefull test functions</span>\n    <span class=\"k\">if</span> <span class=\"n\">domain</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">domain</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;http://127.0.1.1&#39;</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">domain</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">&#39;http://&#39;</span><span class=\"p\">):</span>\n        <span class=\"n\">domain</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;http://&#39;</span> <span class=\"o\">+</span> <span class=\"n\">domain</span>\n    <span class=\"n\">baseurl</span> <span class=\"o\">=</span> <span class=\"n\">domain</span>  <span class=\"o\">+</span> <span class=\"s1\">&#39;:&#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">port</span><span class=\"p\">)</span>\n\n    <span class=\"n\">web_ibs</span><span class=\"o\">.</span><span class=\"n\">domain</span> <span class=\"o\">=</span> <span class=\"n\">domain</span>\n    <span class=\"n\">web_ibs</span><span class=\"o\">.</span><span class=\"n\">port</span> <span class=\"o\">=</span> <span class=\"n\">port</span>\n    <span class=\"n\">web_ibs</span><span class=\"o\">.</span><span class=\"n\">baseurl</span> <span class=\"o\">=</span> <span class=\"n\">baseurl</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"n\">suffix</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n        <span class=\"k\">return</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">baseurl</span> <span class=\"o\">+</span> <span class=\"n\">suffix</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">post</span><span class=\"p\">(</span><span class=\"n\">suffix</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n        <span class=\"k\">return</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"n\">baseurl</span> <span class=\"o\">+</span> <span class=\"n\">suffix</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">send_ibeis_request</span><span class=\"p\">(</span><span class=\"n\">suffix</span><span class=\"p\">,</span> <span class=\"n\">type_</span><span class=\"o\">=</span><span class=\"s1\">&#39;post&#39;</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Posts a request to a url suffix</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">suffix</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s1\">&#39;/&#39;</span><span class=\"p\">):</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"s1\">&#39;YOU PROBABLY WANT A / AT THE END OF YOUR URL&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">payload</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">map_dict_vals</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">to_json</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">type_</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;post&#39;</span><span class=\"p\">:</span>\n            <span class=\"n\">resp</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"n\">baseurl</span> <span class=\"o\">+</span> <span class=\"n\">suffix</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">payload</span><span class=\"p\">)</span>\n            <span class=\"n\">json_content</span> <span class=\"o\">=</span> <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">_content</span>\n        <span class=\"k\">elif</span> <span class=\"n\">type_</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;get&#39;</span><span class=\"p\">:</span>\n            <span class=\"n\">resp</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">baseurl</span> <span class=\"o\">+</span> <span class=\"n\">suffix</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">payload</span><span class=\"p\">)</span>\n            <span class=\"n\">json_content</span> <span class=\"o\">=</span> <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">content</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">from_json</span><span class=\"p\">(</span><span class=\"n\">json_content</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"s1\">&#39;Expected JSON string but got json_content=</span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">json_content</span><span class=\"p\">,))</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># print(&#39;content = %r&#39; % (content,))</span>\n            <span class=\"k\">if</span> <span class=\"n\">content</span><span class=\"p\">[</span><span class=\"s1\">&#39;status&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;code&#39;</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"mi\">200</span><span class=\"p\">:</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">content</span><span class=\"p\">[</span><span class=\"s1\">&#39;status&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;message&#39;</span><span class=\"p\">])</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"n\">content</span><span class=\"p\">[</span><span class=\"s1\">&#39;status&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;message&#39;</span><span class=\"p\">])</span>\n        <span class=\"n\">request_response</span> <span class=\"o\">=</span> <span class=\"n\">content</span><span class=\"p\">[</span><span class=\"s1\">&#39;response&#39;</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">request_response</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">wait_for_results</span><span class=\"p\">(</span><span class=\"n\">jobid</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">delays</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">]):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Waits for results from an engine</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">delayed_retry_gen</span><span class=\"p\">(</span><span class=\"n\">delays</span><span class=\"p\">):</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Waiting for jobid = </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">jobid</span><span class=\"p\">,))</span>\n            <span class=\"n\">status_response</span> <span class=\"o\">=</span> <span class=\"n\">web_ibs</span><span class=\"o\">.</span><span class=\"n\">send_ibeis_request</span><span class=\"p\">(</span><span class=\"s1\">&#39;/api/engine/job/status/&#39;</span><span class=\"p\">,</span> <span class=\"n\">jobid</span><span class=\"o\">=</span><span class=\"n\">jobid</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">status_response</span><span class=\"p\">[</span><span class=\"s1\">&#39;jobstatus&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;completed&#39;</span><span class=\"p\">:</span>\n                <span class=\"k\">break</span>\n        <span class=\"k\">return</span> <span class=\"n\">status_response</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">read_engine_results</span><span class=\"p\">(</span><span class=\"n\">jobid</span><span class=\"p\">):</span>\n        <span class=\"n\">result_response</span> <span class=\"o\">=</span> <span class=\"n\">web_ibs</span><span class=\"o\">.</span><span class=\"n\">send_ibeis_request</span><span class=\"p\">(</span><span class=\"s1\">&#39;/api/engine/job/result/&#39;</span><span class=\"p\">,</span> <span class=\"n\">jobid</span><span class=\"o\">=</span><span class=\"n\">jobid</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">result_response</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">send_request_and_wait</span><span class=\"p\">(</span><span class=\"n\">suffix</span><span class=\"p\">,</span> <span class=\"n\">type_</span><span class=\"o\">=</span><span class=\"s1\">&#39;post&#39;</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">jobid</span> <span class=\"o\">=</span> <span class=\"n\">web_ibs</span><span class=\"o\">.</span><span class=\"n\">send_ibeis_request</span><span class=\"p\">(</span><span class=\"n\">suffix</span><span class=\"p\">,</span> <span class=\"n\">type_</span><span class=\"o\">=</span><span class=\"n\">type_</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"n\">status_response</span> <span class=\"o\">=</span> <span class=\"n\">web_ibs</span><span class=\"o\">.</span><span class=\"n\">wait_for_results</span><span class=\"p\">(</span><span class=\"n\">jobid</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"p\">)</span>  <span class=\"c1\"># NOQA</span>\n        <span class=\"n\">result_response</span> <span class=\"o\">=</span> <span class=\"n\">web_ibs</span><span class=\"o\">.</span><span class=\"n\">read_engine_results</span><span class=\"p\">(</span><span class=\"n\">jobid</span><span class=\"p\">)</span>\n        <span class=\"c1\">#&gt;&gt;&gt; cmdict = ut.from_json(result_response[&#39;json_result&#39;])[0]</span>\n        <span class=\"k\">return</span> <span class=\"n\">result_response</span>\n\n    <span class=\"n\">web_ibs</span><span class=\"o\">.</span><span class=\"n\">send_ibeis_request</span> <span class=\"o\">=</span> <span class=\"n\">send_ibeis_request</span>\n    <span class=\"n\">web_ibs</span><span class=\"o\">.</span><span class=\"n\">wait_for_results</span> <span class=\"o\">=</span> <span class=\"n\">wait_for_results</span>\n    <span class=\"n\">web_ibs</span><span class=\"o\">.</span><span class=\"n\">read_engine_results</span> <span class=\"o\">=</span> <span class=\"n\">read_engine_results</span>\n    <span class=\"n\">web_ibs</span><span class=\"o\">.</span><span class=\"n\">send_request_and_wait</span> <span class=\"o\">=</span> <span class=\"n\">send_request_and_wait</span>\n    <span class=\"n\">web_ibs</span><span class=\"o\">.</span><span class=\"n\">get</span> <span class=\"o\">=</span> <span class=\"n\">get</span>\n    <span class=\"n\">web_ibs</span><span class=\"o\">.</span><span class=\"n\">post</span> <span class=\"o\">=</span> <span class=\"n\">post</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">wait_until_started</span><span class=\"p\">():</span>\n        <span class=\"sd\">&quot;&quot;&quot; waits until the web server responds to a request &quot;&quot;&quot;</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n        <span class=\"k\">for</span> <span class=\"n\">count</span> <span class=\"ow\">in</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">delayed_retry_gen</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">15</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"kc\">True</span> <span class=\"ow\">or</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">VERBOSE</span><span class=\"p\">:</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Waiting for server to be up. count=</span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">count</span><span class=\"p\">,))</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">web_ibs</span><span class=\"o\">.</span><span class=\"n\">send_ibeis_request</span><span class=\"p\">(</span><span class=\"s1\">&#39;/api/test/heartbeat/&#39;</span><span class=\"p\">,</span> <span class=\"n\">type_</span><span class=\"o\">=</span><span class=\"s1\">&#39;get&#39;</span><span class=\"p\">)</span>\n                <span class=\"k\">break</span>\n            <span class=\"k\">except</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">ConnectionError</span><span class=\"p\">:</span>\n                <span class=\"k\">pass</span>\n    <span class=\"n\">wait_until_started</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">web_ibs</span></div>\n\n\n<div class=\"viewcode-block\" id=\"opendb_fg_web\"><a class=\"viewcode-back\" href=\"../../../ibeis/#ibeis.main_module.opendb_fg_web\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">opendb_fg_web</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.main_module import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; kwargs = {&#39;db&#39;: &#39;testdb1&#39;}</span>\n<span class=\"sd\">        &gt;&gt;&gt; args = tuple()</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb_fg_web()</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\"># Gives you context inside the web app for testing</span>\n    <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s1\">&#39;start_web_loop&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n    <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s1\">&#39;web&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s1\">&#39;browser&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n    <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">opendb</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.control</span> <span class=\"k\">import</span> <span class=\"n\">controller_inject</span>\n    <span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">controller_inject</span><span class=\"o\">.</span><span class=\"n\">get_flask_app</span><span class=\"p\">()</span>\n    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">app</span>\n    <span class=\"k\">return</span> <span class=\"n\">ibs</span></div>\n\n\n<div class=\"viewcode-block\" id=\"opendb\"><a class=\"viewcode-back\" href=\"../../../ibeis/#ibeis.main_module.opendb\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">opendb</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">dbdir</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">defaultdb</span><span class=\"o\">=</span><span class=\"s1\">&#39;cache&#39;</span><span class=\"p\">,</span> <span class=\"n\">allow_newdir</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n           <span class=\"n\">delete_ibsdir</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">use_cache</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n           <span class=\"n\">web</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    main without the preload (except for option to delete database before</span>\n<span class=\"sd\">    opening)</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        db (str):  database name in your workdir used only if dbdir is None</span>\n<span class=\"sd\">        dbdir (None): full database path</span>\n<span class=\"sd\">        defaultdb (str): dbdir search stratagy when db is None and dbdir is</span>\n<span class=\"sd\">            None</span>\n<span class=\"sd\">        allow_newdir (bool): (default=True) if True errors when opening a</span>\n<span class=\"sd\">            nonexisting database</span>\n<span class=\"sd\">        delete_ibsdir (bool): BE CAREFUL! (default=False) if True deletes the</span>\n<span class=\"sd\">            entire</span>\n<span class=\"sd\">        verbose (bool): verbosity flag</span>\n<span class=\"sd\">        web (bool): starts webserver if True (default=param specification)</span>\n<span class=\"sd\">        use_cache (bool): if True will try to return a previously loaded</span>\n<span class=\"sd\">            controller</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        ibeis.IBEISController: ibs</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.main_module import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; db = None</span>\n<span class=\"sd\">        &gt;&gt;&gt; dbdir = None</span>\n<span class=\"sd\">        &gt;&gt;&gt; defaultdb = &#39;cache&#39;</span>\n<span class=\"sd\">        &gt;&gt;&gt; allow_newdir = False</span>\n<span class=\"sd\">        &gt;&gt;&gt; delete_ibsdir = False</span>\n<span class=\"sd\">        &gt;&gt;&gt; verbose = False</span>\n<span class=\"sd\">        &gt;&gt;&gt; use_cache = True</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = opendb(db, dbdir, defaultdb, allow_newdir, delete_ibsdir,</span>\n<span class=\"sd\">        &gt;&gt;&gt;              verbose, use_cache)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = str(ibs)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.init</span> <span class=\"k\">import</span> <span class=\"n\">sysres</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.other</span> <span class=\"k\">import</span> <span class=\"n\">ibsfuncs</span>\n    <span class=\"n\">dbdir</span> <span class=\"o\">=</span> <span class=\"n\">sysres</span><span class=\"o\">.</span><span class=\"n\">get_args_dbdir</span><span class=\"p\">(</span><span class=\"n\">defaultdb</span><span class=\"o\">=</span><span class=\"n\">defaultdb</span><span class=\"p\">,</span>\n                                  <span class=\"n\">allow_newdir</span><span class=\"o\">=</span><span class=\"n\">allow_newdir</span><span class=\"p\">,</span> <span class=\"n\">db</span><span class=\"o\">=</span><span class=\"n\">db</span><span class=\"p\">,</span>\n                                  <span class=\"n\">dbdir</span><span class=\"o\">=</span><span class=\"n\">dbdir</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">delete_ibsdir</span> <span class=\"ow\">is</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"k\">assert</span> <span class=\"n\">allow_newdir</span><span class=\"p\">,</span> <span class=\"p\">(</span>\n            <span class=\"s1\">&#39;must be making new directory if you are deleting everything!&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">ibsfuncs</span><span class=\"o\">.</span><span class=\"n\">delete_ibeis_database</span><span class=\"p\">(</span><span class=\"n\">dbdir</span><span class=\"p\">)</span>\n    <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">_init_ibeis</span><span class=\"p\">(</span><span class=\"n\">dbdir</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">verbose</span><span class=\"p\">,</span> <span class=\"n\">use_cache</span><span class=\"o\">=</span><span class=\"n\">use_cache</span><span class=\"p\">,</span> <span class=\"n\">web</span><span class=\"o\">=</span><span class=\"n\">web</span><span class=\"p\">,</span>\n                      <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">ibs</span></div>\n\n\n<div class=\"viewcode-block\" id=\"start\"><a class=\"viewcode-back\" href=\"../../../ibeis/#ibeis.main_module.start\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">start</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; alias for main() &quot;&quot;&quot;</span>  <span class=\"c1\"># + main.__doc__</span>\n    <span class=\"k\">return</span> <span class=\"n\">main</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"opendb_test\"><a class=\"viewcode-back\" href=\"../../../ibeis/#ibeis.main_module.opendb_test\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">opendb_test</span><span class=\"p\">(</span><span class=\"n\">gui</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">dbdir</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">defaultdb</span><span class=\"o\">=</span><span class=\"s1\">&#39;cache&#39;</span><span class=\"p\">,</span> <span class=\"n\">allow_newdir</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                <span class=\"n\">db</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; alias for main() &quot;&quot;&quot;</span>  <span class=\"c1\"># + main.__doc__</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.init</span> <span class=\"k\">import</span> <span class=\"n\">sysres</span>\n    <span class=\"n\">_preload</span><span class=\"p\">()</span>\n    <span class=\"n\">dbdir</span> <span class=\"o\">=</span> <span class=\"n\">sysres</span><span class=\"o\">.</span><span class=\"n\">get_args_dbdir</span><span class=\"p\">(</span><span class=\"n\">defaultdb</span><span class=\"o\">=</span><span class=\"n\">defaultdb</span><span class=\"p\">,</span>\n                                  <span class=\"n\">allow_newdir</span><span class=\"o\">=</span><span class=\"n\">allow_newdir</span><span class=\"p\">,</span> <span class=\"n\">db</span><span class=\"o\">=</span><span class=\"n\">db</span><span class=\"p\">,</span>\n                                  <span class=\"n\">dbdir</span><span class=\"o\">=</span><span class=\"n\">dbdir</span><span class=\"p\">)</span>\n    <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">_init_ibeis</span><span class=\"p\">(</span><span class=\"n\">dbdir</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">ibs</span></div>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_preload</span><span class=\"p\">(</span><span class=\"n\">mpl</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">par</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">logging</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; Sets up python environment &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n    <span class=\"c1\">#from ibeis.init import main_helpers</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis</span> <span class=\"k\">import</span> <span class=\"n\">params</span>\n    <span class=\"k\">if</span>  <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">current_process</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">!=</span> <span class=\"s1\">&#39;MainProcess&#39;</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span>\n    <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">VERBOSE</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[ibeis] _preload&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">_parse_args</span><span class=\"p\">()</span>\n    <span class=\"c1\"># mpl backends</span>\n    <span class=\"k\">if</span> <span class=\"n\">logging</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">nologging</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Log in the configured ibeis log dir (which is maintained by utool)</span>\n        <span class=\"c1\"># fix this to be easier to figure out where the logs actually are</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">start_logging</span><span class=\"p\">(</span><span class=\"n\">appname</span><span class=\"o\">=</span><span class=\"s1\">&#39;ibeis&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">mpl</span><span class=\"p\">:</span>\n        <span class=\"n\">_init_matplotlib</span><span class=\"p\">()</span>\n    <span class=\"c1\"># numpy print settings</span>\n    <span class=\"n\">_init_numpy</span><span class=\"p\">()</span>\n    <span class=\"c1\"># parallel servent processes</span>\n    <span class=\"k\">if</span> <span class=\"n\">par</span><span class=\"p\">:</span>\n        <span class=\"n\">_init_parallel</span><span class=\"p\">()</span>\n    <span class=\"c1\"># ctrl+c</span>\n    <span class=\"n\">_init_signals</span><span class=\"p\">()</span>\n    <span class=\"c1\"># inject colored exceptions</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">util_inject</span><span class=\"o\">.</span><span class=\"n\">inject_colored_exceptions</span><span class=\"p\">()</span>\n    <span class=\"c1\"># register type aliases for debugging</span>\n    <span class=\"c1\">#main_helpers.register_utool_aliases()</span>\n    <span class=\"c1\">#return params.args</span>\n\n\n<div class=\"viewcode-block\" id=\"main_loop\"><a class=\"viewcode-back\" href=\"../../../ibeis/#ibeis.main_module.main_loop\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">main_loop</span><span class=\"p\">(</span><span class=\"n\">main_locals</span><span class=\"p\">,</span> <span class=\"n\">rungui</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">ipy</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">persist</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Runs the qt loop if the GUI was initialized and returns an executable string</span>\n<span class=\"sd\">    for embedding an IPython terminal if requested.</span>\n\n<span class=\"sd\">    If rungui is False the gui will not loop even if back has been created</span>\n\n<span class=\"sd\">    the main locals dict must be callsed main_locals in the scope you call this</span>\n<span class=\"sd\">    function in.</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        main_locals (dict_):</span>\n<span class=\"sd\">        rungui      (bool):</span>\n<span class=\"sd\">        ipy         (bool):</span>\n<span class=\"sd\">        persist     (bool):</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        str: execstr</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[main] ibeis.main_module.main_loop()&#39;</span><span class=\"p\">)</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis</span> <span class=\"k\">import</span> <span class=\"n\">params</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n    <span class=\"c1\">#print(&#39;current process = %r&#39; % (multiprocessing.current_process().name,))</span>\n    <span class=\"c1\">#== &#39;MainProcess&#39;:</span>\n    <span class=\"k\">if</span> <span class=\"n\">rungui</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">nogui</span><span class=\"p\">:</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">_guitool_loop</span><span class=\"p\">(</span><span class=\"n\">main_locals</span><span class=\"p\">,</span> <span class=\"n\">ipy</span><span class=\"o\">=</span><span class=\"n\">ipy</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n            <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">printex</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">,</span> <span class=\"s1\">&#39;error in main_loop&#39;</span><span class=\"p\">)</span>\n            <span class=\"k\">raise</span>\n    <span class=\"c1\">#if not persist or params.args.cmd:</span>\n    <span class=\"c1\">#    main_close()</span>\n    <span class=\"c1\"># Put locals in the exec namespace</span>\n    <span class=\"n\">ipycmd_execstr</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ipython_execstr</span><span class=\"p\">()</span>\n    <span class=\"n\">locals_execstr</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">execstr_dict</span><span class=\"p\">(</span><span class=\"n\">main_locals</span><span class=\"p\">,</span> <span class=\"s1\">&#39;main_locals&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">execstr</span> <span class=\"o\">=</span> <span class=\"n\">locals_execstr</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span> <span class=\"o\">+</span> <span class=\"n\">ipycmd_execstr</span>\n    <span class=\"k\">return</span> <span class=\"n\">execstr</span></div>\n\n\n<div class=\"viewcode-block\" id=\"main_close\"><a class=\"viewcode-back\" href=\"../../../ibeis/#ibeis.main_module.main_close\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">main_close</span><span class=\"p\">(</span><span class=\"n\">main_locals</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"c1\">#import utool as ut</span>\n    <span class=\"c1\">#if ut.VERBOSE:</span>\n    <span class=\"c1\">#    print(&#39;main_close&#39;)</span>\n    <span class=\"c1\"># _close_parallel()</span>\n    <span class=\"n\">_reset_signals</span><span class=\"p\">()</span></div>\n\n\n<span class=\"c1\">#if __name__ == &#39;__main__&#39;:</span>\n<span class=\"c1\">#    multiprocessing.freeze_support()</span>\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.main_module</span>\n<span class=\"sd\">        python -m ibeis.main_module --allexamples</span>\n<span class=\"sd\">        python -m ibeis.main_module --allexamples --noface --nosrc</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">freeze_support</span><span class=\"p\">()</span>  <span class=\"c1\"># for win32</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>  <span class=\"c1\"># NOQA</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">doctest_funcs</span><span class=\"p\">()</span>\n</pre></div>", "current_page_name": "_modules/ibeis/main_module", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}