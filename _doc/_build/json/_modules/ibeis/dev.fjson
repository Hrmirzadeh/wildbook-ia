{"parents": [{"link": "../../", "title": "Module code"}, {"link": "../", "title": "ibeis"}], "title": "ibeis.dev", "body": "<h1>Source code for ibeis.dev</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"ch\">#!/usr/bin/env python</span>\n<span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">DEV SCRIPT</span>\n\n<span class=\"sd\">TODO: DEPRICATE</span>\n\n<span class=\"sd\">This is a hacky script meant to be run mostly automatically with the option of</span>\n<span class=\"sd\">interactions.</span>\n\n<span class=\"sd\">dev.py is supposed to be a developer non-gui interface into the IBEIS software.</span>\n<span class=\"sd\">dev.py runs experiments and serves as a scratchpad for new code and quick scripts</span>\n\n<span class=\"sd\">TODO:</span>\n\n<span class=\"sd\">    Test to find typical &quot;good&quot; descriptor scores.  Find nearest neighbors and</span>\n<span class=\"sd\">    noramlizers for each feature in a query image.  Based on ground truth and</span>\n<span class=\"sd\">    spatial verification mark feature matches as true or false.  Visualize the</span>\n<span class=\"sd\">    feature scores of good matches vs bad matches. Lowe shows the pdf of</span>\n<span class=\"sd\">    correct matches and the PDF for incorrect matches. We should also show the</span>\n<span class=\"sd\">    same thing.</span>\n\n<span class=\"sd\">Done:</span>\n<span class=\"sd\">    Cache nearest neighbors so different parameters later in the pipeline dont</span>\n<span class=\"sd\">    take freaking forever.</span>\n\n<span class=\"sd\">CommandLine:</span>\n<span class=\"sd\">    python dev.py --wshow -t query --db PZ_MTEST --qaid 110 --cfg score_method:nsum prescore_method:nsum</span>\n<span class=\"sd\">    python dev.py --wshow -t query --db PZ_MTEST --qaid 110</span>\n<span class=\"sd\">    python dev.py --wshow -t query --db PZ_MTEST --qaid 110 --cfg fg_on=True</span>\n<span class=\"sd\">    python dev.py --wshow -t query --db PZ_MTEST --qaid 110 --cfg</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"c1\"># TODO: ADD COPYRIGHT TAG</span>\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"k\">import</span> <span class=\"n\">absolute_import</span><span class=\"p\">,</span> <span class=\"n\">division</span><span class=\"p\">,</span> <span class=\"n\">print_function</span>\n<span class=\"kn\">import</span> <span class=\"nn\">multiprocessing</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis._devscript</span> <span class=\"k\">import</span> <span class=\"n\">devcmd</span><span class=\"p\">,</span>  <span class=\"n\">DEVCMD_FUNCTIONS</span><span class=\"p\">,</span> <span class=\"n\">DEVPRECMD_FUNCTIONS</span>\n<span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n<span class=\"kn\">from</span> <span class=\"nn\">utool.util_six</span> <span class=\"k\">import</span> <span class=\"n\">get_funcname</span>\n<span class=\"kn\">import</span> <span class=\"nn\">utool</span>\n<span class=\"c1\">#from ibeis.algo.hots import smk</span>\n<span class=\"kn\">import</span> <span class=\"nn\">plottool</span> <span class=\"k\">as</span> <span class=\"nn\">pt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">ibeis</span>\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n    <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">freeze_support</span><span class=\"p\">()</span>\n    <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">_preload</span><span class=\"p\">()</span>\n<span class=\"c1\">#utool.util_importer.dynamic_import(__name__, (&#39;_devcmds_ibeis&#39;, None),</span>\n<span class=\"c1\">#                                   developing=True)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis._devcmds_ibeis</span> <span class=\"k\">import</span> <span class=\"o\">*</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"c1\"># IBEIS</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.init</span> <span class=\"k\">import</span> <span class=\"n\">main_helpers</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.other</span> <span class=\"k\">import</span> <span class=\"n\">dbinfo</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.expt</span> <span class=\"k\">import</span> <span class=\"n\">experiment_configs</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.expt</span> <span class=\"k\">import</span> <span class=\"n\">harness</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis</span> <span class=\"k\">import</span> <span class=\"n\">params</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"nb\">print</span><span class=\"p\">,</span> <span class=\"n\">rrr</span><span class=\"p\">,</span> <span class=\"n\">profile</span> <span class=\"o\">=</span> <span class=\"n\">utool</span><span class=\"o\">.</span><span class=\"n\">inject2</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\">#------------------</span>\n<span class=\"c1\"># DEV DEVELOPMENT</span>\n<span class=\"c1\">#------------------</span>\n<span class=\"c1\"># This is where you write all of the functions that will become pristine</span>\n<span class=\"c1\"># and then go in _devcmds_ibeis.py</span>\n\n\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">./dev.py -e print_results --db PZ_Master1 -a varysize_pzm:dper_name=[1,2],dsize=1500 -t candidacy_k:K=1 --intersect_hack</span>\n<span class=\"sd\">./dev.py -e draw_rank_cmc -t baseline -a baseline --show --db PZ_Master1</span>\n<span class=\"sd\">./dev.py -e get_dbinfo --db PZ_Master1 --aid_list=baseline</span>\n<span class=\"sd\">./dev.py -e get_dbinfo --db PZ_MTEST</span>\n<span class=\"sd\">./dev.py -e get_dbinfo --db PZ_Master1 --aid_list=baseline --hackshow-unixtime --show</span>\n<span class=\"sd\">./dev.py -e get_dbinfo --db PZ_Master1 --hackshow-unixtime --show</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"c1\"># Quick interface into specific registered doctests</span>\n<span class=\"n\">REGISTERED_DOCTEST_EXPERIMENTS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">(</span><span class=\"s1\">&#39;ibeis.expt.experiment_drawing&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;draw_case_timedeltas&#39;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">&#39;timedelta_hist&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;timedelta_pie&#39;</span><span class=\"p\">]),</span>\n    <span class=\"p\">(</span><span class=\"s1\">&#39;ibeis.expt.experiment_drawing&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;draw_match_cases&#39;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">&#39;draw_cases&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;cases&#39;</span><span class=\"p\">]),</span>\n    <span class=\"p\">(</span><span class=\"s1\">&#39;ibeis.expt.experiment_drawing&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;draw_casetag_hist&#39;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">&#39;taghist&#39;</span><span class=\"p\">]),</span>\n\n    <span class=\"p\">(</span><span class=\"s1\">&#39;ibeis.expt.old_storage&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;draw_results&#39;</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s1\">&#39;ibeis.expt.experiment_drawing&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;draw_rank_cmc&#39;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">&#39;rank_cmc&#39;</span><span class=\"p\">]),</span>\n    <span class=\"p\">(</span><span class=\"s1\">&#39;ibeis.other.dbinfo&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;get_dbinfo&#39;</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s1\">&#39;ibeis.other.dbinfo&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;latex_dbstats&#39;</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s1\">&#39;ibeis.other.dbinfo&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;show_image_time_distributions&#39;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">&#39;db_time_hist&#39;</span><span class=\"p\">]),</span>\n    <span class=\"p\">(</span><span class=\"s1\">&#39;ibeis.expt.experiment_drawing&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;draw_rank_surface&#39;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">&#39;rank_surface&#39;</span><span class=\"p\">]),</span>\n    <span class=\"p\">(</span><span class=\"s1\">&#39;ibeis.expt.experiment_helpers&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;get_annotcfg_list&#39;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">&#39;print_acfg&#39;</span><span class=\"p\">]),</span>\n    <span class=\"p\">(</span><span class=\"s1\">&#39;ibeis.expt.experiment_printres&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;print_results&#39;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">&#39;printres&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;print&#39;</span><span class=\"p\">]),</span>\n    <span class=\"p\">(</span><span class=\"s1\">&#39;ibeis.expt.experiment_printres&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;print_latexsum&#39;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">&#39;latexsum&#39;</span><span class=\"p\">]),</span>\n    <span class=\"p\">(</span><span class=\"s1\">&#39;ibeis.dbio.export_subset&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;export_annots&#39;</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s1\">&#39;ibeis.expt.experiment_drawing&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;draw_annot_scoresep&#39;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">&#39;scores&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;scores_good&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;scores_all&#39;</span><span class=\"p\">]),</span>\n<span class=\"p\">]</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_exec_doctest_func</span><span class=\"p\">(</span><span class=\"n\">modname</span><span class=\"p\">,</span> <span class=\"n\">funcname</span><span class=\"p\">):</span>\n    <span class=\"n\">module</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">import_modname</span><span class=\"p\">(</span><span class=\"n\">modname</span><span class=\"p\">)</span>\n    <span class=\"n\">func</span> <span class=\"o\">=</span> <span class=\"n\">module</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"p\">[</span><span class=\"n\">funcname</span><span class=\"p\">]</span>\n    <span class=\"n\">testsrc</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_doctest_examples</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"n\">exec</span><span class=\"p\">(</span><span class=\"n\">testsrc</span><span class=\"p\">,</span> <span class=\"nb\">globals</span><span class=\"p\">(),</span> <span class=\"nb\">locals</span><span class=\"p\">())</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_register_doctest_precmds</span><span class=\"p\">():</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">functools</span> <span class=\"k\">import</span> <span class=\"n\">partial</span>\n    <span class=\"k\">for</span> <span class=\"n\">tup</span> <span class=\"ow\">in</span> <span class=\"n\">REGISTERED_DOCTEST_EXPERIMENTS</span><span class=\"p\">:</span>\n        <span class=\"n\">modname</span><span class=\"p\">,</span> <span class=\"n\">funcname</span> <span class=\"o\">=</span> <span class=\"n\">tup</span><span class=\"p\">[:</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n        <span class=\"n\">aliases</span> <span class=\"o\">=</span> <span class=\"n\">tup</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">tup</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">3</span> <span class=\"k\">else</span> <span class=\"p\">[]</span>\n        <span class=\"n\">aliases</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">funcname</span><span class=\"p\">]</span>\n        <span class=\"n\">_doctest_func</span> <span class=\"o\">=</span> <span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"n\">_exec_doctest_func</span><span class=\"p\">,</span> <span class=\"n\">modname</span><span class=\"p\">,</span> <span class=\"n\">funcname</span><span class=\"p\">)</span>\n        <span class=\"n\">devprecmd</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">aliases</span><span class=\"p\">)(</span><span class=\"n\">_doctest_func</span><span class=\"p\">)</span>\n\n<span class=\"n\">_register_doctest_precmds</span><span class=\"p\">()</span>\n\n\n<span class=\"nd\">@devcmd</span><span class=\"p\">(</span><span class=\"s1\">&#39;tune&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;autotune&#39;</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">tune_flann</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">qaid_list</span><span class=\"p\">,</span> <span class=\"n\">daid_list</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python dev.py -t tune --db PZ_MTEST</span>\n<span class=\"sd\">        python dev.py -t tune --db GZ_ALL</span>\n<span class=\"sd\">        python dev.py -t tune --db GIR_Tanya</span>\n<span class=\"sd\">        python dev.py -t tune --db PZ_Master0</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis._devscript import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; # build test data</span>\n<span class=\"sd\">        &gt;&gt;&gt; # execute function</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = func_wrapper()</span>\n<span class=\"sd\">        &gt;&gt;&gt; # verify results</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">all_aids</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_aids</span><span class=\"p\">()</span>\n    <span class=\"n\">vecs</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">vstack</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_vecs</span><span class=\"p\">(</span><span class=\"n\">all_aids</span><span class=\"p\">))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Tunning flann for species=</span><span class=\"si\">{species}</span><span class=\"s1\">:&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">species</span><span class=\"o\">=</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_database_species</span><span class=\"p\">(</span><span class=\"n\">all_aids</span><span class=\"p\">)))</span>\n    <span class=\"n\">tuned_params</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">tune_flann</span><span class=\"p\">(</span><span class=\"n\">vecs</span><span class=\"p\">,</span>\n                                 <span class=\"n\">target_precision</span><span class=\"o\">=.</span><span class=\"mi\">98</span><span class=\"p\">,</span>\n                                 <span class=\"n\">build_weight</span><span class=\"o\">=</span><span class=\"mf\">0.05</span><span class=\"p\">,</span>\n                                 <span class=\"n\">memory_weight</span><span class=\"o\">=</span><span class=\"mf\">0.00</span><span class=\"p\">,</span>\n                                 <span class=\"n\">sample_fraction</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>\n    <span class=\"n\">tuned_params</span>\n\n    <span class=\"c1\">#tuned_params2 = vt.tune_flann(vecs,</span>\n    <span class=\"c1\">#                              target_precision=.90,</span>\n    <span class=\"c1\">#                              build_weight=0.001,</span>\n    <span class=\"c1\">#                              memory_weight=0.00,</span>\n    <span class=\"c1\">#                              sample_fraction=0.5)</span>\n    <span class=\"c1\">#tuned_params2</span>\n\n\n<span class=\"nd\">@devcmd</span><span class=\"p\">(</span><span class=\"s1\">&#39;incremental&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;inc&#39;</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">incremental_test</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">qaid_list</span><span class=\"p\">,</span> <span class=\"n\">daid_list</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Adds / queries new images one at a time to a clean test database.</span>\n<span class=\"sd\">    Tests the complete system.</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs       (list) : IBEISController object</span>\n<span class=\"sd\">        qaid_list (list) : list of annotation-ids to query</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python dev.py -t inc --db PZ_MTEST --qaid 1:30:3 --cmd</span>\n\n<span class=\"sd\">        python dev.py --db PZ_MTEST --allgt --cmd</span>\n\n<span class=\"sd\">        python dev.py --db PZ_MTEST --allgt -t inc</span>\n\n<span class=\"sd\">        python dev.py -t inc --db PZ_MTEST --qaid 1:30:3 --cmd</span>\n\n<span class=\"sd\">        python dev.py -t inc --db GZ_ALL --ninit 100 --noqcache</span>\n\n<span class=\"sd\">        python dev.py -t inc --db PZ_MTEST --noqcache --interactive-after 40</span>\n<span class=\"sd\">        python dev.py -t inc --db PZ_Master0 --noqcache --interactive-after 10000 --ninit 400</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(&#39;PZ_MTEST&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; qaid_list = ibs.get_valid_aids()</span>\n<span class=\"sd\">        &gt;&gt;&gt; daid_list = None</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.hots</span> <span class=\"k\">import</span> <span class=\"n\">automated_matcher</span>\n    <span class=\"n\">ibs1</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span>\n    <span class=\"n\">num_initial</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argval</span><span class=\"p\">(</span><span class=\"s1\">&#39;--ninit&#39;</span><span class=\"p\">,</span> <span class=\"n\">type_</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">automated_matcher</span><span class=\"o\">.</span><span class=\"n\">incremental_test</span><span class=\"p\">(</span><span class=\"n\">ibs1</span><span class=\"p\">,</span> <span class=\"n\">num_initial</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@devcmd</span><span class=\"p\">(</span><span class=\"s1\">&#39;inspect&#39;</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">inspect_matches</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">qaid_list</span><span class=\"p\">,</span> <span class=\"n\">daid_list</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;&lt;inspect_matches&gt;&#39;</span><span class=\"p\">)</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.gui</span> <span class=\"k\">import</span> <span class=\"n\">inspect_gui</span>\n    <span class=\"k\">return</span> <span class=\"n\">inspect_gui</span><span class=\"o\">.</span><span class=\"n\">test_review_widget</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">qaid_list</span><span class=\"p\">,</span> <span class=\"n\">daid_list</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"get_ibslist\"><a class=\"viewcode-back\" href=\"../../../ibeis/#ibeis.dev.get_ibslist\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">get_ibslist</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[dev] get_ibslist&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">ibs_GV</span>  <span class=\"o\">=</span> <span class=\"n\">ibs</span>\n    <span class=\"n\">ibs_RI</span>  <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">clone_handle</span><span class=\"p\">(</span><span class=\"n\">nogravity_hack</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">ibs_RIW</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">clone_handle</span><span class=\"p\">(</span><span class=\"n\">nogravity_hack</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">gravity_weighting</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">ibs_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ibs_GV</span><span class=\"p\">,</span> <span class=\"n\">ibs_RI</span><span class=\"p\">,</span> <span class=\"n\">ibs_RIW</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">ibs_list</span></div>\n\n\n<span class=\"nd\">@devcmd</span><span class=\"p\">(</span><span class=\"s1\">&#39;gv_scores&#39;</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">compgrav_draw_score_sep</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">qaid_list</span><span class=\"p\">,</span> <span class=\"n\">daid_list</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[dev] compgrav_draw_score_sep&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">ibs_list</span> <span class=\"o\">=</span> <span class=\"n\">get_ibslist</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">ibs_</span> <span class=\"ow\">in</span> <span class=\"n\">ibs_list</span><span class=\"p\">:</span>\n        <span class=\"n\">draw_annot_scoresep</span><span class=\"p\">(</span><span class=\"n\">ibs_</span><span class=\"p\">,</span> <span class=\"n\">qaid_list</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#--------------------</span>\n<span class=\"c1\"># RUN DEV EXPERIMENTS</span>\n<span class=\"c1\">#--------------------</span>\n\n\n<span class=\"c1\">#def run_registered_precmd(precmd_name):</span>\n<span class=\"c1\">#    # Very hacky way to run just a single registered precmd</span>\n<span class=\"c1\">#    for (func_aliases, func) in DEVPRECMD_FUNCTIONS:</span>\n<span class=\"c1\">#        for aliases in func_aliases:</span>\n<span class=\"c1\">#            ret = precmd_name in input_precmd_list</span>\n<span class=\"c1\">#            if ret:</span>\n<span class=\"c1\">#                func()</span>\n\n\n<div class=\"viewcode-block\" id=\"run_devprecmds\"><a class=\"viewcode-back\" href=\"../../../ibeis/#ibeis.dev.run_devprecmds\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">run_devprecmds</span><span class=\"p\">():</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Looks for pre-tests specified with the -t flag and runs them</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\">#input_precmd_list = params.args.tests[:]</span>\n    <span class=\"n\">input_precmd_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argval</span><span class=\"p\">(</span><span class=\"s1\">&#39;-e&#39;</span><span class=\"p\">,</span> <span class=\"n\">type_</span><span class=\"o\">=</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"p\">[])</span>\n    <span class=\"n\">valid_precmd_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">def</span> <span class=\"nf\">intest</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">precmd_name</span> <span class=\"ow\">in</span> <span class=\"n\">args</span><span class=\"p\">:</span>\n            <span class=\"n\">valid_precmd_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">precmd_name</span><span class=\"p\">)</span>\n            <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"n\">precmd_name</span> <span class=\"ow\">in</span> <span class=\"n\">input_precmd_list</span>\n            <span class=\"n\">ret2</span> <span class=\"o\">=</span> <span class=\"n\">precmd_name</span> <span class=\"ow\">in</span> <span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">unknown</span>  <span class=\"c1\"># Let unparsed args count towards tests</span>\n            <span class=\"k\">if</span> <span class=\"n\">ret</span> <span class=\"ow\">or</span> <span class=\"n\">ret2</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">ret</span><span class=\"p\">:</span>\n                    <span class=\"n\">input_precmd_list</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">precmd_name</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"n\">ret2</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;+===================&#39;</span><span class=\"p\">)</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;| running precmd = </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">,))</span>\n                <span class=\"k\">return</span> <span class=\"n\">ret</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">start_logging</span><span class=\"p\">(</span><span class=\"n\">appname</span><span class=\"o\">=</span><span class=\"s1\">&#39;ibeis&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Implicit (decorated) test functions</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">func_aliases</span><span class=\"p\">,</span> <span class=\"n\">func</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"n\">DEVPRECMD_FUNCTIONS</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">intest</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">func_aliases</span><span class=\"p\">):</span>\n            <span class=\"c1\">#with utool.Indenter(&#39;[dev.&#39; + get_funcname(func) + &#39;]&#39;):</span>\n            <span class=\"n\">func</span><span class=\"p\">()</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Exiting after first precommand&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">input_precmd_list</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">AssertionError</span><span class=\"p\">(</span><span class=\"s1\">&#39;Unhandled tests: &#39;</span> <span class=\"o\">+</span> <span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">input_precmd_list</span><span class=\"p\">))</span></div>\n\n\n<span class=\"c1\">#@utool.indent_func(&#39;[dev]&#39;)</span>\n<div class=\"viewcode-block\" id=\"run_devcmds\"><a class=\"viewcode-back\" href=\"../../../ibeis/#ibeis.dev.run_devcmds\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">run_devcmds</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">qaid_list</span><span class=\"p\">,</span> <span class=\"n\">daid_list</span><span class=\"p\">,</span> <span class=\"n\">acfg</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    This function runs tests passed in with the -t flag</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n    <span class=\"c1\">#print(&#39;[dev] run_devcmds&#39;)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;==========================&#39;</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[DEV] RUN EXPERIMENTS </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_dbname</span><span class=\"p\">())</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;==========================&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">input_test_list</span> <span class=\"o\">=</span> <span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">tests</span><span class=\"p\">[:]</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;input_test_list = </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr2</span><span class=\"p\">(</span><span class=\"n\">input_test_list</span><span class=\"p\">),))</span>\n    <span class=\"c1\"># fnum = 1</span>\n\n    <span class=\"n\">valid_test_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>  <span class=\"c1\"># build list for printing in case of failure</span>\n    <span class=\"n\">valid_test_helpstr_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>  <span class=\"c1\"># for printing</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">mark_test_handled</span><span class=\"p\">(</span><span class=\"n\">testname</span><span class=\"p\">):</span>\n        <span class=\"n\">input_test_list</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">testname</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">intest</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">helpstr</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;help&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">valid_test_helpstr_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s1\">&#39;   -t &#39;</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;, &#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">helpstr</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">testname</span> <span class=\"ow\">in</span> <span class=\"n\">args</span><span class=\"p\">:</span>\n            <span class=\"n\">valid_test_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">testname</span><span class=\"p\">)</span>\n            <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"n\">testname</span> <span class=\"ow\">in</span> <span class=\"n\">input_test_list</span>\n            <span class=\"n\">ret2</span> <span class=\"o\">=</span> <span class=\"n\">testname</span> <span class=\"ow\">in</span> <span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">unknown</span>  <span class=\"c1\"># Let unparsed args count towards tests</span>\n            <span class=\"k\">if</span> <span class=\"n\">ret</span> <span class=\"ow\">or</span> <span class=\"n\">ret2</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">ret</span><span class=\"p\">:</span>\n                    <span class=\"n\">mark_test_handled</span><span class=\"p\">(</span><span class=\"n\">testname</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"n\">ret2</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">+===================&#39;</span><span class=\"p\">)</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39; [dev] running testname = </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">,))</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;+-------------------</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"n\">ret</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n    <span class=\"n\">valid_test_helpstr_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s1\">&#39;    # --- Simple Tests ---&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Explicit (simple) test functions</span>\n    <span class=\"k\">if</span> <span class=\"n\">intest</span><span class=\"p\">(</span><span class=\"s1\">&#39;export&#39;</span><span class=\"p\">):</span>\n        <span class=\"n\">export</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">intest</span><span class=\"p\">(</span><span class=\"s1\">&#39;dbinfo&#39;</span><span class=\"p\">):</span>\n        <span class=\"n\">dbinfo</span><span class=\"o\">.</span><span class=\"n\">get_dbinfo</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">intest</span><span class=\"p\">(</span><span class=\"s1\">&#39;headers&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;schema&#39;</span><span class=\"p\">):</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">print_schema</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"n\">intest</span><span class=\"p\">(</span><span class=\"s1\">&#39;info&#39;</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_infostr</span><span class=\"p\">())</span>\n    <span class=\"k\">if</span> <span class=\"n\">intest</span><span class=\"p\">(</span><span class=\"s1\">&#39;printcfg&#39;</span><span class=\"p\">):</span>\n        <span class=\"n\">printcfg</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">intest</span><span class=\"p\">(</span><span class=\"s1\">&#39;tables&#39;</span><span class=\"p\">):</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">print_tables</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"n\">intest</span><span class=\"p\">(</span><span class=\"s1\">&#39;imgtbl&#39;</span><span class=\"p\">):</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">print_image_table</span><span class=\"p\">()</span>\n\n    <span class=\"n\">valid_test_helpstr_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s1\">&#39;    # --- Decor Tests ---&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"n\">locals_</span> <span class=\"o\">=</span> <span class=\"nb\">locals</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># Implicit (decorated) test functions</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">func_aliases</span><span class=\"p\">,</span> <span class=\"n\">func</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"n\">DEVCMD_FUNCTIONS</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">intest</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">func_aliases</span><span class=\"p\">):</span>\n            <span class=\"n\">funcname</span> <span class=\"o\">=</span> <span class=\"n\">get_funcname</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)</span>\n            <span class=\"c1\">#with utool.Indenter(&#39;[dev.&#39; + funcname + &#39;]&#39;):</span>\n            <span class=\"k\">with</span> <span class=\"n\">utool</span><span class=\"o\">.</span><span class=\"n\">Timer</span><span class=\"p\">(</span><span class=\"n\">funcname</span><span class=\"p\">):</span>\n                <span class=\"c1\">#print(&#39;[dev] qid_list=%r&#39; % (qaid_list,))</span>\n                <span class=\"c1\"># FIXME: , daid_list</span>\n                <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_func_argspec</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                    <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"n\">func</span><span class=\"p\">()</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"n\">func</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">qaid_list</span><span class=\"p\">,</span> <span class=\"n\">daid_list</span><span class=\"p\">)</span>\n                <span class=\"c1\"># Add variables returned by the function to the</span>\n                <span class=\"c1\"># &quot;local scope&quot; (the exec scop)</span>\n                <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"p\">,</span> <span class=\"s1\">&#39;items&#39;</span><span class=\"p\">):</span>\n                    <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">val</span> <span class=\"ow\">in</span> <span class=\"n\">ret</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n                        <span class=\"k\">if</span> <span class=\"n\">utool</span><span class=\"o\">.</span><span class=\"n\">is_valid_varname</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">):</span>\n                            <span class=\"n\">locals_</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n\n    <span class=\"n\">valid_test_helpstr_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s1\">&#39;    # --- Config Tests ---&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># ------</span>\n    <span class=\"c1\"># RUNS EXPERIMENT HARNESS OVER VALID TESTNAMES SPECIFIED WITH -t</span>\n    <span class=\"c1\"># ------</span>\n\n    <span class=\"c1\"># Config driven test functions</span>\n    <span class=\"c1\"># Allow any testcfg to be in tests like: vsone_1 or vsmany_3</span>\n    <span class=\"n\">test_cfg_name_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">test_cfg_name</span> <span class=\"ow\">in</span> <span class=\"n\">experiment_configs</span><span class=\"o\">.</span><span class=\"n\">TEST_NAMES</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">intest</span><span class=\"p\">(</span><span class=\"n\">test_cfg_name</span><span class=\"p\">):</span>\n            <span class=\"n\">test_cfg_name_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">test_cfg_name</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Hack to allow for very customized harness tests</span>\n    <span class=\"k\">for</span> <span class=\"n\">testname</span> <span class=\"ow\">in</span> <span class=\"n\">input_test_list</span><span class=\"p\">[:]:</span>\n        <span class=\"k\">if</span> <span class=\"n\">testname</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">&#39;custom:&#39;</span><span class=\"p\">):</span>\n            <span class=\"n\">test_cfg_name_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">testname</span><span class=\"p\">)</span>\n            <span class=\"n\">mark_test_handled</span><span class=\"p\">(</span><span class=\"n\">testname</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">test_cfg_name_list</span><span class=\"p\">):</span>\n        <span class=\"n\">fnum</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">next_fnum</span><span class=\"p\">()</span>\n        <span class=\"c1\"># Run Experiments</span>\n        <span class=\"c1\"># backwards compatibility yo</span>\n        <span class=\"n\">acfgstr_name_list</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;OVERRIDE_HACK&#39;</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">qaid_list</span><span class=\"p\">,</span> <span class=\"n\">daid_list</span><span class=\"p\">)}</span>\n        <span class=\"k\">assert</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s1\">&#39;This way of running tests no longer works. It may be fixed in the future&#39;</span>\n        <span class=\"c1\">#acfg</span>\n        <span class=\"n\">harness</span><span class=\"o\">.</span><span class=\"n\">test_configurations</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">acfgstr_name_list</span><span class=\"p\">,</span> <span class=\"n\">test_cfg_name_list</span><span class=\"p\">)</span>\n\n    <span class=\"n\">valid_test_helpstr_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s1\">&#39;    # --- Help ---&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">intest</span><span class=\"p\">(</span><span class=\"s1\">&#39;help&#39;</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;valid tests are:&#39;</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">valid_test_helpstr_list</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"n\">locals_</span>\n\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">input_test_list</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;valid tests are: </span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">valid_test_list</span><span class=\"p\">))</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"s1\">&#39;Unknown tests: </span><span class=\"si\">%r</span><span class=\"s1\"> &#39;</span> <span class=\"o\">%</span> <span class=\"n\">input_test_list</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">locals_</span></div>\n\n\n<span class=\"c1\">#-------------------</span>\n<span class=\"c1\"># CUSTOM DEV FUNCS</span>\n<span class=\"c1\">#-------------------</span>\n\n\n<span class=\"c1\">#------------------</span>\n<span class=\"c1\"># DEV MAIN</span>\n<span class=\"c1\">#------------------</span>\n\n<div class=\"viewcode-block\" id=\"dev_snippets\"><a class=\"viewcode-back\" href=\"../../../ibeis/#ibeis.dev.dev_snippets\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">dev_snippets</span><span class=\"p\">(</span><span class=\"n\">main_locals</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; Common variables for convineince when interacting with IPython &quot;&quot;&quot;</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[dev] dev_snippets&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">species</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;zebra_grevys&#39;</span>\n    <span class=\"n\">quick</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"n\">fnum</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n    <span class=\"c1\"># Get reference to IBEIS Controller</span>\n    <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">main_locals</span><span class=\"p\">[</span><span class=\"s1\">&#39;ibs&#39;</span><span class=\"p\">]</span>\n    <span class=\"k\">if</span> <span class=\"s1\">&#39;back&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">main_locals</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Get reference to GUI Backend</span>\n        <span class=\"n\">back</span> <span class=\"o\">=</span> <span class=\"n\">main_locals</span><span class=\"p\">[</span><span class=\"s1\">&#39;back&#39;</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">back</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Get reference to GUI Frontend</span>\n            <span class=\"n\">front</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">back</span><span class=\"p\">,</span> <span class=\"s1\">&#39;front&#39;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n            <span class=\"n\">ibswgt</span> <span class=\"o\">=</span> <span class=\"n\">front</span>\n            <span class=\"n\">view</span> <span class=\"o\">=</span> <span class=\"n\">ibswgt</span><span class=\"o\">.</span><span class=\"n\">views</span><span class=\"p\">[</span><span class=\"s1\">&#39;images&#39;</span><span class=\"p\">]</span>\n            <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">ibswgt</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"p\">[</span><span class=\"s1\">&#39;names_tree&#39;</span><span class=\"p\">]</span>\n            <span class=\"n\">selection_model</span> <span class=\"o\">=</span> <span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">selectionModel</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"n\">ibs</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"c1\">#ibs.dump_tables()</span>\n        <span class=\"n\">annots</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">annots</span><span class=\"p\">()</span>\n        <span class=\"n\">images</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">images</span><span class=\"p\">()</span>\n        <span class=\"n\">aid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_aids</span><span class=\"p\">()</span>\n        <span class=\"n\">gid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_valid_gids</span><span class=\"p\">()</span>\n        <span class=\"c1\">#nid_list = ibs.get_valid_nids()</span>\n        <span class=\"c1\">#valid_nid_list   = ibs.get_annot_name_rowids(aid_list)</span>\n        <span class=\"c1\">#valid_aid_names  = ibs.get_annot_names(aid_list)</span>\n        <span class=\"c1\">#valid_aid_gtrues = ibs.get_annot_groundtruth(aid_list)</span>\n    <span class=\"k\">return</span> <span class=\"nb\">locals</span><span class=\"p\">()</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_sortbystr\"><a class=\"viewcode-back\" href=\"../../../ibeis/#ibeis.dev.get_sortbystr\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">get_sortbystr</span><span class=\"p\">(</span><span class=\"n\">str_list</span><span class=\"p\">,</span> <span class=\"n\">key_list</span><span class=\"p\">,</span> <span class=\"n\">strlbl</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">keylbl</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"n\">sortx</span> <span class=\"o\">=</span> <span class=\"n\">key_list</span><span class=\"o\">.</span><span class=\"n\">argsort</span><span class=\"p\">()</span>\n    <span class=\"n\">ndigits</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">key_list</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">())),</span> <span class=\"mi\">0</span> <span class=\"k\">if</span> <span class=\"n\">keylbl</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"k\">else</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">keylbl</span><span class=\"p\">))</span>\n    <span class=\"n\">keyfmt</span>  <span class=\"o\">=</span> <span class=\"s1\">&#39;%&#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ndigits</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;d&#39;</span>\n    <span class=\"k\">if</span> <span class=\"n\">keylbl</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">header</span> <span class=\"o\">=</span> <span class=\"n\">keylbl</span> <span class=\"o\">+</span> <span class=\"s1\">&#39; --- &#39;</span> <span class=\"o\">+</span> <span class=\"n\">strlbl</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">header</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"n\">sorted_strs</span> <span class=\"o\">=</span> <span class=\"p\">([(</span><span class=\"n\">keyfmt</span> <span class=\"o\">%</span> <span class=\"n\">key</span> <span class=\"o\">+</span> <span class=\"s1\">&#39; --- &#39;</span> <span class=\"o\">+</span> <span class=\"n\">str_</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">str_</span><span class=\"p\">,</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">str_list</span><span class=\"p\">[</span><span class=\"n\">sortx</span><span class=\"p\">],</span> <span class=\"n\">key_list</span><span class=\"p\">[</span><span class=\"n\">sortx</span><span class=\"p\">])])</span>\n    <span class=\"k\">def</span> <span class=\"nf\">boxjoin</span><span class=\"p\">(</span><span class=\"n\">list_</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"n\">topline</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;+----------&#39;</span>\n        <span class=\"n\">botline</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;L__________&#39;</span>\n        <span class=\"n\">boxlines</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">boxlines</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">topline</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">header</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">boxlines</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">header</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">boxlines</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">topline</span><span class=\"p\">)</span>\n\n        <span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"n\">utool</span><span class=\"o\">.</span><span class=\"n\">indentjoin</span><span class=\"p\">(</span><span class=\"n\">list_</span><span class=\"p\">,</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\"> | &#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">boxlines</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">body</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\"> &#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">boxlines</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">botline</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"s1\">&#39;&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">boxlines</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">boxjoin</span><span class=\"p\">(</span><span class=\"n\">sorted_strs</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"p\">)</span></div>\n\n\n<span class=\"c1\"># @devcmd(&#39;test_feats&#39;)</span>\n<span class=\"c1\"># def tst_feats(ibs, qaid_list, daid_list=None):</span>\n<span class=\"c1\">#     &quot;&quot;&quot;</span>\n<span class=\"c1\">#     test_feats shows features using several different parameters</span>\n\n<span class=\"c1\">#     Args:</span>\n<span class=\"c1\">#         ibs (IBEISController):</span>\n<span class=\"c1\">#         qaid_list (int): query annotation id</span>\n\n<span class=\"c1\">#     CommandLine:</span>\n<span class=\"c1\">#         python dev.py -t test_feats --db PZ_MTEST --all --qindex 0 --show -w</span>\n\n<span class=\"c1\">#     Example:</span>\n<span class=\"c1\">#         &gt;&gt;&gt; import ibeis</span>\n<span class=\"c1\">#         &gt;&gt;&gt; ibs = ibeis.opendb(&#39;testdb1&#39;)</span>\n<span class=\"c1\">#         &gt;&gt;&gt; qaid_list = [1]</span>\n<span class=\"c1\">#     &quot;&quot;&quot;</span>\n<span class=\"c1\">#     from ibeis import viz</span>\n<span class=\"c1\">#     from ibeis.expt import experiment_configs</span>\n<span class=\"c1\">#     import utool as ut</span>\n\n<span class=\"c1\">#     NUM_PASSES = 1 if not utool.get_argflag(&#39;--show&#39;) else 2</span>\n<span class=\"c1\">#     varyparams_list = [experiment_configs.featparams]</span>\n\n<span class=\"c1\">#     def tst_featcfg_combo(ibs, aid, alldictcomb, count, nKpts_list, cfgstr_list):</span>\n<span class=\"c1\">#         for dict_ in ut.progiter(alldictcomb, lbl=&#39;FeatCFG Combo: &#39;):</span>\n<span class=\"c1\">#             cfgstr_ = ut.repr2(dict_)</span>\n<span class=\"c1\">#             if count == 0:</span>\n<span class=\"c1\">#                 # On first run just record info</span>\n<span class=\"c1\">#                 kpts = ibs.get_annot_kpts(aid)</span>\n<span class=\"c1\">#                 nKpts_list.append(len(kpts))</span>\n<span class=\"c1\">#                 cfgstr_list.append(cfgstr_)</span>\n<span class=\"c1\">#             if count == 1:</span>\n<span class=\"c1\">#                 kpts = ibs.get_annot_kpts(aid)</span>\n<span class=\"c1\">#                 # If second run happens display info</span>\n<span class=\"c1\">#                 cfgpackstr = utool.packstr(cfgstr_, textwidth=80,</span>\n<span class=\"c1\">#                                               breakchars=&#39;,&#39;, newline_prefix=&#39;&#39;,</span>\n<span class=\"c1\">#                                               break_words=False, wordsep=&#39;,&#39;)</span>\n<span class=\"c1\">#                 title_suffix = (&#39; len(kpts) = %r \\n&#39; % len(kpts)) + cfgpackstr</span>\n<span class=\"c1\">#                 viz.show_chip(ibs, aid, fnum=pt.next_fnum(),</span>\n<span class=\"c1\">#                               title_suffix=title_suffix, darken=.8,</span>\n<span class=\"c1\">#                               ell_linewidth=2, ell_alpha=.6, config=dict_)</span>\n\n<span class=\"c1\">#     alldictcomb = utool.flatten(map(utool.all_dict_combinations, varyparams_list))</span>\n<span class=\"c1\">#     for count in range(NUM_PASSES):</span>\n<span class=\"c1\">#         nKpts_list = []</span>\n<span class=\"c1\">#         cfgstr_list = []</span>\n<span class=\"c1\">#         for aid in qaid_list:</span>\n<span class=\"c1\">#             test_featcfg_combo(ibs, aid, alldictcomb, count, nKpts_list, cfgstr_list)</span>\n<span class=\"c1\">#             #for dict_ in alldictcomb:</span>\n<span class=\"c1\">#         if count == 0:</span>\n<span class=\"c1\">#             nKpts_list = np.array(nKpts_list)</span>\n<span class=\"c1\">#             cfgstr_list = np.array(cfgstr_list)</span>\n<span class=\"c1\">#             print(get_sortbystr(cfgstr_list, nKpts_list, &#39;cfg&#39;, &#39;nKpts&#39;))</span>\n\n\n<div class=\"viewcode-block\" id=\"run_dev\"><a class=\"viewcode-back\" href=\"../../../ibeis/#ibeis.dev.run_dev\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">run_dev</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    main developer command</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python dev.py --db PZ_Master0 --controlled --print-rankhist</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[dev] --- RUN DEV ---&#39;</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Get reference to controller</span>\n    <span class=\"k\">if</span> <span class=\"n\">ibs</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Get aids marked as test cases</span>\n        <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argflag</span><span class=\"p\">(</span><span class=\"s1\">&#39;--expanded-aids&#39;</span><span class=\"p\">):</span>\n            <span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">qaid_list</span><span class=\"p\">,</span> <span class=\"n\">daid_list</span> <span class=\"o\">=</span> <span class=\"n\">main_helpers</span><span class=\"o\">.</span><span class=\"n\">testdata_expanded_aids</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">=</span><span class=\"n\">ibs</span><span class=\"p\">)</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[run_def] Test Annotations:&#39;</span><span class=\"p\">)</span>\n            <span class=\"c1\">#print(&#39;[run_dev] * qaid_list = %s&#39; % ut.packstr(qaid_list, 80, nlprefix=&#39;[run_dev]     &#39;))</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">qaid_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"n\">daid_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">qaid_list</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;assert!&#39;</span>\n            <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">daid_list</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;daid_list!&#39;</span>\n        <span class=\"k\">except</span> <span class=\"ne\">AssertionError</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n            <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"s1\">&#39; (try using command line argument --expanded-aids to enable)&#39;</span>\n            <span class=\"n\">utool</span><span class=\"o\">.</span><span class=\"n\">printex</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">,</span> <span class=\"s1\">&#39;len(qaid_list) = 0</span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"p\">),</span> <span class=\"n\">iswarning</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"n\">utool</span><span class=\"o\">.</span><span class=\"n\">printex</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">,</span> <span class=\"s1\">&#39;or len(daid_list) = 0</span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"p\">),</span> <span class=\"n\">iswarning</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"c1\">#qaid_list = ibs.get_valid_aids()[0]</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">qaid_list</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"ow\">or</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Run the dev experiments</span>\n            <span class=\"n\">expt_locals</span> <span class=\"o\">=</span> <span class=\"n\">run_devcmds</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">qaid_list</span><span class=\"p\">,</span> <span class=\"n\">daid_list</span><span class=\"p\">)</span>\n            <span class=\"c1\"># Add experiment locals to local namespace</span>\n            <span class=\"n\">execstr_locals</span> <span class=\"o\">=</span> <span class=\"n\">utool</span><span class=\"o\">.</span><span class=\"n\">execstr_dict</span><span class=\"p\">(</span><span class=\"n\">expt_locals</span><span class=\"p\">,</span> <span class=\"s1\">&#39;expt_locals&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">exec</span><span class=\"p\">(</span><span class=\"n\">execstr_locals</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"nb\">locals</span><span class=\"p\">()</span></div>\n\n\n<span class=\"c1\">#-------------</span>\n<span class=\"c1\"># EXAMPLE TEXT</span>\n<span class=\"c1\">#-------------</span>\n\n<span class=\"n\">EXAMPLE_TEXT</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;&#39;</span>\n<span class=\"s1\">### DOWNLOAD A TEST DATABASE (IF REQUIRED) ###</span>\n<span class=\"s1\">python dev.py --t mtest</span>\n<span class=\"s1\">python dev.py --t nauts</span>\n<span class=\"s1\">./resetdbs.sh  # FIXME</span>\n<span class=\"s1\">python ibeis/dbio/ingest_database.py  &lt;- see module for usage</span>\n\n<span class=\"s1\">### LIST AVAIABLE DATABASES ###</span>\n<span class=\"s1\">python dev.py -t list_dbs</span>\n\n<span class=\"s1\">### CHOOSE A DATABASE ###</span>\n<span class=\"s1\">python dev.py --db PZ_Master0 --setdb</span>\n<span class=\"s1\">python dev.py --db GZ_ALL --setdb</span>\n<span class=\"s1\">python dev.py --db PZ_MTEST --setdb</span>\n<span class=\"s1\">python dev.py --db NAUT_test --setdb</span>\n<span class=\"s1\">python dev.py --db testdb1 --setdb</span>\n<span class=\"s1\">python dev.py --db seals2 --setdb</span>\n\n<span class=\"s1\">### DATABASE INFORMATION ###</span>\n<span class=\"s1\">python dev.py -t dbinfo</span>\n\n<span class=\"s1\">### EXPERIMENTS ###</span>\n<span class=\"s1\">python dev.py --allgt -t best</span>\n<span class=\"s1\">python dev.py --allgt -t vsone</span>\n<span class=\"s1\">python dev.py --allgt -t vsmany</span>\n<span class=\"s1\">python dev.py --allgt -t nsum</span>\n\n<span class=\"s1\"># Newstyle experiments</span>\n<span class=\"s1\"># commmand             # annot settings            # test settings</span>\n<span class=\"s1\">python -m ibeis.dev    -a default:qaids=allgt      -t best</span>\n\n\n<span class=\"s1\">### COMPARE TWO CONFIGS ###</span>\n<span class=\"s1\">python dev.py --allgt -t nsum vsmany vsone</span>\n<span class=\"s1\">python dev.py --allgt -t nsum vsmany</span>\n<span class=\"s1\">python dev.py --allgt -t nsum vsmany vsone smk</span>\n\n<span class=\"s1\">### VARY DATABASE SIZE</span>\n<span class=\"s1\">python -m ibeis.dev -a default:qaids=allgt,dsize=100,qper_name=1,qmin_per_name=1 -t default --db PZ_MTEST</span>\n<span class=\"s1\">python -m ibeis.dev -a candidacy:qsize=10,dsize=100 -t default --db PZ_MTEST --verbtd</span>\n\n\n<span class=\"s1\">### VIZ A SET OF MATCHES ###</span>\n<span class=\"s1\">python dev.py --db PZ_MTEST -t query --qaid 72 110 -w</span>\n<span class=\"s1\">#python dev.py --allgt -t vsone vsmany</span>\n<span class=\"s1\">#python dev.py --allgt -t vsone --vz --vh</span>\n\n<span class=\"s1\">### RUN A SMALL AMOUNT OF VSONE TESTS ###</span>\n<span class=\"s1\">python dev.py --allgt -t  vsone --qindex 0:1 --vz --vh --vf --noqcache</span>\n<span class=\"s1\">python dev.py --allgt --qindex 0:20 --</span>\n\n<span class=\"s1\">### DUMP ANALYSIS FIGURES TO DISK ###</span>\n<span class=\"s1\">python dev.py --allgt -t best --vf --vz --fig-dname query_analysis_easy</span>\n<span class=\"s1\">python dev.py --allgt -t best --vf --vh --fig-dname query_analysis_hard</span>\n<span class=\"s1\">python dev.py --allgt -t best --vf --va --fig-dname query_analysis_all</span>\n\n<span class=\"s1\">python dev.py --db PZ_MTEST --set-aids-as-hard 27 28 44 49 50 51 53 54 66 72 89 97 110</span>\n<span class=\"s1\">python dev.py --hard -t best vsone nsum</span>\n<span class=\"s1\">&gt;&gt;&gt;</span>\n<span class=\"s1\">&#39;&#39;&#39;</span>\n\n<span class=\"c1\">#L______________</span>\n\n\n<span class=\"c1\">#def run_devmain2():</span>\n<span class=\"c1\">#    input_test_list = ut.get_argval((&#39;--tests&#39;, &#39;-t&#39;,), type_=list, default=[])[:]</span>\n<span class=\"c1\">#    print(&#39;input_test_list = %s&#39; % (ut.repr2(input_test_list),))</span>\n<span class=\"c1\">#    # fnum = 1</span>\n\n<span class=\"c1\">#    valid_test_list = []  # build list for printing in case of failure</span>\n<span class=\"c1\">#    valid_test_helpstr_list = []  # for printing</span>\n\n<span class=\"c1\">#    def mark_test_handled(testname):</span>\n<span class=\"c1\">#        input_test_list.remove(testname)</span>\n\n<span class=\"c1\">#    def intest(*args, **kwargs):</span>\n<span class=\"c1\">#        helpstr = kwargs.get(&#39;help&#39;, &#39;&#39;)</span>\n<span class=\"c1\">#        valid_test_helpstr_list.append(&#39;   -t &#39; + &#39;, &#39;.join(args) + helpstr)</span>\n<span class=\"c1\">#        for testname in args:</span>\n<span class=\"c1\">#            valid_test_list.append(testname)</span>\n<span class=\"c1\">#            ret = testname in input_test_list</span>\n<span class=\"c1\">#            ret2 = testname in params.unknown  # Let unparsed args count towards tests</span>\n<span class=\"c1\">#            if ret or ret2:</span>\n<span class=\"c1\">#                if ret:</span>\n<span class=\"c1\">#                    mark_test_handled(testname)</span>\n<span class=\"c1\">#                else:</span>\n<span class=\"c1\">#                    ret = ret2</span>\n<span class=\"c1\">#                print(&#39;\\n+===================&#39;)</span>\n<span class=\"c1\">#                print(&#39; [dev2] running testname = %s&#39; % (args,))</span>\n<span class=\"c1\">#                print(&#39;+-------------------\\n&#39;)</span>\n<span class=\"c1\">#                return ret</span>\n<span class=\"c1\">#        return False</span>\n\n<span class=\"c1\">#    anynewhit = False</span>\n<span class=\"c1\">#    # Implicit (decorated) test functions</span>\n<span class=\"c1\">#    print(&#39;DEVCMD_FUNCTIONS2 = %r&#39; % (DEVCMD_FUNCTIONS2,))</span>\n<span class=\"c1\">#    for (func_aliases, func) in DEVCMD_FUNCTIONS2:</span>\n<span class=\"c1\">#        if intest(*func_aliases):</span>\n<span class=\"c1\">#            funcname = get_funcname(func)</span>\n<span class=\"c1\">#            with utool.Timer(funcname):</span>\n<span class=\"c1\">#                if len(ut.get_func_argspec(func).args) == 0:</span>\n<span class=\"c1\">#                    func()</span>\n<span class=\"c1\">#                    anynewhit = True</span>\n<span class=\"c1\">#                else:</span>\n<span class=\"c1\">#                    func(ibs, qaid_list, daid_list)</span>\n<span class=\"c1\">#                    anynewhit = True</span>\n<span class=\"c1\">#    if anynewhit:</span>\n<span class=\"c1\">#        sys.exit(1)</span>\n\n\n<div class=\"viewcode-block\" id=\"devmain\"><a class=\"viewcode-back\" href=\"../../../ibeis/#ibeis.dev.devmain\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">devmain</span><span class=\"p\">():</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    The Developer Script</span>\n<span class=\"sd\">        A command line interface to almost everything</span>\n\n<span class=\"sd\">        -w     # wait / show the gui / figures are visible</span>\n<span class=\"sd\">        --cmd  # ipython shell to play with variables</span>\n<span class=\"sd\">        -t     # run list of tests</span>\n\n<span class=\"sd\">        Examples:</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"n\">helpstr</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">codeblock</span><span class=\"p\">(</span>\n        <span class=\"sd\">&#39;&#39;&#39;</span>\n<span class=\"sd\">        Dev is meant to be run as an interactive script.</span>\n\n<span class=\"sd\">        The dev.py script runs any test you regiter with @devcmd in any combination</span>\n<span class=\"sd\">        of configurations specified by a Config object.</span>\n\n<span class=\"sd\">        Dev caches information in order to get quicker results.  # FIXME: Provide quicker results  # FIXME: len(line)</span>\n<span class=\"sd\">        &#39;&#39;&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"n\">INTRO_TITLE</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;The dev.py Script&#39;</span>\n    <span class=\"c1\">#INTRO_TEXT = &#39;&#39;.join((ut.bubbletext(INTRO_TITLE, font=&#39;cybermedium&#39;), helpstr))</span>\n    <span class=\"n\">INTRO_TEXT</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">bubbletext</span><span class=\"p\">(</span><span class=\"n\">INTRO_TITLE</span><span class=\"p\">,</span> <span class=\"n\">font</span><span class=\"o\">=</span><span class=\"s1\">&#39;cybermedium&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"n\">INTRO_STR</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">msgblock</span><span class=\"p\">(</span><span class=\"s1\">&#39;dev.py Intro&#39;</span><span class=\"p\">,</span>  <span class=\"n\">INTRO_TEXT</span><span class=\"p\">)</span>\n\n    <span class=\"n\">EXAMPLE_STR</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">msgblock</span><span class=\"p\">(</span><span class=\"s1\">&#39;dev.py Examples&#39;</span><span class=\"p\">,</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">codeblock</span><span class=\"p\">(</span><span class=\"n\">EXAMPLE_TEXT</span><span class=\"p\">))</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">NOT_QUIET</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">INTRO_STR</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argflag</span><span class=\"p\">((</span><span class=\"s1\">&#39;--help&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;--verbose&#39;</span><span class=\"p\">)):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">EXAMPLE_STR</span><span class=\"p\">)</span>\n\n    <span class=\"n\">CMD</span>   <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argflag</span><span class=\"p\">(</span><span class=\"s1\">&#39;--cmd&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">NOGUI</span> <span class=\"o\">=</span> <span class=\"ow\">not</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argflag</span><span class=\"p\">(</span><span class=\"s1\">&#39;--gui&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Run dev.py with arguments!&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Run Precommands</span>\n    <span class=\"n\">run_devprecmds</span><span class=\"p\">()</span>\n\n    <span class=\"c1\">#</span>\n    <span class=\"c1\">#</span>\n    <span class=\"c1\"># Run IBEIS Main, create controller, and possibly gui</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;++dev&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">main_locals</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"p\">(</span><span class=\"n\">gui</span><span class=\"o\">=</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argflag</span><span class=\"p\">(</span><span class=\"s1\">&#39;--gui&#39;</span><span class=\"p\">))</span>\n    <span class=\"c1\">#utool.set_process_title(&#39;IBEIS_dev&#39;)</span>\n\n    <span class=\"c1\">#</span>\n    <span class=\"c1\">#</span>\n    <span class=\"c1\"># Load snippet variables</span>\n    <span class=\"n\">SNIPPITS</span> <span class=\"o\">=</span> <span class=\"kc\">True</span> <span class=\"ow\">and</span> <span class=\"n\">CMD</span>\n    <span class=\"k\">if</span> <span class=\"n\">SNIPPITS</span><span class=\"p\">:</span>\n        <span class=\"n\">snippet_locals</span> <span class=\"o\">=</span> <span class=\"n\">dev_snippets</span><span class=\"p\">(</span><span class=\"n\">main_locals</span><span class=\"p\">)</span>\n        <span class=\"n\">snippet_execstr</span> <span class=\"o\">=</span> <span class=\"n\">utool</span><span class=\"o\">.</span><span class=\"n\">execstr_dict</span><span class=\"p\">(</span><span class=\"n\">snippet_locals</span><span class=\"p\">,</span> <span class=\"s1\">&#39;snippet_locals&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">exec</span><span class=\"p\">(</span><span class=\"n\">snippet_execstr</span><span class=\"p\">)</span>\n\n    <span class=\"c1\">#</span>\n    <span class=\"c1\">#</span>\n    <span class=\"c1\"># Development code</span>\n    <span class=\"n\">RUN_DEV</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>  <span class=\"c1\"># RUN_DEV = &#39;__IPYTHON__&#39; in vars()</span>\n    <span class=\"k\">if</span> <span class=\"n\">RUN_DEV</span><span class=\"p\">:</span>\n        <span class=\"n\">dev_locals</span> <span class=\"o\">=</span> <span class=\"n\">run_dev</span><span class=\"p\">(</span><span class=\"n\">main_locals</span><span class=\"p\">[</span><span class=\"s1\">&#39;ibs&#39;</span><span class=\"p\">])</span>\n        <span class=\"n\">dev_execstr</span> <span class=\"o\">=</span> <span class=\"n\">utool</span><span class=\"o\">.</span><span class=\"n\">execstr_dict</span><span class=\"p\">(</span><span class=\"n\">dev_locals</span><span class=\"p\">,</span> <span class=\"s1\">&#39;dev_locals&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">exec</span><span class=\"p\">(</span><span class=\"n\">dev_execstr</span><span class=\"p\">)</span>\n\n    <span class=\"n\">command</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argval</span><span class=\"p\">(</span><span class=\"s1\">&#39;--eval&#39;</span><span class=\"p\">,</span> <span class=\"n\">type_</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">command</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"nb\">eval</span><span class=\"p\">(</span><span class=\"n\">command</span><span class=\"p\">,</span> <span class=\"nb\">globals</span><span class=\"p\">(),</span> <span class=\"nb\">locals</span><span class=\"p\">())</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;result = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">,))</span>\n        <span class=\"c1\">#ibs.search_annot_notes(&#39;360&#39;)</span>\n\n    <span class=\"c1\">#</span>\n    <span class=\"c1\">#</span>\n    <span class=\"c1\"># Main Loop (IPython interaction, or some exec loop)</span>\n    <span class=\"c1\">#if &#39;--nopresent&#39; not in sys.argv or &#39;--noshow&#39; in sys.argv:</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">show_if_requested</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argflag</span><span class=\"p\">((</span><span class=\"s1\">&#39;--show&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;--wshow&#39;</span><span class=\"p\">)):</span>\n        <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">present</span><span class=\"p\">()</span>\n    <span class=\"n\">main_execstr</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">main_loop</span><span class=\"p\">(</span><span class=\"n\">main_locals</span><span class=\"p\">,</span> <span class=\"n\">rungui</span><span class=\"o\">=</span><span class=\"ow\">not</span> <span class=\"n\">NOGUI</span><span class=\"p\">,</span>\n                                   <span class=\"n\">ipy</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">NOGUI</span> <span class=\"ow\">or</span> <span class=\"n\">CMD</span><span class=\"p\">))</span>\n    <span class=\"n\">exec</span><span class=\"p\">(</span><span class=\"n\">main_execstr</span><span class=\"p\">)</span>\n\n    <span class=\"c1\">#</span>\n    <span class=\"c1\">#</span>\n    <span class=\"c1\"># Memory profile</span>\n    <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argflag</span><span class=\"p\">(</span><span class=\"s1\">&#39;--memprof&#39;</span><span class=\"p\">):</span>\n        <span class=\"n\">utool</span><span class=\"o\">.</span><span class=\"n\">print_resource_usage</span><span class=\"p\">()</span>\n        <span class=\"n\">utool</span><span class=\"o\">.</span><span class=\"n\">memory_profile</span><span class=\"p\">()</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;exiting dev&#39;</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"ggr_random_name_splits\"><a class=\"viewcode-back\" href=\"../../../ibeis/#ibeis.dev.ggr_random_name_splits\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">ggr_random_name_splits</span><span class=\"p\">():</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.viz.viz_graph2 ggr_random_name_splits --show</span>\n\n<span class=\"sd\">    Ignore:</span>\n<span class=\"sd\">        sshfs -o idmap=user lev:/ ~/lev</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # DISABLE_DOCTEST GGR</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.viz.viz_graph2 import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; ggr_random_name_splits()</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">guitool</span> <span class=\"k\">as</span> <span class=\"nn\">gt</span>\n    <span class=\"n\">gt</span><span class=\"o\">.</span><span class=\"n\">ensure_qtapp</span><span class=\"p\">()</span>\n    <span class=\"c1\">#nid_list = ibs.get_valid_nids(filter_empty=True)</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">ibeis</span>\n    <span class=\"n\">dbdir</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;/media/danger/GGR/GGR-IBEIS&#39;</span>\n    <span class=\"n\">dbdir</span> <span class=\"o\">=</span> <span class=\"n\">dbdir</span> <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">checkpath</span><span class=\"p\">(</span><span class=\"n\">dbdir</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">truepath</span><span class=\"p\">(</span><span class=\"s1\">&#39;~/lev/media/danger/GGR/GGR-IBEIS&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">opendb</span><span class=\"p\">(</span><span class=\"n\">dbdir</span><span class=\"o\">=</span><span class=\"n\">dbdir</span><span class=\"p\">,</span> <span class=\"n\">allow_newdir</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n    <span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n    <span class=\"n\">day1</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2016</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">)</span>\n    <span class=\"n\">day2</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2016</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">)</span>\n\n    <span class=\"n\">orig_filter_kw</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">&#39;multiple&#39;</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"c1\">#&#39;view&#39;: [&#39;right&#39;],</span>\n        <span class=\"c1\">#&#39;minqual&#39;: &#39;good&#39;,</span>\n        <span class=\"s1\">&#39;is_known&#39;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;min_pername&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">orig_aids</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">filter_annots_general</span><span class=\"p\">(</span><span class=\"n\">filter_kw</span><span class=\"o\">=</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dict_union</span><span class=\"p\">(</span>\n        <span class=\"n\">orig_filter_kw</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;min_unixtime&#39;</span><span class=\"p\">:</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">datetime_to_posixtime</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">date_to_datetime</span><span class=\"p\">(</span><span class=\"n\">day1</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">)),</span>\n            <span class=\"s1\">&#39;max_unixtime&#39;</span><span class=\"p\">:</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">datetime_to_posixtime</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">date_to_datetime</span><span class=\"p\">(</span><span class=\"n\">day2</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">)),</span>\n        <span class=\"p\">})</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">orig_all_annots</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">annots</span><span class=\"p\">(</span><span class=\"n\">orig_aids</span><span class=\"p\">)</span>\n    <span class=\"n\">orig_unique_nids</span><span class=\"p\">,</span> <span class=\"n\">orig_grouped_annots_</span> <span class=\"o\">=</span> <span class=\"n\">orig_all_annots</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">(</span><span class=\"n\">orig_all_annots</span><span class=\"o\">.</span><span class=\"n\">nids</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Ensure we get everything</span>\n    <span class=\"n\">orig_grouped_annots</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">annots</span><span class=\"p\">(</span><span class=\"n\">aids_</span><span class=\"p\">)</span>\n                           <span class=\"k\">for</span> <span class=\"n\">aids_</span> <span class=\"ow\">in</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_name_aids</span><span class=\"p\">(</span><span class=\"n\">orig_unique_nids</span><span class=\"p\">)]</span>\n\n    <span class=\"c1\"># pip install quantumrandom</span>\n    <span class=\"k\">if</span> <span class=\"kc\">False</span><span class=\"p\">:</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">quantumrandom</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">quantumrandom</span><span class=\"o\">.</span><span class=\"n\">uint16</span><span class=\"p\">()</span>\n        <span class=\"n\">seed</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;seed = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">seed</span><span class=\"p\">,))</span>\n        <span class=\"c1\">#import Crypto.Random</span>\n        <span class=\"c1\">#from Crypto import Random</span>\n        <span class=\"c1\">#quantumrandom.get_data()</span>\n        <span class=\"c1\">#StrongRandom = Crypto.Random.random.StrongRandom</span>\n        <span class=\"c1\">#aes.reseed(3340258)</span>\n        <span class=\"c1\">#chars = [str(chr(x)) for x in data.view(np.uint8)]</span>\n        <span class=\"c1\">#aes_seed = str(&#39;&#39;).join(chars)</span>\n        <span class=\"c1\">#aes = Crypto.Random.Fortuna.FortunaGenerator.AESGenerator()</span>\n        <span class=\"c1\">#aes.reseed(aes_seed)</span>\n        <span class=\"c1\">#aes.pseudo_random_data(10)</span>\n\n    <span class=\"n\">orig_rand_idxs</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">random_indexes</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">orig_grouped_annots</span><span class=\"p\">),</span> <span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">3340258</span><span class=\"p\">)</span>\n    <span class=\"n\">orig_sample_size</span> <span class=\"o\">=</span> <span class=\"mi\">75</span>\n    <span class=\"n\">random_annot_groups</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">orig_grouped_annots</span><span class=\"p\">,</span> <span class=\"n\">orig_rand_idxs</span><span class=\"p\">)</span>\n    <span class=\"n\">orig_annot_sample</span> <span class=\"o\">=</span> <span class=\"n\">random_annot_groups</span><span class=\"p\">[:</span><span class=\"n\">orig_sample_size</span><span class=\"p\">]</span>\n\n    <span class=\"c1\"># OOOPS MADE ERROR REDO ----</span>\n\n    <span class=\"n\">filter_kw</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">&#39;multiple&#39;</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;view&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;right&#39;</span><span class=\"p\">],</span>\n        <span class=\"s1\">&#39;minqual&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;good&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;is_known&#39;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;min_pername&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">filter_kw_</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dict_union</span><span class=\"p\">(</span>\n        <span class=\"n\">filter_kw</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;min_unixtime&#39;</span><span class=\"p\">:</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">datetime_to_posixtime</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">date_to_datetime</span><span class=\"p\">(</span><span class=\"n\">day1</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">)),</span>\n            <span class=\"s1\">&#39;max_unixtime&#39;</span><span class=\"p\">:</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">datetime_to_posixtime</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">date_to_datetime</span><span class=\"p\">(</span><span class=\"n\">day2</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">)),</span>\n        <span class=\"p\">})</span>\n    <span class=\"n\">refiltered_sample</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">filter_annots_general</span><span class=\"p\">(</span><span class=\"n\">annot</span><span class=\"o\">.</span><span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"n\">filter_kw</span><span class=\"o\">=</span><span class=\"n\">filter_kw_</span><span class=\"p\">)</span>\n                         <span class=\"k\">for</span> <span class=\"n\">annot</span> <span class=\"ow\">in</span> <span class=\"n\">orig_annot_sample</span><span class=\"p\">]</span>\n    <span class=\"n\">is_ok</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">lmap</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">,</span> <span class=\"n\">refiltered_sample</span><span class=\"p\">))</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"n\">ok_part_orig_sample</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">orig_annot_sample</span><span class=\"p\">,</span> <span class=\"n\">is_ok</span><span class=\"p\">)</span>\n    <span class=\"n\">ok_part_orig_nids</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">nids</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">ok_part_orig_sample</span><span class=\"p\">]</span>\n\n    <span class=\"c1\"># Now compute real sample</span>\n    <span class=\"n\">aids</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">filter_annots_general</span><span class=\"p\">(</span><span class=\"n\">filter_kw</span><span class=\"o\">=</span><span class=\"n\">filter_kw_</span><span class=\"p\">)</span>\n    <span class=\"n\">all_annots</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">annots</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">)</span>\n    <span class=\"n\">unique_nids</span><span class=\"p\">,</span> <span class=\"n\">grouped_annots_</span> <span class=\"o\">=</span> <span class=\"n\">all_annots</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">(</span><span class=\"n\">all_annots</span><span class=\"o\">.</span><span class=\"n\">nids</span><span class=\"p\">)</span>\n    <span class=\"n\">grouped_annots</span> <span class=\"o\">=</span> <span class=\"n\">grouped_annots_</span>\n    <span class=\"c1\"># Ensure we get everything</span>\n    <span class=\"c1\">#grouped_annots = [ibs.annots(aids_) for aids_ in ibs.get_name_aids(unique_nids)]</span>\n\n    <span class=\"n\">pop</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">grouped_annots</span><span class=\"p\">)</span>\n    <span class=\"n\">pername_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">lmap</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">,</span> <span class=\"n\">grouped_annots</span><span class=\"p\">)</span>\n    <span class=\"n\">groups</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">annots</span><span class=\"o\">.</span><span class=\"n\">AnnotGroups</span><span class=\"p\">(</span><span class=\"n\">grouped_annots</span><span class=\"p\">,</span> <span class=\"n\">ibs</span><span class=\"p\">)</span>\n    <span class=\"n\">match_tags</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">unique</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"n\">groups</span><span class=\"o\">.</span><span class=\"n\">match_tags</span><span class=\"p\">]</span>\n    <span class=\"n\">tag_case_hist</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dict_hist</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">match_tags</span><span class=\"p\">))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;name_pop = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">pop</span><span class=\"p\">,))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Annots per Multiton Name&#39;</span> <span class=\"o\">+</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr3</span><span class=\"p\">(</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_stats</span><span class=\"p\">(</span><span class=\"n\">pername_list</span><span class=\"p\">,</span> <span class=\"n\">use_median</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Name Tag Hist &#39;</span> <span class=\"o\">+</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr3</span><span class=\"p\">(</span><span class=\"n\">tag_case_hist</span><span class=\"p\">))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Percent Photobomb: </span><span class=\"si\">%.2f%%</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">tag_case_hist</span><span class=\"p\">[</span><span class=\"s1\">&#39;photobomb&#39;</span><span class=\"p\">]</span> <span class=\"o\">/</span> <span class=\"n\">pop</span> <span class=\"o\">*</span> <span class=\"mi\">100</span><span class=\"p\">))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Percent Split: </span><span class=\"si\">%.2f%%</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">tag_case_hist</span><span class=\"p\">[</span><span class=\"s1\">&#39;splitcase&#39;</span><span class=\"p\">]</span> <span class=\"o\">/</span> <span class=\"n\">pop</span> <span class=\"o\">*</span> <span class=\"mi\">100</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># Remove the ok part from this sample</span>\n    <span class=\"n\">remain_unique_nids</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">setdiff</span><span class=\"p\">(</span><span class=\"n\">unique_nids</span><span class=\"p\">,</span> <span class=\"n\">ok_part_orig_nids</span><span class=\"p\">)</span>\n    <span class=\"n\">remain_grouped_annots</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">annots</span><span class=\"p\">(</span><span class=\"n\">aids_</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">aids_</span> <span class=\"ow\">in</span>\n                             <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_name_aids</span><span class=\"p\">(</span><span class=\"n\">remain_unique_nids</span><span class=\"p\">)]</span>\n\n    <span class=\"n\">sample_size</span> <span class=\"o\">=</span> <span class=\"mi\">75</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">vtool</span> <span class=\"k\">as</span> <span class=\"nn\">vt</span>\n    <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">calc_sample_from_error_bars</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"mi\">05</span><span class=\"p\">,</span> <span class=\"n\">pop</span><span class=\"p\">,</span> <span class=\"n\">conf_level</span><span class=\"o\">=.</span><span class=\"mi\">95</span><span class=\"p\">,</span> <span class=\"n\">prior</span><span class=\"o\">=.</span><span class=\"mi\">05</span><span class=\"p\">)</span>\n\n    <span class=\"n\">remain_rand_idxs</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">random_indexes</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">remain_grouped_annots</span><span class=\"p\">),</span> <span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">3340258</span><span class=\"p\">)</span>\n    <span class=\"n\">remain_sample_size</span> <span class=\"o\">=</span> <span class=\"n\">sample_size</span> <span class=\"o\">-</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">ok_part_orig_nids</span><span class=\"p\">)</span>\n    <span class=\"n\">remain_random_annot_groups</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">remain_grouped_annots</span><span class=\"p\">,</span> <span class=\"n\">remain_rand_idxs</span><span class=\"p\">)</span>\n    <span class=\"n\">remain_annot_sample</span> <span class=\"o\">=</span> <span class=\"n\">remain_random_annot_groups</span><span class=\"p\">[:</span><span class=\"n\">remain_sample_size</span><span class=\"p\">]</span>\n\n    <span class=\"n\">annot_sample_nofilter</span> <span class=\"o\">=</span> <span class=\"n\">ok_part_orig_sample</span> <span class=\"o\">+</span> <span class=\"n\">remain_annot_sample</span>\n    <span class=\"c1\"># Filter out all bad parts</span>\n    <span class=\"n\">annot_sample_filter</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">annots</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">filter_annots_general</span><span class=\"p\">(</span><span class=\"n\">annot</span><span class=\"o\">.</span><span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"n\">filter_kw</span><span class=\"o\">=</span><span class=\"n\">filter_kw_</span><span class=\"p\">))</span>\n        <span class=\"k\">for</span> <span class=\"n\">annot</span> <span class=\"ow\">in</span> <span class=\"n\">annot_sample_nofilter</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">annot_sample</span> <span class=\"o\">=</span> <span class=\"n\">annot_sample_filter</span>\n\n    <span class=\"n\">win</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.viz</span> <span class=\"k\">import</span> <span class=\"n\">viz_graph2</span>\n    <span class=\"k\">for</span> <span class=\"n\">annots</span> <span class=\"ow\">in</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">InteractiveIter</span><span class=\"p\">(</span><span class=\"n\">annot_sample</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">win</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">win</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n        <span class=\"n\">win</span> <span class=\"o\">=</span> <span class=\"n\">viz_graph2</span><span class=\"o\">.</span><span class=\"n\">make_qt_graph_interface</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"o\">=</span><span class=\"n\">annots</span><span class=\"o\">.</span><span class=\"n\">aids</span><span class=\"p\">,</span>\n                                                 <span class=\"n\">init_mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;rereview&#39;</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">win</span><span class=\"p\">)</span>\n\n    <span class=\"n\">sample_groups</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">annots</span><span class=\"o\">.</span><span class=\"n\">AnnotGroups</span><span class=\"p\">(</span><span class=\"n\">annot_sample</span><span class=\"p\">,</span> <span class=\"n\">ibs</span><span class=\"p\">)</span>\n\n    <span class=\"n\">flat_tags</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">unique</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"n\">sample_groups</span><span class=\"o\">.</span><span class=\"n\">match_tags</span><span class=\"p\">]</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Using Split and Photobomb&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">is_positive</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;photobomb&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">t</span> <span class=\"ow\">or</span> <span class=\"s1\">&#39;splitcase&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">t</span> <span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"n\">flat_tags</span><span class=\"p\">]</span>\n    <span class=\"n\">num_positive</span> <span class=\"o\">=</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">is_positive</span><span class=\"p\">)</span>\n    <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">calc_error_bars_from_sample</span><span class=\"p\">(</span><span class=\"n\">sample_size</span><span class=\"p\">,</span> <span class=\"n\">num_positive</span><span class=\"p\">,</span> <span class=\"n\">pop</span><span class=\"p\">,</span> <span class=\"n\">conf_level</span><span class=\"o\">=.</span><span class=\"mi\">95</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Only Photobomb&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">is_positive</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;photobomb&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">t</span> <span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"n\">flat_tags</span><span class=\"p\">]</span>\n    <span class=\"n\">num_positive</span> <span class=\"o\">=</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">is_positive</span><span class=\"p\">)</span>\n    <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">calc_error_bars_from_sample</span><span class=\"p\">(</span><span class=\"n\">sample_size</span><span class=\"p\">,</span> <span class=\"n\">num_positive</span><span class=\"p\">,</span> <span class=\"n\">pop</span><span class=\"p\">,</span> <span class=\"n\">conf_level</span><span class=\"o\">=.</span><span class=\"mi\">95</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Only SplitCase&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">is_positive</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;splitcase&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">t</span> <span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"n\">flat_tags</span><span class=\"p\">]</span>\n    <span class=\"n\">num_positive</span> <span class=\"o\">=</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">is_positive</span><span class=\"p\">)</span>\n    <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">calc_error_bars_from_sample</span><span class=\"p\">(</span><span class=\"n\">sample_size</span><span class=\"p\">,</span> <span class=\"n\">num_positive</span><span class=\"p\">,</span> <span class=\"n\">pop</span><span class=\"p\">,</span> <span class=\"n\">conf_level</span><span class=\"o\">=.</span><span class=\"mi\">95</span><span class=\"p\">)</span></div>\n    <span class=\"c1\">#gt.qtapp_loop(qwin=win)</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n    <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">freeze_support</span><span class=\"p\">()</span>  <span class=\"c1\"># for win32</span>\n    <span class=\"c1\"># HACK to run tests without specifing ibs first</span>\n    <span class=\"c1\">#run_devmain2()</span>\n    <span class=\"n\">devmain</span><span class=\"p\">()</span>\n\n\n<span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">CurrentExperiments:</span>\n<span class=\"sd\">    # Full best settings run</span>\n<span class=\"sd\">    ./dev.py -t custom --db PZ_Master0 --allgt --species=zebra_plains</span>\n<span class=\"sd\">    # Full best settings run without spatial verification</span>\n<span class=\"sd\">    ./dev.py -t custom:sv_on=False --db PZ_Master0 --allgt --species=zebra_plains</span>\n\n<span class=\"sd\">    ./dev.py -t custom --db PZ_Master0 --allgt --species=zebra_plains --hs</span>\n\n<span class=\"sd\">    # Check to see if new spatial verification helps</span>\n<span class=\"sd\">    ./dev.py -t custom:full_homog_checks=False custom:full_homog_checks=True --db PZ_Master0 --allgt --species=zebra_plains</span>\n<span class=\"sd\">    # Yay it does</span>\n\n\n<span class=\"sd\">    # Look for how many false negatives are in the bottom batch</span>\n<span class=\"sd\">    ./dev.py -t custom --db PZ_MTEST --species=zebra_plains --print-rankhist</span>\n<span class=\"sd\">    ./dev.py -t custom --db PZ_MTEST --controlled --print-rankhist</span>\n<span class=\"sd\">    ./dev.py -t custom --db PZ_Master0 --controlled --print-rankhist</span>\n\n<span class=\"sd\">    ./dev.py -t \\</span>\n<span class=\"sd\">            custom \\</span>\n<span class=\"sd\">            custom:rotation_invariance=True,affine_invariance=False \\</span>\n<span class=\"sd\">            custom:rotation_invariance=True,query_rotation_heuristic=True \\</span>\n<span class=\"sd\">            --db PZ_Master0 --controlled --print-rankhist  --print-bestcfg</span>\n\n<span class=\"sd\">    ./dev.py -t \\</span>\n<span class=\"sd\">            custom:rotation_invariance=True,affine_invariance=False \\</span>\n<span class=\"sd\">            custom:rotation_invariance=True,query_rotation_heuristic=True \\</span>\n<span class=\"sd\">            --db NNP_Master3 --controlled --print-rankhist  --print-bestcfg</span>\n\n\n<span class=\"sd\">ElephantEarExperiments</span>\n<span class=\"sd\">    --show --vh</span>\n<span class=\"sd\">    ./dev.py -t custom:affine_invariance=True --db Elephants_drop1_ears --allgt --print-rankhist</span>\n<span class=\"sd\">    ./dev.py -t custom:affine_invariance=False --db Elephants_drop1_ears --allgt --print-rankhist</span>\n<span class=\"sd\">    ./dev.py -t custom:affine_invariance=False,histeq=True --db Elephants_drop1_ears --allgt --print-rankhist</span>\n<span class=\"sd\">    ./dev.py -t custom:affine_invariance=False,adapteq=True --db Elephants_drop1_ears --allgt --print-rankhist</span>\n\n<span class=\"sd\">    ./dev.py -t custom:affine_invariance=False,fg_on=False --db Elephants_drop1_ears --allgt</span>\n<span class=\"sd\">    ./dev.py -t custom:affine_invariance=False,histeq=True,fg_on=False --db Elephants_drop1_ears --allgt</span>\n<span class=\"sd\">    ./dev.py -t custom:affine_invariance=False,adapteq=True,fg_on=False --db Elephants_drop1_ears --allgt</span>\n\n<span class=\"sd\">    ./dev.py -t elph --db Elephants_drop1_ears --allgt</span>\n\n\n<span class=\"sd\">Sift vs Siam Experiments</span>\n<span class=\"sd\">    ./dev.py -t custom:feat_type=hesaff+siam128,algorithm=linear custom:feat_type=hesaff+sift --db testdb1 --allgt</span>\n<span class=\"sd\">    ./dev.py -t custom:feat_type=hesaff+siam128,algorithm=linear custom:feat_type=hesaff+sift --db PZ_MTEST --allgt</span>\n<span class=\"sd\">    ./dev.py -t custom:feat_type=hesaff+siam128,lnbnn_on=False,fg_on=False,bar_l2_on=True custom:feat_type=hesaff+sift,fg_on=False --db PZ_MTEST --allgt</span>\n\n<span class=\"sd\">    ./dev.py -t custom:feat_type=hesaff+siam128 custom:feat_type=hesaff+sift --db PZ_MTEST --allgt --print-rankhist</span>\n<span class=\"sd\">    ./dev.py -t custom:feat_type=hesaff+siam128 --db PZ_MTEST --allgt --print-rankhist</span>\n<span class=\"sd\">    ./dev.py -t custom:feat_type=hesaff+sift --db PZ_MTEST --allgt --print-rankhist</span>\n\n<span class=\"sd\">    ./dev.py -t custom:feat_type=hesaff+siam128 custom:feat_type=hesaff+sift --db PZ_Master0 --allgt</span>\n\n<span class=\"sd\">    ./dev.py -t custom:feat_type=hesaff+siam128 --db testdb1 --allgt</span>\n\n\n\n<span class=\"sd\">Without SV:</span>\n<span class=\"sd\">agg rank histogram = {</span>\n<span class=\"sd\">    (0, 1): 2276,</span>\n<span class=\"sd\">    (1, 5): 126,</span>\n<span class=\"sd\">    (5, 50): 99,</span>\n<span class=\"sd\">    (50, 8624): 108,</span>\n<span class=\"sd\">    (8624, 8625): 28,</span>\n<span class=\"sd\">}</span>\n<span class=\"sd\">With SV:</span>\n<span class=\"sd\">agg rank histogram = {</span>\n<span class=\"sd\">    (0, 1): 2300,</span>\n<span class=\"sd\">    (1, 5): 106,</span>\n<span class=\"sd\">    (5, 50): 16,</span>\n<span class=\"sd\">    (50, 8624): 0,</span>\n<span class=\"sd\">    (8624, 8625): 215,</span>\n<span class=\"sd\">}</span>\n\n<span class=\"sd\">Guesses:</span>\n<span class=\"sd\">    0 2 2 2 4 4 4 4 0 0</span>\n<span class=\"sd\">    0 0 4 2 2 4 4 4 2 2</span>\n<span class=\"sd\">    2 4 4 4 1 1 1 2 2 2</span>\n<span class=\"sd\">    0 0 1 1 1 2 0 0 1</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n</pre></div>", "current_page_name": "_modules/ibeis/dev", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}