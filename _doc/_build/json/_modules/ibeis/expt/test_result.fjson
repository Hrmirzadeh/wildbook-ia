{"parents": [{"link": "../../../", "title": "Module code"}, {"link": "../../", "title": "ibeis"}, {"link": "../", "title": "ibeis.expt"}], "title": "ibeis.expt.test_result", "body": "<h1>Source code for ibeis.expt.test_result</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"c1\"># TODO: find unused functions and kill them</span>\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"k\">import</span> <span class=\"n\">absolute_import</span><span class=\"p\">,</span> <span class=\"n\">division</span><span class=\"p\">,</span> <span class=\"n\">print_function</span><span class=\"p\">,</span> <span class=\"n\">unicode_literals</span>\n<span class=\"kn\">import</span> <span class=\"nn\">six</span>\n<span class=\"kn\">import</span> <span class=\"nn\">copy</span>\n<span class=\"kn\">import</span> <span class=\"nn\">operator</span>\n<span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n<span class=\"kn\">import</span> <span class=\"nn\">vtool</span> <span class=\"k\">as</span> <span class=\"nn\">vt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">itertools</span> <span class=\"k\">as</span> <span class=\"nn\">it</span>\n<span class=\"kn\">from</span> <span class=\"nn\">functools</span> <span class=\"k\">import</span> <span class=\"n\">partial</span>\n<span class=\"kn\">from</span> <span class=\"nn\">six</span> <span class=\"k\">import</span> <span class=\"nb\">next</span>\n<span class=\"kn\">from</span> <span class=\"nn\">six.moves</span> <span class=\"k\">import</span> <span class=\"nb\">zip</span><span class=\"p\">,</span> <span class=\"nb\">range</span><span class=\"p\">,</span> <span class=\"nb\">map</span><span class=\"p\">,</span> <span class=\"n\">reduce</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.expt</span> <span class=\"k\">import</span> <span class=\"n\">cfghelpers</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.expt</span> <span class=\"k\">import</span> <span class=\"n\">experiment_helpers</span>\n<span class=\"nb\">print</span><span class=\"p\">,</span> <span class=\"n\">rrr</span><span class=\"p\">,</span> <span class=\"n\">profile</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">inject2</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"build_cmsinfo\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.build_cmsinfo\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">build_cmsinfo</span><span class=\"p\">(</span><span class=\"n\">cm_list</span><span class=\"p\">,</span> <span class=\"n\">qreq_</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Helper function to report results over multiple queries (chip matches).</span>\n<span class=\"sd\">    Basically given a group of queries of the same name, we only care if one of</span>\n<span class=\"sd\">    them is correct.  This emulates encounters.</span>\n\n<span class=\"sd\">    Runs queries of a specific configuration returns the best rank of each</span>\n<span class=\"sd\">    query.</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        cm_list (list): list of chip matches</span>\n<span class=\"sd\">        qreq_ (QueryRequest): request that computed the chip matches.</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        dict: cmsinfo - info about multiple chip matches cm_list</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis get_query_result_info</span>\n<span class=\"sd\">        python -m ibeis get_query_result_info:0 --db lynx \\</span>\n<span class=\"sd\">            -a :qsame_imageset=True,been_adjusted=True,excluderef=True -t :K=1</span>\n<span class=\"sd\">        python -m ibeis get_query_result_info:0 --db lynx \\</span>\n<span class=\"sd\">            -a :qsame_imageset=True,been_adjusted=True,excluderef=True -t :K=1 --cmd</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.expt.test_result import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; qreq_ = ibeis.main_helpers.testdata_qreq_(a=[&#39;:qindex=0:3,dindex=0:5&#39;])</span>\n<span class=\"sd\">        &gt;&gt;&gt; cm_list = qreq_.execute()</span>\n<span class=\"sd\">        &gt;&gt;&gt; cmsinfo = build_cmsinfo(cm_list, qreq_)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(ut.repr2(cmsinfo))</span>\n\n<span class=\"sd\">    Ignore:</span>\n<span class=\"sd\">        ibeis -e rank_cmc --db humpbacks -a :has_any=hasnotch,mingt=2 \\</span>\n<span class=\"sd\">                -t :proot=BC_DTW --show --nocache-big</span>\n\n<span class=\"sd\">        ibeis -e rank_cmc --db humpbacks -a :is_known=True,mingt=2 \\</span>\n<span class=\"sd\">                -t :pipeline_root=BC_DTW</span>\n\n<span class=\"sd\">        ibeis -e rank_cmc --db humpbacks -a :is_known=True \\</span>\n<span class=\"sd\">                -t :pipeline_root=BC_DTW \\</span>\n<span class=\"sd\">                --qaid=1,9,15,16,18 --daid-override=1,9,15,16,18,21,22 \\</span>\n<span class=\"sd\">                --show --debug-depc</span>\n\n<span class=\"sd\">        --clear-all-depcache</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">ibs</span>\n\n    <span class=\"n\">qaids</span> <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">qaids</span>\n    <span class=\"n\">daids</span> <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">daids</span>\n    <span class=\"c1\"># Get the groundtruth ranks and accuracy measures</span>\n    <span class=\"n\">qx2_cminfo</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">cm</span> <span class=\"ow\">in</span> <span class=\"n\">cm_list</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">cm</span><span class=\"p\">,</span> <span class=\"s1\">&#39;extend_results&#39;</span><span class=\"p\">):</span>\n            <span class=\"n\">cminfo</span> <span class=\"o\">=</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">extend_results</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">summarize</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">cminfo</span> <span class=\"o\">=</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">summarize</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"p\">)</span>\n        <span class=\"n\">qx2_cminfo</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">cminfo</span><span class=\"p\">)</span>\n    <span class=\"n\">cmsinfo</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dict_stack</span><span class=\"p\">(</span><span class=\"n\">qx2_cminfo</span><span class=\"p\">,</span> <span class=\"s1\">&#39;qx2_&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">cmsinfo</span><span class=\"p\">[</span><span class=\"s1\">&#39;qx2_gt_rank&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">replace_nones</span><span class=\"p\">(</span><span class=\"n\">cmsinfo</span><span class=\"p\">[</span><span class=\"s1\">&#39;qx2_gt_rank&#39;</span><span class=\"p\">]</span> <span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"kc\">False</span><span class=\"p\">:</span>\n        <span class=\"n\">qx2_gtaids</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_groundtruth</span><span class=\"p\">(</span><span class=\"n\">qaids</span><span class=\"p\">,</span> <span class=\"n\">daid_list</span><span class=\"o\">=</span><span class=\"n\">daids</span><span class=\"p\">)</span>\n        <span class=\"n\">qx2_avepercision</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span>\n            <span class=\"p\">[</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">get_average_percision</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">=</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">gt_aids</span><span class=\"o\">=</span><span class=\"n\">gt_aids</span><span class=\"p\">)</span> <span class=\"k\">for</span>\n             <span class=\"p\">(</span><span class=\"n\">cm</span><span class=\"p\">,</span> <span class=\"n\">gt_aids</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">cm_list</span><span class=\"p\">,</span> <span class=\"n\">qx2_gtaids</span><span class=\"p\">)])</span>\n        <span class=\"n\">cmsinfo</span><span class=\"p\">[</span><span class=\"s1\">&#39;qx2_avepercision&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">qx2_avepercision</span>\n\n    <span class=\"c1\"># Compute mAP score  # TODO: use mAP score</span>\n    <span class=\"c1\"># (Actually map score doesn&#39;t make much sense if using name scoring</span>\n    <span class=\"c1\">#mAP = qx2_avepercision[~np.isnan(qx2_avepercision)].mean()  # NOQA</span>\n\n    <span class=\"n\">qaids</span> <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">qaids</span>\n    <span class=\"c1\">#qaids2 = [cm.qaid for cm in cm_list]</span>\n    <span class=\"c1\"># qnids = qreq_.get_qreq_annot_nids(qaids)  # TODO: use new nid getter</span>\n    <span class=\"n\">qnids</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_nids</span><span class=\"p\">(</span><span class=\"n\">qaids</span><span class=\"p\">)</span>\n\n    <span class=\"n\">unique_dnids</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">unique</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_nids</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">daids</span><span class=\"p\">))</span>\n    <span class=\"n\">unique_qnids</span><span class=\"p\">,</span> <span class=\"n\">groupxs</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">group_indices</span><span class=\"p\">(</span><span class=\"n\">qnids</span><span class=\"p\">)</span>\n    <span class=\"n\">cm_group_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">apply_grouping</span><span class=\"p\">(</span><span class=\"n\">cm_list</span><span class=\"p\">,</span> <span class=\"n\">groupxs</span><span class=\"p\">)</span>\n    <span class=\"n\">qnid2_aggnamescores</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n    <span class=\"n\">qnx2_nameres_info</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n    <span class=\"c1\"># Ranked list aggregation over groups of query annots</span>\n    <span class=\"n\">nameres_info_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">qnid</span><span class=\"p\">,</span> <span class=\"n\">cm_group</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">unique_qnids</span><span class=\"p\">,</span> <span class=\"n\">cm_group_list</span><span class=\"p\">):</span>\n        <span class=\"n\">nid2_name_score_group</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"nb\">dict</span><span class=\"p\">([(</span><span class=\"n\">nid</span><span class=\"p\">,</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">name_score_list</span><span class=\"p\">[</span><span class=\"n\">nidx</span><span class=\"p\">])</span>\n                  <span class=\"k\">for</span> <span class=\"n\">nid</span><span class=\"p\">,</span> <span class=\"n\">nidx</span> <span class=\"ow\">in</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">nid2_nidx</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()])</span>\n            <span class=\"k\">for</span> <span class=\"n\">cm</span> <span class=\"ow\">in</span> <span class=\"n\">cm_group</span>\n        <span class=\"p\">]</span>\n        <span class=\"n\">aligned_name_scores</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span>\n            <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dict_take</span><span class=\"p\">(</span><span class=\"n\">nid_to_name_score</span><span class=\"p\">,</span> <span class=\"n\">unique_dnids</span><span class=\"o\">.</span><span class=\"n\">tolist</span><span class=\"p\">(),</span> <span class=\"o\">-</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">inf</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">nid_to_name_score</span> <span class=\"ow\">in</span> <span class=\"n\">nid2_name_score_group</span>\n        <span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">T</span>\n        <span class=\"n\">name_score_list</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nanmax</span><span class=\"p\">(</span><span class=\"n\">aligned_name_scores</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">qnid2_aggnamescores</span><span class=\"p\">[</span><span class=\"n\">qnid</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">name_score_list</span>\n        <span class=\"c1\"># sort</span>\n        <span class=\"n\">sortx</span> <span class=\"o\">=</span> <span class=\"n\">name_score_list</span><span class=\"o\">.</span><span class=\"n\">argsort</span><span class=\"p\">()[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"n\">sorted_namescores</span> <span class=\"o\">=</span> <span class=\"n\">name_score_list</span><span class=\"p\">[</span><span class=\"n\">sortx</span><span class=\"p\">]</span>\n        <span class=\"n\">sorted_dnids</span> <span class=\"o\">=</span> <span class=\"n\">unique_dnids</span><span class=\"p\">[</span><span class=\"n\">sortx</span><span class=\"p\">]</span>\n\n        <span class=\"c1\">## infer agg name results</span>\n        <span class=\"n\">success</span> <span class=\"o\">=</span> <span class=\"n\">sorted_dnids</span> <span class=\"o\">==</span> <span class=\"n\">qnid</span>\n        <span class=\"n\">failure</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">logical_and</span><span class=\"p\">(</span><span class=\"o\">~</span><span class=\"n\">success</span><span class=\"p\">,</span> <span class=\"n\">sorted_dnids</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"n\">gt_name_rank</span> <span class=\"o\">=</span> <span class=\"kc\">None</span> <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">any</span><span class=\"p\">(</span><span class=\"n\">success</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">success</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">gf_name_rank</span> <span class=\"o\">=</span> <span class=\"kc\">None</span> <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">any</span><span class=\"p\">(</span><span class=\"n\">failure</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nonzero</span><span class=\"p\">(</span><span class=\"n\">failure</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n        <span class=\"n\">gt_nid</span> <span class=\"o\">=</span> <span class=\"n\">sorted_dnids</span><span class=\"p\">[</span><span class=\"n\">gt_name_rank</span><span class=\"p\">]</span>\n        <span class=\"n\">gf_nid</span> <span class=\"o\">=</span> <span class=\"n\">sorted_dnids</span><span class=\"p\">[</span><span class=\"n\">gf_name_rank</span><span class=\"p\">]</span>\n        <span class=\"n\">gt_name_score</span> <span class=\"o\">=</span> <span class=\"n\">sorted_namescores</span><span class=\"p\">[</span><span class=\"n\">gt_name_rank</span><span class=\"p\">]</span>\n        <span class=\"n\">gf_name_score</span> <span class=\"o\">=</span> <span class=\"n\">sorted_namescores</span><span class=\"p\">[</span><span class=\"n\">gf_name_rank</span><span class=\"p\">]</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">gt_name_score</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"c1\"># ensure failure cases are loud give them the worst possible rank</span>\n            <span class=\"c1\"># instead of a random one.</span>\n            <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"p\">,</span> <span class=\"s1\">&#39;dnids&#39;</span><span class=\"p\">):</span>\n                <span class=\"n\">gt_name_rank</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">dnids</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">dnids</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_nids</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">daids</span><span class=\"p\">)))</span>\n                <span class=\"n\">gt_name_rank</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">dnids</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n        <span class=\"n\">qnx2_nameres_info</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"n\">qnx2_nameres_info</span><span class=\"p\">[</span><span class=\"s1\">&#39;qnid&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">qnid</span>\n        <span class=\"n\">qnx2_nameres_info</span><span class=\"p\">[</span><span class=\"s1\">&#39;gt_nid&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">gt_nid</span>\n        <span class=\"n\">qnx2_nameres_info</span><span class=\"p\">[</span><span class=\"s1\">&#39;gf_nid&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">gf_nid</span>\n        <span class=\"n\">qnx2_nameres_info</span><span class=\"p\">[</span><span class=\"s1\">&#39;gt_name_rank&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">gt_name_rank</span>\n        <span class=\"n\">qnx2_nameres_info</span><span class=\"p\">[</span><span class=\"s1\">&#39;gf_name_rank&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">gf_name_rank</span>\n        <span class=\"n\">qnx2_nameres_info</span><span class=\"p\">[</span><span class=\"s1\">&#39;gt_name_score&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">gt_name_score</span>\n        <span class=\"n\">qnx2_nameres_info</span><span class=\"p\">[</span><span class=\"s1\">&#39;gf_name_score&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">gf_name_score</span>\n\n        <span class=\"n\">nameres_info_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">qnx2_nameres_info</span><span class=\"p\">)</span>\n        <span class=\"n\">nameres_info</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dict_stack</span><span class=\"p\">(</span><span class=\"n\">nameres_info_list</span><span class=\"p\">,</span> <span class=\"s1\">&#39;qnx2_&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">cmsinfo</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">nameres_info</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">cmsinfo</span></div>\n\n\n<div class=\"viewcode-block\" id=\"combine_testres_list\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.combine_testres_list\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">combine_testres_list</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">testres_list</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    combine test results over multiple annot configs</span>\n\n<span class=\"sd\">    The combination of pipeline and annotation config is indexed by cfgx.</span>\n<span class=\"sd\">    A cfgx corresponds to a unique query request</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis --tf combine_testres_list</span>\n\n<span class=\"sd\">        python -m ibeis --tf -draw_rank_cmc --db PZ_MTEST --show</span>\n<span class=\"sd\">        python -m ibeis --tf -draw_rank_cmc --db PZ_Master1 --show</span>\n<span class=\"sd\">        python -m ibeis --tf -draw_rank_cmc --db PZ_MTEST --show -a varysize -t default</span>\n<span class=\"sd\">        python -m ibeis --tf -draw_rank_cmc --db PZ_MTEST --show -a varysize -t default</span>\n\n<span class=\"sd\">    &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">    &gt;&gt;&gt; from ibeis.expt.test_result import *  # NOQA</span>\n<span class=\"sd\">    &gt;&gt;&gt; from ibeis.expt import harness</span>\n<span class=\"sd\">    &gt;&gt;&gt; ibs, testres = harness.testdata_expts(&#39;PZ_MTEST&#39;, [&#39;varysize&#39;])</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">copy</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.expt</span> <span class=\"k\">import</span> <span class=\"n\">annotation_configs</span>\n\n    <span class=\"n\">acfg_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">tr</span><span class=\"o\">.</span><span class=\"n\">acfg</span> <span class=\"k\">for</span> <span class=\"n\">tr</span> <span class=\"ow\">in</span> <span class=\"n\">testres_list</span><span class=\"p\">]</span>\n    <span class=\"n\">acfg_lbl_list</span> <span class=\"o\">=</span> <span class=\"n\">annotation_configs</span><span class=\"o\">.</span><span class=\"n\">get_varied_acfg_labels</span><span class=\"p\">(</span><span class=\"n\">acfg_list</span><span class=\"p\">)</span>\n\n    <span class=\"n\">flat_acfg_list</span> <span class=\"o\">=</span> <span class=\"n\">annotation_configs</span><span class=\"o\">.</span><span class=\"n\">flatten_acfg_list</span><span class=\"p\">(</span><span class=\"n\">acfg_list</span><span class=\"p\">)</span>\n    <span class=\"n\">nonvaried_acfg</span><span class=\"p\">,</span> <span class=\"n\">varied_acfg_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">partition_varied_cfg_list</span><span class=\"p\">(</span><span class=\"n\">flat_acfg_list</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">combine_lbls</span><span class=\"p\">(</span><span class=\"n\">lbl</span><span class=\"p\">,</span> <span class=\"n\">acfg_lbl</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">lbl</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">acfg_lbl</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">acfg_lbl</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">lbl</span>\n        <span class=\"k\">return</span> <span class=\"n\">lbl</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;+&#39;</span> <span class=\"o\">+</span> <span class=\"n\">acfg_lbl</span>\n\n    <span class=\"c1\"># TODO: depcirate cfg_dict list for pcfg_list (I think)</span>\n\n    <span class=\"n\">agg_cfg_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">([</span><span class=\"n\">tr</span><span class=\"o\">.</span><span class=\"n\">cfg_list</span> <span class=\"k\">for</span> <span class=\"n\">tr</span> <span class=\"ow\">in</span> <span class=\"n\">testres_list</span><span class=\"p\">])</span>\n    <span class=\"n\">agg_cfgx2_qreq_</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">([</span><span class=\"n\">tr</span><span class=\"o\">.</span><span class=\"n\">cfgx2_qreq_</span> <span class=\"k\">for</span> <span class=\"n\">tr</span> <span class=\"ow\">in</span> <span class=\"n\">testres_list</span><span class=\"p\">])</span>\n    <span class=\"n\">agg_cfgdict_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">([</span><span class=\"n\">tr</span><span class=\"o\">.</span><span class=\"n\">cfgdict_list</span> <span class=\"k\">for</span> <span class=\"n\">tr</span> <span class=\"ow\">in</span> <span class=\"n\">testres_list</span><span class=\"p\">])</span>\n    <span class=\"n\">agg_cfgx2_cmsinfo</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">([</span><span class=\"n\">tr</span><span class=\"o\">.</span><span class=\"n\">cfgx2_cmsinfo</span> <span class=\"k\">for</span> <span class=\"n\">tr</span> <span class=\"ow\">in</span> <span class=\"n\">testres_list</span><span class=\"p\">])</span>\n    <span class=\"n\">agg_varied_acfg_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">([</span>\n        <span class=\"p\">[</span><span class=\"n\">acfg</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">tr</span><span class=\"o\">.</span><span class=\"n\">cfg_list</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">tr</span><span class=\"p\">,</span> <span class=\"n\">acfg</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">testres_list</span><span class=\"p\">,</span> <span class=\"n\">varied_acfg_list</span><span class=\"p\">)</span>\n    <span class=\"p\">])</span>\n    <span class=\"n\">agg_cfgx2_lbls</span>      <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span>\n        <span class=\"p\">[[</span><span class=\"n\">combine_lbls</span><span class=\"p\">(</span><span class=\"n\">lbl</span><span class=\"p\">,</span> <span class=\"n\">acfg_lbl</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">lbl</span> <span class=\"ow\">in</span> <span class=\"n\">tr</span><span class=\"o\">.</span><span class=\"n\">cfgx2_lbl</span><span class=\"p\">]</span>\n         <span class=\"k\">for</span> <span class=\"n\">tr</span><span class=\"p\">,</span> <span class=\"n\">acfg_lbl</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">testres_list</span><span class=\"p\">,</span> <span class=\"n\">acfg_lbl_list</span><span class=\"p\">)])</span>\n\n    <span class=\"n\">agg_cfgx2_acfg</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span>\n        <span class=\"p\">[[</span><span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"n\">acfg</span><span class=\"p\">)]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">tr</span><span class=\"o\">.</span><span class=\"n\">cfg_list</span><span class=\"p\">)</span> <span class=\"k\">for</span>\n         <span class=\"n\">tr</span><span class=\"p\">,</span> <span class=\"n\">acfg</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">testres_list</span><span class=\"p\">,</span> <span class=\"n\">acfg_list</span><span class=\"p\">)])</span>\n\n    <span class=\"n\">big_testres</span> <span class=\"o\">=</span> <span class=\"n\">TestResult</span><span class=\"p\">(</span><span class=\"n\">agg_cfg_list</span><span class=\"p\">,</span> <span class=\"n\">agg_cfgx2_lbls</span><span class=\"p\">,</span>\n                             <span class=\"n\">agg_cfgx2_cmsinfo</span><span class=\"p\">,</span> <span class=\"n\">agg_cfgx2_qreq_</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Give the big test result an acfg that is common between everything</span>\n    <span class=\"n\">big_testres</span><span class=\"o\">.</span><span class=\"n\">acfg</span> <span class=\"o\">=</span> <span class=\"n\">annotation_configs</span><span class=\"o\">.</span><span class=\"n\">unflatten_acfgdict</span><span class=\"p\">(</span><span class=\"n\">nonvaried_acfg</span><span class=\"p\">)</span>\n    <span class=\"c1\"># TODO: cfgdict_list -&gt; pcfg_list</span>\n    <span class=\"n\">big_testres</span><span class=\"o\">.</span><span class=\"n\">cfgdict_list</span> <span class=\"o\">=</span> <span class=\"n\">agg_cfgdict_list</span>  <span class=\"c1\"># TODO: depricate</span>\n\n    <span class=\"n\">big_testres</span><span class=\"o\">.</span><span class=\"n\">common_acfg</span> <span class=\"o\">=</span> <span class=\"n\">annotation_configs</span><span class=\"o\">.</span><span class=\"n\">compress_aidcfg</span><span class=\"p\">(</span><span class=\"n\">big_testres</span><span class=\"o\">.</span><span class=\"n\">acfg</span><span class=\"p\">)</span>\n    <span class=\"n\">big_testres</span><span class=\"o\">.</span><span class=\"n\">common_cfgdict</span> <span class=\"o\">=</span> <span class=\"n\">reduce</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dict_intersection</span><span class=\"p\">,</span> <span class=\"n\">big_testres</span><span class=\"o\">.</span><span class=\"n\">cfgdict_list</span><span class=\"p\">)</span>\n    <span class=\"n\">big_testres</span><span class=\"o\">.</span><span class=\"n\">varied_acfg_list</span> <span class=\"o\">=</span> <span class=\"n\">agg_varied_acfg_list</span>\n    <span class=\"n\">big_testres</span><span class=\"o\">.</span><span class=\"n\">nonvaried_acfg</span> <span class=\"o\">=</span> <span class=\"n\">nonvaried_acfg</span>\n    <span class=\"n\">big_testres</span><span class=\"o\">.</span><span class=\"n\">varied_cfg_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">delete_dict_keys</span><span class=\"p\">(</span><span class=\"n\">cfgdict</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">(),</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">big_testres</span><span class=\"o\">.</span><span class=\"n\">common_cfgdict</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()))</span>\n        <span class=\"k\">for</span> <span class=\"n\">cfgdict</span> <span class=\"ow\">in</span> <span class=\"n\">big_testres</span><span class=\"o\">.</span><span class=\"n\">cfgdict_list</span><span class=\"p\">]</span>\n    <span class=\"n\">big_testres</span><span class=\"o\">.</span><span class=\"n\">acfg_list</span> <span class=\"o\">=</span> <span class=\"n\">acfg_list</span>\n    <span class=\"n\">big_testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_acfg</span> <span class=\"o\">=</span> <span class=\"n\">agg_cfgx2_acfg</span>\n    <span class=\"n\">big_testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_pcfg</span> <span class=\"o\">=</span> <span class=\"n\">agg_cfgdict_list</span>\n\n    <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">agg_cfgdict_list</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">agg_cfgx2_acfg</span><span class=\"p\">)</span>\n\n    <span class=\"c1\">#big_testres.acfg</span>\n    <span class=\"n\">testres</span> <span class=\"o\">=</span> <span class=\"n\">big_testres</span>\n    <span class=\"c1\"># big_testres = testres</span>\n    <span class=\"k\">return</span> <span class=\"n\">testres</span></div>\n\n\n<div class=\"viewcode-block\" id=\"TestResult\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult\">[docs]</a><span class=\"nd\">@six</span><span class=\"o\">.</span><span class=\"n\">add_metaclass</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ReloadingMetaclass</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">TestResult</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">NiceRepr</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        export SMK_PIPE=&quot;smk:nwords=[64000],sv=[False]&quot;</span>\n<span class=\"sd\">        ibeis TestResult --db PZ_MTEST -a ctrl -p $SMK_PIPE</span>\n<span class=\"sd\">        ibeis TestResult --db Oxford   -a oxford -p $SMK_PIPE</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # Script</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.init import main_helpers</span>\n<span class=\"sd\">        &gt;&gt;&gt; import utool as ut</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs, testres = main_helpers.testdata_expts()</span>\n<span class=\"sd\">        &gt;&gt;&gt; testres.help()</span>\n<span class=\"sd\">        &gt;&gt;&gt; actions = testres.get_actions()</span>\n<span class=\"sd\">        &gt;&gt;&gt; testres.map_score()</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.qtensure()</span>\n<span class=\"sd\">        &gt;&gt;&gt; prompt = ut.InteractivePrompt(actions)</span>\n<span class=\"sd\">        &gt;&gt;&gt; prompt.loop()</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">,</span> <span class=\"n\">cfg_list</span><span class=\"p\">,</span> <span class=\"n\">cfgx2_lbl</span><span class=\"p\">,</span> <span class=\"n\">cfgx2_cmsinfo</span><span class=\"p\">,</span> <span class=\"n\">cfgx2_qreq_</span><span class=\"p\">):</span>\n        <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cfg_list</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cfgx2_lbl</span><span class=\"p\">),</span> <span class=\"p\">(</span>\n            <span class=\"s1\">&#39;bad lengths1: </span><span class=\"si\">%r</span><span class=\"s1\"> != </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cfg_list</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cfgx2_lbl</span><span class=\"p\">)))</span>\n        <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cfgx2_qreq_</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cfgx2_lbl</span><span class=\"p\">),</span> <span class=\"p\">(</span>\n            <span class=\"s1\">&#39;bad lengths2: </span><span class=\"si\">%r</span><span class=\"s1\"> != </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cfgx2_qreq_</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cfgx2_lbl</span><span class=\"p\">)))</span>\n        <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cfgx2_cmsinfo</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cfgx2_lbl</span><span class=\"p\">),</span> <span class=\"p\">(</span>\n            <span class=\"s1\">&#39;bad lengths3: </span><span class=\"si\">%r</span><span class=\"s1\"> != </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cfgx2_cmsinfo</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cfgx2_lbl</span><span class=\"p\">)))</span>\n        <span class=\"c1\"># TODO rename cfg_list to pcfg_list</span>\n        <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfg_list</span>         <span class=\"o\">=</span> <span class=\"n\">cfg_list</span>\n        <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_lbl</span>        <span class=\"o\">=</span> <span class=\"n\">cfgx2_lbl</span>\n        <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_cmsinfo</span> <span class=\"o\">=</span> <span class=\"n\">cfgx2_cmsinfo</span>\n        <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_qreq_</span>      <span class=\"o\">=</span> <span class=\"n\">cfgx2_qreq_</span>\n        <span class=\"c1\"># TODO: uncomment</span>\n        <span class=\"c1\">#testres.cfgx2_acfg</span>\n        <span class=\"c1\">#testres.cfgx2_qcfg</span>\n        <span class=\"c1\">#testres.acfg_list        = None  #</span>\n        <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">lbl</span>              <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">testnameid</span>       <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n<div class=\"viewcode-block\" id=\"TestResult.from_cms\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.from_cms\">[docs]</a>    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">from_cms</span><span class=\"p\">(</span><span class=\"n\">TestResult</span><span class=\"p\">,</span> <span class=\"n\">cm_list</span><span class=\"p\">,</span> <span class=\"n\">qreq_</span><span class=\"p\">):</span>\n        <span class=\"n\">cfg_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">qparams</span><span class=\"p\">]</span>  <span class=\"c1\"># should actually be the specified dict</span>\n        <span class=\"n\">cfgx2_lbl</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;unspecified&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">cmsinfo</span> <span class=\"o\">=</span> <span class=\"n\">build_cmsinfo</span><span class=\"p\">(</span><span class=\"n\">cm_list</span><span class=\"p\">,</span> <span class=\"n\">qreq_</span><span class=\"p\">)</span>\n        <span class=\"n\">cfgx2_cmsinfo</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">cmsinfo</span><span class=\"p\">]</span>\n        <span class=\"n\">cfgx2_qreq_</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">qreq_</span><span class=\"p\">]</span>\n        <span class=\"n\">testres</span> <span class=\"o\">=</span> <span class=\"n\">TestResult</span><span class=\"p\">(</span><span class=\"n\">cfg_list</span><span class=\"p\">,</span> <span class=\"n\">cfgx2_lbl</span><span class=\"p\">,</span> <span class=\"n\">cfgx2_cmsinfo</span><span class=\"p\">,</span> <span class=\"n\">cfgx2_qreq_</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">testres</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__str__</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">reconstruct_test_flags</span><span class=\"p\">()</span>\n\n    <span class=\"c1\">#def __repr__(testres):</span>\n    <span class=\"c1\">#    return testres._custom_str()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__nice__</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">):</span>\n        <span class=\"n\">dbname</span> <span class=\"o\">=</span> <span class=\"kc\">None</span> <span class=\"k\">if</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">ibs</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"k\">else</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_dbname</span><span class=\"p\">()</span>\n        <span class=\"c1\"># hashkw = dict(_new=True, pathsafe=False)</span>\n        <span class=\"n\">infostr_</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;nCfg=</span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span>  <span class=\"o\">%</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">nConfig</span>\n        <span class=\"k\">if</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">nConfig</span> <span class=\"o\">==</span>  <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"n\">qreq_</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_qreq_</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"n\">infostr_</span> <span class=\"o\">+=</span> <span class=\"s1\">&#39; nQ=</span><span class=\"si\">%s</span><span class=\"s1\">, nD=</span><span class=\"si\">%s</span><span class=\"s1\"> </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">qaids</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">daids</span><span class=\"p\">),</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">get_pipe_hashid</span><span class=\"p\">())</span>\n        <span class=\"c1\"># nD=%s %s&#39; % (, len(testres.daids), testres.get_pipe_hashid())</span>\n        <span class=\"n\">nice</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"si\">%s</span><span class=\"s1\"> </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">dbname</span><span class=\"p\">,</span> <span class=\"n\">infostr_</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">nice</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">ibs</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">):</span>\n        <span class=\"n\">ibs_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">qreq_</span> <span class=\"ow\">in</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_qreq_</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">ibs_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">ibs</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"ne\">AttributeError</span><span class=\"p\">:</span>\n                <span class=\"n\">ibs_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">depc</span><span class=\"o\">.</span><span class=\"n\">controller</span><span class=\"p\">)</span>\n        <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">ibs_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">ibs_</span> <span class=\"ow\">in</span> <span class=\"n\">ibs_list</span><span class=\"p\">:</span>\n            <span class=\"k\">assert</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_dbdir</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">ibs_</span><span class=\"o\">.</span><span class=\"n\">get_dbdir</span><span class=\"p\">(),</span> <span class=\"p\">(</span>\n                <span class=\"s1\">&#39;all requests must use the same database&#39;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">ibs</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">qaids</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">):</span>\n        <span class=\"k\">assert</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">has_constant_qaids</span><span class=\"p\">(),</span> <span class=\"s1\">&#39;must have constant qaids to use this property&#39;</span>\n        <span class=\"k\">return</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_qaids</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"c1\">#return testres._qaids</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">nConfig</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">):</span>\n        <span class=\"c1\"># FIXME: this is the number of requests not the number of</span>\n        <span class=\"c1\"># pipeline configurations</span>\n        <span class=\"k\">return</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfg_list</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">unique_pcfgs</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">):</span>\n        <span class=\"n\">unique_idxs</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">unique_indices</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">,</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_pcfg</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_pcfg</span><span class=\"p\">,</span> <span class=\"n\">unique_idxs</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">nQuery</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">qaids</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">rank_mat</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_rank_mat</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">cfgx2_daids</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">):</span>\n        <span class=\"n\">daids_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">daids</span> <span class=\"k\">for</span> <span class=\"n\">qreq_</span> <span class=\"ow\">in</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_qreq_</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">daids_list</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">cfgx2_qaids</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">):</span>\n        <span class=\"n\">qaids_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">qaids</span> <span class=\"k\">for</span> <span class=\"n\">qreq_</span> <span class=\"ow\">in</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_qreq_</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">qaids_list</span>\n\n<div class=\"viewcode-block\" id=\"TestResult.has_constant_daids\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.has_constant_daids\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">has_constant_daids</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">allsame</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_daids</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"TestResult.has_constant_qaids\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.has_constant_qaids\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">has_constant_qaids</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">allsame</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_qaids</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"TestResult.has_constant_length_daids\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.has_constant_length_daids\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">has_constant_length_daids</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">allsame</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">,</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_daids</span><span class=\"p\">)))</span></div>\n\n<div class=\"viewcode-block\" id=\"TestResult.has_constant_length_qaids\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.has_constant_length_qaids\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">has_constant_length_qaids</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">allsame</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">,</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_qaids</span><span class=\"p\">)))</span></div>\n\n<div class=\"viewcode-block\" id=\"TestResult.get_infoprop_list\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.get_infoprop_list\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_infoprop_list</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">qaids</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        key = &#39;qx2_gt_rank&#39;</span>\n<span class=\"sd\">        key = &#39;qx2_gt_rank&#39;</span>\n<span class=\"sd\">        qaids = testres.get_test_qaids()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">key</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;participant&#39;</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Get if qaids are part of the config</span>\n            <span class=\"n\">cfgx2_infoprop</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">in1d</span><span class=\"p\">(</span><span class=\"n\">qaids</span><span class=\"p\">,</span> <span class=\"n\">aids_</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">aids_</span> <span class=\"ow\">in</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_qaids</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">_tmp1_cfgx2_infoprop</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_list_column</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_cmsinfo</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">)</span>\n            <span class=\"n\">_tmp2_cfgx2_infoprop</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span>\n                <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">,</span>\n                <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">util_list</span><span class=\"o\">.</span><span class=\"n\">replace_nones</span><span class=\"p\">(</span><span class=\"n\">_tmp1_cfgx2_infoprop</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">)))</span>\n            <span class=\"k\">if</span> <span class=\"n\">qaids</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">cfgx2_infoprop</span> <span class=\"o\">=</span> <span class=\"n\">_tmp2_cfgx2_infoprop</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Use nan if the aid doesnt exist</span>\n                <span class=\"n\">cfgx2_qaid2_qx</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">aids_</span><span class=\"p\">,</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aids_</span><span class=\"p\">))))</span>\n                                  <span class=\"k\">for</span> <span class=\"n\">aids_</span> <span class=\"ow\">in</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_qaids</span><span class=\"p\">]</span>\n                <span class=\"n\">qxs_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dict_take</span><span class=\"p\">(</span><span class=\"n\">qaid2_qx</span> <span class=\"p\">,</span> <span class=\"n\">qaids</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n                            <span class=\"k\">for</span> <span class=\"n\">qaid2_qx</span>  <span class=\"ow\">in</span> <span class=\"n\">cfgx2_qaid2_qx</span><span class=\"p\">]</span>\n                <span class=\"n\">cfgx2_infoprop</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                    <span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"k\">else</span> <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">qxs</span><span class=\"p\">]</span>\n                    <span class=\"k\">for</span> <span class=\"n\">props</span><span class=\"p\">,</span> <span class=\"n\">qxs</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">_tmp2_cfgx2_infoprop</span><span class=\"p\">,</span> <span class=\"n\">qxs_list</span><span class=\"p\">)]</span>\n            <span class=\"k\">if</span> <span class=\"n\">key</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;qx2_gt_rank&#39;</span> <span class=\"ow\">or</span> <span class=\"n\">key</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s1\">&#39;_rank&#39;</span><span class=\"p\">):</span>\n                <span class=\"c1\"># hack</span>\n                <span class=\"n\">wpr</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_worst_possible_rank</span><span class=\"p\">()</span>\n                <span class=\"n\">cfgx2_infoprop</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"n\">wpr</span> <span class=\"k\">if</span> <span class=\"n\">rank</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"n\">rank</span>\n                                            <span class=\"k\">for</span> <span class=\"n\">rank</span> <span class=\"ow\">in</span> <span class=\"n\">infoprop</span><span class=\"p\">])</span>\n                                  <span class=\"k\">for</span> <span class=\"n\">infoprop</span> <span class=\"ow\">in</span> <span class=\"n\">cfgx2_infoprop</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">cfgx2_infoprop</span></div>\n\n<div class=\"viewcode-block\" id=\"TestResult.get_infoprop_mat\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.get_infoprop_mat\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_infoprop_mat</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">qaids</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        key = &#39;qx2_gf_raw_score&#39;</span>\n<span class=\"sd\">        key = &#39;qx2_gt_raw_score&#39;</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">cfgx2_infoprop</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_infoprop_list</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">qaids</span><span class=\"p\">)</span>\n        <span class=\"c1\"># concatenate each query rank across configs</span>\n        <span class=\"n\">infoprop_mat</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">vstack</span><span class=\"p\">(</span><span class=\"n\">cfgx2_infoprop</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">T</span>\n        <span class=\"k\">return</span> <span class=\"n\">infoprop_mat</span></div>\n\n<div class=\"viewcode-block\" id=\"TestResult.get_rank_mat\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.get_rank_mat\">[docs]</a>    <span class=\"nd\">@ut</span><span class=\"o\">.</span><span class=\"n\">memoize</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_rank_mat</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">,</span> <span class=\"n\">qaids</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Ranks of Best Results</span>\n        <span class=\"n\">rank_mat</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_infoprop_mat</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s1\">&#39;qx2_gt_rank&#39;</span><span class=\"p\">,</span> <span class=\"n\">qaids</span><span class=\"o\">=</span><span class=\"n\">qaids</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">rank_mat</span></div>\n\n<div class=\"viewcode-block\" id=\"TestResult.get_worst_possible_rank\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.get_worst_possible_rank\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_worst_possible_rank</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">):</span>\n        <span class=\"c1\">#worst_possible_rank = max(9001, len(testres.daids) + 1)</span>\n        <span class=\"n\">worst_possible_rank</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">([</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">daids</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">qreq_</span> <span class=\"ow\">in</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_qreq_</span><span class=\"p\">])</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n        <span class=\"c1\">#worst_possible_rank = len(testres.daids) + 1</span>\n        <span class=\"k\">return</span> <span class=\"n\">worst_possible_rank</span></div>\n\n<div class=\"viewcode-block\" id=\"TestResult.get_rank_histograms\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.get_rank_histograms\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_rank_histograms</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">,</span> <span class=\"n\">bins</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">join_acfgs</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Ignore:</span>\n<span class=\"sd\">            testres.get_infoprop_mat(&#39;qnx2_gt_name_rank&#39;)</span>\n<span class=\"sd\">            testres.get_infoprop_mat(&#39;qnx2_gf_name_rank&#39;)</span>\n<span class=\"sd\">            testres.get_infoprop_mat(&#39;qnx2_qnid&#39;)</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.expt.test_result import *  # NOQA</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.init import main_helpers</span>\n<span class=\"sd\">            &gt;&gt;&gt; ibs, testres = main_helpers.testdata_expts(&#39;testdb1&#39;, a=[&#39;default&#39;])</span>\n<span class=\"sd\">            &gt;&gt;&gt; bins = &#39;dense&#39;</span>\n<span class=\"sd\">            &gt;&gt;&gt; key = &#39;qnx2_gt_name_rank&#39;</span>\n<span class=\"sd\">            &gt;&gt;&gt; config_hists = testres.get_rank_histograms(bins, key=key)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">key</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;qx2_gt_rank&#39;</span>\n            <span class=\"c1\">#key = &#39;qnx2_gt_name_rank&#39;</span>\n        <span class=\"k\">if</span> <span class=\"n\">bins</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">bins</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_rank_histogram_bins</span><span class=\"p\">()</span>\n        <span class=\"k\">elif</span> <span class=\"n\">bins</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;dense&#39;</span><span class=\"p\">:</span>\n            <span class=\"n\">bins</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_worst_possible_rank</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n        <span class=\"n\">cfgx2_ranks</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_infoprop_list</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"n\">key</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Use numpy histogram repr</span>\n        <span class=\"n\">cfgx2_hist</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">((</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cfgx2_ranks</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">bins</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">int32</span><span class=\"p\">)</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">cfgx</span><span class=\"p\">,</span> <span class=\"n\">ranks</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">cfgx2_ranks</span><span class=\"p\">):</span>\n            <span class=\"n\">freq</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">histogram</span><span class=\"p\">(</span><span class=\"n\">ranks</span><span class=\"p\">,</span> <span class=\"n\">bins</span><span class=\"o\">=</span><span class=\"n\">bins</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"n\">cfgx2_hist</span><span class=\"p\">[</span><span class=\"n\">cfgx</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">freq</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">join_acfgs</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Hack for turtles / general way of doing cross validation</span>\n            <span class=\"c1\"># however, we need to change the name</span>\n            <span class=\"n\">groupxs</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_cfgx_groupxs</span><span class=\"p\">()</span>\n            <span class=\"n\">cfgx2_hist</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span>\n                <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">group</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n                <span class=\"k\">for</span> <span class=\"n\">group</span> <span class=\"ow\">in</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">apply_grouping</span><span class=\"p\">(</span><span class=\"n\">cfgx2_hist</span><span class=\"p\">,</span> <span class=\"n\">groupxs</span><span class=\"p\">)</span>\n            <span class=\"p\">])</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">cfgx2_hist</span><span class=\"p\">,</span> <span class=\"n\">bins</span></div>\n\n<div class=\"viewcode-block\" id=\"TestResult.get_rank_percentage_cumhist\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.get_rank_percentage_cumhist\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_rank_percentage_cumhist</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">,</span> <span class=\"n\">bins</span><span class=\"o\">=</span><span class=\"s1\">&#39;dense&#39;</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                                    <span class=\"n\">join_acfgs</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            bins (unicode): (default = u&#39;dense&#39;)</span>\n<span class=\"sd\">            key (None): (default = None)</span>\n<span class=\"sd\">            join_acfgs (bool): (default = False)</span>\n\n<span class=\"sd\">        Returns:</span>\n<span class=\"sd\">            tuple: (config_cdfs, edges)</span>\n\n<span class=\"sd\">        CommandLine:</span>\n<span class=\"sd\">            python -m ibeis --tf TestResult.get_rank_percentage_cumhist</span>\n<span class=\"sd\">            python -m ibeis --tf TestResult.get_rank_percentage_cumhist \\</span>\n<span class=\"sd\">                -t baseline -a unctrl ctrl</span>\n\n<span class=\"sd\">            python -m ibeis --tf TestResult.get_rank_percentage_cumhist \\</span>\n<span class=\"sd\">                --db lynx \\</span>\n<span class=\"sd\">                -a default:qsame_imageset=True,been_adjusted=True,excluderef=True \\</span>\n<span class=\"sd\">                -t default:K=1 --show --cmd</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.expt.test_result import *  # NOQA</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.init import main_helpers</span>\n<span class=\"sd\">            &gt;&gt;&gt; ibs, testres = main_helpers.testdata_expts(</span>\n<span class=\"sd\">            &gt;&gt;&gt;     &#39;testdb1&#39;, a=[&#39;default:num_names=1,name_offset=[0,1]&#39;])</span>\n<span class=\"sd\">            &gt;&gt;&gt; bins = u&#39;dense&#39;</span>\n<span class=\"sd\">            &gt;&gt;&gt; key = None</span>\n<span class=\"sd\">            &gt;&gt;&gt; (config_cdfs, edges) = testres.get_rank_percentage_cumhist(bins)</span>\n<span class=\"sd\">            &gt;&gt;&gt; result = (&#39;(config_cdfs, edges) = %s&#39; % (str((config_cdfs, edges)),))</span>\n<span class=\"sd\">            &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">cfgx2_hist</span><span class=\"p\">,</span> <span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_rank_histograms</span><span class=\"p\">(</span>\n            <span class=\"n\">bins</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">join_acfgs</span><span class=\"o\">=</span><span class=\"n\">join_acfgs</span><span class=\"p\">)</span>\n        <span class=\"n\">cfgx2_cumhist</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">cumsum</span><span class=\"p\">(</span><span class=\"n\">cfgx2_hist</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">cfgx2_cumhist_percent</span> <span class=\"o\">=</span> <span class=\"mi\">100</span> <span class=\"o\">*</span> <span class=\"n\">cfgx2_cumhist</span> <span class=\"o\">/</span> <span class=\"n\">cfgx2_cumhist</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">[:,</span> <span class=\"kc\">None</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">cfgx2_cumhist_percent</span><span class=\"p\">,</span> <span class=\"n\">edges</span></div>\n\n<div class=\"viewcode-block\" id=\"TestResult.get_cfgx_groupxs\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.get_cfgx_groupxs\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_cfgx_groupxs</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">):</span>\n        <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Returns the group indices of configurations specified to be joined.</span>\n\n<span class=\"sd\">        Ignore:</span>\n<span class=\"sd\">            a = [</span>\n<span class=\"sd\">            &#39;default:minqual=good,require_timestamp=True,view=left,crossval_enc=True,joinme=1&#39;,</span>\n<span class=\"sd\">            &#39;default:minqual=good,require_timestamp=True,view=right,crossval_enc=True,joinme=1&#39;,</span>\n<span class=\"sd\">            &#39;default:minqual=ok,require_timestamp=True,view=left,crossval_enc=True,joinme=2&#39;,</span>\n<span class=\"sd\">            &#39;default:minqual=ok,require_timestamp=True,view=right,crossval_enc=True,joinme=2&#39;,</span>\n<span class=\"sd\">            ]</span>\n<span class=\"sd\">            &gt;&gt;&gt; a = [</span>\n<span class=\"sd\">            &gt;&gt;&gt;     &#39;default:minqual=good,require_timestamp=True,view=left,crossval_enc=True,joinme=1&#39;,</span>\n<span class=\"sd\">            &gt;&gt;&gt;     &#39;default:minqual=good,require_timestamp=True,view=right,crossval_enc=True,joinme=1&#39;,</span>\n<span class=\"sd\">            &gt;&gt;&gt;     &#39;default:minqual=ok,require_timestamp=True,view=left,crossval_enc=True,joinme=2&#39;,</span>\n<span class=\"sd\">            &gt;&gt;&gt;     &#39;default:minqual=ok,require_timestamp=True,view=right,crossval_enc=True,joinme=2&#39;,</span>\n<span class=\"sd\">            &gt;&gt;&gt; ]</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.init import main_helpers</span>\n<span class=\"sd\">            &gt;&gt;&gt; #a = &#39;default:minqual=good,require_timestamp=True,crossval_enc=True,view=[right,left]&#39;</span>\n<span class=\"sd\">            &gt;&gt;&gt; t = &#39;default:K=[1]&#39;</span>\n<span class=\"sd\">            &gt;&gt;&gt; ibs, testres = main_helpers.testdata_expts(&#39;WWF_Lynx_Copy&#39;, a=a, t=t)</span>\n<span class=\"sd\">            &gt;&gt;&gt; testres.get_cfgx_groupxs()</span>\n\n<span class=\"sd\">            ut.lmap(sum, ut.apply_grouping([len(ut.unique(ibs.annots(aids).nids)) for aids in testres.cfgx2_qaids], testres.get_cfgx_groupxs()))</span>\n<span class=\"sd\">            ut.lmap(sum, ut.apply_grouping([len(ut.unique(ibs.annots(aids))) for aids in testres.cfgx2_qaids], testres.get_cfgx_groupxs()))</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.expt.test_result import *  # NOQA</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.init import main_helpers</span>\n<span class=\"sd\">            &gt;&gt;&gt; ibs, testres = main_helpers.testdata_expts(</span>\n<span class=\"sd\">            &gt;&gt;&gt;    &#39;PZ_MTEST&#39;,</span>\n<span class=\"sd\">            &gt;&gt;&gt;     a=[&#39;default:qnum_names=1,qname_offset=[0,1],joinme=1,dpername=1&#39;,</span>\n<span class=\"sd\">            &gt;&gt;&gt;        &#39;default:qsize=1,dpername=[1,2]&#39;],</span>\n<span class=\"sd\">            &gt;&gt;&gt;     t=[&#39;default:K=[1,2]&#39;])</span>\n<span class=\"sd\">            &gt;&gt;&gt; groupxs = testres.get_cfgx_groupxs()</span>\n<span class=\"sd\">            &gt;&gt;&gt; result = groupxs</span>\n<span class=\"sd\">            &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">            [[6], [4], [0, 2], [7], [5], [1, 3]]</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># Group-ids for annotations are determined by joinme labels</span>\n        <span class=\"c1\"># (used primarilly in cross-validation)</span>\n        <span class=\"n\">acfg_joinid</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">acfg</span><span class=\"p\">[</span><span class=\"s1\">&#39;qcfg&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;joinme&#39;</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">acfg</span> <span class=\"ow\">in</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_acfg</span><span class=\"p\">]</span>\n        <span class=\"c1\"># Anything that does not have a joinme groupid is standalone and must</span>\n        <span class=\"c1\"># be given a unique groupid</span>\n        <span class=\"n\">gen_groupid</span> <span class=\"o\">=</span> <span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">step</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">acfg_groupids</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">gen_groupid</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">grpid</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"k\">else</span> <span class=\"n\">grpid</span>\n                          <span class=\"k\">for</span> <span class=\"n\">grpid</span> <span class=\"ow\">in</span> <span class=\"n\">acfg_joinid</span><span class=\"p\">]</span>\n        <span class=\"c1\"># Ensure that different pipeline configs are in different groups</span>\n        <span class=\"n\">pcfg_groupids</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_varied_cfg_lbls</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_pcfg</span><span class=\"p\">)</span>\n        <span class=\"n\">cfg_groupids</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">pcfg_groupids</span><span class=\"p\">,</span> <span class=\"n\">acfg_groupids</span><span class=\"p\">))</span>\n        <span class=\"n\">groupxs</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">group_indices</span><span class=\"p\">(</span><span class=\"n\">cfg_groupids</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">groupxs</span></div>\n\n<div class=\"viewcode-block\" id=\"TestResult.get_rank_histogram_bins\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.get_rank_histogram_bins\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_rank_histogram_bins</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot; easy to see histogram bins &quot;&quot;&quot;</span>\n        <span class=\"n\">worst_possible_rank</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_worst_possible_rank</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">worst_possible_rank</span> <span class=\"o\">&gt;</span> <span class=\"mi\">50</span><span class=\"p\">:</span>\n            <span class=\"n\">bins</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"n\">worst_possible_rank</span><span class=\"p\">,</span> <span class=\"n\">worst_possible_rank</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"k\">elif</span> <span class=\"n\">worst_possible_rank</span> <span class=\"o\">&gt;</span> <span class=\"mi\">5</span><span class=\"p\">:</span>\n            <span class=\"n\">bins</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">worst_possible_rank</span><span class=\"p\">,</span> <span class=\"n\">worst_possible_rank</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">bins</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">bins</span></div>\n\n<div class=\"viewcode-block\" id=\"TestResult.get_X_LIST\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.get_X_LIST\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_X_LIST</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot; DEPRICATE or refactor &quot;&quot;&quot;</span>\n        <span class=\"c1\">#X_LIST = ut.get_argval(&#39;--rank-lt-list&#39;, type_=list, default=[1])</span>\n        <span class=\"n\">X_LIST</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argval</span><span class=\"p\">(</span><span class=\"s1\">&#39;--rank-lt-list&#39;</span><span class=\"p\">,</span> <span class=\"n\">type_</span><span class=\"o\">=</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">])</span>\n        <span class=\"k\">return</span> <span class=\"n\">X_LIST</span></div>\n\n<div class=\"viewcode-block\" id=\"TestResult.get_nLessX_dict\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.get_nLessX_dict\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_nLessX_dict</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Build a (histogram) dictionary mapping X (as in #ranks &lt; X) to a list</span>\n<span class=\"sd\">        of cfg scores</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">X_LIST</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_X_LIST</span><span class=\"p\">()</span>\n        <span class=\"n\">nLessX_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">):</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">nConfig</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">X</span> <span class=\"ow\">in</span> <span class=\"n\">X_LIST</span><span class=\"p\">}</span>\n        <span class=\"n\">cfgx2_qx2_gt_rank</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_infoprop_list</span><span class=\"p\">(</span><span class=\"s1\">&#39;qx2_gt_rank&#39;</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">X</span> <span class=\"ow\">in</span> <span class=\"n\">X_LIST</span><span class=\"p\">:</span>\n            <span class=\"n\">cfgx2_lessX_mask</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">logical_and</span><span class=\"p\">(</span><span class=\"mi\">0</span> <span class=\"o\">&lt;=</span> <span class=\"n\">qx2_gt_ranks</span><span class=\"p\">,</span> <span class=\"n\">qx2_gt_ranks</span> <span class=\"o\">&lt;</span> <span class=\"n\">X</span><span class=\"p\">)</span>\n                <span class=\"k\">for</span> <span class=\"n\">qx2_gt_ranks</span> <span class=\"ow\">in</span> <span class=\"n\">cfgx2_qx2_gt_rank</span><span class=\"p\">]</span>\n            <span class=\"n\">cfgx2_nLessX</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"n\">lessX_</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n                                     <span class=\"k\">for</span> <span class=\"n\">lessX_</span> <span class=\"ow\">in</span> <span class=\"n\">cfgx2_lessX_mask</span><span class=\"p\">])</span>\n            <span class=\"n\">nLessX_dict</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"n\">cfgx2_nLessX</span>\n        <span class=\"k\">return</span> <span class=\"n\">nLessX_dict</span></div>\n\n<div class=\"viewcode-block\" id=\"TestResult.get_all_varied_params\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.get_all_varied_params\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_all_varied_params</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">):</span>\n        <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Returns the parameters that were varied between different</span>\n<span class=\"sd\">        configurations in this test</span>\n\n<span class=\"sd\">        Returns:</span>\n<span class=\"sd\">            list: varied_params</span>\n\n<span class=\"sd\">        CommandLine:</span>\n<span class=\"sd\">            python -m ibeis TestResult.get_all_varied_params</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.expt.test_result import *  # NOQA</span>\n<span class=\"sd\">            &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">            &gt;&gt;&gt; testres = ibeis.testdata_expts(</span>\n<span class=\"sd\">            &gt;&gt;&gt;     &#39;PZ_MTEST&#39;, t=&#39;default:K=[1,2]&#39;)[1]</span>\n<span class=\"sd\">            &gt;&gt;&gt; varied_params = sorted(testres.get_all_varied_params())</span>\n<span class=\"sd\">            &gt;&gt;&gt; result = (&#39;varied_params = %s&#39; % (ut.repr2(varied_params),))</span>\n<span class=\"sd\">            &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">            varied_params = [&#39;K&#39;, &#39;_cfgindex&#39;]</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># only for big results</span>\n        <span class=\"n\">varied_cfg_params</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span>\n            <span class=\"p\">[</span><span class=\"n\">cfgdict</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span>\n             <span class=\"k\">for</span> <span class=\"n\">cfgdict</span> <span class=\"ow\">in</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">varied_cfg_list</span><span class=\"p\">])))</span>\n        <span class=\"n\">varied_acfg_params</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">([</span>\n            <span class=\"n\">acfg</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span>\n            <span class=\"k\">for</span> <span class=\"n\">acfg</span> <span class=\"ow\">in</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">varied_acfg_list</span><span class=\"p\">])))</span>\n        <span class=\"n\">varied_params</span> <span class=\"o\">=</span> <span class=\"n\">varied_acfg_params</span> <span class=\"o\">+</span> <span class=\"n\">varied_cfg_params</span>\n        <span class=\"k\">return</span> <span class=\"n\">varied_params</span></div>\n\n<div class=\"viewcode-block\" id=\"TestResult.get_total_num_varied_params\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.get_total_num_varied_params\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_total_num_varied_params</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_all_varied_params</span><span class=\"p\">())</span></div>\n\n<div class=\"viewcode-block\" id=\"TestResult.get_param_basis\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.get_param_basis\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_param_basis</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Returns what a param was varied between over all tests</span>\n<span class=\"sd\">        key = &#39;K&#39;</span>\n<span class=\"sd\">        key = &#39;dcfg_sample_size&#39;</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">key</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;len(daids)&#39;</span><span class=\"p\">:</span>\n            <span class=\"n\">basis</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">([</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">daids</span><span class=\"p\">)</span>\n                                     <span class=\"k\">for</span> <span class=\"n\">daids</span> <span class=\"ow\">in</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_daids</span><span class=\"p\">])))</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">any</span><span class=\"p\">([</span><span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">cfgdict</span> <span class=\"k\">for</span> <span class=\"n\">cfgdict</span> <span class=\"ow\">in</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">varied_cfg_list</span><span class=\"p\">]):</span>\n            <span class=\"n\">basis</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">([</span>\n                <span class=\"n\">cfgdict</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span>\n                <span class=\"k\">for</span> <span class=\"n\">cfgdict</span> <span class=\"ow\">in</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">varied_cfg_list</span><span class=\"p\">])))</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">any</span><span class=\"p\">([</span><span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">cfgdict</span> <span class=\"k\">for</span> <span class=\"n\">cfgdict</span> <span class=\"ow\">in</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">varied_acfg_list</span><span class=\"p\">]):</span>\n            <span class=\"n\">basis</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">([</span>\n                <span class=\"n\">acfg</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span>\n                <span class=\"k\">for</span> <span class=\"n\">acfg</span> <span class=\"ow\">in</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">varied_acfg_list</span><span class=\"p\">])))</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\">#assert False, &#39;param is not varied&#39;</span>\n            <span class=\"k\">if</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">common_cfgdict</span><span class=\"p\">:</span>\n                <span class=\"n\">basis</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">common_cfgdict</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]]</span>\n            <span class=\"k\">elif</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">nonvaried_acfg</span><span class=\"p\">:</span>\n                <span class=\"n\">basis</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">nonvaried_acfg</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]]</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">assert</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s1\">&#39;param=</span><span class=\"si\">%r</span><span class=\"s1\"> doesnt exist&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,)</span>\n        <span class=\"k\">return</span> <span class=\"n\">basis</span></div>\n\n<div class=\"viewcode-block\" id=\"TestResult.get_param_val_from_cfgx\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.get_param_val_from_cfgx\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_param_val_from_cfgx</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">,</span> <span class=\"n\">cfgx</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">key</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;len(daids)&#39;</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_daids</span><span class=\"p\">[</span><span class=\"n\">cfgx</span><span class=\"p\">])</span>\n        <span class=\"c1\"># --- HACK - the keys are different in varied dict for some reason ---</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">any</span><span class=\"p\">([</span><span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">cfgdict</span> <span class=\"k\">for</span> <span class=\"n\">cfgdict</span> <span class=\"ow\">in</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">varied_cfg_list</span><span class=\"p\">]):</span>\n            <span class=\"k\">return</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">varied_cfg_list</span><span class=\"p\">[</span><span class=\"n\">cfgx</span><span class=\"p\">][</span><span class=\"n\">key</span><span class=\"p\">]</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">any</span><span class=\"p\">([</span><span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">cfgdict</span> <span class=\"k\">for</span> <span class=\"n\">cfgdict</span> <span class=\"ow\">in</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">varied_acfg_list</span><span class=\"p\">]):</span>\n            <span class=\"k\">return</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">varied_acfg_list</span><span class=\"p\">[</span><span class=\"n\">cfgx</span><span class=\"p\">][</span><span class=\"n\">key</span><span class=\"p\">]</span>\n        <span class=\"c1\"># --- / Hack</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">any</span><span class=\"p\">([</span><span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">cfgdict</span> <span class=\"k\">for</span> <span class=\"n\">cfgdict</span> <span class=\"ow\">in</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_pcfg</span><span class=\"p\">]):</span>\n            <span class=\"k\">return</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_pcfg</span><span class=\"p\">[</span><span class=\"n\">cfgx</span><span class=\"p\">][</span><span class=\"n\">key</span><span class=\"p\">]</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">any</span><span class=\"p\">([</span><span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">cfgdict</span> <span class=\"k\">for</span> <span class=\"n\">cfgdict</span> <span class=\"ow\">in</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_acfg</span><span class=\"p\">]):</span>\n            <span class=\"k\">return</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_acfg</span><span class=\"p\">[</span><span class=\"n\">cfgx</span><span class=\"p\">][</span><span class=\"n\">key</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">assert</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s1\">&#39;param=</span><span class=\"si\">%r</span><span class=\"s1\"> doesnt exist&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,)</span></div>\n\n<div class=\"viewcode-block\" id=\"TestResult.get_cfgx_with_param\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.get_cfgx_with_param\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_cfgx_with_param</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Gets configs where the given parameter is held constant</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">key</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;len(daids)&#39;</span><span class=\"p\">:</span>\n            <span class=\"n\">cfgx_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">cfgx</span> <span class=\"k\">for</span> <span class=\"n\">cfgx</span><span class=\"p\">,</span> <span class=\"n\">daids</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_daids</span><span class=\"p\">)</span>\n                         <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">daids</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">val</span><span class=\"p\">]</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">any</span><span class=\"p\">([</span><span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">cfgdict</span> <span class=\"k\">for</span> <span class=\"n\">cfgdict</span> <span class=\"ow\">in</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">varied_cfg_list</span><span class=\"p\">]):</span>\n            <span class=\"n\">cfgx_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">cfgx</span> <span class=\"k\">for</span> <span class=\"n\">cfgx</span><span class=\"p\">,</span> <span class=\"n\">cfgdict</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">varied_cfg_list</span><span class=\"p\">)</span>\n                         <span class=\"k\">if</span> <span class=\"n\">cfgdict</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">val</span><span class=\"p\">]</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">any</span><span class=\"p\">([</span><span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">cfgdict</span> <span class=\"k\">for</span> <span class=\"n\">cfgdict</span> <span class=\"ow\">in</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">varied_acfg_list</span><span class=\"p\">]):</span>\n            <span class=\"n\">cfgx_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">cfgx</span> <span class=\"k\">for</span> <span class=\"n\">cfgx</span><span class=\"p\">,</span> <span class=\"n\">acfg</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">varied_acfg_list</span><span class=\"p\">)</span>\n                         <span class=\"k\">if</span> <span class=\"n\">acfg</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">val</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">common_cfgdict</span><span class=\"p\">:</span>\n                <span class=\"n\">cfgx_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">nConfig</span><span class=\"p\">))</span>\n            <span class=\"k\">elif</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">nonvaried_acfg</span><span class=\"p\">:</span>\n                <span class=\"n\">cfgx_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">nConfig</span><span class=\"p\">))</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">assert</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s1\">&#39;param=</span><span class=\"si\">%r</span><span class=\"s1\"> doesnt exist&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,)</span>\n            <span class=\"c1\">#assert False, &#39;param is not varied&#39;</span>\n        <span class=\"k\">return</span> <span class=\"n\">cfgx_list</span></div>\n\n<div class=\"viewcode-block\" id=\"TestResult.get_pipecfg_args\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.get_pipecfg_args\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_pipecfg_args</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"s1\">&#39;_cfgstr&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">common_cfgdict</span><span class=\"p\">:</span>\n            <span class=\"n\">pipecfg_args</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">common_cfgdict</span><span class=\"p\">[</span><span class=\"s1\">&#39;_cfgstr&#39;</span><span class=\"p\">]]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">pipecfg_args</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">unique_ordered</span><span class=\"p\">(</span>\n                <span class=\"p\">[</span><span class=\"n\">cfg</span><span class=\"p\">[</span><span class=\"s1\">&#39;_cfgstr&#39;</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">cfg</span> <span class=\"ow\">in</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">varied_cfg_list</span><span class=\"p\">])</span>\n        <span class=\"k\">return</span> <span class=\"s1\">&#39; &#39;</span> <span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">pipecfg_args</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"TestResult.get_annotcfg_args\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.get_annotcfg_args\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_annotcfg_args</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        CommandLine:</span>\n<span class=\"sd\">            # TODO: More robust fix</span>\n<span class=\"sd\">            # To reproduce the error</span>\n<span class=\"sd\">            ibeis -e rank_cmc --db humpbacks_fb -a default:mingt=2,qsize=10,dsize=100 default:qmingt=2,qsize=10,dsize=100 -t default:proot=BC_DTW,decision=max,crop_dim_size=500,crop_enabled=True,manual_extract=False,use_te_scorer=True,ignore_notch=True,te_score_weight=0.5 --show</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"s1\">&#39;_cfgstr&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">common_acfg</span><span class=\"p\">[</span><span class=\"s1\">&#39;common&#39;</span><span class=\"p\">]:</span>\n            <span class=\"n\">annotcfg_args</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">common_acfg</span><span class=\"p\">[</span><span class=\"s1\">&#39;common&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;_cfgstr&#39;</span><span class=\"p\">]]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">annotcfg_args</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">unique_ordered</span><span class=\"p\">([</span>\n                    <span class=\"n\">acfg</span><span class=\"p\">[</span><span class=\"s1\">&#39;common&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;_cfgstr&#39;</span><span class=\"p\">]</span>\n                    <span class=\"k\">for</span> <span class=\"n\">acfg</span> <span class=\"ow\">in</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">varied_acfg_list</span><span class=\"p\">])</span>\n            <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n                <span class=\"c1\"># HACK FIX</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"n\">annotcfg_args</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">unique_ordered</span><span class=\"p\">([</span>\n                        <span class=\"n\">acfg</span><span class=\"p\">[</span><span class=\"s1\">&#39;_cfgstr&#39;</span><span class=\"p\">]</span>\n                        <span class=\"k\">for</span> <span class=\"n\">acfg</span> <span class=\"ow\">in</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">varied_acfg_list</span><span class=\"p\">])</span>\n                <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n                    <span class=\"n\">annotcfg_args</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">unique_ordered</span><span class=\"p\">([</span>\n                        <span class=\"n\">acfg</span><span class=\"p\">[</span><span class=\"s1\">&#39;qcfg__cfgstr&#39;</span><span class=\"p\">]</span>\n                        <span class=\"k\">for</span> <span class=\"n\">acfg</span> <span class=\"ow\">in</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">varied_acfg_list</span><span class=\"p\">])</span>\n        <span class=\"k\">return</span> <span class=\"s1\">&#39; &#39;</span> <span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">annotcfg_args</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"TestResult.reconstruct_test_flags\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.reconstruct_test_flags\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">reconstruct_test_flags</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">):</span>\n        <span class=\"n\">flagstr</span> <span class=\"o\">=</span>  <span class=\"s1\">&#39; &#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">([</span>\n            <span class=\"s1\">&#39;-a &#39;</span> <span class=\"o\">+</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_annotcfg_args</span><span class=\"p\">(),</span>\n            <span class=\"s1\">&#39;-t &#39;</span> <span class=\"o\">+</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_pipecfg_args</span><span class=\"p\">(),</span>\n            <span class=\"s1\">&#39;--db &#39;</span> <span class=\"o\">+</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_dbname</span><span class=\"p\">()</span>\n        <span class=\"p\">])</span>\n        <span class=\"k\">return</span> <span class=\"n\">flagstr</span></div>\n\n<div class=\"viewcode-block\" id=\"TestResult.get_full_cfgstr\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.get_full_cfgstr\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_full_cfgstr</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">,</span> <span class=\"n\">cfgx</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot; both qannots and dannots included &quot;&quot;&quot;</span>\n        <span class=\"n\">full_cfgstr</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_qreq_</span><span class=\"p\">[</span><span class=\"n\">cfgx</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">get_full_cfgstr</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">full_cfgstr</span></div>\n\n<div class=\"viewcode-block\" id=\"TestResult.get_cfgstr\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.get_cfgstr\">[docs]</a>    <span class=\"nd\">@ut</span><span class=\"o\">.</span><span class=\"n\">memoize</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_cfgstr</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">,</span> <span class=\"n\">cfgx</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot; just dannots and config_str &quot;&quot;&quot;</span>\n        <span class=\"n\">cfgstr</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_qreq_</span><span class=\"p\">[</span><span class=\"n\">cfgx</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">get_cfgstr</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">cfgstr</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_shorten_lbls</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">,</span> <span class=\"n\">lbl</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        hacky function</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">re</span>\n        <span class=\"n\">repl_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;candidacy_&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;viewpoint_compare&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;viewpoint&#39;</span><span class=\"p\">),</span>\n            <span class=\"c1\">#(&#39;custom&#39;, &#39;default&#39;),</span>\n            <span class=\"c1\">#(&#39;fg_on&#39;, &#39;FG&#39;),</span>\n            <span class=\"c1\">#(&#39;fg_on=True&#39;, &#39;FG&#39;),</span>\n            <span class=\"c1\">#(&#39;fg_on=False,?&#39;, &#39;&#39;),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;fg_on=True&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;FG=True&#39;</span><span class=\"p\">),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;fg_on=False,?&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;FG=False&#39;</span><span class=\"p\">),</span>\n\n            <span class=\"p\">(</span><span class=\"s1\">&#39;lnbnn_on=True&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;LNBNN&#39;</span><span class=\"p\">),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;lnbnn_on=False,?&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">),</span>\n\n            <span class=\"p\">(</span><span class=\"s1\">&#39;normonly_on=True&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;normonly&#39;</span><span class=\"p\">),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;normonly_on=False,?&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">),</span>\n\n            <span class=\"p\">(</span><span class=\"s1\">&#39;bar_l2_on=True&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;dist&#39;</span><span class=\"p\">),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;bar_l2_on=False,?&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">),</span>\n\n            <span class=\"p\">(</span><span class=\"s1\">&#39;joinme=\\d+,?&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;dcrossval_enc&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;denc_per_name&#39;</span><span class=\"p\">),</span>\n\n            <span class=\"p\">(</span><span class=\"s1\">&#39;sv_on&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;SV&#39;</span><span class=\"p\">),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;rotation_invariance&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;RI&#39;</span><span class=\"p\">),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;affine_invariance&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;AI&#39;</span><span class=\"p\">),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;query_rotation_heuristic&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;QRH&#39;</span><span class=\"p\">),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;nNameShortlistSVER&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;nRR&#39;</span><span class=\"p\">),</span>\n            <span class=\"c1\">#</span>\n            <span class=\"c1\">#(&#39;sample_per_ref_name&#39;, &#39;per_ref_name&#39;),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;sample_per_ref_name&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;per_gt_name&#39;</span><span class=\"p\">),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;require_timestamp=True&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;require_timestamp&#39;</span><span class=\"p\">),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;require_timestamp=False,?&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;require_timestamp=None,?&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;[_A-Za-z]*=None,?&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;dpername=None,?&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">),</span>\n            <span class=\"c1\">#???</span>\n            <span class=\"c1\">#(&#39;sample_per_ref_name&#39;, &#39;per_gt_name&#39;),</span>\n            <span class=\"c1\">#(&#39;per_name&#39;, &#39;per_gf_name&#39;),   # Try to make labels clearer for paper</span>\n            <span class=\"c1\">#----</span>\n            <span class=\"c1\">#(&#39;prescore_method=\\&#39;?csum\\&#39;?,score_method=\\&#39;?csum\\&#39;?,?&#39;, &#39;amech&#39;),</span>\n            <span class=\"c1\">#(&#39;prescore_method=\\&#39;?nsum\\&#39;?,score_method=\\&#39;?nsum\\&#39;?,?&#39;, &#39;fmech&#39;),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;prescore_method=</span><span class=\"se\">\\&#39;</span><span class=\"s1\">?csum</span><span class=\"se\">\\&#39;</span><span class=\"s1\">?,score_method=</span><span class=\"se\">\\&#39;</span><span class=\"s1\">?csum</span><span class=\"se\">\\&#39;</span><span class=\"s1\">?,?&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;mech=annot&#39;</span><span class=\"p\">),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;prescore_method=</span><span class=\"se\">\\&#39;</span><span class=\"s1\">?nsum</span><span class=\"se\">\\&#39;</span><span class=\"s1\">?,score_method=</span><span class=\"se\">\\&#39;</span><span class=\"s1\">?nsum</span><span class=\"se\">\\&#39;</span><span class=\"s1\">?,?&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;mech=name&#39;</span><span class=\"p\">),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;force_const_size=[^,]+,?&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">),</span>\n            <span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">&#39;[dq]?_true_size=\\d+,?&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">),</span>\n            <span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">&#39;[dq]?_orig_size=[^,]+,?&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">),</span>\n            <span class=\"c1\"># Hack</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;[qd]?exclude_reference=&#39;</span> <span class=\"o\">+</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">regex_or</span><span class=\"p\">([</span><span class=\"s1\">&#39;True&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;False&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;None&#39;</span><span class=\"p\">])</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;\\,?&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">),</span>\n            <span class=\"c1\">#(&#39;=True&#39;, &#39;=On&#39;),</span>\n            <span class=\"c1\">#(&#39;=False&#39;, &#39;=Off&#39;),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;=True&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;=T&#39;</span><span class=\"p\">),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;=False&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;=F&#39;</span><span class=\"p\">),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;,$&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">),</span>\n        <span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">ser</span><span class=\"p\">,</span> <span class=\"n\">rep</span> <span class=\"ow\">in</span> <span class=\"n\">repl_list</span><span class=\"p\">:</span>\n            <span class=\"n\">lbl</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"n\">ser</span><span class=\"p\">,</span> <span class=\"n\">rep</span><span class=\"p\">,</span> <span class=\"n\">lbl</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">lbl</span>\n\n<div class=\"viewcode-block\" id=\"TestResult.get_short_cfglbls\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.get_short_cfglbls\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_short_cfglbls</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">,</span> <span class=\"n\">join_acfgs</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Labels for published tables</span>\n\n<span class=\"sd\">        cfg_lbls = [&#39;baseline:nRR=200+default:&#39;, &#39;baseline:+default:&#39;]</span>\n\n<span class=\"sd\">        CommandLine:</span>\n<span class=\"sd\">            python -m ibeis --tf TestResult.get_short_cfglbls</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; # SLOW_DOCTEST</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.expt.test_result import *  # NOQA</span>\n<span class=\"sd\">            &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">            &gt;&gt;&gt; ibs, testres = ibeis.testdata_expts(&#39;PZ_MTEST&#39;, a=[&#39;ctrl:size=10&#39;],</span>\n<span class=\"sd\">            &gt;&gt;&gt;                                     t=[&#39;default:dim_size=[450,550]&#39;])</span>\n<span class=\"sd\">            &gt;&gt;&gt; cfg_lbls = testres.get_short_cfglbls()</span>\n<span class=\"sd\">            &gt;&gt;&gt; result = (&#39;cfg_lbls = %s&#39; % (ut.repr2(cfg_lbls),))</span>\n<span class=\"sd\">            &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">            cfg_lbls = [</span>\n<span class=\"sd\">                &#39;default:dim_size=450+ctrl&#39;,</span>\n<span class=\"sd\">                &#39;default:dim_size=550+ctrl&#39;,</span>\n<span class=\"sd\">            ]</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">ibeis.expt</span> <span class=\"k\">import</span> <span class=\"n\">annotation_configs</span>\n        <span class=\"k\">if</span> <span class=\"kc\">False</span><span class=\"p\">:</span>\n            <span class=\"n\">acfg_names</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">acfg</span><span class=\"p\">[</span><span class=\"s1\">&#39;qcfg&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;_cfgstr&#39;</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">acfg</span> <span class=\"ow\">in</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_acfg</span><span class=\"p\">]</span>\n            <span class=\"n\">pcfg_names</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">pcfg</span><span class=\"p\">[</span><span class=\"s1\">&#39;_cfgstr&#39;</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">pcfg</span> <span class=\"ow\">in</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_pcfg</span><span class=\"p\">]</span>\n            <span class=\"c1\"># Only vary the label settings within the cfgname</span>\n            <span class=\"n\">acfg_hashes</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">hash</span><span class=\"p\">,</span> <span class=\"n\">acfg_names</span><span class=\"p\">)))</span>\n            <span class=\"n\">unique_hashes</span><span class=\"p\">,</span> <span class=\"n\">a_groupxs</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">group_indices</span><span class=\"p\">(</span><span class=\"n\">acfg_hashes</span><span class=\"p\">)</span>\n            <span class=\"n\">a_label_groups</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">for</span> <span class=\"n\">groupx</span> <span class=\"ow\">in</span> <span class=\"n\">a_groupxs</span><span class=\"p\">:</span>\n                <span class=\"n\">acfg_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_acfg</span><span class=\"p\">,</span> <span class=\"n\">groupx</span><span class=\"p\">)</span>\n                <span class=\"n\">varied_lbls</span> <span class=\"o\">=</span> <span class=\"n\">annotation_configs</span><span class=\"o\">.</span><span class=\"n\">get_varied_acfg_labels</span><span class=\"p\">(</span>\n                    <span class=\"n\">acfg_list</span><span class=\"p\">,</span> <span class=\"n\">mainkey</span><span class=\"o\">=</span><span class=\"s1\">&#39;_cfgstr&#39;</span><span class=\"p\">)</span>\n                <span class=\"n\">a_label_groups</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">varied_lbls</span><span class=\"p\">)</span>\n            <span class=\"n\">acfg_lbls</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">invert_apply_grouping</span><span class=\"p\">(</span><span class=\"n\">a_label_groups</span><span class=\"p\">,</span> <span class=\"n\">a_groupxs</span><span class=\"p\">)</span>\n\n            <span class=\"n\">pcfg_hashes</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">hash</span><span class=\"p\">,</span> <span class=\"n\">pcfg_names</span><span class=\"p\">)))</span>\n            <span class=\"n\">unique_hashes</span><span class=\"p\">,</span> <span class=\"n\">p_groupxs</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">group_indices</span><span class=\"p\">(</span><span class=\"n\">pcfg_hashes</span><span class=\"p\">)</span>\n            <span class=\"n\">p_label_groups</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">for</span> <span class=\"n\">groupx</span> <span class=\"ow\">in</span> <span class=\"n\">p_groupxs</span><span class=\"p\">:</span>\n                <span class=\"n\">pcfg_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_pcfg</span><span class=\"p\">,</span> <span class=\"n\">groupx</span><span class=\"p\">)</span>\n                <span class=\"n\">varied_lbls</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_varied_cfg_lbls</span><span class=\"p\">(</span><span class=\"n\">pcfg_list</span><span class=\"p\">,</span> <span class=\"n\">mainkey</span><span class=\"o\">=</span><span class=\"s1\">&#39;_cfgstr&#39;</span><span class=\"p\">)</span>\n                <span class=\"n\">p_label_groups</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">varied_lbls</span><span class=\"p\">)</span>\n            <span class=\"n\">pcfg_lbls</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">invert_apply_grouping</span><span class=\"p\">(</span><span class=\"n\">p_label_groups</span><span class=\"p\">,</span> <span class=\"n\">p_groupxs</span><span class=\"p\">)</span>\n\n            <span class=\"n\">cfg_lbls</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">albl</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;+&#39;</span> <span class=\"o\">+</span> <span class=\"n\">plbl</span> <span class=\"k\">for</span> <span class=\"n\">albl</span><span class=\"p\">,</span> <span class=\"n\">plbl</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">acfg_lbls</span><span class=\"p\">,</span> <span class=\"n\">pcfg_lbls</span><span class=\"p\">)]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">cfg_lbls_</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_lbl</span><span class=\"p\">[:]</span>\n            <span class=\"n\">cfg_lbls_</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">_shorten_lbls</span><span class=\"p\">(</span><span class=\"n\">lbl</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">lbl</span> <span class=\"ow\">in</span> <span class=\"n\">cfg_lbls_</span><span class=\"p\">]</span>\n            <span class=\"c1\"># split configs up by param and annots</span>\n            <span class=\"n\">pa_tups</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">lbl</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;+&#39;</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">lbl</span> <span class=\"ow\">in</span> <span class=\"n\">cfg_lbls_</span><span class=\"p\">]</span>\n            <span class=\"n\">cfg_lbls</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">for</span> <span class=\"n\">pa</span> <span class=\"ow\">in</span> <span class=\"n\">pa_tups</span><span class=\"p\">:</span>\n                <span class=\"n\">new_parts</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n                <span class=\"k\">for</span> <span class=\"n\">part</span> <span class=\"ow\">in</span> <span class=\"n\">pa</span><span class=\"p\">:</span>\n                    <span class=\"n\">_tup</span> <span class=\"o\">=</span> <span class=\"n\">part</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">NAMEVARSEP</span><span class=\"p\">)</span>\n                    <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">settings</span> <span class=\"o\">=</span> <span class=\"n\">_tup</span> <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">_tup</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"p\">(</span><span class=\"n\">_tup</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">)</span>\n                    <span class=\"n\">new_parts</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">part</span> <span class=\"k\">if</span> <span class=\"n\">settings</span> <span class=\"k\">else</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">new_parts</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span> <span class=\"ow\">and</span> <span class=\"n\">new_parts</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;default&#39;</span><span class=\"p\">:</span>\n                    <span class=\"n\">newlbl</span> <span class=\"o\">=</span> <span class=\"n\">new_parts</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">newlbl</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;+&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">new_parts</span><span class=\"p\">)</span>\n                <span class=\"n\">cfg_lbls</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">newlbl</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">join_acfgs</span><span class=\"p\">:</span>\n            <span class=\"n\">groupxs</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_cfgx_groupxs</span><span class=\"p\">()</span>\n            <span class=\"n\">group_lbls</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">for</span> <span class=\"n\">group</span> <span class=\"ow\">in</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">apply_grouping</span><span class=\"p\">(</span><span class=\"n\">cfg_lbls</span><span class=\"p\">,</span> <span class=\"n\">groupxs</span><span class=\"p\">):</span>\n                <span class=\"n\">num_parts</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n                <span class=\"n\">part_dicts</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n                <span class=\"k\">for</span> <span class=\"n\">lbl</span> <span class=\"ow\">in</span> <span class=\"n\">group</span><span class=\"p\">:</span>\n                    <span class=\"n\">parts</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n                    <span class=\"k\">for</span> <span class=\"n\">count</span><span class=\"p\">,</span> <span class=\"n\">pa</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">lbl</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;+&#39;</span><span class=\"p\">)):</span>\n                        <span class=\"n\">num_parts</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">num_parts</span><span class=\"p\">,</span> <span class=\"n\">count</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n                        <span class=\"n\">cfgdict</span> <span class=\"o\">=</span> <span class=\"n\">cfghelpers</span><span class=\"o\">.</span><span class=\"n\">parse_cfgstr_list2</span><span class=\"p\">([</span><span class=\"n\">pa</span><span class=\"p\">],</span> <span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                        <span class=\"n\">parts</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">cfgdict</span><span class=\"p\">)</span>\n                    <span class=\"n\">part_dicts</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">parts</span><span class=\"p\">)</span>\n                <span class=\"n\">group_lbl_parts</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n                <span class=\"k\">for</span> <span class=\"n\">px</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">num_parts</span><span class=\"p\">):</span>\n                    <span class=\"n\">cfgs</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take_column</span><span class=\"p\">(</span><span class=\"n\">part_dicts</span><span class=\"p\">,</span> <span class=\"n\">px</span><span class=\"p\">)</span>\n                    <span class=\"n\">nonvaried_cfg</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">partition_varied_cfg_list</span><span class=\"p\">(</span><span class=\"n\">cfgs</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                    <span class=\"n\">group_lbl_parts</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_cfg_lbl</span><span class=\"p\">(</span><span class=\"n\">nonvaried_cfg</span><span class=\"p\">))</span>\n                    <span class=\"c1\"># print(&#39;nonvaried_lbl = %r&#39; % (nonvaried_lbl,))</span>\n                <span class=\"n\">group_lbl</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;+&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">group_lbl_parts</span><span class=\"p\">)</span>\n                <span class=\"n\">group_lbls</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">group_lbl</span><span class=\"p\">)</span>\n            <span class=\"n\">cfg_lbls</span> <span class=\"o\">=</span> <span class=\"n\">group_lbls</span>\n        <span class=\"k\">return</span> <span class=\"n\">cfg_lbls</span></div>\n\n<div class=\"viewcode-block\" id=\"TestResult.get_varied_labels\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.get_varied_labels\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_varied_labels</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">,</span> <span class=\"n\">shorten</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">join_acfgs</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Returns labels indicating only the parameters that have been varied between</span>\n<span class=\"sd\">        different annot/pipeline configurations.</span>\n\n<span class=\"sd\">        Helper for consistent figure titles</span>\n\n<span class=\"sd\">        CommandLine:</span>\n<span class=\"sd\">            python -m ibeis --tf TestResult.make_figtitle  --prefix &quot;Seperability &quot; --db GIRM_Master1   -a timectrl -t Ell:K=2     --hargv=scores</span>\n<span class=\"sd\">            python -m ibeis --tf TestResult.make_figtitle</span>\n<span class=\"sd\">            python -m ibeis TestResult.get_varied_labels</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; # SLOW_DOCTEST</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.expt.test_result import *  # NOQA</span>\n<span class=\"sd\">            &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">            &gt;&gt;&gt; ibs, testres = ibeis.testdata_expts(</span>\n<span class=\"sd\">            &gt;&gt;&gt;     &#39;PZ_MTEST&#39;, t=&#39;default:K=[1,2]&#39;,</span>\n<span class=\"sd\">            &gt;&gt;&gt;     #a=[&#39;timectrl:qsize=[1,2],dsize=[3,4]&#39;]</span>\n<span class=\"sd\">            &gt;&gt;&gt;     a=[</span>\n<span class=\"sd\">            &gt;&gt;&gt;        &#39;default:qsize=[1,2],dsize=2,joinme=1,view=left&#39;,</span>\n<span class=\"sd\">            &gt;&gt;&gt;        &#39;default:qsize=2,dsize=3,joinme=1,view=primary&#39;,</span>\n<span class=\"sd\">            &gt;&gt;&gt;        &#39;default:qsize=[3,2],dsize=4,joinme=2,view=left&#39;,</span>\n<span class=\"sd\">            &gt;&gt;&gt;        &#39;default:qsize=4,dsize=5,joinme=2,view=primary&#39;,</span>\n<span class=\"sd\">            &gt;&gt;&gt;       ]</span>\n<span class=\"sd\">            &gt;&gt;&gt; )</span>\n<span class=\"sd\">            &gt;&gt;&gt; # &gt;&gt;&gt; ibs, testres = ibeis.testdata_expts(</span>\n<span class=\"sd\">            &gt;&gt;&gt; # &gt;&gt;&gt;     &#39;WWF_Lynx_Copy&#39;, t=&#39;default:K=1&#39;,</span>\n<span class=\"sd\">            &gt;&gt;&gt; # &gt;&gt;&gt;     a=[</span>\n<span class=\"sd\">            &gt;&gt;&gt; # &gt;&gt;&gt;         &#39;default:minqual=good,require_timestamp=True,view=left,dcrossval_enc=1,joinme=1&#39;,</span>\n<span class=\"sd\">            &gt;&gt;&gt; # &gt;&gt;&gt;         &#39;default:minqual=good,require_timestamp=True,view=left,dcrossval_enc=2,joinme=2&#39;,</span>\n<span class=\"sd\">            &gt;&gt;&gt; # &gt;&gt;&gt;         #&#39;default:minqual=good,require_timestamp=True,view=left,dcrossval_enc=3,joinme=3&#39;,</span>\n<span class=\"sd\">            &gt;&gt;&gt; # &gt;&gt;&gt;         &#39;default:minqual=good,require_timestamp=True,view=right,dcrossval_enc=1,joinme=1&#39;,</span>\n<span class=\"sd\">            &gt;&gt;&gt; # &gt;&gt;&gt;         &#39;default:minqual=good,require_timestamp=True,view=right,dcrossval_enc=2,joinme=2&#39;,</span>\n<span class=\"sd\">            &gt;&gt;&gt; # &gt;&gt;&gt;         #&#39;default:minqual=good,require_timestamp=True,view=right,dcrossval_enc=3,joinme=3&#39;,</span>\n<span class=\"sd\">            &gt;&gt;&gt; # &gt;&gt;&gt;       ]</span>\n<span class=\"sd\">            &gt;&gt;&gt; # &gt;&gt;&gt; )</span>\n<span class=\"sd\">            &gt;&gt;&gt; varied_lbls = testres.get_varied_labels(shorten=False, join_acfgs=True)</span>\n<span class=\"sd\">            &gt;&gt;&gt; result = (&#39;varied_lbls = %s&#39; % (ut.repr2(varied_lbls, strvals=True, nl=2),))</span>\n<span class=\"sd\">            &gt;&gt;&gt; print(result)</span>\n\n<span class=\"sd\">            varied_lbls = [u&#39;K=1+qsize=1&#39;, u&#39;K=2+qsize=1&#39;, u&#39;K=1+qsize=2&#39;, u&#39;K=2+qsize=2&#39;]</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">ibeis.expt</span> <span class=\"k\">import</span> <span class=\"n\">annotation_configs</span>\n        <span class=\"n\">varied_acfgs</span> <span class=\"o\">=</span> <span class=\"n\">annotation_configs</span><span class=\"o\">.</span><span class=\"n\">get_varied_acfg_labels</span><span class=\"p\">(</span>\n            <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_acfg</span><span class=\"p\">,</span> <span class=\"n\">checkname</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"c1\"># print(&#39;varied_acfgs = %s&#39; % (ut.repr2(varied_acfgs, nl=2),))</span>\n        <span class=\"c1\"># print(&#39;testres.cfgx2_acfg = %s&#39; % (ut.repr3(testres.cfgx2_acfg),))</span>\n        <span class=\"n\">varied_pcfgs</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_varied_cfg_lbls</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_pcfg</span><span class=\"p\">,</span> <span class=\"n\">checkname</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"c1\">#varied_acfgs = ut.get_varied_cfg_lbls(testres.cfgx2_acfg, checkname=True)</span>\n        <span class=\"n\">name_sep</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;:&#39;</span>\n        <span class=\"n\">cfg_sep</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;+&#39;</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">join_acfgs</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Hack for the grouped config problem</span>\n            <span class=\"n\">new_varied_acfgs</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"n\">groupxs</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_cfgx_groupxs</span><span class=\"p\">()</span>\n            <span class=\"n\">grouped_acfgs</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">apply_grouping</span><span class=\"p\">(</span><span class=\"n\">varied_acfgs</span><span class=\"p\">,</span> <span class=\"n\">groupxs</span><span class=\"p\">)</span>\n            <span class=\"n\">grouped_pcfgs</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">apply_grouping</span><span class=\"p\">(</span><span class=\"n\">varied_pcfgs</span><span class=\"p\">,</span> <span class=\"n\">groupxs</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">group</span> <span class=\"ow\">in</span> <span class=\"n\">grouped_acfgs</span><span class=\"p\">:</span>\n                <span class=\"n\">group</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">p</span> <span class=\"k\">if</span> <span class=\"n\">name_sep</span> <span class=\"ow\">in</span> <span class=\"n\">p</span> <span class=\"k\">else</span> <span class=\"n\">name_sep</span> <span class=\"o\">+</span> <span class=\"n\">p</span> <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">group</span><span class=\"p\">]</span>\n                <span class=\"c1\"># Re-parse given back into dictionary form</span>\n                <span class=\"n\">cfgdicts_</span> <span class=\"o\">=</span> <span class=\"n\">cfghelpers</span><span class=\"o\">.</span><span class=\"n\">parse_cfgstr_list2</span><span class=\"p\">(</span><span class=\"n\">group</span><span class=\"p\">,</span> <span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n                <span class=\"c1\"># I forget why these are stored in a 2d-list</span>\n                <span class=\"n\">cfgdicts</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take_column</span><span class=\"p\">(</span><span class=\"n\">cfgdicts_</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n                <span class=\"n\">new_acfgs</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">partition_varied_cfg_list</span><span class=\"p\">(</span><span class=\"n\">cfgdicts</span><span class=\"p\">)</span>\n                <span class=\"c1\"># Hack, just taking the first one that has agreement between</span>\n                <span class=\"c1\"># joinme / crossvalidation runs</span>\n                <span class=\"n\">new_acfg</span> <span class=\"o\">=</span> <span class=\"n\">new_acfgs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                <span class=\"k\">if</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n                    <span class=\"c1\"># look at internal variance within xval runs</span>\n                    <span class=\"n\">internal_cfgs</span> <span class=\"o\">=</span> <span class=\"n\">new_acfgs</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n                    <span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n                    <span class=\"n\">intern_variations</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"o\">.</span><span class=\"n\">from_dict</span><span class=\"p\">(</span><span class=\"n\">internal_cfgs</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">(</span><span class=\"n\">orient</span><span class=\"o\">=</span><span class=\"s1\">&#39;list&#39;</span><span class=\"p\">)</span>\n\n                    <span class=\"n\">op_prefixes</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                        <span class=\"s1\">&#39;sum&#39;</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">,</span> <span class=\"s1\">&#39;\u03a3-&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">),</span>\n                        <span class=\"s1\">&#39;mean&#39;</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">,</span> <span class=\"s1\">&#39;\u00b5-&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">),</span>\n                        <span class=\"s1\">&#39;set&#39;</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"s1\">&#39;&amp;&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"n\">six</span><span class=\"o\">.</span><span class=\"n\">text_type</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">))),</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;s&#39;</span><span class=\"p\">),</span>\n                    <span class=\"p\">}</span>\n                    <span class=\"n\">known_modes</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                        <span class=\"s1\">&#39;dsize&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;mean&#39;</span><span class=\"p\">,</span>\n                        <span class=\"s1\">&#39;qsize&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;sum&#39;</span><span class=\"p\">,</span>\n                        <span class=\"s1\">&#39;view&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;set&#39;</span><span class=\"p\">,</span>\n                    <span class=\"p\">}</span>\n                    <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">intern_variations</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">():</span>\n                        <span class=\"k\">if</span> <span class=\"n\">key</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">&#39;_&#39;</span><span class=\"p\">):</span>\n                            <span class=\"k\">continue</span>\n                        <span class=\"n\">mode</span> <span class=\"o\">=</span> <span class=\"n\">known_modes</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n                        <span class=\"n\">vals</span> <span class=\"o\">=</span> <span class=\"n\">intern_variations</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span>\n                        <span class=\"k\">if</span> <span class=\"n\">mode</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                            <span class=\"n\">mode</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;set&#39;</span>\n                        <span class=\"k\">if</span> <span class=\"n\">key</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;crossval_idx&#39;</span><span class=\"p\">:</span>\n                            <span class=\"n\">new_acfg</span><span class=\"p\">[</span><span class=\"s1\">&#39;folds&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">intern_variations</span><span class=\"p\">[</span><span class=\"s1\">&#39;crossval_idx&#39;</span><span class=\"p\">])</span>\n                        <span class=\"k\">else</span><span class=\"p\">:</span>\n                            <span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">pref</span><span class=\"p\">,</span> <span class=\"n\">suff</span> <span class=\"o\">=</span> <span class=\"n\">op_prefixes</span><span class=\"p\">[</span><span class=\"n\">mode</span><span class=\"p\">]</span>\n                            <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">op</span><span class=\"p\">(</span><span class=\"n\">vals</span><span class=\"p\">)</span>\n                            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">six</span><span class=\"o\">.</span><span class=\"n\">string_types</span><span class=\"p\">):</span>\n                                <span class=\"n\">new_acfg</span><span class=\"p\">[</span><span class=\"n\">pref</span> <span class=\"o\">+</span> <span class=\"n\">key</span> <span class=\"o\">+</span> <span class=\"n\">suff</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">c</span>\n                            <span class=\"k\">else</span><span class=\"p\">:</span>\n                                <span class=\"n\">new_acfg</span><span class=\"p\">[</span><span class=\"n\">pref</span> <span class=\"o\">+</span> <span class=\"n\">key</span> <span class=\"o\">+</span> <span class=\"n\">suff</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr2</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">precision</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n                    <span class=\"c1\"># if &#39;dsize&#39; in intern_variations:</span>\n                    <span class=\"c1\">#     new_acfg[&#39;\u00b5-dsize&#39;] = np.sum(intern_variations[&#39;dsize&#39;])</span>\n                    <span class=\"c1\"># if &#39;qsize&#39; in intern_variations:</span>\n                    <span class=\"c1\">#     new_acfg[&#39;\u03a3-qsize&#39;] = np.sum(intern_variations[&#39;qsize&#39;])</span>\n                    <span class=\"c1\"># if &#39;view&#39; in intern_variations:</span>\n                    <span class=\"c1\">#     new_acfg[&#39;views&#39;] = &#39;&amp;&#39;.join(set(intern_variations[&#39;view&#39;]))</span>\n                    <span class=\"c1\"># if &#39;crossval_idx&#39; in intern_variations:</span>\n                    <span class=\"c1\">#     new_acfg[&#39;folds&#39;] = len(intern_variations[&#39;crossval_idx&#39;])</span>\n                <span class=\"n\">new_varied_acfgs</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">new_acfg</span><span class=\"p\">)</span>\n\n            <span class=\"c1\"># Do one more dup check to remove the duplicate summaries</span>\n            <span class=\"n\">common_new_acfg</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">partition_varied_cfg_list</span><span class=\"p\">(</span><span class=\"n\">new_varied_acfgs</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">common_new_acfg</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">():</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">key</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">&#39;_&#39;</span><span class=\"p\">):</span>\n                    <span class=\"k\">for</span> <span class=\"n\">new_acfg</span> <span class=\"ow\">in</span> <span class=\"n\">new_varied_acfgs</span><span class=\"p\">:</span>\n                        <span class=\"k\">del</span> <span class=\"n\">new_acfg</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span>\n\n            <span class=\"n\">varied_pcfgs</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take_column</span><span class=\"p\">(</span><span class=\"n\">grouped_pcfgs</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"n\">varied_acfgs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_cfg_lbl</span><span class=\"p\">(</span><span class=\"n\">new_acfg_</span><span class=\"p\">,</span> <span class=\"n\">with_name</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"n\">sep</span><span class=\"p\">)</span>\n                            <span class=\"k\">for</span> <span class=\"n\">new_acfg_</span> <span class=\"ow\">in</span> <span class=\"n\">new_varied_acfgs</span><span class=\"p\">]</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">combo_lbls</span><span class=\"p\">(</span><span class=\"n\">lbla</span><span class=\"p\">,</span> <span class=\"n\">lblp</span><span class=\"p\">):</span>\n            <span class=\"n\">parts</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">if</span> <span class=\"n\">lbla</span> <span class=\"o\">!=</span> <span class=\"n\">name_sep</span> <span class=\"ow\">and</span> <span class=\"n\">lbla</span><span class=\"p\">:</span>\n                <span class=\"n\">parts</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">lbla</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">lblp</span> <span class=\"o\">!=</span> <span class=\"n\">name_sep</span> <span class=\"ow\">and</span> <span class=\"n\">lblp</span><span class=\"p\">:</span>\n                <span class=\"n\">parts</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">lblp</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">sep</span> <span class=\"o\">+</span> <span class=\"n\">cfg_sep</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">parts</span><span class=\"p\">)</span>\n\n        <span class=\"n\">varied_lbls</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">combo_lbls</span><span class=\"p\">(</span><span class=\"n\">lbla</span><span class=\"p\">,</span> <span class=\"n\">lblp</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">lblp</span><span class=\"p\">,</span> <span class=\"n\">lbla</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">varied_acfgs</span><span class=\"p\">,</span> <span class=\"n\">varied_pcfgs</span><span class=\"p\">)]</span>\n        <span class=\"k\">if</span> <span class=\"n\">shorten</span><span class=\"p\">:</span>\n            <span class=\"n\">varied_lbls</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">_shorten_lbls</span><span class=\"p\">(</span><span class=\"n\">lbl</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">lbl</span> <span class=\"ow\">in</span> <span class=\"n\">varied_lbls</span><span class=\"p\">]</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">varied_lbls</span></div>\n\n<div class=\"viewcode-block\" id=\"TestResult.get_sorted_config_labels\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.get_sorted_config_labels\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_sorted_config_labels</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        helper</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;qx2_gt_rank&#39;</span>\n        <span class=\"n\">cfgx2_cumhist_percent</span><span class=\"p\">,</span> <span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_rank_percentage_cumhist</span><span class=\"p\">(</span><span class=\"n\">bins</span><span class=\"o\">=</span><span class=\"s1\">&#39;dense&#39;</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"n\">key</span><span class=\"p\">)</span>\n        <span class=\"n\">label_list</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_short_cfglbls</span><span class=\"p\">()</span>\n        <span class=\"n\">label_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"si\">%6.2f%%</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">percent</span><span class=\"p\">,))</span> <span class=\"o\">+</span>\n            <span class=\"c1\">#ut.scalar_str(percent, precision=2)</span>\n            <span class=\"s1\">&#39; - &#39;</span> <span class=\"o\">+</span> <span class=\"n\">label</span>\n            <span class=\"k\">for</span> <span class=\"n\">percent</span><span class=\"p\">,</span> <span class=\"n\">label</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">cfgx2_cumhist_percent</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">label_list</span><span class=\"p\">)]</span>\n        <span class=\"n\">sortx</span> <span class=\"o\">=</span> <span class=\"n\">cfgx2_cumhist_percent</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">argsort</span><span class=\"p\">()[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"n\">label_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">label_list</span><span class=\"p\">,</span> <span class=\"n\">sortx</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">label_list</span></div>\n\n<div class=\"viewcode-block\" id=\"TestResult.make_figtitle\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.make_figtitle\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">make_figtitle</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">,</span> <span class=\"n\">plotname</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"n\">filt_cfg</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Helper for consistent figure titles</span>\n\n<span class=\"sd\">        CommandLine:</span>\n<span class=\"sd\">            python -m ibeis --tf TestResult.make_figtitle  --prefix &quot;Seperability &quot; --db GIRM_Master1   -a timectrl -t Ell:K=2     --hargv=scores</span>\n<span class=\"sd\">            python -m ibeis --tf TestResult.make_figtitle</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.expt.test_result import *  # NOQA</span>\n<span class=\"sd\">            &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">            &gt;&gt;&gt; ibs, testres = ibeis.testdata_expts(&#39;PZ_MTEST&#39;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; plotname = &#39;&#39;</span>\n<span class=\"sd\">            &gt;&gt;&gt; figtitle = testres.make_figtitle(plotname)</span>\n<span class=\"sd\">            &gt;&gt;&gt; result = (&#39;figtitle = %r&#39; % (figtitle,))</span>\n<span class=\"sd\">            &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">figtitle_prefix</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argval</span><span class=\"p\">(</span><span class=\"s1\">&#39;--prefix&#39;</span><span class=\"p\">,</span> <span class=\"n\">type_</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">figtitle_prefix</span> <span class=\"o\">!=</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">:</span>\n            <span class=\"n\">figtitle_prefix</span> <span class=\"o\">=</span> <span class=\"n\">figtitle_prefix</span><span class=\"o\">.</span><span class=\"n\">rstrip</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"s1\">&#39; &#39;</span>\n        <span class=\"n\">figtitle</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">figtitle_prefix</span> <span class=\"o\">+</span> <span class=\"n\">plotname</span><span class=\"p\">)</span>\n        <span class=\"n\">hasprefix</span> <span class=\"o\">=</span> <span class=\"n\">figtitle_prefix</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;&#39;</span>\n        <span class=\"k\">if</span> <span class=\"n\">hasprefix</span><span class=\"p\">:</span>\n            <span class=\"n\">figtitle</span> <span class=\"o\">+=</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span>\n\n        <span class=\"n\">title_aug</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_title_aug</span><span class=\"p\">(</span><span class=\"n\">friendly</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">with_cfg</span><span class=\"o\">=</span><span class=\"n\">hasprefix</span><span class=\"p\">)</span>\n        <span class=\"n\">figtitle</span> <span class=\"o\">+=</span> <span class=\"s1\">&#39; &#39;</span> <span class=\"o\">+</span> <span class=\"n\">title_aug</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">filt_cfg</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">filt_cfgstr</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_cfg_lbl</span><span class=\"p\">(</span><span class=\"n\">filt_cfg</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">filt_cfgstr</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span> <span class=\"o\">!=</span> <span class=\"s1\">&#39;:&#39;</span><span class=\"p\">:</span>\n                <span class=\"n\">figtitle</span> <span class=\"o\">+=</span> <span class=\"s1\">&#39; &#39;</span> <span class=\"o\">+</span> <span class=\"n\">filt_cfgstr</span>\n        <span class=\"k\">return</span> <span class=\"n\">figtitle</span></div>\n\n<div class=\"viewcode-block\" id=\"TestResult.get_title_aug\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.get_title_aug\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_title_aug</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">,</span> <span class=\"n\">with_size</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">with_db</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">with_cfg</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                      <span class=\"n\">friendly</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            with_size (bool): (default = True)</span>\n\n<span class=\"sd\">        Returns:</span>\n<span class=\"sd\">            str: title_aug</span>\n\n<span class=\"sd\">        CommandLine:</span>\n<span class=\"sd\">            python -m ibeis --tf TestResult.get_title_aug --db PZ_Master1 -a timequalctrl::timectrl</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.expt.test_result import *  # NOQA</span>\n<span class=\"sd\">            &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">            &gt;&gt;&gt; ibs, testres = ibeis.testdata_expts(&#39;PZ_MTEST&#39;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; with_size = True</span>\n<span class=\"sd\">            &gt;&gt;&gt; title_aug = testres.get_title_aug(with_size)</span>\n<span class=\"sd\">            &gt;&gt;&gt; res = u&#39;title_aug = %s&#39; % (title_aug,)</span>\n<span class=\"sd\">            &gt;&gt;&gt; print(res)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">ibs</span>\n        <span class=\"n\">title_aug</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>\n        <span class=\"k\">if</span> <span class=\"n\">with_db</span><span class=\"p\">:</span>\n            <span class=\"n\">title_aug</span> <span class=\"o\">+=</span> <span class=\"s1\">&#39;db=&#39;</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_dbname</span><span class=\"p\">())</span>\n        <span class=\"k\">if</span> <span class=\"n\">with_cfg</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"s1\">&#39;_cfgname&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">common_acfg</span><span class=\"p\">[</span><span class=\"s1\">&#39;common&#39;</span><span class=\"p\">]:</span>\n                    <span class=\"k\">try</span><span class=\"p\">:</span>\n                        <span class=\"n\">annot_cfgname</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">common_acfg</span><span class=\"p\">[</span><span class=\"s1\">&#39;common&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;_cfgstr&#39;</span><span class=\"p\">]</span>\n                    <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n                        <span class=\"n\">annot_cfgname</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">common_acfg</span><span class=\"p\">[</span><span class=\"s1\">&#39;common&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;_cfgname&#39;</span><span class=\"p\">]</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">cfgname_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">cfg</span><span class=\"p\">[</span><span class=\"s1\">&#39;dcfg__cfgname&#39;</span><span class=\"p\">]</span>\n                                    <span class=\"k\">for</span> <span class=\"n\">cfg</span> <span class=\"ow\">in</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">varied_acfg_list</span><span class=\"p\">]</span>\n                    <span class=\"n\">cfgname_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">unique_ordered</span><span class=\"p\">(</span><span class=\"n\">cfgname_list</span><span class=\"p\">)</span>\n                    <span class=\"n\">annot_cfgname</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;[&#39;</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;,&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">cfgname_list</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;]&#39;</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"n\">pipeline_cfgname</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">common_cfgdict</span><span class=\"p\">[</span><span class=\"s1\">&#39;_cfgstr&#39;</span><span class=\"p\">]</span>\n                <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n                    <span class=\"c1\">#pipeline_cfgname = testres.common_cfgdict[&#39;_cfgname&#39;]</span>\n                    <span class=\"n\">cfgstr_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">cfg</span><span class=\"p\">[</span><span class=\"s1\">&#39;_cfgstr&#39;</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">cfg</span> <span class=\"ow\">in</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">varied_cfg_list</span><span class=\"p\">]</span>\n                    <span class=\"n\">uniuqe_cfgstrs</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">unique_ordered</span><span class=\"p\">(</span><span class=\"n\">cfgstr_list</span><span class=\"p\">)</span>\n                    <span class=\"n\">pipeline_cfgname</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;[&#39;</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;,&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">uniuqe_cfgstrs</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;]&#39;</span>\n\n                <span class=\"n\">annot_cfgname</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">_shorten_lbls</span><span class=\"p\">(</span><span class=\"n\">annot_cfgname</span><span class=\"p\">)</span>\n                <span class=\"n\">pipeline_cfgname</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">_shorten_lbls</span><span class=\"p\">(</span><span class=\"n\">pipeline_cfgname</span><span class=\"p\">)</span>\n                <span class=\"c1\"># hack turn these off if too long</span>\n                <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">annot_cfgname</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">64</span><span class=\"p\">:</span>\n                    <span class=\"n\">title_aug</span> <span class=\"o\">+=</span> <span class=\"s1\">&#39; a=&#39;</span> <span class=\"o\">+</span> <span class=\"n\">annot_cfgname</span>\n                <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">pipeline_cfgname</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">64</span><span class=\"p\">:</span>\n                    <span class=\"n\">title_aug</span> <span class=\"o\">+=</span> <span class=\"s1\">&#39; t=&#39;</span> <span class=\"o\">+</span> <span class=\"n\">pipeline_cfgname</span>\n            <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr2</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">common_acfg</span><span class=\"p\">))</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr2</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">common_cfgdict</span><span class=\"p\">))</span>\n                <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">printex</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">)</span>\n                <span class=\"k\">raise</span>\n        <span class=\"k\">if</span> <span class=\"n\">with_size</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argflag</span><span class=\"p\">(</span><span class=\"s1\">&#39;--hack_size_nl&#39;</span><span class=\"p\">):</span>\n                <span class=\"n\">title_aug</span> <span class=\"o\">+=</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span>\n            <span class=\"k\">if</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">has_constant_qaids</span><span class=\"p\">():</span>\n                <span class=\"n\">title_aug</span> <span class=\"o\">+=</span> <span class=\"s1\">&#39; #qaids=</span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">qaids</span><span class=\"p\">),)</span>\n            <span class=\"k\">elif</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">has_constant_length_qaids</span><span class=\"p\">():</span>\n                <span class=\"n\">title_aug</span> <span class=\"o\">+=</span> <span class=\"s1\">&#39; #qaids=</span><span class=\"si\">%r</span><span class=\"s1\">*&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_qaids</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]),)</span>\n            <span class=\"k\">if</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">has_constant_daids</span><span class=\"p\">():</span>\n                <span class=\"n\">daids</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_daids</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                <span class=\"n\">title_aug</span> <span class=\"o\">+=</span> <span class=\"s1\">&#39; #daids=</span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_daids</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]),)</span>\n                <span class=\"k\">if</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">has_constant_qaids</span><span class=\"p\">():</span>\n                    <span class=\"n\">all_daid_per_name_stats</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_stats</span><span class=\"p\">(</span>\n                        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_num_annots_per_name</span><span class=\"p\">(</span><span class=\"n\">daids</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">use_nan</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n                    <span class=\"k\">if</span> <span class=\"n\">all_daid_per_name_stats</span><span class=\"p\">[</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                        <span class=\"n\">title_aug</span> <span class=\"o\">+=</span> <span class=\"s1\">&#39; dper_name=</span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span>\n                            <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">scalar_str</span><span class=\"p\">(</span><span class=\"n\">all_daid_per_name_stats</span><span class=\"p\">[</span><span class=\"s1\">&#39;mean&#39;</span><span class=\"p\">],</span>\n                                          <span class=\"n\">max_precision</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">),)</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"n\">title_aug</span> <span class=\"o\">+=</span> <span class=\"s1\">&#39; dper_name=</span><span class=\"si\">%s</span><span class=\"s1\">\u00b1</span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span>\n                            <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">scalar_str</span><span class=\"p\">(</span><span class=\"n\">all_daid_per_name_stats</span><span class=\"p\">[</span><span class=\"s1\">&#39;mean&#39;</span><span class=\"p\">],</span> <span class=\"n\">precision</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">),</span>\n                            <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">scalar_str</span><span class=\"p\">(</span><span class=\"n\">all_daid_per_name_stats</span><span class=\"p\">[</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">],</span> <span class=\"n\">precision</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">),)</span>\n            <span class=\"k\">elif</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">has_constant_length_daids</span><span class=\"p\">():</span>\n                <span class=\"n\">daids</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_daids</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                <span class=\"n\">title_aug</span> <span class=\"o\">+=</span> <span class=\"s1\">&#39; #daids=</span><span class=\"si\">%r</span><span class=\"s1\">*&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_daids</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]),)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">friendly</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Hackiness for friendliness</span>\n            <span class=\"c1\">#title_aug = title_aug.replace(&#39;db=PZ_Master1&#39;, &#39;Plains Zebras&#39;)</span>\n            <span class=\"c1\">#title_aug = title_aug.replace(&#39;db=NNP_MasterGIRM_core&#39;, &#39;Masai Giraffes&#39;)</span>\n            <span class=\"c1\">#title_aug = title_aug.replace(&#39;db=GZ_ALL&#39;, &#39;Grevy\\&#39;s Zebras&#39;)</span>\n            <span class=\"n\">title_aug</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">multi_replace</span><span class=\"p\">(</span>\n                <span class=\"n\">title_aug</span><span class=\"p\">,</span>\n                <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">DBNAME_ALIAS</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()),</span>\n                <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">DBNAME_ALIAS</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()))</span>\n            <span class=\"c1\">#title_aug = title_aug.replace(&#39;db=PZ_Master1&#39;, &#39;db=PZ&#39;)</span>\n            <span class=\"c1\">#title_aug = title_aug.replace(&#39;db=NNP_MasterGIRM_core&#39;, &#39;Masai Giraffes&#39;)</span>\n            <span class=\"c1\">#title_aug = title_aug.replace(&#39;db=GZ_ALL&#39;, &#39;Grevy\\&#39;s Zebras&#39;)</span>\n        <span class=\"k\">return</span> <span class=\"n\">title_aug</span></div>\n\n<div class=\"viewcode-block\" id=\"TestResult.get_fname_aug\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.get_fname_aug\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_fname_aug</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">re</span>\n        <span class=\"n\">title_aug</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_title_aug</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"n\">valid_regex</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;-a-zA-Z0-9_.() &#39;</span>\n        <span class=\"n\">valid_extra</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;=,&#39;</span>\n        <span class=\"n\">valid_regex</span> <span class=\"o\">+=</span> <span class=\"n\">valid_extra</span>\n        <span class=\"n\">title_aug</span> <span class=\"o\">=</span> <span class=\"n\">title_aug</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">&#39; &#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;_&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># spaces suck</span>\n        <span class=\"n\">fname_aug</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"s1\">&#39;[^&#39;</span> <span class=\"o\">+</span> <span class=\"n\">valid_regex</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;]+&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"n\">title_aug</span><span class=\"p\">)</span>\n        <span class=\"n\">fname_aug</span> <span class=\"o\">=</span> <span class=\"n\">fname_aug</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">(</span><span class=\"s1\">&#39;_&#39;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">fname_aug</span></div>\n\n<div class=\"viewcode-block\" id=\"TestResult.print_pcfg_info\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.print_pcfg_info\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">print_pcfg_info</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Prints verbose information about each pipeline configuration</span>\n\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.expt.test_result import *  # NOQA</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># TODO: Rectify with other printers</span>\n        <span class=\"c1\"># for pcfgx, (pipecfg, lbl) in enumerate(zip(pipecfg_list, pipecfg_lbls)):</span>\n        <span class=\"c1\">#     print(&#39;+--- %d / %d ===&#39; % (pcfgx, (len(pipecfg_list))))</span>\n        <span class=\"c1\">#     ut.colorprint(lbl, &#39;white&#39;)</span>\n        <span class=\"c1\">#     print(pipecfg.get_cfgstr())</span>\n        <span class=\"c1\">#     print(&#39;L___&#39;)</span>\n        <span class=\"c1\"># for qreq_ in testres.cfgx2_qreq_:</span>\n        <span class=\"c1\">#     print(qreq_.get_full_cfgstr())</span>\n        <span class=\"c1\"># cfgdict_list = [qreq_.qparams for qreq_ in testres.cfgx2_qreq_]</span>\n        <span class=\"n\">experiment_helpers</span><span class=\"o\">.</span><span class=\"n\">print_pipe_configs</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_pcfg</span><span class=\"p\">,</span>  <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_qreq_</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"TestResult.print_acfg_info\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.print_acfg_info\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">print_acfg_info</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Prints verbose information about the annotations used in each test</span>\n<span class=\"sd\">        configuration</span>\n\n<span class=\"sd\">        CommandLine:</span>\n<span class=\"sd\">            python -m ibeis --tf TestResult.print_acfg_info</span>\n\n<span class=\"sd\">        Kwargs:</span>\n<span class=\"sd\">            see ibs.get_annot_stats_dict</span>\n<span class=\"sd\">            hashid, per_name, per_qual, per_vp, per_name_vpedge, per_image,</span>\n<span class=\"sd\">            min_name_hourdist</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.expt.test_result import *  # NOQA</span>\n<span class=\"sd\">            &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">            &gt;&gt;&gt; ibs, testres = ibeis.testdata_expts(&#39;PZ_MTEST&#39;,</span>\n<span class=\"sd\">            &gt;&gt;&gt;                                     a=[&#39;ctrl::unctrl_comp&#39;],</span>\n<span class=\"sd\">            &gt;&gt;&gt;                                     t=[&#39;candk:K=[1,2]&#39;])</span>\n<span class=\"sd\">            &gt;&gt;&gt; ibs = None</span>\n<span class=\"sd\">            &gt;&gt;&gt; result = testres.print_acfg_info()</span>\n<span class=\"sd\">            &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">ibeis.expt</span> <span class=\"k\">import</span> <span class=\"n\">annotation_configs</span>\n        <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">ibs</span>\n        <span class=\"c1\"># Get unique annotation configs</span>\n        <span class=\"n\">cfgx2_acfg_label</span> <span class=\"o\">=</span> <span class=\"n\">annotation_configs</span><span class=\"o\">.</span><span class=\"n\">get_varied_acfg_labels</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_acfg</span><span class=\"p\">)</span>\n        <span class=\"n\">flags</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flag_unique_items</span><span class=\"p\">(</span><span class=\"n\">cfgx2_acfg_label</span><span class=\"p\">)</span>\n        <span class=\"n\">qreq_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_qreq_</span><span class=\"p\">,</span> <span class=\"n\">flags</span><span class=\"p\">)</span>\n        <span class=\"n\">acfg_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_acfg</span><span class=\"p\">,</span> <span class=\"n\">flags</span><span class=\"p\">)</span>\n        <span class=\"n\">expanded_aids_list</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">qaids</span><span class=\"p\">,</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">daids</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">qreq_</span> <span class=\"ow\">in</span> <span class=\"n\">qreq_list</span><span class=\"p\">]</span>\n        <span class=\"n\">annotation_configs</span><span class=\"o\">.</span><span class=\"n\">print_acfg_list</span><span class=\"p\">(</span><span class=\"n\">acfg_list</span><span class=\"p\">,</span> <span class=\"n\">expanded_aids_list</span><span class=\"p\">,</span> <span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"TestResult.print_unique_annot_config_stats\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.print_unique_annot_config_stats\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">print_unique_annot_config_stats</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">,</span> <span class=\"n\">ibs</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            ibs (IBEISController): ibeis controller object(default = None)</span>\n\n<span class=\"sd\">        CommandLine:</span>\n<span class=\"sd\">            python -m ibeis TestResult.print_unique_annot_config_stats</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.expt.test_result import *  # NOQA</span>\n<span class=\"sd\">            &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">            &gt;&gt;&gt; testres = ibeis.testdata_expts(&#39;PZ_MTEST&#39;, a=[&#39;ctrl::unctrl_comp&#39;])</span>\n<span class=\"sd\">            &gt;&gt;&gt; ibs = None</span>\n<span class=\"sd\">            &gt;&gt;&gt; result = testres.print_unique_annot_config_stats(ibs)</span>\n<span class=\"sd\">            &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">ibs</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">ibs</span>\n        <span class=\"n\">cfx2_dannot_hashid</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_hashid_visual_uuid</span><span class=\"p\">(</span><span class=\"n\">daids</span><span class=\"p\">)</span>\n                              <span class=\"k\">for</span> <span class=\"n\">daids</span> <span class=\"ow\">in</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_daids</span><span class=\"p\">]</span>\n        <span class=\"n\">unique_daids</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_daids</span><span class=\"p\">,</span>\n                                        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flag_unique_items</span><span class=\"p\">(</span><span class=\"n\">cfx2_dannot_hashid</span><span class=\"p\">))</span>\n        <span class=\"k\">with</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">Indenter</span><span class=\"p\">(</span><span class=\"s1\">&#39;[acfgstats]&#39;</span><span class=\"p\">):</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;+====&#39;</span><span class=\"p\">)</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Printing </span><span class=\"si\">%d</span><span class=\"s1\"> unique annotconfig stats&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">unique_daids</span><span class=\"p\">)))</span>\n            <span class=\"n\">common_acfg</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">common_acfg</span>\n            <span class=\"n\">common_acfg</span><span class=\"p\">[</span><span class=\"s1\">&#39;common&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dict_filter_nones</span><span class=\"p\">(</span><span class=\"n\">common_acfg</span><span class=\"p\">[</span><span class=\"s1\">&#39;common&#39;</span><span class=\"p\">])</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;testres.common_acfg = &#39;</span> <span class=\"o\">+</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr2</span><span class=\"p\">(</span><span class=\"n\">common_acfg</span><span class=\"p\">))</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;param_basis(len(daids)) = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span>\n                <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_param_basis</span><span class=\"p\">(</span><span class=\"s1\">&#39;len(daids)&#39;</span><span class=\"p\">),))</span>\n            <span class=\"k\">for</span> <span class=\"n\">count</span><span class=\"p\">,</span> <span class=\"n\">daids</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">unique_daids</span><span class=\"p\">):</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;+---&#39;</span><span class=\"p\">)</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;acfgx = </span><span class=\"si\">%r</span><span class=\"s1\">/</span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">count</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">unique_daids</span><span class=\"p\">)))</span>\n                <span class=\"k\">if</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">has_constant_qaids</span><span class=\"p\">():</span>\n                    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">print_annotconfig_stats</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">qaids</span><span class=\"p\">,</span> <span class=\"n\">daids</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">print_annot_stats</span><span class=\"p\">(</span><span class=\"n\">daids</span><span class=\"p\">,</span> <span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"s1\">&#39;d&#39;</span><span class=\"p\">)</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;L___&#39;</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"TestResult.report\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.report\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">report</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">):</span>\n        <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">print_results</span><span class=\"p\">()</span></div>\n\n<div class=\"viewcode-block\" id=\"TestResult.print_results\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.print_results\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">print_results</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        CommandLine:</span>\n<span class=\"sd\">            python -m ibeis --tf TestResult.print_results</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.expt.test_result import *  # NOQA</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.expt import harness</span>\n<span class=\"sd\">            &gt;&gt;&gt; ibs, testres = harness.testdata_expts(&#39;PZ_MTEST&#39;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; result = testres.print_results()</span>\n<span class=\"sd\">            &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">ibeis.expt</span> <span class=\"k\">import</span> <span class=\"n\">experiment_printres</span>\n        <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">ibs</span>\n        <span class=\"n\">experiment_printres</span><span class=\"o\">.</span><span class=\"n\">print_results</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">testres</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"TestResult.get_common_qaids\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.get_common_qaids\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_common_qaids</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">has_constant_qaids</span><span class=\"p\">():</span>\n            <span class=\"c1\"># Get only cases the tests share for now</span>\n            <span class=\"n\">common_qaids</span> <span class=\"o\">=</span> <span class=\"n\">reduce</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">intersect1d</span><span class=\"p\">,</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_qaids</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">common_qaids</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">qaids</span></div>\n\n<div class=\"viewcode-block\" id=\"TestResult.get_all_qaids\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.get_all_qaids\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_all_qaids</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">):</span>\n        <span class=\"n\">all_qaids</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">unique</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_qaids</span><span class=\"p\">)))</span>\n        <span class=\"k\">return</span> <span class=\"n\">all_qaids</span></div>\n\n<div class=\"viewcode-block\" id=\"TestResult.get_test_qaids\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.get_test_qaids\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_test_qaids</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Transition fucntion</span>\n        <span class=\"k\">return</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_all_qaids</span><span class=\"p\">()</span></div>\n        <span class=\"c1\"># return testres.get_common_qaids()</span>\n        <span class=\"c1\"># all_qaids = ut.unique(ut.flatten(testres.cfgx2_qaids))</span>\n        <span class=\"c1\"># return all_qaids</span>\n\n<div class=\"viewcode-block\" id=\"TestResult.get_all_tags\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.get_all_tags\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_all_tags</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">):</span>\n        <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        CommandLine:</span>\n<span class=\"sd\">            python -m ibeis --tf TestResult.get_all_tags --db PZ_Master1 --show --filt :</span>\n<span class=\"sd\">            python -m ibeis --tf TestResult.get_all_tags --db PZ_Master1 --show --filt :min_gf_timedelta=24h</span>\n<span class=\"sd\">            python -m ibeis --tf TestResult.get_all_tags --db PZ_Master1 --show --filt :min_gf_timedelta=24h,max_gt_rank=5</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.expt.test_result import *  # NOQA</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.init import main_helpers</span>\n<span class=\"sd\">            &gt;&gt;&gt; ibs, testres = main_helpers.testdata_expts(&#39;PZ_Master1&#39;, a=[&#39;timectrl&#39;])</span>\n<span class=\"sd\">            &gt;&gt;&gt; filt_cfg = main_helpers.testdata_filtcfg()</span>\n<span class=\"sd\">            &gt;&gt;&gt; case_pos_list = testres.case_sample2(filt_cfg)</span>\n<span class=\"sd\">            &gt;&gt;&gt; all_tags = testres.get_all_tags()</span>\n<span class=\"sd\">            &gt;&gt;&gt; selected_tags = ut.take(all_tags, case_pos_list.T[0])</span>\n<span class=\"sd\">            &gt;&gt;&gt; flat_tags = list(map(str, ut.flatten(ut.flatten(selected_tags))))</span>\n<span class=\"sd\">            &gt;&gt;&gt; print(ut.repr2(ut.dict_hist(flat_tags), key_order_metric=&#39;val&#39;))</span>\n<span class=\"sd\">            &gt;&gt;&gt; ut.quit_if_noshow()</span>\n<span class=\"sd\">            &gt;&gt;&gt; import plottool as pt</span>\n<span class=\"sd\">            &gt;&gt;&gt; pt.word_histogram2(flat_tags, fnum=1, pnum=(1, 2, 1))</span>\n<span class=\"sd\">            &gt;&gt;&gt; pt.wordcloud(&#39; &#39;.join(flat_tags), fnum=1, pnum=(1, 2, 2))</span>\n<span class=\"sd\">            &gt;&gt;&gt; pt.set_figtitle(ut.get_cfg_lbl(filt_cfg))</span>\n<span class=\"sd\">            &gt;&gt;&gt; ut.show_if_requested()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">gt_tags</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_gt_tags</span><span class=\"p\">()</span>\n        <span class=\"n\">gf_tags</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_gf_tags</span><span class=\"p\">()</span>\n        <span class=\"n\">all_tags</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">list_zipflatten</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">item</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">gf_tags</span><span class=\"p\">,</span> <span class=\"n\">gt_tags</span><span class=\"p\">)]</span>\n        <span class=\"k\">return</span> <span class=\"n\">all_tags</span></div>\n\n<div class=\"viewcode-block\" id=\"TestResult.get_gf_tags\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.get_gf_tags\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_gf_tags</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">):</span>\n        <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Returns:</span>\n<span class=\"sd\">            list: case_pos_list</span>\n\n<span class=\"sd\">        CommandLine:</span>\n<span class=\"sd\">            python -m ibeis --tf TestResult.get_gf_tags --db PZ_Master1 --show</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.expt.test_result import *  # NOQA</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.init import main_helpers</span>\n<span class=\"sd\">            &gt;&gt;&gt; ibs, testres = main_helpers.testdata_expts(&#39;PZ_Master1&#39;, a=[&#39;timectrl&#39;])</span>\n<span class=\"sd\">            &gt;&gt;&gt; filt_cfg = main_helpers.testdata_filtcfg()</span>\n<span class=\"sd\">            &gt;&gt;&gt; case_pos_list = testres.case_sample2(filt_cfg)</span>\n<span class=\"sd\">            &gt;&gt;&gt; gf_tags = testres.get_gf_tags()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">ibs</span>\n        <span class=\"n\">truth2_prop</span><span class=\"p\">,</span> <span class=\"n\">prop2_mat</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_truth2_prop</span><span class=\"p\">()</span>\n        <span class=\"n\">gf_annotmatch_rowids</span> <span class=\"o\">=</span> <span class=\"n\">truth2_prop</span><span class=\"p\">[</span><span class=\"s1\">&#39;gf&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;annotmatch_rowid&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">gf_tags</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">unflat_map</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annotmatch_case_tags</span><span class=\"p\">,</span> <span class=\"n\">gf_annotmatch_rowids</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">gf_tags</span></div>\n\n<div class=\"viewcode-block\" id=\"TestResult.get_gt_tags\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.get_gt_tags\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_gt_tags</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">):</span>\n        <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">ibs</span>\n        <span class=\"n\">truth2_prop</span><span class=\"p\">,</span> <span class=\"n\">prop2_mat</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_truth2_prop</span><span class=\"p\">()</span>\n        <span class=\"n\">gt_annotmatch_rowids</span> <span class=\"o\">=</span> <span class=\"n\">truth2_prop</span><span class=\"p\">[</span><span class=\"s1\">&#39;gt&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;annotmatch_rowid&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">gt_tags</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">unflat_map</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annotmatch_case_tags</span><span class=\"p\">,</span> <span class=\"n\">gt_annotmatch_rowids</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">gt_tags</span></div>\n\n<div class=\"viewcode-block\" id=\"TestResult.get_gt_annot_tags\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.get_gt_annot_tags\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_gt_annot_tags</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">):</span>\n        <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">ibs</span>\n        <span class=\"n\">truth2_prop</span><span class=\"p\">,</span> <span class=\"n\">prop2_mat</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_truth2_prop</span><span class=\"p\">()</span>\n        <span class=\"n\">gt_annot_tags</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">unflat_map</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_case_tags</span><span class=\"p\">,</span> <span class=\"n\">truth2_prop</span><span class=\"p\">[</span><span class=\"s1\">&#39;gt&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;aid&#39;</span><span class=\"p\">])</span>\n        <span class=\"k\">return</span> <span class=\"n\">gt_annot_tags</span></div>\n\n<div class=\"viewcode-block\" id=\"TestResult.get_query_annot_tags\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.get_query_annot_tags\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_query_annot_tags</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">):</span>\n        <span class=\"c1\"># FIXME: will break with new config structure</span>\n        <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">ibs</span>\n        <span class=\"n\">truth2_prop</span><span class=\"p\">,</span> <span class=\"n\">prop2_mat</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_truth2_prop</span><span class=\"p\">()</span>\n        <span class=\"n\">unflat_qids</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">tile</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">qaids</span><span class=\"p\">[:,</span> <span class=\"kc\">None</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_qaids</span><span class=\"p\">)))</span>\n        <span class=\"n\">query_annot_tags</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">unflat_map</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_case_tags</span><span class=\"p\">,</span> <span class=\"n\">unflat_qids</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">query_annot_tags</span></div>\n\n<div class=\"viewcode-block\" id=\"TestResult.get_gtquery_annot_tags\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.get_gtquery_annot_tags\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_gtquery_annot_tags</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">):</span>\n        <span class=\"n\">gt_annot_tags</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_gt_annot_tags</span><span class=\"p\">()</span>\n        <span class=\"n\">query_annot_tags</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_query_annot_tags</span><span class=\"p\">()</span>\n        <span class=\"n\">both_tags</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">item</span><span class=\"p\">)]</span>\n                     <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">query_annot_tags</span><span class=\"p\">,</span> <span class=\"n\">gt_annot_tags</span><span class=\"p\">)]</span>\n        <span class=\"k\">return</span> <span class=\"n\">both_tags</span></div>\n\n<div class=\"viewcode-block\" id=\"TestResult.case_sample2\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.case_sample2\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">case_sample2</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">,</span> <span class=\"n\">filt_cfg</span><span class=\"p\">,</span> <span class=\"n\">qaids</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">return_mask</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Filters individual test result cases based on how they performed, what</span>\n<span class=\"sd\">        tags they had, and various other things.</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            filt_cfg (dict):</span>\n\n<span class=\"sd\">        Returns:</span>\n<span class=\"sd\">            list: case_pos_list (list of (qx, cfgx)) or isvalid mask</span>\n\n<span class=\"sd\">        CommandLine:</span>\n<span class=\"sd\">            python -m ibeis TestResult.case_sample2</span>\n<span class=\"sd\">            python -m ibeis TestResult.case_sample2:0</span>\n<span class=\"sd\">            python -m ibeis TestResult.case_sample2:1 --db GZ_ALL --filt :min_tags=1</span>\n<span class=\"sd\">            python -m ibeis TestResult.case_sample2:1 --db PZ_Master1 --filt :min_gf_tags=1</span>\n\n<span class=\"sd\">            python -m ibeis TestResult.case_sample2:2 --db PZ_Master1</span>\n\n<span class=\"sd\">        Example0:</span>\n<span class=\"sd\">            &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">            &gt;&gt;&gt; # The same results is achievable with different filter config settings</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.expt.test_result import *  # NOQA</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.init import main_helpers</span>\n<span class=\"sd\">            &gt;&gt;&gt; verbose = True</span>\n<span class=\"sd\">            &gt;&gt;&gt; ibs, testres = main_helpers.testdata_expts(&#39;PZ_MTEST&#39;, a=[&#39;ctrl&#39;])</span>\n<span class=\"sd\">            &gt;&gt;&gt; filt_cfg1 = {&#39;fail&#39;: True}</span>\n<span class=\"sd\">            &gt;&gt;&gt; case_pos_list1 = testres.case_sample2(filt_cfg1)</span>\n<span class=\"sd\">            &gt;&gt;&gt; filt_cfg2 = {&#39;min_gtrank&#39;: 1}</span>\n<span class=\"sd\">            &gt;&gt;&gt; case_pos_list2 = testres.case_sample2(filt_cfg2)</span>\n<span class=\"sd\">            &gt;&gt;&gt; filt_cfg3 = {&#39;min_gtrank&#39;: 0}</span>\n<span class=\"sd\">            &gt;&gt;&gt; case_pos_list3 = testres.case_sample2(filt_cfg3)</span>\n<span class=\"sd\">            &gt;&gt;&gt; filt_cfg4 = {}</span>\n<span class=\"sd\">            &gt;&gt;&gt; case_pos_list4 = testres.case_sample2(filt_cfg4)</span>\n<span class=\"sd\">            &gt;&gt;&gt; assert np.all(case_pos_list1 == case_pos_list2), &#39;should be equiv configs&#39;</span>\n<span class=\"sd\">            &gt;&gt;&gt; assert np.any(case_pos_list2 != case_pos_list3), &#39;should be diff configs&#39;</span>\n<span class=\"sd\">            &gt;&gt;&gt; assert np.all(case_pos_list3 == case_pos_list4), &#39;should be equiv configs&#39;</span>\n<span class=\"sd\">            &gt;&gt;&gt; ibs, testres = main_helpers.testdata_expts(&#39;PZ_MTEST&#39;, a=[&#39;ctrl&#39;], t=[&#39;default:sv_on=[True,False]&#39;])</span>\n<span class=\"sd\">            &gt;&gt;&gt; filt_cfg5 = filt_cfg1.copy()</span>\n<span class=\"sd\">            &gt;&gt;&gt; mask5 = testres.case_sample2(filt_cfg5, return_mask=True)</span>\n<span class=\"sd\">            &gt;&gt;&gt; case_pos_list5 = testres.case_sample2(filt_cfg5, return_mask=False)</span>\n<span class=\"sd\">            &gt;&gt;&gt; assert len(mask5.shape) == 2</span>\n<span class=\"sd\">            &gt;&gt;&gt; assert np.all(mask5.T[0] == mask5.T[1])</span>\n<span class=\"sd\">            &gt;&gt;&gt; filt_cfg6 = {&#39;fail&#39;: True, &#39;allcfg&#39;: True}</span>\n<span class=\"sd\">            &gt;&gt;&gt; mask6 = testres.case_sample2(filt_cfg6, return_mask=True)</span>\n<span class=\"sd\">            &gt;&gt;&gt; assert np.all(mask6.T[0] == mask6.T[1])</span>\n<span class=\"sd\">            &gt;&gt;&gt; print(mask5)</span>\n<span class=\"sd\">            &gt;&gt;&gt; print(case_pos_list5)</span>\n<span class=\"sd\">            &gt;&gt;&gt; filt_cfg = filt_cfg7 = {&#39;disagree&#39;: True}</span>\n<span class=\"sd\">            &gt;&gt;&gt; case_pos_list7 = testres.case_sample2(filt_cfg7, verbose=verbose)</span>\n<span class=\"sd\">            &gt;&gt;&gt; print(case_pos_list7)</span>\n\n<span class=\"sd\">        Example1:</span>\n<span class=\"sd\">            &gt;&gt;&gt; # SCRIPT</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.expt.test_result import *  # NOQA</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.init import main_helpers</span>\n<span class=\"sd\">            &gt;&gt;&gt; ibs, testres = main_helpers.testdata_expts(&#39;PZ_MTEST&#39;, a=[&#39;ctrl&#39;])</span>\n<span class=\"sd\">            &gt;&gt;&gt; filt_cfg = main_helpers.testdata_filtcfg()</span>\n<span class=\"sd\">            &gt;&gt;&gt; case_pos_list = testres.case_sample2(filt_cfg)</span>\n<span class=\"sd\">            &gt;&gt;&gt; result = (&#39;case_pos_list = %s&#39; % (str(case_pos_list),))</span>\n<span class=\"sd\">            &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">            &gt;&gt;&gt; # Extra stuff</span>\n<span class=\"sd\">            &gt;&gt;&gt; all_tags = testres.get_all_tags()</span>\n<span class=\"sd\">            &gt;&gt;&gt; selcted_tags = ut.take(all_tags, case_pos_list.T[0])</span>\n<span class=\"sd\">            &gt;&gt;&gt; print(&#39;selcted_tags = %r&#39; % (selcted_tags,))</span>\n\n<span class=\"sd\">        Example1:</span>\n<span class=\"sd\">            &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.expt.test_result import *  # NOQA</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.init import main_helpers</span>\n<span class=\"sd\">            &gt;&gt;&gt; ibs, testres = main_helpers.testdata_expts(&#39;PZ_MTEST&#39;, a=[&#39;ctrl&#39;], t=[&#39;default:K=[1,2,3]&#39;])</span>\n<span class=\"sd\">            &gt;&gt;&gt; ut.exec_funckw(testres.case_sample2, globals())</span>\n<span class=\"sd\">            &gt;&gt;&gt; filt_cfg = {&#39;fail&#39;: True, &#39;min_gtrank&#39;: 1, &#39;max_gtrank&#39;: None, &#39;min_gf_timedelta&#39;: &#39;24h&#39;}</span>\n<span class=\"sd\">            &gt;&gt;&gt; ibs, testres = main_helpers.testdata_expts(&#39;humpbacks_fb&#39;, a=[&#39;default:has_any=hasnotch,mingt=2,qindex=0:300,dindex=0:300&#39;], t=[&#39;default:proot=BC_DTW,decision=max,crop_dim_size=500,crop_enabled=True,manual_extract=False,use_te_scorer=True,ignore_notch=True,te_net=annot_simple&#39;, &#39;default:proot=vsmany&#39;], qaid_override=[12])</span>\n<span class=\"sd\">            &gt;&gt;&gt; filt_cfg = &#39;:disagree=True,index=0:8,min_gtscore=.00001,require_all_cfg=True&#39;</span>\n<span class=\"sd\">            &gt;&gt;&gt; #filt_cfg = cfghelpers.parse_argv_cfg(&#39;--filt&#39;)[0]</span>\n<span class=\"sd\">            &gt;&gt;&gt; case_pos_list = testres.case_sample2(filt_cfg, verbose=True)</span>\n<span class=\"sd\">            &gt;&gt;&gt; result = (&#39;case_pos_list = %s&#39; % (str(case_pos_list),))</span>\n<span class=\"sd\">            &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">            &gt;&gt;&gt; # Extra stuff</span>\n<span class=\"sd\">            &gt;&gt;&gt; all_tags = testres.get_all_tags()</span>\n<span class=\"sd\">            &gt;&gt;&gt; selcted_tags = ut.take(all_tags, case_pos_list.T[0])</span>\n<span class=\"sd\">            &gt;&gt;&gt; print(&#39;selcted_tags = %r&#39; % (selcted_tags,))</span>\n\n\n<span class=\"sd\">            print(&#39;qaid = %r&#39; % (qaid,))</span>\n<span class=\"sd\">            print(&#39;qx = %r&#39; % (qx,))</span>\n<span class=\"sd\">            print(&#39;cfgxs = %r&#39; % (cfgxs,))</span>\n<span class=\"sd\">            # print testres info about this item</span>\n<span class=\"sd\">            take_cfgs = ut.partial(ut.take, index_list=cfgxs)</span>\n<span class=\"sd\">            take_qx = ut.partial(ut.take, index_list=qx)</span>\n<span class=\"sd\">            truth_cfgs = ut.hmap_vals(take_qx, truth2_prop)</span>\n<span class=\"sd\">            truth_item = ut.hmap_vals(take_cfgs, truth_cfgs, max_depth=1)</span>\n<span class=\"sd\">            prop_cfgs = ut.hmap_vals(take_qx, prop2_mat)</span>\n<span class=\"sd\">            prop_item = ut.hmap_vals(take_cfgs, prop_cfgs, max_depth=0)</span>\n<span class=\"sd\">            print(&#39;truth2_prop[item] = &#39; + ut.repr3(truth_item, nl=2))</span>\n<span class=\"sd\">            print(&#39;prop2_mat[item] = &#39; + ut.repr3(prop_item, nl=1))</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">ibeis.expt</span> <span class=\"k\">import</span> <span class=\"n\">cfghelpers</span>\n        <span class=\"k\">if</span> <span class=\"n\">verbose</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">verbose</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">NOT_QUIET</span>\n        <span class=\"k\">if</span> <span class=\"n\">verbose</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[testres] case_sample2&#39;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">filt_cfg</span><span class=\"p\">,</span> <span class=\"n\">six</span><span class=\"o\">.</span><span class=\"n\">string_types</span><span class=\"p\">):</span>\n            <span class=\"n\">filt_cfg</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">filt_cfg</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">filt_cfg</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n            <span class=\"n\">_combos</span> <span class=\"o\">=</span> <span class=\"n\">cfghelpers</span><span class=\"o\">.</span><span class=\"n\">parse_cfgstr_list2</span><span class=\"p\">(</span><span class=\"n\">filt_cfg</span><span class=\"p\">,</span> <span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n            <span class=\"n\">filt_cfg</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">_combos</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">filt_cfg</span><span class=\"p\">,</span> <span class=\"n\">six</span><span class=\"o\">.</span><span class=\"n\">string_types</span><span class=\"p\">):</span>\n            <span class=\"n\">_combos</span> <span class=\"o\">=</span> <span class=\"n\">cfghelpers</span><span class=\"o\">.</span><span class=\"n\">parse_cfgstr_list2</span><span class=\"p\">([</span><span class=\"n\">filt_cfg</span><span class=\"p\">],</span> <span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n            <span class=\"n\">filt_cfg</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">_combos</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">filt_cfg</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">filt_cfg</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n        <span class=\"n\">qaids</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_test_qaids</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">qaids</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"k\">else</span> <span class=\"n\">qaids</span>\n        <span class=\"n\">truth2_prop</span><span class=\"p\">,</span> <span class=\"n\">prop2_mat</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_truth2_prop</span><span class=\"p\">(</span><span class=\"n\">qaids</span><span class=\"p\">)</span>\n        <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">ibs</span>\n\n        <span class=\"c1\"># Initialize isvalid flags to all true</span>\n        <span class=\"c1\"># np.ones(prop2_mat[&#39;is_success&#39;].shape, dtype=np.bool)</span>\n        <span class=\"n\">participates</span> <span class=\"o\">=</span> <span class=\"n\">prop2_mat</span><span class=\"p\">[</span><span class=\"s1\">&#39;participates&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">is_valid</span> <span class=\"o\">=</span> <span class=\"n\">participates</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">unflat_tag_filterflags</span><span class=\"p\">(</span><span class=\"n\">tags_list</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n            <span class=\"kn\">from</span> <span class=\"nn\">ibeis</span> <span class=\"k\">import</span> <span class=\"n\">tag_funcs</span>\n            <span class=\"n\">flat_tags</span><span class=\"p\">,</span> <span class=\"n\">cumsum</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">invertible_flatten2</span><span class=\"p\">(</span><span class=\"n\">tags_list</span><span class=\"p\">)</span>\n            <span class=\"n\">flat_flags</span> <span class=\"o\">=</span> <span class=\"n\">tag_funcs</span><span class=\"o\">.</span><span class=\"n\">filterflags_general_tags</span><span class=\"p\">(</span><span class=\"n\">flat_tags</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n            <span class=\"n\">flags</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">unflatten2</span><span class=\"p\">(</span><span class=\"n\">flat_flags</span><span class=\"p\">,</span> <span class=\"n\">cumsum</span><span class=\"p\">))</span>\n            <span class=\"k\">return</span> <span class=\"n\">flags</span>\n\n        <span class=\"n\">UTFF</span> <span class=\"o\">=</span> <span class=\"n\">unflat_tag_filterflags</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">cols_disagree</span><span class=\"p\">(</span><span class=\"n\">mat</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">):</span>\n            <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">            is_success = prop2_mat[&#39;is_success&#39;]</span>\n<span class=\"sd\">            &quot;&quot;&quot;</span>\n            <span class=\"n\">nCols</span> <span class=\"o\">=</span> <span class=\"n\">mat</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"n\">sums</span> <span class=\"o\">=</span> <span class=\"n\">mat</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"c1\"># Find out which rows have different values</span>\n            <span class=\"n\">disagree_flags1d</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">logical_and</span><span class=\"p\">(</span><span class=\"n\">sums</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">sums</span> <span class=\"o\">&lt;</span> <span class=\"n\">nCols</span><span class=\"p\">)</span>\n            <span class=\"n\">disagree_flags2d</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">tile</span><span class=\"p\">(</span><span class=\"n\">disagree_flags1d</span><span class=\"p\">[:,</span> <span class=\"kc\">None</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">nCols</span><span class=\"p\">))</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">val</span><span class=\"p\">:</span>\n                <span class=\"c1\"># User asked for rows that agree</span>\n                <span class=\"n\">flags</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">logical_not</span><span class=\"p\">(</span><span class=\"n\">disagree_flags2d</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">flags</span> <span class=\"o\">=</span> <span class=\"n\">disagree_flags2d</span>\n            <span class=\"k\">return</span> <span class=\"n\">flags</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">cfg_scoresep</span><span class=\"p\">(</span><span class=\"n\">mat</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"n\">op</span><span class=\"p\">):</span>\n            <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">            Compares scores between different configs</span>\n\n<span class=\"sd\">            op = operator.ge</span>\n<span class=\"sd\">            is_success = prop2_mat[&#39;is_success&#39;]</span>\n<span class=\"sd\">            &quot;&quot;&quot;</span>\n            <span class=\"c1\">#import scipy.spatial.distance as spdist</span>\n            <span class=\"n\">nCols</span> <span class=\"o\">=</span> <span class=\"n\">mat</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"n\">pdistx</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">pdist_indicies</span><span class=\"p\">(</span><span class=\"n\">nCols</span><span class=\"p\">)</span>\n            <span class=\"n\">pdist_list</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">safe_pdist</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">mat</span><span class=\"p\">])</span>\n            <span class=\"n\">flags_list</span> <span class=\"o\">=</span> <span class=\"n\">op</span><span class=\"p\">(</span><span class=\"n\">pdist_list</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">)</span>\n            <span class=\"n\">colx_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">unique</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">pdistx</span><span class=\"p\">,</span> <span class=\"n\">flags</span><span class=\"p\">)))</span> <span class=\"k\">for</span> <span class=\"n\">flags</span> <span class=\"ow\">in</span> <span class=\"n\">flags_list</span><span class=\"p\">]</span>\n            <span class=\"n\">offsets</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">nCols</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">mat</span><span class=\"p\">),</span> <span class=\"n\">step</span><span class=\"o\">=</span><span class=\"n\">nCols</span><span class=\"p\">)</span>\n            <span class=\"n\">idx_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">([</span><span class=\"n\">colx</span> <span class=\"o\">+</span> <span class=\"n\">offset</span> <span class=\"k\">for</span> <span class=\"n\">colx</span><span class=\"p\">,</span> <span class=\"n\">offset</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">colx_list</span><span class=\"p\">,</span> <span class=\"n\">offsets</span><span class=\"p\">)])</span>\n            <span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">index_to_boolmask</span><span class=\"p\">(</span><span class=\"n\">idx_list</span><span class=\"p\">,</span> <span class=\"n\">maxval</span><span class=\"o\">=</span><span class=\"n\">offsets</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">nCols</span><span class=\"p\">)</span>\n            <span class=\"n\">flags</span> <span class=\"o\">=</span> <span class=\"n\">mask</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">(</span><span class=\"n\">mat</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">flags</span>\n\n        <span class=\"c1\"># List of rules that can filter results</span>\n        <span class=\"n\">rule_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;disagree&#39;</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"n\">cols_disagree</span><span class=\"p\">(</span><span class=\"n\">prop2_mat</span><span class=\"p\">[</span><span class=\"s1\">&#39;is_failure&#39;</span><span class=\"p\">],</span> <span class=\"n\">val</span><span class=\"p\">)),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;min_gt_cfg_scoresep&#39;</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"n\">cfg_scoresep</span><span class=\"p\">(</span><span class=\"n\">truth2_prop</span><span class=\"p\">[</span><span class=\"s1\">&#39;gt&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;score&#39;</span><span class=\"p\">],</span> <span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"n\">operator</span><span class=\"o\">.</span><span class=\"n\">ge</span><span class=\"p\">)),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;fail&#39;</span><span class=\"p\">,</span>     <span class=\"n\">prop2_mat</span><span class=\"p\">[</span><span class=\"s1\">&#39;is_failure&#39;</span><span class=\"p\">]),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;success&#39;</span><span class=\"p\">,</span>  <span class=\"n\">prop2_mat</span><span class=\"p\">[</span><span class=\"s1\">&#39;is_success&#39;</span><span class=\"p\">]),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;min_gtrank&#39;</span><span class=\"p\">,</span> <span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"n\">operator</span><span class=\"o\">.</span><span class=\"n\">ge</span><span class=\"p\">,</span> <span class=\"n\">truth2_prop</span><span class=\"p\">[</span><span class=\"s1\">&#39;gt&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;rank&#39;</span><span class=\"p\">])),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;max_gtrank&#39;</span><span class=\"p\">,</span> <span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"n\">operator</span><span class=\"o\">.</span><span class=\"n\">le</span><span class=\"p\">,</span> <span class=\"n\">truth2_prop</span><span class=\"p\">[</span><span class=\"s1\">&#39;gt&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;rank&#39;</span><span class=\"p\">])),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;max_gtscore&#39;</span><span class=\"p\">,</span> <span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"n\">operator</span><span class=\"o\">.</span><span class=\"n\">le</span><span class=\"p\">,</span> <span class=\"n\">truth2_prop</span><span class=\"p\">[</span><span class=\"s1\">&#39;gt&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;score&#39;</span><span class=\"p\">])),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;min_gtscore&#39;</span><span class=\"p\">,</span> <span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"n\">operator</span><span class=\"o\">.</span><span class=\"n\">ge</span><span class=\"p\">,</span> <span class=\"n\">truth2_prop</span><span class=\"p\">[</span><span class=\"s1\">&#39;gt&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;score&#39;</span><span class=\"p\">])),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;min_gf_timedelta&#39;</span><span class=\"p\">,</span> <span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"n\">operator</span><span class=\"o\">.</span><span class=\"n\">ge</span><span class=\"p\">,</span> <span class=\"n\">truth2_prop</span><span class=\"p\">[</span><span class=\"s1\">&#39;gf&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;timedelta&#39;</span><span class=\"p\">])),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;max_gf_timedelta&#39;</span><span class=\"p\">,</span> <span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"n\">operator</span><span class=\"o\">.</span><span class=\"n\">le</span><span class=\"p\">,</span> <span class=\"n\">truth2_prop</span><span class=\"p\">[</span><span class=\"s1\">&#39;gf&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;timedelta&#39;</span><span class=\"p\">])),</span>\n\n            <span class=\"c1\"># Tag filtering</span>\n            <span class=\"c1\"># FIXME: will break with new config structure</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;min_tags&#39;</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"n\">UTFF</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_all_tags</span><span class=\"p\">(),</span> <span class=\"n\">min_num</span><span class=\"o\">=</span><span class=\"n\">val</span><span class=\"p\">)),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;max_tags&#39;</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"n\">UTFF</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_all_tags</span><span class=\"p\">(),</span> <span class=\"n\">max_num</span><span class=\"o\">=</span><span class=\"n\">val</span><span class=\"p\">)),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;min_gf_tags&#39;</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"n\">UTFF</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_gf_tags</span><span class=\"p\">(),</span> <span class=\"n\">min_num</span><span class=\"o\">=</span><span class=\"n\">val</span><span class=\"p\">)),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;max_gf_tags&#39;</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"n\">UTFF</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_gf_tags</span><span class=\"p\">(),</span> <span class=\"n\">max_num</span><span class=\"o\">=</span><span class=\"n\">val</span><span class=\"p\">)),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;min_gt_tags&#39;</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"n\">UTFF</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_gt_tags</span><span class=\"p\">(),</span> <span class=\"n\">min_num</span><span class=\"o\">=</span><span class=\"n\">val</span><span class=\"p\">)),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;max_gt_tags&#39;</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"n\">UTFF</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_gt_tags</span><span class=\"p\">(),</span> <span class=\"n\">max_num</span><span class=\"o\">=</span><span class=\"n\">val</span><span class=\"p\">)),</span>\n\n            <span class=\"p\">(</span><span class=\"s1\">&#39;min_query_annot_tags&#39;</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"n\">UTFF</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_query_annot_tags</span><span class=\"p\">(),</span> <span class=\"n\">min_num</span><span class=\"o\">=</span><span class=\"n\">val</span><span class=\"p\">)),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;min_gt_annot_tags&#39;</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"n\">UTFF</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_gt_annot_tags</span><span class=\"p\">(),</span> <span class=\"n\">min_num</span><span class=\"o\">=</span><span class=\"n\">val</span><span class=\"p\">)),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;min_gtq_tags&#39;</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"n\">UTFF</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_gtquery_annot_tags</span><span class=\"p\">(),</span> <span class=\"n\">min_num</span><span class=\"o\">=</span><span class=\"n\">val</span><span class=\"p\">)),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;max_gtq_tags&#39;</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"n\">UTFF</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_gtquery_annot_tags</span><span class=\"p\">(),</span> <span class=\"n\">max_num</span><span class=\"o\">=</span><span class=\"n\">val</span><span class=\"p\">)),</span>\n\n            <span class=\"p\">(</span><span class=\"s1\">&#39;without_gf_tag&#39;</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"n\">UTFF</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_gf_tags</span><span class=\"p\">(),</span> <span class=\"n\">has_none</span><span class=\"o\">=</span><span class=\"n\">val</span><span class=\"p\">)),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;without_gt_tag&#39;</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"n\">UTFF</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_gt_tags</span><span class=\"p\">(),</span> <span class=\"n\">has_none</span><span class=\"o\">=</span><span class=\"n\">val</span><span class=\"p\">)),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;with_gf_tag&#39;</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"n\">UTFF</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_gf_tags</span><span class=\"p\">(),</span> <span class=\"n\">has_any</span><span class=\"o\">=</span><span class=\"n\">val</span><span class=\"p\">)),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;with_gt_tag&#39;</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"n\">UTFF</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_gt_tags</span><span class=\"p\">(),</span> <span class=\"n\">has_any</span><span class=\"o\">=</span><span class=\"n\">val</span><span class=\"p\">)),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;with_tag&#39;</span><span class=\"p\">,</span>    <span class=\"k\">lambda</span> <span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"n\">UTFF</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_all_tags</span><span class=\"p\">(),</span> <span class=\"n\">has_any</span><span class=\"o\">=</span><span class=\"n\">val</span><span class=\"p\">)),</span>\n            <span class=\"p\">(</span><span class=\"s1\">&#39;without_tag&#39;</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"n\">UTFF</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_all_tags</span><span class=\"p\">(),</span> <span class=\"n\">has_none</span><span class=\"o\">=</span><span class=\"n\">val</span><span class=\"p\">)),</span>\n        <span class=\"p\">]</span>\n        <span class=\"n\">rule_dict</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">odict</span><span class=\"p\">(</span><span class=\"n\">rule_list</span><span class=\"p\">)</span>\n        <span class=\"n\">rule_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"s1\">&#39;max_gf_td&#39;</span><span class=\"p\">,</span> <span class=\"n\">rule_dict</span><span class=\"p\">[</span><span class=\"s1\">&#39;max_gf_timedelta&#39;</span><span class=\"p\">]))</span>\n        <span class=\"n\">rule_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"s1\">&#39;min_gf_td&#39;</span><span class=\"p\">,</span> <span class=\"n\">rule_dict</span><span class=\"p\">[</span><span class=\"s1\">&#39;min_gf_timedelta&#39;</span><span class=\"p\">]))</span>\n\n        <span class=\"n\">filt_cfg_</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"n\">filt_cfg</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># hack to convert to seconds</span>\n        <span class=\"k\">for</span> <span class=\"n\">tdkey</span> <span class=\"ow\">in</span> <span class=\"n\">filt_cfg_</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">():</span>\n            <span class=\"c1\">#timedelta_keys = [&#39;min_gf_timedelta&#39;, &#39;max_gf_timedelta&#39;]</span>\n            <span class=\"c1\">#for tdkey in timedelta_keys:</span>\n            <span class=\"k\">if</span> <span class=\"n\">tdkey</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s1\">&#39;_timedelta&#39;</span><span class=\"p\">):</span>\n                <span class=\"n\">filt_cfg_</span><span class=\"p\">[</span><span class=\"n\">tdkey</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ensure_timedelta</span><span class=\"p\">(</span><span class=\"n\">filt_cfg_</span><span class=\"p\">[</span><span class=\"n\">tdkey</span><span class=\"p\">])</span>\n\n        <span class=\"k\">class</span> <span class=\"nc\">VerbFilterInfo</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n            <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">prev_num_valid</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n            <span class=\"k\">def</span> <span class=\"nf\">print_pre</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">is_valid</span><span class=\"p\">,</span> <span class=\"n\">filt_cfg_</span><span class=\"p\">):</span>\n                <span class=\"n\">num_valid</span> <span class=\"o\">=</span> <span class=\"n\">is_valid</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[testres] Sampling from is_valid.size=</span><span class=\"si\">%r</span><span class=\"s1\"> with filt=</span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span>\n                      <span class=\"p\">(</span><span class=\"n\">is_valid</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_cfg_lbl</span><span class=\"p\">(</span><span class=\"n\">filt_cfg_</span><span class=\"p\">)))</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;  * is_valid.shape = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">is_valid</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">,))</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;  * num_valid = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">num_valid</span><span class=\"p\">,))</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">prev_num_valid</span> <span class=\"o\">=</span> <span class=\"n\">num_valid</span>\n\n            <span class=\"k\">def</span> <span class=\"nf\">print_post</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">is_valid</span><span class=\"p\">,</span> <span class=\"n\">flags</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"p\">):</span>\n                <span class=\"k\">if</span> <span class=\"n\">flags</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                    <span class=\"n\">num_passed</span> <span class=\"o\">=</span> <span class=\"n\">flags</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span>\n                <span class=\"n\">num_valid</span> <span class=\"o\">=</span> <span class=\"n\">is_valid</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span>\n                <span class=\"n\">num_invalidated</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">prev_num_valid</span> <span class=\"o\">-</span> <span class=\"n\">num_valid</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">num_invalidated</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"n\">flags</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;  * num_passed = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">num_passed</span><span class=\"p\">,))</span>\n                    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;  * num_invalided = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">num_invalidated</span><span class=\"p\">,))</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;  * prev_num_valid = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">prev_num_valid</span><span class=\"p\">,))</span>\n                    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;  * num_valid = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">num_valid</span><span class=\"p\">,))</span>\n                    <span class=\"c1\">#print(&#39;  * is_valid.shape = %r&#39; % (is_valid.shape,))</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">prev_num_valid</span> <span class=\"o\">=</span> <span class=\"n\">num_valid</span>\n\n        <span class=\"n\">verbinfo</span> <span class=\"o\">=</span> <span class=\"n\">VerbFilterInfo</span><span class=\"p\">()</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">verbose</span><span class=\"p\">:</span>\n            <span class=\"n\">verbinfo</span><span class=\"o\">.</span><span class=\"n\">print_pre</span><span class=\"p\">(</span><span class=\"n\">is_valid</span><span class=\"p\">,</span> <span class=\"n\">filt_cfg_</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Pop irrelevant info</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">delete_keys</span><span class=\"p\">(</span><span class=\"n\">filt_cfg_</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">&#39;_cfgstr&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;_cfgindex&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;_cfgname&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;_cfgtype&#39;</span><span class=\"p\">])</span>\n        <span class=\"c1\"># Pop other non-rule config options</span>\n        <span class=\"n\">valid_rules</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">def</span> <span class=\"nf\">poprule</span><span class=\"p\">(</span><span class=\"n\">rulename</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"p\">):</span>\n            <span class=\"c1\"># register other rule names for debuging</span>\n            <span class=\"n\">valid_rules</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">rulename</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">filt_cfg_</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"n\">rulename</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"p\">)</span>\n        <span class=\"n\">allcfg</span> <span class=\"o\">=</span> <span class=\"n\">poprule</span><span class=\"p\">(</span><span class=\"s1\">&#39;allcfg&#39;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"n\">orderby</span> <span class=\"o\">=</span> <span class=\"n\">poprule</span><span class=\"p\">(</span><span class=\"s1\">&#39;orderby&#39;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"n\">reverse</span> <span class=\"o\">=</span> <span class=\"n\">poprule</span><span class=\"p\">(</span><span class=\"s1\">&#39;reverse&#39;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"n\">sortasc</span> <span class=\"o\">=</span> <span class=\"n\">poprule</span><span class=\"p\">(</span><span class=\"s1\">&#39;sortasc&#39;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"n\">sortdsc</span> <span class=\"o\">=</span> <span class=\"n\">poprule</span><span class=\"p\">(</span><span class=\"s1\">&#39;sortdsc&#39;</span><span class=\"p\">,</span> <span class=\"n\">poprule</span><span class=\"p\">(</span><span class=\"s1\">&#39;sortdesc&#39;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">))</span>\n        <span class=\"n\">max_pername</span> <span class=\"o\">=</span> <span class=\"n\">poprule</span><span class=\"p\">(</span><span class=\"s1\">&#39;max_pername&#39;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"n\">require_all_cfg</span> <span class=\"o\">=</span> <span class=\"n\">poprule</span><span class=\"p\">(</span><span class=\"s1\">&#39;require_all_cfg&#39;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">poprule</span><span class=\"p\">(</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Pop all chosen rules</span>\n        <span class=\"n\">rule_value_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">poprule</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">rule</span> <span class=\"ow\">in</span> <span class=\"n\">rule_list</span><span class=\"p\">]</span>\n\n        <span class=\"c1\"># Assert that only valid configurations were given</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">filt_cfg_</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;ERROR&#39;</span><span class=\"p\">)</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;filtcfg valid rules are = </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr2</span><span class=\"p\">(</span><span class=\"n\">valid_rules</span><span class=\"p\">,</span> <span class=\"n\">nl</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">),))</span>\n            <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">filt_cfg_</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">():</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;did you mean </span><span class=\"si\">%r</span><span class=\"s1\"> instead of </span><span class=\"si\">%r</span><span class=\"s1\">?&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">closet_words</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">valid_rules</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">key</span><span class=\"p\">))</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span><span class=\"s1\">&#39;Unhandled filt_cfg.keys() = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">filt_cfg_</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()))</span>\n\n        <span class=\"c1\"># Remove test cases that do not satisfy chosen rules</span>\n        <span class=\"n\">chosen_rule_idxs</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">([</span><span class=\"n\">val</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"k\">for</span> <span class=\"n\">val</span> <span class=\"ow\">in</span> <span class=\"n\">rule_value_list</span><span class=\"p\">])</span>\n        <span class=\"n\">chosen_rules</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">rule_list</span><span class=\"p\">,</span> <span class=\"n\">chosen_rule_idxs</span><span class=\"p\">)</span>\n        <span class=\"n\">chosen_vals</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">rule_value_list</span><span class=\"p\">,</span> <span class=\"n\">chosen_rule_idxs</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">rule</span><span class=\"p\">),</span> <span class=\"n\">val</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">chosen_rules</span><span class=\"p\">,</span> <span class=\"n\">chosen_vals</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">):</span>\n                <span class=\"c1\"># When a rule is an ndarray it must have boolean values</span>\n                <span class=\"n\">flags</span> <span class=\"o\">=</span> <span class=\"n\">rule</span> <span class=\"o\">==</span> <span class=\"n\">val</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">flags</span> <span class=\"o\">=</span> <span class=\"n\">rule</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">)</span>\n            <span class=\"c1\"># HACK: flags are forced to be false for non-participating cases</span>\n            <span class=\"n\">flags</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">logical_and</span><span class=\"p\">(</span><span class=\"n\">flags</span><span class=\"p\">,</span> <span class=\"n\">participates</span><span class=\"p\">)</span>\n            <span class=\"c1\"># conjunctive normal form of satisfiability</span>\n            <span class=\"n\">is_valid</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">logical_and</span><span class=\"p\">(</span><span class=\"n\">is_valid</span><span class=\"p\">,</span> <span class=\"n\">flags</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">verbose</span><span class=\"p\">:</span>\n                <span class=\"n\">verbinfo</span><span class=\"o\">.</span><span class=\"n\">print_post</span><span class=\"p\">(</span><span class=\"n\">is_valid</span><span class=\"p\">,</span> <span class=\"n\">flags</span><span class=\"p\">,</span> <span class=\"s1\">&#39;SampleRule: </span><span class=\"si\">%s</span><span class=\"s1\"> = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">))</span>\n\n        <span class=\"c1\"># HACK:</span>\n        <span class=\"c1\"># If one config for a row passes the filter then all configs should pass</span>\n        <span class=\"k\">if</span> <span class=\"n\">allcfg</span><span class=\"p\">:</span>\n            <span class=\"n\">is_valid</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">logical_or</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">logical_or</span><span class=\"o\">.</span><span class=\"n\">reduce</span><span class=\"p\">(</span><span class=\"n\">is_valid</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">)[:,</span> <span class=\"kc\">None</span><span class=\"p\">],</span> <span class=\"n\">is_valid</span><span class=\"p\">)</span>\n            <span class=\"n\">is_valid</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">logical_and</span><span class=\"p\">(</span><span class=\"n\">is_valid</span><span class=\"p\">,</span> <span class=\"n\">participates</span><span class=\"p\">)</span>\n\n        <span class=\"n\">qx_list</span><span class=\"p\">,</span> <span class=\"n\">cfgx_list</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nonzero</span><span class=\"p\">(</span><span class=\"n\">is_valid</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Determine a good ordering of the test cases</span>\n        <span class=\"k\">if</span> <span class=\"n\">sortdsc</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">assert</span> <span class=\"n\">orderby</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">&#39;use orderby or sortasc&#39;</span>\n            <span class=\"k\">assert</span> <span class=\"n\">reverse</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">&#39;reverse does not work with sortdsc&#39;</span>\n            <span class=\"n\">orderby</span> <span class=\"o\">=</span> <span class=\"n\">sortdsc</span>\n            <span class=\"n\">reverse</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"k\">elif</span> <span class=\"n\">sortasc</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">assert</span> <span class=\"n\">reverse</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">&#39;reverse does not work with sortasc&#39;</span>\n            <span class=\"k\">assert</span> <span class=\"n\">orderby</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">&#39;use orderby or sortasc&#39;</span>\n            <span class=\"n\">orderby</span> <span class=\"o\">=</span> <span class=\"n\">sortasc</span>\n            <span class=\"n\">reverse</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">reverse</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"k\">if</span> <span class=\"n\">orderby</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"c1\">#if orderby == &#39;gtscore&#39;:</span>\n            <span class=\"c1\">#    order_values = truth2_prop[&#39;gt&#39;][&#39;score&#39;]</span>\n            <span class=\"c1\">#elif orderby == &#39;gfscore&#39;:</span>\n            <span class=\"c1\">#    order_values = truth2_prop[&#39;gf&#39;][&#39;score&#39;]</span>\n            <span class=\"c1\">#else:</span>\n            <span class=\"kn\">import</span> <span class=\"nn\">re</span>\n            <span class=\"n\">order_values</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n            <span class=\"k\">for</span> <span class=\"n\">prefix_pattern</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s1\">&#39;^gt_?&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;^gf_?&#39;</span><span class=\"p\">]:</span>\n                <span class=\"n\">prefix_match</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"n\">prefix_pattern</span><span class=\"p\">,</span> <span class=\"n\">orderby</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">prefix_match</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                    <span class=\"n\">truth</span> <span class=\"o\">=</span> <span class=\"n\">prefix_pattern</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n                    <span class=\"n\">propname</span> <span class=\"o\">=</span> <span class=\"n\">orderby</span><span class=\"p\">[</span><span class=\"n\">prefix_match</span><span class=\"o\">.</span><span class=\"n\">end</span><span class=\"p\">():]</span>\n                    <span class=\"k\">if</span> <span class=\"n\">verbose</span><span class=\"p\">:</span>\n                        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Ordering by truth=</span><span class=\"si\">%s</span><span class=\"s1\"> propname=</span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">truth</span><span class=\"p\">,</span> <span class=\"n\">propname</span><span class=\"p\">))</span>\n                    <span class=\"n\">order_values</span> <span class=\"o\">=</span> <span class=\"n\">truth2_prop</span><span class=\"p\">[</span><span class=\"n\">truth</span><span class=\"p\">][</span><span class=\"n\">propname</span><span class=\"p\">]</span>\n                    <span class=\"k\">break</span>\n            <span class=\"k\">if</span> <span class=\"n\">order_values</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span><span class=\"s1\">&#39;Unknown orerby=</span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">orderby</span><span class=\"p\">,))</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">order_values</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"n\">is_valid</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">(</span><span class=\"n\">is_valid</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Convert mask into indicies</span>\n        <span class=\"n\">flat_order</span> <span class=\"o\">=</span> <span class=\"n\">order_values</span><span class=\"p\">[</span><span class=\"n\">is_valid</span><span class=\"p\">]</span>\n        <span class=\"c1\"># Flat sorting indeices in a matrix</span>\n        <span class=\"k\">if</span> <span class=\"n\">verbose</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">verbose</span><span class=\"p\">:</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Reversing ordering (descending)&#39;</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Normal ordering (ascending)&#39;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">reverse</span><span class=\"p\">:</span>\n            <span class=\"n\">sortx</span> <span class=\"o\">=</span> <span class=\"n\">flat_order</span><span class=\"o\">.</span><span class=\"n\">argsort</span><span class=\"p\">()[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">sortx</span> <span class=\"o\">=</span> <span class=\"n\">flat_order</span><span class=\"o\">.</span><span class=\"n\">argsort</span><span class=\"p\">()</span>\n        <span class=\"n\">qx_list</span> <span class=\"o\">=</span> <span class=\"n\">qx_list</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">sortx</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"n\">cfgx_list</span> <span class=\"o\">=</span> <span class=\"n\">cfgx_list</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">sortx</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Return at most ``max_pername`` annotation examples per name</span>\n        <span class=\"k\">if</span> <span class=\"n\">max_pername</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">verbose</span><span class=\"p\">:</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Returning at most </span><span class=\"si\">%d</span><span class=\"s1\"> cases per name &#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">max_pername</span><span class=\"p\">,))</span>\n            <span class=\"c1\"># FIXME: multiple configs</span>\n            <span class=\"n\">_qaid_list</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">qaids</span><span class=\"p\">,</span> <span class=\"n\">qx_list</span><span class=\"p\">)</span>\n            <span class=\"n\">_qnid_list</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_nids</span><span class=\"p\">(</span><span class=\"n\">_qaid_list</span><span class=\"p\">)</span>\n            <span class=\"n\">_valid_idxs</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"n\">seen_</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ddict</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">idx</span><span class=\"p\">,</span> <span class=\"n\">_qnid</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">_qnid_list</span><span class=\"p\">):</span>\n                <span class=\"k\">if</span> <span class=\"n\">seen_</span><span class=\"p\">[</span><span class=\"n\">_qnid</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">max_pername</span><span class=\"p\">:</span>\n                    <span class=\"n\">seen_</span><span class=\"p\">[</span><span class=\"n\">_qnid</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                    <span class=\"n\">_valid_idxs</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">idx</span><span class=\"p\">)</span>\n            <span class=\"n\">_qx_list</span> <span class=\"o\">=</span> <span class=\"n\">qx_list</span><span class=\"p\">[</span><span class=\"n\">_valid_idxs</span><span class=\"p\">]</span>\n            <span class=\"n\">_cfgx_list</span> <span class=\"o\">=</span> <span class=\"n\">cfgx_list</span><span class=\"p\">[</span><span class=\"n\">_valid_idxs</span><span class=\"p\">]</span>\n            <span class=\"n\">_valid_index</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">vstack</span><span class=\"p\">((</span><span class=\"n\">_qx_list</span><span class=\"p\">,</span> <span class=\"n\">_cfgx_list</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">T</span>\n            <span class=\"n\">is_valid</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">index_to_boolmask</span><span class=\"p\">(</span><span class=\"n\">_valid_index</span><span class=\"p\">,</span> <span class=\"n\">is_valid</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">,</span> <span class=\"n\">isflat</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n            <span class=\"n\">qx_list</span> <span class=\"o\">=</span> <span class=\"n\">_qx_list</span>\n            <span class=\"n\">cfgx_list</span> <span class=\"o\">=</span> <span class=\"n\">_cfgx_list</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">require_all_cfg</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">verbose</span><span class=\"p\">:</span>\n                <span class=\"n\">prev_num_valid</span> <span class=\"o\">=</span> <span class=\"n\">is_valid</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Enforcing that all configs must pass filters&#39;</span><span class=\"p\">)</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;  * prev_num_valid = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">prev_num_valid</span><span class=\"p\">,))</span>\n            <span class=\"n\">qx2_valid_cfgs</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">group_items</span><span class=\"p\">(</span><span class=\"n\">cfgx_list</span><span class=\"p\">,</span> <span class=\"n\">qx_list</span><span class=\"p\">)</span>\n            <span class=\"n\">hasall_cfg</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">qx2_valid_cfgs</span><span class=\"p\">[</span><span class=\"n\">qx</span><span class=\"p\">])</span> <span class=\"o\">==</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">nConfig</span> <span class=\"k\">for</span> <span class=\"n\">qx</span> <span class=\"ow\">in</span> <span class=\"n\">qx_list</span><span class=\"p\">]</span>\n            <span class=\"n\">_qx_list</span> <span class=\"o\">=</span> <span class=\"n\">qx_list</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">hasall_cfg</span><span class=\"p\">)</span>\n            <span class=\"n\">_cfgx_list</span> <span class=\"o\">=</span> <span class=\"n\">cfgx_list</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">hasall_cfg</span><span class=\"p\">)</span>\n            <span class=\"n\">_valid_index</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">vstack</span><span class=\"p\">((</span><span class=\"n\">_qx_list</span><span class=\"p\">,</span> <span class=\"n\">_cfgx_list</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">T</span>\n            <span class=\"n\">is_valid</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">index_to_boolmask</span><span class=\"p\">(</span><span class=\"n\">_valid_index</span><span class=\"p\">,</span> <span class=\"n\">is_valid</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">,</span> <span class=\"n\">isflat</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n            <span class=\"n\">qx_list</span> <span class=\"o\">=</span> <span class=\"n\">_qx_list</span>\n            <span class=\"n\">cfgx_list</span> <span class=\"o\">=</span> <span class=\"n\">_cfgx_list</span>\n            <span class=\"k\">if</span> <span class=\"n\">verbose</span><span class=\"p\">:</span>\n                <span class=\"n\">verbinfo</span><span class=\"o\">.</span><span class=\"n\">print_post</span><span class=\"p\">(</span><span class=\"n\">is_valid</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n                                    <span class=\"s1\">&#39;Enforcing that all configs must pass filters&#39;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">index</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">six</span><span class=\"o\">.</span><span class=\"n\">string_types</span><span class=\"p\">):</span>\n                <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">smart_cast</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"nb\">slice</span><span class=\"p\">)</span>\n            <span class=\"n\">_qx_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">qx_list</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"p\">)</span>\n            <span class=\"n\">_cfgx_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">cfgx_list</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"p\">)</span>\n            <span class=\"n\">_valid_index</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">vstack</span><span class=\"p\">((</span><span class=\"n\">_qx_list</span><span class=\"p\">,</span> <span class=\"n\">_cfgx_list</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">T</span>\n            <span class=\"n\">is_valid</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">index_to_boolmask</span><span class=\"p\">(</span><span class=\"n\">_valid_index</span><span class=\"p\">,</span> <span class=\"n\">is_valid</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">,</span> <span class=\"n\">isflat</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n            <span class=\"n\">qx_list</span> <span class=\"o\">=</span> <span class=\"n\">_qx_list</span>\n            <span class=\"n\">cfgx_list</span> <span class=\"o\">=</span> <span class=\"n\">_cfgx_list</span>\n            <span class=\"k\">if</span> <span class=\"n\">verbose</span><span class=\"p\">:</span>\n                <span class=\"n\">verbinfo</span><span class=\"o\">.</span><span class=\"n\">print_post</span><span class=\"p\">(</span>\n                    <span class=\"n\">is_valid</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;Taking index=</span><span class=\"si\">%r</span><span class=\"s1\"> sample from len(qx_list) = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span>\n                        <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">qx_list</span><span class=\"p\">),))</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">return_mask</span><span class=\"p\">:</span>\n            <span class=\"n\">case_pos_list</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">vstack</span><span class=\"p\">((</span><span class=\"n\">qx_list</span><span class=\"p\">,</span> <span class=\"n\">cfgx_list</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">T</span>\n            <span class=\"n\">case_identifier</span> <span class=\"o\">=</span> <span class=\"n\">case_pos_list</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">verbose</span><span class=\"p\">:</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Converting cases indicies to a 2d-mask&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">case_identifier</span> <span class=\"o\">=</span> <span class=\"n\">is_valid</span>\n        <span class=\"k\">if</span> <span class=\"n\">verbose</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Finished case filtering&#39;</span><span class=\"p\">)</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Final case stats:&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">qx_hist</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dict_hist</span><span class=\"p\">(</span><span class=\"n\">qx_list</span><span class=\"p\">)</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;config per query stats: </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_stats_str</span><span class=\"p\">(</span><span class=\"n\">qx_hist</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()),))</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;query per config stats: </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_stats_str</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dict_hist</span><span class=\"p\">(</span><span class=\"n\">cfgx_list</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()),))</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">case_identifier</span></div>\n\n<div class=\"viewcode-block\" id=\"TestResult.get_truth2_prop\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.get_truth2_prop\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_truth2_prop</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">,</span> <span class=\"n\">qaids</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">join_acfg</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Returns:</span>\n<span class=\"sd\">            tuple: (truth2_prop, prop2_mat)</span>\n\n<span class=\"sd\">        CommandLine:</span>\n<span class=\"sd\">            python -m ibeis.expt.test_result --exec-get_truth2_prop --show</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.expt.test_result import *  # NOQA</span>\n<span class=\"sd\">            &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">            &gt;&gt;&gt; ibs, testres = ibeis.testdata_expts(&#39;PZ_MTEST&#39;, a=[&#39;ctrl&#39;])</span>\n<span class=\"sd\">            &gt;&gt;&gt; (truth2_prop, prop2_mat) = testres.get_truth2_prop()</span>\n<span class=\"sd\">            &gt;&gt;&gt; result = &#39;(truth2_prop, prop2_mat) = %s&#39; % str((truth2_prop, prop2_mat))</span>\n<span class=\"sd\">            &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">            &gt;&gt;&gt; ut.quit_if_noshow()</span>\n<span class=\"sd\">            &gt;&gt;&gt; import plottool as pt</span>\n<span class=\"sd\">            &gt;&gt;&gt; ut.show_if_requested()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">ibs</span>\n        <span class=\"n\">test_qaids</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_test_qaids</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">qaids</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"k\">else</span> <span class=\"n\">qaids</span>\n\n        <span class=\"c1\">#test_qaids = ut.random_sample(test_qaids, 20)</span>\n        <span class=\"n\">truth2_prop</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ddict</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">odict</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># TODO: have this function take in a case_pos_list as input instead</span>\n        <span class=\"n\">participates</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_infoprop_mat</span><span class=\"p\">(</span><span class=\"s1\">&#39;participant&#39;</span><span class=\"p\">,</span> <span class=\"n\">test_qaids</span><span class=\"p\">)</span>\n\n        <span class=\"n\">truth2_prop</span><span class=\"p\">[</span><span class=\"s1\">&#39;gt&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;aid&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_infoprop_mat</span><span class=\"p\">(</span><span class=\"s1\">&#39;qx2_gt_aid&#39;</span><span class=\"p\">,</span> <span class=\"n\">test_qaids</span><span class=\"p\">)</span>\n        <span class=\"n\">truth2_prop</span><span class=\"p\">[</span><span class=\"s1\">&#39;gf&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;aid&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_infoprop_mat</span><span class=\"p\">(</span><span class=\"s1\">&#39;qx2_gf_aid&#39;</span><span class=\"p\">,</span> <span class=\"n\">test_qaids</span><span class=\"p\">)</span>\n        <span class=\"n\">truth2_prop</span><span class=\"p\">[</span><span class=\"s1\">&#39;gt&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;rank&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_infoprop_mat</span><span class=\"p\">(</span><span class=\"s1\">&#39;qx2_gt_rank&#39;</span><span class=\"p\">,</span> <span class=\"n\">test_qaids</span><span class=\"p\">)</span>\n        <span class=\"n\">truth2_prop</span><span class=\"p\">[</span><span class=\"s1\">&#39;gf&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;rank&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_infoprop_mat</span><span class=\"p\">(</span><span class=\"s1\">&#39;qx2_gf_rank&#39;</span><span class=\"p\">,</span> <span class=\"n\">test_qaids</span><span class=\"p\">)</span>\n\n        <span class=\"n\">truth2_prop</span><span class=\"p\">[</span><span class=\"s1\">&#39;gt&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;score&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_infoprop_mat</span><span class=\"p\">(</span>\n            <span class=\"s1\">&#39;qx2_gt_raw_score&#39;</span><span class=\"p\">,</span> <span class=\"n\">test_qaids</span><span class=\"p\">)</span>\n        <span class=\"n\">truth2_prop</span><span class=\"p\">[</span><span class=\"s1\">&#39;gf&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;score&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_infoprop_mat</span><span class=\"p\">(</span>\n            <span class=\"s1\">&#39;qx2_gf_raw_score&#39;</span><span class=\"p\">,</span> <span class=\"n\">test_qaids</span><span class=\"p\">)</span>\n        <span class=\"n\">truth2_prop</span><span class=\"p\">[</span><span class=\"s1\">&#39;gt&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;score&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan_to_num</span><span class=\"p\">(</span><span class=\"n\">truth2_prop</span><span class=\"p\">[</span><span class=\"s1\">&#39;gt&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;score&#39;</span><span class=\"p\">])</span>\n        <span class=\"n\">truth2_prop</span><span class=\"p\">[</span><span class=\"s1\">&#39;gf&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;score&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan_to_num</span><span class=\"p\">(</span><span class=\"n\">truth2_prop</span><span class=\"p\">[</span><span class=\"s1\">&#39;gf&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;score&#39;</span><span class=\"p\">])</span>\n\n        <span class=\"c1\"># Cast nans to ints (that are participants)</span>\n        <span class=\"c1\"># if False:</span>\n        <span class=\"k\">for</span> <span class=\"n\">truth</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s1\">&#39;gt&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;gf&#39;</span><span class=\"p\">]:</span>\n            <span class=\"n\">rank_mat</span> <span class=\"o\">=</span> <span class=\"n\">truth2_prop</span><span class=\"p\">[</span><span class=\"n\">truth</span><span class=\"p\">][</span><span class=\"s1\">&#39;rank&#39;</span><span class=\"p\">]</span>\n            <span class=\"n\">flags</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">logical_and</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">isnan</span><span class=\"p\">(</span><span class=\"n\">rank_mat</span><span class=\"p\">),</span> <span class=\"n\">participates</span><span class=\"p\">)</span>\n            <span class=\"n\">rank_mat</span><span class=\"p\">[</span><span class=\"n\">flags</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_worst_possible_rank</span><span class=\"p\">()</span>\n            <span class=\"c1\"># truth2_prop[truth][&#39;rank&#39;] = rank_mat.astype(np.int)</span>\n\n        <span class=\"n\">is_success</span> <span class=\"o\">=</span> <span class=\"n\">truth2_prop</span><span class=\"p\">[</span><span class=\"s1\">&#39;gt&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;rank&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n        <span class=\"n\">is_failure</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">logical_not</span><span class=\"p\">(</span><span class=\"n\">is_success</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># THIS IS NOT THE CASE IF THERE ARE UNKNOWN INDIVIDUALS IN THE DATABASE</span>\n        <span class=\"k\">assert</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">(</span><span class=\"n\">is_success</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"n\">truth2_prop</span><span class=\"p\">[</span><span class=\"s1\">&#39;gt&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;rank&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n\n        <span class=\"c1\"># WEIRD THINGS HAPPEN WHEN UNKNOWNS ARE HERE</span>\n        <span class=\"c1\">#hardness_degree_rank[is_success]</span>\n        <span class=\"c1\"># These probably just completely failure spatial verification</span>\n        <span class=\"c1\">#is_weird = hardness_degree_rank == 0</span>\n\n        <span class=\"c1\"># Get timedelta and annotmatch rowid</span>\n        <span class=\"k\">for</span> <span class=\"n\">truth</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s1\">&#39;gt&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;gf&#39;</span><span class=\"p\">]:</span>\n            <span class=\"n\">aid_mat</span> <span class=\"o\">=</span> <span class=\"n\">truth2_prop</span><span class=\"p\">[</span><span class=\"n\">truth</span><span class=\"p\">][</span><span class=\"s1\">&#39;aid&#39;</span><span class=\"p\">]</span>\n            <span class=\"n\">timedelta_mat</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">vstack</span><span class=\"p\">([</span>\n                <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_pair_timedelta</span><span class=\"p\">(</span><span class=\"n\">test_qaids</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"p\">)</span>\n                <span class=\"k\">for</span> <span class=\"n\">aids</span> <span class=\"ow\">in</span> <span class=\"n\">aid_mat</span><span class=\"o\">.</span><span class=\"n\">T</span>\n            <span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">T</span>\n            <span class=\"n\">annotmatch_rowid_mat</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">vstack</span><span class=\"p\">([</span>\n                <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annotmatch_rowid_from_undirected_superkey</span><span class=\"p\">(</span><span class=\"n\">test_qaids</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"p\">)</span>\n                <span class=\"k\">for</span> <span class=\"n\">aids</span> <span class=\"ow\">in</span> <span class=\"n\">aid_mat</span><span class=\"o\">.</span><span class=\"n\">T</span>\n            <span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">T</span>\n            <span class=\"n\">truth2_prop</span><span class=\"p\">[</span><span class=\"n\">truth</span><span class=\"p\">][</span><span class=\"s1\">&#39;annotmatch_rowid&#39;</span><span class=\"p\">]</span>  <span class=\"o\">=</span> <span class=\"n\">annotmatch_rowid_mat</span>\n            <span class=\"n\">truth2_prop</span><span class=\"p\">[</span><span class=\"n\">truth</span><span class=\"p\">][</span><span class=\"s1\">&#39;timedelta&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">timedelta_mat</span>\n        <span class=\"n\">prop2_mat</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n        <span class=\"n\">prop2_mat</span><span class=\"p\">[</span><span class=\"s1\">&#39;is_success&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">is_success</span>\n        <span class=\"n\">prop2_mat</span><span class=\"p\">[</span><span class=\"s1\">&#39;is_failure&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">is_failure</span>\n        <span class=\"n\">prop2_mat</span><span class=\"p\">[</span><span class=\"s1\">&#39;participates&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">participates</span>\n\n        <span class=\"n\">groupxs</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_cfgx_groupxs</span><span class=\"p\">()</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">group_prop</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"n\">grouped_flags</span><span class=\"p\">,</span> <span class=\"n\">groupxs</span><span class=\"p\">):</span>\n            <span class=\"n\">nRows</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">)</span>\n            <span class=\"c1\"># Allocate space for new val</span>\n            <span class=\"n\">new_shape</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">nRows</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">groupxs</span><span class=\"p\">))</span>\n            <span class=\"k\">if</span> <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">dtype</span> <span class=\"o\">==</span> <span class=\"nb\">object</span> <span class=\"ow\">or</span> <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">==</span> <span class=\"nb\">object</span><span class=\"p\">:</span>\n                <span class=\"n\">new_val</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">full</span><span class=\"p\">(</span><span class=\"n\">new_shape</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">)</span>\n            <span class=\"k\">elif</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">is_float</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">):</span>\n                <span class=\"n\">new_val</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">full</span><span class=\"p\">(</span><span class=\"n\">new_shape</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">new_val</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"n\">new_shape</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">)</span>\n            <span class=\"c1\"># Populate new val</span>\n            <span class=\"n\">grouped_vals</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">apply_grouping</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">groupxs</span><span class=\"p\">)</span>\n            <span class=\"n\">_iter</span> <span class=\"o\">=</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">grouped_flags</span><span class=\"p\">,</span> <span class=\"n\">grouped_vals</span><span class=\"p\">))</span>\n            <span class=\"k\">for</span> <span class=\"n\">new_col</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">flags</span><span class=\"p\">,</span> <span class=\"n\">group</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"n\">_iter</span><span class=\"p\">:</span>\n                <span class=\"n\">rows</span><span class=\"p\">,</span> <span class=\"n\">cols</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">flags</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">)</span>\n                <span class=\"n\">new_val</span><span class=\"p\">[</span><span class=\"n\">rows</span><span class=\"p\">,</span> <span class=\"n\">new_col</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">group</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">[(</span><span class=\"n\">rows</span><span class=\"p\">,</span> <span class=\"n\">cols</span><span class=\"p\">)]</span>\n            <span class=\"k\">return</span> <span class=\"n\">new_val</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">join_acfg</span><span class=\"p\">:</span>\n            <span class=\"k\">assert</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">allsame</span><span class=\"p\">(</span><span class=\"n\">participates</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n            <span class=\"n\">grouped_flags</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">apply_grouping</span><span class=\"p\">(</span><span class=\"n\">participates</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">groupxs</span><span class=\"p\">)</span>\n\n            <span class=\"c1\">#new_prop2_mat = {key: group_prop(val)</span>\n            <span class=\"c1\">#                 for key, val in prop2_mat.items()}</span>\n            <span class=\"c1\">#new_truth2_prop = {</span>\n            <span class=\"c1\">#    truth: {key: group_prop(val)</span>\n            <span class=\"c1\">#            for key, val in props.items()}</span>\n            <span class=\"c1\">#    for truth, props in truth2_prop.items()}</span>\n\n            <span class=\"n\">new_prop2_mat</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n            <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">val</span> <span class=\"ow\">in</span> <span class=\"n\">prop2_mat</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n                <span class=\"n\">new_prop2_mat</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">group_prop</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"n\">grouped_flags</span><span class=\"p\">,</span> <span class=\"n\">groupxs</span><span class=\"p\">)</span>\n\n            <span class=\"n\">new_truth2_prop</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n            <span class=\"k\">for</span> <span class=\"n\">truth</span><span class=\"p\">,</span> <span class=\"n\">props</span> <span class=\"ow\">in</span> <span class=\"n\">truth2_prop</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n                <span class=\"n\">new_props</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n                <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">val</span> <span class=\"ow\">in</span> <span class=\"n\">props</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n                    <span class=\"n\">new_props</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">group_prop</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"n\">grouped_flags</span><span class=\"p\">,</span> <span class=\"n\">groupxs</span><span class=\"p\">)</span>\n                <span class=\"n\">new_truth2_prop</span><span class=\"p\">[</span><span class=\"n\">truth</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">new_props</span>\n\n            <span class=\"n\">prop2_mat_</span> <span class=\"o\">=</span> <span class=\"n\">new_prop2_mat</span>\n            <span class=\"n\">truth2_prop_</span> <span class=\"o\">=</span> <span class=\"n\">new_truth2_prop</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">prop2_mat_</span> <span class=\"o\">=</span> <span class=\"n\">prop2_mat</span>\n            <span class=\"n\">truth2_prop_</span> <span class=\"o\">=</span> <span class=\"n\">truth2_prop</span>\n        <span class=\"k\">return</span> <span class=\"n\">truth2_prop_</span><span class=\"p\">,</span> <span class=\"n\">prop2_mat_</span></div>\n\n<div class=\"viewcode-block\" id=\"TestResult.interact_individual_result\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.interact_individual_result\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">interact_individual_result</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">,</span> <span class=\"n\">qaid</span><span class=\"p\">,</span> <span class=\"n\">cfgx</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">):</span>\n        <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">ibs</span>\n        <span class=\"n\">cfgx_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ensure_iterable</span><span class=\"p\">(</span><span class=\"n\">cfgx</span><span class=\"p\">)</span>\n        <span class=\"n\">qreq_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_qreq_</span><span class=\"p\">,</span> <span class=\"n\">cfgx_list</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Preload any requested configs</span>\n        <span class=\"n\">cm_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">qaids</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">qaid</span><span class=\"p\">])</span> <span class=\"k\">for</span> <span class=\"n\">qreq_</span> <span class=\"ow\">in</span> <span class=\"n\">qreq_list</span><span class=\"p\">]</span>\n        <span class=\"n\">cfgx2_shortlbl</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_short_cfglbls</span><span class=\"p\">()</span>\n        <span class=\"n\">show_kwargs</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;N&#39;</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;ori&#39;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;ell_alpha&#39;</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"mi\">9</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n        <span class=\"c1\"># SHOW ANALYSIS</span>\n        <span class=\"n\">show_kwargs</span><span class=\"p\">[</span><span class=\"s1\">&#39;show_query&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"n\">show_kwargs</span><span class=\"p\">[</span><span class=\"s1\">&#39;viz_name_score&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"n\">show_kwargs</span><span class=\"p\">[</span><span class=\"s1\">&#39;show_timedelta&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"n\">show_kwargs</span><span class=\"p\">[</span><span class=\"s1\">&#39;show_gf&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"n\">show_kwargs</span><span class=\"p\">[</span><span class=\"s1\">&#39;with_figtitle&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"k\">for</span> <span class=\"n\">cfgx</span><span class=\"p\">,</span> <span class=\"n\">cm</span><span class=\"p\">,</span> <span class=\"n\">qreq_</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">cfgx_list</span><span class=\"p\">,</span> <span class=\"n\">cm_list</span><span class=\"p\">,</span> <span class=\"n\">qreq_list</span><span class=\"p\">):</span>\n            <span class=\"n\">query_lbl</span> <span class=\"o\">=</span> <span class=\"n\">cfgx2_shortlbl</span><span class=\"p\">[</span><span class=\"n\">cfgx</span><span class=\"p\">]</span>\n            <span class=\"n\">fnum</span> <span class=\"o\">=</span> <span class=\"n\">cfgx</span>\n            <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">ishow_analysis</span><span class=\"p\">(</span>\n                <span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">figtitle</span><span class=\"o\">=</span><span class=\"n\">query_lbl</span><span class=\"p\">,</span> <span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"n\">fnum</span><span class=\"p\">,</span> <span class=\"n\">annot_mode</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">qreq_</span><span class=\"o\">=</span><span class=\"n\">qreq_</span><span class=\"p\">,</span>\n                <span class=\"o\">**</span><span class=\"n\">show_kwargs</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"TestResult.draw_score_diff_disti\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.draw_score_diff_disti\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">draw_score_diff_disti</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">):</span>\n        <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n\n<span class=\"sd\">        CommandLine:</span>\n<span class=\"sd\">            python -m ibeis --tf TestResult.draw_score_diff_disti --show -a varynannots_td -t best --db PZ_Master1</span>\n<span class=\"sd\">            python -m ibeis --tf TestResult.draw_score_diff_disti --show -a varynannots_td -t best --db GZ_Master1</span>\n<span class=\"sd\">            python -m ibeis --tf TestResult.draw_score_diff_disti --show -a varynannots_td1h -t best --db GIRM_Master1</span>\n\n<span class=\"sd\">            python -m ibeis --tf TestResult.draw_score_diff_disti --show -a varynannots_td:qmin_pername=3,dpername=2 -t best --db PZ_Master1</span>\n\n<span class=\"sd\">            python -m ibeis --tf get_annotcfg_list -a varynannots_td -t best --db PZ_Master1</span>\n<span class=\"sd\">            13502</span>\n<span class=\"sd\">            python -m ibeis --tf draw_match_cases --db PZ_Master1 -a varynannots_td:dsample_size=.01 -t best  --show --qaid 13502</span>\n<span class=\"sd\">            python -m ibeis --tf draw_match_cases --db PZ_Master1 -a varynannots_td -t best  --show</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.expt.test_result import *  # NOQA</span>\n<span class=\"sd\">            &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">            &gt;&gt;&gt; ibs, testres = ibeis.testdata_expts(&#39;PZ_Master1&#39;, a=[&#39;varynannots_td&#39;], t=[&#39;best&#39;])</span>\n<span class=\"sd\">            &gt;&gt;&gt; result = testres.draw_score_diff_disti()</span>\n<span class=\"sd\">            &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">            &gt;&gt;&gt; ut.show_if_requested()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">plottool</span> <span class=\"k\">as</span> <span class=\"nn\">pt</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">vtool</span> <span class=\"k\">as</span> <span class=\"nn\">vt</span>\n\n        <span class=\"c1\"># dont look at filtered cases</span>\n        <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">ibs</span>\n        <span class=\"n\">qaids</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_test_qaids</span><span class=\"p\">()</span>\n        <span class=\"n\">qaids</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_tag_filterflags</span><span class=\"p\">(</span><span class=\"n\">qaids</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;has_none&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;timedeltaerror&#39;</span><span class=\"p\">})</span>\n\n        <span class=\"n\">gt_rawscore</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_infoprop_mat</span><span class=\"p\">(</span><span class=\"s1\">&#39;qx2_gt_raw_score&#39;</span><span class=\"p\">,</span> <span class=\"n\">qaids</span><span class=\"o\">=</span><span class=\"n\">qaids</span><span class=\"p\">)</span>\n        <span class=\"n\">gf_rawscore</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_infoprop_mat</span><span class=\"p\">(</span><span class=\"s1\">&#39;qx2_gf_raw_score&#39;</span><span class=\"p\">,</span> <span class=\"n\">qaids</span><span class=\"o\">=</span><span class=\"n\">qaids</span><span class=\"p\">)</span>\n\n        <span class=\"n\">gt_valid_flags_list</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">isfinite</span><span class=\"p\">(</span><span class=\"n\">gt_rawscore</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">T</span>\n        <span class=\"n\">gf_valid_flags_list</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">isfinite</span><span class=\"p\">(</span><span class=\"n\">gf_rawscore</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">T</span>\n\n        <span class=\"n\">cfgx2_gt_scores</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">zipcompress</span><span class=\"p\">(</span><span class=\"n\">gt_rawscore</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">gt_valid_flags_list</span><span class=\"p\">)</span>\n        <span class=\"n\">cfgx2_gf_scores</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">zipcompress</span><span class=\"p\">(</span><span class=\"n\">gf_rawscore</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">gf_valid_flags_list</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># partition by rank</span>\n        <span class=\"n\">gt_rank</span>     <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_infoprop_mat</span><span class=\"p\">(</span><span class=\"s1\">&#39;qx2_gt_rank&#39;</span><span class=\"p\">,</span> <span class=\"n\">qaids</span><span class=\"o\">=</span><span class=\"n\">qaids</span><span class=\"p\">)</span>\n        <span class=\"n\">gf_ranks</span>    <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_infoprop_mat</span><span class=\"p\">(</span><span class=\"s1\">&#39;qx2_gf_rank&#39;</span><span class=\"p\">,</span> <span class=\"n\">qaids</span><span class=\"o\">=</span><span class=\"n\">qaids</span><span class=\"p\">)</span>\n        <span class=\"n\">cfgx2_gt_ranks</span>  <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">zipcompress</span><span class=\"p\">(</span><span class=\"n\">gt_rank</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">,</span>     <span class=\"n\">gt_valid_flags_list</span><span class=\"p\">)</span>\n        <span class=\"n\">cfgx2_rank0_gt_scores</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">zipcompress</span><span class=\"p\">(</span><span class=\"n\">cfgx2_gt_scores</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">ranks</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"k\">for</span> <span class=\"n\">ranks</span> <span class=\"ow\">in</span> <span class=\"n\">cfgx2_gt_ranks</span><span class=\"p\">])</span>\n        <span class=\"n\">cfgx2_rankX_gt_scores</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">zipcompress</span><span class=\"p\">(</span><span class=\"n\">cfgx2_gt_scores</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">ranks</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"k\">for</span> <span class=\"n\">ranks</span> <span class=\"ow\">in</span> <span class=\"n\">cfgx2_gt_ranks</span><span class=\"p\">])</span>\n        <span class=\"n\">cfgx2_gf_ranks</span>  <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">zipcompress</span><span class=\"p\">(</span><span class=\"n\">gf_ranks</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">,</span>    <span class=\"n\">gf_valid_flags_list</span><span class=\"p\">)</span>\n        <span class=\"n\">cfgx2_rank0_gf_scores</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">zipcompress</span><span class=\"p\">(</span><span class=\"n\">cfgx2_gf_scores</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">ranks</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"k\">for</span> <span class=\"n\">ranks</span> <span class=\"ow\">in</span> <span class=\"n\">cfgx2_gf_ranks</span><span class=\"p\">])</span>\n\n        <span class=\"c1\">#valid_gtranks = gt_rank[isvalid]</span>\n        <span class=\"c1\">#valid_qaids = qaids[isvalid]</span>\n        <span class=\"c1\"># Hack remove timedelta error</span>\n        <span class=\"c1\">#valid_qaids = valid_qaids[flags]</span>\n        <span class=\"c1\">#valid_gt_rawscore = valid_gt_rawscore[flags]</span>\n        <span class=\"c1\">#valid_gtranks = valid_gtranks[flags]</span>\n\n        <span class=\"n\">xdata</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">,</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_daids</span><span class=\"p\">))</span>\n\n        <span class=\"n\">USE_MEDIAN</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>  <span class=\"c1\"># not ut.get_argflag(&#39;--use-mean&#39;)</span>\n        <span class=\"c1\">#USE_LOG = True</span>\n        <span class=\"n\">USE_LOG</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"k\">if</span> <span class=\"n\">USE_MEDIAN</span><span class=\"p\">:</span>\n            <span class=\"n\">ave</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">median</span>\n            <span class=\"n\">dev</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">median_abs_dev</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">ave</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">mean</span>\n            <span class=\"n\">dev</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">std</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">make_interval_args</span><span class=\"p\">(</span><span class=\"n\">arr_list</span><span class=\"p\">,</span> <span class=\"n\">ave</span><span class=\"o\">=</span><span class=\"n\">ave</span><span class=\"p\">,</span> <span class=\"n\">dev</span><span class=\"o\">=</span><span class=\"n\">dev</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n            <span class=\"c1\">#if not USE_MEDIAN:</span>\n            <span class=\"c1\">#    # maybe approximate median by removing the most extreme values</span>\n            <span class=\"c1\">#    arr_list = [np.array(sorted(arr))[5:-5] for arr in arr_list]</span>\n            <span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n            <span class=\"k\">if</span> <span class=\"n\">USE_LOG</span><span class=\"p\">:</span>\n                <span class=\"n\">arr_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">arr_list</span><span class=\"p\">))</span>\n            <span class=\"n\">sizes_</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">,</span> <span class=\"n\">arr_list</span><span class=\"p\">))</span>\n            <span class=\"n\">ydata_</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"n\">ave</span><span class=\"p\">,</span> <span class=\"n\">arr_list</span><span class=\"p\">))</span>\n            <span class=\"n\">spread_</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"n\">dev</span><span class=\"p\">,</span> <span class=\"n\">arr_list</span><span class=\"p\">))</span>\n            <span class=\"c1\">#ut.get_stats(arr_list, axis=0)</span>\n            <span class=\"n\">label</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;label&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">label</span> <span class=\"o\">+=</span> <span class=\"s1\">&#39; &#39;</span> <span class=\"o\">+</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_funcname</span><span class=\"p\">(</span><span class=\"n\">ave</span><span class=\"p\">)</span>\n            <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s1\">&#39;label&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">label</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">label</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;score stats : &#39;</span> <span class=\"o\">+</span>\n                  <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr2</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_jagged_stats</span><span class=\"p\">(</span><span class=\"n\">arr_list</span><span class=\"p\">,</span> <span class=\"n\">use_median</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">),</span> <span class=\"n\">nl</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">precision</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n            <span class=\"k\">return</span> <span class=\"n\">ydata_</span><span class=\"p\">,</span> <span class=\"n\">spread_</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span><span class=\"p\">,</span> <span class=\"n\">sizes_</span>\n\n        <span class=\"n\">args_list1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"n\">make_interval_args</span><span class=\"p\">(</span><span class=\"n\">cfgx2_gt_scores</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">&#39;GT&#39;</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">TRUE_BLUE</span><span class=\"p\">),</span>\n            <span class=\"n\">make_interval_args</span><span class=\"p\">(</span><span class=\"n\">cfgx2_gf_scores</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">&#39;GF&#39;</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">FALSE_RED</span><span class=\"p\">),</span>\n        <span class=\"p\">]</span>\n\n        <span class=\"n\">args_list2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"n\">make_interval_args</span><span class=\"p\">(</span><span class=\"n\">cfgx2_rank0_gt_scores</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">&#39;GT-rank = 0&#39;</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">LIGHT_GREEN</span><span class=\"p\">),</span>\n            <span class=\"n\">make_interval_args</span><span class=\"p\">(</span><span class=\"n\">cfgx2_rankX_gt_scores</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">&#39;GT-rank &gt; 0&#39;</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">YELLOW</span><span class=\"p\">),</span>\n            <span class=\"n\">make_interval_args</span><span class=\"p\">(</span><span class=\"n\">cfgx2_rank0_gf_scores</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">&#39;GF-rank = 0&#39;</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">PINK</span><span class=\"p\">),</span>\n            <span class=\"c1\">#make_interval_args(cfgx2_rank2_gt_scores, label=&#39;gtrank &lt; 2&#39;),</span>\n        <span class=\"p\">]</span>\n\n        <span class=\"n\">plotargs_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">args_list1</span><span class=\"p\">,</span> <span class=\"n\">args_list2</span><span class=\"p\">]</span>\n        <span class=\"c1\">#plotargs_list = [args_list1]</span>\n        <span class=\"n\">ymax</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">inf</span>\n        <span class=\"n\">ymin</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">inf</span>\n        <span class=\"k\">for</span> <span class=\"n\">args_list</span> <span class=\"ow\">in</span> <span class=\"n\">plotargs_list</span><span class=\"p\">:</span>\n            <span class=\"n\">ydata_list</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_list_column</span><span class=\"p\">(</span><span class=\"n\">args_list</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n            <span class=\"n\">spread</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_list_column</span><span class=\"p\">(</span><span class=\"n\">args_list</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n            <span class=\"n\">ymax</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">ymax</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">ydata_list</span> <span class=\"o\">+</span> <span class=\"n\">spread</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">())</span>\n            <span class=\"n\">ymin</span> <span class=\"o\">=</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">ymax</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">ydata_list</span> <span class=\"o\">-</span> <span class=\"n\">spread</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">min</span><span class=\"p\">())</span>\n\n        <span class=\"n\">ylabel</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;log name score&#39;</span> <span class=\"k\">if</span> <span class=\"n\">USE_LOG</span> <span class=\"k\">else</span> <span class=\"s1\">&#39;name score&#39;</span>\n\n        <span class=\"n\">statickw</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span>\n            <span class=\"c1\">#title=&#39;scores vs dbsize&#39;,</span>\n            <span class=\"n\">xlabel</span><span class=\"o\">=</span><span class=\"s1\">&#39;database size (number of annotations)&#39;</span><span class=\"p\">,</span>\n            <span class=\"n\">ylabel</span><span class=\"o\">=</span><span class=\"n\">ylabel</span><span class=\"p\">,</span>\n            <span class=\"c1\">#xscale=&#39;log&#39;, ymin=0, ymax=10,</span>\n            <span class=\"n\">linewidth</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">spread_alpha</span><span class=\"o\">=.</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">lightbg</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">marker</span><span class=\"o\">=</span><span class=\"s1\">&#39;o&#39;</span><span class=\"p\">,</span>\n            <span class=\"c1\">#xmax=&#39;data&#39;,</span>\n            <span class=\"n\">ymax</span><span class=\"o\">=</span><span class=\"n\">ymax</span><span class=\"p\">,</span> <span class=\"n\">ymin</span><span class=\"o\">=</span><span class=\"n\">ymin</span><span class=\"p\">,</span> <span class=\"n\">xmax</span><span class=\"o\">=</span><span class=\"s1\">&#39;data&#39;</span><span class=\"p\">,</span> <span class=\"n\">xmin</span><span class=\"o\">=</span><span class=\"s1\">&#39;data&#39;</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">fnum</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">ensure_fnum</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"n\">pnum_</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">make_pnum_nextgen</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">plotargs_list</span><span class=\"p\">),</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">args_list</span> <span class=\"ow\">in</span> <span class=\"n\">plotargs_list</span><span class=\"p\">:</span>\n            <span class=\"n\">ydata_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_list_column</span><span class=\"p\">(</span><span class=\"n\">args_list</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"n\">spread_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_list_column</span><span class=\"p\">(</span><span class=\"n\">args_list</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"n\">kwargs_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_list_column</span><span class=\"p\">(</span><span class=\"n\">args_list</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n            <span class=\"n\">sizes_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_list_column</span><span class=\"p\">(</span><span class=\"n\">args_list</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;sizes_list = </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr2</span><span class=\"p\">(</span><span class=\"n\">sizes_list</span><span class=\"p\">,</span> <span class=\"n\">nl</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">),))</span>\n\n            <span class=\"c1\"># Pack kwargs list for multi_plot</span>\n            <span class=\"n\">plotkw</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dict_stack2</span><span class=\"p\">(</span><span class=\"n\">kwargs_list</span><span class=\"p\">,</span> <span class=\"s1\">&#39;_list&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">plotkw2</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">merge_dicts</span><span class=\"p\">(</span><span class=\"n\">statickw</span><span class=\"p\">,</span> <span class=\"n\">plotkw</span><span class=\"p\">)</span>\n\n            <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">multi_plot</span><span class=\"p\">(</span><span class=\"n\">xdata</span><span class=\"p\">,</span> <span class=\"n\">ydata_list</span><span class=\"p\">,</span> <span class=\"n\">spread_list</span><span class=\"o\">=</span><span class=\"n\">spread_list</span><span class=\"p\">,</span>\n                          <span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"n\">fnum</span><span class=\"p\">,</span> <span class=\"n\">pnum</span><span class=\"o\">=</span><span class=\"n\">pnum_</span><span class=\"p\">(),</span> <span class=\"o\">**</span><span class=\"n\">plotkw2</span><span class=\"p\">)</span>\n\n        <span class=\"c1\">#pt.adjust_subplots(hspace=.3)</span>\n        <span class=\"n\">figtitle</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Score vs DBSize: </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_title_aug</span><span class=\"p\">())</span>\n        <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">set_figtitle</span><span class=\"p\">(</span><span class=\"n\">figtitle</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"TestResult.draw_rank_cmc\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.draw_rank_cmc\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">draw_rank_cmc</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Wrapper</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">ibeis.expt</span> <span class=\"k\">import</span> <span class=\"n\">experiment_drawing</span>\n        <span class=\"n\">experiment_drawing</span><span class=\"o\">.</span><span class=\"n\">draw_rank_cmc</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">testres</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"TestResult.draw_match_cases\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.draw_match_cases\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">draw_match_cases</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Wrapper</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">ibeis.expt</span> <span class=\"k\">import</span> <span class=\"n\">experiment_drawing</span>\n        <span class=\"n\">experiment_drawing</span><span class=\"o\">.</span><span class=\"n\">draw_match_cases</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">testres</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"TestResult.draw_failure_cases\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.draw_failure_cases\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">draw_failure_cases</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.other.dbinfo import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs, testres = ibeis.testdata_expts(defaultdb=&#39;PZ_MTEST&#39;, a=&#39;timectrl:qsize=2&#39;, t=&#39;invar:AI=[False],RI=False&#39;, use_cache=False)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">ibeis.expt</span> <span class=\"k\">import</span> <span class=\"n\">experiment_drawing</span>\n        <span class=\"c1\">#kwargs = kwargs.copy()</span>\n        <span class=\"n\">orig_filter</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;:&#39;</span>\n        <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s1\">&#39;f&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">orig_filter</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;fail&#39;</span>\n        <span class=\"n\">case_pos_list</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">case_sample2</span><span class=\"p\">(</span><span class=\"s1\">&#39;:fail=True,index=0:5&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">experiment_drawing</span><span class=\"o\">.</span><span class=\"n\">draw_match_cases</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">testres</span><span class=\"p\">,</span> <span class=\"n\">case_pos_list</span><span class=\"o\">=</span><span class=\"n\">case_pos_list</span><span class=\"p\">,</span> <span class=\"n\">annot_modes</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">interact</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"TestResult.find_score_thresh_cutoff\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.find_score_thresh_cutoff\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">find_score_thresh_cutoff</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        FIXME</span>\n<span class=\"sd\">        DUPLICATE CODE</span>\n<span class=\"sd\">        rectify with experiment_drawing</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\">#import plottool as pt</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">vtool</span> <span class=\"k\">as</span> <span class=\"nn\">vt</span>\n        <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">VERBOSE</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[dev] FIX DUPLICATE CODE find_thresh_cutoff&#39;</span><span class=\"p\">)</span>\n        <span class=\"c1\">#from ibeis.expt import cfghelpers</span>\n\n        <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_qreq_</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">&#39;can only specify one config here&#39;</span>\n        <span class=\"n\">cfgx</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"c1\">#qreq_ = testres.cfgx2_qreq_[cfgx]</span>\n        <span class=\"n\">test_qaids</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_test_qaids</span><span class=\"p\">()</span>\n        <span class=\"n\">gt_rawscore</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_infoprop_mat</span><span class=\"p\">(</span><span class=\"s1\">&#39;qx2_gt_raw_score&#39;</span><span class=\"p\">,</span> <span class=\"n\">qaids</span><span class=\"o\">=</span><span class=\"n\">test_qaids</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">cfgx</span><span class=\"p\">]</span>\n        <span class=\"n\">gf_rawscore</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_infoprop_mat</span><span class=\"p\">(</span><span class=\"s1\">&#39;qx2_gf_raw_score&#39;</span><span class=\"p\">,</span> <span class=\"n\">qaids</span><span class=\"o\">=</span><span class=\"n\">test_qaids</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">cfgx</span><span class=\"p\">]</span>\n\n        <span class=\"c1\"># FIXME: may need to specify which cfg is used in the future</span>\n        <span class=\"c1\">#isvalid = testres.case_sample2(filt_cfg, return_mask=True).T[cfgx]</span>\n\n        <span class=\"n\">tp_nscores</span> <span class=\"o\">=</span> <span class=\"n\">gt_rawscore</span>\n        <span class=\"n\">tn_nscores</span> <span class=\"o\">=</span> <span class=\"n\">gf_rawscore</span>\n        <span class=\"n\">tn_qaids</span> <span class=\"o\">=</span> <span class=\"n\">tp_qaids</span> <span class=\"o\">=</span> <span class=\"n\">test_qaids</span>\n        <span class=\"c1\">#encoder = vt.ScoreNormalizer(target_tpr=.7)</span>\n        <span class=\"c1\">#print(qreq_.get_cfgstr())</span>\n        <span class=\"n\">part_attrs</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;qaid&#39;</span><span class=\"p\">:</span> <span class=\"n\">tp_qaids</span><span class=\"p\">},</span>\n                      <span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;qaid&#39;</span><span class=\"p\">:</span> <span class=\"n\">tn_qaids</span><span class=\"p\">}}</span>\n\n        <span class=\"n\">fpr</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">tpr</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"mi\">85</span>\n        <span class=\"n\">encoder</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">ScoreNormalizer</span><span class=\"p\">(</span><span class=\"n\">adjust</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"n\">fpr</span><span class=\"o\">=</span><span class=\"n\">fpr</span><span class=\"p\">,</span> <span class=\"n\">tpr</span><span class=\"o\">=</span><span class=\"n\">tpr</span><span class=\"p\">,</span> <span class=\"n\">monotonize</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"c1\">#tp_scores = tp_nscores</span>\n        <span class=\"c1\">#tn_scores = tn_nscores</span>\n        <span class=\"n\">name_scores</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"p\">,</span> <span class=\"n\">attrs</span> <span class=\"o\">=</span> <span class=\"n\">encoder</span><span class=\"o\">.</span><span class=\"n\">_to_xy</span><span class=\"p\">(</span><span class=\"n\">tp_nscores</span><span class=\"p\">,</span> <span class=\"n\">tn_nscores</span><span class=\"p\">,</span> <span class=\"n\">part_attrs</span><span class=\"p\">)</span>\n        <span class=\"n\">encoder</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">name_scores</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"p\">,</span> <span class=\"n\">attrs</span><span class=\"p\">)</span>\n        <span class=\"n\">score_thresh</span> <span class=\"o\">=</span> <span class=\"n\">encoder</span><span class=\"o\">.</span><span class=\"n\">learn_threshold2</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Find intersection point</span>\n        <span class=\"c1\"># TODO: add to score normalizer.</span>\n        <span class=\"c1\"># Improve robustness</span>\n        <span class=\"c1\">#pt.figure()</span>\n        <span class=\"c1\">#pt.plot(xdata, curve)</span>\n        <span class=\"c1\">#pt.plot(x_submax, y_submax, &#39;o&#39;)</span>\n        <span class=\"k\">return</span> <span class=\"n\">score_thresh</span></div>\n\n<div class=\"viewcode-block\" id=\"TestResult.print_percent_identification_success\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.print_percent_identification_success\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">print_percent_identification_success</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Prints names identified (at rank 1) / names queried.</span>\n<span class=\"sd\">        This combines results over multiple queries of a particular name using</span>\n<span class=\"sd\">        max</span>\n\n<span class=\"sd\">        OLD, MAYBE DEPRIATE</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.expt.test_result import *  # NOQA</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">ibs</span>\n        <span class=\"n\">qaids</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_test_qaids</span><span class=\"p\">()</span>\n        <span class=\"n\">unique_nids</span><span class=\"p\">,</span> <span class=\"n\">groupxs</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">group_indices</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_nids</span><span class=\"p\">(</span><span class=\"n\">qaids</span><span class=\"p\">))</span>\n\n        <span class=\"n\">qx2_gt_raw_score</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_infoprop_mat</span><span class=\"p\">(</span><span class=\"s1\">&#39;qx2_gt_raw_score&#39;</span><span class=\"p\">,</span> <span class=\"n\">qaids</span><span class=\"o\">=</span><span class=\"n\">qaids</span><span class=\"p\">)</span>\n        <span class=\"n\">qx2_gf_raw_score</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_infoprop_mat</span><span class=\"p\">(</span><span class=\"s1\">&#39;qx2_gf_raw_score&#39;</span><span class=\"p\">,</span> <span class=\"n\">qaids</span><span class=\"o\">=</span><span class=\"n\">qaids</span><span class=\"p\">)</span>\n\n        <span class=\"n\">nx2_gt_raw_score</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span>\n            <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nanmax</span><span class=\"p\">(</span><span class=\"n\">scores</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">scores</span> <span class=\"ow\">in</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">apply_grouping</span><span class=\"p\">(</span><span class=\"n\">qx2_gt_raw_score</span><span class=\"p\">,</span> <span class=\"n\">groupxs</span><span class=\"p\">)])</span>\n\n        <span class=\"n\">nx2_gf_raw_score</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span>\n            <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nanmax</span><span class=\"p\">(</span><span class=\"n\">scores</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">scores</span> <span class=\"ow\">in</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">apply_grouping</span><span class=\"p\">(</span><span class=\"n\">qx2_gf_raw_score</span><span class=\"p\">,</span> <span class=\"n\">groupxs</span><span class=\"p\">)])</span>\n\n        <span class=\"n\">cfgx2_success</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">nx2_gt_raw_score</span> <span class=\"o\">&gt;</span> <span class=\"n\">nx2_gf_raw_score</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">T</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Identification success (names identified / names queried)&#39;</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">cfgx</span><span class=\"p\">,</span> <span class=\"n\">success</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">cfgx2_success</span><span class=\"p\">):</span>\n            <span class=\"n\">pipelbl</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_lbl</span><span class=\"p\">[</span><span class=\"n\">cfgx</span><span class=\"p\">]</span>\n            <span class=\"n\">percent</span> <span class=\"o\">=</span> <span class=\"mi\">100</span> <span class=\"o\">*</span> <span class=\"n\">success</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span> <span class=\"o\">/</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">success</span><span class=\"p\">)</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"si\">%2d</span><span class=\"s1\">) success = </span><span class=\"si\">%r</span><span class=\"s1\">/</span><span class=\"si\">%r</span><span class=\"s1\"> = </span><span class=\"si\">%.2f%%</span><span class=\"s1\"> -- </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span>\n                <span class=\"n\">cfgx</span><span class=\"p\">,</span> <span class=\"n\">success</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">success</span><span class=\"p\">),</span> <span class=\"n\">percent</span><span class=\"p\">,</span> <span class=\"n\">pipelbl</span><span class=\"p\">))</span></div>\n\n<div class=\"viewcode-block\" id=\"TestResult.print_config_overlap\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.print_config_overlap\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">print_config_overlap</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">,</span> <span class=\"n\">with_plot</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"n\">truth2_prop</span><span class=\"p\">,</span> <span class=\"n\">prop2_mat</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_truth2_prop</span><span class=\"p\">()</span>\n        <span class=\"n\">qx2_gt_ranks</span> <span class=\"o\">=</span> <span class=\"n\">truth2_prop</span><span class=\"p\">[</span><span class=\"s1\">&#39;gt&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;rank&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">qx2_success</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">qx2_gt_ranks</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"n\">cfgx2_num_correct</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nansum</span><span class=\"p\">(</span><span class=\"n\">qx2_success</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"n\">best_cfgx</span> <span class=\"o\">=</span> <span class=\"n\">cfgx2_num_correct</span><span class=\"o\">.</span><span class=\"n\">argmax</span><span class=\"p\">()</span>\n\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Config Overlap&#39;</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Matrix version</span>\n        <span class=\"c1\">#disjoint_mat = np.zeros((testres.nConfig, testres.nConfig), dtype=np.int32)</span>\n        <span class=\"c1\">#improves_mat = np.zeros((testres.nConfig, testres.nConfig), dtype=np.int32)</span>\n        <span class=\"n\">isect_mat</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">((</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">nConfig</span><span class=\"p\">,</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">nConfig</span><span class=\"p\">),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">int32</span><span class=\"p\">)</span>\n        <span class=\"n\">union_mat</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">((</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">nConfig</span><span class=\"p\">,</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">nConfig</span><span class=\"p\">),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">int32</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">cfgx1</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">nConfig</span><span class=\"p\">):</span>\n            <span class=\"k\">for</span> <span class=\"n\">cfgx2</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">nConfig</span><span class=\"p\">):</span>\n                <span class=\"k\">if</span> <span class=\"n\">cfgx1</span> <span class=\"o\">==</span> <span class=\"n\">cfgx2</span><span class=\"p\">:</span>\n                    <span class=\"n\">success_qx1</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">qx2_success</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">cfgx1</span><span class=\"p\">])[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                    <span class=\"n\">isect_mat</span><span class=\"p\">[</span><span class=\"n\">cfgx1</span><span class=\"p\">][</span><span class=\"n\">cfgx2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">success_qx1</span><span class=\"p\">)</span>\n                    <span class=\"n\">union_mat</span><span class=\"p\">[</span><span class=\"n\">cfgx1</span><span class=\"p\">][</span><span class=\"n\">cfgx2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">success_qx1</span><span class=\"p\">)</span>\n                    <span class=\"k\">continue</span>\n                <span class=\"n\">success_qx1</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">qx2_success</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">cfgx1</span><span class=\"p\">])[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                <span class=\"n\">success_qx2</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">qx2_success</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">cfgx2</span><span class=\"p\">])[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                <span class=\"n\">union_</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">union1d</span><span class=\"p\">(</span><span class=\"n\">success_qx1</span><span class=\"p\">,</span> <span class=\"n\">success_qx2</span><span class=\"p\">)</span>\n                <span class=\"n\">isect_</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">intersect1d</span><span class=\"p\">(</span><span class=\"n\">success_qx1</span><span class=\"p\">,</span> <span class=\"n\">success_qx2</span><span class=\"p\">)</span>\n                <span class=\"c1\">#disjoints = np.setdiff1d(union_, isect_)</span>\n                <span class=\"c1\">#disjoint_mat[cfgx1][cfgx2] = len(disjoints)</span>\n                <span class=\"n\">isect_mat</span><span class=\"p\">[</span><span class=\"n\">cfgx1</span><span class=\"p\">][</span><span class=\"n\">cfgx2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">isect_</span><span class=\"p\">)</span>\n                <span class=\"n\">union_mat</span><span class=\"p\">[</span><span class=\"n\">cfgx1</span><span class=\"p\">][</span><span class=\"n\">cfgx2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">union_</span><span class=\"p\">)</span>\n                <span class=\"c1\">#improves = np.setdiff1d(success_qx2, isect_)</span>\n                <span class=\"c1\">#improves_mat[cfgx2][cfgx1] = len(improves)</span>\n\n        <span class=\"n\">n_success_list</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"n\">qx2_success</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">cfgx1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">cfgx1</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">nConfig</span><span class=\"p\">)])</span>\n        <span class=\"n\">improves_mat</span> <span class=\"o\">=</span> <span class=\"n\">n_success_list</span><span class=\"p\">[:,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">isect_mat</span>\n\n        <span class=\"n\">disjoint_mat</span> <span class=\"o\">=</span> <span class=\"n\">union_mat</span> <span class=\"o\">-</span> <span class=\"n\">isect_mat</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;n_success_list = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">n_success_list</span><span class=\"p\">,))</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;union_mat =</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">union_mat</span><span class=\"p\">,))</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;isect_mat =</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">isect_mat</span><span class=\"p\">,))</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;cfgx1 and cfgx2 have &lt;x&gt; not in common&#39;</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;disjoint_mat =</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">disjoint_mat</span><span class=\"p\">,))</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;cfgx1 helps cfgx2 by &lt;x&gt;&#39;</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;improves_mat =</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">improves_mat</span><span class=\"p\">,))</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;improves_mat.sum(axis=1) = </span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">improves_mat</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">),))</span>\n        <span class=\"n\">bestx_by_improves</span> <span class=\"o\">=</span> <span class=\"n\">improves_mat</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">argmax</span><span class=\"p\">()</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;bestx_by_improves = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">bestx_by_improves</span><span class=\"p\">,))</span>\n\n        <span class=\"c1\"># Numbered version</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;best_cfgx = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">best_cfgx</span><span class=\"p\">,))</span>\n        <span class=\"k\">for</span> <span class=\"n\">cfgx</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">nConfig</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">cfgx</span> <span class=\"o\">==</span> <span class=\"n\">best_cfgx</span><span class=\"p\">:</span>\n                <span class=\"k\">continue</span>\n            <span class=\"n\">pipelbl</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_lbl</span><span class=\"p\">[</span><span class=\"n\">cfgx</span><span class=\"p\">]</span>\n            <span class=\"n\">qx2_anysuccess</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">logical_or</span><span class=\"p\">(</span><span class=\"n\">qx2_success</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">cfgx</span><span class=\"p\">],</span> <span class=\"n\">qx2_success</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">best_cfgx</span><span class=\"p\">])</span>\n            <span class=\"c1\"># Queries that other got right that best did not get right</span>\n            <span class=\"n\">qx2_othersuccess</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">logical_and</span><span class=\"p\">(</span><span class=\"n\">qx2_anysuccess</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">logical_not</span><span class=\"p\">(</span><span class=\"n\">qx2_success</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">best_cfgx</span><span class=\"p\">]))</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;cfgx </span><span class=\"si\">%d</span><span class=\"s1\">) has </span><span class=\"si\">%d</span><span class=\"s1\"> success cases that that the best config does not have -- </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">cfgx</span><span class=\"p\">,</span> <span class=\"n\">qx2_othersuccess</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(),</span> <span class=\"n\">pipelbl</span><span class=\"p\">))</span>\n\n        <span class=\"n\">qx2_success</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">cfgx</span><span class=\"p\">]</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">with_plot</span><span class=\"p\">:</span>\n            <span class=\"c1\">#y = None</span>\n            <span class=\"c1\">#for x in qx2_gt_ranks:</span>\n            <span class=\"c1\">#    x = np.minimum(x, 3)</span>\n            <span class=\"c1\">#    z =  (x.T - x[:, None])</span>\n            <span class=\"c1\">#    if np.any(z):</span>\n            <span class=\"c1\">#        print(z)</span>\n            <span class=\"c1\">#    if y is None:</span>\n            <span class=\"c1\">#        y = z</span>\n            <span class=\"c1\">#    else:</span>\n            <span class=\"c1\">#        y += z</span>\n\n            <span class=\"k\">if</span> <span class=\"kc\">False</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Chip size stats</span>\n                <span class=\"n\">ave_dlen</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_chip_dlensqrd</span><span class=\"p\">(</span>  <span class=\"c1\"># NOQA</span>\n                    <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">qaids</span><span class=\"p\">,</span> <span class=\"n\">config2_</span><span class=\"o\">=</span><span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">query_config2_</span><span class=\"p\">)))</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()</span>\n                    <span class=\"k\">for</span> <span class=\"n\">qreq_</span> <span class=\"ow\">in</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_qreq_</span><span class=\"p\">]</span>\n\n                <span class=\"n\">ave_width_inimg</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_bboxes</span><span class=\"p\">(</span>  <span class=\"c1\"># NOQA</span>\n                    <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">qaids</span><span class=\"p\">,</span> <span class=\"n\">config2_</span><span class=\"o\">=</span><span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">query_config2_</span><span class=\"p\">))[:,</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()</span>\n                    <span class=\"k\">for</span> <span class=\"n\">qreq_</span> <span class=\"ow\">in</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_qreq_</span><span class=\"p\">]</span>\n\n                <span class=\"n\">ave_width</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_chip_sizes</span><span class=\"p\">(</span>  <span class=\"c1\"># NOQA</span>\n                    <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">qaids</span><span class=\"p\">,</span> <span class=\"n\">config2_</span><span class=\"o\">=</span><span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">query_config2_</span><span class=\"p\">))[:,</span> <span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()</span>\n                    <span class=\"k\">for</span> <span class=\"n\">qreq_</span> <span class=\"ow\">in</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_qreq_</span><span class=\"p\">]</span>\n\n            <span class=\"kn\">import</span> <span class=\"nn\">plottool</span> <span class=\"k\">as</span> <span class=\"nn\">pt</span>\n            <span class=\"c1\">#pt.plt.imshow(-y, interpolation=&#39;none&#39;, cmap=&#39;hot&#39;)</span>\n            <span class=\"c1\">#pt.plt.colorbar()</span>\n\n            <span class=\"k\">def</span> <span class=\"nf\">label_ticks</span><span class=\"p\">():</span>\n                <span class=\"kn\">import</span> <span class=\"nn\">plottool</span> <span class=\"k\">as</span> <span class=\"nn\">pt</span>\n                <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">gca</span><span class=\"p\">()</span>\n                <span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_varied_labels</span><span class=\"p\">()</span>\n                <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_xticks</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">labels</span><span class=\"p\">))))</span>\n                <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_xticklabels</span><span class=\"p\">([</span><span class=\"n\">lbl</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">100</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">lbl</span> <span class=\"ow\">in</span> <span class=\"n\">labels</span><span class=\"p\">])</span>\n                <span class=\"p\">[</span><span class=\"n\">lbl</span><span class=\"o\">.</span><span class=\"n\">set_rotation</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">25</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">lbl</span> <span class=\"ow\">in</span> <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">get_xticklabels</span><span class=\"p\">()]</span>\n                <span class=\"p\">[</span><span class=\"n\">lbl</span><span class=\"o\">.</span><span class=\"n\">set_horizontalalignment</span><span class=\"p\">(</span><span class=\"s1\">&#39;left&#39;</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">lbl</span> <span class=\"ow\">in</span> <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">get_xticklabels</span><span class=\"p\">()]</span>\n\n                <span class=\"c1\">#xgrid, ygrid = np.meshgrid(range(len(labels)), range(len(labels)))</span>\n                <span class=\"c1\">#pt.plot_surface3d(xgrid, ygrid, disjoint_mat)</span>\n                <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_yticks</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">labels</span><span class=\"p\">))))</span>\n                <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_yticklabels</span><span class=\"p\">([</span><span class=\"n\">lbl</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">100</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">lbl</span> <span class=\"ow\">in</span> <span class=\"n\">labels</span><span class=\"p\">])</span>\n                <span class=\"p\">[</span><span class=\"n\">lbl</span><span class=\"o\">.</span><span class=\"n\">set_horizontalalignment</span><span class=\"p\">(</span><span class=\"s1\">&#39;right&#39;</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">lbl</span> <span class=\"ow\">in</span> <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">get_yticklabels</span><span class=\"p\">()]</span>\n                <span class=\"p\">[</span><span class=\"n\">lbl</span><span class=\"o\">.</span><span class=\"n\">set_verticalalignment</span><span class=\"p\">(</span><span class=\"s1\">&#39;center&#39;</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">lbl</span> <span class=\"ow\">in</span> <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">get_yticklabels</span><span class=\"p\">()]</span>\n                <span class=\"c1\">#[lbl.set_rotation(20) for lbl in ax.get_yticklabels()]</span>\n\n            <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">next_fnum</span><span class=\"p\">())</span>\n            <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">union_mat</span><span class=\"p\">,</span> <span class=\"n\">interpolation</span><span class=\"o\">=</span><span class=\"s1\">&#39;none&#39;</span><span class=\"p\">,</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">&#39;hot&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">colorbar</span><span class=\"p\">()</span>\n            <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">set_title</span><span class=\"p\">(</span><span class=\"s1\">&#39;union mat: cfg&lt;x&gt; and cfg&lt;y&gt; have &lt;z&gt; success cases in in total&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">label_ticks</span><span class=\"p\">()</span>\n            <span class=\"n\">label_ticks</span><span class=\"p\">()</span>\n\n            <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">next_fnum</span><span class=\"p\">())</span>\n            <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">isect_mat</span><span class=\"p\">,</span> <span class=\"n\">interpolation</span><span class=\"o\">=</span><span class=\"s1\">&#39;none&#39;</span><span class=\"p\">,</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">&#39;hot&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">colorbar</span><span class=\"p\">()</span>\n            <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">set_title</span><span class=\"p\">(</span><span class=\"s1\">&#39;isect mat: cfg&lt;x&gt; and cfg&lt;y&gt; have &lt;z&gt; success cases in common&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">label_ticks</span><span class=\"p\">()</span>\n\n            <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">next_fnum</span><span class=\"p\">())</span>\n            <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">disjoint_mat</span><span class=\"p\">,</span> <span class=\"n\">interpolation</span><span class=\"o\">=</span><span class=\"s1\">&#39;none&#39;</span><span class=\"p\">,</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">&#39;hot&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">colorbar</span><span class=\"p\">()</span>\n            <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">set_title</span><span class=\"p\">(</span><span class=\"s1\">&#39;disjoint mat (union - isect): cfg&lt;x&gt; and cfg&lt;y&gt; have &lt;z&gt; success cases not in common&#39;</span><span class=\"p\">)</span>\n\n            <span class=\"c1\">#xgrid, ygrid = np.meshgrid(range(len(labels)), range(len(labels)))</span>\n            <span class=\"c1\">#pt.plot_surface3d(xgrid, ygrid, improves_mat)</span>\n\n            <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">next_fnum</span><span class=\"p\">())</span>\n            <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">improves_mat</span><span class=\"p\">,</span> <span class=\"n\">interpolation</span><span class=\"o\">=</span><span class=\"s1\">&#39;none&#39;</span><span class=\"p\">,</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">&#39;hot&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">colorbar</span><span class=\"p\">()</span>\n            <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">set_title</span><span class=\"p\">(</span><span class=\"s1\">&#39;improves mat (diag.T - isect): cfg&lt;x&gt; got &lt;z&gt; qaids that cfg &lt;y&gt; missed&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">label_ticks</span><span class=\"p\">()</span></div>\n            <span class=\"c1\">#pt.colorbar(np.unique(y))</span>\n\n<div class=\"viewcode-block\" id=\"TestResult.map_score\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.map_score\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">map_score</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        For each query compute a precision recall curve.</span>\n<span class=\"sd\">        Then, for each query compute the average precision.</span>\n<span class=\"sd\">        Then take the mean of all average precisions to obtain the mAP.</span>\n\n<span class=\"sd\">        Script:</span>\n<span class=\"sd\">            &gt;&gt;&gt; #ibs = ibeis.opendb(&#39;Oxford&#39;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; #ibs, testres = ibeis.testdata_expts(&#39;Oxford&#39;, a=&#39;oxford&#39;, p=&#39;smk:nWords=[64000],nAssign=[1],SV=[False,True]&#39;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">            &gt;&gt;&gt; ibs, testres = ibeis.testdata_expts(&#39;Oxford&#39;, a=&#39;oxford&#39;, p=&#39;smk:nWords=[64000],nAssign=[1],SV=[False,True],can_match_sameimg=True&#39;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">            &gt;&gt;&gt; ibs, testres = ibeis.testdata_expts(&#39;Oxford&#39;, a=&#39;oxford&#39;, p=&#39;smk:nWords=[64000],nAssign=[1],SV=[False],can_match_sameimg=True&#39;)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">sklearn.metrics</span>\n        <span class=\"n\">qaids</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_test_qaids</span><span class=\"p\">()</span>\n        <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">ibs</span>\n\n        <span class=\"n\">PLOT</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"n\">PLOT</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n        <span class=\"n\">cfgx2_cms</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">qreq_</span> <span class=\"ow\">in</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_qreq_</span><span class=\"p\">:</span>\n            <span class=\"n\">cm_list</span> <span class=\"o\">=</span> <span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">qaids</span><span class=\"p\">)</span>\n            <span class=\"n\">cm_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">extend_results</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">cm</span> <span class=\"ow\">in</span> <span class=\"n\">cm_list</span><span class=\"p\">]</span>\n            <span class=\"k\">for</span> <span class=\"n\">cm</span> <span class=\"ow\">in</span> <span class=\"n\">cm_list</span><span class=\"p\">:</span>\n                <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">score_annot_csum</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"p\">)</span>\n            <span class=\"c1\">#    #cm.sortself()</span>\n            <span class=\"n\">cfgx2_cms</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">cm_list</span><span class=\"p\">)</span>\n\n        <span class=\"n\">map_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">unique_names</span><span class=\"p\">,</span> <span class=\"n\">groupxs</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">group_indices</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">annots</span><span class=\"p\">(</span><span class=\"n\">qaids</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">names</span><span class=\"p\">)</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">cm_list</span><span class=\"p\">,</span> <span class=\"n\">qreq_</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">cfgx2_cms</span><span class=\"p\">,</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_qreq_</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">PLOT</span><span class=\"p\">:</span>\n                <span class=\"kn\">import</span> <span class=\"nn\">plottool</span> <span class=\"k\">as</span> <span class=\"nn\">pt</span>\n                <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">qt4ensure</span><span class=\"p\">()</span>\n                <span class=\"n\">fnum</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">ensure_fnum</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n                <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"n\">fnum</span><span class=\"p\">)</span>\n            <span class=\"n\">avep_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"c1\">#fnum = pt.ensure_fnum(None)</span>\n            <span class=\"c1\">#pt.figure(fnum=fnum)</span>\n            <span class=\"k\">for</span> <span class=\"n\">cm</span> <span class=\"ow\">in</span> <span class=\"n\">cm_list</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Ignore junk images</span>\n                <span class=\"n\">flags</span>   <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">annots</span><span class=\"p\">(</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">daid_list</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">quality_texts</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"s1\">&#39;junk&#39;</span>\n                <span class=\"k\">assert</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">(</span><span class=\"n\">flags</span><span class=\"p\">)</span>\n                <span class=\"n\">daid_list</span> <span class=\"o\">=</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">daid_list</span>\n                <span class=\"n\">dnid_list</span> <span class=\"o\">=</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">dnid_list</span>\n                <span class=\"n\">y_true</span>  <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">qnid</span> <span class=\"o\">==</span> <span class=\"n\">dnid_list</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">flags</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">int</span><span class=\"p\">)</span>\n                <span class=\"n\">y_score</span> <span class=\"o\">=</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">annot_score_list</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">flags</span><span class=\"p\">)</span>\n\n                <span class=\"n\">y_score</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">isfinite</span><span class=\"p\">(</span><span class=\"n\">y_score</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n                <span class=\"n\">y_score</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan_to_num</span><span class=\"p\">(</span><span class=\"n\">y_score</span><span class=\"p\">)</span>\n                <span class=\"n\">sortx</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">argsort</span><span class=\"p\">(</span><span class=\"n\">y_score</span><span class=\"p\">)[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n                <span class=\"n\">daid_list</span> <span class=\"o\">=</span> <span class=\"n\">daid_list</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">sortx</span><span class=\"p\">)</span>\n                <span class=\"n\">dnid_list</span> <span class=\"o\">=</span> <span class=\"n\">dnid_list</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">sortx</span><span class=\"p\">)</span>\n                <span class=\"n\">y_true</span> <span class=\"o\">=</span> <span class=\"n\">y_true</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">sortx</span><span class=\"p\">)</span>\n                <span class=\"n\">y_score</span> <span class=\"o\">=</span> <span class=\"n\">y_score</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">sortx</span><span class=\"p\">)</span>\n                <span class=\"c1\">#print(cm.get_annot_ranks(cm.get_top_gt_aids(ibs)))</span>\n\n                <span class=\"n\">precision</span><span class=\"p\">,</span> <span class=\"n\">recall</span><span class=\"p\">,</span> <span class=\"n\">thresholds</span> <span class=\"o\">=</span> <span class=\"n\">sklearn</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">precision_recall_curve</span><span class=\"p\">(</span><span class=\"n\">y_true</span><span class=\"p\">,</span> <span class=\"n\">y_score</span><span class=\"p\">)</span>\n\n                <span class=\"k\">if</span> <span class=\"n\">PLOT</span><span class=\"p\">:</span>\n                    <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">plot2</span><span class=\"p\">(</span><span class=\"n\">recall</span><span class=\"p\">,</span> <span class=\"n\">precision</span><span class=\"p\">,</span> <span class=\"n\">marker</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"n\">linestyle</span><span class=\"o\">=</span><span class=\"s1\">&#39;-&#39;</span><span class=\"p\">,</span> <span class=\"n\">x_label</span><span class=\"o\">=</span><span class=\"s1\">&#39;recall&#39;</span><span class=\"p\">,</span> <span class=\"n\">y_label</span><span class=\"o\">=</span><span class=\"s1\">&#39;precision&#39;</span><span class=\"p\">)</span>\n\n                <span class=\"n\">avep</span> <span class=\"o\">=</span> <span class=\"n\">sklearn</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">average_precision_score</span><span class=\"p\">(</span><span class=\"n\">y_true</span><span class=\"p\">,</span> <span class=\"n\">y_score</span><span class=\"p\">)</span>\n                <span class=\"c1\">#avep = [</span>\n                <span class=\"c1\">#    sklearn.metrics.average_precision_score(y_true, y_score, average=average)</span>\n                <span class=\"c1\">#    for average in [&#39;micro&#39;, &#39;macro&#39;, &#39;samples&#39;, &#39;weighted&#39;]</span>\n                <span class=\"c1\">#]</span>\n                <span class=\"c1\">#if np.any(np.isnan(avep)):</span>\n                <span class=\"c1\">#    break</span>\n                <span class=\"c1\"># if np.isnan(avep):</span>\n                <span class=\"c1\">#     break</span>\n                <span class=\"n\">avep_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">avep</span><span class=\"p\">)</span>\n            <span class=\"c1\">#mean_ave_precision = np.mean(avep_list, axis=0)</span>\n            <span class=\"n\">name_to_ave</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">a</span> <span class=\"ow\">in</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">apply_grouping</span><span class=\"p\">(</span><span class=\"n\">avep_list</span><span class=\"p\">,</span> <span class=\"n\">groupxs</span><span class=\"p\">)]</span>\n            <span class=\"n\">name_to_ave_</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">unique_names</span><span class=\"p\">,</span> <span class=\"n\">name_to_ave</span><span class=\"p\">))</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;name_to_ave_ = </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">align</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr3</span><span class=\"p\">(</span><span class=\"n\">name_to_ave_</span><span class=\"p\">,</span> <span class=\"n\">precision</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"s1\">&#39;:&#39;</span><span class=\"p\">)))</span>\n            <span class=\"n\">mean_ave_precision</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">name_to_ave</span><span class=\"p\">)</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;mean_ave_precision = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">mean_ave_precision</span><span class=\"p\">,))</span>\n            <span class=\"n\">map_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">mean_ave_precision</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">map_list</span></div>\n\n<div class=\"viewcode-block\" id=\"TestResult.embed_testres\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.embed_testres\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">embed_testres</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        CommandLine:</span>\n<span class=\"sd\">            python -m ibeis TestResults.embed_testres</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; # SCRIPT</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.expt.test_result import *  # NOQA</span>\n<span class=\"sd\">            &gt;&gt;&gt; from ibeis.init import main_helpers</span>\n<span class=\"sd\">            &gt;&gt;&gt; ibs, testres = main_helpers.testdata_expts(defaultdb=&#39;PZ_MTEST&#39;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; embed_testres(testres)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">embed</span><span class=\"p\">()</span></div>\n\n<div class=\"viewcode-block\" id=\"TestResult.get_options\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.get_options\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_options</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">):</span>\n        <span class=\"n\">func_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">print_results</span><span class=\"p\">,</span>\n            <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">draw_rank_cmc</span><span class=\"p\">,</span>\n            <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">draw_match_cases</span><span class=\"p\">,</span>\n            <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">embed_testres</span>\n        <span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">func_list</span></div>\n\n<div class=\"viewcode-block\" id=\"TestResult.get_actions\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.get_actions\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_actions</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">):</span>\n        <span class=\"n\">actions</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">odict</span><span class=\"p\">([</span>\n            <span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">print_results</span><span class=\"p\">,</span> <span class=\"p\">([</span><span class=\"s1\">&#39;print&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;p&#39;</span><span class=\"p\">],</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">)),</span>\n            <span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">draw_rank_cmc</span><span class=\"p\">,</span> <span class=\"p\">([</span><span class=\"s1\">&#39;cmc&#39;</span><span class=\"p\">],</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">)),</span>\n            <span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">draw_match_cases</span><span class=\"p\">,</span> <span class=\"p\">([</span><span class=\"s1\">&#39;case&#39;</span><span class=\"p\">],</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">)),</span>\n            <span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">embed_testres</span><span class=\"p\">,</span> <span class=\"p\">([</span><span class=\"s1\">&#39;embed&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ipy&#39;</span><span class=\"p\">],</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">)),</span>\n        <span class=\"p\">])</span>\n        <span class=\"k\">return</span> <span class=\"n\">actions</span></div>\n\n<div class=\"viewcode-block\" id=\"TestResult.help\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.test_result.TestResult.help\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">help</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">):</span>\n        <span class=\"c1\"># list functions that accept the standard interface</span>\n        <span class=\"n\">prefix</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;ibeis&#39;</span>\n        <span class=\"n\">suffix</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">reconstruct_test_flags</span><span class=\"p\">()</span>\n        <span class=\"n\">func_list</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_options</span><span class=\"p\">()</span>\n        <span class=\"n\">funcname_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_funcname</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">func</span> <span class=\"ow\">in</span> <span class=\"n\">func_list</span><span class=\"p\">]</span>\n        <span class=\"n\">cmdstr_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39; &#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"n\">prefix</span><span class=\"p\">,</span> <span class=\"n\">funcname</span><span class=\"p\">,</span> <span class=\"n\">suffix</span><span class=\"p\">])</span> <span class=\"k\">for</span> <span class=\"n\">funcname</span> <span class=\"ow\">in</span> <span class=\"n\">funcname_list</span><span class=\"p\">]</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">cprint</span><span class=\"p\">(</span><span class=\"s1\">&#39;Available Functions:&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;blue&#39;</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;, &#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">funcname_list</span><span class=\"p\">))</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">cprint</span><span class=\"p\">(</span><span class=\"s1\">&#39;Available Commandline:&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;blue&#39;</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">cmdstr_list</span><span class=\"p\">))</span></div></div>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.expt.test_result</span>\n<span class=\"sd\">        python -m ibeis.expt.test_result --allexamples</span>\n<span class=\"sd\">        python -m ibeis.expt.test_result --allexamples --noface --nosrc</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">multiprocessing</span>\n    <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">freeze_support</span><span class=\"p\">()</span>  <span class=\"c1\"># for win32</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>  <span class=\"c1\"># NOQA</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">doctest_funcs</span><span class=\"p\">()</span>\n</pre></div>", "current_page_name": "_modules/ibeis/expt/test_result", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}