{"parents": [{"link": "../../../", "title": "Module code"}, {"link": "../../", "title": "ibeis"}, {"link": "../", "title": "ibeis.expt"}], "title": "ibeis.expt.experiment_drawing", "body": "<h1>Source code for ibeis.expt.experiment_drawing</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">./dev.py -t custom:affine_invariance=False,adapteq=True,fg_on=False --db Elephants_drop1_ears --allgt --index=0:10 --guiview  # NOQA</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"k\">import</span> <span class=\"n\">absolute_import</span><span class=\"p\">,</span> <span class=\"n\">division</span><span class=\"p\">,</span> <span class=\"n\">print_function</span><span class=\"p\">,</span> <span class=\"n\">unicode_literals</span>\n<span class=\"kn\">from</span> <span class=\"nn\">os.path</span> <span class=\"k\">import</span> <span class=\"n\">join</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n<span class=\"kn\">import</span> <span class=\"nn\">vtool</span> <span class=\"k\">as</span> <span class=\"nn\">vt</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.expt</span> <span class=\"k\">import</span> <span class=\"n\">draw_helpers</span>\n<span class=\"kn\">from</span> <span class=\"nn\">six.moves</span> <span class=\"k\">import</span> <span class=\"nb\">map</span><span class=\"p\">,</span> <span class=\"nb\">range</span><span class=\"p\">,</span> <span class=\"n\">reduce</span>\n<span class=\"nb\">print</span><span class=\"p\">,</span> <span class=\"n\">rrr</span><span class=\"p\">,</span> <span class=\"n\">profile</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">inject2</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"scorediff\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.experiment_drawing.scorediff\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">scorediff</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">testres</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (ibeis.IBEISController):  image analysis api</span>\n<span class=\"sd\">        testres (ibeis.TestResult):  test result object</span>\n<span class=\"sd\">        f (None): (default = None)</span>\n<span class=\"sd\">        verbose (bool):  verbosity flag(default = None)</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.expt.experiment_drawing scorediff --db PZ_Master1 -a timectrl -t best --show</span>\n<span class=\"sd\">        python -m ibeis.expt.experiment_drawing scorediff --db PZ_MTEST -a default -t best --show</span>\n\n<span class=\"sd\">        python -m ibeis.expt.experiment_drawing scorediff --db humpbacks_fb \\</span>\n<span class=\"sd\">            -a default:has_any=hasnotch,mingt=2 \\</span>\n<span class=\"sd\">            -t default:proot=BC_DTW,decision=max,crop_dim_size=500,crop_enabled=True,use_te_scorer=False,manual_extract=True,ignore_notch=True,te_net=annot_simple --show</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.expt.experiment_drawing import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.init import main_helpers</span>\n<span class=\"sd\">        &gt;&gt;&gt; defaultdb = &#39;PZ_MTEST&#39;</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs, testres = main_helpers.testdata_expts(defaultdb, a=[&#39;timectrl&#39;], t=[&#39;best&#39;])</span>\n<span class=\"sd\">        &gt;&gt;&gt; f = ut.get_argval((&#39;--filt&#39;, &#39;-f&#39;), type_=list, default=[&#39;&#39;])</span>\n<span class=\"sd\">        &gt;&gt;&gt; scorediff(ibs, testres, f=f, verbose=ut.VERBOSE)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.show_if_requested()</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">plottool</span> <span class=\"k\">as</span> <span class=\"nn\">pt</span>\n    <span class=\"k\">for</span> <span class=\"n\">cfgx</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">nConfig</span><span class=\"p\">):</span>\n        <span class=\"n\">cm_list</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_qreq_</span><span class=\"p\">[</span><span class=\"n\">cfgx</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">()</span>\n        <span class=\"n\">aid_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">qaid</span> <span class=\"k\">for</span> <span class=\"n\">cm</span> <span class=\"ow\">in</span> <span class=\"n\">cm_list</span><span class=\"p\">]</span>\n        <span class=\"n\">score_diffs</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">top_scores</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">cm</span> <span class=\"ow\">in</span> <span class=\"n\">cm_list</span><span class=\"p\">:</span>\n            <span class=\"n\">annot_scores</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">annot_score_list</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"n\">x</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"kc\">False</span><span class=\"p\">:</span>\n                <span class=\"c1\"># We want to measure just the top 2 regardless of what they are</span>\n                <span class=\"n\">diff</span> <span class=\"o\">=</span> <span class=\"n\">annot_scores</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">annot_scores</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"c1\"># We want to measure just the top 2 wrt truth</span>\n                    <span class=\"n\">top_true_aid</span> <span class=\"o\">=</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">get_top_gt_aids</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                    <span class=\"n\">top_false_aid</span> <span class=\"o\">=</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">get_top_gf_aids</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                    <span class=\"n\">gt_score</span> <span class=\"o\">=</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">get_annot_scores</span><span class=\"p\">([</span><span class=\"n\">top_true_aid</span><span class=\"p\">])[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                    <span class=\"n\">gf_score</span> <span class=\"o\">=</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">get_annot_scores</span><span class=\"p\">([</span><span class=\"n\">top_false_aid</span><span class=\"p\">])[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                    <span class=\"n\">diff</span> <span class=\"o\">=</span> <span class=\"n\">gt_score</span> <span class=\"o\">-</span> <span class=\"n\">gf_score</span>\n                <span class=\"k\">except</span> <span class=\"ne\">IndexError</span><span class=\"p\">:</span>\n                    <span class=\"k\">continue</span>\n                    <span class=\"c1\"># diff = 0  # np.nan</span>\n            <span class=\"n\">top_scores</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">annot_scores</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n            <span class=\"n\">score_diffs</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">diff</span><span class=\"p\">)</span>\n        <span class=\"n\">score_diffs</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">score_diffs</span><span class=\"p\">)</span>\n        <span class=\"n\">top_scores</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">top_scores</span><span class=\"p\">)</span>\n\n        <span class=\"n\">succ</span> <span class=\"o\">=</span> <span class=\"n\">score_diffs</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span>\n        <span class=\"n\">fail</span> <span class=\"o\">=</span> <span class=\"n\">score_diffs</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span>\n\n        <span class=\"c1\"># succ = testres.get_truth2_prop()[0][&#39;gt&#39;][&#39;rank&#39;][:, 0] == 0</span>\n        <span class=\"c1\"># fail = testres.get_truth2_prop()[0][&#39;gt&#39;][&#39;rank&#39;][:, 0] != 0</span>\n\n        <span class=\"c1\">#fail = np.where(testres.get_truth2_prop()[0][&#39;gt&#39;][&#39;score&#39;][:, 0] != 0)</span>\n        <span class=\"n\">width</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"mi\">25</span>\n        <span class=\"n\">succ_max</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">score_diffs</span><span class=\"p\">[</span><span class=\"n\">succ</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">())</span>\n        <span class=\"n\">fail_max</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">score_diffs</span><span class=\"p\">[</span><span class=\"n\">fail</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">min</span><span class=\"p\">())</span>\n        <span class=\"n\">num_succ_bins</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">succ_max</span> <span class=\"o\">/</span> <span class=\"n\">width</span><span class=\"p\">)</span>\n        <span class=\"n\">num_fail_bins</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">fail_max</span> <span class=\"o\">/</span> <span class=\"n\">width</span><span class=\"p\">)</span>\n        <span class=\"n\">succ_bins</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">succ_max</span><span class=\"p\">,</span> <span class=\"n\">num_succ_bins</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">fail_bins</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">fail_max</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">num_fail_bins</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;succ_bins = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">succ_bins</span><span class=\"p\">,))</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;fail_bins = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">fail_bins</span><span class=\"p\">,))</span>\n        <span class=\"n\">succ_hist</span><span class=\"p\">,</span> <span class=\"n\">succ_edges</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">histogram</span><span class=\"p\">(</span><span class=\"n\">score_diffs</span><span class=\"p\">[</span><span class=\"n\">succ</span><span class=\"p\">],</span> <span class=\"n\">bins</span><span class=\"o\">=</span><span class=\"n\">succ_bins</span><span class=\"p\">)</span>\n        <span class=\"n\">fail_hist</span><span class=\"p\">,</span> <span class=\"n\">fail_edges</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">histogram</span><span class=\"p\">(</span><span class=\"n\">score_diffs</span><span class=\"p\">[</span><span class=\"n\">fail</span><span class=\"p\">],</span> <span class=\"n\">bins</span><span class=\"o\">=</span><span class=\"n\">fail_bins</span><span class=\"p\">)</span>\n        <span class=\"c1\">#bin_max = (score_diffs.max() - score_diffs.min()) / 50</span>\n\n        <span class=\"n\">ydata_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">succ_hist</span><span class=\"p\">,</span> <span class=\"n\">fail_hist</span><span class=\"p\">]</span>\n        <span class=\"n\">bins_list</span>  <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">succ_bins</span><span class=\"p\">,</span> <span class=\"n\">fail_bins</span><span class=\"p\">]</span>\n        <span class=\"c1\"># xdata_list = [(bins[:-1] + bins[1:]) / 2 for bins in bins_list]</span>\n        <span class=\"n\">xdata_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">bins</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">bins</span> <span class=\"ow\">in</span> <span class=\"n\">bins_list</span><span class=\"p\">]</span>\n        <span class=\"n\">width_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">bins</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">bins</span> <span class=\"ow\">in</span> <span class=\"n\">bins_list</span><span class=\"p\">]</span>\n\n        <span class=\"c1\"># nbins = 8</span>\n        <span class=\"c1\">#bin_width = (score_diffs.mean() + score_diffs.std()) / nbins</span>\n        <span class=\"c1\">#bin_width = int(np.ceil((score_diffs.mean() + score_diffs.std() / 4) / nbins))</span>\n        <span class=\"c1\"># bin_width = 1</span>\n        <span class=\"c1\"># bins = np.arange(nbins) * bin_width</span>\n        <span class=\"c1\"># succ_hist, succ_edges = np.histogram(score_diffs[succ], bins=bins)</span>\n        <span class=\"c1\"># fail_hist, fail_edges = np.histogram(score_diffs[fail], bins=bins)</span>\n        <span class=\"c1\"># hist, edges = np.histogram(score_diffs)</span>\n        <span class=\"c1\"># print(&#39;hist = %r&#39; % (hist,))</span>\n        <span class=\"c1\"># ymax = max(max(succ_hist), max(fail_hist)) * 1.1</span>\n\n        <span class=\"n\">species</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_dominant_species</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">qaids</span><span class=\"p\">)</span>\n        <span class=\"n\">species_nice</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_species_nice</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_species_rowids_from_text</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_dominant_species</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">qaids</span><span class=\"p\">)))</span>\n        <span class=\"n\">species_nice</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;zebra_grevys&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Grevy</span><span class=\"se\">\\&#39;</span><span class=\"s1\">s Zebras&#39;</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;zebra_plains&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Plains Zebras&#39;</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;giraffe_masai&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Masai Giraffes&#39;</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">species</span><span class=\"p\">,</span> <span class=\"n\">species_nice</span><span class=\"p\">)</span>\n\n        <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">multi_plot</span><span class=\"p\">(</span>\n            <span class=\"n\">xdata_list</span><span class=\"p\">,</span>\n            <span class=\"n\">ydata_list</span><span class=\"p\">,</span>\n            <span class=\"n\">label_list</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;correct match at rank 1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;correct match above rank 1&#39;</span><span class=\"p\">],</span>\n            <span class=\"n\">width_list</span><span class=\"o\">=</span><span class=\"n\">width_list</span><span class=\"p\">,</span>\n            <span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">next_fnum</span><span class=\"p\">(),</span>\n            <span class=\"n\">color_list</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">TRUE_BLUE</span><span class=\"p\">,</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">FALSE_RED</span><span class=\"p\">],</span> <span class=\"n\">kind</span><span class=\"o\">=</span><span class=\"s1\">&#39;bar&#39;</span><span class=\"p\">,</span>\n            <span class=\"n\">alpha</span><span class=\"o\">=.</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"n\">stacked</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"n\">edgecolor</span><span class=\"o\">=</span><span class=\"s1\">&#39;none&#39;</span><span class=\"p\">,</span> <span class=\"n\">xlabel</span><span class=\"o\">=</span><span class=\"s1\">&#39;difference between the best correct score and the best incorrect score&#39;</span><span class=\"p\">,</span>\n            <span class=\"n\">ylabel</span><span class=\"o\">=</span><span class=\"s1\">&#39;frequency (number of query annotations)&#39;</span><span class=\"p\">,</span>\n            <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">&#39;Score differences for </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">species_nice</span><span class=\"p\">,),</span>\n            <span class=\"n\">xmin</span><span class=\"o\">=-</span><span class=\"mi\">10</span><span class=\"p\">,</span>\n            <span class=\"n\">xmax</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">,</span>\n            <span class=\"n\">use_legend</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"c1\"># fnum = pt.next_fnum()</span>\n        <span class=\"c1\"># pt.plot_score_histograms(</span>\n        <span class=\"c1\">#     [score_diffs[succ], score_diffs[fail]],</span>\n        <span class=\"c1\">#     fnum=fnum,</span>\n        <span class=\"c1\">#     score_colors=[pt.TRUE_BLUE, pt.FALSE_RED],</span>\n        <span class=\"c1\">#     score_lbls=[&#39;correct&#39;, &#39;incorrect&#39;],</span>\n        <span class=\"c1\">#     bin_width=.5,</span>\n        <span class=\"c1\">#     # histnorm=&#39;percent&#39;,</span>\n        <span class=\"c1\"># )</span>\n\n        <span class=\"c1\"># pt.draw_histogram(succ_edges, succ_hist, xlabel=&#39;1st - 2nd score&#39;,</span>\n        <span class=\"c1\">#                   autolabel=False, color=&#39;blue&#39;, title=&#39;Success Cases&#39;,</span>\n        <span class=\"c1\">#                   ymax=ymax, pnum=(1, 2, 1), fnum=fnum)</span>\n        <span class=\"c1\"># pt.draw_histogram(fail_edges, fail_hist, xlabel=&#39;1st - 2nd score&#39;,</span>\n        <span class=\"c1\">#                   autolabel=False, title=&#39;Failure Cases&#39;, ymax=ymax,</span>\n        <span class=\"c1\">#                   pnum=(1, 2, 2), fnum=fnum)</span>\n\n        <span class=\"kn\">from</span> <span class=\"nn\">plottool.abstract_interaction</span> <span class=\"k\">import</span> <span class=\"n\">AbstractInteraction</span>\n\n        <span class=\"k\">class</span> <span class=\"nc\">SortedScoreSupportInteraction</span><span class=\"p\">(</span><span class=\"n\">AbstractInteraction</span><span class=\"p\">):</span>\n\n            <span class=\"nd\">@staticmethod</span>\n            <span class=\"k\">def</span> <span class=\"nf\">static_plot</span><span class=\"p\">(</span><span class=\"n\">fnum</span><span class=\"p\">,</span> <span class=\"n\">pnum</span><span class=\"p\">):</span>\n                <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"mi\">20</span>\n                <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">scatter</span><span class=\"p\">(</span><span class=\"n\">top_scores</span><span class=\"p\">[</span><span class=\"n\">succ</span><span class=\"p\">],</span> <span class=\"n\">score_diffs</span><span class=\"p\">[</span><span class=\"n\">succ</span><span class=\"p\">],</span> <span class=\"n\">marker</span><span class=\"o\">=</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span>  <span class=\"n\">s</span><span class=\"o\">=</span><span class=\"n\">s</span><span class=\"p\">)</span>\n                <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">scatter</span><span class=\"p\">(</span><span class=\"n\">top_scores</span><span class=\"p\">[</span><span class=\"n\">fail</span><span class=\"p\">],</span> <span class=\"n\">score_diffs</span><span class=\"p\">[</span><span class=\"n\">fail</span><span class=\"p\">],</span> <span class=\"n\">marker</span><span class=\"o\">=</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">&#39;r&#39;</span><span class=\"p\">,</span>  <span class=\"n\">s</span><span class=\"o\">=</span><span class=\"n\">s</span><span class=\"p\">)</span>\n\n                <span class=\"n\">flags</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">filterflags_annot_tags</span><span class=\"p\">(</span><span class=\"n\">aid_list</span><span class=\"p\">,</span> <span class=\"n\">has_any</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;photobomb&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;scenerymatch&#39;</span><span class=\"p\">])</span>\n                <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">scatter</span><span class=\"p\">(</span><span class=\"n\">top_scores</span><span class=\"p\">[</span><span class=\"n\">succ</span> <span class=\"o\">*</span> <span class=\"n\">flags</span><span class=\"p\">],</span> <span class=\"n\">score_diffs</span><span class=\"p\">[</span><span class=\"n\">succ</span> <span class=\"o\">*</span> <span class=\"n\">flags</span><span class=\"p\">],</span> <span class=\"n\">marker</span><span class=\"o\">=</span><span class=\"s1\">&#39;o&#39;</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">&#39;y&#39;</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"o\">=</span><span class=\"n\">s</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">facecolors</span><span class=\"o\">=</span><span class=\"s1\">&#39;none&#39;</span><span class=\"p\">)</span>\n                <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">scatter</span><span class=\"p\">(</span><span class=\"n\">top_scores</span><span class=\"p\">[</span><span class=\"n\">fail</span> <span class=\"o\">*</span> <span class=\"n\">flags</span><span class=\"p\">],</span> <span class=\"n\">score_diffs</span><span class=\"p\">[</span><span class=\"n\">fail</span> <span class=\"o\">*</span> <span class=\"n\">flags</span><span class=\"p\">],</span> <span class=\"n\">marker</span><span class=\"o\">=</span><span class=\"s1\">&#39;o&#39;</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">&#39;y&#39;</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"o\">=</span><span class=\"n\">s</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">facecolors</span><span class=\"o\">=</span><span class=\"s1\">&#39;none&#39;</span><span class=\"p\">)</span>\n                <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">set_xlabel</span><span class=\"p\">(</span><span class=\"s1\">&#39;top score&#39;</span><span class=\"p\">)</span>\n                <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">set_ylabel</span><span class=\"p\">(</span><span class=\"s1\">&#39;score diff&#39;</span><span class=\"p\">)</span>\n\n            <span class=\"k\">def</span> <span class=\"nf\">on_click_inside</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">ex</span><span class=\"p\">):</span>\n                <span class=\"kn\">import</span> <span class=\"nn\">vtool</span> <span class=\"k\">as</span> <span class=\"nn\">vt</span>\n                <span class=\"c1\">#ax = event.inaxes</span>\n                <span class=\"c1\">#for l in ax.get_lines():</span>\n                <span class=\"c1\">#    print(l.get_label())</span>\n                <span class=\"n\">pts</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"n\">top_scores</span><span class=\"p\">,</span> <span class=\"n\">score_diffs</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">T</span>\n                <span class=\"n\">idx</span><span class=\"p\">,</span> <span class=\"n\">dist</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">closest_point</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">xdata</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">ydata</span><span class=\"p\">]),</span> <span class=\"n\">pts</span><span class=\"p\">)</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;idx = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">idx</span><span class=\"p\">,))</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;dist = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">dist</span><span class=\"p\">,))</span>\n                <span class=\"n\">aid</span> <span class=\"o\">=</span> <span class=\"n\">aid_list</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;aid = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">aid</span><span class=\"p\">,))</span>\n                <span class=\"k\">if</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">button</span> <span class=\"o\">==</span> <span class=\"mi\">3</span><span class=\"p\">:</span>   <span class=\"c1\"># right-click</span>\n                    <span class=\"n\">cm</span> <span class=\"o\">=</span> <span class=\"n\">cm_list</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span>\n                    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.gui</span> <span class=\"k\">import</span> <span class=\"n\">inspect_gui</span>\n                    <span class=\"n\">qaid</span> <span class=\"o\">=</span> <span class=\"n\">aid</span>\n                    <span class=\"n\">qreq_</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_qreq_</span><span class=\"p\">[</span><span class=\"n\">cfgx</span><span class=\"p\">]</span>\n                    <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">ibs</span>\n\n                    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">daid_list</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                        <span class=\"n\">daid</span> <span class=\"o\">=</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">get_top_aids</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n                        <span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                            <span class=\"p\">(</span><span class=\"s1\">&#39;Interact Analysis&#39;</span><span class=\"p\">,</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">ishow_analysis</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"p\">))</span>\n                        <span class=\"p\">]</span>\n\n                        <span class=\"n\">options</span> <span class=\"o\">+=</span> <span class=\"n\">inspect_gui</span><span class=\"o\">.</span><span class=\"n\">get_aidpair_context_menu_options</span><span class=\"p\">(</span>\n                            <span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">qaid</span><span class=\"p\">,</span> <span class=\"n\">daid</span><span class=\"p\">,</span> <span class=\"n\">cm</span><span class=\"p\">,</span>\n                            <span class=\"n\">qreq_</span><span class=\"o\">=</span><span class=\"n\">qreq_</span><span class=\"p\">)</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39; no matches for this one&#39;</span><span class=\"p\">)</span>\n                    <span class=\"c1\">#update_callback=self.show_page,</span>\n                    <span class=\"c1\">#backend_callback=None, aid_list=aid_list)</span>\n\n                    <span class=\"c1\">#from ibeis.viz.interact import interact_chip</span>\n                    <span class=\"c1\">#options = interact_chip.build_annot_context_options(</span>\n                    <span class=\"c1\">#    testres.ibs, aid, refresh_func=self.show_page, config2_=.extern_query_config2)</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">show_popup_menu</span><span class=\"p\">(</span><span class=\"n\">options</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">)</span></div>\n\n        <span class=\"c1\"># x = SortedScoreSupportInteraction()</span>\n        <span class=\"c1\"># x.start()</span>\n        <span class=\"c1\"># pt.interactions.zoom_factory()</span>\n\n\n<span class=\"c1\">#@devcmd(&#39;scores&#39;, &#39;score&#39;, &#39;namescore_roc&#39;)</span>\n<div class=\"viewcode-block\" id=\"draw_annot_scoresep\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.experiment_drawing.draw_annot_scoresep\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">draw_annot_scoresep</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">testres</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Draws the separation between true positive and true negative name scores.</span>\n\n<span class=\"sd\">    TODO:</span>\n<span class=\"sd\">        plot the difference between the top true score and the next best false score?</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        ib</span>\n<span class=\"sd\">        python -m ibeis draw_annot_scoresep --show</span>\n<span class=\"sd\">        python -m ibeis draw_annot_scoresep --db PZ_MTEST --allgt -w --show --serial</span>\n<span class=\"sd\">        python -m ibeis draw_annot_scoresep -t scores --db PZ_MTEST --allgt --show</span>\n<span class=\"sd\">        python -m ibeis draw_annot_scoresep -t scores --db PZ_Master0 --allgt --show</span>\n<span class=\"sd\">        python -m ibeis draw_annot_scoresep --db PZ_Master1 -a timectrl -t best --show</span>\n<span class=\"sd\">        python -m ibeis draw_annot_scoresep --db PZ_Master1 -a timectrl -t best --show -f :without_tag=photobomb</span>\n\n<span class=\"sd\">    Paper:</span>\n<span class=\"sd\">        python -m ibeis draw_annot_scoresep --dbdir lev/media/hdd/golden/GGR-IBEIS  -a timectrl --save gz_scoresep.png</span>\n<span class=\"sd\">        python -m ibeis draw_annot_scoresep --dbdir lev/media/hdd/golden/GZGC -a timectrl:species=zebra_plains --save pz_scoresep.png</span>\n<span class=\"sd\">        python -m ibeis draw_annot_scoresep --dbdir lev/media/hdd/golden/GZGC -a timectrl1h:species=giraffe_masai --save girm_scoresep.png</span>\n\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.expt.experiment_drawing import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.init import main_helpers</span>\n<span class=\"sd\">        &gt;&gt;&gt; defaultdb = &#39;PZ_MTEST&#39;</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs, testres = main_helpers.testdata_expts(defaultdb, a=[&#39;timectrl&#39;], t=[&#39;best&#39;])</span>\n<span class=\"sd\">        &gt;&gt;&gt; f = ut.get_argval((&#39;--filt&#39;, &#39;-f&#39;), type_=list, default=[&#39;&#39;])</span>\n<span class=\"sd\">        &gt;&gt;&gt; draw_annot_scoresep(ibs, testres, f=f, verbose=ut.VERBOSE)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.show_if_requested()</span>\n\n<span class=\"sd\">    Ignore:</span>\n<span class=\"sd\">        import IPython</span>\n<span class=\"sd\">        IPython.get_ipython().magic(&#39;pylab qt4&#39;)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">plottool</span> <span class=\"k\">as</span> <span class=\"nn\">pt</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">vtool</span> <span class=\"k\">as</span> <span class=\"nn\">vt</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.expt</span> <span class=\"k\">import</span> <span class=\"n\">cfghelpers</span>\n    <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">VERBOSE</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[dev] draw_annot_scoresep&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">f</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">]</span>\n    <span class=\"n\">filt_cfg</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">cfghelpers</span><span class=\"o\">.</span><span class=\"n\">parse_cfgstr_list2</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">))[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;filt_cfg = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">filt_cfg</span><span class=\"p\">,))</span>\n\n    <span class=\"c1\">#assert len(testres.cfgx2_qreq_) == 1, &#39;can only specify one config here&#39;</span>\n    <span class=\"n\">test_qaids</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_test_qaids</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># TODO: option to group configs with same pcfg and different acfg</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">load_annot_scores</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">,</span> <span class=\"n\">cfgx</span><span class=\"p\">,</span> <span class=\"n\">filt_cfg</span><span class=\"p\">):</span>\n        <span class=\"n\">qaids</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_qaids</span><span class=\"p\">[</span><span class=\"n\">cfgx</span><span class=\"p\">]</span>\n        <span class=\"n\">gt_rawscore</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_infoprop_mat</span><span class=\"p\">(</span><span class=\"s1\">&#39;qx2_gt_raw_score&#39;</span><span class=\"p\">,</span> <span class=\"n\">qaids</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">cfgx</span><span class=\"p\">]</span>\n        <span class=\"n\">gf_rawscore</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_infoprop_mat</span><span class=\"p\">(</span><span class=\"s1\">&#39;qx2_gf_raw_score&#39;</span><span class=\"p\">,</span> <span class=\"n\">qaids</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">cfgx</span><span class=\"p\">]</span>\n\n        <span class=\"n\">gt_daid</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_infoprop_mat</span><span class=\"p\">(</span><span class=\"s1\">&#39;qx2_gt_aid&#39;</span><span class=\"p\">,</span> <span class=\"n\">qaids</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">cfgx</span><span class=\"p\">]</span>\n        <span class=\"n\">gf_daid</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_infoprop_mat</span><span class=\"p\">(</span><span class=\"s1\">&#39;qx2_gf_aid&#39;</span><span class=\"p\">,</span> <span class=\"n\">qaids</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">cfgx</span><span class=\"p\">]</span>\n\n        <span class=\"c1\"># FIXME: may need to specify which cfg is used in the future</span>\n        <span class=\"n\">isvalid</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">case_sample2</span><span class=\"p\">(</span><span class=\"n\">filt_cfg</span><span class=\"p\">,</span> <span class=\"n\">qaids</span><span class=\"o\">=</span><span class=\"n\">qaids</span><span class=\"p\">,</span> <span class=\"n\">return_mask</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">cfgx</span><span class=\"p\">]</span>\n\n        <span class=\"n\">isvalid</span><span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">isnan</span><span class=\"p\">(</span><span class=\"n\">gf_rawscore</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"n\">isvalid</span><span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">isnan</span><span class=\"p\">(</span><span class=\"n\">gt_rawscore</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n        <span class=\"n\">tp_nscores</span> <span class=\"o\">=</span> <span class=\"n\">gt_rawscore</span><span class=\"p\">[</span><span class=\"n\">isvalid</span><span class=\"p\">]</span>\n        <span class=\"n\">tn_nscores</span> <span class=\"o\">=</span> <span class=\"n\">gf_rawscore</span><span class=\"p\">[</span><span class=\"n\">isvalid</span><span class=\"p\">]</span>\n\n        <span class=\"c1\"># ---</span>\n        <span class=\"n\">tn_qaids</span> <span class=\"o\">=</span> <span class=\"n\">tp_qaids</span> <span class=\"o\">=</span> <span class=\"n\">test_qaids</span><span class=\"p\">[</span><span class=\"n\">isvalid</span><span class=\"p\">]</span>\n        <span class=\"n\">tn_daids</span> <span class=\"o\">=</span> <span class=\"n\">gf_daid</span><span class=\"p\">[</span><span class=\"n\">isvalid</span><span class=\"p\">]</span>\n        <span class=\"n\">tp_daids</span> <span class=\"o\">=</span> <span class=\"n\">gt_daid</span><span class=\"p\">[</span><span class=\"n\">isvalid</span><span class=\"p\">]</span>\n\n        <span class=\"n\">part_attrs</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;qaid&#39;</span><span class=\"p\">:</span> <span class=\"n\">tp_qaids</span><span class=\"p\">,</span> <span class=\"s1\">&#39;daid&#39;</span><span class=\"p\">:</span> <span class=\"n\">tn_daids</span><span class=\"p\">},</span>\n                      <span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;qaid&#39;</span><span class=\"p\">:</span> <span class=\"n\">tn_qaids</span><span class=\"p\">,</span> <span class=\"s1\">&#39;daid&#39;</span><span class=\"p\">:</span> <span class=\"n\">tp_daids</span><span class=\"p\">}}</span>\n        <span class=\"k\">return</span> <span class=\"n\">tp_nscores</span><span class=\"p\">,</span> <span class=\"n\">tn_nscores</span><span class=\"p\">,</span> <span class=\"n\">part_attrs</span>\n\n    <span class=\"n\">join_acfgs</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"k\">if</span> <span class=\"n\">join_acfgs</span><span class=\"p\">:</span>\n        <span class=\"n\">groupxs</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_cfgx_groupxs</span><span class=\"p\">()</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">groupxs</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_qreq_</span><span class=\"p\">))))</span>\n    <span class=\"n\">grouped_qreqs</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">apply_grouping</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_qreq_</span><span class=\"p\">,</span> <span class=\"n\">groupxs</span><span class=\"p\">)</span>\n    <span class=\"n\">cfgx2_shortlbl</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_short_cfglbls</span><span class=\"p\">(</span><span class=\"n\">join_acfgs</span><span class=\"o\">=</span><span class=\"n\">join_acfgs</span><span class=\"p\">)</span>\n\n    <span class=\"n\">grouped_scores</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">cfgxs</span> <span class=\"ow\">in</span> <span class=\"n\">groupxs</span><span class=\"p\">:</span>\n        <span class=\"c1\"># testres.print_pcfg_info()</span>\n        <span class=\"n\">score_group</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">cfgx</span> <span class=\"ow\">in</span> <span class=\"n\">cfgxs</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Loading cached chipmatches&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">tp_scores</span><span class=\"p\">,</span> <span class=\"n\">tn_scores</span><span class=\"p\">,</span> <span class=\"n\">part_attrs</span> <span class=\"o\">=</span> <span class=\"n\">load_annot_scores</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">,</span> <span class=\"n\">cfgx</span><span class=\"p\">,</span> <span class=\"n\">filt_cfg</span><span class=\"p\">)</span>\n            <span class=\"n\">score_group</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">tp_scores</span><span class=\"p\">,</span> <span class=\"n\">tn_scores</span><span class=\"p\">,</span> <span class=\"n\">part_attrs</span><span class=\"p\">))</span>\n        <span class=\"n\">grouped_scores</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">score_group</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">attr_callback</span><span class=\"p\">(</span><span class=\"n\">qaid</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;callback qaid = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">qaid</span><span class=\"p\">,))</span>\n        <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">interact_individual_result</span><span class=\"p\">(</span><span class=\"n\">qaid</span><span class=\"p\">)</span>\n        <span class=\"n\">reconstruct_str</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;python -m ibeis.dev -e cases &#39;</span> <span class=\"o\">+</span>\n                           <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">reconstruct_test_flags</span><span class=\"p\">()</span> <span class=\"o\">+</span>\n                           <span class=\"s1\">&#39; --qaid &#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">qaid</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s1\">&#39; --show&#39;</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Independent reconstruct&#39;</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">reconstruct_str</span><span class=\"p\">)</span>\n    <span class=\"n\">fpr</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argval</span><span class=\"p\">(</span><span class=\"s1\">&#39;--fpr&#39;</span><span class=\"p\">,</span> <span class=\"n\">type_</span><span class=\"o\">=</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n    <span class=\"n\">tpr</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argval</span><span class=\"p\">(</span><span class=\"s1\">&#39;--tpr&#39;</span><span class=\"p\">,</span> <span class=\"n\">type_</span><span class=\"o\">=</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">None</span> <span class=\"k\">if</span> <span class=\"n\">fpr</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"k\">else</span> <span class=\"o\">.</span><span class=\"mi\">85</span><span class=\"p\">)</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">score_group</span><span class=\"p\">,</span> <span class=\"n\">lbl</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">grouped_scores</span><span class=\"p\">,</span> <span class=\"n\">cfgx2_shortlbl</span><span class=\"p\">):</span>\n        <span class=\"n\">tp_nscores</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">hstack</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take_column</span><span class=\"p\">(</span><span class=\"n\">score_group</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n        <span class=\"n\">tn_nscores</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">hstack</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take_column</span><span class=\"p\">(</span><span class=\"n\">score_group</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n        <span class=\"n\">combine_attrs</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dict_union_combine</span><span class=\"p\">,</span>\n                                   <span class=\"n\">combine_op</span><span class=\"o\">=</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dict_union_combine</span><span class=\"p\">,</span>\n                                                         <span class=\"n\">combine_op</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">))</span>\n        <span class=\"n\">part_attrs</span> <span class=\"o\">=</span> <span class=\"n\">reduce</span><span class=\"p\">(</span><span class=\"n\">combine_attrs</span><span class=\"p\">,</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take_column</span><span class=\"p\">(</span><span class=\"n\">score_group</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n        <span class=\"c1\">#encoder = vt.ScoreNormalizer(adjust=8, tpr=.85)</span>\n        <span class=\"n\">encoder</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">ScoreNormalizer</span><span class=\"p\">(</span>\n            <span class=\"c1\">#adjust=8,</span>\n            <span class=\"n\">adjust</span><span class=\"o\">=</span><span class=\"mf\">1.5</span><span class=\"p\">,</span>\n            <span class=\"c1\">#fpr=fpr, tpr=tpr,</span>\n            <span class=\"n\">monotonize</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">verbose</span><span class=\"p\">)</span>\n        <span class=\"n\">tp_scores</span> <span class=\"o\">=</span> <span class=\"n\">tp_nscores</span>\n        <span class=\"n\">tn_scores</span> <span class=\"o\">=</span> <span class=\"n\">tn_nscores</span>\n        <span class=\"n\">name_scores</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"p\">,</span> <span class=\"n\">attrs</span> <span class=\"o\">=</span> <span class=\"n\">encoder</span><span class=\"o\">.</span><span class=\"n\">_to_xy</span><span class=\"p\">(</span><span class=\"n\">tp_nscores</span><span class=\"p\">,</span> <span class=\"n\">tn_nscores</span><span class=\"p\">,</span> <span class=\"n\">part_attrs</span><span class=\"p\">)</span>\n\n        <span class=\"n\">encoder</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">name_scores</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"p\">,</span> <span class=\"n\">attrs</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">verbose</span><span class=\"p\">)</span>\n        <span class=\"c1\">#encoder.visualize(figtitle=&#39;Learned Name Score Normalizer\\n&#39; + qreq_.get_cfgstr())</span>\n        <span class=\"c1\">#encoder.visualize(figtitle=&#39;Learned Name Score Normalizer\\n&#39; + qreq_.get_cfgstr(), fnum=cfgx)</span>\n        <span class=\"c1\">#pt.set_figsize(w=30, h=10, dpi=256)</span>\n\n        <span class=\"n\">plotname</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>\n        <span class=\"n\">figtitle</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">make_figtitle</span><span class=\"p\">(</span><span class=\"n\">plotname</span><span class=\"p\">,</span> <span class=\"n\">filt_cfg</span><span class=\"o\">=</span><span class=\"n\">filt_cfg</span><span class=\"p\">)</span>\n\n        <span class=\"n\">encoder</span><span class=\"o\">.</span><span class=\"n\">visualize</span><span class=\"p\">(</span>\n            <span class=\"n\">figtitle</span><span class=\"o\">=</span><span class=\"n\">figtitle</span><span class=\"p\">,</span>\n            <span class=\"c1\">#</span>\n            <span class=\"n\">with_scores</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n            <span class=\"n\">with_prebayes</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n            <span class=\"n\">with_postbayes</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n            <span class=\"c1\">#</span>\n            <span class=\"n\">histnorm</span><span class=\"o\">=</span><span class=\"s1\">&#39;percent&#39;</span><span class=\"p\">,</span>\n            <span class=\"n\">histoverlay</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n            <span class=\"n\">with_hist</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"n\">with_roc</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n            <span class=\"n\">attr_callback</span><span class=\"o\">=</span><span class=\"n\">attr_callback</span><span class=\"p\">,</span>\n            <span class=\"c1\">#bin_width=.125,</span>\n            <span class=\"c1\">#bin_width=.05,</span>\n            <span class=\"c1\"># logscale=dict(linthreshx=1, linthreshy=1, basex=2, basey=0),</span>\n            <span class=\"c1\"># score_range=(0, 14),</span>\n            <span class=\"c1\"># score_range=(0, 10),</span>\n            <span class=\"n\">score_range</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">),</span>\n            <span class=\"c1\"># bin_width=.5,</span>\n            <span class=\"n\">bin_width</span><span class=\"o\">=.</span><span class=\"mi\">125</span><span class=\"p\">,</span>\n            <span class=\"n\">score_lbls</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;incorrect&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;correct&#39;</span><span class=\"p\">),</span>\n            <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">verbose</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">icon</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_database_icon</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"kc\">False</span> <span class=\"ow\">and</span> <span class=\"n\">icon</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">overlay_icon</span><span class=\"p\">(</span><span class=\"n\">icon</span><span class=\"p\">,</span> <span class=\"n\">coords</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">bbox_alignment</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span>\n                            <span class=\"n\">as_artist</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">max_asize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">2000</span><span class=\"p\">))</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argflag</span><span class=\"p\">(</span><span class=\"s1\">&#39;--contextadjust&#39;</span><span class=\"p\">):</span>\n            <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">adjust_subplots</span><span class=\"p\">(</span><span class=\"n\">left</span><span class=\"o\">=.</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">bottom</span><span class=\"o\">=.</span><span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"n\">wspace</span><span class=\"o\">=.</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">hspace</span><span class=\"o\">=.</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n            <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">adjust_subplots</span><span class=\"p\">(</span><span class=\"n\">use_argv</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"c1\"># pt.set_figsize(w=30, h=10, dpi=256)</span>\n        <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">set_figtitle</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_dbname</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"s1\">&#39; &#39;</span> <span class=\"o\">+</span> <span class=\"n\">lbl</span><span class=\"p\">)</span>\n\n    <span class=\"n\">locals_</span> <span class=\"o\">=</span> <span class=\"nb\">locals</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">locals_</span></div>\n\n\n<div class=\"viewcode-block\" id=\"draw_casetag_hist\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.experiment_drawing.draw_casetag_hist\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">draw_casetag_hist</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">testres</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">with_wordcloud</span><span class=\"o\">=</span><span class=\"ow\">not</span>\n                      <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argflag</span><span class=\"p\">(</span><span class=\"s1\">&#39;--no-wordcloud&#39;</span><span class=\"p\">)):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (ibeis.IBEISController):  ibeis controller object</span>\n<span class=\"sd\">        testres (TestResult):  test result object</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        ibeis --tf -draw_casetag_hist --show</span>\n\n<span class=\"sd\">        # Experiments I tagged</span>\n<span class=\"sd\">        ibeis --tf -draw_casetag_hist -a timectrl -t invarbest --db PZ_Master1  --show</span>\n\n<span class=\"sd\">        ibeis -e taghist -a timectrl -t best --db PZ_Master1  --show</span>\n\n<span class=\"sd\">        ibeis -e taghist -a timequalctrl -t invarbest --db PZ_Master1  --show</span>\n<span class=\"sd\">        ibeis -e taghist -a timequalctrl:minqual=good -t invarbest --db PZ_Master1  --show</span>\n<span class=\"sd\">        ibeis -e taghist -a timequalctrl:minqual=good -t invarbest --db PZ_Master1  --show --filt :fail=True</span>\n\n<span class=\"sd\">        # Do more tagging</span>\n<span class=\"sd\">        ibeis -e cases -a timequalctrl:minqual=good -t invarbest --db PZ_Master1 \\</span>\n<span class=\"sd\">            --filt :orderby=gfscore,reverse=1,min_gtrank=1,max_gf_tags=0 --show</span>\n<span class=\"sd\">        ibeis -e print -a timequalctrl:minqual=good -t invarbest --db PZ_Master1 --show</span>\n<span class=\"sd\">        ibeis -e cases -a timequalctrl -t invarbest --db PZ_Master1 \\</span>\n<span class=\"sd\">            --filt :orderby=gfscore,reverse=1,max_gf_tags=0,:fail=True,min_gf_timedelta=12h --show</span>\n\n<span class=\"sd\">        ibeis -e cases -a timequalctrl -t invarbest --db PZ_Master1 \\</span>\n<span class=\"sd\">            --filt :orderby=gfscore,reverse=1,max_gf_tags=0,:fail=True,min_gf_timedelta=12h --show</span>\n<span class=\"sd\">        python -m ibeis -e taghist --db PZ_Master1 -a timectrl -t best \\</span>\n<span class=\"sd\">            --filt :fail=True --no-wordcloud --hargv=tags  --prefix &quot;Failure Case &quot; --label PZTags  --figsize=10,3  --left=.2</span>\n\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.expt.experiment_drawing import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.init import main_helpers</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs, testres = main_helpers.testdata_expts(&#39;PZ_Master1&#39;, a=[&#39;timequalcontrolled&#39;])</span>\n<span class=\"sd\">        &gt;&gt;&gt; f = ut.get_argval((&#39;--filt&#39;, &#39;-f&#39;), type_=list, default=[&#39;&#39;])</span>\n<span class=\"sd\">        &gt;&gt;&gt; draw_casetag_hist(ibs, testres, f=f)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.show_if_requested()</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">plottool</span> <span class=\"k\">as</span> <span class=\"nn\">pt</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis</span> <span class=\"k\">import</span> <span class=\"n\">tag_funcs</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.expt</span> <span class=\"k\">import</span> <span class=\"n\">cfghelpers</span>\n    <span class=\"c1\"># All unfiltered tags</span>\n    <span class=\"n\">all_tags</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_all_tags</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Remove gf tags below a thresh and gt tags above a thresh</span>\n        <span class=\"n\">gt_tags</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_gt_tags</span><span class=\"p\">()</span>\n        <span class=\"n\">gf_tags</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_gf_tags</span><span class=\"p\">()</span>\n        <span class=\"n\">truth2_prop</span><span class=\"p\">,</span> <span class=\"n\">prop2_mat</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_truth2_prop</span><span class=\"p\">()</span>\n        <span class=\"n\">score_thresh</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">find_score_thresh_cutoff</span><span class=\"p\">()</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;score_thresh = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">score_thresh</span><span class=\"p\">,))</span>\n        <span class=\"c1\"># TODO: I want the point that the prob true is greater than prob false</span>\n        <span class=\"n\">gt_is_problem</span> <span class=\"o\">=</span> <span class=\"n\">truth2_prop</span><span class=\"p\">[</span><span class=\"s1\">&#39;gt&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;score&#39;</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">score_thresh</span>\n        <span class=\"n\">gf_is_problem</span> <span class=\"o\">=</span> <span class=\"n\">truth2_prop</span><span class=\"p\">[</span><span class=\"s1\">&#39;gf&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;score&#39;</span><span class=\"p\">]</span> <span class=\"o\">&gt;=</span> <span class=\"n\">score_thresh</span>\n        <span class=\"n\">other_is_problem</span> <span class=\"o\">=</span> <span class=\"o\">~</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">logical_or</span><span class=\"p\">(</span><span class=\"n\">gt_is_problem</span><span class=\"p\">,</span> <span class=\"n\">gf_is_problem</span><span class=\"p\">)</span>\n        <span class=\"k\">def</span> <span class=\"nf\">zipmask</span><span class=\"p\">(</span><span class=\"n\">_tags</span><span class=\"p\">,</span> <span class=\"n\">_flags</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"p\">[[</span><span class=\"n\">item</span> <span class=\"k\">if</span> <span class=\"n\">flag</span> <span class=\"k\">else</span> <span class=\"p\">[]</span> <span class=\"k\">for</span> <span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"n\">flag</span>\n                     <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">list_</span><span class=\"p\">,</span> <span class=\"n\">flags</span><span class=\"p\">)]</span> <span class=\"k\">for</span> <span class=\"n\">list_</span><span class=\"p\">,</span>\n                    <span class=\"n\">flags</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">_tags</span><span class=\"p\">,</span> <span class=\"n\">_flags</span><span class=\"p\">)]</span>\n        <span class=\"k\">def</span> <span class=\"nf\">combinetags</span><span class=\"p\">(</span><span class=\"n\">tags1</span><span class=\"p\">,</span> <span class=\"n\">tags2</span><span class=\"p\">):</span>\n            <span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n            <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">list_zipflatten</span><span class=\"p\">(</span><span class=\"n\">t1</span><span class=\"p\">,</span> <span class=\"n\">t2</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">t1</span><span class=\"p\">,</span> <span class=\"n\">t2</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">tags1</span><span class=\"p\">,</span> <span class=\"n\">tags2</span><span class=\"p\">)]</span>\n        <span class=\"n\">gt_problem_tags</span> <span class=\"o\">=</span> <span class=\"n\">zipmask</span><span class=\"p\">(</span><span class=\"n\">gt_tags</span><span class=\"p\">,</span> <span class=\"n\">gt_is_problem</span><span class=\"p\">)</span>\n        <span class=\"n\">gf_problem_tags</span> <span class=\"o\">=</span> <span class=\"n\">zipmask</span><span class=\"p\">(</span><span class=\"n\">gf_tags</span><span class=\"p\">,</span> <span class=\"n\">gf_is_problem</span><span class=\"p\">)</span>\n        <span class=\"n\">other_problem_tags</span> <span class=\"o\">=</span> <span class=\"n\">zipmask</span><span class=\"p\">(</span><span class=\"n\">all_tags</span><span class=\"p\">,</span> <span class=\"n\">other_is_problem</span><span class=\"p\">)</span>\n        <span class=\"n\">all_tags</span> <span class=\"o\">=</span> <span class=\"n\">reduce</span><span class=\"p\">(</span><span class=\"n\">combinetags</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">gt_problem_tags</span><span class=\"p\">,</span> <span class=\"n\">gf_problem_tags</span><span class=\"p\">,</span>\n                                        <span class=\"n\">other_problem_tags</span><span class=\"p\">])</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argflag</span><span class=\"p\">(</span><span class=\"s1\">&#39;--fulltag&#39;</span><span class=\"p\">):</span>\n        <span class=\"n\">all_tags</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">tag_funcs</span><span class=\"o\">.</span><span class=\"n\">consolodate_annotmatch_tags</span><span class=\"p\">(</span><span class=\"n\">tags</span><span class=\"p\">)</span>\n                    <span class=\"k\">for</span> <span class=\"n\">tags</span> <span class=\"ow\">in</span> <span class=\"n\">all_tags</span><span class=\"p\">]</span>\n    <span class=\"c1\"># Get tags that match the filter</span>\n    <span class=\"k\">if</span> <span class=\"n\">f</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">]</span>\n    <span class=\"n\">filt_cfg</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">cfghelpers</span><span class=\"o\">.</span><span class=\"n\">parse_cfgstr_list2</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">))[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"n\">case_pos_list</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">case_sample2</span><span class=\"p\">(</span><span class=\"n\">filt_cfg</span><span class=\"p\">)</span>\n    <span class=\"n\">case_qx_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">unique_ordered</span><span class=\"p\">(</span><span class=\"n\">case_pos_list</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n    <span class=\"n\">selected_tags</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">all_tags</span><span class=\"p\">,</span> <span class=\"n\">case_qx_list</span><span class=\"p\">)</span>\n    <span class=\"n\">flat_tags_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">,</span> <span class=\"n\">selected_tags</span><span class=\"p\">))</span>\n    <span class=\"n\">WITH_NOTAGS</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n    <span class=\"k\">if</span> <span class=\"n\">WITH_NOTAGS</span><span class=\"p\">:</span>\n        <span class=\"n\">flat_tags_list_</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">tags</span> <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">tags</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"p\">[</span><span class=\"s1\">&#39;NoTag&#39;</span><span class=\"p\">]</span>\n                           <span class=\"k\">for</span> <span class=\"n\">tags</span> <span class=\"ow\">in</span> <span class=\"n\">flat_tags_list</span><span class=\"p\">]</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">flat_tags_list_</span> <span class=\"o\">=</span> <span class=\"n\">flat_tags_list</span>\n    <span class=\"n\">WITH_TOTAL</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n    <span class=\"k\">if</span> <span class=\"n\">WITH_TOTAL</span><span class=\"p\">:</span>\n        <span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"s1\">&#39;Total&#39;</span><span class=\"p\">]]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">case_qx_list</span><span class=\"p\">)</span>\n        <span class=\"n\">flat_tags_list_</span> <span class=\"o\">+=</span> <span class=\"n\">total</span>\n    <span class=\"n\">WITH_WEIGHTS</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"k\">if</span> <span class=\"n\">WITH_WEIGHTS</span><span class=\"p\">:</span>\n        <span class=\"n\">flat_weights_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"p\">[]</span> <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">tags</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"p\">[</span><span class=\"mf\">1.</span> <span class=\"o\">/</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">tags</span><span class=\"p\">)]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">tags</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">tags</span> <span class=\"ow\">in</span>  <span class=\"n\">flat_tags_list_</span>\n        <span class=\"p\">]</span>\n    <span class=\"n\">flat_tags</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">flat_tags_list_</span><span class=\"p\">)))</span>\n    <span class=\"k\">if</span> <span class=\"n\">WITH_WEIGHTS</span><span class=\"p\">:</span>\n        <span class=\"n\">weight_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">flat_weights_list</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">weight_list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"n\">fnum</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"n\">pnum_</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">make_pnum_nextgen</span><span class=\"p\">(</span><span class=\"n\">nRows</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">nCols</span><span class=\"o\">=</span><span class=\"n\">with_wordcloud</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">fnum</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">ensure_fnum</span><span class=\"p\">(</span><span class=\"n\">fnum</span><span class=\"p\">)</span>\n    <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">word_histogram2</span><span class=\"p\">(</span><span class=\"n\">flat_tags</span><span class=\"p\">,</span> <span class=\"n\">weight_list</span><span class=\"o\">=</span><span class=\"n\">weight_list</span><span class=\"p\">,</span>\n                       <span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"n\">fnum</span><span class=\"p\">,</span> <span class=\"n\">pnum</span><span class=\"o\">=</span><span class=\"n\">pnum_</span><span class=\"p\">(),</span> <span class=\"n\">xlabel</span><span class=\"o\">=</span><span class=\"s1\">&#39;Case&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">icon</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_database_icon</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"n\">icon</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">overlay_icon</span><span class=\"p\">(</span><span class=\"n\">icon</span><span class=\"p\">,</span> <span class=\"n\">coords</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">bbox_alignment</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n    <span class=\"k\">if</span> <span class=\"n\">with_wordcloud</span><span class=\"p\">:</span>\n        <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">wordcloud</span><span class=\"p\">(</span><span class=\"s1\">&#39; &#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">flat_tags</span><span class=\"p\">),</span> <span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"n\">fnum</span><span class=\"p\">,</span> <span class=\"n\">pnum</span><span class=\"o\">=</span><span class=\"n\">pnum_</span><span class=\"p\">())</span>\n    <span class=\"c1\">#figtitle = testres.make_figtitle(&#39;Tag Histogram&#39;, filt_cfg=filt_cfg)</span>\n    <span class=\"n\">figtitle</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">make_figtitle</span><span class=\"p\">(</span><span class=\"s1\">&#39;Case Histogram&#39;</span><span class=\"p\">,</span> <span class=\"n\">filt_cfg</span><span class=\"o\">=</span><span class=\"n\">filt_cfg</span><span class=\"p\">)</span>\n    <span class=\"n\">figtitle</span> <span class=\"o\">+=</span> <span class=\"s1\">&#39; #cases=</span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">case_qx_list</span><span class=\"p\">))</span>\n    <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">set_figtitle</span><span class=\"p\">(</span><span class=\"n\">figtitle</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argflag</span><span class=\"p\">(</span><span class=\"s1\">&#39;--contextadjust&#39;</span><span class=\"p\">):</span>\n        <span class=\"c1\">#pt.adjust_subplots(left=.1, bottom=.25, wspace=.2, hspace=.2)</span>\n        <span class=\"c1\">#pt.adjust_subplots(wspace=.01)</span>\n        <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">adjust_subplots</span><span class=\"p\">(</span><span class=\"n\">use_argv</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">wspace</span><span class=\"o\">=.</span><span class=\"mi\">01</span><span class=\"p\">,</span> <span class=\"n\">bottom</span><span class=\"o\">=.</span><span class=\"mi\">3</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"draw_rank_surface\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.experiment_drawing.draw_rank_surface\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">draw_rank_surface</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">testres</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Draws n dimensional data + a score / rank</span>\n<span class=\"sd\">    The rank is always on the y axis.</span>\n\n<span class=\"sd\">    The first dimension is on the x axis.</span>\n<span class=\"sd\">    The second dimension is split over multiple plots.</span>\n<span class=\"sd\">    The third dimension becomes multiple lines.</span>\n<span class=\"sd\">    May need to clean this scheme up a bit.</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (ibeis.IBEISController):  ibeis controller object</span>\n<span class=\"sd\">        testres (TestResult):  test result object</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        ibeis --tf draw_rank_surface --db PZ_Master1 -a varysize_td -t CircQRH_K --show</span>\n\n<span class=\"sd\">        ibeis --tf draw_rank_surface --show -t best -a varysize --db PZ_Master1 --show</span>\n\n<span class=\"sd\">        ibeis --tf draw_rank_surface --show -t CircQRH_K -a varysize_td --db PZ_Master1 --show</span>\n<span class=\"sd\">        ibeis --tf draw_rank_surface --show -t CircQRH_K -a varysize_td --db PZ_Master1 --show</span>\n\n<span class=\"sd\">        ibeis --tf draw_rank_surface --show  -t candidacy_k -a varysize  --db PZ_Master1 --show --param-keys=K,dcfg_sample_per_name,dcfg_sample_size</span>\n<span class=\"sd\">        ibeis --tf draw_rank_surface --show  -t best \\</span>\n<span class=\"sd\">            -a varynannots_td varynannots_td:qmin_pername=3,dpername=2  \\</span>\n<span class=\"sd\">            --db PZ_Master1 --show --param-keys=dcfg_sample_per_name,dcfg_sample_size</span>\n<span class=\"sd\">        ibeis --tf draw_rank_surface --show  -t best -a varynannots_td  --db PZ_Master1 --show --param-keys=dcfg_sample_size</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.expt.experiment_drawing import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.init import main_helpers</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs, testres = main_helpers.testdata_expts(&#39;PZ_MTEST&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = draw_rank_surface(ibs, testres)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.show_if_requested()</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">plottool</span> <span class=\"k\">as</span> <span class=\"nn\">pt</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.expt</span> <span class=\"k\">import</span> <span class=\"n\">annotation_configs</span>\n    <span class=\"k\">if</span> <span class=\"n\">verbose</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">verbose</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">VERBOSE</span>\n    <span class=\"c1\">#percent_le1_list = 100 * rank_le1_list / len(testres.qaids)</span>\n    <span class=\"n\">cfgx2_cumhist_percent</span><span class=\"p\">,</span> <span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_rank_percentage_cumhist</span><span class=\"p\">(</span><span class=\"n\">bins</span><span class=\"o\">=</span><span class=\"s1\">&#39;dense&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">percent_le1_list</span> <span class=\"o\">=</span> <span class=\"n\">cfgx2_cumhist_percent</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"c1\">#testres.cfgx2_lbl</span>\n    <span class=\"c1\">#testres.get_param_basis(&#39;dcfg_sample_per_name&#39;)</span>\n    <span class=\"c1\">#testres.get_param_basis(&#39;dcfg_sample_size&#39;)</span>\n    <span class=\"c1\">#K_basis = testres.get_param_basis(&#39;K&#39;)</span>\n    <span class=\"c1\">#K_cfgx_lists = [testres.get_cfgx_with_param(&#39;K&#39;, K) for K in K_basis]</span>\n    <span class=\"c1\">#param_key_list = testres.get_all_varied_params()</span>\n\n    <span class=\"c1\"># Extract the requested keys</span>\n    <span class=\"n\">default_param_key_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;K&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;dcfg_sample_per_name&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;dcfg_sample_size&#39;</span><span class=\"p\">]</span>\n    <span class=\"n\">param_key_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argval</span><span class=\"p\">(</span><span class=\"s1\">&#39;--param-keys&#39;</span><span class=\"p\">,</span> <span class=\"n\">type_</span><span class=\"o\">=</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">default_param_key_list</span><span class=\"p\">)</span>\n\n    <span class=\"c1\">#param_key_list = [&#39;K&#39;, &#39;dcfg_sample_per_name&#39;, &#39;len(daids)&#39;]</span>\n    <span class=\"n\">basis_dict</span>      <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"n\">cfgx_lists_dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">param_key_list</span><span class=\"p\">:</span>\n        <span class=\"n\">_basis</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_param_basis</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span>\n        <span class=\"n\">_cfgx_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_cfgx_with_param</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">val</span> <span class=\"ow\">in</span> <span class=\"n\">_basis</span><span class=\"p\">]</span>\n        <span class=\"c1\"># Grid of config indexes using param key as reference</span>\n        <span class=\"n\">cfgx_lists_dict</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">_cfgx_list</span>\n        <span class=\"n\">basis_dict</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">_basis</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">verbose</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;basis_dict = &#39;</span> <span class=\"o\">+</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr2</span><span class=\"p\">(</span><span class=\"n\">basis_dict</span><span class=\"p\">,</span> <span class=\"n\">nl</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">hack_liststr</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;e.g. cfgx_lists_dict[1] contains indicies of configs where K = basis_dict[&quot;K&quot;][1]&#39;</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;cfx_lists_dict = &#39;</span> <span class=\"o\">+</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr2</span><span class=\"p\">(</span><span class=\"n\">cfgx_lists_dict</span><span class=\"p\">,</span> <span class=\"n\">nl</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">hack_liststr</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n\n    <span class=\"c1\">#const_key = &#39;K&#39;</span>\n\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">param_key_list</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n        <span class=\"n\">const_key</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">const_basis</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">]</span>\n        <span class=\"n\">basis_dict</span><span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"c1\">#const_basis_cfgx_lists</span>\n        <span class=\"c1\"># Create a single empty dimension for a single pnum</span>\n        <span class=\"c1\"># correct, but not conceptually right</span>\n        <span class=\"n\">cfgx_lists_dict</span><span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">list_transpose</span><span class=\"p\">(</span><span class=\"n\">cfgx_lists_dict</span><span class=\"p\">[</span><span class=\"n\">param_key_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]])</span>\n    <span class=\"k\">elif</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">param_key_list</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Hold a key constant if more than 1 subplot</span>\n        <span class=\"n\">const_key</span> <span class=\"o\">=</span> <span class=\"n\">param_key_list</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"c1\">#const_key = &#39;dcfg_sample_per_name&#39;</span>\n        <span class=\"n\">const_basis</span> <span class=\"o\">=</span> <span class=\"n\">basis_dict</span><span class=\"p\">[</span><span class=\"n\">const_key</span><span class=\"p\">]</span>\n        <span class=\"c1\">#pnum_ = pt.make_pnum_nextgen(*pt.get_square_row_cols(len(basis_dict[const_key]), max_cols=1))</span>\n        <span class=\"c1\">#ymax = percent_le1_list.max()</span>\n        <span class=\"c1\">#ymin = percent_le1_list.min()</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">assert</span> <span class=\"kc\">False</span>\n\n    <span class=\"n\">const_basis_cfgx_lists</span> <span class=\"o\">=</span> <span class=\"n\">cfgx_lists_dict</span><span class=\"p\">[</span><span class=\"n\">const_key</span><span class=\"p\">]</span>\n\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">param_key_list</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Use consistent markers and colors when varying a lot of params</span>\n        <span class=\"c1\">#num_other_params = len(basis_dict[param_key_list[-1]])</span>\n        <span class=\"c1\">#num_other_params = len(basis_dict[const_key])</span>\n        <span class=\"n\">num_other_params</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">basis_dict</span><span class=\"p\">[</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">setdiff</span><span class=\"p\">(</span><span class=\"n\">param_key_list</span><span class=\"p\">,</span> <span class=\"n\">const_key</span><span class=\"p\">)[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]])</span>\n        <span class=\"n\">color_list</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">distinct_colors</span><span class=\"p\">(</span><span class=\"n\">num_other_params</span><span class=\"p\">)</span>\n        <span class=\"n\">marker_list</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">distinct_markers</span><span class=\"p\">(</span><span class=\"n\">num_other_params</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">color_list</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">distinct_colors</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">marker_list</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">distinct_markers</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n    <span class=\"n\">fnum</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">ensure_fnum</span><span class=\"p\">(</span><span class=\"n\">fnum</span><span class=\"p\">)</span>\n\n    <span class=\"n\">nd_labels_full</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">key</span> <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">param_key_list</span> <span class=\"k\">if</span> <span class=\"n\">key</span> <span class=\"o\">!=</span> <span class=\"n\">const_key</span><span class=\"p\">]</span>\n\n    <span class=\"c1\"># setup args for all plots</span>\n    <span class=\"n\">pnum_</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">make_pnum_nextgen</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">get_square_row_cols</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">basis_dict</span><span class=\"p\">[</span><span class=\"n\">const_key</span><span class=\"p\">])))</span>\n    <span class=\"k\">for</span> <span class=\"n\">const_idx</span><span class=\"p\">,</span> <span class=\"n\">const_val</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">const_basis</span><span class=\"p\">):</span>\n        <span class=\"n\">pnum</span> <span class=\"o\">=</span> <span class=\"n\">pnum_</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">verbose</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;---- NEXT PNUM=</span><span class=\"si\">%r</span><span class=\"s1\"> --- &#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">pnum</span><span class=\"p\">,))</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;const_key = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">const_key</span><span class=\"p\">,))</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;const_val = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">const_val</span><span class=\"p\">,))</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;const_idx = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">const_idx</span><span class=\"p\">,))</span>\n        <span class=\"n\">const_basis_cfgx_list</span> <span class=\"o\">=</span> <span class=\"n\">const_basis_cfgx_lists</span><span class=\"p\">[</span><span class=\"n\">const_idx</span><span class=\"p\">]</span>\n        <span class=\"n\">rank_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">percent_le1_list</span><span class=\"p\">,</span> <span class=\"n\">const_basis_cfgx_list</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Figure out what the values are for other dimensions</span>\n        <span class=\"n\">agree_param_vals</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">([</span>\n            <span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_param_val_from_cfgx</span><span class=\"p\">(</span><span class=\"n\">cfgx</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">)</span>\n                   <span class=\"k\">for</span> <span class=\"n\">cfgx</span> <span class=\"ow\">in</span> <span class=\"n\">const_basis_cfgx_list</span><span class=\"p\">])</span>\n            <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">nd_labels_full</span><span class=\"p\">])</span>\n\n        <span class=\"c1\"># Make a list of points that need plotting</span>\n        <span class=\"n\">known_nd_data</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">agree_param_vals</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()))</span><span class=\"o\">.</span><span class=\"n\">T</span>\n        <span class=\"n\">known_target_points</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">rank_list</span><span class=\"p\">)</span>\n\n        <span class=\"n\">nd_labels_</span> <span class=\"o\">=</span> <span class=\"n\">nd_labels_full</span><span class=\"p\">[:]</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">nd_labels_</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"c1\"># hack for nonvaried params</span>\n            <span class=\"n\">empty_dim</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">((</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">known_nd_data</span><span class=\"p\">),</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n            <span class=\"n\">known_nd_data</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">hstack</span><span class=\"p\">([</span><span class=\"n\">known_nd_data</span><span class=\"p\">,</span> <span class=\"n\">empty_dim</span><span class=\"p\">])</span>\n            <span class=\"n\">nd_labels_</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">]</span>\n\n        <span class=\"c1\"># short ndlabels</span>\n        <span class=\"n\">nd_labels</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">annotation_configs</span><span class=\"o\">.</span><span class=\"n\">shorten_to_alias_labels</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">nd_labels_</span><span class=\"p\">]</span>\n        <span class=\"n\">target_label</span> <span class=\"o\">=</span> <span class=\"n\">annotation_configs</span><span class=\"o\">.</span><span class=\"n\">shorten_to_alias_labels</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span>\n\n        <span class=\"n\">target_label</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;accuracy (%)&#39;</span>\n\n        <span class=\"c1\"># hack</span>\n        <span class=\"n\">ymin</span> <span class=\"o\">=</span> <span class=\"mi\">30</span> <span class=\"k\">if</span> <span class=\"n\">known_target_points</span><span class=\"o\">.</span><span class=\"n\">min</span><span class=\"p\">()</span> <span class=\"o\">&gt;</span> <span class=\"mi\">30</span> <span class=\"ow\">and</span> <span class=\"kc\">False</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n        <span class=\"n\">num_yticks</span> <span class=\"o\">=</span> <span class=\"mi\">8</span> <span class=\"k\">if</span> <span class=\"n\">ymin</span> <span class=\"o\">==</span> <span class=\"mi\">30</span> <span class=\"k\">else</span> <span class=\"mi\">11</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">const_key</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;accuracy&#39;</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;accuracy when &#39;</span> <span class=\"o\">+</span>\n                     <span class=\"n\">annotation_configs</span><span class=\"o\">.</span><span class=\"n\">shorten_to_alias_labels</span><span class=\"p\">(</span><span class=\"n\">const_key</span><span class=\"p\">)</span> <span class=\"o\">+</span>\n                     <span class=\"s1\">&#39;=</span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">const_val</span><span class=\"p\">,))</span>\n        <span class=\"k\">if</span> <span class=\"n\">verbose</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;title = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">title</span><span class=\"p\">,))</span>\n            <span class=\"c1\">#print(&#39;nd_labels = %r&#39; % (nd_labels,))</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;target_label = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">target_label</span><span class=\"p\">,))</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;known_nd_data = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">known_nd_data</span><span class=\"p\">,))</span>\n            <span class=\"c1\">#print(&#39;known_target_points = %r&#39; % (known_target_points,))</span>\n\n        <span class=\"c1\">#PLOT3D = not ut.get_argflag(&#39;--no3dsurf&#39;)</span>\n        <span class=\"c1\">#PLOT3D = ut.get_argflag(&#39;--no2dsurf&#39;)</span>\n        <span class=\"n\">PLOT3D</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argflag</span><span class=\"p\">(</span><span class=\"s1\">&#39;--3dsurf&#39;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">PLOT3D</span><span class=\"p\">:</span>\n            <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">plot_search_surface</span><span class=\"p\">(</span><span class=\"n\">known_nd_data</span><span class=\"p\">,</span> <span class=\"n\">known_target_points</span><span class=\"p\">,</span>\n                                   <span class=\"n\">nd_labels</span><span class=\"p\">,</span> <span class=\"n\">target_label</span><span class=\"p\">,</span> <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"n\">title</span><span class=\"p\">,</span>\n                                   <span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"n\">fnum</span><span class=\"p\">,</span> <span class=\"n\">pnum</span><span class=\"o\">=</span><span class=\"n\">pnum</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Convert known nd data into a multiplot-ish format</span>\n            <span class=\"n\">nonconst_basis_vals</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">unique</span><span class=\"p\">(</span><span class=\"n\">known_nd_data</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n            <span class=\"c1\"># Find which colors will not be used</span>\n            <span class=\"n\">nonconst_key</span> <span class=\"o\">=</span> <span class=\"n\">nd_labels_</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"n\">nonconst_basis</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">basis_dict</span><span class=\"p\">[</span><span class=\"n\">nonconst_key</span><span class=\"p\">])</span>\n            <span class=\"n\">nonconst_covers_basis</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">in1d</span><span class=\"p\">(</span><span class=\"n\">nonconst_basis</span><span class=\"p\">,</span> <span class=\"n\">nonconst_basis_vals</span><span class=\"p\">)</span>\n            <span class=\"c1\"># I dont remember what was trying to happen here</span>\n            <span class=\"n\">nonconst_color_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">color_list</span><span class=\"p\">,</span> <span class=\"n\">nonconst_covers_basis</span><span class=\"p\">)</span>\n            <span class=\"n\">nonconst_marker_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">marker_list</span><span class=\"p\">,</span> <span class=\"n\">nonconst_covers_basis</span><span class=\"p\">)</span>\n\n            <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">plot_multiple_scores</span><span class=\"p\">(</span><span class=\"n\">known_nd_data</span><span class=\"p\">,</span> <span class=\"n\">known_target_points</span><span class=\"p\">,</span>\n                                    <span class=\"n\">nd_labels</span><span class=\"p\">,</span> <span class=\"n\">target_label</span><span class=\"p\">,</span> <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"n\">title</span><span class=\"p\">,</span>\n                                    <span class=\"n\">color_list</span><span class=\"o\">=</span><span class=\"n\">nonconst_color_list</span><span class=\"p\">,</span>\n                                    <span class=\"n\">marker_list</span><span class=\"o\">=</span><span class=\"n\">nonconst_marker_list</span><span class=\"p\">,</span> <span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"n\">fnum</span><span class=\"p\">,</span>\n                                    <span class=\"n\">pnum</span><span class=\"o\">=</span><span class=\"n\">pnum</span><span class=\"p\">,</span> <span class=\"n\">num_yticks</span><span class=\"o\">=</span><span class=\"n\">num_yticks</span><span class=\"p\">,</span>\n                                    <span class=\"n\">ymin</span><span class=\"o\">=</span><span class=\"n\">ymin</span><span class=\"p\">,</span> <span class=\"n\">ymax</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">ypad</span><span class=\"o\">=.</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n                                    <span class=\"n\">xpad</span><span class=\"o\">=.</span><span class=\"mi\">05</span><span class=\"p\">,</span> <span class=\"n\">legend_loc</span><span class=\"o\">=</span><span class=\"s1\">&#39;lower right&#39;</span><span class=\"p\">,</span>\n                                    <span class=\"c1\">#**FONTKW</span>\n                                    <span class=\"p\">)</span>\n\n    <span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">gcf</span><span class=\"p\">()</span>\n    <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">sca</span><span class=\"p\">(</span><span class=\"n\">ax</span><span class=\"p\">)</span>\n    <span class=\"c1\">#pt.figure(fnum=fnum, pnum=pnum0)</span>\n    <span class=\"n\">icon</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_database_icon</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"n\">icon</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"c1\">#pt.overlay_icon(icon, coords=(0, 0), bbox_alignment=(0, 0))</span>\n        <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">overlay_icon</span><span class=\"p\">(</span><span class=\"n\">icon</span><span class=\"p\">,</span> <span class=\"n\">coords</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"mi\">001</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">001</span><span class=\"p\">),</span> <span class=\"n\">bbox_alignment</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n\n    <span class=\"n\">nd_labels</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">annotation_configs</span><span class=\"o\">.</span><span class=\"n\">shorten_to_alias_labels</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">nd_labels_full</span><span class=\"p\">]</span>\n    <span class=\"n\">plotname</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Effect of &#39;</span> <span class=\"o\">+</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">conj_phrase</span><span class=\"p\">(</span><span class=\"n\">nd_labels</span><span class=\"p\">,</span> <span class=\"s1\">&#39;and&#39;</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s1\">&#39; on accuracy&#39;</span>\n    <span class=\"n\">figtitle</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">make_figtitle</span><span class=\"p\">(</span><span class=\"n\">plotname</span><span class=\"p\">)</span>\n    <span class=\"c1\"># hack</span>\n    <span class=\"k\">if</span> <span class=\"mi\">1</span> <span class=\"ow\">or</span> <span class=\"n\">verbose</span><span class=\"p\">:</span>\n        <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">print_unique_annot_config_stats</span><span class=\"p\">()</span>\n    <span class=\"c1\">#pt.set_figtitle(figtitle, size=14)</span>\n    <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">set_figtitle</span><span class=\"p\">(</span><span class=\"n\">figtitle</span><span class=\"p\">)</span>\n    <span class=\"c1\"># HACK FOR FIGSIZE</span>\n    <span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">gcf</span><span class=\"p\">()</span>\n    <span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">set_size_inches</span><span class=\"p\">(</span><span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n    <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">adjust_subplots</span><span class=\"p\">(</span><span class=\"n\">left</span><span class=\"o\">=.</span><span class=\"mi\">05</span><span class=\"p\">,</span> <span class=\"n\">bottom</span><span class=\"o\">=.</span><span class=\"mi\">08</span><span class=\"p\">,</span> <span class=\"n\">top</span><span class=\"o\">=.</span><span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=.</span><span class=\"mi\">95</span><span class=\"p\">,</span> <span class=\"n\">wspace</span><span class=\"o\">=.</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">hspace</span><span class=\"o\">=.</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argflag</span><span class=\"p\">(</span><span class=\"s1\">&#39;--contextadjust&#39;</span><span class=\"p\">):</span>\n        <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">adjust_subplots</span><span class=\"p\">(</span><span class=\"n\">left</span><span class=\"o\">=.</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">bottom</span><span class=\"o\">=.</span><span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"n\">wspace</span><span class=\"o\">=.</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">hspace</span><span class=\"o\">=.</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">adjust_subplots</span><span class=\"p\">(</span><span class=\"n\">use_argv</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"temp_num_exmaples_cmc\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.experiment_drawing.temp_num_exmaples_cmc\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">temp_num_exmaples_cmc</span><span class=\"p\">():</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">ibeis</span>\n    <span class=\"n\">ibs1</span><span class=\"p\">,</span> <span class=\"n\">testres1</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">testdata_expts</span><span class=\"p\">(</span>\n        <span class=\"n\">dbdir</span><span class=\"o\">=</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">truepath</span><span class=\"p\">(</span><span class=\"s1\">&#39;~/lev/media/hdd/golden/GGR-IBEIS&#39;</span><span class=\"p\">),</span>\n        <span class=\"n\">t</span><span class=\"o\">=</span><span class=\"s1\">&#39;Ell:K=1&#39;</span><span class=\"p\">,</span>\n        <span class=\"c1\"># t=&#39;best:prescore_method=nsum&#39;,</span>\n        <span class=\"c1\"># a=&#39;timectrl&#39;</span>\n        <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"s1\">&#39;timectrl:species=zebra_grevys,qmin_pername=3,dsample_per_name=[1,2],dsize=1939&#39;</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"n\">ibs2</span><span class=\"p\">,</span> <span class=\"n\">testres2</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">testdata_expts</span><span class=\"p\">(</span>\n        <span class=\"n\">dbdir</span><span class=\"o\">=</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">truepath</span><span class=\"p\">(</span><span class=\"s1\">&#39;~/lev/media/hdd/golden/GZGC&#39;</span><span class=\"p\">),</span>\n        <span class=\"c1\"># t=&#39;best:prescore_method=nsum&#39;,</span>\n        <span class=\"n\">t</span><span class=\"o\">=</span><span class=\"s1\">&#39;CircQRH:K=3&#39;</span><span class=\"p\">,</span>\n        <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"s1\">&#39;timectrl:species=zebra_plains,qmin_pername=3,dsample_per_name=[1,2],dsize=1187&#39;</span>\n        <span class=\"c1\"># a=&#39;timectrl:species=zebra_plains,sample_per_name=3&#39;</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;qx2_gt_rank&#39;</span>\n    <span class=\"n\">ydata_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">label_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">num_ranks</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n\n    <span class=\"n\">testres_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">testres1</span><span class=\"p\">,</span> <span class=\"n\">testres2</span><span class=\"p\">]</span>\n    <span class=\"n\">ibs_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ibs1</span><span class=\"p\">,</span> <span class=\"n\">ibs2</span><span class=\"p\">]</span>\n\n    <span class=\"c1\"># ibs = ibs1</span>\n    <span class=\"c1\"># testres = testres1</span>\n    <span class=\"k\">for</span> <span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">testres</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">ibs_list</span><span class=\"p\">,</span> <span class=\"n\">testres_list</span><span class=\"p\">):</span>\n        <span class=\"n\">cfgx2_cmc</span><span class=\"p\">,</span> <span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_rank_percentage_cumhist</span><span class=\"p\">(</span>\n            <span class=\"n\">bins</span><span class=\"o\">=</span><span class=\"s1\">&#39;dense&#39;</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">join_acfgs</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n        <span class=\"n\">species</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_dominant_species</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">qaids</span><span class=\"p\">)</span>\n        <span class=\"n\">species_nice</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_species_nice</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_species_rowids_from_text</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_dominant_species</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">qaids</span><span class=\"p\">)))</span>\n        <span class=\"n\">species_nice</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;zebra_grevys&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Grevy</span><span class=\"se\">\\&#39;</span><span class=\"s1\">s Zebras&#39;</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;zebra_plains&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Plains Zebras&#39;</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;giraffe_masai&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Masai Giraffes&#39;</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">species</span><span class=\"p\">,</span> <span class=\"n\">species_nice</span><span class=\"p\">)</span>\n\n        <span class=\"n\">cmcs</span> <span class=\"o\">=</span> <span class=\"n\">cfgx2_cmc</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">[:</span><span class=\"n\">num_ranks</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">T</span>\n        <span class=\"n\">lbls</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_varied_labels</span><span class=\"p\">(</span><span class=\"n\">shorten</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">join_acfgs</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"c1\"># lbls = [&#39;%6.2f%% @ rank #1&#39; % (cmc[0],) + &#39; - &#39; + lbl + &#39; - &#39; + species_nice</span>\n        <span class=\"c1\">#         for lbl, cmc in zip(lbls, cmcs)]</span>\n        <span class=\"n\">lbls</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">species_nice</span> <span class=\"o\">+</span> <span class=\"s1\">&#39; - &#39;</span> <span class=\"o\">+</span> <span class=\"n\">lbl</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">&#39;dpername&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;exemplars&#39;</span><span class=\"p\">)</span>\n                <span class=\"k\">for</span> <span class=\"n\">lbl</span><span class=\"p\">,</span> <span class=\"n\">cmc</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">lbls</span><span class=\"p\">,</span> <span class=\"n\">cmcs</span><span class=\"p\">)]</span>\n\n        <span class=\"n\">ydata_list</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">cmcs</span><span class=\"p\">)</span>\n        <span class=\"n\">label_list</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">lbls</span><span class=\"p\">)</span>\n\n    <span class=\"n\">sortx</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">argsort</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take_column</span><span class=\"p\">(</span><span class=\"n\">ydata_list</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n    <span class=\"n\">ydata_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">ydata_list</span><span class=\"p\">,</span> <span class=\"n\">sortx</span><span class=\"p\">)</span>\n    <span class=\"n\">label_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">label_list</span><span class=\"p\">,</span> <span class=\"n\">sortx</span><span class=\"p\">)</span>\n\n    <span class=\"n\">xdata</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">num_ranks</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n\n    <span class=\"kn\">import</span> <span class=\"nn\">plottool</span> <span class=\"k\">as</span> <span class=\"nn\">pt</span>\n    <span class=\"n\">ymin</span> <span class=\"o\">=</span> <span class=\"mi\">30</span>\n    <span class=\"n\">xpad</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"mi\">9</span>  <span class=\"c1\"># if kind == &#39;plot&#39; else .5</span>\n    <span class=\"n\">num_yticks</span> <span class=\"o\">=</span> <span class=\"mi\">8</span> <span class=\"k\">if</span> <span class=\"n\">ymin</span> <span class=\"o\">==</span> <span class=\"mi\">30</span> <span class=\"k\">else</span> <span class=\"mi\">11</span>\n    <span class=\"c1\"># ymin = 30 if cfgx2_cumhist_percent.min() &gt; 30 and False else 0</span>\n\n    <span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">multi_plot</span><span class=\"p\">(</span>\n        <span class=\"n\">xdata</span><span class=\"p\">,</span> <span class=\"n\">ydata_list</span><span class=\"p\">,</span>\n        <span class=\"n\">marker_list</span><span class=\"o\">=</span><span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">distinct_markers</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">ydata_list</span><span class=\"p\">)),</span>\n        <span class=\"n\">label_list</span><span class=\"o\">=</span><span class=\"n\">label_list</span><span class=\"p\">,</span>\n        <span class=\"n\">num_xticks</span><span class=\"o\">=</span><span class=\"n\">num_ranks</span><span class=\"p\">,</span>\n        <span class=\"n\">xlabel</span><span class=\"o\">=</span><span class=\"s1\">&#39;rank&#39;</span><span class=\"p\">,</span> <span class=\"n\">ylabel</span><span class=\"o\">=</span><span class=\"s1\">&#39;recognition rate (%)&#39;</span><span class=\"p\">,</span>\n        <span class=\"n\">legend_loc</span><span class=\"o\">=</span><span class=\"s1\">&#39;lower right&#39;</span><span class=\"p\">,</span>\n        <span class=\"n\">num_yticks</span><span class=\"o\">=</span><span class=\"n\">num_yticks</span><span class=\"p\">,</span> <span class=\"n\">ymax</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">ymin</span><span class=\"o\">=</span><span class=\"n\">ymin</span><span class=\"p\">,</span> <span class=\"n\">ypad</span><span class=\"o\">=.</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n        <span class=\"n\">xmin</span><span class=\"o\">=</span><span class=\"n\">xpad</span><span class=\"p\">,</span>\n        <span class=\"n\">xmax</span><span class=\"o\">=</span><span class=\"n\">num_ranks</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">xpad</span><span class=\"p\">,</span>\n        <span class=\"n\">use_legend</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">&#39;Cumulative match characteristics&#39;</span><span class=\"p\">,</span>\n        <span class=\"n\">legendsize</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span>\n        <span class=\"n\">titlesize</span><span class=\"o\">=</span><span class=\"mi\">12</span><span class=\"p\">,</span>\n        <span class=\"n\">labelsize</span><span class=\"o\">=</span><span class=\"mi\">12</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">set_size_inches</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">((</span><span class=\"mf\">1.0</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]))</span><span class=\"o\">.</span><span class=\"n\">tolist</span><span class=\"p\">()))</span>\n    <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">adjust_subplots</span><span class=\"p\">(</span><span class=\"n\">bottom</span><span class=\"o\">=.</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"n\">top</span><span class=\"o\">=.</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=.</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"n\">fpath</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;cmc-dpername-combined.png&#39;</span>\n    <span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"n\">fpath</span><span class=\"p\">,</span> <span class=\"n\">transparent</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">edgecolor</span><span class=\"o\">=</span><span class=\"s1\">&#39;none&#39;</span><span class=\"p\">)</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">vtool</span> <span class=\"k\">as</span> <span class=\"nn\">vt</span>\n    <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">clipwhite_ondisk</span><span class=\"p\">(</span><span class=\"n\">fpath</span><span class=\"p\">,</span> <span class=\"n\">fpath</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">startfile</span><span class=\"p\">(</span><span class=\"n\">fpath</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"temp_multidb_cmc\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.experiment_drawing.temp_multidb_cmc\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">temp_multidb_cmc</span><span class=\"p\">():</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Plots multiple database CMC curves in the same plot for the AI for social</span>\n<span class=\"sd\">    good paper</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">ibeis</span>\n    <span class=\"n\">ibs1</span><span class=\"p\">,</span> <span class=\"n\">testres1</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">testdata_expts</span><span class=\"p\">(</span>\n        <span class=\"n\">dbdir</span><span class=\"o\">=</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">truepath</span><span class=\"p\">(</span><span class=\"s1\">&#39;~/lev/media/hdd/golden/GGR-IBEIS&#39;</span><span class=\"p\">),</span>\n        <span class=\"n\">t</span><span class=\"o\">=</span><span class=\"s1\">&#39;Ell:K=4&#39;</span><span class=\"p\">,</span>\n        <span class=\"c1\"># t=&#39;best:prescore_method=nsum&#39;,</span>\n        <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"s1\">&#39;timectrl&#39;</span>\n        <span class=\"c1\"># a=&#39;timectrl:species=zebra_grevys,qmin_pername=3,dsample_per_name=2&#39;</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">ibs2</span><span class=\"p\">,</span> <span class=\"n\">testres2</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">testdata_expts</span><span class=\"p\">(</span>\n        <span class=\"n\">dbdir</span><span class=\"o\">=</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">truepath</span><span class=\"p\">(</span><span class=\"s1\">&#39;~/lev/media/hdd/golden/GZGC&#39;</span><span class=\"p\">),</span>\n        <span class=\"c1\"># t=&#39;best:prescore_method=nsum&#39;,</span>\n        <span class=\"n\">t</span><span class=\"o\">=</span><span class=\"s1\">&#39;CircQRH:K=3&#39;</span><span class=\"p\">,</span>\n        <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"s1\">&#39;timectrl:species=zebra_plains&#39;</span>\n        <span class=\"c1\"># a=&#39;timectrl:species=zebra_plains,qmin_pername=3,dsample_per_name=2&#39;</span>\n        <span class=\"c1\"># a=&#39;timectrl:species=zebra_plains,sample_per_name=3&#39;</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">ibs3</span><span class=\"p\">,</span> <span class=\"n\">testres3</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">testdata_expts</span><span class=\"p\">(</span>\n        <span class=\"n\">dbdir</span><span class=\"o\">=</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">truepath</span><span class=\"p\">(</span><span class=\"s1\">&#39;~/lev/media/hdd/golden/GZGC&#39;</span><span class=\"p\">),</span>\n        <span class=\"n\">t</span><span class=\"o\">=</span><span class=\"s1\">&#39;Ell:K=2&#39;</span><span class=\"p\">,</span>\n        <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"s1\">&#39;timectrl1h:species=giraffe_masai&#39;</span>\n        <span class=\"c1\"># a=&#39;timectrl1h:species=giraffe_masai,qmin_pername=2,dsample_per_name=2&#39;</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"n\">testres_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">testres1</span><span class=\"p\">,</span> <span class=\"n\">testres2</span><span class=\"p\">,</span> <span class=\"n\">testres3</span><span class=\"p\">]</span>\n    <span class=\"n\">ibs_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ibs1</span><span class=\"p\">,</span> <span class=\"n\">ibs2</span><span class=\"p\">,</span> <span class=\"n\">ibs3</span><span class=\"p\">]</span>\n\n    <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;qx2_gt_rank&#39;</span>\n    <span class=\"n\">ydata_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">label_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">num_ranks</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">testres</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">ibs_list</span><span class=\"p\">,</span> <span class=\"n\">testres_list</span><span class=\"p\">):</span>\n        <span class=\"n\">cfgx2_cmc</span><span class=\"p\">,</span> <span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_rank_percentage_cumhist</span><span class=\"p\">(</span>\n            <span class=\"n\">bins</span><span class=\"o\">=</span><span class=\"s1\">&#39;dense&#39;</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">join_acfgs</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">cmc</span> <span class=\"o\">=</span> <span class=\"n\">cfgx2_cmc</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][:</span><span class=\"n\">num_ranks</span><span class=\"p\">]</span>\n\n        <span class=\"n\">species</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_dominant_species</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">qaids</span><span class=\"p\">)</span>\n        <span class=\"n\">species_nice</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_species_nice</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_species_rowids_from_text</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_dominant_species</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">qaids</span><span class=\"p\">)))</span>\n        <span class=\"n\">species_nice</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;zebra_grevys&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Grevy</span><span class=\"se\">\\&#39;</span><span class=\"s1\">s Zebras&#39;</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;zebra_plains&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Plains Zebras&#39;</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;giraffe_masai&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Masai Giraffes&#39;</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">species</span><span class=\"p\">,</span> <span class=\"n\">species_nice</span><span class=\"p\">)</span>\n        <span class=\"n\">label</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"si\">%6.2f%%</span><span class=\"s1\"> @ rank #1&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">cmc</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],))</span> <span class=\"o\">+</span> <span class=\"s1\">&#39; - &#39;</span> <span class=\"o\">+</span> <span class=\"n\">species_nice</span>\n        <span class=\"n\">label_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"p\">)</span>\n        <span class=\"n\">ydata_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">cmc</span><span class=\"p\">)</span>\n\n    <span class=\"n\">sortx</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">argsort</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take_column</span><span class=\"p\">(</span><span class=\"n\">ydata_list</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n    <span class=\"n\">ydata_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">ydata_list</span><span class=\"p\">,</span> <span class=\"n\">sortx</span><span class=\"p\">)</span>\n    <span class=\"n\">label_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">label_list</span><span class=\"p\">,</span> <span class=\"n\">sortx</span><span class=\"p\">)</span>\n\n    <span class=\"n\">xdata</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">num_ranks</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n\n    <span class=\"kn\">import</span> <span class=\"nn\">plottool</span> <span class=\"k\">as</span> <span class=\"nn\">pt</span>\n    <span class=\"n\">ymin</span> <span class=\"o\">=</span> <span class=\"mi\">30</span>\n    <span class=\"n\">xpad</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"mi\">9</span>  <span class=\"c1\"># if kind == &#39;plot&#39; else .5</span>\n    <span class=\"n\">num_yticks</span> <span class=\"o\">=</span> <span class=\"mi\">8</span> <span class=\"k\">if</span> <span class=\"n\">ymin</span> <span class=\"o\">==</span> <span class=\"mi\">30</span> <span class=\"k\">else</span> <span class=\"mi\">11</span>\n    <span class=\"c1\"># ymin = 30 if cfgx2_cumhist_percent.min() &gt; 30 and False else 0</span>\n\n    <span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">multi_plot</span><span class=\"p\">(</span>\n        <span class=\"n\">xdata</span><span class=\"p\">,</span> <span class=\"n\">ydata_list</span><span class=\"p\">,</span>\n        <span class=\"n\">marker_list</span><span class=\"o\">=</span><span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">distinct_markers</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">ydata_list</span><span class=\"p\">)),</span>\n        <span class=\"n\">label_list</span><span class=\"o\">=</span><span class=\"n\">label_list</span><span class=\"p\">,</span>\n        <span class=\"n\">num_xticks</span><span class=\"o\">=</span><span class=\"n\">num_ranks</span><span class=\"p\">,</span>\n        <span class=\"n\">xlabel</span><span class=\"o\">=</span><span class=\"s1\">&#39;rank&#39;</span><span class=\"p\">,</span> <span class=\"n\">ylabel</span><span class=\"o\">=</span><span class=\"s1\">&#39;recognition rate (%)&#39;</span><span class=\"p\">,</span>\n        <span class=\"n\">legend_loc</span><span class=\"o\">=</span><span class=\"s1\">&#39;lower right&#39;</span><span class=\"p\">,</span>\n        <span class=\"n\">num_yticks</span><span class=\"o\">=</span><span class=\"n\">num_yticks</span><span class=\"p\">,</span> <span class=\"n\">ymax</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">ymin</span><span class=\"o\">=</span><span class=\"n\">ymin</span><span class=\"p\">,</span> <span class=\"n\">ypad</span><span class=\"o\">=.</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n        <span class=\"n\">xmin</span><span class=\"o\">=</span><span class=\"n\">xpad</span><span class=\"p\">,</span>\n        <span class=\"n\">xmax</span><span class=\"o\">=</span><span class=\"n\">num_ranks</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">xpad</span><span class=\"p\">,</span>\n        <span class=\"n\">use_legend</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">&#39;Cumulative match characteristics&#39;</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">set_size_inches</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">((</span><span class=\"mf\">1.5</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]))</span><span class=\"o\">.</span><span class=\"n\">tolist</span><span class=\"p\">()))</span>\n    <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">adjust_subplots</span><span class=\"p\">(</span><span class=\"n\">bottom</span><span class=\"o\">=.</span><span class=\"mi\">15</span><span class=\"p\">)</span>\n    <span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"s1\">&#39;cmc-combined.png&#39;</span><span class=\"p\">,</span> <span class=\"n\">transparent</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">edgecolor</span><span class=\"o\">=</span><span class=\"s1\">&#39;none&#39;</span><span class=\"p\">)</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">vtool</span> <span class=\"k\">as</span> <span class=\"nn\">vt</span>\n    <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">clipwhite_ondisk</span><span class=\"p\">(</span><span class=\"s1\">&#39;cmc-combined.png&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;cmc-combined.png&#39;</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">startfile</span><span class=\"p\">(</span><span class=\"s1\">&#39;cmc-combined.png&#39;</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"draw_rank_cmc\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.experiment_drawing.draw_rank_cmc\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">draw_rank_cmc</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">testres</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">test_cfgx_slice</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                  <span class=\"n\">group_queries</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">draw_icon</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                  <span class=\"n\">numranks</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">kind</span><span class=\"o\">=</span><span class=\"s1\">&#39;cmc&#39;</span><span class=\"p\">,</span> <span class=\"n\">cdfzoom</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"c1\"># numranks=3, kind=&#39;bar&#39;, cdfzoom=False):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (ibeis.IBEISController):  ibeis controller object</span>\n<span class=\"sd\">        testres (TestResult):</span>\n\n<span class=\"sd\">    TODO:</span>\n<span class=\"sd\">        # Cross-validated results with timectrl</span>\n<span class=\"sd\">        python -m ibeis draw_rank_cmc --db PZ_MTEST --show -a timectrl:xval=True -t invar --kind=cmc</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis draw_rank_cmc</span>\n<span class=\"sd\">        python -m ibeis draw_rank_cmc --db PZ_MTEST --show -a timectrl -t default --kind=cmc</span>\n\n<span class=\"sd\">        python -m ibeis draw_rank_cmc --db PZ_MTEST --show -a :proot=smk,num_words=64000</span>\n<span class=\"sd\">        python -m ibeis draw_rank_cmc --db PZ_MTEST --show -a ctrl -t best:prescore_method=csum</span>\n<span class=\"sd\">        python -m ibeis draw_rank_cmc --db PZ_MTEST --show -a timectrl -t invar --kind=cmc --cdfzoom</span>\n<span class=\"sd\">        python -m ibeis draw_rank_cmc --db PZ_MTEST --show -a varypername_td   -t CircQRH_ScoreMech:K=3</span>\n<span class=\"sd\">        #ibeis -e rank_cmc --db lynx -a default:qsame_imageset=True,been_adjusted=True,excluderef=True -t default:K=1 --show</span>\n\n<span class=\"sd\">        python -m ibeis.dev -e draw_rank_cmc --db lynx -a default:qsame_imageset=True,been_adjusted=True,excluderef=True -t default:K=1 --show</span>\n\n<span class=\"sd\">        python -m ibeis --tf draw_rank_cmc -t best -a timectrl --db PZ_Master1 --show</span>\n\n<span class=\"sd\">        python -m ibeis --tf draw_rank_cmc --db PZ_Master1 --show -t best \\</span>\n<span class=\"sd\">            -a timectrl:qhas_any=\\(needswork,correctable,mildviewpoint\\),qhas_none=\\(viewpoint,photobomb,error:viewpoint,quality\\) \\</span>\n<span class=\"sd\">            --acfginfo --veryverbtd</span>\n\n<span class=\"sd\">        ibeis --tf draw_match_cases --db GZ_ALL -a ctrl \\</span>\n<span class=\"sd\">            -t default:K=1,resize_dim=[width],dim_size=[700,750] \\</span>\n<span class=\"sd\">            -f :sortdsc=gfscore,without_tag=scenerymatch,disagree=True \\</span>\n<span class=\"sd\">            --show</span>\n\n<span class=\"sd\">        ibeis --tf autogen_ipynb --db GZ_ALL --ipynb -a ctrl \\</span>\n<span class=\"sd\">            -t default:K=1,resize_dim=[width],dim_size=[600,700,750] \\</span>\n<span class=\"sd\">             default:K=1,resize_dim=[area],dim_size=[450,550,600,650]</span>\n\n<span class=\"sd\">        ibeis draw_rank_cmc --db GZ_ALL -a ctrl -t default --show</span>\n<span class=\"sd\">        ibeis draw_match_cases --db GZ_ALL -a ctrl -t default -f :fail=True --show</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.expt.experiment_drawing import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.init import main_helpers</span>\n<span class=\"sd\">        &gt;&gt;&gt; #ibs, testres = main_helpers.testdata_expts(</span>\n<span class=\"sd\">        &gt;&gt;&gt; #    &#39;seaturtles&#39;, a=&#39;default2:qhas_any=(left),sample_occur=True,occur_offset=[0,1,2,3,4,5,6,7,8],num_names=None&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs, testres = main_helpers.testdata_expts(&#39;PZ_MTEST&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; kwargs = ut.argparse_funckw(draw_rank_cmc)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = draw_rank_cmc(ibs, testres, **kwargs)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.show_if_requested()</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">plottool</span> <span class=\"k\">as</span> <span class=\"nn\">pt</span>\n    <span class=\"k\">if</span> <span class=\"n\">group_queries</span><span class=\"p\">:</span>\n        <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;qnx2_gt_name_rank&#39;</span>\n        <span class=\"n\">target_label</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;accuracy (% per name)&#39;</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;qx2_gt_rank&#39;</span>\n        <span class=\"n\">target_label</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;accuracy (% per annotation)&#39;</span>\n\n    <span class=\"n\">join_acfgs</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"n\">cfgx2_cumhist_percent</span><span class=\"p\">,</span> <span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_rank_percentage_cumhist</span><span class=\"p\">(</span>\n        <span class=\"n\">bins</span><span class=\"o\">=</span><span class=\"s1\">&#39;dense&#39;</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">join_acfgs</span><span class=\"o\">=</span><span class=\"n\">join_acfgs</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Do this twice, but no sep the first time</span>\n    <span class=\"n\">cfglbl_list</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_varied_labels</span><span class=\"p\">(</span><span class=\"n\">shorten</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                                            <span class=\"n\">join_acfgs</span><span class=\"o\">=</span><span class=\"n\">join_acfgs</span><span class=\"p\">)</span>\n    <span class=\"n\">cfglbl_to_score</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dzip</span><span class=\"p\">(</span><span class=\"n\">cfglbl_list</span><span class=\"p\">,</span> <span class=\"n\">cfgx2_cumhist_percent</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n    <span class=\"n\">cfglbl_to_score</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">sort_dict</span><span class=\"p\">(</span><span class=\"n\">cfglbl_to_score</span><span class=\"p\">,</span> <span class=\"n\">part</span><span class=\"o\">=</span><span class=\"s1\">&#39;vals&#39;</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;accuracy @rank1: &#39;</span> <span class=\"o\">+</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr4</span><span class=\"p\">(</span><span class=\"n\">cfglbl_to_score</span><span class=\"p\">,</span> <span class=\"n\">strkeys</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                                         <span class=\"n\">precision</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">))</span>\n\n    <span class=\"n\">cfglbl_list</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_varied_labels</span><span class=\"p\">(</span><span class=\"n\">shorten</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                                            <span class=\"n\">join_acfgs</span><span class=\"o\">=</span><span class=\"n\">join_acfgs</span><span class=\"p\">,</span>\n                                            <span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;sep&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">))</span>\n    <span class=\"n\">label_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"si\">%6.2f%%</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">percent</span><span class=\"p\">,))</span> <span class=\"o\">+</span> <span class=\"s1\">&#39; - &#39;</span> <span class=\"o\">+</span> <span class=\"n\">label</span>\n        <span class=\"k\">for</span> <span class=\"n\">label</span><span class=\"p\">,</span> <span class=\"n\">percent</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">cfglbl_list</span><span class=\"p\">,</span> <span class=\"n\">cfgx2_cumhist_percent</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])]</span>\n\n    <span class=\"n\">cmap_seed</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argval</span><span class=\"p\">(</span><span class=\"s1\">&#39;--prefix&#39;</span><span class=\"p\">,</span> <span class=\"n\">type_</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n    <span class=\"n\">color_list</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">distinct_colors</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">label_list</span><span class=\"p\">),</span> <span class=\"n\">cmap_seed</span><span class=\"o\">=</span><span class=\"n\">cmap_seed</span><span class=\"p\">)</span>\n\n    <span class=\"n\">marker_list</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">distinct_markers</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">label_list</span><span class=\"p\">))</span>\n    <span class=\"n\">test_cfgx_slice</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argval</span><span class=\"p\">(</span><span class=\"s1\">&#39;--test_cfgx_slice&#39;</span><span class=\"p\">,</span> <span class=\"n\">type_</span><span class=\"o\">=</span><span class=\"s1\">&#39;fuzzy_subset&#39;</span><span class=\"p\">,</span>\n                                    <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">test_cfgx_slice</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">test_cfgx_slice</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;test_cfgx_slice = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">test_cfgx_slice</span><span class=\"p\">,))</span>\n        <span class=\"n\">cfgx2_cumhist_percent</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">cfgx2_cumhist_percent</span><span class=\"p\">,</span>\n                                                      <span class=\"n\">test_cfgx_slice</span><span class=\"p\">))</span>\n        <span class=\"n\">label_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">label_list</span><span class=\"p\">,</span> <span class=\"n\">test_cfgx_slice</span><span class=\"p\">)</span>\n        <span class=\"n\">color_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">color_list</span><span class=\"p\">,</span> <span class=\"n\">test_cfgx_slice</span><span class=\"p\">)</span>\n        <span class=\"n\">marker_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">marker_list</span><span class=\"p\">,</span> <span class=\"n\">test_cfgx_slice</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Order cdf list by rank0</span>\n    <span class=\"c1\">#sortx = cfgx2_cumhist_percent.T[0].argsort()[::-1]</span>\n    <span class=\"n\">sortx</span> <span class=\"o\">=</span> <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">argsort_records</span><span class=\"p\">(</span><span class=\"n\">cfgx2_cumhist_percent</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">)[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n    <span class=\"n\">label_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">label_list</span><span class=\"p\">,</span> <span class=\"n\">sortx</span><span class=\"p\">)</span>\n    <span class=\"n\">cfgx2_cumhist_percent</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">cfgx2_cumhist_percent</span><span class=\"p\">,</span> <span class=\"n\">sortx</span><span class=\"p\">))</span>\n    <span class=\"n\">color_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">color_list</span><span class=\"p\">,</span> <span class=\"n\">sortx</span><span class=\"p\">)</span>\n    <span class=\"n\">marker_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">marker_list</span><span class=\"p\">,</span> <span class=\"n\">sortx</span><span class=\"p\">)</span>\n    <span class=\"c1\">#</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">verbose</span><span class=\"p\">:</span>\n        <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">print_unique_annot_config_stats</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">)</span>\n\n    <span class=\"n\">numranks</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argval</span><span class=\"p\">(</span><span class=\"s1\">&#39;--numranks&#39;</span><span class=\"p\">,</span> <span class=\"n\">type_</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">numranks</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">numranks</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">numranks</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cfgx2_cumhist_percent</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">)</span>\n\n    <span class=\"n\">maxpos</span> <span class=\"o\">=</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cfgx2_cumhist_percent</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">),</span> <span class=\"n\">numranks</span><span class=\"p\">)</span>\n    <span class=\"n\">cfgx2_cumhist_short</span> <span class=\"o\">=</span> <span class=\"n\">cfgx2_cumhist_percent</span><span class=\"p\">[:,</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"n\">maxpos</span><span class=\"p\">]</span>\n    <span class=\"n\">edges_short</span> <span class=\"o\">=</span> <span class=\"n\">edges</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">),</span> <span class=\"n\">numranks</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)]</span>\n\n    <span class=\"c1\"># twoplots = not ut.get_argflag(&#39;--cdfzoom&#39;)</span>\n    <span class=\"n\">twoplots</span> <span class=\"o\">=</span> <span class=\"ow\">not</span> <span class=\"n\">cdfzoom</span>\n    <span class=\"n\">pnum_</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">make_pnum_nextgen</span><span class=\"p\">(</span><span class=\"n\">nRows</span><span class=\"o\">=</span><span class=\"n\">twoplots</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">nCols</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n    <span class=\"n\">fnum</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">ensure_fnum</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n    <span class=\"c1\">#target_label = &#39;% groundtrue matches \u2264 rank&#39;</span>\n\n    <span class=\"n\">ymin</span> <span class=\"o\">=</span> <span class=\"mi\">30</span> <span class=\"k\">if</span> <span class=\"n\">cfgx2_cumhist_percent</span><span class=\"o\">.</span><span class=\"n\">min</span><span class=\"p\">()</span> <span class=\"o\">&gt;</span> <span class=\"mi\">30</span> <span class=\"ow\">and</span> <span class=\"kc\">False</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n    <span class=\"n\">num_yticks</span> <span class=\"o\">=</span> <span class=\"mi\">8</span> <span class=\"k\">if</span> <span class=\"n\">ymin</span> <span class=\"o\">==</span> <span class=\"mi\">30</span> <span class=\"k\">else</span> <span class=\"mi\">11</span>\n\n    <span class=\"n\">kind</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argval</span><span class=\"p\">(</span><span class=\"s1\">&#39;--kind&#39;</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">kind</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">kind</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">kind</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;bar&#39;</span>\n    <span class=\"k\">elif</span> <span class=\"n\">kind</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;cmc&#39;</span><span class=\"p\">:</span>\n        <span class=\"n\">kind</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;plot&#39;</span>\n\n    <span class=\"n\">plotname</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;Cumulative Match Characteristic (CMC)&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">plotname</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argval</span><span class=\"p\">(</span><span class=\"s1\">&#39;--plotname&#39;</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">plotname</span><span class=\"p\">)</span>\n    <span class=\"n\">figtitle</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">make_figtitle</span><span class=\"p\">(</span><span class=\"n\">plotname</span><span class=\"p\">)</span>\n\n    <span class=\"n\">xpad</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"mi\">9</span> <span class=\"k\">if</span> <span class=\"n\">kind</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;plot&#39;</span> <span class=\"k\">else</span> <span class=\"o\">.</span><span class=\"mi\">5</span>\n\n    <span class=\"n\">cumhistkw</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span>\n        <span class=\"n\">xlabel</span><span class=\"o\">=</span><span class=\"s1\">&#39;rank&#39;</span><span class=\"p\">,</span> <span class=\"n\">ylabel</span><span class=\"o\">=</span><span class=\"n\">target_label</span><span class=\"p\">,</span> <span class=\"n\">color_list</span><span class=\"o\">=</span><span class=\"n\">color_list</span><span class=\"p\">,</span>\n        <span class=\"n\">marker_list</span><span class=\"o\">=</span><span class=\"n\">marker_list</span><span class=\"p\">,</span> <span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"n\">fnum</span><span class=\"p\">,</span>\n        <span class=\"c1\">#legend_loc=&#39;lower right&#39;,</span>\n        <span class=\"n\">legend_loc</span><span class=\"o\">=</span><span class=\"s1\">&#39;lower right&#39;</span><span class=\"p\">,</span>\n        <span class=\"n\">num_yticks</span><span class=\"o\">=</span><span class=\"n\">num_yticks</span><span class=\"p\">,</span> <span class=\"n\">ymax</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">ymin</span><span class=\"o\">=</span><span class=\"n\">ymin</span><span class=\"p\">,</span> <span class=\"n\">ypad</span><span class=\"o\">=.</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n        <span class=\"n\">xmin</span><span class=\"o\">=</span><span class=\"n\">xpad</span><span class=\"p\">,</span>\n        <span class=\"n\">kind</span><span class=\"o\">=</span><span class=\"n\">kind</span><span class=\"p\">,</span>\n        <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"n\">figtitle</span><span class=\"p\">,</span>\n        <span class=\"c1\"># figtitle=figtitle,</span>\n        <span class=\"c1\">#xpad=.05,</span>\n        <span class=\"c1\">#**FONTKW</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">cumhistkw</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># if not twoplots:</span>\n    <span class=\"n\">minval</span> <span class=\"o\">=</span> <span class=\"n\">numranks</span> <span class=\"k\">if</span> <span class=\"n\">numranks</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">10</span> <span class=\"k\">else</span> <span class=\"mi\">10</span>\n\n    <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">plot_rank_cumhist</span><span class=\"p\">(</span>\n        <span class=\"n\">cfgx2_cumhist_short</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"o\">=</span><span class=\"n\">edges_short</span><span class=\"p\">,</span> <span class=\"n\">label_list</span><span class=\"o\">=</span><span class=\"n\">label_list</span><span class=\"p\">,</span>\n        <span class=\"n\">num_xticks</span><span class=\"o\">=</span><span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">minval</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">numranks</span> <span class=\"o\">//</span> <span class=\"mi\">20</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">)),</span>\n        <span class=\"c1\">#legend_alpha=.85,</span>\n        <span class=\"n\">legend_alpha</span><span class=\"o\">=.</span><span class=\"mi\">92</span><span class=\"p\">,</span>\n        <span class=\"c1\">#legendsize=12,</span>\n        <span class=\"n\">xmax</span><span class=\"o\">=</span><span class=\"n\">numranks</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">xpad</span><span class=\"p\">,</span>\n        <span class=\"n\">use_legend</span><span class=\"o\">=</span><span class=\"ow\">not</span> <span class=\"n\">twoplots</span><span class=\"p\">,</span>\n        <span class=\"n\">pnum</span><span class=\"o\">=</span><span class=\"n\">pnum_</span><span class=\"p\">(),</span> <span class=\"o\">**</span><span class=\"n\">cumhistkw</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">twoplots</span><span class=\"p\">:</span>\n        <span class=\"k\">del</span> <span class=\"n\">cumhistkw</span><span class=\"p\">[</span><span class=\"s1\">&#39;title&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">numranks2</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cfgx2_cumhist_percent</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">)</span>\n        <span class=\"n\">ax1</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">gca</span><span class=\"p\">()</span>\n        <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">plot_rank_cumhist</span><span class=\"p\">(</span>\n            <span class=\"n\">cfgx2_cumhist_percent</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"o\">=</span><span class=\"n\">edges</span><span class=\"p\">,</span> <span class=\"n\">label_list</span><span class=\"o\">=</span><span class=\"n\">label_list</span><span class=\"p\">,</span>\n            <span class=\"n\">num_xticks</span><span class=\"o\">=</span><span class=\"n\">numranks2</span><span class=\"p\">,</span> <span class=\"n\">use_legend</span><span class=\"o\">=</span><span class=\"n\">twoplots</span><span class=\"p\">,</span> <span class=\"n\">pnum</span><span class=\"o\">=</span><span class=\"n\">pnum_</span><span class=\"p\">(),</span>\n            <span class=\"n\">xmax</span><span class=\"o\">=</span><span class=\"n\">numranks2</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">xpad</span><span class=\"p\">,</span>\n            <span class=\"o\">**</span><span class=\"n\">cumhistkw</span><span class=\"p\">)</span>\n        <span class=\"n\">ax2</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">gca</span><span class=\"p\">()</span>\n        <span class=\"c1\">#pt.zoom_effect01(ax1, ax2, 1, numranks2, fc=&#39;w&#39;)</span>\n        <span class=\"c1\">#pt.zoom_effect01(ax1, ax2, 1, numranks, fc=&#39;w&#39;)</span>\n        <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">zoom_effect01</span><span class=\"p\">(</span><span class=\"n\">ax1</span><span class=\"p\">,</span> <span class=\"n\">ax2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">numranks</span><span class=\"p\">,</span> <span class=\"n\">ec</span><span class=\"o\">=</span><span class=\"s1\">&#39;k&#39;</span><span class=\"p\">,</span> <span class=\"n\">fc</span><span class=\"o\">=</span><span class=\"s1\">&#39;w&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"n\">icon</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_database_icon</span><span class=\"p\">()</span>\n    <span class=\"c1\"># print(&#39;draw_icon = %r&#39; % (draw_icon,))</span>\n    <span class=\"k\">if</span> <span class=\"n\">draw_icon</span> <span class=\"ow\">and</span> <span class=\"n\">icon</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"c1\">#ax = pt.gca()</span>\n        <span class=\"c1\">#ax.get_xlim()</span>\n        <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">overlay_icon</span><span class=\"p\">(</span><span class=\"n\">icon</span><span class=\"p\">,</span> <span class=\"n\">bbox_alignment</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">as_artist</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"c1\"># pt.overlay_icon(icon, bbox_alignment=(0, 0), as_artist=False, max_asize=(.5, .5))</span>\n        <span class=\"c1\"># pt.overlay_icon(icon, bbox_alignment=(0, 1), as_artist=False)</span>\n        <span class=\"c1\"># max_asize=(2, 4))</span>\n        <span class=\"k\">pass</span>\n        <span class=\"c1\">#ax.get_ylim()</span>\n\n    <span class=\"c1\">#ax = pt.gca()</span>\n    <span class=\"c1\">#ax.grid(True)</span>\n    <span class=\"c1\">#fig = pt.gcf()</span>\n    <span class=\"c1\">#import utool as ut</span>\n    <span class=\"c1\"># HACK FOR FIGSIZE</span>\n    <span class=\"c1\">#fig.set_size_inches(15, 7)</span>\n    <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argflag</span><span class=\"p\">(</span><span class=\"s1\">&#39;--contextadjust&#39;</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">adjust_subplots</span><span class=\"p\">(</span><span class=\"n\">left</span><span class=\"o\">=.</span><span class=\"mi\">05</span><span class=\"p\">,</span> <span class=\"n\">bottom</span><span class=\"o\">=.</span><span class=\"mi\">08</span><span class=\"p\">,</span> <span class=\"n\">wspace</span><span class=\"o\">=.</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">hspace</span><span class=\"o\">=.</span><span class=\"mi\">15</span><span class=\"p\">)</span>\n        <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">adjust_subplots</span><span class=\"p\">(</span><span class=\"n\">use_argv</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"draw_case_timedeltas\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.experiment_drawing.draw_case_timedeltas\">[docs]</a><span class=\"nd\">@profile</span>\n<span class=\"k\">def</span> <span class=\"nf\">draw_case_timedeltas</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">testres</span><span class=\"p\">,</span> <span class=\"n\">falsepos</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">truepos</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                         <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.dev -e draw_case_timedeltas --show</span>\n<span class=\"sd\">        python -m ibeis.dev -e draw_case_timedeltas --show -t default \\</span>\n<span class=\"sd\">            -a unctrl:num_names=1,name_offset=[1,2]</span>\n<span class=\"sd\">        python -m ibeis.dev -e draw_case_timedeltas --show -t default \\</span>\n<span class=\"sd\">            -a unctrl:num_names=1,name_offset=[1,2],joinme=1</span>\n<span class=\"sd\">        python -m ibeis.dev -e draw_case_timedeltas --show -t default \\</span>\n<span class=\"sd\">            -a unctrl:num_names=1,name_offset=[1,2] \\</span>\n<span class=\"sd\">               unctrl:num_names=1,name_offset=[3,0]</span>\n\n\n<span class=\"sd\">        python -m ibeis.dev -e timedelta_hist --show -t baseline \\</span>\n<span class=\"sd\">            -a unctrl ctrl:force_const_size=True unctrl:force_const_size=True \\</span>\n<span class=\"sd\">            --consistent --db PZ_MTEST</span>\n\n<span class=\"sd\">        # Testing</span>\n<span class=\"sd\">        python -m ibeis.dev -e timedelta_hist --show -t baseline \\</span>\n<span class=\"sd\">            -a unctrl ctrl:force_const_size=True unctrl:force_const_size=True \\</span>\n<span class=\"sd\">            --consistent --db PZ_Master1</span>\n<span class=\"sd\">        python -m ibeis.dev -e timedelta_hist --show -t baseline \\</span>\n<span class=\"sd\">            -a unctrl ctrl:sample_rule_ref=max_timedelta --db PZ_Master1 \\</span>\n<span class=\"sd\">            --aidcfginfo</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.expt.experiment_drawing import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.init import main_helpers</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs, testres = main_helpers.testdata_expts(&#39;PZ_MTEST&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; draw_case_timedeltas(ibs, testres)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.show_if_requested()</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">plottool</span> <span class=\"k\">as</span> <span class=\"nn\">pt</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n    <span class=\"n\">plotkw</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"n\">plotkw</span><span class=\"p\">[</span><span class=\"s1\">&#39;markersize&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">12</span>\n    <span class=\"n\">plotkw</span><span class=\"p\">[</span><span class=\"s1\">&#39;marker_list&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"c1\">#plotkw[&#39;linestyle&#39;] = &#39;--&#39;</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">verbose</span><span class=\"p\">:</span>\n        <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">print_unique_annot_config_stats</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">)</span>\n\n    <span class=\"n\">join_acfgs</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n    <span class=\"c1\">#cfgx2_shortlbl = testres.get_short_cfglbls()</span>\n    <span class=\"n\">cfgx2_shortlbl</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_short_cfglbls</span><span class=\"p\">(</span><span class=\"n\">join_acfgs</span><span class=\"o\">=</span><span class=\"n\">join_acfgs</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">falsepos</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">falsepos</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argflag</span><span class=\"p\">(</span><span class=\"s1\">&#39;--falsepos&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">truepos</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">truepos</span>  <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argflag</span><span class=\"p\">(</span><span class=\"s1\">&#39;--truepos&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"n\">X_data_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">X_label_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n    <span class=\"n\">truth2_prop</span><span class=\"p\">,</span> <span class=\"n\">prop2_mat</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_truth2_prop</span><span class=\"p\">(</span><span class=\"n\">join_acfg</span><span class=\"o\">=</span><span class=\"n\">join_acfgs</span><span class=\"p\">)</span>\n    <span class=\"c1\">#is_failure = prop2_mat[&#39;is_failure&#39;]</span>\n    <span class=\"n\">is_success</span> <span class=\"o\">=</span> <span class=\"n\">prop2_mat</span><span class=\"p\">[</span><span class=\"s1\">&#39;is_success&#39;</span><span class=\"p\">]</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">cfgx</span><span class=\"p\">,</span> <span class=\"n\">lbl</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">cfgx2_shortlbl</span><span class=\"p\">):</span>\n        <span class=\"n\">gt_timedelta</span> <span class=\"o\">=</span> <span class=\"n\">truth2_prop</span><span class=\"p\">[</span><span class=\"s1\">&#39;gt&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;timedelta&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">T</span>\n        <span class=\"n\">gf_timedelta</span> <span class=\"o\">=</span> <span class=\"n\">truth2_prop</span><span class=\"p\">[</span><span class=\"s1\">&#39;gf&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;timedelta&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">T</span>\n        <span class=\"c1\">#gt_f_td = gt_timedelta[cfgx][is_failure.T[cfgx]]</span>\n        <span class=\"c1\">#gf_f_td = gf_timedelta[cfgx][is_failure.T[cfgx]]</span>\n        <span class=\"n\">gt_s_td</span> <span class=\"o\">=</span> <span class=\"n\">gt_timedelta</span><span class=\"p\">[</span><span class=\"n\">cfgx</span><span class=\"p\">][</span><span class=\"n\">is_success</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">cfgx</span><span class=\"p\">]]</span>\n        <span class=\"n\">gf_s_td</span> <span class=\"o\">=</span> <span class=\"n\">gf_timedelta</span><span class=\"p\">[</span><span class=\"n\">cfgx</span><span class=\"p\">][</span><span class=\"n\">is_success</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">cfgx</span><span class=\"p\">]]</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">falsepos</span> <span class=\"ow\">or</span> <span class=\"n\">truepos</span><span class=\"p\">:</span>\n            <span class=\"n\">X_data_list</span>  <span class=\"o\">+=</span> <span class=\"p\">[</span>\n                <span class=\"n\">gt_s_td</span><span class=\"p\">,</span>\n                <span class=\"c1\">#gf_s_td</span>\n            <span class=\"p\">]</span>\n            <span class=\"n\">X_label_list</span> <span class=\"o\">+=</span> <span class=\"p\">[</span>\n                <span class=\"s1\">&#39;TP &#39;</span> <span class=\"o\">+</span> <span class=\"n\">lbl</span><span class=\"p\">,</span>\n                <span class=\"c1\">#&#39;FP &#39; + lbl</span>\n            <span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">falsepos</span><span class=\"p\">:</span>\n            <span class=\"n\">X_data_list</span>  <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">gf_s_td</span><span class=\"p\">]</span>\n            <span class=\"n\">X_label_list</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;FP &#39;</span> <span class=\"o\">+</span> <span class=\"n\">lbl</span><span class=\"p\">]</span>\n        <span class=\"n\">plotkw</span><span class=\"p\">[</span><span class=\"s1\">&#39;marker_list&#39;</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">distinct_markers</span><span class=\"p\">(</span>\n            <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">style</span><span class=\"o\">=</span><span class=\"s1\">&#39;polygon&#39;</span><span class=\"p\">,</span> <span class=\"n\">offset</span><span class=\"o\">=</span><span class=\"n\">cfgx</span><span class=\"p\">,</span> <span class=\"n\">total</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cfgx2_shortlbl</span><span class=\"p\">))</span>\n\n    <span class=\"n\">numnan_list</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"o\">~</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">isfinite</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">X</span> <span class=\"ow\">in</span> <span class=\"n\">X_data_list</span><span class=\"p\">]</span>\n    <span class=\"n\">xdata_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">X</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">isnan</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)]</span> <span class=\"k\">for</span> <span class=\"n\">X</span> <span class=\"ow\">in</span> <span class=\"n\">X_data_list</span><span class=\"p\">]</span>\n    <span class=\"n\">max_score</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">([</span><span class=\"mi\">0</span> <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">xdata</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"n\">xdata</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">xdata</span> <span class=\"ow\">in</span> <span class=\"n\">xdata_list</span><span class=\"p\">])</span>\n\n    <span class=\"n\">bins</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">seconds</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">total_seconds</span><span class=\"p\">(),</span>\n        <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">minutes</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">total_seconds</span><span class=\"p\">(),</span>\n        <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">hours</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">total_seconds</span><span class=\"p\">(),</span>\n        <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">total_seconds</span><span class=\"p\">(),</span>\n        <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">weeks</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">total_seconds</span><span class=\"p\">(),</span>\n        <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"o\">=</span><span class=\"mi\">356</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">total_seconds</span><span class=\"p\">(),</span>\n        <span class=\"c1\">#np.inf,</span>\n        <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"o\">=</span><span class=\"mi\">356</span> <span class=\"o\">*</span> <span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">total_seconds</span><span class=\"p\">(),</span> <span class=\"n\">max_score</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"c1\"># HISTOGRAM</span>\n    <span class=\"c1\">#if False:</span>\n    <span class=\"n\">freq_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">histogram</span><span class=\"p\">(</span><span class=\"n\">xdata</span><span class=\"p\">,</span> <span class=\"n\">bins</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">xdata</span> <span class=\"ow\">in</span> <span class=\"n\">xdata_list</span><span class=\"p\">]</span>\n    <span class=\"n\">timedelta_strs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_timedelta_str</span><span class=\"p\">(</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">seconds</span><span class=\"o\">=</span><span class=\"n\">b</span><span class=\"p\">),</span>\n                                           <span class=\"n\">exclude_zeros</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">b</span> <span class=\"ow\">in</span> <span class=\"n\">bins</span><span class=\"p\">]</span>\n    <span class=\"n\">bin_labels</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"s1\">&#39; - &#39;</span> <span class=\"o\">+</span> <span class=\"n\">h</span> <span class=\"k\">for</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">h</span> <span class=\"ow\">in</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">iter_window</span><span class=\"p\">(</span><span class=\"n\">timedelta_strs</span><span class=\"p\">)]</span>\n    <span class=\"n\">bin_labels</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&gt; 1 year&#39;</span>\n    <span class=\"n\">bin_labels</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&lt; 1 minute&#39;</span>\n    <span class=\"n\">WITH_NAN</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"k\">if</span> <span class=\"n\">WITH_NAN</span><span class=\"p\">:</span>\n        <span class=\"n\">freq_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">numnan</span><span class=\"p\">])</span> <span class=\"k\">for</span> <span class=\"n\">freq</span><span class=\"p\">,</span> <span class=\"n\">numnan</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">freq_list</span> <span class=\"p\">,</span> <span class=\"n\">numnan_list</span><span class=\"p\">)]</span>\n        <span class=\"n\">bin_labels</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;nan&#39;</span><span class=\"p\">]</span>\n\n    <span class=\"c1\"># Make PIE chart</span>\n    <span class=\"n\">fnum</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"n\">fnum</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">ensure_fnum</span><span class=\"p\">(</span><span class=\"n\">fnum</span><span class=\"p\">)</span>\n    <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"n\">fnum</span><span class=\"p\">)</span>\n    <span class=\"n\">pnum_</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">make_pnum_nextgen</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">get_square_row_cols</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">freq_list</span><span class=\"p\">)))</span>\n    <span class=\"n\">bin_labels</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"c1\"># python -m ibeis.dev -e timedelta_hist -t baseline -a</span>\n    <span class=\"c1\"># ctrl:force_const_size=True uncontrolled:force_const_size=True</span>\n    <span class=\"c1\"># --consistent --db GZ_ALL  --show</span>\n    <span class=\"n\">colors</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">distinct_colors</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">bin_labels</span><span class=\"p\">))</span>\n    <span class=\"k\">if</span> <span class=\"n\">WITH_NAN</span><span class=\"p\">:</span>\n        <span class=\"n\">colors</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">GRAY</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">count</span><span class=\"p\">,</span> <span class=\"n\">freq</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">freq_list</span><span class=\"p\">):</span>\n        <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"n\">fnum</span><span class=\"p\">,</span> <span class=\"n\">pnum</span><span class=\"o\">=</span><span class=\"n\">pnum_</span><span class=\"p\">())</span>\n        <span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"n\">freq</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span>\n        <span class=\"n\">masked_freq</span>   <span class=\"o\">=</span> <span class=\"n\">freq</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">mask</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"n\">masked_lbls</span>   <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">bin_labels</span><span class=\"p\">,</span> <span class=\"n\">mask</span><span class=\"p\">)</span>\n        <span class=\"n\">masked_colors</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">colors</span><span class=\"p\">,</span> <span class=\"n\">mask</span><span class=\"p\">)</span>\n        <span class=\"n\">explode</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">masked_freq</span><span class=\"p\">)</span>\n        <span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"n\">masked_freq</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span>\n        <span class=\"n\">masked_percent</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">masked_freq</span> <span class=\"o\">*</span> <span class=\"mi\">100</span> <span class=\"o\">/</span> <span class=\"n\">size</span><span class=\"p\">)</span>\n        <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">pie</span><span class=\"p\">(</span><span class=\"n\">masked_percent</span><span class=\"p\">,</span> <span class=\"n\">explode</span><span class=\"o\">=</span><span class=\"n\">explode</span><span class=\"p\">,</span> <span class=\"n\">autopct</span><span class=\"o\">=</span><span class=\"s1\">&#39;</span><span class=\"si\">%1.1f%%</span><span class=\"s1\">&#39;</span><span class=\"p\">,</span>\n                   <span class=\"n\">labels</span><span class=\"o\">=</span><span class=\"n\">masked_lbls</span><span class=\"p\">,</span> <span class=\"n\">colors</span><span class=\"o\">=</span><span class=\"n\">masked_colors</span><span class=\"p\">)</span>\n        <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">gca</span><span class=\"p\">()</span>\n        <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_xlabel</span><span class=\"p\">(</span><span class=\"n\">X_label_list</span><span class=\"p\">[</span><span class=\"n\">count</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">size=</span><span class=\"si\">%d</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">,))</span>\n        <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_aspect</span><span class=\"p\">(</span><span class=\"s1\">&#39;equal&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argflag</span><span class=\"p\">(</span><span class=\"s1\">&#39;--contextadjust&#39;</span><span class=\"p\">):</span>\n        <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">adjust_subplots</span><span class=\"p\">(</span><span class=\"n\">left</span><span class=\"o\">=.</span><span class=\"mi\">08</span><span class=\"p\">,</span> <span class=\"n\">bottom</span><span class=\"o\">=.</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">top</span><span class=\"o\">=.</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"n\">wspace</span><span class=\"o\">=.</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">hspace</span><span class=\"o\">=.</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">adjust_subplots</span><span class=\"p\">(</span><span class=\"n\">use_argv</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"draw_match_cases\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.experiment_drawing.draw_match_cases\">[docs]</a><span class=\"nd\">@profile</span>\n<span class=\"k\">def</span> <span class=\"nf\">draw_match_cases</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">testres</span><span class=\"p\">,</span> <span class=\"n\">metadata</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                     <span class=\"n\">show_in_notebook</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">annot_modes</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                     <span class=\"n\">case_pos_list</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">interact</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                     <span class=\"n\">figdir</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (ibeis.IBEISController):  ibeis controller object</span>\n<span class=\"sd\">        testres (TestResult):  test result object</span>\n<span class=\"sd\">        metadata (None): (default = None)</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis --tf draw_match_cases</span>\n<span class=\"sd\">        python -m ibeis.dev -e draw_match_cases --figdir=figure</span>\n<span class=\"sd\">        python -m ibeis.dev -e draw_match_cases --db PZ_Master1 -a ctrl \\</span>\n<span class=\"sd\">            -t default --filt :fail=True,min_gtrank=5,gtrank_lt=20 --render</span>\n\n<span class=\"sd\">        # Shows the best results</span>\n<span class=\"sd\">        python -m ibeis.dev -e cases --db PZ_Master1 \\</span>\n<span class=\"sd\">            -a timectrl -t invarbest</span>\n<span class=\"sd\">            --filt :sortasc=gtscore,success=True,index=200:201 --show</span>\n\n<span class=\"sd\">        # Shows failures sorted by gt score</span>\n<span class=\"sd\">        python -m ibeis.dev -e cases --db PZ_Master1 \\</span>\n<span class=\"sd\">            -a timectrl -t invarbest \\</span>\n<span class=\"sd\">            --filt :sortdsc=gfscore,min_gtrank=1 --show</span>\n\n<span class=\"sd\">        # Find the untagged photobomb and scenery cases</span>\n<span class=\"sd\">        python -m ibeis.dev -e cases --db PZ_Master1 -a timectrl \\</span>\n<span class=\"sd\">            -t invarbest --show --filt \\</span>\n<span class=\"sd\">            :orderby=gfscore,reverse=1,min_gtrank=1,max_gf_td=24h,max_gf_tags=0</span>\n\n<span class=\"sd\">        # Find untagged failures</span>\n<span class=\"sd\">        python -m ibeis.dev -e cases --db PZ_Master1 -a timectrl \\</span>\n<span class=\"sd\">            -t invarbest \\</span>\n<span class=\"sd\">            --filt :orderby=gfscore,reverse=1,min_gtrank=1,max_gf_tags=0 --show</span>\n\n<span class=\"sd\">        # Show disagreement cases</span>\n<span class=\"sd\">        ibeis --tf draw_match_cases --db PZ_MTEST -a default:size=20 \\</span>\n<span class=\"sd\">            -t default:K=[1,4] \\</span>\n<span class=\"sd\">            --filt :disagree=True,index=0:4 --show</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.expt.experiment_drawing import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.init import main_helpers</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs, testres = main_helpers.testdata_expts(&#39;PZ_MTEST&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; filt_cfg = main_helpers.testdata_filtcfg()</span>\n<span class=\"sd\">        &gt;&gt;&gt; metadata = None</span>\n<span class=\"sd\">        &gt;&gt;&gt; figdir = ut.get_argval((&#39;--figdir&#39;, &#39;--dpath&#39;), type_=str, default=None)</span>\n<span class=\"sd\">        &gt;&gt;&gt; analysis_fpath_list = draw_match_cases(ibs, testres, metadata,</span>\n<span class=\"sd\">        &gt;&gt;&gt;                                        f=filt_cfg, figdir=figdir)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.show_if_requested()</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">plottool</span> <span class=\"k\">as</span> <span class=\"nn\">pt</span>\n    <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">NOT_QUIET</span><span class=\"p\">:</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">colorprint</span><span class=\"p\">(</span><span class=\"s1\">&#39;[expt] Drawing individual results&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;yellow&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">matplotlib</span> <span class=\"k\">as</span> <span class=\"nn\">mpl</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">ibeis.scripts.thesis</span> <span class=\"k\">import</span> <span class=\"n\">TMP_RC</span>\n        <span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">rcParams</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">TMP_RC</span><span class=\"p\">)</span>\n\n    <span class=\"c1\">#### ARGUMENT PARSING AND RECTIFICATION ###</span>\n    <span class=\"n\">cmdaug</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argval</span><span class=\"p\">(</span><span class=\"s1\">&#39;--cmdaug&#39;</span><span class=\"p\">,</span> <span class=\"n\">type_</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">help_</span><span class=\"o\">=</span><span class=\"s1\">&#39;candhack&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"n\">show</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argflag</span><span class=\"p\">(</span><span class=\"s1\">&#39;--show&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">interact</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">interact</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argflag</span><span class=\"p\">(</span><span class=\"s1\">&#39;--interact&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">figdir</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">figdir</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_fig_dir</span><span class=\"p\">()</span>\n    <span class=\"n\">show_kwargs</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;N&#39;</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ori&#39;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ell_alpha&#39;</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"mi\">9</span><span class=\"p\">}</span>\n    <span class=\"c1\"># show analysis</span>\n    <span class=\"n\">show_kwargs</span><span class=\"p\">[</span><span class=\"s1\">&#39;show_query&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n    <span class=\"n\">show_kwargs</span><span class=\"p\">[</span><span class=\"s1\">&#39;viz_name_score&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;viz_name_score&#39;</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">show_kwargs</span><span class=\"p\">[</span><span class=\"s1\">&#39;show_timedelta&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"n\">show_kwargs</span><span class=\"p\">[</span><span class=\"s1\">&#39;show_gf&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"n\">show_kwargs</span><span class=\"p\">[</span><span class=\"s1\">&#39;colorbar_&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n    <span class=\"n\">show_kwargs</span><span class=\"p\">[</span><span class=\"s1\">&#39;with_figtitle&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">show_in_notebook</span>\n    <span class=\"n\">show_kwargs</span><span class=\"p\">[</span><span class=\"s1\">&#39;fastmode&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"k\">if</span> <span class=\"n\">annot_modes</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">annot_modes</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argval</span><span class=\"p\">(</span><span class=\"s1\">&#39;--annotmodes&#39;</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n    <span class=\"n\">filt_cfg</span> <span class=\"o\">=</span> <span class=\"n\">f</span>\n    <span class=\"k\">if</span> <span class=\"n\">case_pos_list</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">case_pos_list</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">case_sample2</span><span class=\"p\">(</span><span class=\"n\">filt_cfg</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">verbose</span><span class=\"p\">)</span>  <span class=\"c1\"># NOQA</span>\n    <span class=\"c1\">#########################</span>\n\n    <span class=\"c1\">#### DIRECTORY SETUP ###</span>\n    <span class=\"n\">figdir</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">truepath</span><span class=\"p\">(</span><span class=\"n\">figdir</span><span class=\"p\">)</span>\n    <span class=\"n\">case_figdir</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">figdir</span><span class=\"p\">,</span> <span class=\"s1\">&#39;cases_&#39;</span> <span class=\"o\">+</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_dbname</span><span class=\"p\">())</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ensuredir</span><span class=\"p\">(</span><span class=\"n\">case_figdir</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argflag</span><span class=\"p\">((</span><span class=\"s1\">&#39;--view-fig-directory&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;--vf&#39;</span><span class=\"p\">)):</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">view_directory</span><span class=\"p\">(</span><span class=\"n\">case_figdir</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Common directory</span>\n    <span class=\"n\">indiv_results_figdir</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ensuredir</span><span class=\"p\">((</span><span class=\"n\">case_figdir</span><span class=\"p\">,</span> <span class=\"s1\">&#39;indiv_results&#39;</span><span class=\"p\">))</span>\n    <span class=\"n\">top_rank_analysis_dir</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ensuredir</span><span class=\"p\">((</span><span class=\"n\">case_figdir</span><span class=\"p\">,</span> <span class=\"s1\">&#39;top_rank_analysis&#39;</span><span class=\"p\">))</span>\n    <span class=\"n\">dump</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n    <span class=\"n\">DO_COPY_QUEUE</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"k\">if</span> <span class=\"n\">DO_COPY_QUEUE</span><span class=\"p\">:</span>\n        <span class=\"n\">cpq</span> <span class=\"o\">=</span> <span class=\"n\">draw_helpers</span><span class=\"o\">.</span><span class=\"n\">IndividualResultsCopyTaskQueue</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">NOT_QUIET</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;case_figdir = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">case_figdir</span><span class=\"p\">,))</span>\n    <span class=\"c1\">##########################</span>\n\n    <span class=\"c1\">#### INTERACTIVE SETUP ###</span>\n    <span class=\"k\">def</span> <span class=\"nf\">toggle_annot_mode</span><span class=\"p\">():</span>\n        <span class=\"k\">for</span> <span class=\"n\">ix</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">annot_modes</span><span class=\"p\">)):</span>\n            <span class=\"c1\"># See viz_qres.py for more annot_mode info</span>\n            <span class=\"c1\"># TODO: use viz_qres to get the number of possible annot modes.</span>\n            <span class=\"n\">annot_modes</span><span class=\"p\">[</span><span class=\"n\">ix</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">annot_modes</span><span class=\"p\">[</span><span class=\"n\">ix</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">%</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">toggle_fast_mode</span><span class=\"p\">():</span>\n        <span class=\"n\">show_kwargs</span><span class=\"p\">[</span><span class=\"s1\">&#39;fastmode&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"ow\">not</span> <span class=\"n\">show_kwargs</span><span class=\"p\">[</span><span class=\"s1\">&#39;fastmode&#39;</span><span class=\"p\">]</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;show_kwargs[</span><span class=\"se\">\\&#39;</span><span class=\"s1\">fastmode</span><span class=\"se\">\\&#39;</span><span class=\"s1\">] = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">show_kwargs</span><span class=\"p\">[</span><span class=\"s1\">&#39;fastmode&#39;</span><span class=\"p\">],))</span>\n    <span class=\"n\">custom_actions</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">(</span><span class=\"s1\">&#39;present&#39;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">&#39;s&#39;</span><span class=\"p\">],</span> <span class=\"s1\">&#39;present&#39;</span><span class=\"p\">,</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">present</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s1\">&#39;toggle_annot_mode&#39;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">],</span> <span class=\"s1\">&#39;toggle_annot_mode&#39;</span><span class=\"p\">,</span> <span class=\"n\">toggle_annot_mode</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s1\">&#39;toggle_fast_mode&#39;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">&#39;f&#39;</span><span class=\"p\">],</span> <span class=\"s1\">&#39;toggle_fast_mode&#39;</span><span class=\"p\">,</span> <span class=\"n\">toggle_fast_mode</span><span class=\"p\">,</span>\n         <span class=\"s1\">&#39;Fast mode lowers drwaing quality&#39;</span><span class=\"p\">),</span>\n    <span class=\"p\">]</span>\n    <span class=\"c1\">##########################</span>\n\n    <span class=\"n\">cfgx2_qreq_</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_qreq_</span>\n    <span class=\"n\">qaids</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_test_qaids</span><span class=\"p\">()</span>\n    <span class=\"n\">cfgx2_shortlbl</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_short_cfglbls</span><span class=\"p\">()</span>\n    <span class=\"n\">qx_list</span><span class=\"p\">,</span> <span class=\"n\">cfgx_list</span> <span class=\"o\">=</span> <span class=\"n\">case_pos_list</span><span class=\"o\">.</span><span class=\"n\">T</span>\n    <span class=\"c1\"># Get configs needed for each query</span>\n    <span class=\"n\">qx2_cfgxs</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">group_items</span><span class=\"p\">(</span><span class=\"n\">cfgx_list</span><span class=\"p\">,</span> <span class=\"n\">qx_list</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">show_in_notebook</span><span class=\"p\">:</span>\n        <span class=\"n\">cfg_colors</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">distinct_colors</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_qreq_</span><span class=\"p\">))</span>\n\n    <span class=\"n\">unique_qx</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">unique</span><span class=\"p\">(</span><span class=\"n\">qx_list</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">interact</span><span class=\"p\">:</span>\n        <span class=\"n\">_iter</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">InteractiveIter</span><span class=\"p\">(</span><span class=\"n\">unique_qx</span><span class=\"p\">,</span> <span class=\"n\">enabled</span><span class=\"o\">=</span><span class=\"n\">interact</span><span class=\"p\">,</span>\n                                   <span class=\"n\">custom_actions</span><span class=\"o\">=</span><span class=\"n\">custom_actions</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">_iter</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ProgIter</span><span class=\"p\">(</span><span class=\"n\">unique_qx</span><span class=\"p\">,</span> <span class=\"n\">lbl</span><span class=\"o\">=</span><span class=\"s1\">&#39;drawing cases&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"n\">fnum</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">ensure_fnum</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n    <span class=\"n\">fpaths_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">analysis_fpath_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">count</span><span class=\"p\">,</span> <span class=\"n\">qx</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">_iter</span><span class=\"p\">):</span>\n        <span class=\"n\">cfgxs</span> <span class=\"o\">=</span> <span class=\"n\">qx2_cfgxs</span><span class=\"p\">[</span><span class=\"n\">qx</span><span class=\"p\">]</span>\n        <span class=\"n\">qreq_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">cfgx2_qreq_</span><span class=\"p\">,</span> <span class=\"n\">cfgxs</span><span class=\"p\">)</span>\n        <span class=\"c1\"># TODO: try to get away with not reloading query results or loading</span>\n        <span class=\"c1\"># them in batch if possible</span>\n        <span class=\"c1\"># It actually doesnt take that long. the drawing is what hurts</span>\n        <span class=\"c1\"># TODO: be able to load old results even if they are currently invalid</span>\n        <span class=\"n\">qaid</span> <span class=\"o\">=</span> <span class=\"n\">qaids</span><span class=\"p\">[</span><span class=\"n\">qx</span><span class=\"p\">]</span>\n        <span class=\"n\">cm_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">qreq_</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">qaids</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">qaid</span><span class=\"p\">])[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">qreq_</span> <span class=\"ow\">in</span> <span class=\"n\">qreq_list</span><span class=\"p\">]</span>\n        <span class=\"n\">fpaths_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([])</span>\n\n        <span class=\"n\">truth2_prop</span><span class=\"p\">,</span> <span class=\"n\">prop2_mat</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_truth2_prop</span><span class=\"p\">()</span>\n\n        <span class=\"k\">if</span> <span class=\"mi\">0</span> <span class=\"ow\">or</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">VERBOSE</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;=== QUERY INFO ===&#39;</span><span class=\"p\">)</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;=== QUERY INFO ===&#39;</span><span class=\"p\">)</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;qaid = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">qaid</span><span class=\"p\">,))</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;qx = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">qx</span><span class=\"p\">,))</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;cfgxs = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">cfgxs</span><span class=\"p\">,))</span>\n            <span class=\"c1\"># print testres info about this item</span>\n            <span class=\"n\">take_cfgs</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">,</span> <span class=\"n\">index_list</span><span class=\"o\">=</span><span class=\"n\">cfgxs</span><span class=\"p\">)</span>\n            <span class=\"n\">take_qx</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">,</span> <span class=\"n\">index_list</span><span class=\"o\">=</span><span class=\"n\">qx</span><span class=\"p\">)</span>\n            <span class=\"n\">truth_cfgs</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">hmap_vals</span><span class=\"p\">(</span><span class=\"n\">take_qx</span><span class=\"p\">,</span> <span class=\"n\">truth2_prop</span><span class=\"p\">)</span>\n            <span class=\"n\">truth_item</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">hmap_vals</span><span class=\"p\">(</span><span class=\"n\">take_cfgs</span><span class=\"p\">,</span> <span class=\"n\">truth_cfgs</span><span class=\"p\">,</span> <span class=\"n\">max_depth</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"n\">prop_cfgs</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">hmap_vals</span><span class=\"p\">(</span><span class=\"n\">take_qx</span><span class=\"p\">,</span> <span class=\"n\">prop2_mat</span><span class=\"p\">)</span>\n            <span class=\"n\">prop_item</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">hmap_vals</span><span class=\"p\">(</span><span class=\"n\">take_cfgs</span><span class=\"p\">,</span> <span class=\"n\">prop_cfgs</span><span class=\"p\">,</span> <span class=\"n\">max_depth</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;truth2_prop[item] = &#39;</span> <span class=\"o\">+</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr3</span><span class=\"p\">(</span><span class=\"n\">truth_item</span><span class=\"p\">,</span> <span class=\"n\">nl</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;prop2_mat[item] = &#39;</span> <span class=\"o\">+</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr3</span><span class=\"p\">(</span><span class=\"n\">prop_item</span><span class=\"p\">,</span> <span class=\"n\">nl</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">show_in_notebook</span><span class=\"p\">:</span>\n            <span class=\"c1\"># hack to show vertical line in notebook separate configs</span>\n            <span class=\"n\">fnum</span> <span class=\"o\">=</span> <span class=\"n\">fnum</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n            <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">uint8</span><span class=\"p\">),</span> <span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"n\">fnum</span><span class=\"p\">)</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">count2</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">cfgx</span><span class=\"p\">,</span> <span class=\"n\">cm</span><span class=\"p\">,</span> <span class=\"n\">qreq_</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">cfgxs</span><span class=\"p\">,</span> <span class=\"n\">cm_list</span><span class=\"p\">,</span> <span class=\"n\">qreq_list</span><span class=\"p\">)):</span>\n            <span class=\"k\">if</span> <span class=\"n\">show_in_notebook</span><span class=\"p\">:</span>\n                <span class=\"n\">fnum</span> <span class=\"o\">=</span> <span class=\"n\">fnum</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">fnum</span> <span class=\"o\">=</span> <span class=\"n\">cfgx</span> <span class=\"k\">if</span> <span class=\"n\">interact</span> <span class=\"k\">else</span> <span class=\"mi\">1</span>\n            <span class=\"c1\">#cm = cm.extend_results(qreq_)</span>\n            <span class=\"c1\"># Get row and column index</span>\n            <span class=\"n\">cfgstr</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_cfgstr</span><span class=\"p\">(</span><span class=\"n\">cfgx</span><span class=\"p\">)</span>\n            <span class=\"n\">query_lbl</span> <span class=\"o\">=</span> <span class=\"n\">cfgx2_shortlbl</span><span class=\"p\">[</span><span class=\"n\">cfgx</span><span class=\"p\">]</span>\n            <span class=\"n\">qres_dpath</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;qaid=</span><span class=\"si\">{qaid}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">qaid</span><span class=\"o\">=</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">qaid</span><span class=\"p\">)</span>\n            <span class=\"n\">individ_results_dpath</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">indiv_results_figdir</span><span class=\"p\">,</span> <span class=\"n\">qres_dpath</span><span class=\"p\">)</span>\n            <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ensuredir</span><span class=\"p\">(</span><span class=\"n\">individ_results_dpath</span><span class=\"p\">)</span>\n            <span class=\"c1\"># Draw Result</span>\n            <span class=\"c1\"># try to shorten query labels a bit</span>\n            <span class=\"n\">query_lbl</span> <span class=\"o\">=</span> <span class=\"n\">query_lbl</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">&#39; &#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\&#39;</span><span class=\"s1\">&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">_query_lbl</span> <span class=\"o\">=</span> <span class=\"n\">query_lbl</span>\n            <span class=\"n\">qres_fname</span> <span class=\"o\">=</span> <span class=\"n\">query_lbl</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;.png&#39;</span>\n\n            <span class=\"n\">analysis_fpath</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">individ_results_dpath</span><span class=\"p\">,</span> <span class=\"n\">qres_fname</span><span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">show</span> <span class=\"ow\">or</span> <span class=\"n\">interact</span> <span class=\"ow\">or</span> <span class=\"n\">show_in_notebook</span><span class=\"p\">:</span>\n                <span class=\"n\">needs_draw</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">needs_draw</span> <span class=\"o\">=</span> <span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"n\">dump</span> <span class=\"ow\">and</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">checkpath</span><span class=\"p\">(</span><span class=\"n\">analysis_fpath</span><span class=\"p\">))</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">needs_draw</span><span class=\"p\">:</span>\n                <span class=\"n\">bar_label</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Case: Query </span><span class=\"si\">%r</span><span class=\"s1\"> / </span><span class=\"si\">%r</span><span class=\"s1\">, Config </span><span class=\"si\">%r</span><span class=\"s1\"> / </span><span class=\"si\">%r</span><span class=\"s1\"> --- qaid=</span><span class=\"si\">%d</span><span class=\"s1\">, cfgx=</span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span>\n                    <span class=\"n\">count</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">qx_list</span><span class=\"p\">),</span> <span class=\"n\">count2</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cfgxs</span><span class=\"p\">),</span> <span class=\"n\">qaid</span><span class=\"p\">,</span> <span class=\"n\">cfgx</span><span class=\"p\">)</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;bar_label = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">bar_label</span><span class=\"p\">,))</span>\n                <span class=\"k\">if</span> <span class=\"n\">show_in_notebook</span><span class=\"p\">:</span>\n                    <span class=\"c1\"># hack to show vertical line in notebook</span>\n                    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cfg_colors</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                        <span class=\"n\">bar</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">400</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">uint8</span><span class=\"p\">)</span> <span class=\"o\">+</span>\n                               <span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">cfg_colors</span><span class=\"p\">[</span><span class=\"n\">cfgx</span><span class=\"p\">])</span> <span class=\"o\">*</span> <span class=\"mi\">255</span><span class=\"p\">))</span>\n                        <span class=\"n\">fnum</span> <span class=\"o\">=</span> <span class=\"n\">fnum</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n                        <span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">bar</span><span class=\"p\">,</span> <span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"n\">fnum</span><span class=\"p\">)</span>\n                        <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">set_xlabel</span><span class=\"p\">(</span><span class=\"n\">bar_label</span><span class=\"p\">,</span> <span class=\"n\">ax</span><span class=\"o\">=</span><span class=\"n\">ax</span><span class=\"p\">)</span>\n                        <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>  <span class=\"c1\"># Need to show when doing notebook</span>\n                <span class=\"k\">for</span> <span class=\"n\">annot_mode</span> <span class=\"ow\">in</span> <span class=\"n\">annot_modes</span><span class=\"p\">:</span>\n                    <span class=\"n\">show_kwargs</span><span class=\"p\">[</span><span class=\"s1\">&#39;annot_mode&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">annot_mode</span>\n                    <span class=\"k\">if</span> <span class=\"n\">show_in_notebook</span><span class=\"p\">:</span>\n                        <span class=\"n\">fnum</span> <span class=\"o\">=</span> <span class=\"n\">fnum</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n                    <span class=\"k\">if</span> <span class=\"n\">interact</span><span class=\"p\">:</span>\n                        <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">ishow_analysis</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"p\">,</span> <span class=\"n\">figtitle</span><span class=\"o\">=</span><span class=\"n\">_query_lbl</span><span class=\"p\">,</span>\n                                          <span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"n\">fnum</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">show_kwargs</span><span class=\"p\">)</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">show_analysis</span><span class=\"p\">(</span><span class=\"n\">qreq_</span><span class=\"p\">,</span> <span class=\"n\">figtitle</span><span class=\"o\">=</span><span class=\"n\">_query_lbl</span><span class=\"p\">,</span> <span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"n\">fnum</span><span class=\"p\">,</span>\n                                         <span class=\"o\">**</span><span class=\"n\">show_kwargs</span><span class=\"p\">)</span>\n                    <span class=\"k\">if</span> <span class=\"n\">show_in_notebook</span><span class=\"p\">:</span>\n                        <span class=\"n\">_query_lbl</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>  <span class=\"c1\"># only show the query label once</span>\n                        <span class=\"k\">if</span> <span class=\"n\">figsize</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                            <span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">gcf</span><span class=\"p\">()</span>\n                            <span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">set_size_inches</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">figsize</span><span class=\"p\">)</span>\n                            <span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">set_dpi</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">)</span>\n                        <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n                <span class=\"k\">if</span> <span class=\"n\">cmdaug</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                    <span class=\"c1\"># Hack for candidacy</span>\n                    <span class=\"n\">analysis_fpath</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">figdir</span><span class=\"p\">,</span> <span class=\"s1\">&#39;figuresC/case_</span><span class=\"si\">%s</span><span class=\"s1\">.png&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">cmdaug</span><span class=\"p\">,))</span>\n                    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;analysis_fpath = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">analysis_fpath</span><span class=\"p\">,))</span>\n                <span class=\"k\">if</span> <span class=\"n\">show_in_notebook</span><span class=\"p\">:</span>\n                    <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n\n                <span class=\"c1\"># elif not show:</span>\n                <span class=\"k\">if</span> <span class=\"kc\">False</span><span class=\"p\">:</span>\n                    <span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">gcf</span><span class=\"p\">()</span>\n                    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;analysis_fpath = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">analysis_fpath</span><span class=\"p\">,))</span>\n                    <span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"n\">analysis_fpath</span><span class=\"p\">)</span>\n                    <span class=\"n\">vt</span><span class=\"o\">.</span><span class=\"n\">clipwhite_ondisk</span><span class=\"p\">(</span><span class=\"n\">analysis_fpath</span><span class=\"p\">,</span> <span class=\"n\">analysis_fpath</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">VERBOSE</span><span class=\"p\">)</span>\n                    <span class=\"k\">if</span> <span class=\"n\">DO_COPY_QUEUE</span><span class=\"p\">:</span>\n                        <span class=\"k\">if</span> <span class=\"n\">cmdaug</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                            <span class=\"n\">cpq</span><span class=\"o\">.</span><span class=\"n\">append_copy_task</span><span class=\"p\">(</span><span class=\"n\">analysis_fpath</span><span class=\"p\">,</span> <span class=\"n\">top_rank_analysis_dir</span><span class=\"p\">)</span>\n            <span class=\"n\">analysis_fpath_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">analysis_fpath</span><span class=\"p\">)</span>\n            <span class=\"n\">fpaths_list</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">analysis_fpath</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">metadata</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">metadata</span><span class=\"o\">.</span><span class=\"n\">set_global_data</span><span class=\"p\">(</span><span class=\"n\">cfgstr</span><span class=\"p\">,</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">qaid</span><span class=\"p\">,</span> <span class=\"s1\">&#39;analysis_fpath&#39;</span><span class=\"p\">,</span> <span class=\"n\">analysis_fpath</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># if some condition of of batch sizes</span>\n        <span class=\"k\">if</span> <span class=\"n\">DO_COPY_QUEUE</span><span class=\"p\">:</span>\n            <span class=\"n\">flush_freq</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n            <span class=\"k\">if</span> <span class=\"n\">count</span> <span class=\"o\">%</span> <span class=\"n\">flush_freq</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"n\">flush_freq</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n                <span class=\"n\">cpq</span><span class=\"o\">.</span><span class=\"n\">flush_copy_tasks</span><span class=\"p\">()</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">DO_COPY_QUEUE</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Copy summary images to query_analysis folder</span>\n        <span class=\"n\">cpq</span><span class=\"o\">.</span><span class=\"n\">flush_copy_tasks</span><span class=\"p\">()</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">analysis_fpath_list</span></div>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.expt.experiment_drawing</span>\n<span class=\"sd\">        python -m ibeis.expt.experiment_drawing --allexamples</span>\n<span class=\"sd\">        python -m ibeis.expt.experiment_drawing --allexamples --noface --nosrc</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">multiprocessing</span>\n    <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">freeze_support</span><span class=\"p\">()</span>  <span class=\"c1\"># for win32</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>  <span class=\"c1\"># NOQA</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">doctest_funcs</span><span class=\"p\">()</span>\n</pre></div>", "current_page_name": "_modules/ibeis/expt/experiment_drawing", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}