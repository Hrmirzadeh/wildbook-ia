{"parents": [{"link": "../../../", "title": "Module code"}, {"link": "../../", "title": "ibeis"}, {"link": "../", "title": "ibeis.expt"}], "title": "ibeis.expt.experiment_helpers", "body": "<h1>Source code for ibeis.expt.experiment_helpers</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">Helper module that helps expand parameters for grid search</span>\n<span class=\"sd\">TODO: move into custom pipe_cfg and annot_cfg modules</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"k\">import</span> <span class=\"n\">absolute_import</span><span class=\"p\">,</span> <span class=\"n\">division</span><span class=\"p\">,</span> <span class=\"n\">print_function</span><span class=\"p\">,</span> <span class=\"n\">unicode_literals</span>\n<span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">six</span>\n<span class=\"kn\">import</span> <span class=\"nn\">itertools</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.expt</span> <span class=\"k\">import</span> <span class=\"n\">experiment_configs</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.expt</span> <span class=\"k\">import</span> <span class=\"n\">cfghelpers</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo</span> <span class=\"k\">import</span> <span class=\"n\">Config</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.init</span> <span class=\"k\">import</span> <span class=\"n\">filter_annots</span>\n<span class=\"nb\">print</span><span class=\"p\">,</span> <span class=\"n\">rrr</span><span class=\"p\">,</span> <span class=\"n\">profile</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">inject2</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"get_varied_pipecfg_lbls\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.experiment_helpers.get_varied_pipecfg_lbls\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">get_varied_pipecfg_lbls</span><span class=\"p\">(</span><span class=\"n\">cfgdict_list</span><span class=\"p\">,</span> <span class=\"n\">pipecfg_list</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">pipecfg_list</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo</span> <span class=\"k\">import</span> <span class=\"n\">Config</span>\n        <span class=\"n\">cfg_default_dict</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">Config</span><span class=\"o\">.</span><span class=\"n\">QueryConfig</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">parse_items</span><span class=\"p\">())</span>\n        <span class=\"n\">cfgx2_lbl</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_varied_cfg_lbls</span><span class=\"p\">(</span><span class=\"n\">cfgdict_list</span><span class=\"p\">,</span> <span class=\"n\">cfg_default_dict</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"c1\"># TODO: group cfgdict by config type and then get varied labels</span>\n        <span class=\"n\">cfg_default_dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">cfgx2_lbl</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_varied_cfg_lbls</span><span class=\"p\">(</span><span class=\"n\">cfgdict_list</span><span class=\"p\">,</span> <span class=\"n\">cfg_default_dict</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">cfgx2_lbl</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_pipecfg_list\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.experiment_helpers.get_pipecfg_list\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">get_pipecfg_list</span><span class=\"p\">(</span><span class=\"n\">test_cfg_name_list</span><span class=\"p\">,</span> <span class=\"n\">ibs</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Builds a list of varied query configurations. Only custom configs depend on</span>\n<span class=\"sd\">    an ibs object. The order of the output is not gaurenteed to aggree with</span>\n<span class=\"sd\">    input order.</span>\n\n<span class=\"sd\">    FIXME:</span>\n<span class=\"sd\">        This breaks if you proot=BC_DTW and ibs is None</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        test_cfg_name_list (list): list of strs</span>\n<span class=\"sd\">        ibs (ibeis.IBEISController): ibeis controller object (optional)</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        tuple: (cfg_list, cfgx2_lbl) -</span>\n<span class=\"sd\">            cfg_list (list): list of config objects</span>\n<span class=\"sd\">            cfgx2_lbl (list): denotes which parameters are being varied.</span>\n<span class=\"sd\">                If there is just one config then nothing is varied</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis get_pipecfg_list:0</span>\n<span class=\"sd\">        python -m ibeis get_pipecfg_list:1 --db humpbacks</span>\n<span class=\"sd\">        python -m ibeis get_pipecfg_list:2</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.expt.experiment_helpers import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(defaultdb=&#39;testdb1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; #test_cfg_name_list = [&#39;best&#39;, &#39;custom&#39;, &#39;custom:sv_on=False&#39;]</span>\n<span class=\"sd\">        &gt;&gt;&gt; #test_cfg_name_list = [&#39;default&#39;, &#39;default:sv_on=False&#39;, &#39;best&#39;]</span>\n<span class=\"sd\">        &gt;&gt;&gt; test_cfg_name_list = [&#39;default&#39;, &#39;default:sv_on=False&#39;, &#39;best&#39;]</span>\n<span class=\"sd\">        &gt;&gt;&gt; # execute function</span>\n<span class=\"sd\">        &gt;&gt;&gt; (pcfgdict_list, pipecfg_list) = get_pipecfg_list(test_cfg_name_list, ibs)</span>\n<span class=\"sd\">        &gt;&gt;&gt; # verify results</span>\n<span class=\"sd\">        &gt;&gt;&gt; assert pipecfg_list[0].sv_cfg.sv_on is True</span>\n<span class=\"sd\">        &gt;&gt;&gt; assert pipecfg_list[1].sv_cfg.sv_on is False</span>\n<span class=\"sd\">        &gt;&gt;&gt; pipecfg_lbls = get_varied_pipecfg_lbls(pcfgdict_list)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = (&#39;pipecfg_lbls = &#39;+ ut.repr2(pipecfg_lbls))</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">        pipecfg_lbls = [&#39;default:&#39;, &#39;default:sv_on=False&#39;]</span>\n\n<span class=\"sd\">    Example1:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis_flukematch.plugin</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.expt.experiment_helpers import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(defaultdb=&#39;humpbacks&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; test_cfg_name_list = [&#39;default:pipeline_root=BC_DTW,decision=average,crop_dim_size=[960,500]&#39;, &#39;default:K=[1,4]&#39;]</span>\n<span class=\"sd\">        &gt;&gt;&gt; (pcfgdict_list, pipecfg_list) = get_pipecfg_list(test_cfg_name_list, ibs)</span>\n<span class=\"sd\">        &gt;&gt;&gt; pipecfg_lbls = get_varied_pipecfg_lbls(pcfgdict_list)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = (&#39;pipecfg_lbls = &#39;+ ut.repr2(pipecfg_lbls))</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print_pipe_configs(pcfgdict_list, pipecfg_list)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">verbose</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">verbose</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">VERBOSE</span>\n    <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">VERBOSE</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[expt_help.get_pipecfg_list] building pipecfg_list using: </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span>\n              <span class=\"n\">test_cfg_name_list</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">test_cfg_name_list</span><span class=\"p\">,</span> <span class=\"n\">six</span><span class=\"o\">.</span><span class=\"n\">string_types</span><span class=\"p\">):</span>\n        <span class=\"n\">test_cfg_name_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">test_cfg_name_list</span><span class=\"p\">]</span>\n    <span class=\"n\">_standard_cfg_names</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">_pcfgdict_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n    <span class=\"c1\"># HACK: Parse out custom configs first</span>\n    <span class=\"k\">for</span> <span class=\"n\">test_cfg_name</span> <span class=\"ow\">in</span> <span class=\"n\">test_cfg_name_list</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">test_cfg_name</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">&#39;custom:&#39;</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">test_cfg_name</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;custom&#39;</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[expthelpers] Parsing nonstandard custom config&#39;</span><span class=\"p\">)</span>\n            <span class=\"k\">assert</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s1\">&#39;custom is no longer supported&#39;</span>\n            <span class=\"c1\">#if test_cfg_name.startswith(&#39;custom:&#39;):</span>\n            <span class=\"c1\">#    # parse out modifications to custom</span>\n            <span class=\"c1\">#    cfgstr_list = &#39;:&#39;.join(test_cfg_name.split(&#39;:&#39;)[1:]).split(&#39;,&#39;)</span>\n            <span class=\"c1\">#    augcfgdict = ut.parse_cfgstr_list(cfgstr_list, smartcast=True)</span>\n            <span class=\"c1\">#else:</span>\n            <span class=\"c1\">#    augcfgdict = {}</span>\n            <span class=\"c1\">## Take the configuration from the ibeis object</span>\n            <span class=\"c1\">#pipe_cfg = ibs.--cfg.query_cfg.deepcopy()</span>\n            <span class=\"c1\">## Update with augmented params</span>\n            <span class=\"c1\">#pipe_cfg.update_query_cfg(**augcfgdict)</span>\n            <span class=\"c1\">## Parse out a standard cfgdict</span>\n            <span class=\"c1\">#cfgdict = dict(pipe_cfg.parse_items())</span>\n            <span class=\"c1\">#cfgdict[&#39;_cfgname&#39;] = &#39;custom&#39;</span>\n            <span class=\"c1\">#cfgdict[&#39;_cfgstr&#39;] = test_cfg_name</span>\n            <span class=\"c1\">#_pcfgdict_list.append(cfgdict)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">_standard_cfg_names</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">test_cfg_name</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Handle stanndard configs next</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">_standard_cfg_names</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Get parsing information</span>\n        <span class=\"c1\">#cfg_default_dict = dict(Config.QueryConfig().parse_items())</span>\n        <span class=\"c1\">#valid_keys = list(cfg_default_dict.keys())</span>\n        <span class=\"n\">cfgstr_list</span> <span class=\"o\">=</span> <span class=\"n\">_standard_cfg_names</span>\n        <span class=\"n\">named_defaults_dict</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dict_subset</span><span class=\"p\">(</span>\n            <span class=\"n\">experiment_configs</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"p\">,</span> <span class=\"n\">experiment_configs</span><span class=\"o\">.</span><span class=\"n\">TEST_NAMES</span><span class=\"p\">)</span>\n        <span class=\"n\">alias_keys</span> <span class=\"o\">=</span> <span class=\"n\">experiment_configs</span><span class=\"o\">.</span><span class=\"n\">ALIAS_KEYS</span>\n        <span class=\"c1\"># Parse standard pipeline cfgstrings</span>\n        <span class=\"n\">metadata</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;ibs&#39;</span><span class=\"p\">:</span> <span class=\"n\">ibs</span><span class=\"p\">}</span>\n        <span class=\"n\">dict_comb_list</span> <span class=\"o\">=</span> <span class=\"n\">cfghelpers</span><span class=\"o\">.</span><span class=\"n\">parse_cfgstr_list2</span><span class=\"p\">(</span>\n            <span class=\"n\">cfgstr_list</span><span class=\"p\">,</span>\n            <span class=\"n\">named_defaults_dict</span><span class=\"p\">,</span>\n            <span class=\"n\">cfgtype</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n            <span class=\"n\">alias_keys</span><span class=\"o\">=</span><span class=\"n\">alias_keys</span><span class=\"p\">,</span>\n            <span class=\"c1\"># Hack out valid keys for humpbacks</span>\n            <span class=\"c1\">#valid_keys=valid_keys,</span>\n            <span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n            <span class=\"n\">metadata</span><span class=\"o\">=</span><span class=\"n\">metadata</span>\n        <span class=\"p\">)</span>\n        <span class=\"c1\"># Get varied params (there may be duplicates)</span>\n        <span class=\"n\">_pcfgdict_list</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">dict_comb_list</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># Expand cfgdicts into PipelineConfig config objects</span>\n    <span class=\"c1\"># TODO: respsect different algorithm parameters like flukes</span>\n    <span class=\"k\">if</span> <span class=\"n\">ibs</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">configclass_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">Config</span><span class=\"o\">.</span><span class=\"n\">QueryConfig</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">_pcfgdict_list</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">root_to_config</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">depc_annot</span><span class=\"o\">.</span><span class=\"n\">configclass_dict</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.smk</span> <span class=\"k\">import</span> <span class=\"n\">smk_pipeline</span>\n        <span class=\"n\">root_to_config</span><span class=\"p\">[</span><span class=\"s1\">&#39;smk&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">smk_pipeline</span><span class=\"o\">.</span><span class=\"n\">SMKRequestConfig</span>\n        <span class=\"n\">configclass_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"n\">root_to_config</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">_cfgdict</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;pipeline_root&#39;</span><span class=\"p\">,</span> <span class=\"n\">_cfgdict</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;proot&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;vsmany&#39;</span><span class=\"p\">)),</span>\n                               <span class=\"n\">Config</span><span class=\"o\">.</span><span class=\"n\">QueryConfig</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">_cfgdict</span> <span class=\"ow\">in</span> <span class=\"n\">_pcfgdict_list</span><span class=\"p\">]</span>\n    <span class=\"n\">_pipecfg_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"bp\">cls</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">_cfgdict</span><span class=\"p\">)</span>\n                     <span class=\"k\">for</span> <span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">_cfgdict</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">configclass_list</span><span class=\"p\">,</span> <span class=\"n\">_pcfgdict_list</span><span class=\"p\">)]</span>\n\n    <span class=\"c1\"># Enforce rule that removes duplicate configs</span>\n    <span class=\"c1\"># by using feasiblity from ibeis.algo.Config</span>\n    <span class=\"c1\"># TODO: Move this unique finding code to its own function</span>\n    <span class=\"c1\"># and then move it up one function level so even the custom</span>\n    <span class=\"c1\"># configs can be uniquified</span>\n    <span class=\"n\">_flag_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flag_unique_items</span><span class=\"p\">(</span><span class=\"n\">_pipecfg_list</span><span class=\"p\">)</span>\n    <span class=\"n\">cfgdict_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">_pcfgdict_list</span><span class=\"p\">,</span> <span class=\"n\">_flag_list</span><span class=\"p\">)</span>\n    <span class=\"n\">pipecfg_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">_pipecfg_list</span><span class=\"p\">,</span> <span class=\"n\">_flag_list</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">verbose</span><span class=\"p\">:</span>\n        <span class=\"c1\">#for cfg in _pipecfg_list:</span>\n        <span class=\"c1\">#    print(cfg.get_cfgstr())</span>\n        <span class=\"c1\">#    print(cfg)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[harn.help] return </span><span class=\"si\">%d</span><span class=\"s1\"> / </span><span class=\"si\">%d</span><span class=\"s1\"> unique pipeline configs from: </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span>\n              <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cfgdict_list</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">_pcfgdict_list</span><span class=\"p\">),</span> <span class=\"n\">test_cfg_name_list</span><span class=\"p\">))</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argflag</span><span class=\"p\">((</span><span class=\"s1\">&#39;--pcfginfo&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;--pinfo&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;--pipecfginfo&#39;</span><span class=\"p\">)):</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">colorprint</span><span class=\"p\">(</span><span class=\"s1\">&#39;Requested PcfgInfo for tests... &#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;red&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">print_pipe_configs</span><span class=\"p\">(</span><span class=\"n\">cfgdict_list</span><span class=\"p\">,</span> <span class=\"n\">pipecfg_list</span><span class=\"p\">)</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">colorprint</span><span class=\"p\">(</span><span class=\"s1\">&#39;Finished Reporting PcfgInfo. Exiting&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;red&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">cfgdict_list</span><span class=\"p\">,</span> <span class=\"n\">pipecfg_list</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"print_pipe_configs\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.experiment_helpers.print_pipe_configs\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">print_pipe_configs</span><span class=\"p\">(</span><span class=\"n\">cfgdict_list</span><span class=\"p\">,</span> <span class=\"n\">pipecfg_list</span><span class=\"p\">):</span>\n    <span class=\"n\">pipecfg_lbls</span> <span class=\"o\">=</span> <span class=\"n\">get_varied_pipecfg_lbls</span><span class=\"p\">(</span><span class=\"n\">cfgdict_list</span><span class=\"p\">,</span> <span class=\"n\">pipecfg_list</span><span class=\"p\">)</span>\n    <span class=\"c1\">#pipecfg_lbls = pipecfg_list</span>\n    <span class=\"c1\">#assert len(pipecfg_lbls) == len(pipecfg_lbls), &#39;unequal lens&#39;</span>\n    <span class=\"k\">for</span> <span class=\"n\">pcfgx</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">pipecfg</span><span class=\"p\">,</span> <span class=\"n\">lbl</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">pipecfg_list</span><span class=\"p\">,</span> <span class=\"n\">pipecfg_lbls</span><span class=\"p\">)):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;+--- </span><span class=\"si\">%d</span><span class=\"s1\"> / </span><span class=\"si\">%d</span><span class=\"s1\"> ===&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">pcfgx</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">pipecfg_list</span><span class=\"p\">))))</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">colorprint</span><span class=\"p\">(</span><span class=\"n\">lbl</span><span class=\"p\">,</span> <span class=\"s1\">&#39;white&#39;</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">pipecfg</span><span class=\"o\">.</span><span class=\"n\">get_cfgstr</span><span class=\"p\">())</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;L___&#39;</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"testdata_acfg_names\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.experiment_helpers.testdata_acfg_names\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">testdata_acfg_names</span><span class=\"p\">(</span><span class=\"n\">default_acfg_name_list</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;default&#39;</span><span class=\"p\">]):</span>\n    <span class=\"n\">flags</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;--aidcfg&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;--acfg&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;-a&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">acfg_name_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argval</span><span class=\"p\">(</span><span class=\"n\">flags</span><span class=\"p\">,</span> <span class=\"n\">type_</span><span class=\"o\">=</span><span class=\"nb\">list</span><span class=\"p\">,</span>\n                                   <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">default_acfg_name_list</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">acfg_name_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"parse_acfg_combo_list\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.experiment_helpers.parse_acfg_combo_list\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">parse_acfg_combo_list</span><span class=\"p\">(</span><span class=\"n\">acfg_name_list</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Parses the name list into a list of config dicts</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        acfg_name_list (list): a list of annotation config strings</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        list: acfg_combo_list</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis parse_acfg_combo_list:0</span>\n<span class=\"sd\">        python -m ibeis parse_acfg_combo_list:1</span>\n<span class=\"sd\">        python -m ibeis parse_acfg_combo_list:2</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.expt.experiment_helpers import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.expt import annotation_configs</span>\n<span class=\"sd\">        &gt;&gt;&gt; acfg_name_list = testdata_acfg_names([&#39;default&#39;, &#39;uncontrolled&#39;])</span>\n<span class=\"sd\">        &gt;&gt;&gt; acfg_combo_list = parse_acfg_combo_list(acfg_name_list)</span>\n<span class=\"sd\">        &gt;&gt;&gt; acfg_list = ut.flatten(acfg_combo_list)</span>\n<span class=\"sd\">        &gt;&gt;&gt; printkw = dict()</span>\n<span class=\"sd\">        &gt;&gt;&gt; annotation_configs.print_acfg_list(acfg_list, **printkw)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = ut.repr2(sorted(acfg_list[0].keys()))</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">        [&#39;dcfg&#39;, &#39;qcfg&#39;]</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.expt.experiment_helpers import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.expt import annotation_configs</span>\n<span class=\"sd\">        &gt;&gt;&gt; # double colon :: means expand consistently and force const size</span>\n<span class=\"sd\">        &gt;&gt;&gt; acfg_name_list = testdata_acfg_names([&#39;unctrl&#39;, &#39;ctrl::unctrl&#39;])</span>\n<span class=\"sd\">        &gt;&gt;&gt; acfg_name_list = testdata_acfg_names([&#39;unctrl&#39;, &#39;varysize&#39;, &#39;ctrl::unctrl&#39;])</span>\n<span class=\"sd\">        &gt;&gt;&gt; acfg_name_list = testdata_acfg_names([&#39;unctrl&#39;, &#39;varysize&#39;, &#39;ctrl::varysize&#39;, &#39;ctrl::unctrl&#39;])</span>\n<span class=\"sd\">        &gt;&gt;&gt; acfg_combo_list = parse_acfg_combo_list(acfg_name_list)</span>\n<span class=\"sd\">        &gt;&gt;&gt; acfg_list = ut.flatten(acfg_combo_list)</span>\n<span class=\"sd\">        &gt;&gt;&gt; printkw = dict()</span>\n<span class=\"sd\">        &gt;&gt;&gt; annotation_configs.print_acfg_list(acfg_list, **printkw)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.expt</span> <span class=\"k\">import</span> <span class=\"n\">annotation_configs</span>\n    <span class=\"n\">named_defaults_dict</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dict_take</span><span class=\"p\">(</span><span class=\"n\">annotation_configs</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"p\">,</span>\n                                       <span class=\"n\">annotation_configs</span><span class=\"o\">.</span><span class=\"n\">TEST_NAMES</span><span class=\"p\">)</span>\n    <span class=\"n\">named_qcfg_defaults</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">annotation_configs</span><span class=\"o\">.</span><span class=\"n\">TEST_NAMES</span><span class=\"p\">,</span>\n                                   <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_list_column</span><span class=\"p\">(</span><span class=\"n\">named_defaults_dict</span><span class=\"p\">,</span> <span class=\"s1\">&#39;qcfg&#39;</span><span class=\"p\">)))</span>\n    <span class=\"n\">named_dcfg_defaults</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">annotation_configs</span><span class=\"o\">.</span><span class=\"n\">TEST_NAMES</span><span class=\"p\">,</span>\n                                   <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_list_column</span><span class=\"p\">(</span><span class=\"n\">named_defaults_dict</span><span class=\"p\">,</span> <span class=\"s1\">&#39;dcfg&#39;</span><span class=\"p\">)))</span>\n    <span class=\"n\">alias_keys</span> <span class=\"o\">=</span> <span class=\"n\">annotation_configs</span><span class=\"o\">.</span><span class=\"n\">ALIAS_KEYS</span>\n    <span class=\"c1\"># need to have the cfgstr_lists be the same for query and database so they</span>\n    <span class=\"c1\"># can be combined properly for now</span>\n\n    <span class=\"c1\"># Apply this flag to any case joined with ::</span>\n    <span class=\"n\">special_join_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;force_const_size&#39;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">}</span>\n\n    <span class=\"c1\"># Parse Query Annot Config</span>\n    <span class=\"n\">nested_qcfg_combo_list</span> <span class=\"o\">=</span> <span class=\"n\">cfghelpers</span><span class=\"o\">.</span><span class=\"n\">parse_cfgstr_list2</span><span class=\"p\">(</span>\n        <span class=\"n\">cfgstr_list</span><span class=\"o\">=</span><span class=\"n\">acfg_name_list</span><span class=\"p\">,</span>\n        <span class=\"n\">named_defaults_dict</span><span class=\"o\">=</span><span class=\"n\">named_qcfg_defaults</span><span class=\"p\">,</span>\n        <span class=\"n\">cfgtype</span><span class=\"o\">=</span><span class=\"s1\">&#39;qcfg&#39;</span><span class=\"p\">,</span>\n        <span class=\"n\">alias_keys</span><span class=\"o\">=</span><span class=\"n\">alias_keys</span><span class=\"p\">,</span>\n        <span class=\"n\">expand_nested</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">special_join_dict</span><span class=\"o\">=</span><span class=\"n\">special_join_dict</span><span class=\"p\">,</span>\n        <span class=\"n\">is_nestedcfgtype</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Parse Data Annot Config</span>\n    <span class=\"n\">nested_dcfg_combo_list</span> <span class=\"o\">=</span> <span class=\"n\">cfghelpers</span><span class=\"o\">.</span><span class=\"n\">parse_cfgstr_list2</span><span class=\"p\">(</span>\n        <span class=\"n\">cfgstr_list</span><span class=\"o\">=</span><span class=\"n\">acfg_name_list</span><span class=\"p\">,</span>\n        <span class=\"n\">named_defaults_dict</span><span class=\"o\">=</span><span class=\"n\">named_dcfg_defaults</span><span class=\"p\">,</span>\n        <span class=\"n\">cfgtype</span><span class=\"o\">=</span><span class=\"s1\">&#39;dcfg&#39;</span><span class=\"p\">,</span>\n        <span class=\"n\">alias_keys</span><span class=\"o\">=</span><span class=\"n\">alias_keys</span><span class=\"p\">,</span>\n        <span class=\"n\">expand_nested</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">special_join_dict</span><span class=\"o\">=</span><span class=\"n\">special_join_dict</span><span class=\"p\">,</span>\n        <span class=\"n\">is_nestedcfgtype</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"n\">acfg_combo_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">nested_qcfg_combo</span><span class=\"p\">,</span> <span class=\"n\">nested_dcfg_combo</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">nested_qcfg_combo_list</span><span class=\"p\">,</span>\n                                                    <span class=\"n\">nested_dcfg_combo_list</span><span class=\"p\">):</span>\n        <span class=\"n\">acfg_combo</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"c1\"># Only the inner nested combos are combinatorial</span>\n        <span class=\"k\">for</span> <span class=\"n\">qcfg_combo</span><span class=\"p\">,</span> <span class=\"n\">dcfg_combo</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">nested_qcfg_combo</span><span class=\"p\">,</span> <span class=\"n\">nested_dcfg_combo</span><span class=\"p\">):</span>\n            <span class=\"n\">_combo</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                <span class=\"nb\">dict</span><span class=\"p\">([(</span><span class=\"s1\">&#39;qcfg&#39;</span><span class=\"p\">,</span> <span class=\"n\">qcfg</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">&#39;dcfg&#39;</span><span class=\"p\">,</span> <span class=\"n\">dcfg</span><span class=\"p\">)])</span>\n                <span class=\"k\">for</span> <span class=\"n\">qcfg</span><span class=\"p\">,</span> <span class=\"n\">dcfg</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">itertools</span><span class=\"o\">.</span><span class=\"n\">product</span><span class=\"p\">(</span><span class=\"n\">qcfg_combo</span><span class=\"p\">,</span> <span class=\"n\">dcfg_combo</span><span class=\"p\">))</span>\n            <span class=\"p\">]</span>\n            <span class=\"n\">acfg_combo</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">_combo</span><span class=\"p\">)</span>\n        <span class=\"n\">acfg_combo_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">acfg_combo</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">acfg_combo_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"filter_duplicate_acfgs\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.experiment_helpers.filter_duplicate_acfgs\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">filter_duplicate_acfgs</span><span class=\"p\">(</span><span class=\"n\">expanded_aids_list</span><span class=\"p\">,</span> <span class=\"n\">acfg_list</span><span class=\"p\">,</span> <span class=\"n\">acfg_name_list</span><span class=\"p\">,</span>\n                           <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Removes configs with the same expanded aids list</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        # The following will trigger this function:</span>\n<span class=\"sd\">        ibeis -m ibeis get_annotcfg_list:0 -a timectrl timectrl:view=left --db PZ_MTEST</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.expt</span> <span class=\"k\">import</span> <span class=\"n\">annotation_configs</span>\n    <span class=\"k\">if</span> <span class=\"n\">verbose</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">verbose</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">VERBOSE</span>\n    <span class=\"n\">acfg_list_</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">expanded_aids_list_</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">seen_</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ddict</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">acfg</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">qaids</span><span class=\"p\">,</span> <span class=\"n\">daids</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">acfg_list</span><span class=\"p\">,</span> <span class=\"n\">expanded_aids_list</span><span class=\"p\">):</span>\n        <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">hashstr_arr27</span><span class=\"p\">(</span><span class=\"n\">qaids</span><span class=\"p\">,</span> <span class=\"s1\">&#39;qaids&#39;</span><span class=\"p\">),</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">hashstr_arr27</span><span class=\"p\">(</span><span class=\"n\">daids</span><span class=\"p\">,</span> <span class=\"s1\">&#39;daids&#39;</span><span class=\"p\">))</span>\n        <span class=\"k\">if</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">seen_</span><span class=\"p\">:</span>\n            <span class=\"n\">seen_</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">acfg</span><span class=\"p\">)</span>\n            <span class=\"k\">continue</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">seen_</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">acfg</span><span class=\"p\">)</span>\n            <span class=\"n\">expanded_aids_list_</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">qaids</span><span class=\"p\">,</span> <span class=\"n\">daids</span><span class=\"p\">))</span>\n            <span class=\"n\">acfg_list_</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">acfg</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">verbose</span><span class=\"p\">:</span>\n        <span class=\"n\">duplicate_configs</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span>\n            <span class=\"p\">[(</span><span class=\"n\">key_</span><span class=\"p\">,</span> <span class=\"n\">val_</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">key_</span><span class=\"p\">,</span> <span class=\"n\">val_</span> <span class=\"ow\">in</span> <span class=\"n\">seen_</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">val_</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">duplicate_configs</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;The following configs produced duplicate annnotation configs&#39;</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">val</span> <span class=\"ow\">in</span> <span class=\"n\">duplicate_configs</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n                <span class=\"c1\"># Print the difference between the duplicate configs</span>\n                <span class=\"n\">_tup</span> <span class=\"o\">=</span> <span class=\"n\">annotation_configs</span><span class=\"o\">.</span><span class=\"n\">compress_acfg_list_for_printing</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">)</span>\n                <span class=\"n\">nonvaried_compressed_dict</span><span class=\"p\">,</span> <span class=\"n\">varied_compressed_dict_list</span> <span class=\"o\">=</span> <span class=\"n\">_tup</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;+--&#39;</span><span class=\"p\">)</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;key = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,))</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;duplicate_varied_cfgs = </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span>\n                    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr2</span><span class=\"p\">(</span><span class=\"n\">varied_compressed_dict_list</span><span class=\"p\">),))</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;duplicate_nonvaried_cfgs = </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span>\n                    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr2</span><span class=\"p\">(</span><span class=\"n\">nonvaried_compressed_dict</span><span class=\"p\">),))</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;L__&#39;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">verbose</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[harn.help] parsed </span><span class=\"si\">%d</span><span class=\"s1\"> / </span><span class=\"si\">%d</span><span class=\"s1\"> unique annot configs&#39;</span> <span class=\"o\">%</span>\n                  <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">acfg_list_</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">acfg_list</span><span class=\"p\">),))</span>\n        <span class=\"k\">if</span> <span class=\"n\">verbose</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[harn.help] parsed from: </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">acfg_name_list</span><span class=\"p\">,))</span>\n    <span class=\"k\">return</span> <span class=\"n\">expanded_aids_list_</span><span class=\"p\">,</span> <span class=\"n\">acfg_list_</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_annotcfg_list\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.experiment_helpers.get_annotcfg_list\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">get_annotcfg_list</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">acfg_name_list</span><span class=\"p\">,</span> <span class=\"n\">filter_dups</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                      <span class=\"n\">qaid_override</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">daid_override</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                      <span class=\"n\">initial_aids</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">use_cache</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    For now can only specify one acfg name list</span>\n\n<span class=\"sd\">    TODO: move to filter_annots</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        annot_cfg_name_list (list):</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis get_annotcfg_list:0</span>\n<span class=\"sd\">        python -m ibeis get_annotcfg_list:1</span>\n<span class=\"sd\">        python -m ibeis get_annotcfg_list:2</span>\n\n<span class=\"sd\">        ibeis get_annotcfg_list:0 --ainfo</span>\n<span class=\"sd\">        ibeis get_annotcfg_list:0 --db NNP_Master3 -a viewpoint_compare --nocache-aid --verbtd</span>\n<span class=\"sd\">        ibeis get_annotcfg_list:0 --db PZ_ViewPoints -a viewpoint_compare --nocache-aid --verbtd</span>\n<span class=\"sd\">        ibeis get_annotcfg_list:0 --db PZ_MTEST -a unctrl ctrl::unctrl --ainfo --nocache-aid</span>\n<span class=\"sd\">        ibeis get_annotcfg_list:0 --db testdb1 -a : --ainfo --nocache-aid</span>\n<span class=\"sd\">        ibeis get_annotcfg_list:0 --db Oxford -a :qhas_any=query --ainfo --nocache-aid</span>\n<span class=\"sd\">        ibeis get_annotcfg_list:0 --db Oxford -a :qhas_any=query,dhas_any=distractor --ainfo --nocache-aid</span>\n\n<span class=\"sd\">    Example0:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.expt.experiment_helpers import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.expt import annotation_configs</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(defaultdb=&#39;PZ_MTEST&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; filter_dups = not ut.get_argflag(&#39;--nofilter-dups&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; acfg_name_list = testdata_acfg_names()</span>\n<span class=\"sd\">        &gt;&gt;&gt; _tup = get_annotcfg_list(ibs, acfg_name_list, filter_dups)</span>\n<span class=\"sd\">        &gt;&gt;&gt; acfg_list, expanded_aids_list = _tup</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&#39;\\n PRINTING TEST RESULTS&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = ut.repr2(acfg_list, nl=3)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&#39;\\n&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; #statskw = ut.parse_func_kwarg_keys(ibs.get_annot_stats_dict, with_vals=False)</span>\n<span class=\"sd\">        &gt;&gt;&gt; printkw = dict(combined=True, per_name_vpedge=None,</span>\n<span class=\"sd\">        &gt;&gt;&gt;                per_qual=False, per_vp=False, case_tag_hist=False)</span>\n<span class=\"sd\">        &gt;&gt;&gt; annotation_configs.print_acfg_list(</span>\n<span class=\"sd\">        &gt;&gt;&gt;     acfg_list, expanded_aids_list, ibs, **printkw)</span>\n\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.expt.experiment_helpers import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.init import main_helpers</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.expt import annotation_configs</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs = ibeis.opendb(defaultdb=&#39;PZ_MTEST&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; aids = ibs.get_valid_aids()</span>\n<span class=\"sd\">        &gt;&gt;&gt; main_helpers.monkeypatch_encounters(ibs, aids, days=50)</span>\n<span class=\"sd\">        &gt;&gt;&gt; a = [&#39;default:crossval_enc=True,require_timestamp=True&#39;]</span>\n<span class=\"sd\">        &gt;&gt;&gt; acfg_name_list = testdata_acfg_names(a)</span>\n<span class=\"sd\">        &gt;&gt;&gt; acfg_list, expanded_aids_list = get_annotcfg_list(ibs, acfg_name_list)</span>\n<span class=\"sd\">        &gt;&gt;&gt; annotation_configs.print_acfg_list(acfg_list, expanded_aids_list)</span>\n<span class=\"sd\">        &gt;&gt;&gt; # Restore state</span>\n<span class=\"sd\">        &gt;&gt;&gt; main_helpers.unmonkeypatch_encounters(ibs)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">VERBOSE</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[harn.help] building acfg_list using </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">acfg_name_list</span><span class=\"p\">,))</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.expt</span> <span class=\"k\">import</span> <span class=\"n\">annotation_configs</span>\n    <span class=\"n\">acfg_combo_list</span> <span class=\"o\">=</span> <span class=\"n\">parse_acfg_combo_list</span><span class=\"p\">(</span><span class=\"n\">acfg_name_list</span><span class=\"p\">)</span>\n\n    <span class=\"c1\">#acfg_slice = ut.get_argval(&#39;--acfg_slice&#39;, type_=slice, default=None)</span>\n    <span class=\"c1\"># HACK: Sliceing happens before expansion (dependenceis get)</span>\n    <span class=\"n\">combo_slice</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argval</span><span class=\"p\">(</span><span class=\"s1\">&#39;--combo_slice&#39;</span><span class=\"p\">,</span> <span class=\"n\">type_</span><span class=\"o\">=</span><span class=\"s1\">&#39;fuzzy_subset&#39;</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"nb\">slice</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">))</span>\n    <span class=\"n\">acfg_combo_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">acfg_combo_</span><span class=\"p\">,</span> <span class=\"n\">combo_slice</span><span class=\"p\">)</span>\n                       <span class=\"k\">for</span> <span class=\"n\">acfg_combo_</span> <span class=\"ow\">in</span> <span class=\"n\">acfg_combo_list</span><span class=\"p\">]</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argflag</span><span class=\"p\">(</span><span class=\"s1\">&#39;--consistent&#39;</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Expand everything as one consistent annot list</span>\n        <span class=\"n\">acfg_combo_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">acfg_combo_list</span><span class=\"p\">)]</span>\n\n    <span class=\"c1\"># + --- Do Parsing ---</span>\n    <span class=\"n\">expanded_aids_combo_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">filter_annots</span><span class=\"o\">.</span><span class=\"n\">expand_acfgs_consistently</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">acfg_combo_</span><span class=\"p\">,</span>\n                                                <span class=\"n\">initial_aids</span><span class=\"o\">=</span><span class=\"n\">initial_aids</span><span class=\"p\">,</span>\n                                                <span class=\"n\">use_cache</span><span class=\"o\">=</span><span class=\"n\">use_cache</span><span class=\"p\">,</span>\n                                                <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">verbose</span><span class=\"p\">,</span>\n                                                <span class=\"n\">base</span><span class=\"o\">=</span><span class=\"n\">base</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">base</span><span class=\"p\">,</span> <span class=\"n\">acfg_combo_</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">acfg_combo_list</span><span class=\"p\">)</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">expanded_aids_combo_flag_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">expanded_aids_combo_list</span><span class=\"p\">)</span>\n    <span class=\"n\">acfg_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_list_column</span><span class=\"p\">(</span><span class=\"n\">expanded_aids_combo_flag_list</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">expanded_aids_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_list_column</span><span class=\"p\">(</span><span class=\"n\">expanded_aids_combo_flag_list</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"c1\"># L___</span>\n\n    <span class=\"c1\"># Slicing happens after expansion (but the labels get screwed up)</span>\n    <span class=\"n\">acfg_slice</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argval</span><span class=\"p\">(</span><span class=\"s1\">&#39;--acfg_slice&#39;</span><span class=\"p\">,</span> <span class=\"n\">type_</span><span class=\"o\">=</span><span class=\"s1\">&#39;fuzzy_subset&#39;</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">acfg_slice</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">acfg_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">acfg_list</span><span class=\"p\">,</span> <span class=\"n\">acfg_slice</span><span class=\"p\">)</span>\n        <span class=\"n\">expanded_aids_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">expanded_aids_list</span><span class=\"p\">,</span> <span class=\"n\">acfg_slice</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># + --- Hack: Override qaids ---</span>\n    <span class=\"n\">_qaids</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argval</span><span class=\"p\">((</span><span class=\"s1\">&#39;--qaid&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;--qaid-override&#39;</span><span class=\"p\">),</span> <span class=\"n\">type_</span><span class=\"o\">=</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">qaid_override</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">_qaids</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">expanded_aids_list</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"n\">_qaids</span><span class=\"p\">,</span> <span class=\"n\">daids</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">qaids</span><span class=\"p\">,</span> <span class=\"n\">daids</span> <span class=\"ow\">in</span> <span class=\"n\">expanded_aids_list</span><span class=\"p\">]</span>\n    <span class=\"c1\"># more hack for daids</span>\n    <span class=\"n\">_daids</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argval</span><span class=\"p\">((</span><span class=\"s1\">&#39;--daids-override&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;--daid-override&#39;</span><span class=\"p\">),</span> <span class=\"n\">type_</span><span class=\"o\">=</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">daid_override</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">_daids</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">expanded_aids_list</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"n\">qaids</span><span class=\"p\">,</span> <span class=\"n\">_daids</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">qaids</span><span class=\"p\">,</span> <span class=\"n\">daids</span> <span class=\"ow\">in</span> <span class=\"n\">expanded_aids_list</span><span class=\"p\">]</span>\n    <span class=\"c1\"># L___</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">filter_dups</span><span class=\"p\">:</span>\n        <span class=\"n\">expanded_aids_list</span><span class=\"p\">,</span> <span class=\"n\">acfg_list</span> <span class=\"o\">=</span> <span class=\"n\">filter_duplicate_acfgs</span><span class=\"p\">(</span>\n            <span class=\"n\">expanded_aids_list</span><span class=\"p\">,</span> <span class=\"n\">acfg_list</span><span class=\"p\">,</span> <span class=\"n\">acfg_name_list</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argflag</span><span class=\"p\">((</span><span class=\"s1\">&#39;--acfginfo&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;--ainfo&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;--aidcfginfo&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;--print-acfg&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;--printacfg&#39;</span><span class=\"p\">)):</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">colorprint</span><span class=\"p\">(</span><span class=\"s1\">&#39;[experiment_helpers] Requested AcfgInfo ... &#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;red&#39;</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;combo_slice = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">combo_slice</span><span class=\"p\">,))</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;acfg_slice = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">acfg_slice</span><span class=\"p\">,))</span>\n        <span class=\"n\">annotation_configs</span><span class=\"o\">.</span><span class=\"n\">print_acfg_list</span><span class=\"p\">(</span><span class=\"n\">acfg_list</span><span class=\"p\">,</span> <span class=\"n\">expanded_aids_list</span><span class=\"p\">,</span> <span class=\"n\">ibs</span><span class=\"p\">)</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">colorprint</span><span class=\"p\">(</span><span class=\"s1\">&#39;[experiment_helpers] exiting due to AcfgInfo info request&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;red&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">acfg_list</span><span class=\"p\">,</span> <span class=\"n\">expanded_aids_list</span></div>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.expt.experiment_helpers</span>\n<span class=\"sd\">        python -m ibeis.expt.experiment_helpers --allexamples</span>\n<span class=\"sd\">        python -m ibeis.expt.experiment_helpers --allexamples --noface --nosrc</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">multiprocessing</span>\n    <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">freeze_support</span><span class=\"p\">()</span>  <span class=\"c1\"># for win32</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>  <span class=\"c1\"># NOQA</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">doctest_funcs</span><span class=\"p\">()</span>\n</pre></div>", "current_page_name": "_modules/ibeis/expt/experiment_helpers", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}