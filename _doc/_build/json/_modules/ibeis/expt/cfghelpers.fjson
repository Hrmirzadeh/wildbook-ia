{"parents": [{"link": "../../../", "title": "Module code"}, {"link": "../../", "title": "ibeis"}, {"link": "../", "title": "ibeis.expt"}], "title": "ibeis.expt.cfghelpers", "body": "<h1>Source code for ibeis.expt.cfghelpers</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">Helper module that helps expand parameters for grid search</span>\n\n<span class=\"sd\">DEPRICATE: Most of this can likely be replaced by util_gridsearch</span>\n<span class=\"sd\">TODO: rectify with versions in util_gridsearch</span>\n\n<span class=\"sd\">It turns out a lot of the commandlines made possible here can be generatd by</span>\n<span class=\"sd\">using bash brace expansion.</span>\n<span class=\"sd\">http://www.linuxjournal.com/content/bash-brace-expansion</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"k\">import</span> <span class=\"n\">absolute_import</span><span class=\"p\">,</span> <span class=\"n\">division</span><span class=\"p\">,</span> <span class=\"n\">print_function</span><span class=\"p\">,</span> <span class=\"n\">unicode_literals</span>\n<span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n<span class=\"nb\">print</span><span class=\"p\">,</span> <span class=\"n\">rrr</span><span class=\"p\">,</span> <span class=\"n\">profile</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">inject2</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"remove_prefix_hack\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.cfghelpers.remove_prefix_hack\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">remove_prefix_hack</span><span class=\"p\">(</span><span class=\"n\">cfg</span><span class=\"p\">,</span> <span class=\"n\">cfgtype</span><span class=\"p\">,</span> <span class=\"n\">cfg_options</span><span class=\"p\">,</span> <span class=\"n\">alias_keys</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">cfgtype</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">cfgtype</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s1\">&#39;qcfg&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;dcfg&#39;</span><span class=\"p\">]:</span>\n        <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">cfg_options</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()):</span>\n            <span class=\"c1\"># check if key is nonstandard</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">cfg</span> <span class=\"ow\">or</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">alias_keys</span><span class=\"p\">):</span>\n                <span class=\"c1\"># does removing prefix make it stanard?</span>\n                <span class=\"n\">prefix</span> <span class=\"o\">=</span> <span class=\"n\">cfgtype</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                <span class=\"k\">if</span> <span class=\"n\">key</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"n\">prefix</span><span class=\"p\">):</span>\n                    <span class=\"n\">key_</span> <span class=\"o\">=</span> <span class=\"n\">key</span><span class=\"p\">[</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">prefix</span><span class=\"p\">):]</span>\n                    <span class=\"k\">if</span> <span class=\"n\">key_</span> <span class=\"ow\">in</span> <span class=\"n\">cfg</span> <span class=\"ow\">or</span> <span class=\"n\">key_</span> <span class=\"ow\">in</span> <span class=\"n\">alias_keys</span><span class=\"p\">:</span>\n                        <span class=\"c1\"># remove prefix</span>\n                        <span class=\"n\">cfg_options</span><span class=\"p\">[</span><span class=\"n\">key_</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">cfg_options</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"k\">assert</span> <span class=\"n\">key</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]</span> <span class=\"ow\">in</span> <span class=\"n\">cfg</span> <span class=\"ow\">or</span> <span class=\"n\">key</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]</span> <span class=\"ow\">in</span> <span class=\"n\">alias_keys</span><span class=\"p\">,</span> <span class=\"p\">(</span>\n                        <span class=\"s1\">&#39;key=</span><span class=\"si\">%r</span><span class=\"s1\">, key[1:] =</span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]</span> <span class=\"p\">))</span>\n                <span class=\"k\">except</span> <span class=\"ne\">AssertionError</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n                    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">printex</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Parse Error Customize Cfg Base &#39;</span><span class=\"p\">,</span>\n                               <span class=\"n\">keys</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;key&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;cfg&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;alias_keys&#39;</span><span class=\"p\">,</span>\n                                     <span class=\"s1\">&#39;cfgstr_options&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;cfgtype&#39;</span><span class=\"p\">])</span>\n                    <span class=\"k\">raise</span>\n                <span class=\"k\">del</span> <span class=\"n\">cfg_options</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span></div>\n\n\n<div class=\"viewcode-block\" id=\"customize_base_cfg\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.cfghelpers.customize_base_cfg\">[docs]</a><span class=\"nd\">@ut</span><span class=\"o\">.</span><span class=\"n\">on_exception_report_input</span><span class=\"p\">(</span><span class=\"n\">keys</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;cfgname&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;cfgopt_strs&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;base_cfg&#39;</span><span class=\"p\">,</span>\n                                    <span class=\"s1\">&#39;cfgtype&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;alias_keys&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;valid_keys&#39;</span><span class=\"p\">],</span>\n                              <span class=\"n\">force</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">customize_base_cfg</span><span class=\"p\">(</span><span class=\"n\">cfgname</span><span class=\"p\">,</span> <span class=\"n\">cfgopt_strs</span><span class=\"p\">,</span> <span class=\"n\">base_cfg</span><span class=\"p\">,</span> <span class=\"n\">cfgtype</span><span class=\"p\">,</span>\n                       <span class=\"n\">alias_keys</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">valid_keys</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">offset</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n                       <span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    DEPRICATE</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">re</span>\n    <span class=\"n\">cfg</span> <span class=\"o\">=</span> <span class=\"n\">base_cfg</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n    <span class=\"c1\"># Parse dict out of a string</span>\n    <span class=\"c1\">#ANYTHING_NOT_BRACE = r&#39;[^\\[\\]]*\\]&#39;</span>\n    <span class=\"n\">ANYTHING_NOT_PAREN_OR_BRACE</span> <span class=\"o\">=</span> <span class=\"sa\">r</span><span class=\"s1\">&#39;[^()\\[\\]]*[\\]\\)]&#39;</span>\n    <span class=\"n\">cfgstr_options_list</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span>\n        <span class=\"sa\">r</span><span class=\"s1\">&#39;,\\s*&#39;</span> <span class=\"o\">+</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">negative_lookahead</span><span class=\"p\">(</span><span class=\"n\">ANYTHING_NOT_PAREN_OR_BRACE</span><span class=\"p\">),</span> <span class=\"n\">cfgopt_strs</span><span class=\"p\">)</span>\n    <span class=\"c1\">#cfgstr_options_list = cfgopt_strs.split(&#39;,&#39;)</span>\n    <span class=\"n\">cfg_options</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">parse_cfgstr_list</span><span class=\"p\">(</span>\n        <span class=\"n\">cfgstr_list</span><span class=\"o\">=</span><span class=\"n\">cfgstr_options_list</span><span class=\"p\">,</span> <span class=\"n\">smartcast</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">oldmode</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Hack for q/d-prefix specific configs</span>\n    <span class=\"n\">remove_prefix_hack</span><span class=\"p\">(</span><span class=\"n\">cfg</span><span class=\"p\">,</span> <span class=\"n\">cfgtype</span><span class=\"p\">,</span> <span class=\"n\">cfg_options</span><span class=\"p\">,</span> <span class=\"n\">alias_keys</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Remap keynames based on aliases</span>\n    <span class=\"k\">if</span> <span class=\"n\">alias_keys</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Use new standard keys and remove old aliased keys</span>\n        <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">alias_keys</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()):</span>\n            <span class=\"k\">if</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">cfg_options</span><span class=\"p\">:</span>\n                <span class=\"n\">cfg_options</span><span class=\"p\">[</span><span class=\"n\">alias_keys</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"n\">cfg_options</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span>\n                <span class=\"k\">del</span> <span class=\"n\">cfg_options</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span>\n    <span class=\"c1\"># Ensure that nothing bad is being updated</span>\n    <span class=\"k\">if</span> <span class=\"n\">strict</span><span class=\"p\">:</span>\n        <span class=\"n\">parsed_keys</span> <span class=\"o\">=</span> <span class=\"n\">cfg_options</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">valid_keys</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">assert_all_in</span><span class=\"p\">(</span><span class=\"n\">parsed_keys</span><span class=\"p\">,</span> <span class=\"n\">valid_keys</span><span class=\"p\">,</span>\n                             <span class=\"s1\">&#39;keys specified not in valid set&#39;</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">assert_all_in</span><span class=\"p\">(</span><span class=\"n\">parsed_keys</span><span class=\"p\">,</span> <span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">(),</span>\n                             <span class=\"s1\">&#39;keys specified not in default options&#39;</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Finalize configuration dict</span>\n    <span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">cfg_options</span><span class=\"p\">)</span>\n    <span class=\"n\">cfg</span><span class=\"p\">[</span><span class=\"s1\">&#39;_cfgtype&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">cfgtype</span>\n    <span class=\"n\">cfg</span><span class=\"p\">[</span><span class=\"s1\">&#39;_cfgname&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">cfgname</span>\n    <span class=\"n\">cfg_combo</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">all_dict_combinations</span><span class=\"p\">(</span><span class=\"n\">cfg</span><span class=\"p\">)</span>\n    <span class=\"c1\">#if len(cfg_combo) &gt; 1:</span>\n    <span class=\"k\">for</span> <span class=\"n\">combox</span><span class=\"p\">,</span> <span class=\"n\">cfg_</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">cfg_combo</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"n\">offset</span><span class=\"p\">):</span>\n        <span class=\"c1\">#cfg_[&#39;_cfgname&#39;] += &#39;;&#39; + str(combox)</span>\n        <span class=\"n\">cfg_</span><span class=\"p\">[</span><span class=\"s1\">&#39;_cfgindex&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">combox</span>\n    <span class=\"k\">for</span> <span class=\"n\">cfg_</span> <span class=\"ow\">in</span> <span class=\"n\">cfg_combo</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cfgopt_strs</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">cfg_</span><span class=\"p\">[</span><span class=\"s1\">&#39;_cfgstr&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">cfg_</span><span class=\"p\">[</span><span class=\"s1\">&#39;_cfgname&#39;</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">NAMEVARSEP</span> <span class=\"o\">+</span> <span class=\"n\">cfgopt_strs</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">cfg_</span><span class=\"p\">[</span><span class=\"s1\">&#39;_cfgstr&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">cfg_</span><span class=\"p\">[</span><span class=\"s1\">&#39;_cfgname&#39;</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">cfg_combo</span></div>\n\n\n<div class=\"viewcode-block\" id=\"parse_cfgstr_list2\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.cfghelpers.parse_cfgstr_list2\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">parse_cfgstr_list2</span><span class=\"p\">(</span><span class=\"n\">cfgstr_list</span><span class=\"p\">,</span> <span class=\"n\">named_defaults_dict</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">cfgtype</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                       <span class=\"n\">alias_keys</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">valid_keys</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">expand_nested</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                       <span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">special_join_dict</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">is_nestedcfgtype</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                       <span class=\"n\">metadata</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Parses config strings. By looking up name in a dict of configs</span>\n\n<span class=\"sd\">    DEPRICATE</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        cfgstr_list (list):</span>\n<span class=\"sd\">        named_defaults_dict (dict): (default = None)</span>\n<span class=\"sd\">        cfgtype (None): (default = None)</span>\n<span class=\"sd\">        alias_keys (None): (default = None)</span>\n<span class=\"sd\">        valid_keys (None): (default = None)</span>\n<span class=\"sd\">        expand_nested (bool): (default = True)</span>\n<span class=\"sd\">        strict (bool): (default = True)</span>\n<span class=\"sd\">        is_nestedcfgtype - used for annot configs so special joins arent geometrically combined</span>\n\n<span class=\"sd\">    Note:</span>\n<span class=\"sd\">        Normal Case:</span>\n<span class=\"sd\">            --flag name</span>\n\n<span class=\"sd\">        Custom Arugment Cases:</span>\n<span class=\"sd\">            --flag name:custom_key1=custom_val1,custom_key2=custom_val2</span>\n\n<span class=\"sd\">        Multiple Config Case:</span>\n<span class=\"sd\">            --flag name1:custom_args1 name2:custom_args2</span>\n\n<span class=\"sd\">        Multiple Config (special join) Case:</span>\n<span class=\"sd\">            (here name2 and name3 have some special interaction)</span>\n<span class=\"sd\">            --flag name1:custom_args1 name2:custom_args2::name3:custom_args3</span>\n\n<span class=\"sd\">        Varied Argument Case:</span>\n<span class=\"sd\">            --flag name:key1=[val1,val2]</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        list: cfg_combos_list</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.expt.cfghelpers --exec-parse_cfgstr_list2</span>\n<span class=\"sd\">        python -m ibeis.expt.cfghelpers --test-parse_cfgstr_list2</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTET</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.expt.cfghelpers import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; cfgstr_list = [&#39;name&#39;, &#39;name:f=1&#39;, &#39;name:b=[1,2]&#39;, &#39;name1:f=1::name2:f=1,b=2&#39;]</span>\n<span class=\"sd\">        &gt;&gt;&gt; #cfgstr_list = [&#39;name&#39;, &#39;name1:f=1::name2:f=1,b=2&#39;]</span>\n<span class=\"sd\">        &gt;&gt;&gt; named_defaults_dict = None</span>\n<span class=\"sd\">        &gt;&gt;&gt; cfgtype = None</span>\n<span class=\"sd\">        &gt;&gt;&gt; alias_keys = None</span>\n<span class=\"sd\">        &gt;&gt;&gt; valid_keys = None</span>\n<span class=\"sd\">        &gt;&gt;&gt; expand_nested = True</span>\n<span class=\"sd\">        &gt;&gt;&gt; strict = False</span>\n<span class=\"sd\">        &gt;&gt;&gt; special_join_dict = {&#39;joined&#39;: True}</span>\n<span class=\"sd\">        &gt;&gt;&gt; cfg_combos_list = parse_cfgstr_list2(cfgstr_list, named_defaults_dict,</span>\n<span class=\"sd\">        &gt;&gt;&gt;                                      cfgtype, alias_keys, valid_keys,</span>\n<span class=\"sd\">        &gt;&gt;&gt;                                      expand_nested, strict,</span>\n<span class=\"sd\">        &gt;&gt;&gt;                                      special_join_dict)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&#39;cfg_combos_list = %s&#39; % (ut.repr2(cfg_combos_list, nl=2),))</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(ut.depth_profile(cfg_combos_list))</span>\n<span class=\"sd\">        &gt;&gt;&gt; cfg_list = ut.flatten(cfg_combos_list)</span>\n<span class=\"sd\">        &gt;&gt;&gt; cfg_list = ut.flatten([cfg if isinstance(cfg, list) else [cfg] for cfg in cfg_list])</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = ut.repr2(ut.get_varied_cfg_lbls(cfg_list))</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">        [&#39;name:&#39;, &#39;name:f=1&#39;, &#39;name:b=1&#39;, &#39;name:b=2&#39;, &#39;name1:f=1,joined=True&#39;, &#39;name2:b=2,f=1,joined=True&#39;]</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">with</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">Indenter</span><span class=\"p\">(</span><span class=\"s1\">&#39;    &#39;</span><span class=\"p\">):</span>\n        <span class=\"n\">cfg_combos_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">cfgstr</span> <span class=\"ow\">in</span> <span class=\"n\">cfgstr_list</span><span class=\"p\">:</span>\n            <span class=\"n\">cfg_combos</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"c1\"># Parse special joined cfg case</span>\n            <span class=\"k\">if</span> <span class=\"n\">cfgstr</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"s1\">&#39;::&#39;</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">:</span>\n                <span class=\"n\">special_cfgstr_list</span> <span class=\"o\">=</span> <span class=\"n\">cfgstr</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;::&#39;</span><span class=\"p\">)</span>\n                <span class=\"n\">special_combo_list</span> <span class=\"o\">=</span> <span class=\"n\">parse_cfgstr_list2</span><span class=\"p\">(</span>\n                    <span class=\"n\">special_cfgstr_list</span><span class=\"p\">,</span>\n                    <span class=\"n\">named_defaults_dict</span><span class=\"o\">=</span><span class=\"n\">named_defaults_dict</span><span class=\"p\">,</span> <span class=\"n\">cfgtype</span><span class=\"o\">=</span><span class=\"n\">cfgtype</span><span class=\"p\">,</span>\n                    <span class=\"n\">alias_keys</span><span class=\"o\">=</span><span class=\"n\">alias_keys</span><span class=\"p\">,</span> <span class=\"n\">valid_keys</span><span class=\"o\">=</span><span class=\"n\">valid_keys</span><span class=\"p\">,</span>\n                    <span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"n\">strict</span><span class=\"p\">,</span> <span class=\"n\">expand_nested</span><span class=\"o\">=</span><span class=\"n\">expand_nested</span><span class=\"p\">,</span>\n                    <span class=\"n\">is_nestedcfgtype</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">metadata</span><span class=\"o\">=</span><span class=\"n\">metadata</span><span class=\"p\">)</span>\n                <span class=\"n\">OLD</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n                <span class=\"k\">if</span> <span class=\"n\">OLD</span><span class=\"p\">:</span>\n                    <span class=\"n\">special_combo</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">special_combo_list</span><span class=\"p\">)</span>\n                    <span class=\"k\">if</span> <span class=\"n\">special_join_dict</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                        <span class=\"k\">for</span> <span class=\"n\">cfg</span> <span class=\"ow\">in</span> <span class=\"n\">special_combo</span><span class=\"p\">:</span>\n                            <span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">special_join_dict</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"n\">special_join_dict</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                        <span class=\"k\">for</span> <span class=\"n\">special_combo</span> <span class=\"ow\">in</span> <span class=\"n\">special_combo_list</span><span class=\"p\">:</span>\n                            <span class=\"k\">for</span> <span class=\"n\">cfg</span> <span class=\"ow\">in</span> <span class=\"n\">special_combo</span><span class=\"p\">:</span>\n                                <span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">special_join_dict</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">is_nestedcfgtype</span><span class=\"p\">:</span>\n                    <span class=\"n\">cfg_combo</span> <span class=\"o\">=</span> <span class=\"nb\">tuple</span><span class=\"p\">([</span><span class=\"n\">combo</span> <span class=\"k\">for</span> <span class=\"n\">combo</span> <span class=\"ow\">in</span> <span class=\"n\">special_combo_list</span><span class=\"p\">])</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"c1\"># not sure if this is right</span>\n                    <span class=\"n\">cfg_combo</span> <span class=\"o\">=</span> <span class=\"n\">special_combo_list</span>\n                <span class=\"c1\"># FIXME DUPLICATE CODE</span>\n                <span class=\"k\">if</span> <span class=\"n\">expand_nested</span><span class=\"p\">:</span>\n                    <span class=\"n\">cfg_combos</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">cfg_combo</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"c1\">#print(&#39;Appending: &#39; + str(ut.depth_profile(cfg_combo)))</span>\n                    <span class=\"c1\">#if ut.depth_profile(cfg_combo) == [1, 9]:</span>\n                    <span class=\"c1\">#    ut.embed()</span>\n                    <span class=\"n\">cfg_combos_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">cfg_combo</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">cfgname</span><span class=\"p\">,</span> <span class=\"n\">cfgopt_strs</span><span class=\"p\">,</span> <span class=\"n\">subx</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">parse_cfgstr_name_options</span><span class=\"p\">(</span><span class=\"n\">cfgstr</span><span class=\"p\">)</span>\n                <span class=\"c1\"># --</span>\n                <span class=\"c1\"># Lookup named default settings</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"n\">base_cfg_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">lookup_base_cfg_list</span><span class=\"p\">(</span><span class=\"n\">cfgname</span><span class=\"p\">,</span> <span class=\"n\">named_defaults_dict</span><span class=\"p\">,</span> <span class=\"n\">metadata</span><span class=\"o\">=</span><span class=\"n\">metadata</span><span class=\"p\">)</span>\n                <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n                    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">printex</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">,</span> <span class=\"n\">keys</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;cfgstr_list&#39;</span><span class=\"p\">])</span>\n                    <span class=\"k\">raise</span>\n                <span class=\"c1\"># --</span>\n                <span class=\"k\">for</span> <span class=\"n\">base_cfg</span> <span class=\"ow\">in</span> <span class=\"n\">base_cfg_list</span><span class=\"p\">:</span>\n                    <span class=\"n\">cfg_combo</span> <span class=\"o\">=</span> <span class=\"n\">customize_base_cfg</span><span class=\"p\">(</span>\n                        <span class=\"n\">cfgname</span><span class=\"p\">,</span> <span class=\"n\">cfgopt_strs</span><span class=\"p\">,</span> <span class=\"n\">base_cfg</span><span class=\"p\">,</span> <span class=\"n\">cfgtype</span><span class=\"p\">,</span> <span class=\"n\">alias_keys</span><span class=\"p\">,</span>\n                        <span class=\"n\">valid_keys</span><span class=\"p\">,</span> <span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"n\">strict</span><span class=\"p\">,</span> <span class=\"n\">offset</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cfg_combos</span><span class=\"p\">))</span>\n                    <span class=\"k\">if</span> <span class=\"n\">is_nestedcfgtype</span><span class=\"p\">:</span>\n                        <span class=\"n\">cfg_combo</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">cfg_combo</span><span class=\"p\">]</span>\n                    <span class=\"k\">if</span> <span class=\"n\">expand_nested</span><span class=\"p\">:</span>\n                        <span class=\"n\">cfg_combos</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">cfg_combo</span><span class=\"p\">)</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"n\">cfg_combos_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">cfg_combo</span><span class=\"p\">)</span>\n            <span class=\"c1\"># SUBX Cannot work here because of acfg hackiness</span>\n            <span class=\"c1\">#if subx is not None:</span>\n            <span class=\"c1\">#    cfg_combo = ut.take(cfg_combo, subx)</span>\n            <span class=\"k\">if</span> <span class=\"n\">expand_nested</span><span class=\"p\">:</span>\n                <span class=\"n\">cfg_combos_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">cfg_combos</span><span class=\"p\">)</span>\n        <span class=\"c1\">#    print(&#39;Updated to: &#39; + str(ut.depth_profile(cfg_combos_list)))</span>\n        <span class=\"c1\">#print(&#39;Returning len(cfg_combos_list) = %r&#39; % (len(cfg_combos_list),))</span>\n    <span class=\"k\">return</span> <span class=\"n\">cfg_combos_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"parse_argv_cfg\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.cfghelpers.parse_argv_cfg\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">parse_argv_cfg</span><span class=\"p\">(</span><span class=\"n\">argname</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">],</span> <span class=\"n\">named_defaults_dict</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                   <span class=\"n\">valid_keys</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; simple configs</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        argname (?):</span>\n<span class=\"sd\">        default (list): (default = [])</span>\n<span class=\"sd\">        named_defaults_dict (dict): (default = None)</span>\n<span class=\"sd\">        valid_keys (None): (default = None)</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        list: cfg_list</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.expt.cfghelpers --exec-parse_argv_cfg --filt :foo=bar</span>\n<span class=\"sd\">        python -m ibeis.expt.cfghelpers --test-parse_argv_cfg</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTET</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.expt.cfghelpers import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; argname = &#39;--filt&#39;</span>\n<span class=\"sd\">        &gt;&gt;&gt; cfg_list = parse_argv_cfg(argname)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = (&#39;cfg_list = %s&#39; % (str(cfg_list),))</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">in_jupyter_notebook</span><span class=\"p\">():</span>\n        <span class=\"c1\"># dont parse argv in ipython notebook</span>\n        <span class=\"n\">cfgstr_list</span> <span class=\"o\">=</span> <span class=\"n\">default</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">cfgstr_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argval</span><span class=\"p\">(</span><span class=\"n\">argname</span><span class=\"p\">,</span> <span class=\"n\">type_</span><span class=\"o\">=</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">default</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">cfgstr_list</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"kc\">None</span>\n    <span class=\"n\">cfg_combos_list</span> <span class=\"o\">=</span> <span class=\"n\">parse_cfgstr_list2</span><span class=\"p\">(</span><span class=\"n\">cfgstr_list</span><span class=\"p\">,</span>\n                                         <span class=\"n\">named_defaults_dict</span><span class=\"o\">=</span><span class=\"n\">named_defaults_dict</span><span class=\"p\">,</span>\n                                         <span class=\"n\">valid_keys</span><span class=\"o\">=</span><span class=\"n\">valid_keys</span><span class=\"p\">,</span>\n                                         <span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">cfg_list</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">cfg_combos_list</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">cfg_list</span></div>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.expt.cfghelpers</span>\n<span class=\"sd\">        python -m ibeis.expt.cfghelpers --allexamples</span>\n<span class=\"sd\">        python -m ibeis.expt.cfghelpers --allexamples --noface --nosrc</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">multiprocessing</span>\n    <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">freeze_support</span><span class=\"p\">()</span>  <span class=\"c1\"># for win32</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>  <span class=\"c1\"># NOQA</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">doctest_funcs</span><span class=\"p\">()</span>\n</pre></div>", "current_page_name": "_modules/ibeis/expt/cfghelpers", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}