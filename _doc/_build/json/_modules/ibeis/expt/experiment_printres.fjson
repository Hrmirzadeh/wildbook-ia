{"parents": [{"link": "../../../", "title": "Module code"}, {"link": "../../", "title": "ibeis"}, {"link": "../", "title": "ibeis.expt"}], "title": "ibeis.expt.experiment_printres", "body": "<h1>Source code for ibeis.expt.experiment_printres</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">displays results from harness</span>\n\n<span class=\"sd\">TODO: save a testres variable so reloading and regenration becomes easier.</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"k\">import</span> <span class=\"n\">absolute_import</span><span class=\"p\">,</span> <span class=\"n\">division</span><span class=\"p\">,</span> <span class=\"n\">print_function</span><span class=\"p\">,</span> <span class=\"n\">unicode_literals</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">six</span>\n<span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n<span class=\"kn\">from</span> <span class=\"nn\">six.moves</span> <span class=\"k\">import</span> <span class=\"nb\">map</span><span class=\"p\">,</span> <span class=\"nb\">range</span>\n<span class=\"nb\">print</span><span class=\"p\">,</span> <span class=\"n\">rrr</span><span class=\"p\">,</span> <span class=\"n\">profile</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">inject2</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"get_diffranks\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.experiment_printres.get_diffranks\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">get_diffranks</span><span class=\"p\">(</span><span class=\"n\">rank_mat</span><span class=\"p\">,</span> <span class=\"n\">qaids</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; Find rows which scored differently over the various configs</span>\n<span class=\"sd\">    FIXME: duplicated</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">isdiff_flags</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"ow\">not</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">(</span><span class=\"n\">row</span> <span class=\"o\">==</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">rank_mat</span><span class=\"p\">]</span>\n    <span class=\"n\">diff_aids</span>    <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">qaids</span><span class=\"p\">,</span> <span class=\"n\">isdiff_flags</span><span class=\"p\">)</span>\n    <span class=\"n\">diff_rank</span>    <span class=\"o\">=</span> <span class=\"n\">rank_mat</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">isdiff_flags</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">diff_qxs</span>     <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">isdiff_flags</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">diff_aids</span><span class=\"p\">,</span> <span class=\"n\">diff_rank</span><span class=\"p\">,</span> <span class=\"n\">diff_qxs</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_diffmat_str\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.experiment_printres.get_diffmat_str\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">get_diffmat_str</span><span class=\"p\">(</span><span class=\"n\">rank_mat</span><span class=\"p\">,</span> <span class=\"n\">qaids</span><span class=\"p\">,</span> <span class=\"n\">nConfig</span><span class=\"p\">):</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">itertools</span> <span class=\"k\">import</span> <span class=\"n\">chain</span>\n    <span class=\"n\">diff_aids</span><span class=\"p\">,</span> <span class=\"n\">diff_rank</span><span class=\"p\">,</span> <span class=\"n\">diff_qxs</span> <span class=\"o\">=</span> <span class=\"n\">get_diffranks</span><span class=\"p\">(</span><span class=\"n\">rank_mat</span><span class=\"p\">,</span> <span class=\"n\">qaids</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Find columns that ore strictly better than other columns</span>\n    <span class=\"c1\">#def find_strictly_better_columns(diff_rank):</span>\n    <span class=\"c1\">#    colmat = diff_rank.T</span>\n    <span class=\"c1\">#    pairwise_betterness_ranks = np.array([np.sum(col &lt;= colmat, axis=1) / len(col) for col in colmat], dtype=np.float).T</span>\n    <span class=\"n\">diff_mat</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">vstack</span><span class=\"p\">((</span><span class=\"n\">diff_aids</span><span class=\"p\">,</span> <span class=\"n\">diff_rank</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">T</span>\n    <span class=\"n\">col_lbls</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">chain</span><span class=\"p\">([</span><span class=\"s1\">&#39;qaid&#39;</span><span class=\"p\">],</span> <span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"s1\">&#39;cfg</span><span class=\"si\">%d</span><span class=\"s1\">_rank&#39;</span> <span class=\"o\">%</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">nConfig</span><span class=\"p\">))))</span>\n    <span class=\"n\">col_type</span>  <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">chain</span><span class=\"p\">([</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">nConfig</span><span class=\"p\">))</span>\n    <span class=\"n\">header</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;diffmat&#39;</span>\n    <span class=\"n\">diff_matstr</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">numpy_to_csv</span><span class=\"p\">(</span><span class=\"n\">diff_mat</span><span class=\"p\">,</span> <span class=\"n\">col_lbls</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"p\">,</span> <span class=\"n\">col_type</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">diff_matstr</span></div>\n\n\n<div class=\"viewcode-block\" id=\"print_latexsum\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.experiment_printres.print_latexsum\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">print_latexsum</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">testres</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (IBEISController):  ibeis controller object</span>\n<span class=\"sd\">        testres (?):</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.expt.experiment_printres --exec-print_latexsum</span>\n<span class=\"sd\">        python -m ibeis.scripts.gen_cand_expts --exec-gen_script</span>\n\n<span class=\"sd\">        python -m ibeis --tf print_latexsum -t candidacy --db PZ_Master0 -a controlled --rank-lt-list=1,5,10,100</span>\n<span class=\"sd\">        python -m ibeis --tf print_latexsum -t candidacy --db PZ_MTEST -a controlled --rank-lt-list=1,5,10,100</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # SCRIPT</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.expt.experiment_printres import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.init import main_helpers</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs, testres = main_helpers.testdata_expts()</span>\n<span class=\"sd\">        &gt;&gt;&gt; tabular_str2 = print_latexsum(ibs, testres)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;==========================&#39;</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[harn] LaTeX: </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">testnameid</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;==========================&#39;</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Create configuration latex table</span>\n    <span class=\"n\">X_LIST</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_X_LIST</span><span class=\"p\">()</span>\n    <span class=\"n\">criteria_lbls</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sa\">r</span><span class=\"s1\">&#39;#ranks $\\leq$ </span><span class=\"si\">%d</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">X</span> <span class=\"k\">for</span> <span class=\"n\">X</span> <span class=\"ow\">in</span> <span class=\"n\">X_LIST</span><span class=\"p\">]</span>\n    <span class=\"n\">dbname</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_dbname</span><span class=\"p\">()</span>\n    <span class=\"n\">cfg_score_title</span> <span class=\"o\">=</span> <span class=\"n\">dbname</span> <span class=\"o\">+</span> <span class=\"s1\">&#39; rank scores&#39;</span>\n    <span class=\"n\">nLessX_dict</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_nLessX_dict</span><span class=\"p\">()</span>\n    <span class=\"n\">cfgscores</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"n\">nLessX_dict</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)]</span> <span class=\"k\">for</span> <span class=\"n\">X</span> <span class=\"ow\">in</span> <span class=\"n\">X_LIST</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">T</span>\n\n    <span class=\"c1\"># For mat row labels</span>\n    <span class=\"n\">row_lbls</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_short_cfglbls</span><span class=\"p\">()</span>\n    <span class=\"c1\"># Order cdf list by rank0</span>\n    <span class=\"n\">row_lbls</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">sortedby</span><span class=\"p\">(</span><span class=\"n\">row_lbls</span><span class=\"p\">,</span> <span class=\"n\">cfgscores</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">cfgscores</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">sortedby</span><span class=\"p\">(</span><span class=\"n\">cfgscores</span><span class=\"o\">.</span><span class=\"n\">tolist</span><span class=\"p\">(),</span> <span class=\"n\">cfgscores</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n\n    <span class=\"n\">cmdaug</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_title_aug</span><span class=\"p\">()</span>\n    <span class=\"c1\">#if testres.common_acfg is not None:</span>\n    <span class=\"c1\">#    cfgname = testres.common_acfg[&#39;common&#39;][&#39;_cfgname&#39;]</span>\n    <span class=\"c1\">#    cmdaug += &#39;_&#39; + cfgname</span>\n    <span class=\"c1\">#if hasattr(testres, &#39;common_cfgdict&#39;):</span>\n    <span class=\"c1\">#    cmdaug += &#39;_&#39; + (testres.common_cfgdict[&#39;_cfgname&#39;])</span>\n    <span class=\"c1\">#    cfg_score_title += &#39; &#39; + cmdaug</span>\n\n    <span class=\"n\">tabular_kwargs</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span>\n        <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"n\">cfg_score_title</span><span class=\"p\">,</span>\n        <span class=\"n\">out_of</span><span class=\"o\">=</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">nQuery</span><span class=\"p\">,</span>\n        <span class=\"n\">bold_best</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">flip</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">SHORTEN_ROW_LBLS</span><span class=\"o\">=</span><span class=\"kc\">False</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">col_lbls</span> <span class=\"o\">=</span> <span class=\"n\">criteria_lbls</span>\n    <span class=\"n\">tabular_str</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">util_latex</span><span class=\"o\">.</span><span class=\"n\">make_score_tabular</span><span class=\"p\">(</span>\n        <span class=\"n\">row_lbls</span><span class=\"p\">,</span> <span class=\"n\">col_lbls</span><span class=\"p\">,</span> <span class=\"n\">cfgscores</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">tabular_kwargs</span><span class=\"p\">)</span>\n    <span class=\"c1\">#latex_formater.render(tabular_str)</span>\n    <span class=\"n\">cmdname</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">latex_sanitize_command_name</span><span class=\"p\">(</span><span class=\"s1\">&#39;Expmt&#39;</span> <span class=\"o\">+</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_dbname</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;_&#39;</span> <span class=\"o\">+</span> <span class=\"n\">cmdaug</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;Table&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">tabular_str2</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">latex_newcommand</span><span class=\"p\">(</span><span class=\"n\">cmdname</span><span class=\"p\">,</span> <span class=\"n\">tabular_str</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tabular_str2</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">tabular_str2</span></div>\n\n\n<div class=\"viewcode-block\" id=\"print_results\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.experiment_printres.print_results\">[docs]</a><span class=\"nd\">@profile</span>\n<span class=\"k\">def</span> <span class=\"nf\">print_results</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">testres</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Prints results from an experiment harness run.</span>\n<span class=\"sd\">    Rows store different qaids (query annotation ids)</span>\n<span class=\"sd\">    Cols store different configurations (algorithm parameters)</span>\n\n<span class=\"sd\">    TODO: join acfgs</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        ibs (IBEISController):  ibeis controller object</span>\n<span class=\"sd\">        testres (test_result.TestResult):</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python dev.py -e print --db PZ_MTEST \\</span>\n<span class=\"sd\">            -a default:dpername=1,qpername=[1,2]  -t default:fg_on=False</span>\n<span class=\"sd\">        python dev.py -e print -t best --db seals2 --allgt --vz</span>\n<span class=\"sd\">        python dev.py -e print --db PZ_MTEST --allgt -t custom \\</span>\n<span class=\"sd\">            --print-confusion-stats</span>\n<span class=\"sd\">        python dev.py -e print --db PZ_MTEST --allgt --noqcache \\</span>\n<span class=\"sd\">            --index 0:10:2 -t custom:rrvsone_on=True --print-confusion-stats</span>\n<span class=\"sd\">        python dev.py -e print --db PZ_MTEST --allgt --noqcache --qaid4 \\</span>\n<span class=\"sd\">            -t custom:rrvsone_on=True --print-confusion-stats</span>\n<span class=\"sd\">        python -m ibeis print_results -t default --db PZ_MTEST -a ctrl</span>\n<span class=\"sd\">        python -m ibeis print_results -t default --db PZ_MTEST -a ctrl</span>\n<span class=\"sd\">        python -m ibeis print_results --db PZ_MTEST -a default</span>\n<span class=\"sd\">            -t default:lnbnn_on=True default:lnbnn_on=False,bar_l2_on=True \\</span>\n<span class=\"sd\">            default:lnbnn_on=False,normonly_on=True</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.expt.experiment_printres --test-print_results</span>\n<span class=\"sd\">        utprof.py -m ibeis.expt.experiment_printres --test-print_results</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.expt.experiment_printres import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis.init import main_helpers</span>\n<span class=\"sd\">        &gt;&gt;&gt; ibs, testres = main_helpers.testdata_expts(</span>\n<span class=\"sd\">        &gt;&gt;&gt;     &#39;pz_mtest&#39;, a=&#39;default:dpername=1,qpername=[1,2]&#39;,</span>\n<span class=\"sd\">        &gt;&gt;&gt;     t=&#39;default:fg_on=false&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = print_results(ibs, testres)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"n\">tup</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dict_take</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"p\">,</span>\n                       <span class=\"p\">[</span><span class=\"s1\">&#39;cfg_list&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;cfgx2_cmsinfo&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;testnameid&#39;</span><span class=\"p\">,</span>\n                        <span class=\"s1\">&#39;cfgx2_lbl&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;cfgx2_qreq_&#39;</span><span class=\"p\">])</span>\n    <span class=\"p\">(</span><span class=\"n\">cfg_list</span><span class=\"p\">,</span> <span class=\"n\">cfgx2_cmsinfo</span><span class=\"p\">,</span> <span class=\"n\">testnameid</span><span class=\"p\">,</span> <span class=\"n\">cfgx2_lbl</span><span class=\"p\">,</span> <span class=\"n\">cfgx2_qreq_</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">tup</span>\n\n    <span class=\"c1\"># join_acfgs = kwargs.get(&#39;join_acfgs&#39;, False)</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39; --- PRINT RESULTS ---&#39;</span><span class=\"p\">)</span>\n    <span class=\"c1\"># print(&#39; use --rank-lt-list=1,5 to specify X_LIST&#39;)</span>\n    <span class=\"k\">if</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Num of ranks less than to score</span>\n        <span class=\"n\">X_LIST</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_X_LIST</span><span class=\"p\">()</span>\n        <span class=\"c1\">#X_LIST = [1, 5]</span>\n\n        <span class=\"c1\">#nConfig = len(cfg_list)</span>\n        <span class=\"c1\">#nQuery = len(testres.qaids)</span>\n        <span class=\"n\">cfgx2_nQuery</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">,</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_qaids</span><span class=\"p\">))</span>\n        <span class=\"c1\">#cfgx2_qx2_ranks = testres.get_infoprop_list(&#39;qx2_gt_rank&#39;)</span>\n        <span class=\"c1\">#--------------------</span>\n\n        <span class=\"c1\"># A positive scorediff indicates the groundtruth was better than the</span>\n        <span class=\"c1\"># groundfalse scores</span>\n        <span class=\"c1\">#istrue_list  = [scorediff &gt; 0 for scorediff in scorediffs_mat]</span>\n        <span class=\"c1\">#isfalse_list = [~istrue for istrue in istrue_list]</span>\n\n        <span class=\"c1\">#------------</span>\n        <span class=\"c1\"># Build Colscore</span>\n        <span class=\"n\">nLessX_dict</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">get_nLessX_dict</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># cfgx2_hist, edges = testres.get_rank_histograms(bins=X_LIST + [np.inf],</span>\n        <span class=\"c1\">#                                                join_acfgs=join_acfgs)</span>\n        <span class=\"c1\"># cfgx2_cumsum = cfgx2_hist.cumsum(axis=1)</span>\n\n        <span class=\"c1\">#------------</span>\n        <span class=\"n\">best_rankscore_summary</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"c1\">#to_intersect_list = []</span>\n        <span class=\"c1\"># print each configs scores less than X=thresh</span>\n        <span class=\"k\">for</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">cfgx2_nLessX</span> <span class=\"ow\">in</span> <span class=\"n\">six</span><span class=\"o\">.</span><span class=\"n\">iteritems</span><span class=\"p\">(</span><span class=\"n\">nLessX_dict</span><span class=\"p\">):</span>\n            <span class=\"n\">max_nLessX</span> <span class=\"o\">=</span> <span class=\"n\">cfgx2_nLessX</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">()</span>\n            <span class=\"n\">bestX_cfgx_list</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">cfgx2_nLessX</span> <span class=\"o\">==</span> <span class=\"n\">max_nLessX</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"n\">best_rankscore</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;[cfg*] </span><span class=\"si\">%d</span><span class=\"s1\"> cfg(s) scored &#39;</span> <span class=\"o\">%</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">bestX_cfgx_list</span><span class=\"p\">)</span>\n            <span class=\"c1\"># FIXME</span>\n            <span class=\"n\">best_rankscore</span> <span class=\"o\">+=</span> <span class=\"n\">rankscore_str</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">max_nLessX</span><span class=\"p\">,</span>\n                                            <span class=\"n\">cfgx2_nQuery</span><span class=\"p\">[</span><span class=\"n\">bestX_cfgx_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]])</span>\n            <span class=\"n\">best_rankscore_summary</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">best_rankscore</span><span class=\"p\">]</span>\n\n    <span class=\"nd\">@ut</span><span class=\"o\">.</span><span class=\"n\">argv_flag_dec</span>\n    <span class=\"k\">def</span> <span class=\"nf\">intersect_hack</span><span class=\"p\">():</span>\n        <span class=\"n\">failed</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">rank_mat</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span>\n        <span class=\"n\">colx2_failed</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nonzero</span><span class=\"p\">(</span><span class=\"n\">failed_col</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">failed_col</span> <span class=\"ow\">in</span> <span class=\"n\">failed</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">]</span>\n        <span class=\"c1\">#failed_col2_only = np.setdiff1d(colx2_failed[1], colx2_failed[0])</span>\n        <span class=\"c1\">#failed_col2_only_aids = ut.take(testres.qaids, failed_col2_only)</span>\n        <span class=\"n\">failed_col1_only</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">setdiff1d</span><span class=\"p\">(</span><span class=\"n\">colx2_failed</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">colx2_failed</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n        <span class=\"n\">failed_col1_only_aids</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">qaids</span><span class=\"p\">,</span> <span class=\"n\">failed_col1_only</span><span class=\"p\">)</span>\n        <span class=\"n\">gt_aids1</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_groundtruth</span><span class=\"p\">(</span><span class=\"n\">failed_col1_only_aids</span><span class=\"p\">,</span>\n                                             <span class=\"n\">daid_list</span><span class=\"o\">=</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_qreq_</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">daids</span><span class=\"p\">)</span>\n        <span class=\"n\">gt_aids2</span> <span class=\"o\">=</span> <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">get_annot_groundtruth</span><span class=\"p\">(</span><span class=\"n\">failed_col1_only_aids</span><span class=\"p\">,</span>\n                                             <span class=\"n\">daid_list</span><span class=\"o\">=</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">cfgx2_qreq_</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">daids</span><span class=\"p\">)</span>\n\n        <span class=\"n\">qaids_expt</span> <span class=\"o\">=</span> <span class=\"n\">failed_col1_only_aids</span>\n        <span class=\"n\">gt_avl_aids1</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">gt_aids1</span><span class=\"p\">)</span>\n        <span class=\"n\">gt_avl_aids2</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">gt_aids2</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">difference</span><span class=\"p\">(</span><span class=\"n\">gt_avl_aids1</span><span class=\"p\">))</span>\n\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">print_annotconfig_stats</span><span class=\"p\">(</span><span class=\"n\">qaids_expt</span><span class=\"p\">,</span> <span class=\"n\">gt_avl_aids1</span><span class=\"p\">)</span>\n        <span class=\"n\">ibs</span><span class=\"o\">.</span><span class=\"n\">print_annotconfig_stats</span><span class=\"p\">(</span><span class=\"n\">qaids_expt</span><span class=\"p\">,</span> <span class=\"n\">gt_avl_aids2</span><span class=\"p\">)</span>\n        <span class=\"c1\">#jsontext = ut.to_json({</span>\n        <span class=\"c1\">#    &#39;qaids&#39;: list(qaids_expt),</span>\n        <span class=\"c1\">#    &#39;dinclude_aids1&#39;: list(gt_aids_expt1),</span>\n        <span class=\"c1\">#    &#39;dinclude_aids2&#39;: list(gt_aids_expt2),</span>\n        <span class=\"c1\">#})</span>\n        <span class=\"c1\">#annotation_configs.varysize_pzm</span>\n        <span class=\"c1\">#from ibeis.expt import annotation_configs</span>\n\n        <span class=\"n\">acfg</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">acfg_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">copy</span>\n        <span class=\"n\">acfg1</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"n\">acfg</span><span class=\"p\">)</span>\n        <span class=\"n\">acfg2</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"n\">acfg</span><span class=\"p\">)</span>\n        <span class=\"n\">acfg1</span><span class=\"p\">[</span><span class=\"s1\">&#39;qcfg&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;min_pername&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">acfg2</span><span class=\"p\">[</span><span class=\"s1\">&#39;qcfg&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;min_pername&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">acfg1</span><span class=\"p\">[</span><span class=\"s1\">&#39;dcfg&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;min_pername&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">acfg2</span><span class=\"p\">[</span><span class=\"s1\">&#39;dcfg&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;min_gt_per_name&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n        <span class=\"n\">acfg1</span><span class=\"p\">[</span><span class=\"s1\">&#39;qcfg&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;default_aids&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">qaids_expt</span>\n        <span class=\"n\">acfg1</span><span class=\"p\">[</span><span class=\"s1\">&#39;dcfg&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;gt_avl_aids&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">gt_avl_aids1</span>\n        <span class=\"n\">acfg2</span><span class=\"p\">[</span><span class=\"s1\">&#39;qcfg&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;default_aids&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">qaids_expt</span>\n        <span class=\"n\">acfg2</span><span class=\"p\">[</span><span class=\"s1\">&#39;dcfg&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;gt_avl_aids&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">gt_avl_aids2</span>\n\n        <span class=\"kn\">from</span> <span class=\"nn\">ibeis.init</span> <span class=\"k\">import</span> <span class=\"n\">filter_annots</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">ibeis.expt</span> <span class=\"k\">import</span> <span class=\"n\">experiment_helpers</span>\n\n        <span class=\"n\">annots1</span> <span class=\"o\">=</span> <span class=\"n\">filter_annots</span><span class=\"o\">.</span><span class=\"n\">expand_acfgs</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">acfg1</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">annots2</span> <span class=\"o\">=</span> <span class=\"n\">filter_annots</span><span class=\"o\">.</span><span class=\"n\">expand_acfgs</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">acfg2</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n        <span class=\"n\">acfg_name_list</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span>  <span class=\"c1\"># NOQA</span>\n            <span class=\"n\">acfg_list</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">acfg1</span><span class=\"p\">,</span> <span class=\"n\">acfg2</span><span class=\"p\">],</span>\n            <span class=\"n\">expanded_aids_list</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">annots1</span><span class=\"p\">,</span> <span class=\"n\">annots2</span><span class=\"p\">],</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">test_cfg_name_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;candidacy_k&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">cfgdict_list</span><span class=\"p\">,</span> <span class=\"n\">pipecfg_list</span> <span class=\"o\">=</span> <span class=\"n\">experiment_helpers</span><span class=\"o\">.</span><span class=\"n\">get_pipecfg_list</span><span class=\"p\">(</span>\n            <span class=\"n\">test_cfg_name_list</span><span class=\"p\">,</span> <span class=\"n\">ibs</span><span class=\"o\">=</span><span class=\"n\">ibs</span><span class=\"p\">)</span>\n\n        <span class=\"n\">t1</span><span class=\"p\">,</span> <span class=\"n\">t2</span> <span class=\"o\">=</span> <span class=\"n\">testres_list</span>  <span class=\"c1\"># NOQA</span>\n    <span class=\"c1\">#intersect_hack()</span>\n\n    <span class=\"c1\">#@ut.argv_flag_dec</span>\n    <span class=\"c1\">#def print_rowlbl():</span>\n    <span class=\"c1\">#    print(&#39;=====================&#39;)</span>\n    <span class=\"c1\">#    print(&#39;[harn] Row/Query Labels: %s&#39; % testnameid)</span>\n    <span class=\"c1\">#    print(&#39;=====================&#39;)</span>\n    <span class=\"c1\">#    print(&#39;[harn] queries:\\n%s&#39; % &#39;\\n&#39;.join(qx2_lbl))</span>\n    <span class=\"c1\">#print_rowlbl()</span>\n    <span class=\"c1\">#------------</span>\n\n    <span class=\"nd\">@ut</span><span class=\"o\">.</span><span class=\"n\">argv_flag_dec</span>\n    <span class=\"k\">def</span> <span class=\"nf\">print_collbl</span><span class=\"p\">():</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;=====================&#39;</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[harn] Col/Config Labels: </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">testnameid</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;=====================&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">enum_cfgx2_lbl</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;</span><span class=\"si\">%2d</span><span class=\"s1\">) </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">count</span><span class=\"p\">,</span> <span class=\"n\">cfglbl</span><span class=\"p\">)</span>\n                            <span class=\"k\">for</span> <span class=\"n\">count</span><span class=\"p\">,</span> <span class=\"n\">cfglbl</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">cfgx2_lbl</span><span class=\"p\">)]</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[harn] cfglbl:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">enum_cfgx2_lbl</span><span class=\"p\">))</span>\n    <span class=\"n\">print_collbl</span><span class=\"p\">()</span>\n\n    <span class=\"c1\">#------------</span>\n\n    <span class=\"nd\">@ut</span><span class=\"o\">.</span><span class=\"n\">argv_flag_dec</span>\n    <span class=\"k\">def</span> <span class=\"nf\">print_cfgstr</span><span class=\"p\">():</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;=====================&#39;</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[harn] Config Strings: </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">testnameid</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;=====================&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">cfgstr_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">query_cfg</span><span class=\"o\">.</span><span class=\"n\">get_cfgstr</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">query_cfg</span> <span class=\"ow\">in</span> <span class=\"n\">cfg_list</span><span class=\"p\">]</span>\n        <span class=\"n\">enum_cfgstr_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;</span><span class=\"si\">%2d</span><span class=\"s1\">) </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">count</span><span class=\"p\">,</span> <span class=\"n\">cfgstr</span><span class=\"p\">)</span>\n                            <span class=\"k\">for</span> <span class=\"n\">count</span><span class=\"p\">,</span> <span class=\"n\">cfgstr</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">cfgstr_list</span><span class=\"p\">)]</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">[harn] cfgstr:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">enum_cfgstr_list</span><span class=\"p\">))</span>\n    <span class=\"n\">print_cfgstr</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@ut</span><span class=\"o\">.</span><span class=\"n\">argv_flag_dec</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">print_colscore</span><span class=\"p\">():</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;==================&#39;</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[harn] Scores per Config: </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">testnameid</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;==================&#39;</span><span class=\"p\">)</span>\n        <span class=\"c1\">#for cfgx in range(nConfig):</span>\n        <span class=\"c1\">#    print(&#39;[score] %s&#39; % (cfgx2_lbl[cfgx]))</span>\n        <span class=\"c1\">#    for X in X_LIST:</span>\n        <span class=\"c1\">#        nLessX_ = nLessX_dict[int(X)][cfgx]</span>\n        <span class=\"c1\">#        print(&#39;        &#39; + rankscore_str(X, nLessX_, nQuery))</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">[harn] ... sorted scores&#39;</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">X</span> <span class=\"ow\">in</span> <span class=\"n\">X_LIST</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">[harn] Sorted #ranks &lt; </span><span class=\"si\">%r</span><span class=\"s1\"> scores&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">))</span>\n            <span class=\"n\">sortx</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">nLessX_dict</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)])</span><span class=\"o\">.</span><span class=\"n\">argsort</span><span class=\"p\">()</span>\n            <span class=\"c1\">#frac_list = (nLessX_dict[int(X)] / cfgx2_nQuery)[:, None]</span>\n            <span class=\"c1\">#print(&#39;cfgx2_nQuery = %r&#39; % (cfgx2_nQuery,))</span>\n            <span class=\"c1\">#print(&#39;frac_list = %r&#39; % (frac_list,))</span>\n            <span class=\"c1\">#print(&#39;Pairwise Difference: &#39; + str(ut.safe_pdist(frac_list, metric=ut.absdiff)))</span>\n            <span class=\"k\">for</span> <span class=\"n\">cfgx</span> <span class=\"ow\">in</span> <span class=\"n\">sortx</span><span class=\"p\">:</span>\n                <span class=\"n\">nLessX_</span> <span class=\"o\">=</span> <span class=\"n\">nLessX_dict</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)][</span><span class=\"n\">cfgx</span><span class=\"p\">]</span>\n                <span class=\"n\">rankstr</span> <span class=\"o\">=</span> <span class=\"n\">rankscore_str</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">nLessX_</span><span class=\"p\">,</span> <span class=\"n\">cfgx2_nQuery</span><span class=\"p\">[</span><span class=\"n\">cfgx</span><span class=\"p\">],</span> <span class=\"n\">withlbl</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[score] </span><span class=\"si\">%s</span><span class=\"s1\"> --- </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">rankstr</span><span class=\"p\">,</span> <span class=\"n\">cfgx2_lbl</span><span class=\"p\">[</span><span class=\"n\">cfgx</span><span class=\"p\">]))</span>\n    <span class=\"n\">print_colscore</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">argv_flag_dec</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">print_percent_identification_success</span><span class=\"p\">)(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n    <span class=\"n\">sumstrs</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">sumstrs</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s1\">&#39;++===========================&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">sumstrs</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s1\">&#39;|| [cfg*] TestName: </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">testnameid</span><span class=\"p\">)</span>\n    <span class=\"n\">sumstrs</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s1\">&#39;||---------------------------&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">sumstrs</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">joins</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">|| &#39;</span><span class=\"p\">,</span> <span class=\"n\">best_rankscore_summary</span><span class=\"p\">))</span>\n    <span class=\"n\">sumstrs</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s1\">&#39;LL===========================&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">summary_str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">sumstrs</span><span class=\"p\">)</span>\n    <span class=\"c1\">#print(summary_str)</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">colorprint</span><span class=\"p\">(</span><span class=\"n\">summary_str</span><span class=\"p\">,</span> <span class=\"s1\">&#39;blue&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;To enable all printouts add --print-all to the commandline&#39;</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"rankscore_str\"><a class=\"viewcode-back\" href=\"../../../../ibeis.expt/#ibeis.expt.experiment_printres.rankscore_str\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">rankscore_str</span><span class=\"p\">(</span><span class=\"n\">thresh</span><span class=\"p\">,</span> <span class=\"n\">nLess</span><span class=\"p\">,</span> <span class=\"n\">total</span><span class=\"p\">,</span> <span class=\"n\">withlbl</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n    <span class=\"c1\">#helper to print rank scores of configs</span>\n    <span class=\"n\">percent</span> <span class=\"o\">=</span> <span class=\"mi\">100</span> <span class=\"o\">*</span> <span class=\"n\">nLess</span> <span class=\"o\">/</span> <span class=\"n\">total</span>\n    <span class=\"n\">fmtsf</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;%&#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">num2_sigfig</span><span class=\"p\">(</span><span class=\"n\">total</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;d&#39;</span>\n    <span class=\"k\">if</span> <span class=\"n\">withlbl</span><span class=\"p\">:</span>\n        <span class=\"n\">fmtstr</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;:#ranks &lt; </span><span class=\"si\">%d</span><span class=\"s1\"> = &#39;</span> <span class=\"o\">+</span> <span class=\"n\">fmtsf</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;/</span><span class=\"si\">%d</span><span class=\"s1\"> = (</span><span class=\"si\">%.1f%%</span><span class=\"s1\">) (err=&#39;</span> <span class=\"o\">+</span> <span class=\"n\">fmtsf</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;/&#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">total</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;)&#39;</span>\n        <span class=\"n\">rankscore_str</span> <span class=\"o\">=</span> <span class=\"n\">fmtstr</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">thresh</span><span class=\"p\">,</span> <span class=\"n\">nLess</span><span class=\"p\">,</span> <span class=\"n\">total</span><span class=\"p\">,</span> <span class=\"n\">percent</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">total</span> <span class=\"o\">-</span> <span class=\"n\">nLess</span><span class=\"p\">))</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">fmtstr</span> <span class=\"o\">=</span> <span class=\"n\">fmtsf</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;/</span><span class=\"si\">%d</span><span class=\"s1\"> = (</span><span class=\"si\">%.1f%%</span><span class=\"s1\">) (err=&#39;</span> <span class=\"o\">+</span> <span class=\"n\">fmtsf</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;/&#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">total</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;)&#39;</span>\n        <span class=\"n\">rankscore_str</span> <span class=\"o\">=</span> <span class=\"n\">fmtstr</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">nLess</span><span class=\"p\">,</span> <span class=\"n\">total</span><span class=\"p\">,</span> <span class=\"n\">percent</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">total</span> <span class=\"o\">-</span> <span class=\"n\">nLess</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">rankscore_str</span></div>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.expt.experiment_printres</span>\n<span class=\"sd\">        python -m ibeis.expt.experiment_printres --allexamples</span>\n<span class=\"sd\">        python -m ibeis.expt.experiment_printres --allexamples --noface --nosrc</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">multiprocessing</span>\n    <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">freeze_support</span><span class=\"p\">()</span>  <span class=\"c1\"># for win32</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>  <span class=\"c1\"># NOQA</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">doctest_funcs</span><span class=\"p\">()</span>\n</pre></div>", "current_page_name": "_modules/ibeis/expt/experiment_printres", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}