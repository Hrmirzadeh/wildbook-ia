{"parents": [{"link": "../", "title": "Module code"}], "title": "ibeis", "body": "<h1>Source code for ibeis</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">IBEIS: main package init</span>\n\n<span class=\"sd\">TODO: LAZY IMPORTS?</span>\n<span class=\"sd\">    http://code.activestate.com/recipes/473888-lazy-module-imports/</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"c1\"># flake8: noqa</span>\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"k\">import</span> <span class=\"n\">absolute_import</span><span class=\"p\">,</span> <span class=\"n\">division</span><span class=\"p\">,</span> <span class=\"n\">print_function</span><span class=\"p\">,</span> <span class=\"n\">unicode_literals</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">dtool</span>\n<span class=\"k\">except</span> <span class=\"ne\">ImportError</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[ibeis !!!] ERROR: Unable to load all core utility modules.&#39;</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[ibeis !!!] Perhaps try super_setup.py pull&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">raise</span>\n\n<span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">noinject</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">,</span> <span class=\"s1\">&#39;[ibeis.__init__]&#39;</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">VERBOSE</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[ibeis] importing ibeis __init__&#39;</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">is_developer</span><span class=\"p\">():</span>\n    <span class=\"n\">standard_visualization_functions</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"s1\">&#39;show_image&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;show_chip&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;show_chipmatch&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;show_chipmatches&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;show_vocabulary&#39;</span><span class=\"p\">,</span>\n        <span class=\"c1\">#&#39;show_vocabulary&#39;,</span>\n    <span class=\"p\">]</span>\n\n<span class=\"c1\"># If we dont initialize plottool before &lt;something&gt;</span>\n<span class=\"c1\"># then it causes a crash in windows. Its so freaking weird.</span>\n<span class=\"c1\"># something is not guitool, ibeis.viz</span>\n<span class=\"c1\"># has to be before control, can be after constants, params, and main_module</span>\n<span class=\"c1\">#import plottool</span>\n\n\n<span class=\"n\">ENABLE_WILDBOOK_SIGNAL</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis</span> <span class=\"k\">import</span> <span class=\"n\">constants</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis</span> <span class=\"k\">import</span> <span class=\"n\">constants</span> <span class=\"k\">as</span> <span class=\"n\">const</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis</span> <span class=\"k\">import</span> <span class=\"n\">params</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis</span> <span class=\"k\">import</span> <span class=\"n\">main_module</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis</span> <span class=\"k\">import</span> <span class=\"n\">other</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.init</span> <span class=\"k\">import</span> <span class=\"n\">sysres</span>\n    <span class=\"c1\">#main_module._preload()</span>\n\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis</span> <span class=\"k\">import</span> <span class=\"n\">control</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis</span> <span class=\"k\">import</span> <span class=\"n\">dbio</span>\n    <span class=\"c1\">#from ibeis import web</span>\n\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.init</span> <span class=\"k\">import</span> <span class=\"n\">sysres</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.main_module</span> <span class=\"k\">import</span> <span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">,</span> <span class=\"n\">_preload</span><span class=\"p\">,</span> <span class=\"n\">_init_numpy</span><span class=\"p\">,</span> <span class=\"n\">main_loop</span><span class=\"p\">,</span>\n                                   <span class=\"n\">opendb</span><span class=\"p\">,</span> <span class=\"n\">opendb_in_background</span><span class=\"p\">,</span> <span class=\"n\">opendb_bg_web</span><span class=\"p\">)</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.control.IBEISControl</span> <span class=\"k\">import</span> <span class=\"n\">IBEISController</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.hots.query_request</span> <span class=\"k\">import</span> <span class=\"n\">QueryRequest</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.hots.chip_match</span> <span class=\"k\">import</span> <span class=\"n\">ChipMatch</span><span class=\"p\">,</span> <span class=\"n\">AnnotMatch</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.core</span> <span class=\"k\">import</span> <span class=\"n\">AnnotInference</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.init.sysres</span> <span class=\"k\">import</span> <span class=\"p\">(</span><span class=\"n\">get_workdir</span><span class=\"p\">,</span> <span class=\"n\">set_workdir</span><span class=\"p\">,</span> <span class=\"n\">ensure_pz_mtest</span><span class=\"p\">,</span>\n                                   <span class=\"n\">ensure_nauts</span><span class=\"p\">,</span> <span class=\"n\">ensure_wilddogs</span><span class=\"p\">,</span> <span class=\"n\">list_dbs</span><span class=\"p\">)</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.init</span> <span class=\"k\">import</span> <span class=\"n\">main_helpers</span>\n\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis</span> <span class=\"k\">import</span> <span class=\"n\">algo</span>\n\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis</span> <span class=\"k\">import</span> <span class=\"n\">expt</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis</span> <span class=\"k\">import</span> <span class=\"n\">templates</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.templates</span> <span class=\"k\">import</span> <span class=\"n\">generate_notebook</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis.control.controller_inject</span> <span class=\"k\">import</span> <span class=\"n\">register_preprocs</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis</span> <span class=\"k\">import</span> <span class=\"n\">core_annots</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis</span> <span class=\"k\">import</span> <span class=\"n\">core_images</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">ibeis.scripts</span> <span class=\"k\">import</span> <span class=\"n\">postdoc</span>\n    <span class=\"k\">except</span> <span class=\"ne\">ImportError</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">printex</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Error when importing ibeis&#39;</span><span class=\"p\">,</span> <span class=\"n\">tb</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"k\">raise</span>\n\n<div class=\"viewcode-block\" id=\"import_subs\"><a class=\"viewcode-back\" href=\"../../ibeis/#ibeis.import_subs\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">import_subs</span><span class=\"p\">():</span>\n    <span class=\"c1\"># Weird / Fancy loading.</span>\n    <span class=\"c1\"># I want to make this simpler</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis</span> <span class=\"k\">import</span> <span class=\"n\">algo</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis</span> <span class=\"k\">import</span> <span class=\"n\">viz</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis</span> <span class=\"k\">import</span> <span class=\"n\">web</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis</span> <span class=\"k\">import</span> <span class=\"n\">gui</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ibeis</span> <span class=\"k\">import</span> <span class=\"n\">templates</span></div>\n\n\n<div class=\"viewcode-block\" id=\"run_experiment\"><a class=\"viewcode-back\" href=\"../../ibeis/#ibeis.run_experiment\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">run_experiment</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">=</span><span class=\"s1\">&#39;print&#39;</span><span class=\"p\">,</span> <span class=\"n\">db</span><span class=\"o\">=</span><span class=\"s1\">&#39;PZ_MTEST&#39;</span><span class=\"p\">,</span> <span class=\"n\">dbdir</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;unctrl&#39;</span><span class=\"p\">],</span> <span class=\"n\">t</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;default&#39;</span><span class=\"p\">],</span>\n                   <span class=\"n\">initial_aids</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">qaid_override</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">daid_override</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                   <span class=\"n\">lazy</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Convience function</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        ibeis -e print</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        e (str): (default = &#39;print&#39;)</span>\n<span class=\"sd\">        db (str): (default = &#39;PZ_MTEST&#39;)</span>\n<span class=\"sd\">        a (list): (default = [&#39;unctrl&#39;])</span>\n<span class=\"sd\">        t (list): (default = [&#39;default&#39;])</span>\n<span class=\"sd\">        qaid_override (None): (default = None)</span>\n<span class=\"sd\">        lazy (bool): (default = False)</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        function: func -  live python function</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis.__init__ --exec-run_experiment --show</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from ibeis import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; e = &#39;rank_cmc&#39;</span>\n<span class=\"sd\">        &gt;&gt;&gt; db = &#39;testdb1&#39;</span>\n<span class=\"sd\">        &gt;&gt;&gt; a = [&#39;default:species=primary&#39;]</span>\n<span class=\"sd\">        &gt;&gt;&gt; t = [&#39;default&#39;]</span>\n<span class=\"sd\">        &gt;&gt;&gt; initial_aids = [2, 3, 4, 7, 9, 10, 11]</span>\n<span class=\"sd\">        &gt;&gt;&gt; qaid_override = [1, 9, 10, 11, 2, 3]</span>\n<span class=\"sd\">        &gt;&gt;&gt; testres = run_experiment(e, db, a, t, qaid_override=qaid_override,</span>\n<span class=\"sd\">        &gt;&gt;&gt;                          initial_aids=initial_aids)</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = (&#39;testres = %s&#39; % (str(testres),))</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.quit_if_noshow()</span>\n<span class=\"sd\">        &gt;&gt;&gt; testres.draw_func()</span>\n<span class=\"sd\">        &gt;&gt;&gt; ut.show_if_requested()</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">functools</span>\n    <span class=\"k\">def</span> <span class=\"nf\">find_expt_func</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">):</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">ibeis.dev</span>\n        <span class=\"k\">for</span> <span class=\"n\">tup</span> <span class=\"ow\">in</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">dev</span><span class=\"o\">.</span><span class=\"n\">REGISTERED_DOCTEST_EXPERIMENTS</span><span class=\"p\">:</span>\n            <span class=\"n\">modname</span><span class=\"p\">,</span> <span class=\"n\">funcname</span> <span class=\"o\">=</span> <span class=\"n\">tup</span><span class=\"p\">[:</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n            <span class=\"n\">aliases</span> <span class=\"o\">=</span> <span class=\"n\">tup</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">tup</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">3</span> <span class=\"k\">else</span> <span class=\"p\">[]</span>\n            <span class=\"k\">if</span> <span class=\"n\">e</span> <span class=\"o\">==</span> <span class=\"n\">funcname</span> <span class=\"ow\">or</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">aliases</span><span class=\"p\">:</span>\n                <span class=\"n\">module</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">import_modname</span><span class=\"p\">(</span><span class=\"n\">modname</span><span class=\"p\">)</span>\n                <span class=\"n\">func</span> <span class=\"o\">=</span> <span class=\"n\">module</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"p\">[</span><span class=\"n\">funcname</span><span class=\"p\">]</span>\n                <span class=\"k\">return</span> <span class=\"n\">func</span>\n        <span class=\"c1\"># hack in --tf magic</span>\n        <span class=\"n\">func</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">find_testfunc</span><span class=\"p\">(</span><span class=\"s1\">&#39;ibeis&#39;</span><span class=\"p\">,</span> <span class=\"n\">funcname</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">func</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">build_commandline</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">=</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Equivalent command line version of this func</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">ibeis.dev</span>\n        <span class=\"n\">valid_e_flags</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">([[</span><span class=\"n\">tup</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]]</span> <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">tup</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span> <span class=\"k\">else</span> <span class=\"p\">[</span><span class=\"n\">tup</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]]</span> <span class=\"o\">+</span> <span class=\"n\">tup</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n                                    <span class=\"k\">for</span> <span class=\"n\">tup</span> <span class=\"ow\">in</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">dev</span><span class=\"o\">.</span><span class=\"n\">REGISTERED_DOCTEST_EXPERIMENTS</span><span class=\"p\">])</span>\n        <span class=\"k\">if</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">valid_e_flags</span><span class=\"p\">:</span>\n            <span class=\"n\">epref</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;-e&#39;</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># hack to use tf</span>\n            <span class=\"n\">epref</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;--tf&#39;</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">dbdir</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">db_flag</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;--dbdir&#39;</span>\n            <span class=\"n\">db_value</span> <span class=\"o\">=</span> <span class=\"n\">dbdir</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">db_flag</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;--db&#39;</span>\n            <span class=\"n\">db_value</span> <span class=\"o\">=</span> <span class=\"n\">db</span>\n        <span class=\"n\">command_parts</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;ibeis&#39;</span><span class=\"p\">,</span>\n                         <span class=\"n\">epref</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span>\n                         <span class=\"n\">db_flag</span><span class=\"p\">,</span> <span class=\"n\">db_value</span><span class=\"p\">,</span>\n                         <span class=\"s1\">&#39;-a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39; &#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">&#39;(&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;\\(&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">&#39;)&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;\\)&#39;</span><span class=\"p\">),</span>\n                         <span class=\"s1\">&#39;-t&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39; &#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">),</span>\n                        <span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">qaid_override</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">command_parts</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">([</span><span class=\"s1\">&#39;--qaid=&#39;</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;,&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">qaid_override</span><span class=\"p\">))])</span>\n        <span class=\"k\">if</span> <span class=\"n\">daid_override</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">command_parts</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">([</span><span class=\"s1\">&#39;--daid-override=&#39;</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;,&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">daid_override</span><span class=\"p\">))])</span>\n        <span class=\"k\">if</span> <span class=\"s1\">&#39;disttype&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">kwargs</span><span class=\"p\">:</span>\n            <span class=\"n\">command_parts</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">([</span><span class=\"s1\">&#39;--disttype=&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;,&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s1\">&#39;disttype&#39;</span><span class=\"p\">]))])</span>\n\n        <span class=\"c1\"># hack parse out important args that were on command line</span>\n        <span class=\"k\">if</span> <span class=\"s1\">&#39;f&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">kwargs</span><span class=\"p\">:</span>\n            <span class=\"n\">command_parts</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">([</span><span class=\"s1\">&#39;-f&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39; &#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s1\">&#39;f&#39;</span><span class=\"p\">])])</span>\n        <span class=\"k\">if</span> <span class=\"s1\">&#39;test_cfgx_slice&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">kwargs</span><span class=\"p\">:</span>\n            <span class=\"c1\"># very hacky, much more than checking for f</span>\n            <span class=\"n\">slice_</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s1\">&#39;test_cfgx_slice&#39;</span><span class=\"p\">]</span>\n            <span class=\"n\">slice_attrs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">slice_</span><span class=\"p\">,</span> <span class=\"n\">attr</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">)</span>\n                           <span class=\"k\">for</span> <span class=\"n\">attr</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s1\">&#39;start&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;stop&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;step&#39;</span><span class=\"p\">]]</span>\n            <span class=\"n\">slice_attrs</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">replace_nones</span><span class=\"p\">(</span><span class=\"n\">slice_attrs</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">slicestr</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;:&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">slice_attrs</span><span class=\"p\">))</span>\n            <span class=\"n\">command_parts</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">([</span><span class=\"s1\">&#39;--test_cfgx_slice&#39;</span><span class=\"p\">,</span> <span class=\"n\">slicestr</span><span class=\"p\">])</span>\n\n        <span class=\"n\">command_parts</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">([</span><span class=\"s1\">&#39;--show&#39;</span><span class=\"p\">])</span>\n\n        <span class=\"n\">command_line_str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39; &#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">command_parts</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Warning, not always equivalent</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Equivalent Command Line:&#39;</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">command_line_str</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">command_line_str</span>\n    <span class=\"n\">command_line_str</span> <span class=\"o\">=</span> <span class=\"n\">build_commandline</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n\n    <span class=\"k\">def</span> <span class=\"nf\">draw_cases</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">e_</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;draw_cases&#39;</span>\n        <span class=\"n\">func</span> <span class=\"o\">=</span> <span class=\"n\">find_expt_func</span><span class=\"p\">(</span><span class=\"n\">e_</span><span class=\"p\">)</span>\n        <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">ibs</span>\n        <span class=\"n\">build_commandline</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">=</span><span class=\"n\">e_</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"n\">lazy_func</span> <span class=\"o\">=</span> <span class=\"n\">functools</span><span class=\"o\">.</span><span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">testres</span><span class=\"p\">,</span> <span class=\"n\">show_in_notebook</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">lazy_func</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">draw_taghist</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">e_</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;taghist&#39;</span>\n        <span class=\"n\">func</span> <span class=\"o\">=</span> <span class=\"n\">find_expt_func</span><span class=\"p\">(</span><span class=\"n\">e_</span><span class=\"p\">)</span>\n        <span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">ibs</span>\n        <span class=\"n\">build_commandline</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">=</span><span class=\"n\">e_</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"n\">lazy_func</span> <span class=\"o\">=</span> <span class=\"n\">functools</span><span class=\"o\">.</span><span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">testres</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">lazy_func</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">execute_test</span><span class=\"p\">():</span>\n        <span class=\"n\">func</span> <span class=\"o\">=</span> <span class=\"n\">find_expt_func</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"n\">func</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">&#39;unknown experiment e=</span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,)</span>\n\n        <span class=\"n\">argspec</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_func_argspec</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">argspec</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">)</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">2</span> <span class=\"ow\">and</span> <span class=\"n\">argspec</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;ibs&#39;</span> <span class=\"ow\">and</span> <span class=\"n\">argspec</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;testres&#39;</span><span class=\"p\">:</span>\n            <span class=\"c1\"># most experiments need a testres</span>\n            <span class=\"n\">expts_kw</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">defaultdb</span><span class=\"o\">=</span><span class=\"n\">db</span><span class=\"p\">,</span> <span class=\"n\">dbdir</span><span class=\"o\">=</span><span class=\"n\">dbdir</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"o\">=</span><span class=\"n\">t</span><span class=\"p\">,</span>\n                            <span class=\"n\">qaid_override</span><span class=\"o\">=</span><span class=\"n\">qaid_override</span><span class=\"p\">,</span>\n                            <span class=\"n\">daid_override</span><span class=\"o\">=</span><span class=\"n\">daid_override</span><span class=\"p\">,</span>\n                            <span class=\"n\">initial_aids</span><span class=\"o\">=</span><span class=\"n\">initial_aids</span>\n                           <span class=\"p\">)</span>\n            <span class=\"n\">testdata_expts_func</span> <span class=\"o\">=</span> <span class=\"n\">functools</span><span class=\"o\">.</span><span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"n\">main_helpers</span><span class=\"o\">.</span><span class=\"n\">testdata_expts</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">expts_kw</span><span class=\"p\">)</span>\n\n            <span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">testres</span> <span class=\"o\">=</span> <span class=\"n\">testdata_expts_func</span><span class=\"p\">()</span>\n            <span class=\"c1\"># Build the requested drawing funciton</span>\n            <span class=\"n\">draw_func</span> <span class=\"o\">=</span> <span class=\"n\">functools</span><span class=\"o\">.</span><span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">testres</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n            <span class=\"n\">testres</span><span class=\"o\">.</span><span class=\"n\">draw_func</span> <span class=\"o\">=</span> <span class=\"n\">draw_func</span>\n            <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">inject_func_as_method</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">,</span> <span class=\"n\">draw_cases</span><span class=\"p\">)</span>\n            <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">inject_func_as_method</span><span class=\"p\">(</span><span class=\"n\">testres</span><span class=\"p\">,</span> <span class=\"n\">draw_taghist</span><span class=\"p\">)</span>\n            <span class=\"c1\">#testres.draw_cases = draw_cases</span>\n            <span class=\"k\">return</span> <span class=\"n\">testres</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">AssertionError</span><span class=\"p\">(</span><span class=\"s1\">&#39;Unknown type of function for experiment&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">lazy</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">execute_test</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">testres</span> <span class=\"o\">=</span> <span class=\"n\">execute_test</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">testres</span></div>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">testdata_expts</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">testres</span> <span class=\"o\">=</span> <span class=\"n\">main_helpers</span><span class=\"o\">.</span><span class=\"n\">testdata_expts</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">testres</span>\n\n<span class=\"c1\">#import_subs()</span>\n<span class=\"c1\">#from ibeis import gui</span>\n<span class=\"c1\">#from ibeis import algo</span>\n<span class=\"c1\">#from ibeis import templates</span>\n<span class=\"c1\">#from ibeis import viz</span>\n<span class=\"c1\">#from ibeis import web</span>\n\n\n<span class=\"c1\">#class _VizProxy(object):</span>\n<span class=\"c1\">#    def __init__(self):</span>\n<span class=\"c1\">#        pass</span>\n\n<span class=\"c1\">#    def getattr(self, key):</span>\n<span class=\"c1\">#        import ibeis.viz as viz</span>\n<span class=\"c1\">#        return getattr(viz, key)</span>\n\n<span class=\"c1\">#    def setattr(self, key, val):</span>\n<span class=\"c1\">#        import ibeis.viz as viz</span>\n<span class=\"c1\">#        return getattr(viz, key, val)</span>\n\n\n<span class=\"c1\">#viz = _VizProxy</span>\n<span class=\"c1\">#import apipkg</span>\n<span class=\"c1\">#apipkg.initpkg(__name__, {</span>\n<span class=\"c1\">#    &#39;viz&#39;: {</span>\n<span class=\"c1\">#        &#39;clone&#39;: &quot;ibeis.viz&quot;,</span>\n<span class=\"c1\">#    }</span>\n<span class=\"c1\">#}</span>\n<span class=\"c1\">#)</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.init</span> <span class=\"k\">import</span> <span class=\"n\">main_helpers</span>\n<span class=\"n\">testdata_cm</span> <span class=\"o\">=</span> <span class=\"n\">main_helpers</span><span class=\"o\">.</span><span class=\"n\">testdata_cm</span>\n<span class=\"n\">testdata_cmlist</span> <span class=\"o\">=</span> <span class=\"n\">main_helpers</span><span class=\"o\">.</span><span class=\"n\">testdata_cmlist</span>\n<span class=\"n\">testdata_qreq_</span> <span class=\"o\">=</span> <span class=\"n\">main_helpers</span><span class=\"o\">.</span><span class=\"n\">testdata_qreq_</span>\n<span class=\"n\">testdata_pipecfg</span> <span class=\"o\">=</span> <span class=\"n\">main_helpers</span><span class=\"o\">.</span><span class=\"n\">testdata_pipecfg</span>\n<span class=\"n\">testdata_filtcfg</span> <span class=\"o\">=</span> <span class=\"n\">main_helpers</span><span class=\"o\">.</span><span class=\"n\">testdata_filtcfg</span>\n<span class=\"n\">testdata_expts</span> <span class=\"o\">=</span> <span class=\"n\">main_helpers</span><span class=\"o\">.</span><span class=\"n\">testdata_expts</span>\n<span class=\"n\">testdata_expanded_aids</span> <span class=\"o\">=</span> <span class=\"n\">main_helpers</span><span class=\"o\">.</span><span class=\"n\">testdata_expanded_aids</span>\n<span class=\"n\">testdata_aids</span> <span class=\"o\">=</span> <span class=\"n\">main_helpers</span><span class=\"o\">.</span><span class=\"n\">testdata_aids</span>\n\n<span class=\"c1\"># Utool generated init makeinit.py</span>\n<span class=\"nb\">print</span><span class=\"p\">,</span> <span class=\"n\">rrr</span><span class=\"p\">,</span> <span class=\"n\">profile</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">inject2</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"reload_subs\"><a class=\"viewcode-back\" href=\"../../ibeis/#ibeis.reload_subs\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">reload_subs</span><span class=\"p\">(</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; Reloads ibeis and submodules &quot;&quot;&quot;</span>\n    <span class=\"n\">import_subs</span><span class=\"p\">()</span>\n    <span class=\"n\">rrr</span><span class=\"p\">(</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">verbose</span><span class=\"p\">)</span>\n    <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">constants</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rrr&#39;</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">)(</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">verbose</span><span class=\"p\">)</span>\n    <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">main_module</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rrr&#39;</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">)(</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">verbose</span><span class=\"p\">)</span>\n    <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rrr&#39;</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">)(</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">verbose</span><span class=\"p\">)</span>\n    <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"s1\">&#39;reload_subs&#39;</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">)(</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">verbose</span><span class=\"p\">)</span>\n    <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">dbio</span><span class=\"p\">,</span> <span class=\"s1\">&#39;reload_subs&#39;</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">)(</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">verbose</span><span class=\"p\">)</span>\n    <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">algo</span><span class=\"p\">,</span> <span class=\"s1\">&#39;reload_subs&#39;</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">)(</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">verbose</span><span class=\"p\">)</span>\n    <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">control</span><span class=\"p\">,</span> <span class=\"s1\">&#39;reload_subs&#39;</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">)(</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">verbose</span><span class=\"p\">)</span>\n    <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">viz</span><span class=\"p\">,</span> <span class=\"s1\">&#39;reload_subs&#39;</span><span class=\"p\">,</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">)()</span>\n\n    <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">gui</span><span class=\"p\">,</span> <span class=\"s1\">&#39;reload_subs&#39;</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">)(</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">verbose</span><span class=\"p\">)</span>\n    <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">algo</span><span class=\"p\">,</span> <span class=\"s1\">&#39;reload_subs&#39;</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">)(</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">verbose</span><span class=\"p\">)</span>\n    <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">viz</span><span class=\"p\">,</span> <span class=\"s1\">&#39;reload_subs&#39;</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">)(</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">verbose</span><span class=\"p\">)</span>\n    <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">web</span><span class=\"p\">,</span> <span class=\"s1\">&#39;reload_subs&#39;</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">)(</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">verbose</span><span class=\"p\">)</span>\n\n    <span class=\"n\">rrr</span><span class=\"p\">(</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">verbose</span><span class=\"p\">)</span></div>\n<span class=\"n\">rrrr</span> <span class=\"o\">=</span> <span class=\"n\">reload_subs</span>\n\n\n<span class=\"kn\">from</span> <span class=\"nn\">ibeis.control.DB_SCHEMA_CURRENT</span> <span class=\"k\">import</span> <span class=\"n\">VERSION_CURRENT</span>\n<span class=\"c1\"># __version__ = VERSION_CURRENT</span>\n<span class=\"n\">__version__</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;1.8.1&#39;</span>\n\n<span class=\"c1\"># __version__ = &#39;1.6.0&#39;</span>\n<span class=\"c1\"># if __version__ != VERSION_CURRENT:</span>\n<span class=\"c1\">#     raise AssertionError(</span>\n<span class=\"c1\">#         &#39;need to update version in __init__ file from %r to %r so setup.py can work nicely&#39; % (</span>\n<span class=\"c1\">#             __version__, VERSION_CURRENT))</span>\n\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">Regen Command:</span>\n<span class=\"sd\">    Kinda have to work with the output of these. This module is hard to</span>\n<span class=\"sd\">    autogenerate correctly.</span>\n\n<span class=\"sd\">    cd /home/joncrall/code/ibeis/ibeis/other</span>\n<span class=\"sd\">    makeinit.py -x web viz tests gui</span>\n<span class=\"sd\">    makeinit.py -x constants params main_module other control dbio tests</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m ibeis</span>\n<span class=\"sd\">        python -m ibeis --allexamples</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">multiprocessing</span>\n    <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">freeze_support</span><span class=\"p\">()</span>  <span class=\"c1\"># for win32</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>  <span class=\"c1\"># NOQA</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">doctest_funcs</span><span class=\"p\">()</span>\n</pre></div>", "current_page_name": "_modules/ibeis", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}