{"parents": [{"link": "../../", "title": "Module code"}], "title": "utool.util_class", "body": "<h1>Source code for utool.util_class</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">In this module:</span>\n<span class=\"sd\">    * a metaclass allowing for reloading of single class instances</span>\n<span class=\"sd\">    * functions to autoinject methods into a class upon instance creation.</span>\n<span class=\"sd\">    * A wrapper class allowing an object&#39;s properties to be used as kwargs</span>\n<span class=\"sd\">    * a metaclass to forward properties to another class</span>\n\n<span class=\"sd\">    ReloadingMetaclass</span>\n<span class=\"sd\">    KwargsWrapper</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"k\">import</span> <span class=\"n\">absolute_import</span><span class=\"p\">,</span> <span class=\"n\">division</span><span class=\"p\">,</span> <span class=\"n\">print_function</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">six</span>\n<span class=\"kn\">import</span> <span class=\"nn\">types</span>\n<span class=\"kn\">import</span> <span class=\"nn\">functools</span>\n<span class=\"kn\">import</span> <span class=\"nn\">collections</span>\n<span class=\"kn\">import</span> <span class=\"nn\">operator</span> <span class=\"k\">as</span> <span class=\"nn\">op</span>\n<span class=\"kn\">from</span> <span class=\"nn\">collections</span> <span class=\"k\">import</span> <span class=\"n\">defaultdict</span>\n<span class=\"kn\">from</span> <span class=\"nn\">utool</span> <span class=\"k\">import</span> <span class=\"n\">util_inject</span>\n<span class=\"kn\">from</span> <span class=\"nn\">utool</span> <span class=\"k\">import</span> <span class=\"n\">util_set</span>\n<span class=\"kn\">from</span> <span class=\"nn\">utool</span> <span class=\"k\">import</span> <span class=\"n\">util_arg</span>\n<span class=\"kn\">from</span> <span class=\"nn\">utool._internal.meta_util_six</span> <span class=\"k\">import</span> <span class=\"n\">get_funcname</span><span class=\"p\">,</span> <span class=\"n\">get_funcglobals</span>\n<span class=\"nb\">print</span><span class=\"p\">,</span> <span class=\"n\">rrr</span><span class=\"p\">,</span> <span class=\"n\">profile</span> <span class=\"o\">=</span> <span class=\"n\">util_inject</span><span class=\"o\">.</span><span class=\"n\">inject2</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Registers which classes have which attributes</span>\n<span class=\"c1\"># FIXME: this might cause memory leaks</span>\n<span class=\"c1\"># FIXME: this does cause weird reimport behavior</span>\n<span class=\"n\">__CLASSTYPE_ATTRIBUTES__</span> <span class=\"o\">=</span> <span class=\"n\">defaultdict</span><span class=\"p\">(</span><span class=\"n\">util_set</span><span class=\"o\">.</span><span class=\"n\">oset</span><span class=\"p\">)</span>\n<span class=\"n\">__CLASSTYPE_POSTINJECT_FUNCS__</span> <span class=\"o\">=</span> <span class=\"n\">defaultdict</span><span class=\"p\">(</span><span class=\"n\">util_set</span><span class=\"o\">.</span><span class=\"n\">oset</span><span class=\"p\">)</span>\n<span class=\"n\">__CLASSNAME_CLASSKEY_REGISTER__</span> <span class=\"o\">=</span> <span class=\"n\">defaultdict</span><span class=\"p\">(</span><span class=\"n\">util_set</span><span class=\"o\">.</span><span class=\"n\">oset</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\">#_rrr = rrr</span>\n<span class=\"c1\">#def rrr(verbose=True):</span>\n<span class=\"c1\">#    &quot;&quot;&quot; keep registered functions through reloads ? &quot;&quot;&quot;</span>\n<span class=\"c1\">#    global __CLASSTYPE_ATTRIBUTES__</span>\n<span class=\"c1\">#    global __CLASSTYPE_POSTINJECT_FUNCS__</span>\n<span class=\"c1\">#    cta = __CLASSTYPE_ATTRIBUTES__.copy()</span>\n<span class=\"c1\">#    ctpif = __CLASSTYPE_POSTINJECT_FUNCS__.copy()</span>\n<span class=\"c1\">#    rrr_(verbose=verbose)</span>\n<span class=\"c1\">#    __CLASSTYPE_ATTRIBUTES__ = cta</span>\n<span class=\"c1\">#    __CLASSTYPE_POSTINJECT_FUNCS__ = ctpif</span>\n\n\n<span class=\"n\">QUIET_CLASS</span> <span class=\"o\">=</span> <span class=\"n\">util_arg</span><span class=\"o\">.</span><span class=\"n\">get_argflag</span><span class=\"p\">((</span><span class=\"s1\">&#39;--quiet-class&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;--quietclass&#39;</span><span class=\"p\">))</span>\n<span class=\"n\">VERBOSE_CLASS</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"n\">util_arg</span><span class=\"o\">.</span><span class=\"n\">get_argflag</span><span class=\"p\">((</span><span class=\"s1\">&#39;--verbose-class&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;--verbclass&#39;</span><span class=\"p\">))</span> <span class=\"ow\">or</span>\n    <span class=\"p\">(</span><span class=\"ow\">not</span> <span class=\"n\">QUIET_CLASS</span> <span class=\"ow\">and</span> <span class=\"n\">util_arg</span><span class=\"o\">.</span><span class=\"n\">VERYVERBOSE</span><span class=\"p\">))</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">inject_instance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">classkey</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">allow_override</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                    <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">VERBOSE_CLASS</span><span class=\"p\">,</span> <span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Injects an instance (self) of type (classkey)</span>\n<span class=\"sd\">    with all functions registered to (classkey)</span>\n\n<span class=\"sd\">    call this in the __init__ class function</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        self: the class instance</span>\n<span class=\"sd\">        classkey: key for a class, preferably the class type itself, but it</span>\n<span class=\"sd\">            doesnt have to be</span>\n\n<span class=\"sd\">    SeeAlso:</span>\n<span class=\"sd\">        make_class_method_decorator</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; # DOCTEST_DISABLE</span>\n<span class=\"sd\">        &gt;&gt;&gt; utool.make_class_method_decorator(InvertedIndex)(smk_debug.invindex_dbgstr)</span>\n<span class=\"sd\">        &gt;&gt;&gt; utool.inject_instance(invindex)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n    <span class=\"k\">if</span> <span class=\"n\">verbose</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[util_class] begin inject_instance&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">classkey</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Probably should depricate this block of code</span>\n            <span class=\"c1\"># It tries to do too much</span>\n            <span class=\"n\">classkey</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span>\n            <span class=\"k\">if</span> <span class=\"n\">classkey</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;ibeis.gui.models_and_views.IBEISTableView&#39;</span><span class=\"p\">:</span>\n                <span class=\"c1\"># HACK HACK HACK</span>\n                <span class=\"c1\"># from guitool.__PYQT__ import QtGui  # NOQA</span>\n                <span class=\"kn\">from</span> <span class=\"nn\">guitool.__PYQT__</span> <span class=\"k\">import</span> <span class=\"n\">QtWidgets</span>  <span class=\"c1\"># NOQA</span>\n                <span class=\"n\">classkey</span> <span class=\"o\">=</span> <span class=\"n\">QtWidgets</span><span class=\"o\">.</span><span class=\"n\">QAbstractItemView</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">__CLASSTYPE_ATTRIBUTES__</span><span class=\"p\">[</span><span class=\"n\">classkey</span><span class=\"p\">])</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[utool] Warning: no classes of type </span><span class=\"si\">%r</span><span class=\"s1\"> are registered&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">classkey</span><span class=\"p\">,))</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[utool] type(self)=</span><span class=\"si\">%r</span><span class=\"s1\">, self=</span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">),</span> <span class=\"bp\">self</span><span class=\"p\">)),</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[utool] Checking to see if anybody else was registered...&#39;</span><span class=\"p\">)</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[utool] __CLASSTYPE_ATTRIBUTES__ = &#39;</span> <span class=\"o\">+</span>\n                      <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr4</span><span class=\"p\">(</span><span class=\"n\">__CLASSTYPE_ATTRIBUTES__</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()))</span>\n                <span class=\"k\">for</span> <span class=\"n\">classtype_</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"n\">six</span><span class=\"o\">.</span><span class=\"n\">iteritems</span><span class=\"p\">(</span><span class=\"n\">__CLASSTYPE_ATTRIBUTES__</span><span class=\"p\">):</span>\n                    <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">classtype_</span><span class=\"p\">)</span>\n                    <span class=\"n\">classkey</span> <span class=\"o\">=</span> <span class=\"n\">classtype_</span>\n                    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[utool] Warning: using subclass=</span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">classtype_</span><span class=\"p\">,))</span>\n                    <span class=\"k\">break</span>\n        <span class=\"n\">func_list</span> <span class=\"o\">=</span> <span class=\"n\">__CLASSTYPE_ATTRIBUTES__</span><span class=\"p\">[</span><span class=\"n\">classkey</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">verbose</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[util_class] injecting </span><span class=\"si\">%d</span><span class=\"s1\"> methods</span><span class=\"se\">\\n</span><span class=\"s1\">   with classkey=</span><span class=\"si\">%r</span><span class=\"se\">\\n</span><span class=\"s1\">   into </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span>\n                  <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">func_list</span><span class=\"p\">),</span> <span class=\"n\">classkey</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">,))</span>\n        <span class=\"k\">for</span> <span class=\"n\">func</span> <span class=\"ow\">in</span> <span class=\"n\">func_list</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">VERBOSE_CLASS</span><span class=\"p\">:</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[util_class] * injecting </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">,))</span>\n            <span class=\"n\">method_name</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n            <span class=\"c1\"># Allow user to register tuples for aliases</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">):</span>\n                <span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"n\">method_name</span> <span class=\"o\">=</span> <span class=\"n\">func</span>\n            <span class=\"n\">inject_func_as_method</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"n\">method_name</span><span class=\"o\">=</span><span class=\"n\">method_name</span><span class=\"p\">,</span>\n                                  <span class=\"n\">allow_override</span><span class=\"o\">=</span><span class=\"n\">allow_override</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">verbose</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">printex</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ISSUE WHEN INJECTING </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">classkey</span><span class=\"p\">,),</span>\n                      <span class=\"n\">iswarning</span><span class=\"o\">=</span><span class=\"ow\">not</span> <span class=\"n\">strict</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">strict</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">postinject_instance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">classkey</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">VERBOSE_CLASS</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">verbose</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[util_class] Running postinject functions on </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,))</span>\n    <span class=\"k\">for</span> <span class=\"n\">func</span> <span class=\"ow\">in</span> <span class=\"n\">__CLASSTYPE_POSTINJECT_FUNCS__</span><span class=\"p\">[</span><span class=\"n\">classkey</span><span class=\"p\">]:</span>\n        <span class=\"n\">func</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">verbose</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[util_class] Finished injecting instance self=</span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,))</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">inject_all_external_modules</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">classname</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                                <span class=\"n\">allow_override</span><span class=\"o\">=</span><span class=\"s1\">&#39;override+warn&#39;</span><span class=\"p\">,</span>\n                                <span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    dynamically injects registered module methods into a class instance</span>\n\n<span class=\"sd\">    FIXME: naming convention and use this in all places where this clas is used</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\">#import utool as ut</span>\n    <span class=\"k\">if</span> <span class=\"n\">classname</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">classname</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span>\n    <span class=\"c1\">#import utool as ut</span>\n    <span class=\"c1\">#ut.embed()</span>\n\n    <span class=\"n\">NEW</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"k\">if</span> <span class=\"n\">NEW</span><span class=\"p\">:</span>\n        <span class=\"n\">classkey_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">key</span> <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">__CLASSTYPE_ATTRIBUTES__</span>\n                         <span class=\"k\">if</span> <span class=\"n\">key</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">classname</span><span class=\"p\">]</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">injected_modules</span> <span class=\"o\">=</span> <span class=\"n\">get_injected_modules</span><span class=\"p\">(</span><span class=\"n\">classname</span><span class=\"p\">)</span>\n        <span class=\"c1\"># the variable must be named CLASS_INJECT_KEY</span>\n        <span class=\"c1\"># and only one class can be specified per module.</span>\n        <span class=\"n\">classkey_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">CLASS_INJECT_KEY</span>\n                         <span class=\"k\">for</span> <span class=\"n\">module</span> <span class=\"ow\">in</span> <span class=\"n\">injected_modules</span><span class=\"p\">]</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">classkey</span> <span class=\"ow\">in</span> <span class=\"n\">classkey_list</span><span class=\"p\">:</span>\n        <span class=\"n\">inject_instance</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">classkey</span><span class=\"o\">=</span><span class=\"n\">classkey</span><span class=\"p\">,</span>\n            <span class=\"n\">allow_override</span><span class=\"o\">=</span><span class=\"n\">allow_override</span><span class=\"p\">,</span> <span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">classkey</span> <span class=\"ow\">in</span> <span class=\"n\">classkey_list</span><span class=\"p\">:</span>\n        <span class=\"n\">postinject_instance</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">classkey</span><span class=\"o\">=</span><span class=\"n\">classkey</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">reload_injected_modules</span><span class=\"p\">(</span><span class=\"n\">classname</span><span class=\"p\">):</span>\n    <span class=\"n\">injected_modules</span> <span class=\"o\">=</span> <span class=\"n\">get_injected_modules</span><span class=\"p\">(</span><span class=\"n\">classname</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">module</span> <span class=\"ow\">in</span> <span class=\"n\">injected_modules</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rrr&#39;</span><span class=\"p\">):</span>\n            <span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">rrr</span><span class=\"p\">()</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"kn\">import</span> <span class=\"nn\">imp</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;rrr not defined in module=</span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">module</span><span class=\"p\">,))</span>\n            <span class=\"n\">imp</span><span class=\"o\">.</span><span class=\"n\">reload</span><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">get_injected_modules</span><span class=\"p\">(</span><span class=\"n\">classname</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from utool.util_class import __CLASSNAME_CLASSKEY_REGISTER__  # NOQA</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">modname_list</span> <span class=\"o\">=</span> <span class=\"n\">__CLASSNAME_CLASSKEY_REGISTER__</span><span class=\"p\">[</span><span class=\"n\">classname</span><span class=\"p\">]</span>\n\n    <span class=\"n\">injected_modules</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">modstr</span> <span class=\"ow\">in</span> <span class=\"n\">modname_list</span><span class=\"p\">:</span>\n        <span class=\"n\">parts</span> <span class=\"o\">=</span> <span class=\"n\">modstr</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">pkgname</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;.&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">parts</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n        <span class=\"n\">modname</span> <span class=\"o\">=</span> <span class=\"n\">parts</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">exec</span><span class=\"p\">(</span><span class=\"s1\">&#39;from </span><span class=\"si\">%s</span><span class=\"s1\"> import </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">pkgname</span><span class=\"p\">,</span> <span class=\"n\">modname</span><span class=\"p\">,</span> <span class=\"p\">),</span> <span class=\"nb\">globals</span><span class=\"p\">(),</span> <span class=\"nb\">locals</span><span class=\"p\">())</span>\n            <span class=\"n\">module</span> <span class=\"o\">=</span> <span class=\"nb\">eval</span><span class=\"p\">(</span><span class=\"n\">modname</span><span class=\"p\">)</span>\n            <span class=\"n\">injected_modules</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">ImportError</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n            <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">printex</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Cannot load package=</span><span class=\"si\">%r</span><span class=\"s1\">, module=</span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">pkgname</span><span class=\"p\">,</span> <span class=\"n\">modname</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">injected_modules</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">autogen_import_list</span><span class=\"p\">(</span><span class=\"n\">classname</span><span class=\"p\">,</span> <span class=\"n\">conditional_imports</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n    <span class=\"c1\">#ut.embed()</span>\n    <span class=\"c1\">#line_list = []</span>\n    <span class=\"n\">line_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;import sys  # NOQA&#39;</span><span class=\"p\">]</span>\n    <span class=\"k\">for</span> <span class=\"n\">modname</span> <span class=\"ow\">in</span> <span class=\"n\">__CLASSNAME_CLASSKEY_REGISTER__</span><span class=\"p\">[</span><span class=\"n\">classname</span><span class=\"p\">]:</span>\n        <span class=\"c1\"># &lt;super hacky&gt;</span>\n        <span class=\"n\">condition</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">conditional_imports</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">modname</span> <span class=\"o\">==</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span>\n                <span class=\"n\">condition</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"c1\"># &lt;/super hacky&gt;</span>\n        <span class=\"n\">parts</span> <span class=\"o\">=</span> <span class=\"n\">modname</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">frompart</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;.&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">parts</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n        <span class=\"n\">imppart</span> <span class=\"o\">=</span> <span class=\"n\">parts</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"c1\">#line = &#39;from %s import %s  # NOQA&#39; % (frompart, imppart)</span>\n        <span class=\"k\">if</span> <span class=\"n\">condition</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">line</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;from </span><span class=\"si\">%s</span><span class=\"s1\"> import </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">frompart</span><span class=\"p\">,</span> <span class=\"n\">imppart</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">line</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">codeblock</span><span class=\"p\">(</span>\n                <span class=\"sd\">&#39;&#39;&#39;</span>\n<span class=\"sd\">                if not ut.get_argflag({condition}) or &#39;{frompart}&#39; in sys.modules:</span>\n<span class=\"sd\">                    from {frompart} import {imppart}</span>\n<span class=\"sd\">                &#39;&#39;&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">condition</span><span class=\"o\">=</span><span class=\"n\">condition</span><span class=\"p\">,</span> <span class=\"n\">frompart</span><span class=\"o\">=</span><span class=\"n\">frompart</span><span class=\"p\">,</span>\n                            <span class=\"n\">imppart</span><span class=\"o\">=</span><span class=\"n\">imppart</span><span class=\"p\">)</span>\n        <span class=\"n\">line_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span>\n    <span class=\"n\">src</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">line_list</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">src</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">autogen_explicit_injectable_metaclass</span><span class=\"p\">(</span><span class=\"n\">classname</span><span class=\"p\">,</span> <span class=\"n\">regen_command</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                                          <span class=\"n\">conditional_imports</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        classname (?):</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        ?:</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m utool.util_class --exec-autogen_explicit_injectable_metaclass</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from utool.util_class import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; from utool.util_class import  __CLASSTYPE_ATTRIBUTES__  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis</span>\n<span class=\"sd\">        &gt;&gt;&gt; import ibeis.control.IBEISControl</span>\n<span class=\"sd\">        &gt;&gt;&gt; classname = ibeis.control.controller_inject.CONTROLLER_CLASSNAME</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = autogen_explicit_injectable_metaclass(classname)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n    <span class=\"n\">vals_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">make_redirect</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">):</span>\n        <span class=\"c1\"># PRESERVES ALL SIGNATURES WITH EXECS</span>\n        <span class=\"n\">src_fmt</span> <span class=\"o\">=</span> <span class=\"sa\">r</span><span class=\"s1\">&#39;&#39;&#39;</span>\n<span class=\"s1\">        def </span><span class=\"si\">{funcname}{defsig}</span><span class=\"s1\">:</span>\n<span class=\"s1\">            &quot;&quot;&quot; </span><span class=\"si\">{orig_docstr}</span><span class=\"s1\">&quot;&quot;&quot;</span>\n<span class=\"s1\">            return </span><span class=\"si\">{orig_funcname}{callsig}</span><span class=\"s1\"></span>\n<span class=\"s1\">        &#39;&#39;&#39;</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">utool._internal</span> <span class=\"k\">import</span> <span class=\"n\">meta_util_six</span>\n        <span class=\"n\">orig_docstr</span> <span class=\"o\">=</span> <span class=\"n\">meta_util_six</span><span class=\"o\">.</span><span class=\"n\">get_funcdoc</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)</span>\n        <span class=\"n\">funcname</span> <span class=\"o\">=</span> <span class=\"n\">meta_util_six</span><span class=\"o\">.</span><span class=\"n\">get_funcname</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)</span>\n        <span class=\"n\">orig_funcname</span> <span class=\"o\">=</span> <span class=\"n\">modname</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;.&#39;</span> <span class=\"o\">+</span> <span class=\"n\">funcname</span>\n        <span class=\"n\">orig_docstr</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span> <span class=\"k\">if</span> <span class=\"n\">orig_docstr</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"k\">else</span> <span class=\"n\">orig_docstr</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">textwrap</span>\n        <span class=\"c1\"># Put wrapped function into a scope</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">inspect</span>\n        <span class=\"n\">argspec</span> <span class=\"o\">=</span> <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">getargspec</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">varargs</span><span class=\"p\">,</span> <span class=\"n\">varkw</span><span class=\"p\">,</span> <span class=\"n\">defaults</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">argspec</span>\n        <span class=\"n\">defsig</span> <span class=\"o\">=</span> <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">formatargspec</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">argspec</span><span class=\"p\">)</span>\n        <span class=\"n\">callsig</span> <span class=\"o\">=</span> <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">formatargspec</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">argspec</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">])</span>\n        <span class=\"n\">src_fmtdict</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">funcname</span><span class=\"o\">=</span><span class=\"n\">funcname</span><span class=\"p\">,</span> <span class=\"n\">orig_funcname</span><span class=\"o\">=</span><span class=\"n\">orig_funcname</span><span class=\"p\">,</span>\n                           <span class=\"n\">defsig</span><span class=\"o\">=</span><span class=\"n\">defsig</span><span class=\"p\">,</span> <span class=\"n\">callsig</span><span class=\"o\">=</span><span class=\"n\">callsig</span><span class=\"p\">,</span>\n                           <span class=\"n\">orig_docstr</span><span class=\"o\">=</span><span class=\"n\">orig_docstr</span><span class=\"p\">)</span>\n        <span class=\"n\">src</span> <span class=\"o\">=</span> <span class=\"n\">textwrap</span><span class=\"o\">.</span><span class=\"n\">dedent</span><span class=\"p\">(</span><span class=\"n\">src_fmt</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">src_fmtdict</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">src</span>\n\n    <span class=\"n\">src_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">classkey</span><span class=\"p\">,</span> <span class=\"n\">vals</span> <span class=\"ow\">in</span> <span class=\"n\">__CLASSTYPE_ATTRIBUTES__</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n        <span class=\"n\">modname</span> <span class=\"o\">=</span> <span class=\"n\">classkey</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">classkey</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">classname</span><span class=\"p\">:</span>\n            <span class=\"n\">vals_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">vals</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">func</span> <span class=\"ow\">in</span> <span class=\"n\">vals</span><span class=\"p\">:</span>\n                <span class=\"n\">src</span> <span class=\"o\">=</span> <span class=\"n\">make_redirect</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)</span>\n                <span class=\"n\">src</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">indent</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"p\">)</span>\n                <span class=\"n\">src</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"n\">_</span><span class=\"o\">.</span><span class=\"n\">rstrip</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)])</span>\n                <span class=\"n\">src_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">regen_command</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">regen_command</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;FIXME None given&#39;</span>\n\n    <span class=\"n\">module_header</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">codeblock</span><span class=\"p\">(</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        # -*- coding: utf-8 -*-</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span> <span class=\"o\">+</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">TRIPLE_DOUBLE_QUOTE</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;&quot;&quot;</span>\n<span class=\"s2\">        Static file containing autogenerated functions for </span><span class=\"si\">{classname}</span><span class=\"s2\"></span>\n<span class=\"s2\">        Autogenerated on </span><span class=\"si\">{autogen_time}</span><span class=\"s2\"></span>\n\n<span class=\"s2\">        RegenCommand:</span>\n<span class=\"s2\">            </span><span class=\"si\">{regen_command}</span><span class=\"s2\"></span>\n<span class=\"s2\">        &quot;&quot;&quot;</span> <span class=\"o\">+</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">TRIPLE_DOUBLE_QUOTE</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;&quot;&quot;</span>\n\n<span class=\"s2\">        from __future__ import absolute_import, division, print_function</span>\n<span class=\"s2\">        import utool as ut</span>\n\n<span class=\"s2\">        &quot;&quot;&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n            <span class=\"n\">autogen_time</span><span class=\"o\">=</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_timestamp</span><span class=\"p\">(),</span>\n            <span class=\"n\">regen_command</span><span class=\"o\">=</span><span class=\"n\">regen_command</span><span class=\"p\">,</span>\n            <span class=\"n\">classname</span><span class=\"o\">=</span><span class=\"n\">classname</span><span class=\"p\">)</span>\n\n    <span class=\"n\">depends_module_block</span> <span class=\"o\">=</span> <span class=\"n\">autogen_import_list</span><span class=\"p\">(</span><span class=\"n\">classname</span><span class=\"p\">,</span> <span class=\"n\">conditional_imports</span><span class=\"p\">)</span>\n    <span class=\"n\">inject_statement_fmt</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s2\">&quot;print, rrr, profile = &quot;</span>\n                            <span class=\"s2\">&quot;ut.inject2(__name__, &#39;[autogen_explicit_inject_</span><span class=\"si\">{classname}</span><span class=\"s2\">]&#39;)&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">inject_statement</span> <span class=\"o\">=</span> <span class=\"n\">inject_statement_fmt</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">classname</span><span class=\"o\">=</span><span class=\"n\">classname</span><span class=\"p\">)</span>\n\n    <span class=\"n\">source_block_lines</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">module_header</span><span class=\"p\">,</span>\n        <span class=\"n\">depends_module_block</span><span class=\"p\">,</span>\n        <span class=\"n\">inject_statement</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;class ExplicitInject&#39;</span> <span class=\"o\">+</span> <span class=\"n\">classname</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;(object):&#39;</span><span class=\"p\">,</span>\n    <span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">src_list</span>\n    <span class=\"n\">source_block</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">source_block_lines</span><span class=\"p\">)</span>\n\n    <span class=\"n\">source_block</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">autoformat_pep8</span><span class=\"p\">(</span><span class=\"n\">source_block</span><span class=\"p\">,</span> <span class=\"n\">aggressive</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">source_block</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">make_class_method_decorator</span><span class=\"p\">(</span><span class=\"n\">classkey</span><span class=\"p\">,</span> <span class=\"n\">modname</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    register a class to be injectable</span>\n<span class=\"sd\">    classkey is a key that identifies the injected class</span>\n<span class=\"sd\">    REMEMBER to call inject_instance in __init__</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        classkey : the class to be injected into</span>\n<span class=\"sd\">        modname : the global __name__ of the module youa re injecting from</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        closure_decorate_class_method (func): decorator for injectable methods</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; import utool as ut</span>\n<span class=\"sd\">        &gt;&gt;&gt; class CheeseShop(object):</span>\n<span class=\"sd\">        ...     def __init__(self):</span>\n<span class=\"sd\">        ...         import utool as ut</span>\n<span class=\"sd\">        ...         ut.inject_all_external_modules(self)</span>\n<span class=\"sd\">        &gt;&gt;&gt; cheeseshop_method = ut.make_class_method_decorator(CheeseShop)</span>\n<span class=\"sd\">        &gt;&gt;&gt; shop1 = CheeseShop()</span>\n<span class=\"sd\">        &gt;&gt;&gt; assert not hasattr(shop1, &#39;has_cheese&#39;), &#39;have not injected yet&#39;</span>\n<span class=\"sd\">        &gt;&gt;&gt; @cheeseshop_method</span>\n<span class=\"sd\">        &gt;&gt;&gt; def has_cheese(self):</span>\n<span class=\"sd\">        &gt;&gt;&gt;     return False</span>\n<span class=\"sd\">        &gt;&gt;&gt; shop2 = CheeseShop()</span>\n<span class=\"sd\">        &gt;&gt;&gt; assert shop2.has_cheese() is False, &#39;external method not injected&#39;</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(&#39;Cheese shop does not have cheese. All is well.&#39;)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">global</span> <span class=\"n\">__APP_MODNAME_REGISTER__</span>\n    <span class=\"c1\">#if util_arg.VERBOSE or VERBOSE_CLASS:</span>\n    <span class=\"k\">if</span> <span class=\"n\">VERBOSE_CLASS</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[util_class] register via make_class_method_decorator classkey=</span><span class=\"si\">%r</span><span class=\"s1\">, modname=</span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span>\n              <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">classkey</span><span class=\"p\">,</span> <span class=\"n\">modname</span><span class=\"p\">))</span>\n    <span class=\"k\">if</span> <span class=\"n\">modname</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n        <span class=\"c1\"># skips reinjects into main</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;WARNING: cannot register classkey=</span><span class=\"si\">%r</span><span class=\"s1\"> functions as __main__&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">classkey</span><span class=\"p\">,))</span>\n        <span class=\"k\">return</span> <span class=\"k\">lambda</span> <span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">func</span>\n    <span class=\"c1\"># register that this module was injected into</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">classkey</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">):</span>\n        <span class=\"n\">classname</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">classkey</span>\n        <span class=\"n\">__CLASSNAME_CLASSKEY_REGISTER__</span><span class=\"p\">[</span><span class=\"n\">classname</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">modname</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">classkey</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"p\">):</span>\n        <span class=\"n\">classname</span> <span class=\"o\">=</span> <span class=\"n\">classkey</span><span class=\"o\">.</span><span class=\"vm\">__name__</span>\n        <span class=\"k\">if</span> <span class=\"n\">modname</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">assert</span> <span class=\"n\">modname</span> <span class=\"o\">==</span> <span class=\"n\">classkey</span><span class=\"o\">.</span><span class=\"vm\">__module__</span><span class=\"p\">,</span> <span class=\"p\">(</span>\n                <span class=\"s1\">&#39;modname=</span><span class=\"si\">%r</span><span class=\"s1\"> does not agree with __module__=</span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span>\n                    <span class=\"n\">modname</span><span class=\"p\">,</span> <span class=\"n\">classkey</span><span class=\"o\">.</span><span class=\"vm\">__module__</span><span class=\"p\">))</span>\n        <span class=\"n\">modname</span> <span class=\"o\">=</span> <span class=\"n\">classkey</span><span class=\"o\">.</span><span class=\"vm\">__module__</span>\n        <span class=\"c1\"># Convert to new classkey format</span>\n        <span class=\"n\">classkey</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">classname</span><span class=\"p\">,</span> <span class=\"n\">modname</span><span class=\"p\">)</span>\n        <span class=\"n\">__CLASSNAME_CLASSKEY_REGISTER__</span><span class=\"p\">[</span><span class=\"n\">classname</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">modname</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Warning not using classkey for </span><span class=\"si\">%r</span><span class=\"s1\"> </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">classkey</span><span class=\"p\">,</span> <span class=\"n\">modname</span><span class=\"p\">))</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">AssertionError</span><span class=\"p\">(</span><span class=\"s1\">&#39;classkey no longer supported. Use class_inject_key instead&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">closure_decorate_class_method</span> <span class=\"o\">=</span> <span class=\"n\">functools</span><span class=\"o\">.</span><span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"n\">decorate_class_method</span><span class=\"p\">,</span>\n                                                      <span class=\"n\">classkey</span><span class=\"o\">=</span><span class=\"n\">classkey</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">closure_decorate_class_method</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">make_class_postinject_decorator</span><span class=\"p\">(</span><span class=\"n\">classkey</span><span class=\"p\">,</span> <span class=\"n\">modname</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        classkey : the class to be injected into</span>\n<span class=\"sd\">        modname : the global __name__ of the module youa re injecting from</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        closure_decorate_postinject (func): decorator for injectable methods</span>\n\n<span class=\"sd\">    SeeAlso:</span>\n<span class=\"sd\">        make_class_method_decorator</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">util_arg</span><span class=\"o\">.</span><span class=\"n\">VERBOSE</span> <span class=\"ow\">or</span> <span class=\"n\">VERBOSE_CLASS</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[util_class] register class_postinject classkey=</span><span class=\"si\">%r</span><span class=\"s1\">, modname=</span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span>\n              <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">classkey</span><span class=\"p\">,</span> <span class=\"n\">modname</span><span class=\"p\">))</span>\n    <span class=\"k\">if</span> <span class=\"n\">modname</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;WARNING: cannot register class functions as __main__&#39;</span><span class=\"p\">)</span>\n        <span class=\"c1\"># skips reinjects into main</span>\n        <span class=\"k\">return</span> <span class=\"k\">lambda</span> <span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">func</span>\n    <span class=\"n\">closure_decorate_postinject</span> <span class=\"o\">=</span> <span class=\"n\">functools</span><span class=\"o\">.</span><span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"n\">decorate_postinject</span><span class=\"p\">,</span>\n                                                    <span class=\"n\">classkey</span><span class=\"o\">=</span><span class=\"n\">classkey</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">closure_decorate_postinject</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">decorate_class_method</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"n\">classkey</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">skipmain</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Will inject all decorated function as methods of classkey</span>\n\n<span class=\"sd\">    classkey is some identifying string, tuple, or object</span>\n\n<span class=\"sd\">    func can also be a tuple</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\">#import utool as ut</span>\n    <span class=\"k\">global</span> <span class=\"n\">__CLASSTYPE_ATTRIBUTES__</span>\n    <span class=\"k\">assert</span> <span class=\"n\">classkey</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">&#39;must specify classkey&#39;</span>\n    <span class=\"c1\">#if not (skipmain and ut.get_caller_modname() == &#39;__main__&#39;):</span>\n    <span class=\"n\">__CLASSTYPE_ATTRIBUTES__</span><span class=\"p\">[</span><span class=\"n\">classkey</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">func</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">decorate_postinject</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"n\">classkey</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">skipmain</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Will perform func with argument self after inject_instance is called on classkey</span>\n\n<span class=\"sd\">    classkey is some identifying string, tuple, or object</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\">#import utool as ut</span>\n    <span class=\"k\">global</span> <span class=\"n\">__CLASSTYPE_POSTINJECT_FUNCS__</span>\n    <span class=\"k\">assert</span> <span class=\"n\">classkey</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">&#39;must specify classkey&#39;</span>\n    <span class=\"c1\">#if not (skipmain and ut.get_caller_modname() == &#39;__main__&#39;):</span>\n    <span class=\"n\">__CLASSTYPE_POSTINJECT_FUNCS__</span><span class=\"p\">[</span><span class=\"n\">classkey</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">func</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">get_method_func</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"p\">):</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">method</span><span class=\"o\">.</span><span class=\"n\">im_func</span> <span class=\"k\">if</span> <span class=\"n\">six</span><span class=\"o\">.</span><span class=\"n\">PY2</span> <span class=\"k\">else</span> <span class=\"n\">method</span><span class=\"o\">.</span><span class=\"vm\">__func__</span>\n    <span class=\"k\">except</span> <span class=\"ne\">AttributeError</span><span class=\"p\">:</span>\n        <span class=\"c1\"># check if this is a method-wrapper type</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"nb\">all</span><span class=\"o\">.</span><span class=\"fm\">__call__</span><span class=\"p\">)):</span>\n            <span class=\"c1\"># in which case there is no underlying function</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>\n        <span class=\"k\">raise</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">inject_func_as_method</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"n\">method_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">class_</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                          <span class=\"n\">allow_override</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">allow_main</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                          <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">override</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">force</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; Injects a function into an object as a method</span>\n\n<span class=\"sd\">    Wraps func as a bound method of self. Then injects func into self</span>\n<span class=\"sd\">    It is preferable to use make_class_method_decorator and inject_instance</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">       self (object): class instance</span>\n<span class=\"sd\">       func : some function whos first arugment is a class instance</span>\n<span class=\"sd\">       method_name (str) : default=func.__name__, if specified renames the method</span>\n<span class=\"sd\">       class_ (type) : if func is an unbound method of this class</span>\n\n\n<span class=\"sd\">    References:</span>\n<span class=\"sd\">        http://stackoverflow.com/questions/1015307/python-bind-an-unbound-method</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">override</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"c1\"># TODO depcirate allow_override</span>\n        <span class=\"n\">allow_override</span> <span class=\"o\">=</span> <span class=\"n\">override</span>\n    <span class=\"k\">if</span> <span class=\"n\">method_name</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">method_name</span> <span class=\"o\">=</span> <span class=\"n\">get_funcname</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">force</span><span class=\"p\">:</span>\n        <span class=\"n\">allow_override</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"n\">allow_main</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"n\">old_method</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">method_name</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Bind function to the class instance</span>\n    <span class=\"c1\">#new_method = types.MethodType(func, self, self.__class__)</span>\n    <span class=\"n\">new_method</span> <span class=\"o\">=</span> <span class=\"n\">func</span><span class=\"o\">.</span><span class=\"fm\">__get__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"p\">)</span>\n    <span class=\"c1\">#new_method = profile(func.__get__(self, self.__class__))</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">old_method</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">old_im_func</span> <span class=\"o\">=</span> <span class=\"n\">get_method_func</span><span class=\"p\">(</span><span class=\"n\">old_method</span><span class=\"p\">)</span>\n        <span class=\"n\">new_im_func</span> <span class=\"o\">=</span> <span class=\"n\">get_method_func</span><span class=\"p\">(</span><span class=\"n\">new_method</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">allow_main</span> <span class=\"ow\">and</span> <span class=\"n\">old_im_func</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"p\">(</span>\n                <span class=\"n\">get_funcglobals</span><span class=\"p\">(</span><span class=\"n\">old_im_func</span><span class=\"p\">)[</span><span class=\"s1\">&#39;__name__&#39;</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"s1\">&#39;__main__&#39;</span> <span class=\"ow\">and</span>\n                <span class=\"n\">get_funcglobals</span><span class=\"p\">(</span><span class=\"n\">new_im_func</span><span class=\"p\">)[</span><span class=\"s1\">&#39;__name__&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"kc\">True</span> <span class=\"ow\">or</span> <span class=\"n\">VERBOSE_CLASS</span><span class=\"p\">:</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[util_class] skipping re-inject of </span><span class=\"si\">%r</span><span class=\"s1\"> from __main__&#39;</span> <span class=\"o\">%</span> <span class=\"n\">method_name</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span>\n        <span class=\"k\">if</span> <span class=\"n\">old_method</span> <span class=\"ow\">is</span> <span class=\"n\">new_method</span> <span class=\"ow\">or</span> <span class=\"n\">old_im_func</span> <span class=\"ow\">is</span> <span class=\"n\">new_im_func</span><span class=\"p\">:</span>\n            <span class=\"c1\">#if verbose and util_arg.NOT_QUIET:</span>\n            <span class=\"c1\">#    print(&#39;WARNING: Skipping injecting the same function twice: %r&#39; % new_method)</span>\n                <span class=\"c1\">#print(&#39;WARNING: Injecting the same function twice: %r&#39; % new_method)</span>\n            <span class=\"k\">return</span>\n        <span class=\"k\">elif</span> <span class=\"n\">allow_override</span> <span class=\"ow\">is</span> <span class=\"kc\">False</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">AssertionError</span><span class=\"p\">(</span>\n                <span class=\"s1\">&#39;Overrides are not allowed. Already have method_name=</span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span>\n                <span class=\"p\">(</span><span class=\"n\">method_name</span><span class=\"p\">))</span>\n        <span class=\"k\">elif</span> <span class=\"n\">allow_override</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;warn&#39;</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span>\n                <span class=\"s1\">&#39;WARNING: Overrides are not allowed. Already have method_name=</span><span class=\"si\">%r</span><span class=\"s1\">. Skipping&#39;</span> <span class=\"o\">%</span>\n                <span class=\"p\">(</span><span class=\"n\">method_name</span><span class=\"p\">))</span>\n            <span class=\"k\">return</span>\n        <span class=\"k\">elif</span> <span class=\"n\">allow_override</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;override+warn&#39;</span><span class=\"p\">:</span>\n            <span class=\"c1\">#import utool as ut</span>\n            <span class=\"c1\">#ut.embed()</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;WARNING: Overrides are allowed, but dangerous. method_name=</span><span class=\"si\">%r</span><span class=\"s1\">.&#39;</span> <span class=\"o\">%</span>\n                  <span class=\"p\">(</span><span class=\"n\">method_name</span><span class=\"p\">))</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;old_method = </span><span class=\"si\">%r</span><span class=\"s1\">, im_func=</span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">old_method</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">old_im_func</span><span class=\"p\">)))</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;new_method = </span><span class=\"si\">%r</span><span class=\"s1\">, im_func=</span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">new_method</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">new_im_func</span><span class=\"p\">)))</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">get_funcglobals</span><span class=\"p\">(</span><span class=\"n\">old_im_func</span><span class=\"p\">)[</span><span class=\"s1\">&#39;__name__&#39;</span><span class=\"p\">])</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">get_funcglobals</span><span class=\"p\">(</span><span class=\"n\">new_im_func</span><span class=\"p\">)[</span><span class=\"s1\">&#39;__name__&#39;</span><span class=\"p\">])</span>\n        <span class=\"c1\"># TODO: does this actually decrement the refcount enough?</span>\n        <span class=\"k\">del</span> <span class=\"n\">old_method</span>\n    <span class=\"nb\">setattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">method_name</span><span class=\"p\">,</span> <span class=\"n\">new_method</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">inject_func_as_property</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"n\">method_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">class_</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    WARNING:</span>\n<span class=\"sd\">        properties are more safely injected using metaclasses</span>\n\n<span class=\"sd\">    References:</span>\n<span class=\"sd\">        http://stackoverflow.com/questions/13850114/dynamically-adding-methods-with-or-without-metaclass-in-python</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">method_name</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">method_name</span> <span class=\"o\">=</span> <span class=\"n\">get_funcname</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)</span>\n    <span class=\"c1\">#new_method = func.__get__(self, self.__class__)</span>\n    <span class=\"n\">new_property</span> <span class=\"o\">=</span> <span class=\"nb\">property</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)</span>\n    <span class=\"nb\">setattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"p\">,</span> <span class=\"n\">method_name</span><span class=\"p\">,</span> <span class=\"n\">new_property</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">inject_func_as_unbound_method</span><span class=\"p\">(</span><span class=\"n\">class_</span><span class=\"p\">,</span> <span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"n\">method_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; This is actually quite simple &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">method_name</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">method_name</span> <span class=\"o\">=</span> <span class=\"n\">get_funcname</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)</span>\n    <span class=\"nb\">setattr</span><span class=\"p\">(</span><span class=\"n\">class_</span><span class=\"p\">,</span> <span class=\"n\">method_name</span><span class=\"p\">,</span> <span class=\"n\">func</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">makeForwardingMetaclass</span><span class=\"p\">(</span><span class=\"n\">forwarding_dest_getter</span><span class=\"p\">,</span> <span class=\"n\">whitelist</span><span class=\"p\">,</span> <span class=\"n\">base_class</span><span class=\"o\">=</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    makes a metaclass that overrides __getattr__ and __setattr__ to forward some</span>\n<span class=\"sd\">    specific attribute references to a specified instance variable</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">class</span> <span class=\"nc\">ForwardingMetaclass</span><span class=\"p\">(</span><span class=\"n\">base_class</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"p\">):</span>\n        <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">metaself</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">bases</span><span class=\"p\">,</span> <span class=\"n\">dct</span><span class=\"p\">):</span>\n            <span class=\"c1\"># print(&#39;ForwardingMetaclass.__init__():</span>\n            <span class=\"c1\">#  {forwarding_dest_getter: %r; whitelist: %r}&#39; % (forwarding_dest_getter, whitelist))</span>\n            <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">ForwardingMetaclass</span><span class=\"p\">,</span> <span class=\"n\">metaself</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">bases</span><span class=\"p\">,</span> <span class=\"n\">dct</span><span class=\"p\">)</span>\n            <span class=\"n\">old_getattr</span> <span class=\"o\">=</span> <span class=\"n\">metaself</span><span class=\"o\">.</span><span class=\"fm\">__getattribute__</span>\n            <span class=\"n\">old_setattr</span> <span class=\"o\">=</span> <span class=\"n\">metaself</span><span class=\"o\">.</span><span class=\"fm\">__setattr__</span>\n            <span class=\"k\">def</span> <span class=\"nf\">new_getattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">):</span>\n                <span class=\"k\">if</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">whitelist</span><span class=\"p\">:</span>\n                    <span class=\"c1\">#dest = old_getattr(self, forwarding_dest_name)</span>\n                    <span class=\"n\">dest</span> <span class=\"o\">=</span> <span class=\"n\">forwarding_dest_getter</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n                    <span class=\"k\">try</span><span class=\"p\">:</span>\n                        <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">dest</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"fm\">__getattribute__</span><span class=\"p\">(</span><span class=\"n\">dest</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">)</span>\n                    <span class=\"k\">except</span> <span class=\"ne\">AttributeError</span><span class=\"p\">:</span>\n                        <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">dest</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">old_getattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"n\">val</span>\n            <span class=\"k\">def</span> <span class=\"nf\">new_setattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">):</span>\n                <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">whitelist</span><span class=\"p\">:</span>\n                    <span class=\"c1\">#dest = old_getattr(self, forwarding_dest_name)</span>\n                    <span class=\"n\">dest</span> <span class=\"o\">=</span> <span class=\"n\">forwarding_dest_getter</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n                    <span class=\"n\">dest</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"fm\">__setattr__</span><span class=\"p\">(</span><span class=\"n\">dest</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">old_setattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">)</span>\n            <span class=\"n\">metaself</span><span class=\"o\">.</span><span class=\"fm\">__getattribute__</span> <span class=\"o\">=</span> <span class=\"n\">new_getattr</span>\n            <span class=\"n\">metaself</span><span class=\"o\">.</span><span class=\"fm\">__setattr__</span> <span class=\"o\">=</span> <span class=\"n\">new_setattr</span>\n    <span class=\"k\">return</span> <span class=\"n\">ForwardingMetaclass</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_reloading_metaclass</span><span class=\"p\">():</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m utool.util_class --test-test_reloading_metaclass</span>\n\n<span class=\"sd\">    References:</span>\n<span class=\"sd\">        http://stackoverflow.com/questions/8122734/pythons-imp-reload-function-is-not-working</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ENABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from utool.util_class import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = test_reloading_metaclass()</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n    <span class=\"n\">testdir</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ensure_app_cache_dir</span><span class=\"p\">(</span><span class=\"s1\">&#39;utool&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;metaclass_tests&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">testfoo_fpath</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">unixjoin</span><span class=\"p\">(</span><span class=\"n\">testdir</span><span class=\"p\">,</span> <span class=\"s1\">&#39;testfoo.py&#39;</span><span class=\"p\">)</span>\n    <span class=\"c1\"># os.chdir(testdir)</span>\n    <span class=\"c1\">#with ut.ChdirContext(testdir, stay=ut.inIPython()):</span>\n    <span class=\"k\">with</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ChdirContext</span><span class=\"p\">(</span><span class=\"n\">testdir</span><span class=\"p\">):</span>\n        <span class=\"n\">foo_code1</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">codeblock</span><span class=\"p\">(</span>\n            <span class=\"sa\">r</span><span class=\"sd\">&#39;&#39;&#39;</span>\n<span class=\"sd\">            # STARTBLOCK</span>\n<span class=\"sd\">            import utool as ut</span>\n<span class=\"sd\">            import six</span>\n\n\n<span class=\"sd\">            @six.add_metaclass(ut.ReloadingMetaclass)</span>\n<span class=\"sd\">            class Foo(object):</span>\n<span class=\"sd\">                def __init__(self):</span>\n<span class=\"sd\">                    pass</span>\n\n<span class=\"sd\">            spamattr = &#39;version1&#39;</span>\n<span class=\"sd\">            # ENDBLOCK</span>\n<span class=\"sd\">            &#39;&#39;&#39;</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">foo_code2</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">codeblock</span><span class=\"p\">(</span>\n            <span class=\"sa\">r</span><span class=\"sd\">&#39;&#39;&#39;</span>\n<span class=\"sd\">            # STARTBLOCK</span>\n<span class=\"sd\">            import utool as ut</span>\n<span class=\"sd\">            import six</span>\n\n\n<span class=\"sd\">            @six.add_metaclass(ut.ReloadingMetaclass)</span>\n<span class=\"sd\">            class Foo(object):</span>\n<span class=\"sd\">                def __init__(self):</span>\n<span class=\"sd\">                    pass</span>\n\n<span class=\"sd\">                def bar(self):</span>\n<span class=\"sd\">                    return &#39;spam&#39;</span>\n\n<span class=\"sd\">            eggsattr = &#39;version2&#39;</span>\n<span class=\"sd\">            # ENDBLOCK</span>\n<span class=\"sd\">            &#39;&#39;&#39;</span>\n        <span class=\"p\">)</span>\n        <span class=\"c1\"># Write a testclass to disk</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">testfoo_fpath</span><span class=\"p\">)</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">write_to</span><span class=\"p\">(</span><span class=\"n\">testfoo_fpath</span><span class=\"p\">,</span> <span class=\"n\">foo_code1</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">testfoo</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">import_module_from_fpath</span><span class=\"p\">(</span><span class=\"n\">testfoo_fpath</span><span class=\"p\">)</span>\n        <span class=\"c1\">#import testfoo</span>\n        <span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"n\">testfoo</span><span class=\"o\">.</span><span class=\"n\">Foo</span><span class=\"p\">()</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;foo = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">,))</span>\n        <span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bar&#39;</span><span class=\"p\">),</span> <span class=\"s1\">&#39;foo should not have a bar attr&#39;</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">testfoo_fpath</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># remove the pyc file because of the identical creation time</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">write_to</span><span class=\"p\">(</span><span class=\"n\">testfoo_fpath</span><span class=\"p\">,</span> <span class=\"n\">foo_code2</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bar&#39;</span><span class=\"p\">),</span> <span class=\"s1\">&#39;foo should still not have a bar attr&#39;</span>\n        <span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">rrr</span><span class=\"p\">()</span>\n        <span class=\"k\">assert</span> <span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">bar</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;spam&#39;</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">testfoo_fpath</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Reloading worked nicely&#39;</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ReloadingMetaclass</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Classes with this metaclass will be able to reload themselves</span>\n<span class=\"sd\">    on a per-instance basis using the rrr function.</span>\n\n<span class=\"sd\">    If the functions _on_reload and _initialize_self exist</span>\n<span class=\"sd\">    they will be called after and before reload respectively. Any</span>\n<span class=\"sd\">    inject_instance functions should be handled there.</span>\n\n<span class=\"sd\">    SeeAlso:</span>\n<span class=\"sd\">        test_reloading_metaclass - shows a working example of this doctest</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from utool.util_class import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import utool as ut</span>\n<span class=\"sd\">        &gt;&gt;&gt; @six.add_metaclass(ut.ReloadingMetaclass)</span>\n<span class=\"sd\">        &gt;&gt;&gt; class Foo(object):</span>\n<span class=\"sd\">        ...     def __init__(self):</span>\n<span class=\"sd\">        ...         pass</span>\n<span class=\"sd\">        &gt;&gt;&gt; # You can edit foo on disk and call rrr in ipython</span>\n<span class=\"sd\">        &gt;&gt;&gt; # if you add a new function to it</span>\n<span class=\"sd\">        &gt;&gt;&gt; foo = Foo()</span>\n<span class=\"sd\">        &gt;&gt;&gt; # This will not work as a doctests because</span>\n<span class=\"sd\">        &gt;&gt;&gt; # Foo&#39;s parent module will be __main__ but</span>\n<span class=\"sd\">        &gt;&gt;&gt; # there will be no easy way to write to it.</span>\n<span class=\"sd\">        &gt;&gt;&gt; # This does work when you run from ipython</span>\n<span class=\"sd\">        &gt;&gt;&gt; @six.add_metaclass(ut.ReloadingMetaclass)</span>\n<span class=\"sd\">        &gt;&gt;&gt; class Foo(object):</span>\n<span class=\"sd\">        ...     def __init__(self):</span>\n<span class=\"sd\">        ...         pass</span>\n<span class=\"sd\">        ...     def bar(self):</span>\n<span class=\"sd\">        ...         return &#39;spam&#39;</span>\n<span class=\"sd\">        &gt;&gt;&gt; foo.rrr()</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = foo.bar()</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">        spam</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">metaself</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">bases</span><span class=\"p\">,</span> <span class=\"n\">dct</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">ReloadingMetaclass</span><span class=\"p\">,</span> <span class=\"n\">metaself</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">bases</span><span class=\"p\">,</span> <span class=\"n\">dct</span><span class=\"p\">)</span>\n        <span class=\"n\">metaself</span><span class=\"o\">.</span><span class=\"n\">rrr</span> <span class=\"o\">=</span> <span class=\"n\">reload_class</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">reloading_meta_metaclass_factory</span><span class=\"p\">(</span><span class=\"n\">BASE_TYPE</span><span class=\"o\">=</span><span class=\"nb\">type</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; hack for pyqt &quot;&quot;&quot;</span>\n    <span class=\"k\">class</span> <span class=\"nc\">ReloadingMetaclass2</span><span class=\"p\">(</span><span class=\"n\">BASE_TYPE</span><span class=\"p\">):</span>\n        <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">metaself</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">bases</span><span class=\"p\">,</span> <span class=\"n\">dct</span><span class=\"p\">):</span>\n            <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">ReloadingMetaclass2</span><span class=\"p\">,</span> <span class=\"n\">metaself</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">bases</span><span class=\"p\">,</span> <span class=\"n\">dct</span><span class=\"p\">)</span>\n            <span class=\"c1\">#print(&#39;Making rrr for %r&#39; % (name,))</span>\n            <span class=\"n\">metaself</span><span class=\"o\">.</span><span class=\"n\">rrr</span> <span class=\"o\">=</span> <span class=\"n\">reload_class</span>\n    <span class=\"k\">return</span> <span class=\"n\">ReloadingMetaclass2</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">reload_class</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">reload_module</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    special class reloading function</span>\n<span class=\"sd\">    This function is often injected as rrr of classes</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n    <span class=\"n\">verbose</span> <span class=\"o\">=</span> <span class=\"n\">verbose</span> <span class=\"ow\">or</span> <span class=\"n\">VERBOSE_CLASS</span>\n    <span class=\"n\">classname</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">modname</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__module__</span>\n        <span class=\"k\">if</span> <span class=\"n\">verbose</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[class] reloading &#39;</span> <span class=\"o\">+</span> <span class=\"n\">classname</span> <span class=\"o\">+</span> <span class=\"s1\">&#39; from &#39;</span> <span class=\"o\">+</span> <span class=\"n\">modname</span><span class=\"p\">)</span>\n        <span class=\"c1\"># --HACK--</span>\n        <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"s1\">&#39;_on_reload&#39;</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">verbose</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[class] calling _on_reload for &#39;</span> <span class=\"o\">+</span> <span class=\"n\">classname</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_on_reload</span><span class=\"p\">()</span>\n        <span class=\"k\">elif</span> <span class=\"n\">verbose</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[class] &#39;</span> <span class=\"o\">+</span> <span class=\"n\">classname</span> <span class=\"o\">+</span> <span class=\"s1\">&#39; does not have an _on_reload function&#39;</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Do for all inheriting classes</span>\n        <span class=\"k\">def</span> <span class=\"nf\">find_base_clases</span><span class=\"p\">(</span><span class=\"n\">_class</span><span class=\"p\">,</span> <span class=\"n\">find_base_clases</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n            <span class=\"n\">class_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">for</span> <span class=\"n\">_baseclass</span> <span class=\"ow\">in</span> <span class=\"n\">_class</span><span class=\"o\">.</span><span class=\"vm\">__bases__</span><span class=\"p\">:</span>\n                <span class=\"n\">parents</span> <span class=\"o\">=</span> <span class=\"n\">find_base_clases</span><span class=\"p\">(</span><span class=\"n\">_baseclass</span><span class=\"p\">,</span> <span class=\"n\">find_base_clases</span><span class=\"p\">)</span>\n                <span class=\"n\">class_list</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">parents</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">_class</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"nb\">object</span><span class=\"p\">:</span>\n                <span class=\"n\">class_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">_class</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">class_list</span>\n\n        <span class=\"n\">head_class</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span>\n        <span class=\"c1\"># Determine if parents need reloading</span>\n        <span class=\"n\">class_list</span> <span class=\"o\">=</span> <span class=\"n\">find_base_clases</span><span class=\"p\">(</span><span class=\"n\">head_class</span><span class=\"p\">,</span> <span class=\"n\">find_base_clases</span><span class=\"p\">)</span>\n        <span class=\"c1\"># HACK</span>\n        <span class=\"n\">ignore</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">HashComparable2</span><span class=\"p\">}</span>\n        <span class=\"n\">class_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">_class</span> <span class=\"k\">for</span> <span class=\"n\">_class</span> <span class=\"ow\">in</span> <span class=\"n\">class_list</span>\n                      <span class=\"k\">if</span> <span class=\"n\">_class</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">ignore</span><span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">_class</span> <span class=\"ow\">in</span> <span class=\"n\">class_list</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">verbose</span><span class=\"p\">:</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[class] reloading parent &#39;</span> <span class=\"o\">+</span> <span class=\"n\">_class</span><span class=\"o\">.</span><span class=\"vm\">__name__</span> <span class=\"o\">+</span>\n                      <span class=\"s1\">&#39; from &#39;</span> <span class=\"o\">+</span> <span class=\"n\">_class</span><span class=\"o\">.</span><span class=\"vm\">__module__</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">_class</span><span class=\"o\">.</span><span class=\"vm\">__module__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Attempt to find the module that is the main module</span>\n                <span class=\"c1\"># This may be very hacky and potentially break</span>\n                <span class=\"n\">main_module_</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"p\">[</span><span class=\"n\">_class</span><span class=\"o\">.</span><span class=\"vm\">__module__</span><span class=\"p\">]</span>\n                <span class=\"n\">main_modname</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_modname_from_modpath</span><span class=\"p\">(</span><span class=\"n\">main_module_</span><span class=\"o\">.</span><span class=\"vm\">__file__</span><span class=\"p\">)</span>\n                <span class=\"n\">module_</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"p\">[</span><span class=\"n\">main_modname</span><span class=\"p\">]</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">module_</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"p\">[</span><span class=\"n\">_class</span><span class=\"o\">.</span><span class=\"vm\">__module__</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">module_</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rrr&#39;</span><span class=\"p\">):</span>\n                <span class=\"k\">if</span> <span class=\"n\">reload_module</span><span class=\"p\">:</span>\n                    <span class=\"n\">module_</span><span class=\"o\">.</span><span class=\"n\">rrr</span><span class=\"p\">(</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">verbose</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">reload_module</span><span class=\"p\">:</span>\n                    <span class=\"kn\">import</span> <span class=\"nn\">imp</span>\n                    <span class=\"k\">if</span> <span class=\"n\">verbose</span><span class=\"p\">:</span>\n                        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[class] reloading &#39;</span> <span class=\"o\">+</span> <span class=\"n\">_class</span><span class=\"o\">.</span><span class=\"vm\">__module__</span> <span class=\"o\">+</span> <span class=\"s1\">&#39; with imp&#39;</span><span class=\"p\">)</span>\n                    <span class=\"k\">try</span><span class=\"p\">:</span>\n                        <span class=\"n\">imp</span><span class=\"o\">.</span><span class=\"n\">reload</span><span class=\"p\">(</span><span class=\"n\">module_</span><span class=\"p\">)</span>\n                    <span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">ImportError</span><span class=\"p\">,</span> <span class=\"ne\">AttributeError</span><span class=\"p\">):</span>\n                        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[class] fallback reloading &#39;</span> <span class=\"o\">+</span> <span class=\"n\">_class</span><span class=\"o\">.</span><span class=\"vm\">__module__</span> <span class=\"o\">+</span>\n                              <span class=\"s1\">&#39; with imp&#39;</span><span class=\"p\">)</span>\n                        <span class=\"c1\"># one last thing to try. probably used ut.import_module_from_fpath</span>\n                        <span class=\"c1\"># when importing this module</span>\n                        <span class=\"n\">imp</span><span class=\"o\">.</span><span class=\"n\">load_source</span><span class=\"p\">(</span><span class=\"n\">module_</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">,</span> <span class=\"n\">module_</span><span class=\"o\">.</span><span class=\"vm\">__file__</span><span class=\"p\">)</span>\n            <span class=\"c1\"># Reset class attributes</span>\n            <span class=\"n\">_newclass</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">module_</span><span class=\"p\">,</span> <span class=\"n\">_class</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n            <span class=\"n\">reload_class_methods</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">_newclass</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">verbose</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># --HACK--</span>\n        <span class=\"c1\"># TODO: handle injected definitions</span>\n        <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"s1\">&#39;_initialize_self&#39;</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">verbose</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[class] calling _initialize_self for &#39;</span> <span class=\"o\">+</span> <span class=\"n\">classname</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_initialize_self</span><span class=\"p\">()</span>\n        <span class=\"k\">elif</span> <span class=\"n\">verbose</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[class] &#39;</span> <span class=\"o\">+</span> <span class=\"n\">classname</span> <span class=\"o\">+</span> <span class=\"s1\">&#39; does not have an _initialize_self function&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">printex</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Error Reloading Class&#39;</span><span class=\"p\">,</span> <span class=\"n\">keys</span><span class=\"o\">=</span><span class=\"p\">[</span>\n            <span class=\"s1\">&#39;modname&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;module&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;class_&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;class_list&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;self&#39;</span><span class=\"p\">,</span> <span class=\"p\">])</span>\n        <span class=\"k\">raise</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">reload_class_methods</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">class_</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    rebinds all class methods</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        self (object): class instance to reload</span>\n<span class=\"sd\">        class_ (type): type to reload as</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from utool.util_class import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; self = &#39;?&#39;</span>\n<span class=\"sd\">        &gt;&gt;&gt; class_ = &#39;?&#39;</span>\n<span class=\"sd\">        &gt;&gt;&gt; result = reload_class_methods(self, class_)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(result)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">verbose</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[util_class] Reloading self=</span><span class=\"si\">%r</span><span class=\"s1\"> as class_=</span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">class_</span><span class=\"p\">))</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span> <span class=\"o\">=</span> <span class=\"n\">class_</span>\n    <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"nb\">dir</span><span class=\"p\">(</span><span class=\"n\">class_</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Get unbound reloaded method</span>\n        <span class=\"n\">func</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">class_</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">MethodType</span><span class=\"p\">):</span>\n            <span class=\"c1\"># inject it into the old instance</span>\n            <span class=\"n\">inject_func_as_method</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"n\">class_</span><span class=\"o\">=</span><span class=\"n\">class_</span><span class=\"p\">,</span>\n                                  <span class=\"n\">allow_override</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                                  <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">verbose</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">compare_instance</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n    <span class=\"n\">hash1</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"fm\">__hash__</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"fm\">__hash__</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">hash2</span> <span class=\"o\">=</span> <span class=\"nb\">hash</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">hash2</span> <span class=\"o\">=</span> <span class=\"n\">other</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">op</span><span class=\"p\">(</span><span class=\"n\">hash1</span><span class=\"p\">,</span> <span class=\"n\">hash2</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n        <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">printex</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">,</span> <span class=\"s1\">&#39;could not compare hash1 to hash2&#39;</span><span class=\"p\">,</span> <span class=\"n\">keys</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;hash1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;hash2&#39;</span><span class=\"p\">])</span>\n        <span class=\"k\">raise</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">get_comparison_methods</span><span class=\"p\">():</span>\n    <span class=\"sd\">&quot;&quot;&quot; makes methods for &gt;, &lt;, =, etc... &quot;&quot;&quot;</span>\n    <span class=\"n\">method_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_register</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">):</span>\n        <span class=\"n\">method_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">func</span>\n\n    <span class=\"c1\"># Comparison operators for sorting and uniqueness</span>\n    <span class=\"nd\">@_register</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__lt__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">compare_instance</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">lt</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@_register</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__le__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">compare_instance</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">le</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@_register</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__eq__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">compare_instance</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">eq</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@_register</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__ne__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">compare_instance</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">ne</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@_register</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__gt__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">compare_instance</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">gt</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@_register</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__ge__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">compare_instance</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">ge</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">method_list</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">get_comparison_operators</span><span class=\"p\">():</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">operator</span>\n    <span class=\"n\">opdict</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">&#39;not&#39;</span><span class=\"p\">:</span> <span class=\"n\">operator</span><span class=\"o\">.</span><span class=\"n\">not_</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;is&#39;</span><span class=\"p\">:</span> <span class=\"n\">operator</span><span class=\"o\">.</span><span class=\"n\">is_</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;is not&#39;</span><span class=\"p\">:</span> <span class=\"n\">operator</span><span class=\"o\">.</span><span class=\"n\">is_not</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;contains&#39;</span><span class=\"p\">:</span> <span class=\"n\">operator</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;in&#39;</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">operator</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">),</span>\n        <span class=\"s1\">&#39;not in&#39;</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"ow\">not</span> <span class=\"n\">operator</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">),</span>\n        <span class=\"s1\">&#39;!=&#39;</span><span class=\"p\">:</span> <span class=\"n\">operator</span><span class=\"o\">.</span><span class=\"n\">ne</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;==&#39;</span><span class=\"p\">:</span> <span class=\"n\">operator</span><span class=\"o\">.</span><span class=\"n\">eq</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;&gt;=&#39;</span><span class=\"p\">:</span> <span class=\"n\">operator</span><span class=\"o\">.</span><span class=\"n\">ge</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;&lt;=&#39;</span><span class=\"p\">:</span> <span class=\"n\">operator</span><span class=\"o\">.</span><span class=\"n\">le</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;&gt;&#39;</span><span class=\"p\">:</span> <span class=\"n\">operator</span><span class=\"o\">.</span><span class=\"n\">gt</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;&lt;&#39;</span><span class=\"p\">:</span> <span class=\"n\">operator</span><span class=\"o\">.</span><span class=\"n\">lt</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">opdict</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()):</span>\n        <span class=\"n\">op</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"s1\">&#39;__name__&#39;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">op</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">opdict</span> <span class=\"ow\">and</span> <span class=\"n\">op</span> <span class=\"o\">!=</span> <span class=\"s1\">&#39;&lt;lambda&gt;&#39;</span><span class=\"p\">:</span>\n            <span class=\"n\">opdict</span><span class=\"p\">[</span><span class=\"n\">op</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">v</span>\n    <span class=\"k\">return</span> <span class=\"n\">opdict</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">HashComparableMetaclass</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Defines extra methods for Configs</span>\n\n<span class=\"sd\">    FIXME: this breaks in python3 because</span>\n<span class=\"sd\">    anything that overwrites hash overwrites inherited __eq__</span>\n\n<span class=\"sd\">    https://docs.python.org/3.6/reference/datamodel.html#object.__hash__</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__new__</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">bases</span><span class=\"p\">,</span> <span class=\"n\">dct</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            cls (type): meta</span>\n<span class=\"sd\">            name (str): classname</span>\n<span class=\"sd\">            supers (list): bases</span>\n<span class=\"sd\">            dct (dict): class dictionary</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">method_list</span> <span class=\"o\">=</span> <span class=\"n\">get_comparison_methods</span><span class=\"p\">()</span>\n        <span class=\"k\">for</span> <span class=\"n\">func</span> <span class=\"ow\">in</span> <span class=\"n\">method_list</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">get_funcname</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">dct</span><span class=\"p\">:</span>\n                <span class=\"n\">funcname</span> <span class=\"o\">=</span> <span class=\"n\">get_funcname</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)</span>\n                <span class=\"n\">dct</span><span class=\"p\">[</span><span class=\"n\">funcname</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">func</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">funcname</span> <span class=\"o\">=</span> <span class=\"n\">get_funcname</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)</span>\n                <span class=\"n\">dct</span><span class=\"p\">[</span><span class=\"s1\">&#39;meta_&#39;</span> <span class=\"o\">+</span> <span class=\"n\">funcname</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">func</span>\n            <span class=\"c1\">#ut.inject_func_as_method(metaself, func)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">type</span><span class=\"o\">.</span><span class=\"fm\">__new__</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">bases</span><span class=\"p\">,</span> <span class=\"n\">dct</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@six</span><span class=\"o\">.</span><span class=\"n\">add_metaclass</span><span class=\"p\">(</span><span class=\"n\">HashComparableMetaclass</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">HashComparable</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">HashComparable2</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__lt__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">compare_instance</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">lt</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__le__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">compare_instance</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">le</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__eq__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">compare_instance</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">eq</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__ne__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">compare_instance</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">ne</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__gt__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">compare_instance</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">gt</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__ge__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">compare_instance</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">ge</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">reloadable_class</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    convinience decorator instead of @six.add_metaclass(ReloadingMetaclass)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">return</span> <span class=\"n\">six</span><span class=\"o\">.</span><span class=\"n\">add_metaclass</span><span class=\"p\">(</span><span class=\"n\">ReloadingMetaclass</span><span class=\"p\">)(</span><span class=\"bp\">cls</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">KwargsWrapper</span><span class=\"p\">(</span><span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">Mapping</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Allows an arbitrary object attributes to be passed as a **kwargs</span>\n<span class=\"sd\">    argument</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">obj</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__getitem__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__iter__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">iter</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__len__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">remove_private_obfuscation</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    removes the python obfuscation of class privates so they can be executed as</span>\n<span class=\"sd\">    they appear in class source. Useful when playing with IPython.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">classname</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span>\n    <span class=\"n\">attrlist</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">attr</span> <span class=\"k\">for</span> <span class=\"n\">attr</span> <span class=\"ow\">in</span> <span class=\"nb\">dir</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">attr</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">&#39;_&#39;</span> <span class=\"o\">+</span> <span class=\"n\">classname</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;__&#39;</span><span class=\"p\">)]</span>\n    <span class=\"k\">for</span> <span class=\"n\">attr</span> <span class=\"ow\">in</span> <span class=\"n\">attrlist</span><span class=\"p\">:</span>\n        <span class=\"n\">method</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">attr</span><span class=\"p\">)</span>\n        <span class=\"n\">truename</span> <span class=\"o\">=</span> <span class=\"n\">attr</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">&#39;_&#39;</span> <span class=\"o\">+</span> <span class=\"n\">classname</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;__&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;__&#39;</span><span class=\"p\">)</span>\n        <span class=\"nb\">setattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">truename</span><span class=\"p\">,</span> <span class=\"n\">method</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">get_classname</span><span class=\"p\">(</span><span class=\"n\">class_</span><span class=\"p\">,</span> <span class=\"n\">local</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        class_ (type):</span>\n<span class=\"sd\">        local (bool): (default = False)</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        str: classname</span>\n\n<span class=\"sd\">    CommandLine:</span>\n<span class=\"sd\">        python -m utool.util_class --exec-get_classname --show</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # DISABLE_DOCTEST</span>\n<span class=\"sd\">        &gt;&gt;&gt; from utool.util_class import *  # NOQA</span>\n<span class=\"sd\">        &gt;&gt;&gt; import utool as ut</span>\n<span class=\"sd\">        &gt;&gt;&gt; class_ = ReloadingMetaclass</span>\n<span class=\"sd\">        &gt;&gt;&gt; local = False</span>\n<span class=\"sd\">        &gt;&gt;&gt; assert get_classname(class_, local) == &#39;utool.util_class.ReloadingMetaclass&#39;</span>\n<span class=\"sd\">        &gt;&gt;&gt; assert get_classname(class_, local=True) == &#39;ReloadingMetaclass&#39;</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">local</span><span class=\"p\">:</span>\n        <span class=\"n\">classname</span> <span class=\"o\">=</span> <span class=\"n\">class_</span><span class=\"o\">.</span><span class=\"vm\">__module__</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;.&#39;</span> <span class=\"o\">+</span> <span class=\"n\">class_</span><span class=\"o\">.</span><span class=\"vm\">__name__</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">classname</span> <span class=\"o\">=</span> <span class=\"n\">class_</span><span class=\"o\">.</span><span class=\"vm\">__name__</span>\n    <span class=\"k\">return</span> <span class=\"n\">classname</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    python -c &quot;import utool; utool.doctest_funcs(utool.util_class, allexamples=True)&quot;</span>\n<span class=\"sd\">    python -m utool.util_class --allexamples</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">multiprocessing</span>\n    <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">freeze_support</span><span class=\"p\">()</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n    <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">doctest_funcs</span><span class=\"p\">()</span>\n</pre></div>", "current_page_name": "_modules/utool/util_class", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}