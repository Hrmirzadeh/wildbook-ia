{"parents": [{"link": "../ibeis/", "title": "ibeis package"}, {"link": "../ibeis.algo/", "title": "ibeis.algo package"}], "prev": {"link": "../ibeis.algo.detect.nms/", "title": "ibeis.algo.detect.nms package"}, "next": {"link": "../ibeis.algo.graph.tests/", "title": "ibeis.algo.graph.tests package"}, "title": "ibeis.algo.graph package", "meta": {}, "body": "<div class=\"section\" id=\"ibeis-algo-graph-package\">\n<h1>ibeis.algo.graph package<a class=\"headerlink\" href=\"#ibeis-algo-graph-package\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<div class=\"section\" id=\"subpackages\">\n<h2>Subpackages<a class=\"headerlink\" href=\"#subpackages\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"toctree-wrapper compound\">\n<ul>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../ibeis.algo.graph.tests/\">ibeis.algo.graph.tests package</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../ibeis.algo.graph.tests/#submodules\">Submodules</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../ibeis.algo.graph.tests/#module-ibeis.algo.graph.tests.dyn_cases\">ibeis.algo.graph.tests.dyn_cases module</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../ibeis.algo.graph.tests/#ibeis-algo-graph-tests-mst-debug-module\">ibeis.algo.graph.tests.mst_debug module</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../ibeis.algo.graph.tests/#module-ibeis.algo.graph.tests.test_graph_iden\">ibeis.algo.graph.tests.test_graph_iden module</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../ibeis.algo.graph.tests/#module-ibeis.algo.graph.tests.test_neg_metagraph\">ibeis.algo.graph.tests.test_neg_metagraph module</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"../ibeis.algo.graph.tests/#module-ibeis.algo.graph.tests\">Module contents</a></li>\n</ul>\n</li>\n</ul>\n</div>\n</div>\n<div class=\"section\" id=\"submodules\">\n<h2>Submodules<a class=\"headerlink\" href=\"#submodules\" title=\"Permalink to this headline\">\u00b6</a></h2>\n</div>\n<div class=\"section\" id=\"module-ibeis.algo.graph.__main__\">\n<span id=\"ibeis-algo-graph-main-module\"></span><h2>ibeis.algo.graph.__main__ module<a class=\"headerlink\" href=\"#module-ibeis.algo.graph.__main__\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"function\">\n<dt id=\"ibeis.algo.graph.__main__.main\">\n<code class=\"descclassname\">ibeis.algo.graph.__main__.</code><code class=\"descname\">main</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/__main__/#main\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.__main__.main\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"module-ibeis.algo.graph.core\">\n<span id=\"ibeis-algo-graph-core-module\"></span><h2>ibeis.algo.graph.core module<a class=\"headerlink\" href=\"#module-ibeis.algo.graph.core\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"class\">\n<dt id=\"ibeis.algo.graph.core.AltConstructors\">\n<em class=\"property\">class </em><code class=\"descclassname\">ibeis.algo.graph.core.</code><code class=\"descname\">AltConstructors</code><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/core/#AltConstructors\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.core.AltConstructors\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></p>\n<dl class=\"classmethod\">\n<dt id=\"ibeis.algo.graph.core.AltConstructors.from_netx\">\n<em class=\"property\">classmethod </em><code class=\"descname\">from_netx</code><span class=\"sig-paren\">(</span><em>G</em>, <em>ibs=None</em>, <em>verbose=False</em>, <em>infer=True</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/core/#AltConstructors.from_netx\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.core.AltConstructors.from_netx\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"ibeis.algo.graph.core.AltConstructors.from_pairs\">\n<em class=\"property\">classmethod </em><code class=\"descname\">from_pairs</code><span class=\"sig-paren\">(</span><em>aid_pairs</em>, <em>attrs=None</em>, <em>ibs=None</em>, <em>verbose=False</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/core/#AltConstructors.from_pairs\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.core.AltConstructors.from_pairs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"ibeis.algo.graph.core.AltConstructors.from_qreq_\">\n<em class=\"property\">classmethod </em><code class=\"descname\">from_qreq_</code><span class=\"sig-paren\">(</span><em>qreq_</em>, <em>cm_list</em>, <em>autoinit=False</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/core/#AltConstructors.from_qreq_\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.core.AltConstructors.from_qreq_\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create a AnnotInference object using a precomputed query / results</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.core.AltConstructors.status\">\n<code class=\"descname\">status</code><span class=\"sig-paren\">(</span><em>extended=False</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/core/#AltConstructors.status\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.core.AltConstructors.status\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n<dl class=\"class\">\n<dt id=\"ibeis.algo.graph.core.AnnotInference\">\n<em class=\"property\">class </em><code class=\"descclassname\">ibeis.algo.graph.core.</code><code class=\"descname\">AnnotInference</code><span class=\"sig-paren\">(</span><em>ibs</em>, <em>aids=[]</em>, <em>nids=None</em>, <em>autoinit=True</em>, <em>verbose=False</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/core/#AnnotInference\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.core.AnnotInference\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">utool.util_dev.NiceRepr</span></code>, <a class=\"reference internal\" href=\"#ibeis.algo.graph.core.AltConstructors\" title=\"ibeis.algo.graph.core.AltConstructors\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ibeis.algo.graph.core.AltConstructors</span></code></a>, <a class=\"reference internal\" href=\"#ibeis.algo.graph.core.MiscHelpers\" title=\"ibeis.algo.graph.core.MiscHelpers\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ibeis.algo.graph.core.MiscHelpers</span></code></a>, <a class=\"reference internal\" href=\"#ibeis.algo.graph.core.Feedback\" title=\"ibeis.algo.graph.core.Feedback\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ibeis.algo.graph.core.Feedback</span></code></a>, <a class=\"reference internal\" href=\"#ibeis.algo.graph.core.NameRelabel\" title=\"ibeis.algo.graph.core.NameRelabel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ibeis.algo.graph.core.NameRelabel</span></code></a>, <a class=\"reference internal\" href=\"#ibeis.algo.graph.mixin_dynamic.NonDynamicUpdate\" title=\"ibeis.algo.graph.mixin_dynamic.NonDynamicUpdate\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ibeis.algo.graph.mixin_dynamic.NonDynamicUpdate</span></code></a>, <a class=\"reference internal\" href=\"#ibeis.algo.graph.mixin_dynamic.Recovery\" title=\"ibeis.algo.graph.mixin_dynamic.Recovery\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ibeis.algo.graph.mixin_dynamic.Recovery</span></code></a>, <a class=\"reference internal\" href=\"#ibeis.algo.graph.mixin_dynamic.Consistency\" title=\"ibeis.algo.graph.mixin_dynamic.Consistency\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ibeis.algo.graph.mixin_dynamic.Consistency</span></code></a>, <a class=\"reference internal\" href=\"#ibeis.algo.graph.mixin_dynamic.Redundancy\" title=\"ibeis.algo.graph.mixin_dynamic.Redundancy\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ibeis.algo.graph.mixin_dynamic.Redundancy</span></code></a>, <a class=\"reference internal\" href=\"#ibeis.algo.graph.mixin_dynamic.DynamicUpdate\" title=\"ibeis.algo.graph.mixin_dynamic.DynamicUpdate\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ibeis.algo.graph.mixin_dynamic.DynamicUpdate</span></code></a>, <a class=\"reference internal\" href=\"#ibeis.algo.graph.mixin_priority.Priority\" title=\"ibeis.algo.graph.mixin_priority.Priority\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ibeis.algo.graph.mixin_priority.Priority</span></code></a>, <a class=\"reference internal\" href=\"#ibeis.algo.graph.mixin_matching.CandidateSearch\" title=\"ibeis.algo.graph.mixin_matching.CandidateSearch\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ibeis.algo.graph.mixin_matching.CandidateSearch</span></code></a>, <a class=\"reference internal\" href=\"#ibeis.algo.graph.mixin_matching.InfrLearning\" title=\"ibeis.algo.graph.mixin_matching.InfrLearning\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ibeis.algo.graph.mixin_matching.InfrLearning</span></code></a>, <a class=\"reference internal\" href=\"#ibeis.algo.graph.mixin_matching.AnnotInfrMatching\" title=\"ibeis.algo.graph.mixin_matching.AnnotInfrMatching\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ibeis.algo.graph.mixin_matching.AnnotInfrMatching</span></code></a>, <a class=\"reference internal\" href=\"#ibeis.algo.graph.mixin_helpers.AssertInvariants\" title=\"ibeis.algo.graph.mixin_helpers.AssertInvariants\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ibeis.algo.graph.mixin_helpers.AssertInvariants</span></code></a>, <a class=\"reference internal\" href=\"#ibeis.algo.graph.mixin_helpers.DummyEdges\" title=\"ibeis.algo.graph.mixin_helpers.DummyEdges\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ibeis.algo.graph.mixin_helpers.DummyEdges</span></code></a>, <a class=\"reference internal\" href=\"#ibeis.algo.graph.mixin_helpers.Convenience\" title=\"ibeis.algo.graph.mixin_helpers.Convenience\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ibeis.algo.graph.mixin_helpers.Convenience</span></code></a>, <a class=\"reference internal\" href=\"#ibeis.algo.graph.mixin_helpers.AttrAccess\" title=\"ibeis.algo.graph.mixin_helpers.AttrAccess\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ibeis.algo.graph.mixin_helpers.AttrAccess</span></code></a>, <a class=\"reference internal\" href=\"#ibeis.algo.graph.mixin_simulation.SimulationHelpers\" title=\"ibeis.algo.graph.mixin_simulation.SimulationHelpers\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ibeis.algo.graph.mixin_simulation.SimulationHelpers</span></code></a>, <a class=\"reference internal\" href=\"#ibeis.algo.graph.mixin_loops.InfrReviewers\" title=\"ibeis.algo.graph.mixin_loops.InfrReviewers\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ibeis.algo.graph.mixin_loops.InfrReviewers</span></code></a>, <a class=\"reference internal\" href=\"#ibeis.algo.graph.mixin_loops.InfrLoops\" title=\"ibeis.algo.graph.mixin_loops.InfrLoops\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ibeis.algo.graph.mixin_loops.InfrLoops</span></code></a>, <a class=\"reference internal\" href=\"#ibeis.algo.graph.mixin_viz.GraphVisualization\" title=\"ibeis.algo.graph.mixin_viz.GraphVisualization\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ibeis.algo.graph.mixin_viz.GraphVisualization</span></code></a>, <a class=\"reference internal\" href=\"#ibeis.algo.graph.mixin_groundtruth.Groundtruth\" title=\"ibeis.algo.graph.mixin_groundtruth.Groundtruth\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ibeis.algo.graph.mixin_groundtruth.Groundtruth</span></code></a>, <a class=\"reference internal\" href=\"#ibeis.algo.graph.mixin_ibeis.IBEISIO\" title=\"ibeis.algo.graph.mixin_ibeis.IBEISIO\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ibeis.algo.graph.mixin_ibeis.IBEISIO</span></code></a>, <a class=\"reference internal\" href=\"#ibeis.algo.graph.mixin_ibeis.IBEISGroundtruth\" title=\"ibeis.algo.graph.mixin_ibeis.IBEISGroundtruth\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ibeis.algo.graph.mixin_ibeis.IBEISGroundtruth</span></code></a></p>\n<p>class for maintaining state of an identification</p>\n<p>Terminology and Concepts:</p>\n<dl class=\"docutils\">\n<dt>CommandLine:</dt>\n<dd><p class=\"first\">ibeis make_qt_graph_interface \u2013show \u2013aids=1,2,3,4,5,6,7\nibeis AnnotInference:0 \u2013show\nibeis AnnotInference:1 \u2013show\nibeis AnnotInference:2 \u2013show</p>\n<p class=\"last\">ibeis AnnotInference:0 \u2013loginfr</p>\n</dd>\n<dt>Doctest:</dt>\n<dd><div class=\"first last highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.core</span> <span class=\"k\">import</span> <span class=\"o\">*</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">ibeis</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">opendb</span><span class=\"p\">(</span><span class=\"n\">defaultdb</span><span class=\"o\">=</span><span class=\"s1\">&#39;PZ_MTEST&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">aids</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">AnnotInference</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"n\">autoinit</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;infr = </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">quit_if_noshow</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">use_image</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">initialize_visual_node_attrs</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Note that there are initially no edges</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">show_graph</span><span class=\"p\">(</span><span class=\"n\">use_image</span><span class=\"o\">=</span><span class=\"n\">use_image</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">show_if_requested</span><span class=\"p\">()</span>\n<span class=\"go\">infr = &lt;AnnotInference(nNodes=6, nEdges=0, nCCs=6)&gt;</span>\n</pre></div>\n</div>\n</dd>\n</dl>\n<p class=\"rubric\">Example</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># SCRIPT</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.core</span> <span class=\"k\">import</span> <span class=\"o\">*</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">ibeis</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">opendb</span><span class=\"p\">(</span><span class=\"n\">defaultdb</span><span class=\"o\">=</span><span class=\"s1\">&#39;PZ_MTEST&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">aids</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">AnnotInference</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"n\">autoinit</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;infr = </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">quit_if_noshow</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">use_image</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">initialize_visual_node_attrs</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Note that there are initially no edges</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">show_graph</span><span class=\"p\">(</span><span class=\"n\">use_image</span><span class=\"o\">=</span><span class=\"n\">use_image</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># But we can add nodes between the same names</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">ensure_mst</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">show_graph</span><span class=\"p\">(</span><span class=\"n\">use_image</span><span class=\"o\">=</span><span class=\"n\">use_image</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Add some feedback</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"n\">NEGTV</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">apply_feedback_edges</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">show_graph</span><span class=\"p\">(</span><span class=\"n\">use_image</span><span class=\"o\">=</span><span class=\"n\">use_image</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">show_if_requested</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p class=\"rubric\">Example</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># SCRIPT</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.core</span> <span class=\"k\">import</span> <span class=\"o\">*</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">ibeis</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">opendb</span><span class=\"p\">(</span><span class=\"n\">defaultdb</span><span class=\"o\">=</span><span class=\"s1\">&#39;PZ_MTEST&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">aids</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">AnnotInference</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"n\">autoinit</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;infr = </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">,))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">quit_if_noshow</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">use_image</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">initialize_visual_node_attrs</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">ensure_mst</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Add some feedback</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"n\">NEGTV</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">try</span><span class=\"p\">:</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">),</span> <span class=\"n\">NEGTV</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"k\">pass</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">try</span><span class=\"p\">:</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">((</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">),</span> <span class=\"n\">NEGTV</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"k\">pass</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">apply_feedback_edges</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">show_graph</span><span class=\"p\">(</span><span class=\"n\">use_image</span><span class=\"o\">=</span><span class=\"n\">use_image</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">show_if_requested</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<dl class=\"docutils\">\n<dt>Ignore:</dt>\n<dd><div class=\"first last highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">ibeis</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">opendb</span><span class=\"p\">(</span><span class=\"n\">defaultdb</span><span class=\"o\">=</span><span class=\"s1\">&#39;PZ_MTEST&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">AnnotInference</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"s1\">&#39;all&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">class_</span> <span class=\"o\">=</span> <span class=\"n\">infr</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fpath</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">static_attrs</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">check_static_member_vars</span><span class=\"p\">(</span><span class=\"n\">class_</span><span class=\"p\">,</span> <span class=\"n\">fpath</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">uninitialized</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span> <span class=\"o\">-</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">static_attrs</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd>\n</dl>\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.core.AnnotInference.copy\">\n<code class=\"descname\">copy</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/core/#AnnotInference.copy\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.core.AnnotInference.copy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.core.AnnotInference.rrr\">\n<code class=\"descname\">rrr</code><span class=\"sig-paren\">(</span><em>verbose=True</em>, <em>reload_module=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#ibeis.algo.graph.core.AnnotInference.rrr\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>special class reloading function\nThis function is often injected as rrr of classes</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.core.AnnotInference.set_config\">\n<code class=\"descname\">set_config</code><span class=\"sig-paren\">(</span><em>config</em>, <em>**kw</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/core/#AnnotInference.set_config\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.core.AnnotInference.set_config\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.core.AnnotInference.subgraph\">\n<code class=\"descname\">subgraph</code><span class=\"sig-paren\">(</span><em>aids</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/core/#AnnotInference.subgraph\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.core.AnnotInference.subgraph\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Makes a new inference object that is a subset of the original.</p>\n<p>Note, this is not robust, be careful. The subgraph should be treated as\nread only. Do not commit any reviews made from here.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.core.AnnotInference.subparams\">\n<code class=\"descname\">subparams</code><span class=\"sig-paren\">(</span><em>prefix</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/core/#AnnotInference.subparams\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.core.AnnotInference.subparams\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns dict of params prefixed with &lt;prefix&gt;.\nThe returned dict does not contain the prefix</p>\n<dl class=\"docutils\">\n<dt>Doctest:</dt>\n<dd><div class=\"first last highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.core</span> <span class=\"k\">import</span> <span class=\"o\">*</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">ibeis</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">AnnotInference</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr2</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">subparams</span><span class=\"p\">(</span><span class=\"s1\">&#39;refresh&#39;</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n<span class=\"go\">{&#39;method&#39;: &#39;binomial&#39;, &#39;patience&#39;: 72, &#39;thresh&#39;: 0.052, &#39;window&#39;: 20}</span>\n</pre></div>\n</div>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n<dl class=\"class\">\n<dt id=\"ibeis.algo.graph.core.Feedback\">\n<em class=\"property\">class </em><code class=\"descclassname\">ibeis.algo.graph.core.</code><code class=\"descname\">Feedback</code><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/core/#Feedback\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.core.Feedback\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></p>\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.core.Feedback.add_feedback\">\n<code class=\"descname\">add_feedback</code><span class=\"sig-paren\">(</span><em>edge</em>, <em>evidence_decision=None</em>, <em>tags=None</em>, <em>user_id=None</em>, <em>meta_decision=None</em>, <em>confidence=None</em>, <em>timestamp_c1=None</em>, <em>timestamp_c2=None</em>, <em>timestamp_s1=None</em>, <em>timestamp=None</em>, <em>verbose=None</em>, <em>priority=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/core/#Feedback.add_feedback\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.core.Feedback.add_feedback\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl class=\"docutils\">\n<dt>Doctest:</dt>\n<dd><div class=\"first last highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.core</span> <span class=\"k\">import</span> <span class=\"o\">*</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">testdata_infr</span><span class=\"p\">(</span><span class=\"s1\">&#39;testdb1&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">((</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">),</span> <span class=\"n\">POSTV</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">((</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">),</span> <span class=\"n\">NEGTV</span><span class=\"p\">,</span> <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;photobomb&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">INCMP</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr2</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">internal_feedback</span><span class=\"p\">,</span> <span class=\"n\">nl</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">external_feedback</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">internal_feedback</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">internal_feedback</span><span class=\"p\">[(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)])</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">internal_feedback</span><span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)])</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n</pre></div>\n</div>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.core.Feedback.add_feedback_from\">\n<code class=\"descname\">add_feedback_from</code><span class=\"sig-paren\">(</span><em>items</em>, <em>verbose=None</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/core/#Feedback.add_feedback_from\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.core.Feedback.add_feedback_from\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.core.Feedback.add_node_feedback\">\n<code class=\"descname\">add_node_feedback</code><span class=\"sig-paren\">(</span><em>aid</em>, <em>**attrs</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/core/#Feedback.add_node_feedback\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.core.Feedback.add_node_feedback\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.core.Feedback.all_feedback\">\n<code class=\"descname\">all_feedback</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/core/#Feedback.all_feedback\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.core.Feedback.all_feedback\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.core.Feedback.all_feedback_items\">\n<code class=\"descname\">all_feedback_items</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/core/#Feedback.all_feedback_items\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.core.Feedback.all_feedback_items\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.core.Feedback.apply_feedback_edges\">\n<code class=\"descname\">apply_feedback_edges</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/core/#Feedback.apply_feedback_edges\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.core.Feedback.apply_feedback_edges\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Transforms the feedback dictionaries into nx graph edge attributes</p>\n<dl class=\"docutils\">\n<dt>CommandLine:</dt>\n<dd>python -m ibeis.algo.graph.core apply_feedback_edges</dd>\n<dt>Doctest:</dt>\n<dd><div class=\"first last highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.core</span> <span class=\"k\">import</span> <span class=\"o\">*</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">testdata_infr</span><span class=\"p\">(</span><span class=\"s1\">&#39;testdb1&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">reset_feedback</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"s1\">&#39;inference.enabled&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\">#infr.add_feedback((1, 2), &#39;unknown&#39;, tags=[])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">INCMP</span><span class=\"p\">,</span> <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">[])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">apply_feedback_edges</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;edges = &#39;</span> <span class=\"o\">+</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr4</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">)))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;AnnotInference(nNodes=6, nEdges=3, nCCs=4)&gt;</span>\n</pre></div>\n</div>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.core.Feedback.clear_edges\">\n<code class=\"descname\">clear_edges</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/core/#Feedback.clear_edges\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.core.Feedback.clear_edges\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Removes all edges from the graph</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.core.Feedback.clear_feedback\">\n<code class=\"descname\">clear_feedback</code><span class=\"sig-paren\">(</span><em>edges=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/core/#Feedback.clear_feedback\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.core.Feedback.clear_feedback\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Delete all edges properties related to feedback</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.core.Feedback.clear_name_labels\">\n<code class=\"descname\">clear_name_labels</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/core/#Feedback.clear_name_labels\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.core.Feedback.clear_name_labels\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Sets all annotation node name labels to be unknown</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.core.Feedback.edge_decision\">\n<code class=\"descname\">edge_decision</code><span class=\"sig-paren\">(</span><em>edge</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/core/#Feedback.edge_decision\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.core.Feedback.edge_decision\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Gets a decision on an edge, either explicitly or implicitly</p>\n<dl class=\"docutils\">\n<dt>CommandLine:</dt>\n<dd>python -m ibeis.algo.graph.core edge_decision</dd>\n<dt>Doctest:</dt>\n<dd><div class=\"first last highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.core</span> <span class=\"k\">import</span> <span class=\"o\">*</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph</span> <span class=\"k\">import</span> <span class=\"n\">demo</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">demo</span><span class=\"o\">.</span><span class=\"n\">demodata_infr</span><span class=\"p\">(</span><span class=\"n\">num_pccs</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">p_incon</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">decision</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">edge_decision</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;decision = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">decision</span><span class=\"p\">,))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"n\">decision</span> <span class=\"o\">==</span> <span class=\"n\">POSTV</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">decision</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">edge_decision</span><span class=\"p\">((</span><span class=\"mi\">199</span><span class=\"p\">,</span> <span class=\"mi\">299</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;decision = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">decision</span><span class=\"p\">,))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"n\">decision</span> <span class=\"o\">==</span> <span class=\"n\">UNREV</span>\n</pre></div>\n</div>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.core.Feedback.edge_decision_from\">\n<code class=\"descname\">edge_decision_from</code><span class=\"sig-paren\">(</span><em>edges</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/core/#Feedback.edge_decision_from\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.core.Feedback.edge_decision_from\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Gets a decision for multiple edges</p>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"ibeis.algo.graph.core.Feedback.feedback_data_keys\">\n<code class=\"descname\">feedback_data_keys</code><em class=\"property\"> = ['evidence_decision', 'tags', 'user_id', 'meta_decision', 'timestamp_c1', 'timestamp_c2', 'timestamp_s1', 'timestamp', 'confidence']</em><a class=\"headerlink\" href=\"#ibeis.algo.graph.core.Feedback.feedback_data_keys\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"ibeis.algo.graph.core.Feedback.feedback_keys\">\n<code class=\"descname\">feedback_keys</code><em class=\"property\"> = ['evidence_decision', 'tags', 'user_id', 'meta_decision', 'timestamp_c1', 'timestamp_c2', 'timestamp_s1', 'timestamp', 'confidence', 'num_reviews', 'review_id']</em><a class=\"headerlink\" href=\"#ibeis.algo.graph.core.Feedback.feedback_keys\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.core.Feedback.reset\">\n<code class=\"descname\">reset</code><span class=\"sig-paren\">(</span><em>state='empty'</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/core/#Feedback.reset\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.core.Feedback.reset\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Removes all edges from graph and resets name labels.</p>\n<p class=\"rubric\">Example</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.core</span> <span class=\"k\">import</span> <span class=\"o\">*</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph</span> <span class=\"k\">import</span> <span class=\"n\">demo</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">demo</span><span class=\"o\">.</span><span class=\"n\">demodata_infr</span><span class=\"p\">(</span><span class=\"n\">num_pccs</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">()))</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">reset</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"o\">=</span><span class=\"s1\">&#39;empty&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">()))</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.core.Feedback.reset_feedback\">\n<code class=\"descname\">reset_feedback</code><span class=\"sig-paren\">(</span><em>mode='annotmatch'</em>, <em>apply=True</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/core/#Feedback.reset_feedback\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.core.Feedback.reset_feedback\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Resets feedback edges to state of the SQL annotmatch table</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.core.Feedback.reset_name_labels\">\n<code class=\"descname\">reset_name_labels</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/core/#Feedback.reset_name_labels\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.core.Feedback.reset_name_labels\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Resets all annotation node name labels to their initial values</p>\n</dd></dl>\n\n</dd></dl>\n\n<dl class=\"class\">\n<dt id=\"ibeis.algo.graph.core.MiscHelpers\">\n<em class=\"property\">class </em><code class=\"descclassname\">ibeis.algo.graph.core.</code><code class=\"descname\">MiscHelpers</code><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/core/#MiscHelpers\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.core.MiscHelpers\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></p>\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.core.MiscHelpers.add_aids\">\n<code class=\"descname\">add_aids</code><span class=\"sig-paren\">(</span><em>aids</em>, <em>nids=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/core/#MiscHelpers.add_aids\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.core.MiscHelpers.add_aids\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl class=\"docutils\">\n<dt>CommandLine:</dt>\n<dd>python -m ibeis.algo.graph.core add_aids \u2013show</dd>\n<dt>Doctest:</dt>\n<dd><div class=\"first last highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.core</span> <span class=\"k\">import</span> <span class=\"o\">*</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">aids_</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">AnnotInference</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"o\">=</span><span class=\"n\">aids_</span><span class=\"p\">,</span> <span class=\"n\">autoinit</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">aids</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">nids</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_aids</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">,</span> <span class=\"n\">nids</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">aids</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">aids</span><span class=\"p\">)</span>\n<span class=\"go\">[1, 2, 3, 4, 5, 6, 7, 9, 22, 8]</span>\n</pre></div>\n</div>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.core.MiscHelpers.dump_logs\">\n<code class=\"descname\">dump_logs</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/core/#MiscHelpers.dump_logs\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.core.MiscHelpers.dump_logs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.core.MiscHelpers.initialize_graph\">\n<code class=\"descname\">initialize_graph</code><span class=\"sig-paren\">(</span><em>graph=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/core/#MiscHelpers.initialize_graph\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.core.MiscHelpers.initialize_graph\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.core.MiscHelpers.latest_logs\">\n<code class=\"descname\">latest_logs</code><span class=\"sig-paren\">(</span><em>colored=False</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/core/#MiscHelpers.latest_logs\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.core.MiscHelpers.latest_logs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.core.MiscHelpers.log_message\">\n<code class=\"descname\">log_message</code><span class=\"sig-paren\">(</span><em>msg</em>, <em>level=1</em>, <em>color=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/core/#MiscHelpers.log_message\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.core.MiscHelpers.log_message\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.core.MiscHelpers.print\">\n<code class=\"descname\">print</code><span class=\"sig-paren\">(</span><em>msg</em>, <em>level=1</em>, <em>color=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#ibeis.algo.graph.core.MiscHelpers.print\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.core.MiscHelpers.remove_aids\">\n<code class=\"descname\">remove_aids</code><span class=\"sig-paren\">(</span><em>aids</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/core/#MiscHelpers.remove_aids\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.core.MiscHelpers.remove_aids\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Remove annotations from the graph.\n:returns: split: indicates which PCCs were split by this action.\n:rtype: dict</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">This may cause unintended splits!</p>\n</div>\n<p class=\"rubric\">Example</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">graphid</span> <span class=\"k\">import</span> <span class=\"n\">demo</span><span class=\"p\">,</span> <span class=\"n\">util</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">demo</span><span class=\"o\">.</span><span class=\"n\">demodata_infr</span><span class=\"p\">(</span><span class=\"n\">num_pccs</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">pos_redun</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">refresh_candidate_edges</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pin_node_layout</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">before</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">aids</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">aids</span><span class=\"p\">[::</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">splits</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">remove_aids</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">splits</span><span class=\"p\">[</span><span class=\"s1\">&#39;old&#39;</span><span class=\"p\">])</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">assert_invariants</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># xdoc: +REQUIRES(--show)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">util</span><span class=\"o\">.</span><span class=\"n\">qtensure</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">after</span> <span class=\"o\">=</span> <span class=\"n\">infr</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">before</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">pnum</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">pickable</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">after</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">pnum</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">pickable</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.core.MiscHelpers.update_node_attributes\">\n<code class=\"descname\">update_node_attributes</code><span class=\"sig-paren\">(</span><em>aids=None</em>, <em>nids=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/core/#MiscHelpers.update_node_attributes\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.core.MiscHelpers.update_node_attributes\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n<dl class=\"class\">\n<dt id=\"ibeis.algo.graph.core.NameRelabel\">\n<em class=\"property\">class </em><code class=\"descclassname\">ibeis.algo.graph.core.</code><code class=\"descname\">NameRelabel</code><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/core/#NameRelabel\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.core.NameRelabel\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></p>\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.core.NameRelabel.connected_component_status\">\n<code class=\"descname\">connected_component_status</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/core/#NameRelabel.connected_component_status\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.core.NameRelabel.connected_component_status\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\">num_inconsistent, num_names_max</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Return type:</th><td class=\"field-body\">dict</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"docutils\">\n<dt>CommandLine:</dt>\n<dd>python -m ibeis.algo.graph.core connected_component_status</dd>\n</dl>\n<p class=\"rubric\">Example</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># DISABLE_DOCTEST</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.core</span> <span class=\"k\">import</span> <span class=\"o\">*</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">testdata_infr</span><span class=\"p\">(</span><span class=\"s1\">&#39;testdb1&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback_from</span><span class=\"p\">([(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">NEGTV</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">),</span> <span class=\"n\">NEGTV</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>                        <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">POSTV</span><span class=\"p\">)]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">connected_component_status</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr3</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.core.NameRelabel.node_label\">\n<code class=\"descname\">node_label</code><span class=\"sig-paren\">(</span><em>aid</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/core/#NameRelabel.node_label\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.core.NameRelabel.node_label\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.core.NameRelabel.node_labels\">\n<code class=\"descname\">node_labels</code><span class=\"sig-paren\">(</span><em>*aids</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/core/#NameRelabel.node_labels\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.core.NameRelabel.node_labels\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.core.NameRelabel.relabel_using_reviews\">\n<code class=\"descname\">relabel_using_reviews</code><span class=\"sig-paren\">(</span><em>graph=None</em>, <em>rectify=True</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/core/#NameRelabel.relabel_using_reviews\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.core.NameRelabel.relabel_using_reviews\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Relabels nodes in graph based on positive connected components</p>\n<p>This will change all of the names on the nodes to be consistent while\npreserving any existing names as best as possible. If rectify=False,\nthis will be faster, but the old names will not be preserved and each\nPCC will be assigned an arbitrary name.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">if something messes up you can call infr.reset_labels_to_ibeis() to\nreset node labels to their original values \u2014 this will almost\nalways put the graph in an inconsistent state \u2014 but then you can\nthis with rectify=True to fix everything up.</p>\n</div>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first last simple\">\n<li><strong>graph</strong> (<em>nx.Graph</em><em>, </em><em>optional</em>) \u2013 only edges in <cite>graph</cite> are relabeled\ndefaults to current graph.</li>\n<li><strong>rectify</strong> (<em>bool</em><em>, </em><em>optional</em>) \u2013 if True names attempt to remain\nconsistent otherwise there are no restrictions on name labels\nother than that they are distinct.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n<dl class=\"function\">\n<dt id=\"ibeis.algo.graph.core.testdata_infr\">\n<code class=\"descclassname\">ibeis.algo.graph.core.</code><code class=\"descname\">testdata_infr</code><span class=\"sig-paren\">(</span><em>defaultdb='PZ_MTEST'</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/core/#testdata_infr\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.core.testdata_infr\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"module-ibeis.algo.graph.demo\">\n<span id=\"ibeis-algo-graph-demo-module\"></span><h2>ibeis.algo.graph.demo module<a class=\"headerlink\" href=\"#module-ibeis.algo.graph.demo\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>TODO: separate out the tests and make this file just generate the demo data</p>\n<dl class=\"class\">\n<dt id=\"ibeis.algo.graph.demo.DummyVerif\">\n<em class=\"property\">class </em><code class=\"descclassname\">ibeis.algo.graph.demo.</code><code class=\"descname\">DummyVerif</code><span class=\"sig-paren\">(</span><em>infr</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/demo/#DummyVerif\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.demo.DummyVerif\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></p>\n<p>generates dummy scores between edges (not necesarilly in the graph)</p>\n<dl class=\"docutils\">\n<dt>CommandLine:</dt>\n<dd>python -m ibeis.algo.graph.demo DummyVerif:1</dd>\n</dl>\n<p class=\"rubric\">Example</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># ENABLE_DOCTEST</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.demo</span> <span class=\"k\">import</span> <span class=\"o\">*</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph</span> <span class=\"k\">import</span> <span class=\"n\">demo</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">networkx</span> <span class=\"k\">as</span> <span class=\"nn\">nx</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">kwargs</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">num_pccs</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">p_incon</span><span class=\"o\">=.</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">size_std</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">demo</span><span class=\"o\">.</span><span class=\"n\">demodata_infr</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">dummy_verif</span><span class=\"o\">.</span><span class=\"n\">predict_edges</span><span class=\"p\">([(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">dummy_verif</span><span class=\"o\">.</span><span class=\"n\">predict_edges</span><span class=\"p\">([(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">21</span><span class=\"p\">)])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">dummy_verif</span><span class=\"o\">.</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">task_probs</span><span class=\"p\">[</span><span class=\"s1\">&#39;match_state&#39;</span><span class=\"p\">])</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n</pre></div>\n</div>\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.demo.DummyVerif.dummy_ranker\">\n<code class=\"descname\">dummy_ranker</code><span class=\"sig-paren\">(</span><em>u</em>, <em>K=10</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/demo/#DummyVerif.dummy_ranker\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.demo.DummyVerif.dummy_ranker\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>simulates the ranking algorithm. Order is defined using the dummy vsone\nscores, but tests are only applied to randomly selected gt and gf\npairs. So, you usually will get a gt result, but you might not if all\nthe scores are bad.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.demo.DummyVerif.find_candidate_edges\">\n<code class=\"descname\">find_candidate_edges</code><span class=\"sig-paren\">(</span><em>K=10</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/demo/#DummyVerif.find_candidate_edges\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.demo.DummyVerif.find_candidate_edges\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p class=\"rubric\">Example</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># ENABLE_DOCTEST</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.demo</span> <span class=\"k\">import</span> <span class=\"o\">*</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph</span> <span class=\"k\">import</span> <span class=\"n\">demo</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">networkx</span> <span class=\"k\">as</span> <span class=\"nn\">nx</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">kwargs</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">num_pccs</span><span class=\"o\">=</span><span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">demo</span><span class=\"o\">.</span><span class=\"n\">demodata_infr</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">dummy_verif</span><span class=\"o\">.</span><span class=\"n\">find_candidate_edges</span><span class=\"p\">(</span><span class=\"n\">K</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">scores</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">dummy_verif</span><span class=\"o\">.</span><span class=\"n\">predict_edges</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.demo.DummyVerif.predict_edges\">\n<code class=\"descname\">predict_edges</code><span class=\"sig-paren\">(</span><em>edges</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/demo/#DummyVerif.predict_edges\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.demo.DummyVerif.predict_edges\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.demo.DummyVerif.predict_proba_df\">\n<code class=\"descname\">predict_proba_df</code><span class=\"sig-paren\">(</span><em>edges</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/demo/#DummyVerif.predict_proba_df\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.demo.DummyVerif.predict_proba_df\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl class=\"docutils\">\n<dt>CommandLine:</dt>\n<dd>python -m ibeis.algo.graph.demo DummyVerif.predict_edges</dd>\n</dl>\n<p class=\"rubric\">Example</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># ENABLE_DOCTEST</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.demo</span> <span class=\"k\">import</span> <span class=\"o\">*</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph</span> <span class=\"k\">import</span> <span class=\"n\">demo</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">networkx</span> <span class=\"k\">as</span> <span class=\"nn\">nx</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">kwargs</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">num_pccs</span><span class=\"o\">=</span><span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">demo</span><span class=\"o\">.</span><span class=\"n\">demodata_infr</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">verif</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">dummy_verif</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">())</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">probs</span> <span class=\"o\">=</span> <span class=\"n\">verif</span><span class=\"o\">.</span><span class=\"n\">predict_proba_df</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\">#print(&#39;scores = %r&#39; % (scores,))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\">#hashid = ut.hash_data(scores)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\">#print(&#39;hashid = %r&#39; % (hashid,))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\">#assert hashid == &#39;cdlkytilfeqgmtsihvhqwffmhczqmpil&#39;</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.demo.DummyVerif.show_score_probs\">\n<code class=\"descname\">show_score_probs</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/demo/#DummyVerif.show_score_probs\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.demo.DummyVerif.show_score_probs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl class=\"docutils\">\n<dt>CommandLine:</dt>\n<dd>python -m ibeis.algo.graph.demo DummyVerif.show_score_probs \u2013show</dd>\n</dl>\n<p class=\"rubric\">Example</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># ENABLE_DOCTEST</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.demo</span> <span class=\"k\">import</span> <span class=\"o\">*</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">ibeis</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">AnnotInference</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">verif</span> <span class=\"o\">=</span> <span class=\"n\">DummyVerif</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">verif</span><span class=\"o\">.</span><span class=\"n\">show_score_probs</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">show_if_requested</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</dd></dl>\n\n<dl class=\"function\">\n<dt id=\"ibeis.algo.graph.demo.apply_dummy_viewpoints\">\n<code class=\"descclassname\">ibeis.algo.graph.demo.</code><code class=\"descname\">apply_dummy_viewpoints</code><span class=\"sig-paren\">(</span><em>infr</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/demo/#apply_dummy_viewpoints\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.demo.apply_dummy_viewpoints\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"function\">\n<dt id=\"ibeis.algo.graph.demo.demo2\">\n<code class=\"descclassname\">ibeis.algo.graph.demo.</code><code class=\"descname\">demo2</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/demo/#demo2\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.demo.demo2\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl class=\"docutils\">\n<dt>CommandLine:</dt>\n<dd>python -m ibeis.algo.graph.demo demo2 \u2013viz\npython -m ibeis.algo.graph.demo demo2</dd>\n</dl>\n<p class=\"rubric\">Example</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># DISABLE_DOCTEST</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.demo</span> <span class=\"k\">import</span> <span class=\"o\">*</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">demo2</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"function\">\n<dt id=\"ibeis.algo.graph.demo.demodata_infr\">\n<code class=\"descclassname\">ibeis.algo.graph.demo.</code><code class=\"descname\">demodata_infr</code><span class=\"sig-paren\">(</span><em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/demo/#demodata_infr\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.demo.demodata_infr\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>kwargs = {}</p>\n<dl class=\"docutils\">\n<dt>CommandLine:</dt>\n<dd>python -m ibeis.algo.graph.demo demodata_infr \u2013show\npython -m ibeis.algo.graph.demo demodata_infr \u2013num_pccs=25\npython -m ibeis.algo.graph.demo demodata_infr \u2013profile \u2013num_pccs=100</dd>\n</dl>\n<p class=\"rubric\">Example</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.demo</span> <span class=\"k\">import</span> <span class=\"o\">*</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph</span> <span class=\"k\">import</span> <span class=\"n\">demo</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">networkx</span> <span class=\"k\">as</span> <span class=\"nn\">nx</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">kwargs</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">num_pccs</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">p_incon</span><span class=\"o\">=.</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">size_std</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">kwargs</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">argparse_dict</span><span class=\"p\">(</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">demo</span><span class=\"o\">.</span><span class=\"n\">demodata_infr</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pccs</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">positive_components</span><span class=\"p\">())</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">pccs</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s1\">&#39;num_pccs&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">nonfull_pccs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">cc</span> <span class=\"k\">for</span> <span class=\"n\">cc</span> <span class=\"ow\">in</span> <span class=\"n\">pccs</span> <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cc</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span> <span class=\"ow\">and</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">is_empty</span><span class=\"p\">(</span><span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">complement</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_graph</span><span class=\"o\">.</span><span class=\"n\">subgraph</span><span class=\"p\">(</span><span class=\"n\">cc</span><span class=\"p\">)))]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">expected_n_incon</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">nonfull_pccs</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s1\">&#39;p_incon&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">n_incon</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">inconsistent_components</span><span class=\"p\">()))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># TODO can test that we our sample num incon agrees with pop mean</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\">#sample_mean = n_incon / len(nonfull_pccs)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\">#pop_mean = kwargs[&#39;p_incon&#39;]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;status = &#39;</span> <span class=\"o\">+</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr4</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"p\">(</span><span class=\"n\">extended</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">quit_if_noshow</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">pickable</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">groupby</span><span class=\"o\">=</span><span class=\"s1\">&#39;name_label&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">show_if_requested</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<dl class=\"docutils\">\n<dt>Ignore:</dt>\n<dd><dl class=\"first docutils\">\n<dt>kwargs = {</dt>\n<dd>\u2018ccs\u2019: [[1, 2, 3], [4, 5]]</dd>\n</dl>\n<p class=\"last\">}</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"function\">\n<dt id=\"ibeis.algo.graph.demo.demodata_infr2\">\n<code class=\"descclassname\">ibeis.algo.graph.demo.</code><code class=\"descname\">demodata_infr2</code><span class=\"sig-paren\">(</span><em>defaultdb='PZ_MTEST'</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/demo/#demodata_infr2\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.demo.demodata_infr2\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"function\">\n<dt id=\"ibeis.algo.graph.demo.demodata_mtest_infr\">\n<code class=\"descclassname\">ibeis.algo.graph.demo.</code><code class=\"descname\">demodata_mtest_infr</code><span class=\"sig-paren\">(</span><em>state='empty'</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/demo/#demodata_mtest_infr\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.demo.demodata_mtest_infr\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"function\">\n<dt id=\"ibeis.algo.graph.demo.get_edge_truth\">\n<code class=\"descclassname\">ibeis.algo.graph.demo.</code><code class=\"descname\">get_edge_truth</code><span class=\"sig-paren\">(</span><em>infr</em>, <em>n1</em>, <em>n2</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/demo/#get_edge_truth\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.demo.get_edge_truth\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"function\">\n<dt id=\"ibeis.algo.graph.demo.make_demo_infr\">\n<code class=\"descclassname\">ibeis.algo.graph.demo.</code><code class=\"descname\">make_demo_infr</code><span class=\"sig-paren\">(</span><em>ccs</em>, <em>edges=[]</em>, <em>nodes=[]</em>, <em>infer=True</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/demo/#make_demo_infr\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.demo.make_demo_infr\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Depricate in favor of demodata_infr</p>\n</dd></dl>\n\n<dl class=\"function\">\n<dt id=\"ibeis.algo.graph.demo.make_dummy_infr\">\n<code class=\"descclassname\">ibeis.algo.graph.demo.</code><code class=\"descname\">make_dummy_infr</code><span class=\"sig-paren\">(</span><em>annots_per_name</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/demo/#make_dummy_infr\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.demo.make_dummy_infr\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"function\">\n<dt id=\"ibeis.algo.graph.demo.randn\">\n<code class=\"descclassname\">ibeis.algo.graph.demo.</code><code class=\"descname\">randn</code><span class=\"sig-paren\">(</span><em>mean=0</em>, <em>std=1</em>, <em>shape=[]</em>, <em>a_max=None</em>, <em>a_min=None</em>, <em>rng=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/demo/#randn\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.demo.randn\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"module-ibeis.algo.graph.mixin_dynamic\">\n<span id=\"ibeis-algo-graph-mixin-dynamic-module\"></span><h2>ibeis.algo.graph.mixin_dynamic module<a class=\"headerlink\" href=\"#module-ibeis.algo.graph.mixin_dynamic\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"class\">\n<dt id=\"ibeis.algo.graph.mixin_dynamic.Consistency\">\n<em class=\"property\">class </em><code class=\"descclassname\">ibeis.algo.graph.mixin_dynamic.</code><code class=\"descname\">Consistency</code><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_dynamic/#Consistency\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_dynamic.Consistency\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></p>\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_dynamic.Consistency.consistent_components\">\n<code class=\"descname\">consistent_components</code><span class=\"sig-paren\">(</span><em>graph=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_dynamic/#Consistency.consistent_components\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_dynamic.Consistency.consistent_components\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Generates consistent PCCs.\nThese PCCs contain no internal negative edges.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Yields:</th><td class=\"field-body\"><em>cc</em> \u2013 set: nodes within the PCC</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_dynamic.Consistency.inconsistent_components\">\n<code class=\"descname\">inconsistent_components</code><span class=\"sig-paren\">(</span><em>graph=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_dynamic/#Consistency.inconsistent_components\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_dynamic.Consistency.inconsistent_components\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Generates inconsistent PCCs.\nThese PCCs contain internal negative edges indicating an error exists.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_dynamic.Consistency.is_consistent\">\n<code class=\"descname\">is_consistent</code><span class=\"sig-paren\">(</span><em>cc</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_dynamic/#Consistency.is_consistent\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_dynamic.Consistency.is_consistent\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Determines if a PCC contains inconsistencies</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><strong>cc</strong> (<em>set</em>) \u2013 nodes in a PCC</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\">bool: returns True unless cc contains any negative edges</td>\n</tr>\n<tr class=\"field-odd field\"><th class=\"field-name\">Return type:</th><td class=\"field-body\">flag</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Example</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># ENABLE_DOCTEST</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph</span> <span class=\"k\">import</span> <span class=\"n\">demo</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">demo</span><span class=\"o\">.</span><span class=\"n\">demodata_infr</span><span class=\"p\">(</span><span class=\"n\">num_pccs</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">p_incon</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">is_consistent</span><span class=\"p\">(</span><span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">positive_components</span><span class=\"p\">()))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">demo</span><span class=\"o\">.</span><span class=\"n\">demodata_infr</span><span class=\"p\">(</span><span class=\"n\">num_pccs</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">p_incon</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">is_consistent</span><span class=\"p\">(</span><span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">positive_components</span><span class=\"p\">()))</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_dynamic.Consistency.positive_components\">\n<code class=\"descname\">positive_components</code><span class=\"sig-paren\">(</span><em>graph=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_dynamic/#Consistency.positive_components\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_dynamic.Consistency.positive_components\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Generates the positive connected compoments (PCCs) in the graph\nThese will contain both consistent and inconsinstent PCCs.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Yields:</th><td class=\"field-body\"><em>cc</em> \u2013 set: nodes within the PCC</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n<dl class=\"class\">\n<dt id=\"ibeis.algo.graph.mixin_dynamic.DynamicUpdate\">\n<em class=\"property\">class </em><code class=\"descclassname\">ibeis.algo.graph.mixin_dynamic.</code><code class=\"descname\">DynamicUpdate</code><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_dynamic/#DynamicUpdate\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_dynamic.DynamicUpdate\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></p>\n<p># 12 total possible states</p>\n<p># details of these states.\nPOSITIVE, WITHIN, CONSISTENT</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li>pos-within never changes PCC status</li>\n<li>never introduces inconsistency</li>\n<li>might add pos-redun</li>\n</ul>\n</div></blockquote>\n<dl class=\"docutils\">\n<dt>POSITIVE, WITHIN, INCONSISTENT</dt>\n<dd><ul class=\"first last simple\">\n<li>pos-within never changes PCC status</li>\n<li>might fix inconsistent edge</li>\n</ul>\n</dd>\n<dt>POSITIVE, BETWEEN, BOTH_CONSISTENT</dt>\n<dd><ul class=\"first last simple\">\n<li>pos-between edge always does merge</li>\n</ul>\n</dd>\n<dt>POSITIVE, BETWEEN, ANY_INCONSISTENT</dt>\n<dd><ul class=\"first last simple\">\n<li>pos-between edge always does merge</li>\n<li>pos-between never fixes inconsistency</li>\n</ul>\n</dd>\n<dt>NEGATIVE, WITHIN, CONSISTENT</dt>\n<dd><ul class=\"first last simple\">\n<li>might split PCC, results will be consistent</li>\n<li>might causes an inconsistency</li>\n</ul>\n</dd>\n<dt>NEGATIVE, WITHIN, INCONSISTENT</dt>\n<dd><ul class=\"first last simple\">\n<li>might split PCC, results may be inconsistent</li>\n</ul>\n</dd>\n<dt>NEGATIVE, BETWEEN, BOTH_CONSISTENT</dt>\n<dd><ul class=\"first last simple\">\n<li>might add neg-redun</li>\n</ul>\n</dd>\n<dt>NEGATIVE, BETWEEN, ANY_INCONSISTENT</dt>\n<dd><ul class=\"first last simple\">\n<li>might add to incon-neg-external</li>\n<li>neg-redun not tracked for incon.</li>\n</ul>\n</dd>\n<dt>UNINFERABLE, WITHIN, CONSISTENT</dt>\n<dd><ul class=\"first last simple\">\n<li>might remove pos-redun</li>\n<li>might split PCC, results will be consistent</li>\n</ul>\n</dd>\n<dt>UNINFERABLE, WITHIN, INCONSISTENT</dt>\n<dd><ul class=\"first last simple\">\n<li>might split PCC, results may be inconsistent</li>\n</ul>\n</dd>\n<dt>UNINFERABLE, BETWEEN, BOTH_CONSISTENT</dt>\n<dd><ul class=\"first last simple\">\n<li>might remove neg-redun</li>\n</ul>\n</dd>\n<dt>UNINFERABLE, BETWEEN, ANY_INCONSISTENT</dt>\n<dd><ul class=\"first last simple\">\n<li>might remove incon-neg-external</li>\n</ul>\n</dd>\n</dl>\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_dynamic.DynamicUpdate.add_review_edge\">\n<code class=\"descname\">add_review_edge</code><span class=\"sig-paren\">(</span><em>edge</em>, <em>decision</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_dynamic/#DynamicUpdate.add_review_edge\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_dynamic.DynamicUpdate.add_review_edge\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Adds edge to the dynamically connected graphs and updates dynamically\ninferrable edge attributes.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_dynamic.DynamicUpdate.ensure_edges_from\">\n<code class=\"descname\">ensure_edges_from</code><span class=\"sig-paren\">(</span><em>edges</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_dynamic/#DynamicUpdate.ensure_edges_from\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_dynamic.DynamicUpdate.ensure_edges_from\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Finds edges that don\u2019t exist and adds them as unreviwed edges.\nReturns new edges that were added.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_dynamic.DynamicUpdate.on_between\">\n<code class=\"descname\">on_between</code><span class=\"sig-paren\">(</span><em>edge</em>, <em>decision</em>, <em>prev_decision</em>, <em>nid1</em>, <em>nid2</em>, <em>merge_nid=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_dynamic/#DynamicUpdate.on_between\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_dynamic.DynamicUpdate.on_between\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Callback when a review is made between two PCCs</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_dynamic.DynamicUpdate.on_within\">\n<code class=\"descname\">on_within</code><span class=\"sig-paren\">(</span><em>edge</em>, <em>decision</em>, <em>prev_decision</em>, <em>nid</em>, <em>split_nids=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_dynamic/#DynamicUpdate.on_within\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_dynamic.DynamicUpdate.on_within\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Callback when a review is made inside a PCC</p>\n</dd></dl>\n\n</dd></dl>\n\n<dl class=\"class\">\n<dt id=\"ibeis.algo.graph.mixin_dynamic.NonDynamicUpdate\">\n<em class=\"property\">class </em><code class=\"descclassname\">ibeis.algo.graph.mixin_dynamic.</code><code class=\"descname\">NonDynamicUpdate</code><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_dynamic/#NonDynamicUpdate\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_dynamic.NonDynamicUpdate\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></p>\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_dynamic.NonDynamicUpdate.apply_nondynamic_update\">\n<code class=\"descname\">apply_nondynamic_update</code><span class=\"sig-paren\">(</span><em>graph=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_dynamic/#NonDynamicUpdate.apply_nondynamic_update\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_dynamic.NonDynamicUpdate.apply_nondynamic_update\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Recomputes all dynamic bookkeeping for a graph in any state.\nThis ensures that subsequent dyanmic inference can be applied.</p>\n<dl class=\"docutils\">\n<dt>CommandLine:</dt>\n<dd>python -m ibeis.algo.graph.mixin_dynamic apply_nondynamic_update</dd>\n</dl>\n<p class=\"rubric\">Example</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># ENABLE_DOCTEST</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.mixin_dynamic</span> <span class=\"k\">import</span> <span class=\"o\">*</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph</span> <span class=\"k\">import</span> <span class=\"n\">demo</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">num_pccs</span> <span class=\"o\">=</span> <span class=\"mi\">250</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">kwargs</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">num_pccs</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">p_incon</span><span class=\"o\">=.</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">demo</span><span class=\"o\">.</span><span class=\"n\">demodata_infr</span><span class=\"p\">(</span><span class=\"n\">infer</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">graph</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">apply_nondynamic_update</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">assert_neg_metagraph</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_dynamic.NonDynamicUpdate.categorize_edges\">\n<code class=\"descname\">categorize_edges</code><span class=\"sig-paren\">(</span><em>graph=None</em>, <em>ne_to_edges=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_dynamic/#NonDynamicUpdate.categorize_edges\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_dynamic.NonDynamicUpdate.categorize_edges\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Non-dynamically computes the status of each edge in the graph.\nThis is can be used to verify the dynamic computations and update when\nthe dynamic state is lost.</p>\n<dl class=\"docutils\">\n<dt>CommandLine:</dt>\n<dd>python -m ibeis.algo.graph.mixin_dynamic categorize_edges \u2013profile</dd>\n</dl>\n<p class=\"rubric\">Example</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># ENABLE_DOCTEST</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.mixin_dynamic</span> <span class=\"k\">import</span> <span class=\"o\">*</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph</span> <span class=\"k\">import</span> <span class=\"n\">demo</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">num_pccs</span> <span class=\"o\">=</span> <span class=\"mi\">250</span> <span class=\"k\">if</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">get_argflag</span><span class=\"p\">(</span><span class=\"s1\">&#39;--profile&#39;</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"mi\">100</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">kwargs</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">num_pccs</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">p_incon</span><span class=\"o\">=.</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">demo</span><span class=\"o\">.</span><span class=\"n\">demodata_infr</span><span class=\"p\">(</span><span class=\"n\">infer</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">graph</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cat</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">categorize_edges</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_dynamic.NonDynamicUpdate.collapsed_meta_edges\">\n<code class=\"descname\">collapsed_meta_edges</code><span class=\"sig-paren\">(</span><em>graph=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_dynamic/#NonDynamicUpdate.collapsed_meta_edges\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_dynamic.NonDynamicUpdate.collapsed_meta_edges\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Collapse the grah such that each PCC is a node. Get a list of edges\nwithin/between each PCC.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_dynamic.NonDynamicUpdate.rrr\">\n<code class=\"descname\">rrr</code><span class=\"sig-paren\">(</span><em>verbose=True</em>, <em>reload_module=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_dynamic.NonDynamicUpdate.rrr\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>special class reloading function\nThis function is often injected as rrr of classes</p>\n</dd></dl>\n\n</dd></dl>\n\n<dl class=\"class\">\n<dt id=\"ibeis.algo.graph.mixin_dynamic.Recovery\">\n<em class=\"property\">class </em><code class=\"descclassname\">ibeis.algo.graph.mixin_dynamic.</code><code class=\"descname\">Recovery</code><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_dynamic/#Recovery\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_dynamic.Recovery\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></p>\n<p>recovery funcs</p>\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_dynamic.Recovery.hypothesis_errors\">\n<code class=\"descname\">hypothesis_errors</code><span class=\"sig-paren\">(</span><em>pos_subgraph</em>, <em>neg_edges</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_dynamic/#Recovery.hypothesis_errors\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_dynamic.Recovery.hypothesis_errors\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_dynamic.Recovery.is_recovering\">\n<code class=\"descname\">is_recovering</code><span class=\"sig-paren\">(</span><em>edge=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_dynamic/#Recovery.is_recovering\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_dynamic.Recovery.is_recovering\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Checks to see if the graph is inconsinsistent.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><strong>edge</strong> (<em>None</em>) \u2013 If None, then returns True if the graph contains any\ninconsistency. Otherwise, returns True if the edge is related\nto an inconsistent component via a positive or negative\nconnection.</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\">flag</td>\n</tr>\n<tr class=\"field-odd field\"><th class=\"field-name\">Return type:</th><td class=\"field-body\">bool</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"docutils\">\n<dt>CommandLine:</dt>\n<dd>python -m ibeis.algo.graph.mixin_dynamic is_recovering</dd>\n<dt>Doctest:</dt>\n<dd><div class=\"first last highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.mixin_dynamic</span> <span class=\"k\">import</span> <span class=\"o\">*</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph</span> <span class=\"k\">import</span> <span class=\"n\">demo</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">demo</span><span class=\"o\">.</span><span class=\"n\">demodata_infr</span><span class=\"p\">(</span><span class=\"n\">num_pccs</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">ignore_pair</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">ensure_cliques</span><span class=\"p\">(</span><span class=\"n\">meta_decision</span><span class=\"o\">=</span><span class=\"n\">SAME</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">positive_components</span><span class=\"p\">())</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">is_recovering</span><span class=\"p\">()</span> <span class=\"ow\">is</span> <span class=\"kc\">False</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">((</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]),</span> <span class=\"n\">NEGTV</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">is_recovering</span><span class=\"p\">()</span> <span class=\"ow\">is</span> <span class=\"kc\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">is_recovering</span><span class=\"p\">((</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]))</span> <span class=\"ow\">is</span> <span class=\"kc\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">is_recovering</span><span class=\"p\">((</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">b</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]))</span> <span class=\"ow\">is</span> <span class=\"kc\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">is_recovering</span><span class=\"p\">((</span><span class=\"n\">b</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">b</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]))</span> <span class=\"ow\">is</span> <span class=\"kc\">False</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">((</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">b</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]),</span> <span class=\"n\">NEGTV</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">is_recovering</span><span class=\"p\">((</span><span class=\"n\">b</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">b</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]))</span> <span class=\"ow\">is</span> <span class=\"kc\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">is_recovering</span><span class=\"p\">((</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]))</span> <span class=\"ow\">is</span> <span class=\"kc\">False</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">((</span><span class=\"n\">b</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">c</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]),</span> <span class=\"n\">NEGTV</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">is_recovering</span><span class=\"p\">((</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]))</span> <span class=\"ow\">is</span> <span class=\"kc\">False</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr4</span><span class=\"p\">({</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"s1\">&#39;pccs&#39;</span><span class=\"p\">:</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">positive_components</span><span class=\"p\">())),</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"s1\">&#39;iccs&#39;</span><span class=\"p\">:</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">inconsistent_components</span><span class=\"p\">())),</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">},</span> <span class=\"n\">nobr</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">si</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">itemsep</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n<span class=\"go\">iccs: [{1,2,3,4}],</span>\n<span class=\"go\">pccs: [{5,6,7,8},{9,10,11,12},{13,14,15,16},{1,2,3,4}],</span>\n</pre></div>\n</div>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_dynamic.Recovery.maybe_error_edges\">\n<code class=\"descname\">maybe_error_edges</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_dynamic/#Recovery.maybe_error_edges\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_dynamic.Recovery.maybe_error_edges\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n<dl class=\"class\">\n<dt id=\"ibeis.algo.graph.mixin_dynamic.Redundancy\">\n<em class=\"property\">class </em><code class=\"descclassname\">ibeis.algo.graph.mixin_dynamic.</code><code class=\"descname\">Redundancy</code><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_dynamic/#Redundancy\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_dynamic.Redundancy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ibeis.algo.graph.mixin_dynamic._RedundancyComputers</span></code></p>\n<p>methods for dynamic redundancy book-keeping</p>\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_dynamic.Redundancy.filter_edges_flagged_as_redun\">\n<code class=\"descname\">filter_edges_flagged_as_redun</code><span class=\"sig-paren\">(</span><em>edges</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_dynamic/#Redundancy.filter_edges_flagged_as_redun\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_dynamic.Redundancy.filter_edges_flagged_as_redun\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns only edges that are not flagged as redundant.\nUses bookkeeping structures</p>\n<p class=\"rubric\">Example</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># ENABLE_DOCTEST</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.mixin_dynamic</span> <span class=\"k\">import</span> <span class=\"o\">*</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph</span> <span class=\"k\">import</span> <span class=\"n\">demo</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">demo</span><span class=\"o\">.</span><span class=\"n\">demodata_infr</span><span class=\"p\">(</span><span class=\"n\">num_pccs</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">clear_edges</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">ensure_cliques</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">clear_feedback</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr4</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"p\">()))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">nonredun_edges</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">filter_edges_flagged_as_redun</span><span class=\"p\">(</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">unreviewed_graph</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">()))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">nonredun_edges</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">6</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_dynamic.Redundancy.is_flagged_as_redun\">\n<code class=\"descname\">is_flagged_as_redun</code><span class=\"sig-paren\">(</span><em>edge</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_dynamic/#Redundancy.is_flagged_as_redun\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_dynamic.Redundancy.is_flagged_as_redun\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Tests redundancy against bookkeeping structure against cache</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_dynamic.Redundancy.rrr\">\n<code class=\"descname\">rrr</code><span class=\"sig-paren\">(</span><em>verbose=True</em>, <em>reload_module=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_dynamic.Redundancy.rrr\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>special class reloading function\nThis function is often injected as rrr of classes</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_dynamic.Redundancy.update_extern_neg_redun\">\n<code class=\"descname\">update_extern_neg_redun</code><span class=\"sig-paren\">(</span><em>nid</em>, <em>may_add=True</em>, <em>may_remove=True</em>, <em>force=False</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_dynamic/#Redundancy.update_extern_neg_redun\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_dynamic.Redundancy.update_extern_neg_redun\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Checks if <cite>nid</cite> is negative redundant to any other <cite>cc</cite> it has at least\none negative review to.\n(TODO: NEG REDUN CAN BE CONSOLIDATED VIA NEG-META-GRAPH)</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_dynamic.Redundancy.update_neg_redun_to\">\n<code class=\"descname\">update_neg_redun_to</code><span class=\"sig-paren\">(</span><em>nid1</em>, <em>other_nids</em>, <em>may_add=True</em>, <em>may_remove=True</em>, <em>force=False</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_dynamic/#Redundancy.update_neg_redun_to\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_dynamic.Redundancy.update_neg_redun_to\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Checks if nid1 is neg redundant to other_nids.\nEdges are either removed or added to the queue appropriately.\n(TODO: NEG REDUN CAN BE CONSOLIDATED VIA NEG-META-GRAPH)</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_dynamic.Redundancy.update_pos_redun\">\n<code class=\"descname\">update_pos_redun</code><span class=\"sig-paren\">(</span><em>nid</em>, <em>may_add=True</em>, <em>may_remove=True</em>, <em>force=False</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_dynamic/#Redundancy.update_pos_redun\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_dynamic.Redundancy.update_pos_redun\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Checks if a PCC is newly, or no longer positive redundant.\nEdges are either removed or added to the queue appropriately.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"module-ibeis.algo.graph.mixin_groundtruth\">\n<span id=\"ibeis-algo-graph-mixin-groundtruth-module\"></span><h2>ibeis.algo.graph.mixin_groundtruth module<a class=\"headerlink\" href=\"#module-ibeis.algo.graph.mixin_groundtruth\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"class\">\n<dt id=\"ibeis.algo.graph.mixin_groundtruth.Groundtruth\">\n<em class=\"property\">class </em><code class=\"descclassname\">ibeis.algo.graph.mixin_groundtruth.</code><code class=\"descname\">Groundtruth</code><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_groundtruth/#Groundtruth\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_groundtruth.Groundtruth\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></p>\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_groundtruth.Groundtruth.apply_edge_truth\">\n<code class=\"descname\">apply_edge_truth</code><span class=\"sig-paren\">(</span><em>edges=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_groundtruth/#Groundtruth.apply_edge_truth\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_groundtruth.Groundtruth.apply_edge_truth\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_groundtruth.Groundtruth.edge_attr_df\">\n<code class=\"descname\">edge_attr_df</code><span class=\"sig-paren\">(</span><em>key</em>, <em>edges=None</em>, <em>default=NoParam</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_groundtruth/#Groundtruth.edge_attr_df\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_groundtruth.Groundtruth.edge_attr_df\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>constructs DataFrame using current predictions</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_groundtruth.Groundtruth.is_comparable\">\n<code class=\"descname\">is_comparable</code><span class=\"sig-paren\">(</span><em>aid_pairs</em>, <em>allow_guess=True</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_groundtruth/#Groundtruth.is_comparable\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_groundtruth.Groundtruth.is_comparable\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Guesses by default when real comparable information is not available.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_groundtruth.Groundtruth.is_photobomb\">\n<code class=\"descname\">is_photobomb</code><span class=\"sig-paren\">(</span><em>aid_pairs</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_groundtruth/#Groundtruth.is_photobomb\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_groundtruth.Groundtruth.is_photobomb\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_groundtruth.Groundtruth.is_same\">\n<code class=\"descname\">is_same</code><span class=\"sig-paren\">(</span><em>aid_pairs</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_groundtruth/#Groundtruth.is_same\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_groundtruth.Groundtruth.is_same\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_groundtruth.Groundtruth.match_state_df\">\n<code class=\"descname\">match_state_df</code><span class=\"sig-paren\">(</span><em>index</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_groundtruth/#Groundtruth.match_state_df\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_groundtruth.Groundtruth.match_state_df\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns groundtruth state based on ibeis controller</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_groundtruth.Groundtruth.match_state_gt\">\n<code class=\"descname\">match_state_gt</code><span class=\"sig-paren\">(</span><em>edge</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_groundtruth/#Groundtruth.match_state_gt\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_groundtruth.Groundtruth.match_state_gt\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"module-ibeis.algo.graph.mixin_helpers\">\n<span id=\"ibeis-algo-graph-mixin-helpers-module\"></span><h2>ibeis.algo.graph.mixin_helpers module<a class=\"headerlink\" href=\"#module-ibeis.algo.graph.mixin_helpers\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"class\">\n<dt id=\"ibeis.algo.graph.mixin_helpers.AssertInvariants\">\n<em class=\"property\">class </em><code class=\"descclassname\">ibeis.algo.graph.mixin_helpers.</code><code class=\"descname\">AssertInvariants</code><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_helpers/#AssertInvariants\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_helpers.AssertInvariants\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></p>\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_helpers.AssertInvariants.assert_consistency_invariant\">\n<code class=\"descname\">assert_consistency_invariant</code><span class=\"sig-paren\">(</span><em>msg=''</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_helpers/#AssertInvariants.assert_consistency_invariant\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_helpers.AssertInvariants.assert_consistency_invariant\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_helpers.AssertInvariants.assert_disjoint_invariant\">\n<code class=\"descname\">assert_disjoint_invariant</code><span class=\"sig-paren\">(</span><em>msg=''</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_helpers/#AssertInvariants.assert_disjoint_invariant\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_helpers.AssertInvariants.assert_disjoint_invariant\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_helpers.AssertInvariants.assert_edge\">\n<code class=\"descname\">assert_edge</code><span class=\"sig-paren\">(</span><em>edge</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_helpers/#AssertInvariants.assert_edge\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_helpers.AssertInvariants.assert_edge\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_helpers.AssertInvariants.assert_invariants\">\n<code class=\"descname\">assert_invariants</code><span class=\"sig-paren\">(</span><em>msg=''</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_helpers/#AssertInvariants.assert_invariants\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_helpers.AssertInvariants.assert_invariants\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_helpers.AssertInvariants.assert_neg_metagraph\">\n<code class=\"descname\">assert_neg_metagraph</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_helpers/#AssertInvariants.assert_neg_metagraph\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_helpers.AssertInvariants.assert_neg_metagraph\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Checks that the negative metgraph is correctly book-kept.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_helpers.AssertInvariants.assert_recovery_invariant\">\n<code class=\"descname\">assert_recovery_invariant</code><span class=\"sig-paren\">(</span><em>msg=''</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_helpers/#AssertInvariants.assert_recovery_invariant\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_helpers.AssertInvariants.assert_recovery_invariant\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_helpers.AssertInvariants.assert_union_invariant\">\n<code class=\"descname\">assert_union_invariant</code><span class=\"sig-paren\">(</span><em>msg=''</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_helpers/#AssertInvariants.assert_union_invariant\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_helpers.AssertInvariants.assert_union_invariant\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n<dl class=\"class\">\n<dt id=\"ibeis.algo.graph.mixin_helpers.AttrAccess\">\n<em class=\"property\">class </em><code class=\"descclassname\">ibeis.algo.graph.mixin_helpers.</code><code class=\"descname\">AttrAccess</code><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_helpers/#AttrAccess\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_helpers.AttrAccess\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></p>\n<p>Contains non-core helper functions</p>\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_helpers.AttrAccess.edges\">\n<code class=\"descname\">edges</code><span class=\"sig-paren\">(</span><em>data=False</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_helpers/#AttrAccess.edges\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_helpers.AttrAccess.edges\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_helpers.AttrAccess.gen_edge_attrs\">\n<code class=\"descname\">gen_edge_attrs</code><span class=\"sig-paren\">(</span><em>key</em>, <em>edges=None</em>, <em>default=NoParam</em>, <em>on_missing=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_helpers/#AttrAccess.gen_edge_attrs\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_helpers.AttrAccess.gen_edge_attrs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>maybe change to gen edge items</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_helpers.AttrAccess.gen_edge_values\">\n<code class=\"descname\">gen_edge_values</code><span class=\"sig-paren\">(</span><em>key</em>, <em>edges=None</em>, <em>default=NoParam</em>, <em>on_missing='error'</em>, <em>on_keyerr='default'</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_helpers/#AttrAccess.gen_edge_values\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_helpers.AttrAccess.gen_edge_values\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_helpers.AttrAccess.gen_node_attrs\">\n<code class=\"descname\">gen_node_attrs</code><span class=\"sig-paren\">(</span><em>key</em>, <em>nodes=None</em>, <em>default=NoParam</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_helpers/#AttrAccess.gen_node_attrs\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_helpers.AttrAccess.gen_node_attrs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_helpers.AttrAccess.gen_node_values\">\n<code class=\"descname\">gen_node_values</code><span class=\"sig-paren\">(</span><em>key</em>, <em>nodes</em>, <em>default=NoParam</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_helpers/#AttrAccess.gen_node_values\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_helpers.AttrAccess.gen_node_values\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_helpers.AttrAccess.get_annot_attrs\">\n<code class=\"descname\">get_annot_attrs</code><span class=\"sig-paren\">(</span><em>key</em>, <em>aids</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_helpers/#AttrAccess.get_annot_attrs\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_helpers.AttrAccess.get_annot_attrs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Wrapper around get_node_attrs specific to annotation nodes</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_helpers.AttrAccess.get_edge_attr\">\n<code class=\"descname\">get_edge_attr</code><span class=\"sig-paren\">(</span><em>edge</em>, <em>key</em>, <em>default=NoParam</em>, <em>on_missing='error'</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_helpers/#AttrAccess.get_edge_attr\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_helpers.AttrAccess.get_edge_attr\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>single edge getter helper</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_helpers.AttrAccess.get_edge_attrs\">\n<code class=\"descname\">get_edge_attrs</code><span class=\"sig-paren\">(</span><em>key</em>, <em>edges=None</em>, <em>default=NoParam</em>, <em>on_missing=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_helpers/#AttrAccess.get_edge_attrs\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_helpers.AttrAccess.get_edge_attrs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Networkx edge getter helper</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_helpers.AttrAccess.get_edge_data\">\n<code class=\"descname\">get_edge_data</code><span class=\"sig-paren\">(</span><em>edge</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_helpers/#AttrAccess.get_edge_data\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_helpers.AttrAccess.get_edge_data\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_helpers.AttrAccess.get_edge_dataframe\">\n<code class=\"descname\">get_edge_dataframe</code><span class=\"sig-paren\">(</span><em>edges=None</em>, <em>all=False</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_helpers/#AttrAccess.get_edge_dataframe\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_helpers.AttrAccess.get_edge_dataframe\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_helpers.AttrAccess.get_edge_df_text\">\n<code class=\"descname\">get_edge_df_text</code><span class=\"sig-paren\">(</span><em>edges=None</em>, <em>highlight=True</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_helpers/#AttrAccess.get_edge_df_text\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_helpers.AttrAccess.get_edge_df_text\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_helpers.AttrAccess.get_edges_where_eq\">\n<code class=\"descname\">get_edges_where_eq</code><span class=\"sig-paren\">(</span><em>key</em>, <em>val</em>, <em>edges=None</em>, <em>default=NoParam</em>, <em>on_missing=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_helpers/#AttrAccess.get_edges_where_eq\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_helpers.AttrAccess.get_edges_where_eq\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_helpers.AttrAccess.get_edges_where_ne\">\n<code class=\"descname\">get_edges_where_ne</code><span class=\"sig-paren\">(</span><em>key</em>, <em>val</em>, <em>edges=None</em>, <em>default=NoParam</em>, <em>on_missing=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_helpers/#AttrAccess.get_edges_where_ne\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_helpers.AttrAccess.get_edges_where_ne\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_helpers.AttrAccess.get_node_attrs\">\n<code class=\"descname\">get_node_attrs</code><span class=\"sig-paren\">(</span><em>key</em>, <em>nodes=None</em>, <em>default=NoParam</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_helpers/#AttrAccess.get_node_attrs\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_helpers.AttrAccess.get_node_attrs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Networkx node getter helper</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_helpers.AttrAccess.get_nonvisual_edge_data\">\n<code class=\"descname\">get_nonvisual_edge_data</code><span class=\"sig-paren\">(</span><em>edge</em>, <em>on_missing='filter'</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_helpers/#AttrAccess.get_nonvisual_edge_data\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_helpers.AttrAccess.get_nonvisual_edge_data\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_helpers.AttrAccess.has_edge\">\n<code class=\"descname\">has_edge</code><span class=\"sig-paren\">(</span><em>edge</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_helpers/#AttrAccess.has_edge\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_helpers.AttrAccess.has_edge\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_helpers.AttrAccess.set_edge_attr\">\n<code class=\"descname\">set_edge_attr</code><span class=\"sig-paren\">(</span><em>edge</em>, <em>attr</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_helpers/#AttrAccess.set_edge_attr\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_helpers.AttrAccess.set_edge_attr\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>single edge setter helper</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_helpers.AttrAccess.set_edge_attrs\">\n<code class=\"descname\">set_edge_attrs</code><span class=\"sig-paren\">(</span><em>key</em>, <em>edge_to_prop</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_helpers/#AttrAccess.set_edge_attrs\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_helpers.AttrAccess.set_edge_attrs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Networkx edge setter helper</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_helpers.AttrAccess.set_node_attrs\">\n<code class=\"descname\">set_node_attrs</code><span class=\"sig-paren\">(</span><em>key</em>, <em>node_to_prop</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_helpers/#AttrAccess.set_node_attrs\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_helpers.AttrAccess.set_node_attrs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Networkx node setter helper</p>\n</dd></dl>\n\n</dd></dl>\n\n<dl class=\"class\">\n<dt id=\"ibeis.algo.graph.mixin_helpers.Convenience\">\n<em class=\"property\">class </em><code class=\"descclassname\">ibeis.algo.graph.mixin_helpers.</code><code class=\"descname\">Convenience</code><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_helpers/#Convenience\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_helpers.Convenience\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></p>\n<dl class=\"staticmethod\">\n<dt id=\"ibeis.algo.graph.mixin_helpers.Convenience.e_\">\n<em class=\"property\">static </em><code class=\"descname\">e_</code><span class=\"sig-paren\">(</span><em>u</em>, <em>v</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_helpers/#Convenience.e_\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_helpers.Convenience.e_\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_helpers.Convenience.edge_tag_hist\">\n<code class=\"descname\">edge_tag_hist</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_helpers/#Convenience.edge_tag_hist\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_helpers.Convenience.edge_tag_hist\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"ibeis.algo.graph.mixin_helpers.Convenience.incomp_graph\">\n<code class=\"descname\">incomp_graph</code><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_helpers.Convenience.incomp_graph\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"ibeis.algo.graph.mixin_helpers.Convenience.neg_graph\">\n<code class=\"descname\">neg_graph</code><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_helpers.Convenience.neg_graph\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_helpers.Convenience.node_tag_hist\">\n<code class=\"descname\">node_tag_hist</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_helpers/#Convenience.node_tag_hist\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_helpers.Convenience.node_tag_hist\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_helpers.Convenience.pair_connection_info\">\n<code class=\"descname\">pair_connection_info</code><span class=\"sig-paren\">(</span><em>aid1</em>, <em>aid2</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_helpers/#Convenience.pair_connection_info\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_helpers.Convenience.pair_connection_info\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Helps debugging when ibs.nids has info that annotmatch/staging do not</p>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.mixin_helpers</span> <span class=\"k\">import</span> <span class=\"o\">*</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">ibeis</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">opendb</span><span class=\"p\">(</span><span class=\"n\">defaultdb</span><span class=\"o\">=</span><span class=\"s1\">&#39;GZ_Master1&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">AnnotInference</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"s1\">&#39;all&#39;</span><span class=\"p\">,</span> <span class=\"n\">autoinit</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">reset_feedback</span><span class=\"p\">(</span><span class=\"s1\">&#39;staging&#39;</span><span class=\"p\">,</span> <span class=\"n\">apply</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">relabel_using_reviews</span><span class=\"p\">(</span><span class=\"n\">rectify</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span> <span class=\"o\">=</span> <span class=\"mi\">1349</span><span class=\"p\">,</span> <span class=\"mi\">3087</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span> <span class=\"o\">=</span> <span class=\"mi\">1535</span><span class=\"p\">,</span> <span class=\"mi\">2549</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pair_connection_info</span><span class=\"p\">(</span><span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span> <span class=\"o\">=</span> <span class=\"mi\">4055</span><span class=\"p\">,</span> <span class=\"mi\">4286</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span> <span class=\"o\">=</span> <span class=\"mi\">6555</span><span class=\"p\">,</span> <span class=\"mi\">6882</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span> <span class=\"o\">=</span> <span class=\"mi\">712</span><span class=\"p\">,</span> <span class=\"mi\">803</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span> <span class=\"o\">=</span> <span class=\"mi\">3883</span><span class=\"p\">,</span> <span class=\"mi\">4220</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pair_connection_info</span><span class=\"p\">(</span><span class=\"n\">aid1</span><span class=\"p\">,</span> <span class=\"n\">aid2</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"ibeis.algo.graph.mixin_helpers.Convenience.pos_graph\">\n<code class=\"descname\">pos_graph</code><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_helpers.Convenience.pos_graph\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_helpers.Convenience.print_graph_connections\">\n<code class=\"descname\">print_graph_connections</code><span class=\"sig-paren\">(</span><em>label='orig_name_label'</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_helpers/#Convenience.print_graph_connections\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_helpers.Convenience.print_graph_connections\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>label = \u2018orig_name_label\u2019</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_helpers.Convenience.print_graph_info\">\n<code class=\"descname\">print_graph_info</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_helpers/#Convenience.print_graph_info\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_helpers.Convenience.print_graph_info\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_helpers.Convenience.print_within_connection_info\">\n<code class=\"descname\">print_within_connection_info</code><span class=\"sig-paren\">(</span><em>edge=None</em>, <em>cc=None</em>, <em>aid=None</em>, <em>nid=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_helpers/#Convenience.print_within_connection_info\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_helpers.Convenience.print_within_connection_info\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"ibeis.algo.graph.mixin_helpers.Convenience.unknown_graph\">\n<code class=\"descname\">unknown_graph</code><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_helpers.Convenience.unknown_graph\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"ibeis.algo.graph.mixin_helpers.Convenience.unreviewed_graph\">\n<code class=\"descname\">unreviewed_graph</code><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_helpers.Convenience.unreviewed_graph\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n<dl class=\"class\">\n<dt id=\"ibeis.algo.graph.mixin_helpers.DummyEdges\">\n<em class=\"property\">class </em><code class=\"descclassname\">ibeis.algo.graph.mixin_helpers.</code><code class=\"descname\">DummyEdges</code><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_helpers/#DummyEdges\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_helpers.DummyEdges\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></p>\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_helpers.DummyEdges.ensure_cliques\">\n<code class=\"descname\">ensure_cliques</code><span class=\"sig-paren\">(</span><em>label='name_label'</em>, <em>meta_decision=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_helpers/#DummyEdges.ensure_cliques\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_helpers.DummyEdges.ensure_cliques\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Force each name label to be a clique.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first last simple\">\n<li><strong>label</strong> (<em>str</em>) \u2013 node attribute to use as the group id to form the\ncliques.</li>\n<li><strong>meta_decision</strong> (<em>str</em>) \u2013 if specified adds clique edges as feedback\nitems with this decision. Otherwise the edges are only\nexplicitly added to the graph.</li>\n<li><strong>infr</strong> \u2013 </li>\n<li><strong>label</strong> \u2013 (default = \u2018name_label\u2019)</li>\n<li><strong>decision</strong> (<em>str</em>) \u2013 (default = \u2018unreviewed\u2019)</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"docutils\">\n<dt>CommandLine:</dt>\n<dd>python -m ibeis.algo.graph.mixin_helpers ensure_cliques</dd>\n<dt>Doctest:</dt>\n<dd><div class=\"first last highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.mixin_helpers</span> <span class=\"k\">import</span> <span class=\"o\">*</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph</span> <span class=\"k\">import</span> <span class=\"n\">demo</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">label</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;name_label&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">demo</span><span class=\"o\">.</span><span class=\"n\">demodata_infr</span><span class=\"p\">(</span><span class=\"n\">num_pccs</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"p\">())</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"p\">()[</span><span class=\"s1\">&#39;nEdges&#39;</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"mi\">33</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">ensure_cliques</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"p\">())</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"p\">()[</span><span class=\"s1\">&#39;nEdges&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">33</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"p\">()[</span><span class=\"s1\">&#39;nUnrevEdges&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">12</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">find_clique_edges</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"p\">)))</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">ensure_cliques</span><span class=\"p\">(</span><span class=\"n\">meta_decision</span><span class=\"o\">=</span><span class=\"n\">SAME</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"p\">()[</span><span class=\"s1\">&#39;nUnrevEdges&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">find_clique_edges</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"p\">)))</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n</pre></div>\n</div>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_helpers.DummyEdges.ensure_full\">\n<code class=\"descname\">ensure_full</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_helpers/#DummyEdges.ensure_full\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_helpers.DummyEdges.ensure_full\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Explicitly places all edges, but does not make any feedback items</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_helpers.DummyEdges.ensure_mst\">\n<code class=\"descname\">ensure_mst</code><span class=\"sig-paren\">(</span><em>label='name_label'</em>, <em>meta_decision='same'</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_helpers/#DummyEdges.ensure_mst\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_helpers.DummyEdges.ensure_mst\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Ensures that all names are names are connected.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first last simple\">\n<li><strong>label</strong> (<em>str</em>) \u2013 node attribute to use as the group id to form the mst.</li>\n<li><strong>meta_decision</strong> (<em>str</em>) \u2013 if specified adds clique edges as feedback\nitems with this decision. Otherwise the edges are only\nexplicitly added to the graph.  This makes feedback items with\nuser_id=algo:mst and with a confidence of guessing.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"docutils\">\n<dt>Ignore:</dt>\n<dd><p class=\"first\">annots = ibs.annots(infr.aids)\ndef fix_name(n):</p>\n<blockquote>\n<div>import re\nn = re.sub(\u2018  <em>\u2018, \u2018 \u2018, n)\nreturn re.sub(\u2018 *-? *BBQ[0-9]</em>\u2019, \u2018\u2019, n)</div></blockquote>\n<p>ut.fix_embed_globals()\nnew_names = [fix_name(n) for n in annots.names]\nset(new_names)</p>\n<p>annots.names = new_names</p>\n<p>infr.set_node_attrs(\u2018name_fix\u2019, ut.dzip(infr.aids, new_names))\nlabel = \u2018name_fix\u2019\ninfr.ensure_mst(label)</p>\n<p class=\"last\">infr.set_node_attrs(\u2018name_label\u2019, ut.dzip(infr.aids, annots.nids))</p>\n</dd>\n<dt>Ignore:</dt>\n<dd>label = \u2018name_label\u2019</dd>\n<dt>Doctest:</dt>\n<dd><div class=\"first last highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.mixin_dynamic</span> <span class=\"k\">import</span> <span class=\"o\">*</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph</span> <span class=\"k\">import</span> <span class=\"n\">demo</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">demo</span><span class=\"o\">.</span><span class=\"n\">demodata_infr</span><span class=\"p\">(</span><span class=\"n\">num_pccs</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"p\">()[</span><span class=\"s1\">&#39;nCCs&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">clear_edges</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"p\">()[</span><span class=\"s1\">&#39;nCCs&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">12</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">ensure_mst</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"p\">()[</span><span class=\"s1\">&#39;nCCs&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>\n</pre></div>\n</div>\n</dd>\n<dt>Doctest:</dt>\n<dd><div class=\"first last highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.mixin_dynamic</span> <span class=\"k\">import</span> <span class=\"o\">*</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">ibeis</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">AnnotInference</span><span class=\"p\">(</span><span class=\"s1\">&#39;PZ_MTEST&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;all&#39;</span><span class=\"p\">,</span> <span class=\"n\">autoinit</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">reset_feedback</span><span class=\"p\">(</span><span class=\"s1\">&#39;annotmatch&#39;</span><span class=\"p\">,</span> <span class=\"n\">apply</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"p\">()[</span><span class=\"s1\">&#39;nInconsistentCCs&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"p\">()[</span><span class=\"s1\">&#39;nCCs&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">41</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">label</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;name_label&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">new_edges</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">find_mst_edges</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"o\">=</span><span class=\"n\">label</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">new_edges</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">clear_edges</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"p\">()[</span><span class=\"s1\">&#39;nCCs&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">119</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">ensure_mst</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"p\">()[</span><span class=\"s1\">&#39;nCCs&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">41</span>\n</pre></div>\n</div>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_helpers.DummyEdges.find_clique_edges\">\n<code class=\"descname\">find_clique_edges</code><span class=\"sig-paren\">(</span><em>label='name_label'</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_helpers/#DummyEdges.find_clique_edges\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_helpers.DummyEdges.find_clique_edges\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Augmenting edges that would complete each the specified cliques.\n(based on the group inferred from <cite>label</cite>)</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><strong>label</strong> (<em>str</em>) \u2013 node attribute to use as the group id to form the\ncliques.</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_helpers.DummyEdges.find_connecting_edges\">\n<code class=\"descname\">find_connecting_edges</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_helpers/#DummyEdges.find_connecting_edges\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_helpers.DummyEdges.find_connecting_edges\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Searches for a small set of edges, which if reviewed as positive would\nensure that each PCC is k-connected.  Note that in somes cases this is\nnot possible</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_helpers.DummyEdges.find_mst_edges\">\n<code class=\"descname\">find_mst_edges</code><span class=\"sig-paren\">(</span><em>label='name_label'</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_helpers/#DummyEdges.find_mst_edges\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_helpers.DummyEdges.find_mst_edges\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns edges to augment existing PCCs (by label) in order to ensure\nthey are connected with positive edges.</p>\n<dl class=\"docutils\">\n<dt>CommandLine:</dt>\n<dd>python -m ibeis.algo.graph.mixin_helpers find_mst_edges \u2013profile</dd>\n</dl>\n<p class=\"rubric\">Example</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># ENABLE_DOCTEST</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.mixin_helpers</span> <span class=\"k\">import</span> <span class=\"o\">*</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">ibeis</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">opendb</span><span class=\"p\">(</span><span class=\"n\">defaultdb</span><span class=\"o\">=</span><span class=\"s1\">&#39;PZ_MTEST&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">AnnotInference</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"s1\">&#39;all&#39;</span><span class=\"p\">,</span> <span class=\"n\">autoinit</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">label</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;orig_name_label&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">label</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;name_label&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">find_mst_edges</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">ensure_mst</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<dl class=\"docutils\">\n<dt>Ignore:</dt>\n<dd><dl class=\"first docutils\">\n<dt>old_mst_edges = [</dt>\n<dd>e for e, d in infr.edges(data=True)\nif d.get(\u2018user_id\u2019, None) == \u2018algo:mst\u2019</dd>\n</dl>\n<p class=\"last\">]\ninfr.graph.remove_edges_from(old_mst_edges)\ninfr.pos_graph.remove_edges_from(old_mst_edges)\ninfr.neg_graph.remove_edges_from(old_mst_edges)\ninfr.incomp_graph.remove_edges_from(old_mst_edges)</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_helpers.DummyEdges.rrr\">\n<code class=\"descname\">rrr</code><span class=\"sig-paren\">(</span><em>verbose=True</em>, <em>reload_module=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_helpers.DummyEdges.rrr\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>special class reloading function\nThis function is often injected as rrr of classes</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"module-ibeis.algo.graph.mixin_ibeis\">\n<span id=\"ibeis-algo-graph-mixin-ibeis-module\"></span><h2>ibeis.algo.graph.mixin_ibeis module<a class=\"headerlink\" href=\"#module-ibeis.algo.graph.mixin_ibeis\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"class\">\n<dt id=\"ibeis.algo.graph.mixin_ibeis.IBEISGroundtruth\">\n<em class=\"property\">class </em><code class=\"descclassname\">ibeis.algo.graph.mixin_ibeis.</code><code class=\"descname\">IBEISGroundtruth</code><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_ibeis/#IBEISGroundtruth\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_ibeis.IBEISGroundtruth\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></p>\n<p>Methods for generating training labels for classifiers</p>\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_ibeis.IBEISGroundtruth.ibeis_guess_if_comparable\">\n<code class=\"descname\">ibeis_guess_if_comparable</code><span class=\"sig-paren\">(</span><em>aid_pairs</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_ibeis/#IBEISGroundtruth.ibeis_guess_if_comparable\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_ibeis.IBEISGroundtruth.ibeis_guess_if_comparable\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Takes a guess as to which annots are not comparable based on scores and\nviewpoints. If either viewpoints is null assume they are comparable.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_ibeis.IBEISGroundtruth.ibeis_is_comparable\">\n<code class=\"descname\">ibeis_is_comparable</code><span class=\"sig-paren\">(</span><em>aid_pairs</em>, <em>allow_guess=True</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_ibeis/#IBEISGroundtruth.ibeis_is_comparable\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_ibeis.IBEISGroundtruth.ibeis_is_comparable\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Guesses by default when real comparable information is not available.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_ibeis.IBEISGroundtruth.ibeis_is_photobomb\">\n<code class=\"descname\">ibeis_is_photobomb</code><span class=\"sig-paren\">(</span><em>aid_pairs</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_ibeis/#IBEISGroundtruth.ibeis_is_photobomb\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_ibeis.IBEISGroundtruth.ibeis_is_photobomb\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_ibeis.IBEISGroundtruth.ibeis_is_same\">\n<code class=\"descname\">ibeis_is_same</code><span class=\"sig-paren\">(</span><em>aid_pairs</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_ibeis/#IBEISGroundtruth.ibeis_is_same\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_ibeis.IBEISGroundtruth.ibeis_is_same\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_ibeis.IBEISGroundtruth.rrr\">\n<code class=\"descname\">rrr</code><span class=\"sig-paren\">(</span><em>verbose=True</em>, <em>reload_module=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_ibeis.IBEISGroundtruth.rrr\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>special class reloading function\nThis function is often injected as rrr of classes</p>\n</dd></dl>\n\n</dd></dl>\n\n<dl class=\"class\">\n<dt id=\"ibeis.algo.graph.mixin_ibeis.IBEISIO\">\n<em class=\"property\">class </em><code class=\"descclassname\">ibeis.algo.graph.mixin_ibeis.</code><code class=\"descname\">IBEISIO</code><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_ibeis/#IBEISIO\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_ibeis.IBEISIO\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></p>\n<p>Direct interface into ibeis tables and delta statistics</p>\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_ibeis.IBEISIO.add_annots\">\n<code class=\"descname\">add_annots</code><span class=\"sig-paren\">(</span><em>aid_list</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_ibeis/#IBEISIO.add_annots\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_ibeis.IBEISIO.add_annots\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_ibeis.IBEISIO.find_unjustified_splits\">\n<code class=\"descname\">find_unjustified_splits</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_ibeis/#IBEISIO.find_unjustified_splits\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_ibeis.IBEISIO.find_unjustified_splits\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># ENABLE_DOCTEST</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.mixin_helpers</span> <span class=\"k\">import</span> <span class=\"o\">*</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">ibeis</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">opendb</span><span class=\"p\">(</span><span class=\"n\">defaultdb</span><span class=\"o\">=</span><span class=\"s1\">&#39;GZ_Master1&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">opendb</span><span class=\"p\">(</span><span class=\"n\">defaultdb</span><span class=\"o\">=</span><span class=\"s1\">&#39;PZ_Master1&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">AnnotInference</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"s1\">&#39;all&#39;</span><span class=\"p\">,</span> <span class=\"n\">autoinit</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">reset_feedback</span><span class=\"p\">(</span><span class=\"s1\">&#39;staging&#39;</span><span class=\"p\">,</span> <span class=\"n\">apply</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">relabel_using_reviews</span><span class=\"p\">(</span><span class=\"n\">rectify</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">unjustified</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">find_unjustified_splits</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">review_edges</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">for</span> <span class=\"n\">cc1</span><span class=\"p\">,</span> <span class=\"n\">cc2</span> <span class=\"ow\">in</span> <span class=\"n\">unjustified</span><span class=\"p\">:</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"nb\">iter</span><span class=\"p\">(</span><span class=\"n\">cc1</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"nb\">iter</span><span class=\"p\">(</span><span class=\"n\">cc2</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"n\">review_edges</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">nxu</span><span class=\"o\">.</span><span class=\"n\">e_</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">verbose</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">prioritize</span><span class=\"p\">(</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"n\">edges</span><span class=\"o\">=</span><span class=\"n\">review_edges</span><span class=\"p\">,</span> <span class=\"n\">scores</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">review_edges</span><span class=\"p\">),</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"n\">reset</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">qt_review_loop</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_ibeis.IBEISIO.get_ibeis_name_delta\">\n<code class=\"descname\">get_ibeis_name_delta</code><span class=\"sig-paren\">(</span><em>ignore_unknown=True</em>, <em>relabel=True</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_ibeis/#IBEISIO.get_ibeis_name_delta\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_ibeis.IBEISIO.get_ibeis_name_delta\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Rectifies internal name_labels with the names stored in the name table.</p>\n<p>Return a pandas dataframe indicating which names have changed for what\nannotations.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first simple\">\n<li><strong>ignore_unknown</strong> (<em>bool</em>) \u2013 if True does not return deltas for unknown\nannotations (those with degree 0).</li>\n<li><strong>relabel</strong> (<em>bool</em>) \u2013 if True, ensures that all nodes are labeled based\non the current PCCs.</li>\n</ul>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first last\"><dl class=\"docutils\">\n<dt>pd.DataFrame - name_delta_df - data frame where each row specifies</dt>\n<dd><p class=\"first last\">an aid and its <cite>old_name</cite> which is in the ibeis database and\nthe <cite>new_name</cite> which is what we infer it should be renamed to.</p>\n</dd>\n</dl>\n</p>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Example</p>\n<p>infr.write_ibeis_name_assignment</p>\n<dl class=\"docutils\">\n<dt>CommandLine:</dt>\n<dd>python -m ibeis.algo.graph.mixin_ibeis get_ibeis_name_delta</dd>\n<dt>Doctest:</dt>\n<dd><div class=\"first last highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.mixin_ibeis</span> <span class=\"k\">import</span> <span class=\"o\">*</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">ibeis</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">AnnotInference</span><span class=\"p\">(</span><span class=\"s1\">&#39;PZ_MTEST&#39;</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"o\">=</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)),</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>                            <span class=\"n\">autoinit</span><span class=\"o\">=</span><span class=\"s1\">&#39;annotmatch&#39;</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pccs1</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">positive_components</span><span class=\"p\">())</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;pccs1 = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">pccs1</span><span class=\"p\">,))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;names = </span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">gen_node_values</span><span class=\"p\">(</span><span class=\"s1\">&#39;name_label&#39;</span><span class=\"p\">,</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">aids</span><span class=\"p\">))))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"n\">pccs1</span> <span class=\"o\">==</span> <span class=\"p\">[{</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"mi\">9</span><span class=\"p\">}]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Split a PCC and then merge two other PCCs</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback_from</span><span class=\"p\">([(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)],</span> <span class=\"n\">evidence_decision</span><span class=\"o\">=</span><span class=\"n\">NEGTV</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">((</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">),</span> <span class=\"n\">NEGTV</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">((</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">),</span> <span class=\"n\">NEGTV</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">((</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"n\">POSTV</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">((</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">),</span> <span class=\"n\">POSTV</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pccs2</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">positive_components</span><span class=\"p\">())</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;pccs2 = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">pccs2</span><span class=\"p\">,))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pccs2</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">pccs2</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"n\">pccs2</span> <span class=\"o\">==</span> <span class=\"p\">[{</span><span class=\"mi\">9</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">}]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">gen_node_values</span><span class=\"p\">(</span><span class=\"s1\">&#39;name_label&#39;</span><span class=\"p\">,</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">aids</span><span class=\"p\">)))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">name_delta_df</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">get_ibeis_name_delta</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">name_delta_df</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n<span class=\"go\">    old_name       new_name</span>\n<span class=\"go\">aid</span>\n<span class=\"go\">1     06_410  IBEIS_PZ_0042</span>\n<span class=\"go\">5     07_061         06_410</span>\n<span class=\"go\">6     07_061         06_410</span>\n</pre></div>\n</div>\n</dd>\n<dt>Doctest:</dt>\n<dd><div class=\"first last highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.mixin_ibeis</span> <span class=\"k\">import</span> <span class=\"o\">*</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">ibeis</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">AnnotInference</span><span class=\"p\">(</span><span class=\"s1\">&#39;PZ_MTEST&#39;</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"o\">=</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)),</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>                            <span class=\"n\">autoinit</span><span class=\"o\">=</span><span class=\"s1\">&#39;annotmatch&#39;</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback_from</span><span class=\"p\">([(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)],</span> <span class=\"n\">evidence_decision</span><span class=\"o\">=</span><span class=\"n\">NEGTV</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">((</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"n\">POSTV</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">name_delta_df</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">get_ibeis_name_delta</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">name_delta_df</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n<span class=\"go\">    old_name new_name</span>\n<span class=\"go\">aid</span>\n<span class=\"go\">2     06_410   07_061</span>\n<span class=\"go\">3     06_410   07_061</span>\n<span class=\"go\">4     06_410   07_061</span>\n</pre></div>\n</div>\n</dd>\n<dt>Doctest:</dt>\n<dd><div class=\"first last highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.mixin_ibeis</span> <span class=\"k\">import</span> <span class=\"o\">*</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">ibeis</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">AnnotInference</span><span class=\"p\">(</span><span class=\"s1\">&#39;PZ_MTEST&#39;</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"o\">=</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)),</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>                            <span class=\"n\">autoinit</span><span class=\"o\">=</span><span class=\"s1\">&#39;annotmatch&#39;</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">name_delta_df</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">get_ibeis_name_delta</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">name_delta_df</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n<span class=\"go\">Empty DataFrame</span>\n<span class=\"go\">Columns: [old_name, new_name]</span>\n<span class=\"go\">Index: []</span>\n</pre></div>\n</div>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_ibeis.IBEISIO.ibeis_delta_info\">\n<code class=\"descname\">ibeis_delta_info</code><span class=\"sig-paren\">(</span><em>edge_delta_df=None</em>, <em>name_delta_df=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_ibeis/#IBEISIO.ibeis_delta_info\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_ibeis.IBEISIO.ibeis_delta_info\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_ibeis.IBEISIO.ibeis_edge_delta_info\">\n<code class=\"descname\">ibeis_edge_delta_info</code><span class=\"sig-paren\">(</span><em>edge_delta_df=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_ibeis/#IBEISIO.ibeis_edge_delta_info\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_ibeis.IBEISIO.ibeis_edge_delta_info\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_ibeis.IBEISIO.ibeis_name_group_delta_info\">\n<code class=\"descname\">ibeis_name_group_delta_info</code><span class=\"sig-paren\">(</span><em>verbose=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_ibeis/#IBEISIO.ibeis_name_group_delta_info\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_ibeis.IBEISIO.ibeis_name_group_delta_info\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>infr.relabel_using_reviews(rectify=False)</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_ibeis.IBEISIO.match_state_delta\">\n<code class=\"descname\">match_state_delta</code><span class=\"sig-paren\">(</span><em>old='annotmatch'</em>, <em>new='all'</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_ibeis/#IBEISIO.match_state_delta\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_ibeis.IBEISIO.match_state_delta\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns information about state change of annotmatches</p>\n<p>By default this will return a pandas dataframe indicating which edges\nin the annotmatch table have changed and all new edges relative to the\ncurrent infr.graph state.</p>\n<p class=\"rubric\">Notes</p>\n<p>valid values for <cite>old</cite> and <cite>new</cite> are {\u2018annotmatch\u2019, \u2018staging\u2019,\n\u2018all\u2019, \u2018internal\u2019, or \u2018external\u2019}.</p>\n<p>The args old/new=\u2019all\u2019 resolves to the internal graph state,\n\u2018annotmatch\u2019 resolves to the on-disk annotmatch table, and\n\u2018staging\u2019 resolves to the on-disk staging table (you can further\nseparate all by specifying \u2018internal\u2019 or \u2018external\u2019).  You any of\nthese old/new combinations to check differences in the state.\nHowever, the default values are what you use to sync the graph\nstate to annotmatch.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first simple\">\n<li><strong>old</strong> (<em>str</em>) \u2013 indicates the old data (i.e. the place that will be\nwritten to)</li>\n<li><strong>new</strong> (<em>str</em>) \u2013 indicates the new data (i.e. the data to write)</li>\n</ul>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first last\"><dl class=\"docutils\">\n<dt>pd.DataFrame - edge_delta_df - indicates the old and new values</dt>\n<dd><p class=\"first last\">of the changed edge attributes.</p>\n</dd>\n</dl>\n</p>\n</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"docutils\">\n<dt>CommandLine:</dt>\n<dd>python -m ibeis.algo.graph.core match_state_delta</dd>\n<dt>Doctest:</dt>\n<dd><div class=\"first last highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.mixin_ibeis</span> <span class=\"k\">import</span> <span class=\"o\">*</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">ibeis</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">AnnotInference</span><span class=\"p\">(</span><span class=\"s1\">&#39;PZ_MTEST&#39;</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"o\">=</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)),</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>                            <span class=\"n\">autoinit</span><span class=\"o\">=</span><span class=\"s1\">&#39;annotmatch&#39;</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Split a PCC and then merge two other PCCs</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">NEGTV</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">((</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">),</span> <span class=\"n\">NEGTV</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">((</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">),</span> <span class=\"n\">NEGTV</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">((</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"n\">POSTV</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">((</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">),</span> <span class=\"n\">POSTV</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">edge_delta_df</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">match_state_delta</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">subset</span> <span class=\"o\">=</span> <span class=\"n\">edge_delta_df</span><span class=\"p\">[[</span><span class=\"s1\">&#39;old_evidence_decision&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;new_evidence_decision&#39;</span><span class=\"p\">]]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">subset</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># if this doctest fails maybe PZ_MTEST has a non-determenistic reset?</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n<span class=\"go\">          old_evidence_decision new_evidence_decision</span>\n<span class=\"go\">aid1 aid2</span>\n<span class=\"go\">1    2                    match               nomatch</span>\n<span class=\"go\">5    8               unreviewed               nomatch</span>\n<span class=\"go\">6    7               unreviewed               nomatch</span>\n<span class=\"go\">7    8                    match                 match</span>\n<span class=\"go\">4    5                      NaN                 match</span>\n</pre></div>\n</div>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_ibeis.IBEISIO.name_group_delta_stats\">\n<code class=\"descname\">name_group_delta_stats</code><span class=\"sig-paren\">(</span><em>old_ccs</em>, <em>new_ccs</em>, <em>verbose=False</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_ibeis/#IBEISIO.name_group_delta_stats\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_ibeis.IBEISIO.name_group_delta_stats\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_ibeis.IBEISIO.name_group_stats\">\n<code class=\"descname\">name_group_stats</code><span class=\"sig-paren\">(</span><em>verbose=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_ibeis/#IBEISIO.name_group_stats\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_ibeis.IBEISIO.name_group_stats\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_ibeis.IBEISIO.name_label_group_delta_info\">\n<code class=\"descname\">name_label_group_delta_info</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_ibeis/#IBEISIO.name_label_group_delta_info\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_ibeis.IBEISIO.name_label_group_delta_info\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>If the name labeling delta is non-zero then you need to rectify names</p>\n<p>infr.relabel_using_reviews(rectify=False)</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_ibeis.IBEISIO.read_ibeis_annotmatch_feedback\">\n<code class=\"descname\">read_ibeis_annotmatch_feedback</code><span class=\"sig-paren\">(</span><em>edges=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_ibeis/#IBEISIO.read_ibeis_annotmatch_feedback\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_ibeis.IBEISIO.read_ibeis_annotmatch_feedback\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Reads feedback from annotmatch table and returns the result.\nInternal state is not changed.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><strong>only_existing_edges</strong> (<em>bool</em>) \u2013 if True only reads info existing edges</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"docutils\">\n<dt>CommandLine:</dt>\n<dd>python -m ibeis.algo.graph.core read_ibeis_annotmatch_feedback</dd>\n</dl>\n<p class=\"rubric\">Example</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># ENABLE_DOCTEST</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.core</span> <span class=\"k\">import</span> <span class=\"o\">*</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">testdata_infr</span><span class=\"p\">(</span><span class=\"s1\">&#39;testdb1&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">feedback</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">read_ibeis_annotmatch_feedback</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"n\">feedback</span><span class=\"p\">[(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;feedback = </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr2</span><span class=\"p\">(</span><span class=\"n\">feedback</span><span class=\"p\">,</span> <span class=\"n\">nl</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">),))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">feedback</span><span class=\"p\">)</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">&#39;should contain at least 2 edges&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2-3 should have one review&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"n\">items</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s1\">&#39;evidence_decision&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">POSTV</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2-3 must match&#39;</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_ibeis.IBEISIO.read_ibeis_staging_feedback\">\n<code class=\"descname\">read_ibeis_staging_feedback</code><span class=\"sig-paren\">(</span><em>edges=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_ibeis/#IBEISIO.read_ibeis_staging_feedback\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_ibeis.IBEISIO.read_ibeis_staging_feedback\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Reads feedback from review staging table.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><strong>infr</strong> \u2013 </td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\">feedback</td>\n</tr>\n<tr class=\"field-odd field\"><th class=\"field-name\">Return type:</th><td class=\"field-body\">?</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"docutils\">\n<dt>CommandLine:</dt>\n<dd>python -m ibeis.algo.graph.mixin_ibeis read_ibeis_staging_feedback</dd>\n</dl>\n<p class=\"rubric\">Example</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># DISABLE_DOCTEST</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.mixin_ibeis</span> <span class=\"k\">import</span> <span class=\"o\">*</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">ibeis</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">opendb</span><span class=\"p\">(</span><span class=\"s1\">&#39;GZ_Master1&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">AnnotInference</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"o\">=</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"o\">=</span><span class=\"s1\">&#39;all&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">feedback</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">read_ibeis_staging_feedback</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;feedback = </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr2</span><span class=\"p\">(</span><span class=\"n\">feedback</span><span class=\"p\">),))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_ibeis.IBEISIO.reset_labels_to_ibeis\">\n<code class=\"descname\">reset_labels_to_ibeis</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_ibeis/#IBEISIO.reset_labels_to_ibeis\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_ibeis.IBEISIO.reset_labels_to_ibeis\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Sets to IBEIS de-facto labels if available</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_ibeis.IBEISIO.reset_staging_with_ensure\">\n<code class=\"descname\">reset_staging_with_ensure</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_ibeis/#IBEISIO.reset_staging_with_ensure\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_ibeis.IBEISIO.reset_staging_with_ensure\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Make sure staging has all info that annotmatch has.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_ibeis.IBEISIO.rrr\">\n<code class=\"descname\">rrr</code><span class=\"sig-paren\">(</span><em>verbose=True</em>, <em>reload_module=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_ibeis.IBEISIO.rrr\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>special class reloading function\nThis function is often injected as rrr of classes</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_ibeis.IBEISIO.write_ibeis_annotmatch_feedback\">\n<code class=\"descname\">write_ibeis_annotmatch_feedback</code><span class=\"sig-paren\">(</span><em>edge_delta_df=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_ibeis/#IBEISIO.write_ibeis_annotmatch_feedback\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_ibeis.IBEISIO.write_ibeis_annotmatch_feedback\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Commits the current state in external and internal into the annotmatch\ntable. Annotmatch only stores the final review in the history of reviews.</p>\n<p>By default this will sync the current graph state to the annotmatch\ntable. It computes the edge_delta under the hood, so if you already\nmade one then you can pass it in for a little extra speed.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><strong>edge_delta_df</strong> (<em>pd.DataFrame</em>) \u2013 precomputed using match_state_delta.\nif None it will be computed under the hood.</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_ibeis.IBEISIO.write_ibeis_name_assignment\">\n<code class=\"descname\">write_ibeis_name_assignment</code><span class=\"sig-paren\">(</span><em>name_delta_df=None</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_ibeis/#IBEISIO.write_ibeis_name_assignment\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_ibeis.IBEISIO.write_ibeis_name_assignment\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Write the name delta to the annotations table.</p>\n<p>It computes the name delta under the hood, so if you already made one\nthen you can pass it in for a little extra speed.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">This will call infr.relabel_using_reviews(rectify=True) if\nname_delta_df is not given directly.</p>\n</div>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><strong>name_delta_df</strong> (<em>pd.DataFrame</em>) \u2013 if None, the value is computed using\n<cite>get_ibeis_name_delta</cite>. Note you should ensure this delta is made\nafter nodes have been relabeled using reviews.</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_ibeis.IBEISIO.write_ibeis_staging_feedback\">\n<code class=\"descname\">write_ibeis_staging_feedback</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_ibeis/#IBEISIO.write_ibeis_staging_feedback\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_ibeis.IBEISIO.write_ibeis_staging_feedback\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Commit all reviews in internal_feedback into the staging table.  The\nedges are removed from interal_feedback and added to external feedback.\nThe staging tables stores each review in the order it happened so\nhistory is fully reconstructable if staging is never deleted.</p>\n<p>This write function is done using the implicit delta maintained by\ninfr.internal_feedback. Therefore, it take no args. This is generally\ncalled automatically by <cite>infr.accept</cite>.</p>\n</dd></dl>\n\n</dd></dl>\n\n<dl class=\"function\">\n<dt id=\"ibeis.algo.graph.mixin_ibeis.fix_annotmatch_to_undirected_upper\">\n<code class=\"descclassname\">ibeis.algo.graph.mixin_ibeis.</code><code class=\"descname\">fix_annotmatch_to_undirected_upper</code><span class=\"sig-paren\">(</span><em>ibs</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_ibeis/#fix_annotmatch_to_undirected_upper\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_ibeis.fix_annotmatch_to_undirected_upper\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Enforce that all items in annotmatch are undirected upper</p>\n<p>import ibeis\n# ibs = ibeis.opendb(\u2018PZ_Master1\u2019)\nibs = ibeis.opendb(\u2018PZ_PB_RF_TRAIN\u2019)</p>\n</dd></dl>\n\n<dl class=\"function\">\n<dt id=\"ibeis.algo.graph.mixin_ibeis.needs_conversion\">\n<code class=\"descclassname\">ibeis.algo.graph.mixin_ibeis.</code><code class=\"descname\">needs_conversion</code><span class=\"sig-paren\">(</span><em>infr</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_ibeis/#needs_conversion\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_ibeis.needs_conversion\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"module-ibeis.algo.graph.mixin_loops\">\n<span id=\"ibeis-algo-graph-mixin-loops-module\"></span><h2>ibeis.algo.graph.mixin_loops module<a class=\"headerlink\" href=\"#module-ibeis.algo.graph.mixin_loops\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"class\">\n<dt id=\"ibeis.algo.graph.mixin_loops.InfrLoops\">\n<em class=\"property\">class </em><code class=\"descclassname\">ibeis.algo.graph.mixin_loops.</code><code class=\"descname\">InfrLoops</code><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_loops/#InfrLoops\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_loops.InfrLoops\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></p>\n<p>Algorithm control flow loops</p>\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_loops.InfrLoops.hardcase_review_gen\">\n<code class=\"descname\">hardcase_review_gen</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_loops/#InfrLoops.hardcase_review_gen\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_loops.InfrLoops.hardcase_review_gen\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Subiterator for hardcase review</p>\n<p>Re-review non-confident edges that vsone did not classify correctly</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_loops.InfrLoops.incon_recovery_gen\">\n<code class=\"descname\">incon_recovery_gen</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_loops/#InfrLoops.incon_recovery_gen\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_loops.InfrLoops.incon_recovery_gen\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Subiterator for recovery mode of the mainm algorithm</p>\n<p>Iterates until the graph is consistent</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">inconsistency recovery is implicitly handled by the main algorithm,\nso other phases do not need to call this explicitly. This exists\nfor the case where the only mode we wish to run is inconsistency\nrecovery.</p>\n</div>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_loops.InfrLoops.init_refresh\">\n<code class=\"descname\">init_refresh</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_loops/#InfrLoops.init_refresh\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_loops.InfrLoops.init_refresh\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_loops.InfrLoops.main_gen\">\n<code class=\"descname\">main_gen</code><span class=\"sig-paren\">(</span><em>max_loops=None</em>, <em>use_refresh=True</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_loops/#InfrLoops.main_gen\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_loops.InfrLoops.main_gen\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The main outer loop.</p>\n<p>This function is designed as an iterator that will execute the graph\nalgorithm main loop as automatically as possible, but if user input is\nneeded, it will pause and yield the decision it needs help with. Once\nfeedback is given for this item, you can continue the main loop by\ncalling next. StopIteration is raised once the algorithm is complete.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first last simple\">\n<li><strong>max_loops</strong> (<em>int</em>) \u2013 maximum number of times to run the outer loop,\ni.e. ranking is run at most this many times.</li>\n<li><strong>use_refresh</strong> (<em>bool</em>) \u2013 allow the refresh criterion to stop the algo</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>Different phases of the main loop are implemented as subiterators</p>\n<dl class=\"docutils\">\n<dt>CommandLine:</dt>\n<dd>python -m ibeis.algo.graph.mixin_loops main_gen</dd>\n<dt>Doctest:</dt>\n<dd><div class=\"first last highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.mixin_loops</span> <span class=\"k\">import</span> <span class=\"o\">*</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.mixin_simulation</span> <span class=\"k\">import</span> <span class=\"n\">UserOracle</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">ibeis</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">AnnotInference</span><span class=\"p\">(</span><span class=\"s1\">&#39;testdb1&#39;</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"o\">=</span><span class=\"s1\">&#39;all&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>                            <span class=\"n\">autoinit</span><span class=\"o\">=</span><span class=\"s1\">&#39;staging&#39;</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"s1\">&#39;manual.n_peek&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"s1\">&#39;ranking.ntop&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">oracle</span> <span class=\"o\">=</span> <span class=\"n\">UserOracle</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"mi\">99</span><span class=\"p\">,</span> <span class=\"n\">rng</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">simulation_mode</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">reset</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\">#infr.load_published()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gen</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">main_gen</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"k\">try</span><span class=\"p\">:</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>        <span class=\"n\">reviews</span> <span class=\"o\">=</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>        <span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">priority</span><span class=\"p\">,</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">reviews</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>        <span class=\"n\">feedback</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">request_oracle_review</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>        <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">feedback</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"k\">except</span> <span class=\"ne\">StopIteration</span><span class=\"p\">:</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>        <span class=\"k\">break</span>\n</pre></div>\n</div>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_loops.InfrLoops.main_loop\">\n<code class=\"descname\">main_loop</code><span class=\"sig-paren\">(</span><em>max_loops=None</em>, <em>use_refresh=True</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_loops/#InfrLoops.main_loop\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_loops.InfrLoops.main_loop\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>DEPRICATED</p>\n<p>use list(infr.main_gen) instead\nor assert not any(infr.main_gen())\nmaybe this is fine.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_loops.InfrLoops.neg_redun_gen\">\n<code class=\"descname\">neg_redun_gen</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_loops/#InfrLoops.neg_redun_gen\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_loops.InfrLoops.neg_redun_gen\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Subiterator for phase3 of the main algorithm.</p>\n<p>Searches for decisions that would commplete negative redundancy</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_loops.InfrLoops.pos_redun_gen\">\n<code class=\"descname\">pos_redun_gen</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_loops/#InfrLoops.pos_redun_gen\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_loops.InfrLoops.pos_redun_gen\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Subiterator for phase2 of the main algorithm.</p>\n<p>Searches for decisions that would commplete positive redundancy</p>\n<dl class=\"docutils\">\n<dt>Doctest:</dt>\n<dd><div class=\"first last highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.mixin_loops</span> <span class=\"k\">import</span> <span class=\"o\">*</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">ibeis</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">AnnotInference</span><span class=\"p\">(</span><span class=\"s1\">&#39;PZ_MTEST&#39;</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"o\">=</span><span class=\"s1\">&#39;all&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>                            <span class=\"n\">autoinit</span><span class=\"o\">=</span><span class=\"s1\">&#39;staging&#39;</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\">#infr.load_published()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gen</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">pos_redun_gen</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">feedback</span> <span class=\"o\">=</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_loops.InfrLoops.ranked_list_gen\">\n<code class=\"descname\">ranked_list_gen</code><span class=\"sig-paren\">(</span><em>use_refresh=True</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_loops/#InfrLoops.ranked_list_gen\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_loops.InfrLoops.ranked_list_gen\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Subiterator for phase1 of the main algorithm</p>\n<p>Calls the underlying ranking algorithm and prioritizes the results</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_loops.InfrLoops.start_id_review\">\n<code class=\"descname\">start_id_review</code><span class=\"sig-paren\">(</span><em>max_loops=None</em>, <em>use_refresh=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_loops/#InfrLoops.start_id_review\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_loops.InfrLoops.start_id_review\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n<dl class=\"class\">\n<dt id=\"ibeis.algo.graph.mixin_loops.InfrReviewers\">\n<em class=\"property\">class </em><code class=\"descclassname\">ibeis.algo.graph.mixin_loops.</code><code class=\"descname\">InfrReviewers</code><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_loops/#InfrReviewers\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_loops.InfrReviewers\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></p>\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_loops.InfrReviewers.accept\">\n<code class=\"descname\">accept</code><span class=\"sig-paren\">(</span><em>feedback</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_loops/#InfrReviewers.accept\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_loops.InfrReviewers.accept\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Called when user has completed feedback from qt or web</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_loops.InfrReviewers.continue_review\">\n<code class=\"descname\">continue_review</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_loops/#InfrReviewers.continue_review\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_loops.InfrReviewers.continue_review\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_loops.InfrReviewers.emit_manual_review\">\n<code class=\"descname\">emit_manual_review</code><span class=\"sig-paren\">(</span><em>edge</em>, <em>priority=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_loops/#InfrReviewers.emit_manual_review\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_loops.InfrReviewers.emit_manual_review\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Emits a signal containing edges that need review. The callback should\npresent them to a user, get feedback, and then call on_accpet.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_loops.InfrReviewers.qt_edge_reviewer\">\n<code class=\"descname\">qt_edge_reviewer</code><span class=\"sig-paren\">(</span><em>edge=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_loops/#InfrReviewers.qt_edge_reviewer\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_loops.InfrReviewers.qt_edge_reviewer\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_loops.InfrReviewers.qt_review_loop\">\n<code class=\"descname\">qt_review_loop</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_loops/#InfrReviewers.qt_review_loop\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_loops.InfrReviewers.qt_review_loop\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>TODO: The loop parts should be a non-mixin class</p>\n<p>Qt review loop entry point</p>\n<dl class=\"docutils\">\n<dt>CommandLine:</dt>\n<dd>python -m ibeis.algo.graph.mixin_loops qt_review_loop \u2013show</dd>\n</dl>\n<p class=\"rubric\">Example</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># SCRIPT</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">ibeis</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">opendb</span><span class=\"p\">(</span><span class=\"s1\">&#39;PZ_MTEST&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">AnnotInference</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"s1\">&#39;all&#39;</span><span class=\"p\">,</span> <span class=\"n\">autoinit</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">ensure_mst</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Add dummy priorities to each edge</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">set_edge_attrs</span><span class=\"p\">(</span><span class=\"s1\">&#39;prob_match&#39;</span><span class=\"p\">,</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">dzip</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">(),</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">prioritize</span><span class=\"p\">(</span><span class=\"s1\">&#39;prob_match&#39;</span><span class=\"p\">,</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">(),</span> <span class=\"n\">reset</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"s1\">&#39;redun.enabled&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">win</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">qt_review_loop</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">guitool</span> <span class=\"k\">as</span> <span class=\"nn\">gt</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gt</span><span class=\"o\">.</span><span class=\"n\">qtapp_loop</span><span class=\"p\">(</span><span class=\"n\">qwin</span><span class=\"o\">=</span><span class=\"n\">win</span><span class=\"p\">,</span> <span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_loops.InfrReviewers.request_oracle_review\">\n<code class=\"descname\">request_oracle_review</code><span class=\"sig-paren\">(</span><em>edge</em>, <em>**kw</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_loops/#InfrReviewers.request_oracle_review\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_loops.InfrReviewers.request_oracle_review\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_loops.InfrReviewers.skip\">\n<code class=\"descname\">skip</code><span class=\"sig-paren\">(</span><em>edge</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_loops/#InfrReviewers.skip\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_loops.InfrReviewers.skip\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_loops.InfrReviewers.try_auto_review\">\n<code class=\"descname\">try_auto_review</code><span class=\"sig-paren\">(</span><em>edge</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_loops/#InfrReviewers.try_auto_review\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_loops.InfrReviewers.try_auto_review\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"module-ibeis.algo.graph.mixin_matching\">\n<span id=\"ibeis-algo-graph-mixin-matching-module\"></span><h2>ibeis.algo.graph.mixin_matching module<a class=\"headerlink\" href=\"#module-ibeis.algo.graph.mixin_matching\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"class\">\n<dt id=\"ibeis.algo.graph.mixin_matching.AnnotInfrMatching\">\n<em class=\"property\">class </em><code class=\"descclassname\">ibeis.algo.graph.mixin_matching.</code><code class=\"descname\">AnnotInfrMatching</code><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_matching/#AnnotInfrMatching\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_matching.AnnotInfrMatching\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></p>\n<p>Methods for running matching algorithms</p>\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_matching.AnnotInfrMatching.apply_match_edges\">\n<code class=\"descname\">apply_match_edges</code><span class=\"sig-paren\">(</span><em>review_cfg={}</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_matching/#AnnotInfrMatching.apply_match_edges\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_matching.AnnotInfrMatching.apply_match_edges\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Adds results from one-vs-many rankings as edges in the graph</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_matching.AnnotInfrMatching.apply_match_scores\">\n<code class=\"descname\">apply_match_scores</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_matching/#AnnotInfrMatching.apply_match_scores\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_matching.AnnotInfrMatching.apply_match_scores\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Applies precomputed matching scores to edges that already exist in the\ngraph. Typically you should run infr.apply_match_edges() before running\nthis.</p>\n<dl class=\"docutils\">\n<dt>CommandLine:</dt>\n<dd>python -m ibeis.algo.graph.core apply_match_scores \u2013show</dd>\n</dl>\n<p class=\"rubric\">Example</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># ENABLE_DOCTEST</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.core</span> <span class=\"k\">import</span> <span class=\"o\">*</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">testdata_infr</span><span class=\"p\">(</span><span class=\"s1\">&#39;PZ_MTEST&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">exec_matching</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">apply_match_edges</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">apply_match_scores</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">get_edge_attrs</span><span class=\"p\">(</span><span class=\"s1\">&#39;score&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_matching.AnnotInfrMatching.exec_matching\">\n<code class=\"descname\">exec_matching</code><span class=\"sig-paren\">(</span><em>qaids=None</em>, <em>daids=None</em>, <em>prog_hook=None</em>, <em>cfgdict=None</em>, <em>name_method='node'</em>, <em>use_cache=True</em>, <em>invalidate_supercache=False</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_matching/#AnnotInfrMatching.exec_matching\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_matching.AnnotInfrMatching.exec_matching\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Loads chip matches into the inference structure\nUses graph name labeling and ignores ibeis labeling</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_matching.AnnotInfrMatching.exec_vsone_subset\">\n<code class=\"descname\">exec_vsone_subset</code><span class=\"sig-paren\">(</span><em>edges</em>, <em>prog_hook=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_matching/#AnnotInfrMatching.exec_vsone_subset\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_matching.AnnotInfrMatching.exec_vsone_subset\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><strong>prog_hook</strong> (<em>None</em>) \u2013 (default = None)</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"docutils\">\n<dt>CommandLine:</dt>\n<dd>python -m ibeis.algo.graph.core exec_vsone_subset</dd>\n</dl>\n<p class=\"rubric\">Example</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># ENABLE_DOCTEST</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.core</span> <span class=\"k\">import</span> <span class=\"o\">*</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">testdata_infr</span><span class=\"p\">(</span><span class=\"s1\">&#39;testdb1&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">ensure_full</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">exec_vsone_subset</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_matching.AnnotInfrMatching.lookup_cm\">\n<code class=\"descname\">lookup_cm</code><span class=\"sig-paren\">(</span><em>aid1</em>, <em>aid2</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_matching/#AnnotInfrMatching.lookup_cm\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_matching.AnnotInfrMatching.lookup_cm\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Get chipmatch object associated with an edge if one exists.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_matching.AnnotInfrMatching.rrr\">\n<code class=\"descname\">rrr</code><span class=\"sig-paren\">(</span><em>verbose=True</em>, <em>reload_module=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_matching.AnnotInfrMatching.rrr\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>special class reloading function\nThis function is often injected as rrr of classes</p>\n</dd></dl>\n\n</dd></dl>\n\n<dl class=\"class\">\n<dt id=\"ibeis.algo.graph.mixin_matching.CandidateSearch\">\n<em class=\"property\">class </em><code class=\"descclassname\">ibeis.algo.graph.mixin_matching.</code><code class=\"descname\">CandidateSearch</code><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_matching/#CandidateSearch\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_matching.CandidateSearch\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ibeis.algo.graph.mixin_matching._RedundancyAugmentation</span></code></p>\n<p>Search for candidate edges</p>\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_matching.CandidateSearch.add_candidate_edges\">\n<code class=\"descname\">add_candidate_edges</code><span class=\"sig-paren\">(</span><em>candidate_edges</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_matching/#CandidateSearch.add_candidate_edges\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_matching.CandidateSearch.add_candidate_edges\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_matching.CandidateSearch.ensure_prioritized\">\n<code class=\"descname\">ensure_prioritized</code><span class=\"sig-paren\">(</span><em>priority_edges</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_matching/#CandidateSearch.ensure_prioritized\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_matching.CandidateSearch.ensure_prioritized\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_matching.CandidateSearch.ensure_priority_scores\">\n<code class=\"descname\">ensure_priority_scores</code><span class=\"sig-paren\">(</span><em>priority_edges</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_matching/#CandidateSearch.ensure_priority_scores\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_matching.CandidateSearch.ensure_priority_scores\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Ensures that priority attributes are assigned to the edges.\nThis does not change the state of the queue.</p>\n<dl class=\"docutils\">\n<dt>Doctest:</dt>\n<dd><div class=\"first last highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">ibeis</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">opendb</span><span class=\"p\">(</span><span class=\"s1\">&#39;PZ_MTEST&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">AnnotInference</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"o\">=</span><span class=\"s1\">&#39;all&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">ensure_mst</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">priority_edges</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">())[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">ensure_priority_scores</span><span class=\"p\">(</span><span class=\"n\">priority_edges</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd>\n<dt>Doctest:</dt>\n<dd><div class=\"first last highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">ibeis</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">opendb</span><span class=\"p\">(</span><span class=\"s1\">&#39;PZ_MTEST&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">AnnotInference</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"o\">=</span><span class=\"s1\">&#39;all&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">ensure_mst</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># infr.load_published()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">priority_edges</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">())</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">ensure_priority_scores</span><span class=\"p\">(</span><span class=\"n\">priority_edges</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd>\n<dt>Doctest:</dt>\n<dd><div class=\"first last highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph</span> <span class=\"k\">import</span> <span class=\"n\">demo</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">demo</span><span class=\"o\">.</span><span class=\"n\">demodata_infr</span><span class=\"p\">(</span><span class=\"n\">num_pccs</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">p_incon</span><span class=\"o\">=.</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">size_std</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">())</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">ensure_priority_scores</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_matching.CandidateSearch.ensure_task_probs\">\n<code class=\"descname\">ensure_task_probs</code><span class=\"sig-paren\">(</span><em>edges</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_matching/#CandidateSearch.ensure_task_probs\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_matching.CandidateSearch.ensure_task_probs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Ensures that probabilities are assigned to the edges.\nThis gaurentees that infr.task_probs contains data for edges.\n(Currently only the primary task is actually ensured)</p>\n<dl class=\"docutils\">\n<dt>CommandLine:</dt>\n<dd>python -m ibeis.algo.graph.mixin_matching ensure_task_probs</dd>\n<dt>Doctest:</dt>\n<dd><div class=\"first last highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># DISABLE_DOCTEST</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.mixin_matching</span> <span class=\"k\">import</span> <span class=\"o\">*</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">ibeis</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">AnnotInference</span><span class=\"p\">(</span><span class=\"s1\">&#39;PZ_MTEST&#39;</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"o\">=</span><span class=\"s1\">&#39;all&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>                            <span class=\"n\">autoinit</span><span class=\"o\">=</span><span class=\"s1\">&#39;staging&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">())[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">load_published</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">task_probs</span><span class=\"p\">[</span><span class=\"s1\">&#39;match_state&#39;</span><span class=\"p\">])</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">ensure_task_probs</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">task_probs</span><span class=\"p\">[</span><span class=\"s1\">&#39;match_state&#39;</span><span class=\"p\">])</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">ensure_task_probs</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">task_probs</span><span class=\"p\">[</span><span class=\"s1\">&#39;match_state&#39;</span><span class=\"p\">])</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>\n</pre></div>\n</div>\n</dd>\n<dt>Doctest:</dt>\n<dd><div class=\"first last highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.mixin_matching</span> <span class=\"k\">import</span> <span class=\"o\">*</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph</span> <span class=\"k\">import</span> <span class=\"n\">demo</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">demo</span><span class=\"o\">.</span><span class=\"n\">demodata_infr</span><span class=\"p\">(</span><span class=\"n\">num_pccs</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">p_incon</span><span class=\"o\">=.</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">size_std</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">())</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">ensure_task_probs</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"nb\">all</span><span class=\"p\">([</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">isclose</span><span class=\"p\">(</span><span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()),</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>            <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">task_probs</span><span class=\"p\">[</span><span class=\"s1\">&#39;match_state&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()])</span>\n</pre></div>\n</div>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_matching.CandidateSearch.find_lnbnn_candidate_edges\">\n<code class=\"descname\">find_lnbnn_candidate_edges</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_matching/#CandidateSearch.find_lnbnn_candidate_edges\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_matching.CandidateSearch.find_lnbnn_candidate_edges\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p class=\"rubric\">Example</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># ENABLE_DOCTEST</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph</span> <span class=\"k\">import</span> <span class=\"n\">demo</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">demo</span><span class=\"o\">.</span><span class=\"n\">demodata_mtest_infr</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cand_edges</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">find_lnbnn_candidate_edges</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cand_edges</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">200</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_matching.CandidateSearch.refresh_candidate_edges\">\n<code class=\"descname\">refresh_candidate_edges</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_matching/#CandidateSearch.refresh_candidate_edges\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_matching.CandidateSearch.refresh_candidate_edges\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Search for candidate edges.\nAssign each edge a priority and add to queue.</p>\n</dd></dl>\n\n</dd></dl>\n\n<dl class=\"class\">\n<dt id=\"ibeis.algo.graph.mixin_matching.InfrLearning\">\n<em class=\"property\">class </em><code class=\"descclassname\">ibeis.algo.graph.mixin_matching.</code><code class=\"descname\">InfrLearning</code><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_matching/#InfrLearning\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_matching.InfrLearning\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></p>\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_matching.InfrLearning.learn_deploy_verifiers\">\n<code class=\"descname\">learn_deploy_verifiers</code><span class=\"sig-paren\">(</span><em>publish=False</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_matching/#InfrLearning.learn_deploy_verifiers\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_matching.InfrLearning.learn_deploy_verifiers\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Uses current knowledge to train verifiers for new unseen pairs.</p>\n<p class=\"rubric\">Example</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">ibeis</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ibs</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">opendb</span><span class=\"p\">(</span><span class=\"s1\">&#39;PZ_MTEST&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">AnnotInference</span><span class=\"p\">(</span><span class=\"n\">ibs</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"o\">=</span><span class=\"s1\">&#39;all&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">ensure_mst</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">publish</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">learn_deploy_verifiers</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<dl class=\"docutils\">\n<dt>Ignore:</dt>\n<dd>publish = True</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_matching.InfrLearning.learn_evaluation_verifiers\">\n<code class=\"descname\">learn_evaluation_verifiers</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_matching/#InfrLearning.learn_evaluation_verifiers\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_matching.InfrLearning.learn_evaluation_verifiers\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Creates a cross-validated ensemble of classifiers to evaluate\nverifier error cases and groundtruth errors.</p>\n<dl class=\"docutils\">\n<dt>CommandLine:</dt>\n<dd>python -m ibeis.algo.graph.mixin_matching learn_evaluation_verifiers</dd>\n<dt>Doctest:</dt>\n<dd><div class=\"first last highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">ibeis</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">ibeis</span><span class=\"o\">.</span><span class=\"n\">AnnotInference</span><span class=\"p\">(</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"s1\">&#39;PZ_MTEST&#39;</span><span class=\"p\">,</span> <span class=\"n\">aids</span><span class=\"o\">=</span><span class=\"s1\">&#39;all&#39;</span><span class=\"p\">,</span> <span class=\"n\">autoinit</span><span class=\"o\">=</span><span class=\"s1\">&#39;annotmatch&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">verifiers</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">learn_evaluation_verifiers</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">())</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">verif</span> <span class=\"o\">=</span> <span class=\"n\">verifiers</span><span class=\"p\">[</span><span class=\"s1\">&#39;match_state&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">probs</span> <span class=\"o\">=</span> <span class=\"n\">verif</span><span class=\"o\">.</span><span class=\"n\">predict_proba_df</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">probs</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_matching.InfrLearning.load_latest_classifiers\">\n<code class=\"descname\">load_latest_classifiers</code><span class=\"sig-paren\">(</span><em>dpath</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_matching/#InfrLearning.load_latest_classifiers\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_matching.InfrLearning.load_latest_classifiers\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_matching.InfrLearning.load_published\">\n<code class=\"descname\">load_published</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_matching/#InfrLearning.load_published\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_matching.InfrLearning.load_published\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Downloads, caches, and loads pre-trained verifiers.\nThis is the default action.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_matching.InfrLearning.photobomb_samples\">\n<code class=\"descname\">photobomb_samples</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_matching/#InfrLearning.photobomb_samples\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_matching.InfrLearning.photobomb_samples\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"module-ibeis.algo.graph.mixin_priority\">\n<span id=\"ibeis-algo-graph-mixin-priority-module\"></span><h2>ibeis.algo.graph.mixin_priority module<a class=\"headerlink\" href=\"#module-ibeis.algo.graph.mixin_priority\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"class\">\n<dt id=\"ibeis.algo.graph.mixin_priority.Priority\">\n<em class=\"property\">class </em><code class=\"descclassname\">ibeis.algo.graph.mixin_priority.</code><code class=\"descname\">Priority</code><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_priority/#Priority\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_priority.Priority\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></p>\n<p>Handles prioritization of edges for review.</p>\n<p class=\"rubric\">Example</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># ENABLE_DOCTEST</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.mixin_priority</span> <span class=\"k\">import</span> <span class=\"o\">*</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph</span> <span class=\"k\">import</span> <span class=\"n\">demo</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">demo</span><span class=\"o\">.</span><span class=\"n\">demodata_infr</span><span class=\"p\">(</span><span class=\"n\">num_pccs</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_priority.Priority.confidently_connected\">\n<code class=\"descname\">confidently_connected</code><span class=\"sig-paren\">(</span><em>u</em>, <em>v</em>, <em>thresh=2</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_priority/#Priority.confidently_connected\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_priority.Priority.confidently_connected\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Checks if u and v are conneted by edges above a confidence threshold</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_priority.Priority.confidently_separated\">\n<code class=\"descname\">confidently_separated</code><span class=\"sig-paren\">(</span><em>u</em>, <em>v</em>, <em>thresh=2</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_priority/#Priority.confidently_separated\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_priority.Priority.confidently_separated\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Checks if u and v are conneted by edges above a confidence threshold</p>\n<dl class=\"docutils\">\n<dt>Doctest:</dt>\n<dd><div class=\"first last highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.mixin_priority</span> <span class=\"k\">import</span> <span class=\"o\">*</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph</span> <span class=\"k\">import</span> <span class=\"n\">demo</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">demo</span><span class=\"o\">.</span><span class=\"n\">make_demo_infr</span><span class=\"p\">(</span><span class=\"n\">ccs</span><span class=\"o\">=</span><span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">)])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"n\">NEGTV</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">((</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">),</span> <span class=\"n\">NEGTV</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">((</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">NEGTV</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">thresh</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">confidently_separated</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">thresh</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">((</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">NEGTV</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">confidently_separated</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">thresh</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_priority.Priority.generate_reviews\">\n<code class=\"descname\">generate_reviews</code><span class=\"sig-paren\">(</span><em>pos_redun=None</em>, <em>neg_redun=None</em>, <em>data=False</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_priority/#Priority.generate_reviews\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_priority.Priority.generate_reviews\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Dynamic generator that yeilds high priority reviews</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_priority.Priority.peek\">\n<code class=\"descname\">peek</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_priority/#Priority.peek\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_priority.Priority.peek\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_priority.Priority.peek_many\">\n<code class=\"descname\">peek_many</code><span class=\"sig-paren\">(</span><em>n</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_priority/#Priority.peek_many\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_priority.Priority.peek_many\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Peeks at the top n edges in the queue.</p>\n<p class=\"rubric\">Example</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># ENABLE_DOCTEST</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.mixin_priority</span> <span class=\"k\">import</span> <span class=\"o\">*</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph</span> <span class=\"k\">import</span> <span class=\"n\">demo</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">demo</span><span class=\"o\">.</span><span class=\"n\">demodata_infr</span><span class=\"p\">(</span><span class=\"n\">num_pccs</span><span class=\"o\">=</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">refresh_candidate_edges</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">peek_many</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_priority.Priority.pop\">\n<code class=\"descname\">pop</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_priority/#Priority.pop\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_priority.Priority.pop\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Main interface to the priority queue used by the algorithm loops.\nPops the highest priority edge from the queue.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_priority.Priority.prioritize\">\n<code class=\"descname\">prioritize</code><span class=\"sig-paren\">(</span><em>metric=None</em>, <em>edges=None</em>, <em>scores=None</em>, <em>force_inconsistent=True</em>, <em>reset=False</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_priority/#Priority.prioritize\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_priority.Priority.prioritize\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Adds edges to the priority queue</p>\n<dl class=\"docutils\">\n<dt>Doctest:</dt>\n<dd><div class=\"first last highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.mixin_priority</span> <span class=\"k\">import</span> <span class=\"o\">*</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph</span> <span class=\"k\">import</span> <span class=\"n\">demo</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">demo</span><span class=\"o\">.</span><span class=\"n\">demodata_infr</span><span class=\"p\">(</span><span class=\"n\">num_pccs</span><span class=\"o\">=</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">ensure_cliques</span><span class=\"p\">(</span><span class=\"n\">meta_decision</span><span class=\"o\">=</span><span class=\"n\">SAME</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Add a negative edge inside a PCC</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ccs</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">positive_components</span><span class=\"p\">())</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">edge1</span> <span class=\"o\">=</span> <span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">ccs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">edge2</span> <span class=\"o\">=</span> <span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">ccs</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">(</span><span class=\"n\">edge1</span><span class=\"p\">,</span> <span class=\"n\">NEGTV</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">(</span><span class=\"n\">edge2</span><span class=\"p\">,</span> <span class=\"n\">NEGTV</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">num_new</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">prioritize</span><span class=\"p\">(</span><span class=\"n\">reset</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">order</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_peek_many</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">inf</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">scores</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take_column</span><span class=\"p\">(</span><span class=\"n\">order</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"n\">scores</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"mi\">10</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">scores</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">num_new</span><span class=\"p\">,</span> <span class=\"s1\">&#39;should prioritize two hypotheis edges&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">unrev_edges</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">unreviewed_graph</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">())</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">err_edges</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">nid_to_errors</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">unrev_edges</span> <span class=\"o\">-</span> <span class=\"n\">err_edges</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">edges</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">err_edges</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">num_new</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">prioritize</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"o\">=</span><span class=\"n\">edges</span><span class=\"p\">,</span> <span class=\"n\">reset</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">order2</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">_peek_many</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">inf</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">scores2</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take_column</span><span class=\"p\">(</span><span class=\"n\">order2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">(</span><span class=\"n\">scores2</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">(</span><span class=\"n\">scores2</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">:]</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd>\n</dl>\n<p class=\"rubric\">Example</p>\n<p>import ibeis\ninfr = ibeis.AnnotInference(\u2018PZ_MTEST\u2019, aids=\u2019all\u2019, autoinit=\u2019staging\u2019)\ninfr.verbose = 1000\ninfr.load_published()\nincon_edges = set(ut.iflatten(infr.nid_to_errors.values()))\nassert len(incon_edges) &gt; 0\nedges = list(infr.find_pos_redun_candidate_edges())\nassert len(set(incon_edges).intersection(set(edges))) == 0\ninfr.add_candidate_edges(edges)</p>\n<p>infr.prioritize()\nprint(ut.repr4(infr.status()))</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_priority.Priority.push\">\n<code class=\"descname\">push</code><span class=\"sig-paren\">(</span><em>edge</em>, <em>priority=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_priority/#Priority.push\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_priority.Priority.push\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Push an edge back onto the queue</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_priority.Priority.reinstate_between_priority\">\n<code class=\"descname\">reinstate_between_priority</code><span class=\"sig-paren\">(</span><em>cc1</em>, <em>cc2</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_priority/#Priority.reinstate_between_priority\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_priority.Priority.reinstate_between_priority\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_priority.Priority.reinstate_external_priority\">\n<code class=\"descname\">reinstate_external_priority</code><span class=\"sig-paren\">(</span><em>cc</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_priority/#Priority.reinstate_external_priority\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_priority.Priority.reinstate_external_priority\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_priority.Priority.reinstate_internal_priority\">\n<code class=\"descname\">reinstate_internal_priority</code><span class=\"sig-paren\">(</span><em>cc</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_priority/#Priority.reinstate_internal_priority\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_priority.Priority.reinstate_internal_priority\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_priority.Priority.remaining_reviews\">\n<code class=\"descname\">remaining_reviews</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_priority/#Priority.remaining_reviews\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_priority.Priority.remaining_reviews\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_priority.Priority.remove_between_priority\">\n<code class=\"descname\">remove_between_priority</code><span class=\"sig-paren\">(</span><em>cc1</em>, <em>cc2</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_priority/#Priority.remove_between_priority\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_priority.Priority.remove_between_priority\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_priority.Priority.remove_external_priority\">\n<code class=\"descname\">remove_external_priority</code><span class=\"sig-paren\">(</span><em>cc</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_priority/#Priority.remove_external_priority\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_priority.Priority.remove_external_priority\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_priority.Priority.remove_internal_priority\">\n<code class=\"descname\">remove_internal_priority</code><span class=\"sig-paren\">(</span><em>cc</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_priority/#Priority.remove_internal_priority\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_priority.Priority.remove_internal_priority\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"module-ibeis.algo.graph.mixin_simulation\">\n<span id=\"ibeis-algo-graph-mixin-simulation-module\"></span><h2>ibeis.algo.graph.mixin_simulation module<a class=\"headerlink\" href=\"#module-ibeis.algo.graph.mixin_simulation\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Mixin functionality for experiments, tests, and simulations.\nThis includes recordings measures used to generate plots in JC\u2019s thesis.</p>\n<dl class=\"class\">\n<dt id=\"ibeis.algo.graph.mixin_simulation.SimulationHelpers\">\n<em class=\"property\">class </em><code class=\"descclassname\">ibeis.algo.graph.mixin_simulation.</code><code class=\"descname\">SimulationHelpers</code><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_simulation/#SimulationHelpers\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_simulation.SimulationHelpers\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></p>\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_simulation.SimulationHelpers.init_simulation\">\n<code class=\"descname\">init_simulation</code><span class=\"sig-paren\">(</span><em>oracle_accuracy=1.0</em>, <em>k_redun=2</em>, <em>enable_autoreview=True</em>, <em>enable_inference=True</em>, <em>classifiers=None</em>, <em>match_state_thresh=None</em>, <em>max_outer_loops=None</em>, <em>name=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_simulation/#SimulationHelpers.init_simulation\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_simulation.SimulationHelpers.init_simulation\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_simulation.SimulationHelpers.init_test_mode\">\n<code class=\"descname\">init_test_mode</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_simulation/#SimulationHelpers.init_test_mode\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_simulation.SimulationHelpers.init_test_mode\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_simulation.SimulationHelpers.measure_error_edges\">\n<code class=\"descname\">measure_error_edges</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_simulation/#SimulationHelpers.measure_error_edges\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_simulation.SimulationHelpers.measure_error_edges\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_simulation.SimulationHelpers.measure_metrics\">\n<code class=\"descname\">measure_metrics</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_simulation/#SimulationHelpers.measure_metrics\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_simulation.SimulationHelpers.measure_metrics\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n<dl class=\"class\">\n<dt id=\"ibeis.algo.graph.mixin_simulation.UserOracle\">\n<em class=\"property\">class </em><code class=\"descclassname\">ibeis.algo.graph.mixin_simulation.</code><code class=\"descname\">UserOracle</code><span class=\"sig-paren\">(</span><em>accuracy</em>, <em>rng</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_simulation/#UserOracle\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_simulation.UserOracle\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></p>\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_simulation.UserOracle.review\">\n<code class=\"descname\">review</code><span class=\"sig-paren\">(</span><em>edge</em>, <em>truth</em>, <em>infr</em>, <em>accuracy=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_simulation/#UserOracle.review\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_simulation.UserOracle.review\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"module-ibeis.algo.graph.mixin_viz\">\n<span id=\"ibeis-algo-graph-mixin-viz-module\"></span><h2>ibeis.algo.graph.mixin_viz module<a class=\"headerlink\" href=\"#module-ibeis.algo.graph.mixin_viz\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"class\">\n<dt id=\"ibeis.algo.graph.mixin_viz.GraphVisualization\">\n<em class=\"property\">class </em><code class=\"descclassname\">ibeis.algo.graph.mixin_viz.</code><code class=\"descname\">GraphVisualization</code><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_viz/#GraphVisualization\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_viz.GraphVisualization\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></p>\n<p>contains plotting related code</p>\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_viz.GraphVisualization.debug_edge_repr\">\n<code class=\"descname\">debug_edge_repr</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_viz/#GraphVisualization.debug_edge_repr\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_viz.GraphVisualization.debug_edge_repr\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_viz.GraphVisualization.draw_aids\">\n<code class=\"descname\">draw_aids</code><span class=\"sig-paren\">(</span><em>aids</em>, <em>fnum=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_viz/#GraphVisualization.draw_aids\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_viz.GraphVisualization.draw_aids\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_viz.GraphVisualization.get_colored_edge_weights\">\n<code class=\"descname\">get_colored_edge_weights</code><span class=\"sig-paren\">(</span><em>graph=None</em>, <em>highlight_reviews=True</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_viz/#GraphVisualization.get_colored_edge_weights\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_viz.GraphVisualization.get_colored_edge_weights\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_viz.GraphVisualization.get_colored_weights\">\n<code class=\"descname\">get_colored_weights</code><span class=\"sig-paren\">(</span><em>weights</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_viz/#GraphVisualization.get_colored_weights\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_viz.GraphVisualization.get_colored_weights\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_viz.GraphVisualization.initialize_visual_node_attrs\">\n<code class=\"descname\">initialize_visual_node_attrs</code><span class=\"sig-paren\">(</span><em>graph=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_viz/#GraphVisualization.initialize_visual_node_attrs\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_viz.GraphVisualization.initialize_visual_node_attrs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"staticmethod\">\n<dt id=\"ibeis.algo.graph.mixin_viz.GraphVisualization.make_viz_config\">\n<em class=\"property\">static </em><code class=\"descname\">make_viz_config</code><span class=\"sig-paren\">(</span><em>use_image</em>, <em>small_graph</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_viz/#GraphVisualization.make_viz_config\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_viz.GraphVisualization.make_viz_config\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_viz.GraphVisualization.repr_edge_data\">\n<code class=\"descname\">repr_edge_data</code><span class=\"sig-paren\">(</span><em>all_edge_data</em>, <em>visual=True</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_viz/#GraphVisualization.repr_edge_data\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_viz.GraphVisualization.repr_edge_data\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_viz.GraphVisualization.rrr\">\n<code class=\"descname\">rrr</code><span class=\"sig-paren\">(</span><em>verbose=True</em>, <em>reload_module=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_viz.GraphVisualization.rrr\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>special class reloading function\nThis function is often injected as rrr of classes</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_viz.GraphVisualization.show\">\n<code class=\"descname\">show</code><span class=\"sig-paren\">(</span><em>graph=None</em>, <em>use_image=False</em>, <em>update_attrs=True</em>, <em>with_colorbar=False</em>, <em>pnum=(1</em>, <em>1</em>, <em>1)</em>, <em>zoomable=True</em>, <em>pickable=False</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_viz.GraphVisualization.show\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first last simple\">\n<li><strong>infr</strong> \u2013 </li>\n<li><strong>graph</strong> (<em>None</em>) \u2013 (default = None)</li>\n<li><strong>use_image</strong> (<em>bool</em>) \u2013 (default = False)</li>\n<li><strong>update_attrs</strong> (<em>bool</em>) \u2013 (default = True)</li>\n<li><strong>with_colorbar</strong> (<em>bool</em>) \u2013 (default = False)</li>\n<li><strong>pnum</strong> (<em>tuple</em>) \u2013 plot number(default = (1, 1, 1))</li>\n<li><strong>zoomable</strong> (<em>bool</em>) \u2013 (default = True)</li>\n<li><strong>pickable</strong> (<em>bool</em>) \u2013 (de = False)</li>\n<li><strong>**kwargs</strong> \u2013 verbose, with_labels, fnum, layout, ax, pos, img_dict,\ntitle, layoutkw, framewidth, modify_ax, as_directed,\nhacknoedge, hacknode, node_labels, arrow_width, fontsize,\nfontweight, fontname, fontfamilty, fontproperties</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"docutils\">\n<dt>CommandLine:</dt>\n<dd>python -m ibeis.algo.graph.mixin_viz GraphVisualization.show_graph \u2013show</dd>\n</dl>\n<p class=\"rubric\">Example</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># ENABLE_DOCTEST</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.mixin_viz</span> <span class=\"k\">import</span> <span class=\"o\">*</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph</span> <span class=\"k\">import</span> <span class=\"n\">demo</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">plottool</span> <span class=\"k\">as</span> <span class=\"nn\">pt</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">demo</span><span class=\"o\">.</span><span class=\"n\">demodata_infr</span><span class=\"p\">(</span><span class=\"n\">ccs</span><span class=\"o\">=</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">estarmap</span><span class=\"p\">(</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>   <span class=\"nb\">range</span><span class=\"p\">,</span> <span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">),</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>           <span class=\"p\">(</span><span class=\"mi\">17</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">)]))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pnum_</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">make_pnum_nextgen</span><span class=\"p\">(</span><span class=\"n\">nRows</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">nCols</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">show_graph</span><span class=\"p\">(</span><span class=\"n\">show_cand</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">simple_labels</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">pickable</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">pnum</span><span class=\"o\">=</span><span class=\"n\">pnum_</span><span class=\"p\">())</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"n\">INCMP</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">((</span><span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"mi\">18</span><span class=\"p\">),</span> <span class=\"n\">INCMP</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">refresh_candidate_edges</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">show_graph</span><span class=\"p\">(</span><span class=\"n\">show_cand</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">simple_labels</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">pickable</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">pnum</span><span class=\"o\">=</span><span class=\"n\">pnum_</span><span class=\"p\">())</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">((</span><span class=\"mi\">17</span><span class=\"p\">,</span> <span class=\"mi\">18</span><span class=\"p\">),</span> <span class=\"n\">NEGTV</span><span class=\"p\">)</span>  <span class=\"c1\"># add inconsistency</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">apply_nondynamic_update</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">show_graph</span><span class=\"p\">(</span><span class=\"n\">show_cand</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">simple_labels</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">pickable</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">pnum</span><span class=\"o\">=</span><span class=\"n\">pnum_</span><span class=\"p\">())</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">show_if_requested</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_viz.GraphVisualization.show_edge\">\n<code class=\"descname\">show_edge</code><span class=\"sig-paren\">(</span><em>edge</em>, <em>fnum=None</em>, <em>pnum=None</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_viz/#GraphVisualization.show_edge\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_viz.GraphVisualization.show_edge\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_viz.GraphVisualization.show_error_case\">\n<code class=\"descname\">show_error_case</code><span class=\"sig-paren\">(</span><em>aids</em>, <em>edge=None</em>, <em>error_edges=None</em>, <em>colorby=None</em>, <em>fnum=1</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_viz/#GraphVisualization.show_error_case\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_viz.GraphVisualization.show_error_case\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Example</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_viz.GraphVisualization.show_graph\">\n<code class=\"descname\">show_graph</code><span class=\"sig-paren\">(</span><em>graph=None</em>, <em>use_image=False</em>, <em>update_attrs=True</em>, <em>with_colorbar=False</em>, <em>pnum=(1</em>, <em>1</em>, <em>1)</em>, <em>zoomable=True</em>, <em>pickable=False</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_viz/#GraphVisualization.show_graph\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_viz.GraphVisualization.show_graph\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first last simple\">\n<li><strong>infr</strong> \u2013 </li>\n<li><strong>graph</strong> (<em>None</em>) \u2013 (default = None)</li>\n<li><strong>use_image</strong> (<em>bool</em>) \u2013 (default = False)</li>\n<li><strong>update_attrs</strong> (<em>bool</em>) \u2013 (default = True)</li>\n<li><strong>with_colorbar</strong> (<em>bool</em>) \u2013 (default = False)</li>\n<li><strong>pnum</strong> (<em>tuple</em>) \u2013 plot number(default = (1, 1, 1))</li>\n<li><strong>zoomable</strong> (<em>bool</em>) \u2013 (default = True)</li>\n<li><strong>pickable</strong> (<em>bool</em>) \u2013 (de = False)</li>\n<li><strong>**kwargs</strong> \u2013 verbose, with_labels, fnum, layout, ax, pos, img_dict,\ntitle, layoutkw, framewidth, modify_ax, as_directed,\nhacknoedge, hacknode, node_labels, arrow_width, fontsize,\nfontweight, fontname, fontfamilty, fontproperties</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"docutils\">\n<dt>CommandLine:</dt>\n<dd>python -m ibeis.algo.graph.mixin_viz GraphVisualization.show_graph \u2013show</dd>\n</dl>\n<p class=\"rubric\">Example</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># ENABLE_DOCTEST</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.mixin_viz</span> <span class=\"k\">import</span> <span class=\"o\">*</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph</span> <span class=\"k\">import</span> <span class=\"n\">demo</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">plottool</span> <span class=\"k\">as</span> <span class=\"nn\">pt</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">demo</span><span class=\"o\">.</span><span class=\"n\">demodata_infr</span><span class=\"p\">(</span><span class=\"n\">ccs</span><span class=\"o\">=</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">estarmap</span><span class=\"p\">(</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>   <span class=\"nb\">range</span><span class=\"p\">,</span> <span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">),</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>           <span class=\"p\">(</span><span class=\"mi\">17</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">)]))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pnum_</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">make_pnum_nextgen</span><span class=\"p\">(</span><span class=\"n\">nRows</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">nCols</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">show_graph</span><span class=\"p\">(</span><span class=\"n\">show_cand</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">simple_labels</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">pickable</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">pnum</span><span class=\"o\">=</span><span class=\"n\">pnum_</span><span class=\"p\">())</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"n\">INCMP</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">((</span><span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"mi\">18</span><span class=\"p\">),</span> <span class=\"n\">INCMP</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">refresh_candidate_edges</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">show_graph</span><span class=\"p\">(</span><span class=\"n\">show_cand</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">simple_labels</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">pickable</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">pnum</span><span class=\"o\">=</span><span class=\"n\">pnum_</span><span class=\"p\">())</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">add_feedback</span><span class=\"p\">((</span><span class=\"mi\">17</span><span class=\"p\">,</span> <span class=\"mi\">18</span><span class=\"p\">),</span> <span class=\"n\">NEGTV</span><span class=\"p\">)</span>  <span class=\"c1\"># add inconsistency</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">apply_nondynamic_update</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">show_graph</span><span class=\"p\">(</span><span class=\"n\">show_cand</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">simple_labels</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">pickable</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">pnum</span><span class=\"o\">=</span><span class=\"n\">pnum_</span><span class=\"p\">())</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">show_if_requested</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_viz.GraphVisualization.simplify_graph\">\n<code class=\"descname\">simplify_graph</code><span class=\"sig-paren\">(</span><em>graph=None</em>, <em>copy=True</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_viz/#GraphVisualization.simplify_graph\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_viz.GraphVisualization.simplify_graph\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_viz.GraphVisualization.start_qt_interface\">\n<code class=\"descname\">start_qt_interface</code><span class=\"sig-paren\">(</span><em>loop=True</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_viz/#GraphVisualization.start_qt_interface\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_viz.GraphVisualization.start_qt_interface\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_viz.GraphVisualization.update_node_image_attribute\">\n<code class=\"descname\">update_node_image_attribute</code><span class=\"sig-paren\">(</span><em>use_image=False</em>, <em>graph=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_viz/#GraphVisualization.update_node_image_attribute\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_viz.GraphVisualization.update_node_image_attribute\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_viz.GraphVisualization.update_node_image_config\">\n<code class=\"descname\">update_node_image_config</code><span class=\"sig-paren\">(</span><em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_viz/#GraphVisualization.update_node_image_config\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_viz.GraphVisualization.update_node_image_config\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.mixin_viz.GraphVisualization.update_visual_attrs\">\n<code class=\"descname\">update_visual_attrs</code><span class=\"sig-paren\">(</span><em>graph=None</em>, <em>show_reviewed_edges=True</em>, <em>show_unreviewed_edges=False</em>, <em>show_inferred_diff=True</em>, <em>show_inferred_same=True</em>, <em>show_recent_review=False</em>, <em>highlight_reviews=True</em>, <em>show_inconsistency=True</em>, <em>wavy=False</em>, <em>simple_labels=False</em>, <em>show_labels=True</em>, <em>reposition=True</em>, <em>use_image=False</em>, <em>edge_overrides=None</em>, <em>node_overrides=None</em>, <em>colorby='name_label'</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_viz/#GraphVisualization.update_visual_attrs\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_viz.GraphVisualization.update_visual_attrs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"ibeis.algo.graph.mixin_viz.GraphVisualization.visual_edge_attrs\">\n<code class=\"descname\">visual_edge_attrs</code><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_viz.GraphVisualization.visual_edge_attrs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>all edge visual attrs</p>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"ibeis.algo.graph.mixin_viz.GraphVisualization.visual_edge_attrs_appearance\">\n<code class=\"descname\">visual_edge_attrs_appearance</code><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_viz.GraphVisualization.visual_edge_attrs_appearance\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>attrs that pertain to edge color and style</p>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"ibeis.algo.graph.mixin_viz.GraphVisualization.visual_edge_attrs_space\">\n<code class=\"descname\">visual_edge_attrs_space</code><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_viz.GraphVisualization.visual_edge_attrs_space\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>attrs that pertain to edge positioning in a plot</p>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"ibeis.algo.graph.mixin_viz.GraphVisualization.visual_node_attrs\">\n<code class=\"descname\">visual_node_attrs</code><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_viz.GraphVisualization.visual_node_attrs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n<dl class=\"function\">\n<dt id=\"ibeis.algo.graph.mixin_viz.on_pick\">\n<code class=\"descclassname\">ibeis.algo.graph.mixin_viz.</code><code class=\"descname\">on_pick</code><span class=\"sig-paren\">(</span><em>event</em>, <em>infr=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/mixin_viz/#on_pick\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.mixin_viz.on_pick\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"module-ibeis.algo.graph.nx_dynamic_graph\">\n<span id=\"ibeis-algo-graph-nx-dynamic-graph-module\"></span><h2>ibeis.algo.graph.nx_dynamic_graph module<a class=\"headerlink\" href=\"#module-ibeis.algo.graph.nx_dynamic_graph\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"class\">\n<dt id=\"ibeis.algo.graph.nx_dynamic_graph.DynConnGraph\">\n<em class=\"property\">class </em><code class=\"descclassname\">ibeis.algo.graph.nx_dynamic_graph.</code><code class=\"descname\">DynConnGraph</code><span class=\"sig-paren\">(</span><em>*args</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_dynamic_graph/#DynConnGraph\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_dynamic_graph.DynConnGraph\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">networkx.classes.graph.Graph</span></code>, <a class=\"reference internal\" href=\"#ibeis.algo.graph.nx_dynamic_graph.GraphHelperMixin\" title=\"ibeis.algo.graph.nx_dynamic_graph.GraphHelperMixin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ibeis.algo.graph.nx_dynamic_graph.GraphHelperMixin</span></code></a></p>\n<p>Dynamically connected graph.</p>\n<p>Maintains a data structure parallel to a normal networkx graph that\nmaintains dynamic connectivity for fast connected compoment queries.</p>\n<p>Underlying Data Structures and limitations are</p>\n<ul class=\"simple\">\n<li>UnionFind        | lg(n)     |    n     |  No</li>\n<li>UnionFind2       |    n*     |    n     |  1</li>\n<li>EulerTourForest  | lg^2(n)   | lg^2(n)  |  lg(n) / lglg(n) - - Ammortized</li>\n<li>it seems to be very quick</li>\n</ul>\n<p class=\"rubric\">References</p>\n<p><a class=\"reference external\" href=\"https://courses.csail.mit.edu/6.851/spring14/lectures/L20.pdf\">https://courses.csail.mit.edu/6.851/spring14/lectures/L20.pdf</a>\n<a class=\"reference external\" href=\"https://courses.csail.mit.edu/6.851/spring14/lectures/L20.html\">https://courses.csail.mit.edu/6.851/spring14/lectures/L20.html</a>\n<a class=\"reference external\" href=\"http://cs.stackexchange.com/questions/33595/maintaining-connecte\">http://cs.stackexchange.com/questions/33595/maintaining-connecte</a>\n<a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Dynamic_connectivity#Fully_dynamic_connectivity\">https://en.wikipedia.org/wiki/Dynamic_connectivity#Fully_dynamic_connectivity</a></p>\n<dl class=\"docutils\">\n<dt>CommandLine:</dt>\n<dd>python -m ibeis.algo.graph.nx_dynamic_graph DynConnGraph</dd>\n</dl>\n<p class=\"rubric\">Example</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># ENABLE_DOCTEST</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.nx_dynamic_graph</span> <span class=\"k\">import</span> <span class=\"o\">*</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"bp\">self</span> <span class=\"o\">=</span> <span class=\"n\">DynConnGraph</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">add_edges_from</span><span class=\"p\">([(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">add_edges_from</span><span class=\"p\">([(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">70</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">70</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">)])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ccs</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">node_label</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">node_label</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">connected_to</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">connected_to</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">node_label</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">node_label</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">connected_to</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">connected_to</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">remove_edge</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">node_label</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">node_label</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">connected_to</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">connected_to</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ccs</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">connected_components</span><span class=\"p\">())</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">quit_if_noshow</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">plottool</span> <span class=\"k\">as</span> <span class=\"nn\">pt</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">qtensure</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">show_nx</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p># todo: check if nodes exist when adding</p>\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.nx_dynamic_graph.DynConnGraph.add_edge\">\n<code class=\"descname\">add_edge</code><span class=\"sig-paren\">(</span><em>u</em>, <em>v</em>, <em>**attr</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_dynamic_graph/#DynConnGraph.add_edge\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_dynamic_graph.DynConnGraph.add_edge\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p class=\"rubric\">Example</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># ENABLE_DOCTEST</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.nx_dynamic_graph</span> <span class=\"k\">import</span> <span class=\"o\">*</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"bp\">self</span> <span class=\"o\">=</span> <span class=\"n\">DynConnGraph</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">add_edges_from</span><span class=\"p\">([(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ccs</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">},</span> <span class=\"mi\">4</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">}}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ccs</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">}}</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.nx_dynamic_graph.DynConnGraph.add_edges_from\">\n<code class=\"descname\">add_edges_from</code><span class=\"sig-paren\">(</span><em>ebunch</em>, <em>**attr</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_dynamic_graph/#DynConnGraph.add_edges_from\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_dynamic_graph.DynConnGraph.add_edges_from\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Add all the edges in ebunch_to_add.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first last simple\">\n<li><strong>ebunch_to_add</strong> (<em>container of edges</em>) \u2013 Each edge given in the container will be added to the\ngraph. The edges must be given as as 2-tuples (u, v) or\n3-tuples (u, v, d) where d is a dictionary containing edge data.</li>\n<li><strong>attr</strong> (<em>keyword arguments</em><em>, </em><em>optional</em>) \u2013 Edge data (or labels or objects) can be assigned using\nkeyword arguments.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n<div class=\"admonition seealso\">\n<p class=\"first admonition-title\">See also</p>\n<dl class=\"last docutils\">\n<dt><a class=\"reference internal\" href=\"#ibeis.algo.graph.nx_dynamic_graph.DynConnGraph.add_edge\" title=\"ibeis.algo.graph.nx_dynamic_graph.DynConnGraph.add_edge\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">add_edge()</span></code></a></dt>\n<dd>add a single edge</dd>\n<dt><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">add_weighted_edges_from()</span></code></dt>\n<dd>convenient way to add weighted edges</dd>\n</dl>\n</div>\n<p class=\"rubric\">Notes</p>\n<p>Adding the same edge twice has no effect but any edge data\nwill be updated when each duplicate edge is added.</p>\n<p>Edge attributes specified in an ebunch take precedence over\nattributes specified via keyword arguments.</p>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">Graph</span><span class=\"p\">()</span>   <span class=\"c1\"># or DiGraph, MultiGraph, MultiDiGraph, etc</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">add_edges_from</span><span class=\"p\">([(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)])</span> <span class=\"c1\"># using a list of edge tuples</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">add_edges_from</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span> <span class=\"c1\"># Add the path graph 0-1-2-3</span>\n</pre></div>\n</div>\n<p>Associate data to edges</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">add_edges_from</span><span class=\"p\">([(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)],</span> <span class=\"n\">weight</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">add_edges_from</span><span class=\"p\">([(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)],</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">&#39;WN2898&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.nx_dynamic_graph.DynConnGraph.add_node\">\n<code class=\"descname\">add_node</code><span class=\"sig-paren\">(</span><em>n</em>, <em>**attr</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_dynamic_graph/#DynConnGraph.add_node\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_dynamic_graph.DynConnGraph.add_node\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Add a single node <cite>node_for_adding</cite> and update node attributes.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first last simple\">\n<li><strong>node_for_adding</strong> (<em>node</em>) \u2013 A node can be any hashable Python object except None.</li>\n<li><strong>attr</strong> (<em>keyword arguments</em><em>, </em><em>optional</em>) \u2013 Set or change node attributes using key=value.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n<div class=\"admonition seealso\">\n<p class=\"first admonition-title\">See also</p>\n<p class=\"last\"><a class=\"reference internal\" href=\"#ibeis.algo.graph.nx_dynamic_graph.DynConnGraph.add_nodes_from\" title=\"ibeis.algo.graph.nx_dynamic_graph.DynConnGraph.add_nodes_from\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">add_nodes_from()</span></code></a></p>\n</div>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">Graph</span><span class=\"p\">()</span>  <span class=\"c1\"># or DiGraph, MultiGraph, MultiDiGraph, etc</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">add_node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">add_node</span><span class=\"p\">(</span><span class=\"s1\">&#39;Hello&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">K3</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">Graph</span><span class=\"p\">([(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">add_node</span><span class=\"p\">(</span><span class=\"n\">K3</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">number_of_nodes</span><span class=\"p\">()</span>\n<span class=\"go\">3</span>\n</pre></div>\n</div>\n<p>Use keywords set/change node attributes:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">add_node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">add_node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">weight</span><span class=\"o\">=</span><span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"n\">UTM</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;13S&#39;</span><span class=\"p\">,</span> <span class=\"mi\">382871</span><span class=\"p\">,</span> <span class=\"mi\">3972649</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p class=\"rubric\">Notes</p>\n<p>A hashable object is one that can be used as a key in a Python\ndictionary. This includes strings, numbers, tuples of strings\nand numbers, etc.</p>\n<p>On many platforms hashable items also include mutables such as\nNetworkX Graphs, though one should be careful that the hash\ndoesn\u2019t change on mutables.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.nx_dynamic_graph.DynConnGraph.add_nodes_from\">\n<code class=\"descname\">add_nodes_from</code><span class=\"sig-paren\">(</span><em>nodes</em>, <em>**attr</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_dynamic_graph/#DynConnGraph.add_nodes_from\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_dynamic_graph.DynConnGraph.add_nodes_from\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Add multiple nodes.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first last simple\">\n<li><strong>nodes_for_adding</strong> (<em>iterable container</em>) \u2013 A container of nodes (list, dict, set, etc.).\nOR\nA container of (node, attribute dict) tuples.\nNode attributes are updated using the attribute dict.</li>\n<li><strong>attr</strong> (<em>keyword arguments</em><em>, </em><em>optional</em><em> (</em><em>default= no attributes</em><em>)</em>) \u2013 Update attributes for all nodes in nodes.\nNode attributes specified in nodes as a tuple take\nprecedence over attributes specified via keyword arguments.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n<div class=\"admonition seealso\">\n<p class=\"first admonition-title\">See also</p>\n<p class=\"last\"><a class=\"reference internal\" href=\"#ibeis.algo.graph.nx_dynamic_graph.DynConnGraph.add_node\" title=\"ibeis.algo.graph.nx_dynamic_graph.DynConnGraph.add_node\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">add_node()</span></code></a></p>\n</div>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">Graph</span><span class=\"p\">()</span>  <span class=\"c1\"># or DiGraph, MultiGraph, MultiDiGraph, etc</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">add_nodes_from</span><span class=\"p\">(</span><span class=\"s1\">&#39;Hello&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">K3</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">Graph</span><span class=\"p\">([(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">add_nodes_from</span><span class=\"p\">(</span><span class=\"n\">K3</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">nodes</span><span class=\"p\">(),</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n<span class=\"go\">[0, 1, 2, &#39;H&#39;, &#39;e&#39;, &#39;l&#39;, &#39;o&#39;]</span>\n</pre></div>\n</div>\n<p>Use keywords to update specific node attributes for every node.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">add_nodes_from</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">add_nodes_from</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"n\">weight</span><span class=\"o\">=</span><span class=\"mf\">0.4</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Use (node, attrdict) tuples to update attributes for specific nodes.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">add_nodes_from</span><span class=\"p\">([(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">11</span><span class=\"p\">)),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;color&#39;</span><span class=\"p\">:</span><span class=\"s1\">&#39;blue&#39;</span><span class=\"p\">})])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">nodes</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"s1\">&#39;size&#39;</span><span class=\"p\">]</span>\n<span class=\"go\">11</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">H</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">Graph</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">H</span><span class=\"o\">.</span><span class=\"n\">add_nodes_from</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">nodes</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">H</span><span class=\"o\">.</span><span class=\"n\">nodes</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"s1\">&#39;size&#39;</span><span class=\"p\">]</span>\n<span class=\"go\">11</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.nx_dynamic_graph.DynConnGraph.are_nodes_connected\">\n<code class=\"descname\">are_nodes_connected</code><span class=\"sig-paren\">(</span><em>u</em>, <em>v</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_dynamic_graph/#DynConnGraph.are_nodes_connected\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_dynamic_graph.DynConnGraph.are_nodes_connected\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.nx_dynamic_graph.DynConnGraph.clear\">\n<code class=\"descname\">clear</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_dynamic_graph/#DynConnGraph.clear\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_dynamic_graph.DynConnGraph.clear\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Remove all nodes and edges from the graph.</p>\n<p>This also removes the name, and all graph, node, and edge attributes.</p>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">path_graph</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>  <span class=\"c1\"># or DiGraph, MultiGraph, MultiDiGraph, etc</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">nodes</span><span class=\"p\">)</span>\n<span class=\"go\">[]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">)</span>\n<span class=\"go\">[]</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.nx_dynamic_graph.DynConnGraph.component\">\n<code class=\"descname\">component</code><span class=\"sig-paren\">(</span><em>label</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_dynamic_graph/#DynConnGraph.component\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_dynamic_graph.DynConnGraph.component\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.nx_dynamic_graph.DynConnGraph.component_labels\">\n<code class=\"descname\">component_labels</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_dynamic_graph/#DynConnGraph.component_labels\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_dynamic_graph.DynConnGraph.component_labels\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.nx_dynamic_graph.DynConnGraph.component_nodes\">\n<code class=\"descname\">component_nodes</code><span class=\"sig-paren\">(</span><em>label</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_dynamic_graph.DynConnGraph.component_nodes\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.nx_dynamic_graph.DynConnGraph.connected_components\">\n<code class=\"descname\">connected_components</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_dynamic_graph/#DynConnGraph.connected_components\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_dynamic_graph.DynConnGraph.connected_components\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p class=\"rubric\">Example</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># ENABLE_DOCTEST</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.nx_dynamic_graph</span> <span class=\"k\">import</span> <span class=\"o\">*</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"bp\">self</span> <span class=\"o\">=</span> <span class=\"n\">DynConnGraph</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">add_edges_from</span><span class=\"p\">([(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">)])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ccs</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">connected_components</span><span class=\"p\">())</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;ccs = </span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">repr2</span><span class=\"p\">(</span><span class=\"n\">ccs</span><span class=\"p\">,</span> <span class=\"n\">nl</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n<span class=\"go\">ccs = [{1, 2, 3}, {4, 5}, {6, 7}]</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.nx_dynamic_graph.DynConnGraph.connected_to\">\n<code class=\"descname\">connected_to</code><span class=\"sig-paren\">(</span><em>node</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_dynamic_graph/#DynConnGraph.connected_to\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_dynamic_graph.DynConnGraph.connected_to\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.nx_dynamic_graph.DynConnGraph.node_label\">\n<code class=\"descname\">node_label</code><span class=\"sig-paren\">(</span><em>node</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_dynamic_graph/#DynConnGraph.node_label\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_dynamic_graph.DynConnGraph.node_label\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p class=\"rubric\">Example</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># ENABLE_DOCTEST</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.nx_dynamic_graph</span> <span class=\"k\">import</span> <span class=\"o\">*</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"bp\">self</span> <span class=\"o\">=</span> <span class=\"n\">DynConnGraph</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">add_edges_from</span><span class=\"p\">([(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">)])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">node_label</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">node_label</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">node_label</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">node_label</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.nx_dynamic_graph.DynConnGraph.node_labels\">\n<code class=\"descname\">node_labels</code><span class=\"sig-paren\">(</span><em>*nodes</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_dynamic_graph/#DynConnGraph.node_labels\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_dynamic_graph.DynConnGraph.node_labels\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.nx_dynamic_graph.DynConnGraph.number_of_components\">\n<code class=\"descname\">number_of_components</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_dynamic_graph/#DynConnGraph.number_of_components\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_dynamic_graph.DynConnGraph.number_of_components\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.nx_dynamic_graph.DynConnGraph.remove_edge\">\n<code class=\"descname\">remove_edge</code><span class=\"sig-paren\">(</span><em>u</em>, <em>v</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_dynamic_graph/#DynConnGraph.remove_edge\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_dynamic_graph.DynConnGraph.remove_edge\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p class=\"rubric\">Example</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># ENABLE_DOCTEST</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.nx_dynamic_graph</span> <span class=\"k\">import</span> <span class=\"o\">*</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"bp\">self</span> <span class=\"o\">=</span> <span class=\"n\">DynConnGraph</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">add_edges_from</span><span class=\"p\">([(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ccs</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">},</span> <span class=\"mi\">4</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">}}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ccs</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">}}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">remove_edge</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ccs</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">},</span> <span class=\"mi\">4</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">}}</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.nx_dynamic_graph.DynConnGraph.remove_edges_from\">\n<code class=\"descname\">remove_edges_from</code><span class=\"sig-paren\">(</span><em>ebunch</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_dynamic_graph/#DynConnGraph.remove_edges_from\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_dynamic_graph.DynConnGraph.remove_edges_from\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Remove all edges specified in ebunch.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><strong>ebunch</strong> (<em>list</em><em> or </em><em>container of edge tuples</em>) \u2013 <p>Each edge given in the list or container will be removed\nfrom the graph. The edges can be:</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li>2-tuples (u, v) edge between u and v.</li>\n<li>3-tuples (u, v, k) where k is ignored.</li>\n</ul>\n</div></blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n<div class=\"admonition seealso\">\n<p class=\"first admonition-title\">See also</p>\n<dl class=\"last docutils\">\n<dt><a class=\"reference internal\" href=\"#ibeis.algo.graph.nx_dynamic_graph.DynConnGraph.remove_edge\" title=\"ibeis.algo.graph.nx_dynamic_graph.DynConnGraph.remove_edge\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">remove_edge()</span></code></a></dt>\n<dd>remove a single edge</dd>\n</dl>\n</div>\n<p class=\"rubric\">Notes</p>\n<p>Will fail silently if an edge in ebunch is not in the graph.</p>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">path_graph</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>  <span class=\"c1\"># or DiGraph, MultiGraph, MultiDiGraph, etc</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ebunch</span><span class=\"o\">=</span><span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">remove_edges_from</span><span class=\"p\">(</span><span class=\"n\">ebunch</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.nx_dynamic_graph.DynConnGraph.remove_node\">\n<code class=\"descname\">remove_node</code><span class=\"sig-paren\">(</span><em>n</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_dynamic_graph/#DynConnGraph.remove_node\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_dynamic_graph.DynConnGraph.remove_node\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl class=\"docutils\">\n<dt>CommandLine:</dt>\n<dd>python -m ibeis.algo.graph.nx_dynamic_graph remove_node</dd>\n</dl>\n<p class=\"rubric\">Example</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># ENABLE_DOCTEST</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.nx_dynamic_graph</span> <span class=\"k\">import</span> <span class=\"o\">*</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"bp\">self</span> <span class=\"o\">=</span> <span class=\"n\">DynConnGraph</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">add_edges_from</span><span class=\"p\">([(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">)])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ccs</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">},</span> <span class=\"mi\">4</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">}}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">remove_node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ccs</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">},</span> <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"mi\">3</span><span class=\"p\">},</span> <span class=\"mi\">4</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">}}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">remove_node</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ccs</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">},</span> <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"mi\">3</span><span class=\"p\">},</span> <span class=\"mi\">4</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">},</span> <span class=\"mi\">8</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">}}</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.nx_dynamic_graph.DynConnGraph.remove_nodes_from\">\n<code class=\"descname\">remove_nodes_from</code><span class=\"sig-paren\">(</span><em>nodes</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_dynamic_graph/#DynConnGraph.remove_nodes_from\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_dynamic_graph.DynConnGraph.remove_nodes_from\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Remove multiple nodes.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><strong>nodes</strong> (<em>iterable container</em>) \u2013 A container of nodes (list, dict, set, etc.).  If a node\nin the container is not in the graph it is silently\nignored.</td>\n</tr>\n</tbody>\n</table>\n<div class=\"admonition seealso\">\n<p class=\"first admonition-title\">See also</p>\n<p class=\"last\"><a class=\"reference internal\" href=\"#ibeis.algo.graph.nx_dynamic_graph.DynConnGraph.remove_node\" title=\"ibeis.algo.graph.nx_dynamic_graph.DynConnGraph.remove_node\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">remove_node()</span></code></a></p>\n</div>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">path_graph</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>  <span class=\"c1\"># or DiGraph, MultiGraph, MultiDiGraph, etc</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">nodes</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">e</span>\n<span class=\"go\">[0, 1, 2]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">remove_nodes_from</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">nodes</span><span class=\"p\">)</span>\n<span class=\"go\">[]</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.nx_dynamic_graph.DynConnGraph.subgraph\">\n<code class=\"descname\">subgraph</code><span class=\"sig-paren\">(</span><em>nbunch</em>, <em>dynamic=False</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_dynamic_graph/#DynConnGraph.subgraph\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_dynamic_graph.DynConnGraph.subgraph\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return a SubGraph view of the subgraph induced on <cite>nodes</cite>.</p>\n<p>The induced subgraph of the graph contains the nodes in <cite>nodes</cite>\nand the edges between those nodes.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><strong>nodes</strong> (<em>list</em><em>, </em><em>iterable</em>) \u2013 A container of nodes which will be iterated through once.</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><strong>G</strong> \u2013 A subgraph view of the graph. The graph structure cannot be\nchanged but node/edge attributes can and are shared with the\noriginal graph.</td>\n</tr>\n<tr class=\"field-odd field\"><th class=\"field-name\">Return type:</th><td class=\"field-body\">SubGraph View</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>The graph, edge and node attributes are shared with the original graph.\nChanges to the graph structure is ruled out by the view, but changes\nto attributes are reflected in the original graph.</p>\n<p>To create a subgraph with its own copy of the edge/node attributes use:\nG.subgraph(nodes).copy()</p>\n<p>For an inplace reduction of a graph to a subgraph you can remove nodes:\nG.remove_nodes_from([n for n in G if n not in set(nodes)])</p>\n<p>Subgraph views are sometimes NOT what you want. In most cases where\nyou want to do more than simply look at the induced edges, it makes\nmore sense to just create the subgraph as its own graph with code like:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Create a subgraph SG based on a (possibly multigraph) G</span>\n<span class=\"n\">SG</span> <span class=\"o\">=</span> <span class=\"n\">G</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"p\">()</span>\n<span class=\"n\">SG</span><span class=\"o\">.</span><span class=\"n\">add_nodes_from</span><span class=\"p\">((</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">nodes</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">])</span> <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"n\">largest_wcc</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">SG</span><span class=\"o\">.</span><span class=\"n\">is_multigraph</span><span class=\"p\">:</span>\n    <span class=\"n\">SG</span><span class=\"o\">.</span><span class=\"n\">add_edges_from</span><span class=\"p\">((</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">nbr</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">nbrs</span> <span class=\"ow\">in</span> <span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">adj</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"n\">largest_wcc</span>\n        <span class=\"k\">for</span> <span class=\"n\">nbr</span><span class=\"p\">,</span> <span class=\"n\">keydict</span> <span class=\"ow\">in</span> <span class=\"n\">nbrs</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">nbr</span> <span class=\"ow\">in</span> <span class=\"n\">largest_wcc</span>\n        <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">d</span> <span class=\"ow\">in</span> <span class=\"n\">keydict</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">())</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"n\">SG</span><span class=\"o\">.</span><span class=\"n\">add_edges_from</span><span class=\"p\">((</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">nbr</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">nbrs</span> <span class=\"ow\">in</span> <span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">adj</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"n\">largest_wcc</span>\n        <span class=\"k\">for</span> <span class=\"n\">nbr</span><span class=\"p\">,</span> <span class=\"n\">d</span> <span class=\"ow\">in</span> <span class=\"n\">nbrs</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">nbr</span> <span class=\"ow\">in</span> <span class=\"n\">largest_wcc</span><span class=\"p\">)</span>\n<span class=\"n\">SG</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">path_graph</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>  <span class=\"c1\"># or DiGraph, MultiGraph, MultiDiGraph, etc</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">H</span> <span class=\"o\">=</span> <span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">subgraph</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">H</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">)</span>\n<span class=\"go\">[(0, 1), (1, 2)]</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</dd></dl>\n\n<dl class=\"class\">\n<dt id=\"ibeis.algo.graph.nx_dynamic_graph.GraphHelperMixin\">\n<em class=\"property\">class </em><code class=\"descclassname\">ibeis.algo.graph.nx_dynamic_graph.</code><code class=\"descname\">GraphHelperMixin</code><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_dynamic_graph/#GraphHelperMixin\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_dynamic_graph.GraphHelperMixin\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">utool.util_dev.NiceRepr</span></code></p>\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.nx_dynamic_graph.GraphHelperMixin.edges\">\n<code class=\"descname\">edges</code><span class=\"sig-paren\">(</span><em>nbunch=None</em>, <em>data=False</em>, <em>default=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_dynamic_graph/#GraphHelperMixin.edges\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_dynamic_graph.GraphHelperMixin.edges\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.nx_dynamic_graph.GraphHelperMixin.has_edges\">\n<code class=\"descname\">has_edges</code><span class=\"sig-paren\">(</span><em>edges</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_dynamic_graph/#GraphHelperMixin.has_edges\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_dynamic_graph.GraphHelperMixin.has_edges\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.nx_dynamic_graph.GraphHelperMixin.has_nodes\">\n<code class=\"descname\">has_nodes</code><span class=\"sig-paren\">(</span><em>nodes</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_dynamic_graph/#GraphHelperMixin.has_nodes\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_dynamic_graph.GraphHelperMixin.has_nodes\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n<dl class=\"class\">\n<dt id=\"ibeis.algo.graph.nx_dynamic_graph.NiceGraph\">\n<em class=\"property\">class </em><code class=\"descclassname\">ibeis.algo.graph.nx_dynamic_graph.</code><code class=\"descname\">NiceGraph</code><span class=\"sig-paren\">(</span><em>incoming_graph_data=None</em>, <em>**attr</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_dynamic_graph/#NiceGraph\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_dynamic_graph.NiceGraph\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">networkx.classes.graph.Graph</span></code>, <a class=\"reference internal\" href=\"#ibeis.algo.graph.nx_dynamic_graph.GraphHelperMixin\" title=\"ibeis.algo.graph.nx_dynamic_graph.GraphHelperMixin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ibeis.algo.graph.nx_dynamic_graph.GraphHelperMixin</span></code></a></p>\n</dd></dl>\n\n<dl class=\"class\">\n<dt id=\"ibeis.algo.graph.nx_dynamic_graph.nx_UnionFind\">\n<em class=\"property\">class </em><code class=\"descclassname\">ibeis.algo.graph.nx_dynamic_graph.</code><code class=\"descname\">nx_UnionFind</code><span class=\"sig-paren\">(</span><em>elements=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_dynamic_graph/#nx_UnionFind\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_dynamic_graph.nx_UnionFind\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></p>\n<p>Based of nx code</p>\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.nx_dynamic_graph.nx_UnionFind.add_element\">\n<code class=\"descname\">add_element</code><span class=\"sig-paren\">(</span><em>x</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_dynamic_graph/#nx_UnionFind.add_element\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_dynamic_graph.nx_UnionFind.add_element\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.nx_dynamic_graph.nx_UnionFind.add_elements\">\n<code class=\"descname\">add_elements</code><span class=\"sig-paren\">(</span><em>elements</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_dynamic_graph/#nx_UnionFind.add_elements\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_dynamic_graph.nx_UnionFind.add_elements\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.nx_dynamic_graph.nx_UnionFind.clear\">\n<code class=\"descname\">clear</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_dynamic_graph/#nx_UnionFind.clear\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_dynamic_graph.nx_UnionFind.clear\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.nx_dynamic_graph.nx_UnionFind.rebalance\">\n<code class=\"descname\">rebalance</code><span class=\"sig-paren\">(</span><em>elements=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_dynamic_graph/#nx_UnionFind.rebalance\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_dynamic_graph.nx_UnionFind.rebalance\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.nx_dynamic_graph.nx_UnionFind.remove_entire_cc\">\n<code class=\"descname\">remove_entire_cc</code><span class=\"sig-paren\">(</span><em>elements</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_dynamic_graph/#nx_UnionFind.remove_entire_cc\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_dynamic_graph.nx_UnionFind.remove_entire_cc\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.nx_dynamic_graph.nx_UnionFind.to_sets\">\n<code class=\"descname\">to_sets</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_dynamic_graph/#nx_UnionFind.to_sets\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_dynamic_graph.nx_UnionFind.to_sets\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.nx_dynamic_graph.nx_UnionFind.union\">\n<code class=\"descname\">union</code><span class=\"sig-paren\">(</span><em>*objects</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_dynamic_graph/#nx_UnionFind.union\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_dynamic_graph.nx_UnionFind.union\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Find the sets containing the objects and merge them all.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"module-ibeis.algo.graph.nx_edge_augmentation\">\n<span id=\"ibeis-algo-graph-nx-edge-augmentation-module\"></span><h2>ibeis.algo.graph.nx_edge_augmentation module<a class=\"headerlink\" href=\"#module-ibeis.algo.graph.nx_edge_augmentation\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Algorithms for finding k-edge-augmentations</p>\n<p>A k-edge-augmentation is a set of edges, that once added to a graph, ensures\nthat the graph is k-edge-connected. Typically, the goal is to find the\naugmentation with minimum weight. In general, it is not gaurenteed that a\nk-edge-augmentation exists.</p>\n<dl class=\"class\">\n<dt id=\"ibeis.algo.graph.nx_edge_augmentation.MetaEdge\">\n<em class=\"property\">class </em><code class=\"descclassname\">ibeis.algo.graph.nx_edge_augmentation.</code><code class=\"descname\">MetaEdge</code><span class=\"sig-paren\">(</span><em>meta_uv</em>, <em>uv</em>, <em>w</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_edge_augmentation.MetaEdge\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">tuple</span></code></p>\n<dl class=\"attribute\">\n<dt id=\"ibeis.algo.graph.nx_edge_augmentation.MetaEdge.meta_uv\">\n<code class=\"descname\">meta_uv</code><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_edge_augmentation.MetaEdge.meta_uv\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Alias for field number 0</p>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"ibeis.algo.graph.nx_edge_augmentation.MetaEdge.uv\">\n<code class=\"descname\">uv</code><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_edge_augmentation.MetaEdge.uv\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Alias for field number 1</p>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"ibeis.algo.graph.nx_edge_augmentation.MetaEdge.w\">\n<code class=\"descname\">w</code><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_edge_augmentation.MetaEdge.w\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Alias for field number 2</p>\n</dd></dl>\n\n</dd></dl>\n\n<dl class=\"function\">\n<dt id=\"ibeis.algo.graph.nx_edge_augmentation.bridge_augmentation\">\n<code class=\"descclassname\">ibeis.algo.graph.nx_edge_augmentation.</code><code class=\"descname\">bridge_augmentation</code><span class=\"sig-paren\">(</span><em>G</em>, <em>avail=None</em>, <em>weight=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_edge_augmentation/#bridge_augmentation\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_edge_augmentation.bridge_augmentation\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Finds the a set of edges that bridge connects G.</p>\n<p>Adding these edges to G will make it 2-edge-connected.\nIf no constraints are specified the returned set of edges is minimum an\noptimal, otherwise the solution is approximated.</p>\n<p class=\"rubric\">Notes</p>\n<p>If there are no constraints the solution can be computed in linear time\nusing <a class=\"reference internal\" href=\"#ibeis.algo.graph.nx_edge_augmentation.unconstrained_bridge_augmentation\" title=\"ibeis.algo.graph.nx_edge_augmentation.unconstrained_bridge_augmentation\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">unconstrained_bridge_augmentation()</span></code></a>. Otherwise, the problem\nbecomes NP-hard and is the solution is approximated by\n<a class=\"reference internal\" href=\"#ibeis.algo.graph.nx_edge_augmentation.weighted_bridge_augmentation\" title=\"ibeis.algo.graph.nx_edge_augmentation.weighted_bridge_augmentation\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">weighted_bridge_augmentation()</span></code></a>.</p>\n</dd></dl>\n\n<dl class=\"function\">\n<dt id=\"ibeis.algo.graph.nx_edge_augmentation.collapse\">\n<code class=\"descclassname\">ibeis.algo.graph.nx_edge_augmentation.</code><code class=\"descname\">collapse</code><span class=\"sig-paren\">(</span><em>G</em>, <em>grouped_nodes</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_edge_augmentation/#collapse\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_edge_augmentation.collapse\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Collapses each group of nodes into a single node.</p>\n<p>This is similar to condensation, but works on undirected graphs.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first simple\">\n<li><strong>G</strong> (<em>NetworkX Graph</em>) \u2013 A directed graph.</li>\n<li><strong>grouped_nodes</strong> (<em>list</em><em> or </em><em>generator</em>) \u2013 Grouping of nodes to collapse. The grouping must be disjoint.\nIf grouped_nodes are strongly_connected_components then this is\nequivalent to condensation.</li>\n</ul>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>C</strong> \u2013 The collapsed graph C of G with respect to the node grouping.  The node\nlabels are integers corresponding to the index of the component in the\nlist of strongly connected components of G.  C has a graph attribute\nnamed \u2018mapping\u2019 with a dictionary mapping the original nodes to the\nnodes in C to which they belong.  Each node in C also has a node\nattribute \u2018members\u2019 with the set of original nodes in G that form the\ngroup that the node in C represents.</p>\n</td>\n</tr>\n<tr class=\"field-odd field\"><th class=\"field-name\">Return type:</th><td class=\"field-body\"><p class=\"first last\">NetworkX Graph</p>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Collapses a graph using disjoint groups, but not necesarilly connected</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">Graph</span><span class=\"p\">([(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">)])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">add_node</span><span class=\"p\">(</span><span class=\"s1\">&#39;A&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">grouped_nodes</span> <span class=\"o\">=</span> <span class=\"p\">[{</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">}]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">C</span> <span class=\"o\">=</span> <span class=\"n\">collapse</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">,</span> <span class=\"n\">grouped_nodes</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">members</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">get_node_attributes</span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"s1\">&#39;members&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">members</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n<span class=\"go\">[0, 1, 2, 3]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">member_values</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">frozenset</span><span class=\"p\">,</span> <span class=\"n\">members</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">}</span> <span class=\"ow\">in</span> <span class=\"n\">member_values</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"p\">{</span><span class=\"mi\">4</span><span class=\"p\">}</span> <span class=\"ow\">in</span> <span class=\"n\">member_values</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"p\">{</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">}</span> <span class=\"ow\">in</span> <span class=\"n\">member_values</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"p\">{</span><span class=\"s1\">&#39;A&#39;</span><span class=\"p\">}</span> <span class=\"ow\">in</span> <span class=\"n\">member_values</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"function\">\n<dt id=\"ibeis.algo.graph.nx_edge_augmentation.compat_shuffle\">\n<code class=\"descclassname\">ibeis.algo.graph.nx_edge_augmentation.</code><code class=\"descname\">compat_shuffle</code><span class=\"sig-paren\">(</span><em>rng</em>, <em>input</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_edge_augmentation/#compat_shuffle\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_edge_augmentation.compat_shuffle\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"function\">\n<dt id=\"ibeis.algo.graph.nx_edge_augmentation.complement_edges\">\n<code class=\"descclassname\">ibeis.algo.graph.nx_edge_augmentation.</code><code class=\"descname\">complement_edges</code><span class=\"sig-paren\">(</span><em>G</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_edge_augmentation/#complement_edges\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_edge_augmentation.complement_edges\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns only the edges in the complement of G</p>\n<p class=\"rubric\">Example</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">path_graph</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">complement_edges</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">))</span>\n<span class=\"go\">[(1, 3), (1, 4), (2, 4)]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">path_graph</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">DiGraph</span><span class=\"p\">())</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">complement_edges</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">))</span>\n<span class=\"go\">[(1, 3), (1, 4), (2, 1), (2, 4), (3, 1), (3, 2), (4, 1), (4, 2), (4, 3)]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">complete_graph</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">complement_edges</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">))</span>\n<span class=\"go\">[]</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"function\">\n<dt id=\"ibeis.algo.graph.nx_edge_augmentation.greedy_k_edge_augmentation\">\n<code class=\"descclassname\">ibeis.algo.graph.nx_edge_augmentation.</code><code class=\"descname\">greedy_k_edge_augmentation</code><span class=\"sig-paren\">(</span><em>G</em>, <em>k</em>, <em>avail=None</em>, <em>weight=None</em>, <em>seed=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_edge_augmentation/#greedy_k_edge_augmentation\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_edge_augmentation.greedy_k_edge_augmentation\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Greedy algorithm for finding a k-edge-augmentation</p>\n<p class=\"rubric\">Notes</p>\n<p>The algorithm is simple. Edges are incrementally added between parts of the\ngraph that are not yet locally k-edge-connected. Then edges are from the\naugmenting set are pruned as long as local-edge-connectivity is not broken.</p>\n<p>This algorithm is greedy and does not provide optimiality gaurentees. It\nexists only to provide <a class=\"reference internal\" href=\"#ibeis.algo.graph.nx_edge_augmentation.k_edge_augmentation\" title=\"ibeis.algo.graph.nx_edge_augmentation.k_edge_augmentation\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">k_edge_augmentation()</span></code></a> with the ability to\ngenerate a feasible solution for arbitrary k.</p>\n<p class=\"rubric\">Example</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">path_graph</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">greedy_k_edge_augmentation</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"go\">[(1, 7)]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">greedy_k_edge_augmentation</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">avail</span><span class=\"o\">=</span><span class=\"p\">[]))</span>\n<span class=\"go\">[]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">path_graph</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">avail</span> <span class=\"o\">=</span> <span class=\"p\">{(</span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">):</span> <span class=\"mi\">1</span> <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"n\">complement_edges</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">)}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># randomized pruning process can produce different solutions</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">greedy_k_edge_augmentation</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">avail</span><span class=\"o\">=</span><span class=\"n\">avail</span><span class=\"p\">,</span> <span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"go\">[(1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (2, 4), (2, 6), (3, 7), (5, 7)]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">greedy_k_edge_augmentation</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">avail</span><span class=\"o\">=</span><span class=\"n\">avail</span><span class=\"p\">,</span> <span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"go\">[(1, 3), (1, 5), (1, 6), (2, 4), (2, 6), (3, 7), (4, 7), (5, 7)]</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"function\">\n<dt id=\"ibeis.algo.graph.nx_edge_augmentation.is_k_edge_connected\">\n<code class=\"descclassname\">ibeis.algo.graph.nx_edge_augmentation.</code><code class=\"descname\">is_k_edge_connected</code><span class=\"sig-paren\">(</span><em>G</em>, <em>k</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_edge_augmentation/#is_k_edge_connected\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_edge_augmentation.is_k_edge_connected\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Tests to see if a graph is k-edge-connected</p>\n<div class=\"admonition seealso\">\n<p class=\"first admonition-title\">See also</p>\n<p class=\"last\"><a class=\"reference internal\" href=\"#ibeis.algo.graph.nx_edge_augmentation.is_locally_k_edge_connected\" title=\"ibeis.algo.graph.nx_edge_augmentation.is_locally_k_edge_connected\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">is_locally_k_edge_connected()</span></code></a></p>\n</div>\n<p class=\"rubric\">Example</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">barbell_graph</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">is_k_edge_connected</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">is_k_edge_connected</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">False</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"function\">\n<dt id=\"ibeis.algo.graph.nx_edge_augmentation.is_locally_k_edge_connected\">\n<code class=\"descclassname\">ibeis.algo.graph.nx_edge_augmentation.</code><code class=\"descname\">is_locally_k_edge_connected</code><span class=\"sig-paren\">(</span><em>G</em>, <em>s</em>, <em>t</em>, <em>k</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_edge_augmentation/#is_locally_k_edge_connected\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_edge_augmentation.is_locally_k_edge_connected\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Tests to see if an edge in a graph is locally k-edge-connected</p>\n<div class=\"admonition seealso\">\n<p class=\"first admonition-title\">See also</p>\n<p class=\"last\"><a class=\"reference internal\" href=\"#ibeis.algo.graph.nx_edge_augmentation.is_k_edge_connected\" title=\"ibeis.algo.graph.nx_edge_augmentation.is_k_edge_connected\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">is_k_edge_connected()</span></code></a></p>\n</div>\n<p class=\"rubric\">Example</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">barbell_graph</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">is_locally_k_edge_connected</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">is_locally_k_edge_connected</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">False</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">is_locally_k_edge_connected</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"function\">\n<dt id=\"ibeis.algo.graph.nx_edge_augmentation.k_edge_augmentation\">\n<code class=\"descclassname\">ibeis.algo.graph.nx_edge_augmentation.</code><code class=\"descname\">k_edge_augmentation</code><span class=\"sig-paren\">(</span><em>G</em>, <em>k</em>, <em>avail=None</em>, <em>weight=None</em>, <em>partial=False</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_edge_augmentation/#k_edge_augmentation\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_edge_augmentation.k_edge_augmentation\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Finds set of edges to k-edge-connect G.</p>\n<p>This function uses the most efficient function available (depending on the\nvalue of k and if the problem is weighted or unweighted) to search for a\nminimum weight subset of available edges that k-edge-connects G.\nIn general, finding a k-edge-augmentation is NP-hard, so solutions are not\ngaruenteed to be minimal.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first simple\">\n<li><strong>G</strong> (<em>NetworkX graph</em>) \u2013 </li>\n<li><strong>k</strong> (<em>Integer</em>) \u2013 Desired edge connectivity</li>\n<li><strong>avail</strong> (<em>dict</em><em> or </em><em>a set 2</em><em> or </em><em>3 tuples</em>) \u2013 <p>The available edges that can be used in the augmentation.</p>\n<p>If unspecified, then all edges in the complement of G are available.\nOtherwise, each item is an available edge (with an optinal weight).</p>\n<p>In the unweighted case, each item is an edge <code class=\"docutils literal notranslate\"><span class=\"pre\">(u,</span> <span class=\"pre\">v)</span></code>.</p>\n<p>In the weighted case, each item is a 3-tuple <code class=\"docutils literal notranslate\"><span class=\"pre\">(u,</span> <span class=\"pre\">v,</span> <span class=\"pre\">d)</span></code> or a dict\nwith items <code class=\"docutils literal notranslate\"><span class=\"pre\">(u,</span> <span class=\"pre\">v):</span> <span class=\"pre\">d</span></code>.  The third item, <code class=\"docutils literal notranslate\"><span class=\"pre\">d</span></code>, can be a dictionary\nor a real number.  If <code class=\"docutils literal notranslate\"><span class=\"pre\">d</span></code> is a dictionary <code class=\"docutils literal notranslate\"><span class=\"pre\">d[weight]</span></code>\ncorrespondings to the weight.</p>\n</li>\n<li><strong>weight</strong> (<em>string</em>) \u2013 key to use to find weights if avail is a set of 3-tuples where the\nthird item in each tuple is a dictionary.</li>\n<li><strong>partial</strong> (<em>Boolean</em>) \u2013 If partial is True and no feasible k-edge-augmentation exists, then all\navailable edges are returned.</li>\n</ul>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>aug_edges</strong> \u2013 the G would become k-edge-connected. If partial is False, an error\nis raised if this is not possible. Otherwise, all available edges\nare generated.</p>\n</td>\n</tr>\n<tr class=\"field-odd field\"><th class=\"field-name\">Return type:</th><td class=\"field-body\"><p class=\"first\">a generator of edges. If these edges are added to G, then</p>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Raises:</th><td class=\"field-body\"><ul class=\"first last simple\">\n<li>NetworkXNotImplemented: \u2013 If the input graph is directed or a multigraph.</li>\n<li>ValueError: \u2013 If k is less than 1</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>When k=1 this returns an optimal solution.</p>\n<p>When k=2 and avail is None, this returns an optimal solution.\nOtherwise when k=2, this returns a 2-approximation of the optimal solution.</p>\n<dl class=\"docutils\">\n<dt>For k&gt;3, this problem is NP-hard and this uses a randomized algorithm that</dt>\n<dd>produces a feasible solution, but provides no gaurentees on the\nsolution weight.</dd>\n</dl>\n<p class=\"rubric\">Example</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Unweighted cases</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">path_graph</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">add_node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">k_edge_augmentation</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"go\">[(1, 5)]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">k_edge_augmentation</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"go\">[(1, 5), (5, 4)]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">k_edge_augmentation</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"go\">[(1, 4), (1, 5), (2, 5), (3, 5), (4, 5)]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">complement</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">k_edge_augmentation</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">partial</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">add_edges_from</span><span class=\"p\">(</span><span class=\"n\">complement</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">edge_connectivity</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">)</span>\n<span class=\"go\">4</span>\n</pre></div>\n</div>\n<p class=\"rubric\">Example</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Weighted cases</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">path_graph</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">add_node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># avail can be a tuple with a dict</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">avail</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;weight&#39;</span><span class=\"p\">:</span> <span class=\"mi\">11</span><span class=\"p\">}),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;weight&#39;</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">})]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">k_edge_augmentation</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">avail</span><span class=\"o\">=</span><span class=\"n\">avail</span><span class=\"p\">,</span> <span class=\"n\">weight</span><span class=\"o\">=</span><span class=\"s1\">&#39;weight&#39;</span><span class=\"p\">))</span>\n<span class=\"go\">[(2, 5)]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># or avail can be a 3-tuple with a real number</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">avail</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">51</span><span class=\"p\">)]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">k_edge_augmentation</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">avail</span><span class=\"o\">=</span><span class=\"n\">avail</span><span class=\"p\">))</span>\n<span class=\"go\">[(1, 5), (2, 5), (4, 5)]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># or avail can be a dict</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">avail</span> <span class=\"o\">=</span> <span class=\"p\">{(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">):</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">):</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">):</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">):</span> <span class=\"mi\">51</span><span class=\"p\">}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">k_edge_augmentation</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">avail</span><span class=\"o\">=</span><span class=\"n\">avail</span><span class=\"p\">))</span>\n<span class=\"go\">[(1, 5), (2, 5), (4, 5)]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># If augmentation is infeasible, then all edges in avail are returned</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">avail</span> <span class=\"o\">=</span> <span class=\"p\">{(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">):</span> <span class=\"mi\">11</span><span class=\"p\">}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">k_edge_augmentation</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">avail</span><span class=\"o\">=</span><span class=\"n\">avail</span><span class=\"p\">,</span> <span class=\"n\">partial</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n<span class=\"go\">[(1, 5)]</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"function\">\n<dt id=\"ibeis.algo.graph.nx_edge_augmentation.one_edge_augmentation\">\n<code class=\"descclassname\">ibeis.algo.graph.nx_edge_augmentation.</code><code class=\"descname\">one_edge_augmentation</code><span class=\"sig-paren\">(</span><em>G</em>, <em>avail=None</em>, <em>weight=None</em>, <em>partial=False</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_edge_augmentation/#one_edge_augmentation\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_edge_augmentation.one_edge_augmentation\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Finds minimum weight set of edges to connect G.</p>\n<p class=\"rubric\">Notes</p>\n<p>Uses either <a class=\"reference internal\" href=\"#ibeis.algo.graph.nx_edge_augmentation.unconstrained_one_edge_augmentation\" title=\"ibeis.algo.graph.nx_edge_augmentation.unconstrained_one_edge_augmentation\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">unconstrained_one_edge_augmentation()</span></code></a> or\n<a class=\"reference internal\" href=\"#ibeis.algo.graph.nx_edge_augmentation.weighted_one_edge_augmentation\" title=\"ibeis.algo.graph.nx_edge_augmentation.weighted_one_edge_augmentation\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">weighted_one_edge_augmentation()</span></code></a> depending on whether <code class=\"docutils literal notranslate\"><span class=\"pre\">avail</span></code> is\nspecified. Both algorithms are based on finding a minimum spanning tree.\nAs such both algorithms find optimal solutions and run in linear time.</p>\n</dd></dl>\n\n<dl class=\"function\">\n<dt id=\"ibeis.algo.graph.nx_edge_augmentation.partial_k_edge_augmentation\">\n<code class=\"descclassname\">ibeis.algo.graph.nx_edge_augmentation.</code><code class=\"descname\">partial_k_edge_augmentation</code><span class=\"sig-paren\">(</span><em>G</em>, <em>k</em>, <em>avail</em>, <em>weight=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_edge_augmentation/#partial_k_edge_augmentation\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_edge_augmentation.partial_k_edge_augmentation\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Finds augmentation that k-edge-connects as much of the graph as possible</p>\n<p>When a k-edge-augmentation is not possible, we can still try to find a\nsmall set of edges that partially k-edge-connects as much of the graph as\npossible.</p>\n<p class=\"rubric\">Notes</p>\n<p>Construct H that augments G with all edges in avail.\nFind the k-edge-subgraphs of H.\nFor each k-edge-subgraph, if the number of nodes is more than k, then find\nthe k-edge-augmentation of that graph and add it to the solution. Then add\nall edges in avail between k-edge subgraphs to the solution.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">path_graph</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">add_node</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">avail</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">)]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">partial_k_edge_augmentation</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">avail</span><span class=\"o\">=</span><span class=\"n\">avail</span><span class=\"p\">))</span>\n<span class=\"go\">[(1, 5), (1, 8)]</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"function\">\n<dt id=\"ibeis.algo.graph.nx_edge_augmentation.unconstrained_bridge_augmentation\">\n<code class=\"descclassname\">ibeis.algo.graph.nx_edge_augmentation.</code><code class=\"descname\">unconstrained_bridge_augmentation</code><span class=\"sig-paren\">(</span><em>G</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_edge_augmentation/#unconstrained_bridge_augmentation\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_edge_augmentation.unconstrained_bridge_augmentation\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Finds an optimal 2-edge-augmentation of G using the fewest edges.</p>\n<p>This is an implementation of the algorithm detailed in <a href=\"#id15\"><span class=\"problematic\" id=\"id1\">[1]_</span></a>.\nThe basic idea is to construct a meta-graph of bridge-ccs, connect leaf\nnodes of the trees to connect the entire graph, and finally connect the\nleafs of the tree in dfs-preorder to bridge connect the entire graph.</p>\n<p class=\"rubric\">Notes</p>\n<p>Input: a graph G.\nFirst find the bridge components of G and collapse each bridge-cc into a\nnode of a metagraph graph C, which is gaurenteed to be a forest of trees.</p>\n<p>C contains p \u201cleafs\u201d \u2014 nodes with exactly one incident edge.\nC contains q \u201cisolated nodes\u201d \u2014 nodes with no incident edges.</p>\n<dl class=\"docutils\">\n<dt>Theorem: If p + q &gt; 1, then at least <div class=\"system-message\">\n<p class=\"system-message-title\">System Message: WARNING/2 (<tt class=\"docutils\">ceil(p / 2) + q</tt>)</p>\nlatex exited with error\n[stdout]\nThis is pdfTeX, Version 3.14159265-2.6-1.40.19 (TeX Live 2018/MacPorts 2018.47642_7) (preloaded format=latex)\n restricted \\write18 enabled.\nentering extended mode\n(./math.tex\nLaTeX2e &lt;2018-04-01&gt; patch level 2\nBabel &lt;3.18&gt; and hyphenation patterns for 3 language(s) loaded.\n(/opt/local/share/texmf-texlive/tex/latex/base/article.cls\nDocument Class: article 2014/09/29 v1.4h Standard LaTeX document class\n(/opt/local/share/texmf-texlive/tex/latex/base/size12.clo))\n(/opt/local/share/texmf-texlive/tex/latex/base/inputenc.sty\n\n! LaTeX Error: File `utf8x.def' not found.\n\nType X to quit or &lt;RETURN&gt; to proceed,\nor enter new name. (Default extension: def)\n\nEnter file name: \n! Emergency stop.\n&lt;read *&gt; \n         \nl.165 \\endinput\n               ^^M\nNo pages of output.\nTranscript written on math.log.\n</div>\n edges are</dt>\n<dd>needed to bridge connect C. This algorithm achieves this min number.</dd>\n</dl>\n<p>The method first adds enough edges to make G into a tree and then pairs\nleafs in a simple fashion.</p>\n<p>Let n be the number of trees in C. Let v(i) be an isolated vertex in the\ni-th tree if one exists, otherwise it is a pair of distinct leafs nodes\nin the i-th tree. Alternating edges from these sets (i.e.  adding edges\nA1 = [(v(i)[0], v(i + 1)[1]), v(i + 1)[0], v(i + 2)[1])\u2026]) connects C\ninto a tree T. This tree has p\u2019 = p + 2q - 2(n -1) leafs and no isolated\nvertices. A1 has n - 1 edges. The next step finds ceil(p\u2019 / 2) edges to\nbiconnect any tree with p\u2019 leafs.</p>\n<p>Convert T into an arborescence T\u2019 by picking an arbitrary root node with\ndegree &gt;= 2 and directing all edges away from the root. Note the\nimplementation implicitly constructs T\u2019.</p>\n<p>The leafs of T are the nodes with no existing edges in T\u2019.\nOrder the leafs of T\u2019 by DFS prorder. Then break this list in half\nand add the zipped pairs to A2.</p>\n<p>The set A = A1 + A2 is the minimum augmentation in the metagraph.</p>\n<p>To convert this to edges in the original graph</p>\n<p class=\"rubric\">References</p>\n<table class=\"docutils footnote\" frame=\"void\" id=\"id2\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\">[1]</td><td>Eswaran, Kapali P., and R. Endre Tarjan. (1975) Augmentation problems.\n<a class=\"reference external\" href=\"http://epubs.siam.org/doi/abs/10.1137/0205044\">http://epubs.siam.org/doi/abs/10.1137/0205044</a></td></tr>\n</tbody>\n</table>\n<p class=\"rubric\">Example</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">path_graph</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">unconstrained_bridge_augmentation</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">))</span>\n<span class=\"go\">[(1, 7)]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">path_graph</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">unconstrained_bridge_augmentation</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">))</span>\n<span class=\"go\">[(1, 3), (3, 7)]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">Graph</span><span class=\"p\">([(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">add_node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">unconstrained_bridge_augmentation</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">))</span>\n<span class=\"go\">[(1, 4), (4, 0)]</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"function\">\n<dt id=\"ibeis.algo.graph.nx_edge_augmentation.unconstrained_one_edge_augmentation\">\n<code class=\"descclassname\">ibeis.algo.graph.nx_edge_augmentation.</code><code class=\"descname\">unconstrained_one_edge_augmentation</code><span class=\"sig-paren\">(</span><em>G</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_edge_augmentation/#unconstrained_one_edge_augmentation\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_edge_augmentation.unconstrained_one_edge_augmentation\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Finds the smallest set of edges to connect G.</p>\n<p>This is a variant of the unweighted MST problem.\nIf G is not empty, a feasible solution always exists.</p>\n<p class=\"rubric\">Example</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">Graph</span><span class=\"p\">([(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">add_nodes_from</span><span class=\"p\">([</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">unconstrained_one_edge_augmentation</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">))</span>\n<span class=\"go\">[(1, 4), (4, 6), (6, 7), (7, 8)]</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"function\">\n<dt id=\"ibeis.algo.graph.nx_edge_augmentation.weighted_bridge_augmentation\">\n<code class=\"descclassname\">ibeis.algo.graph.nx_edge_augmentation.</code><code class=\"descname\">weighted_bridge_augmentation</code><span class=\"sig-paren\">(</span><em>G</em>, <em>avail</em>, <em>weight=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_edge_augmentation/#weighted_bridge_augmentation\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_edge_augmentation.weighted_bridge_augmentation\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Finds an approximate min-weight 2-edge-augmentation of G.</p>\n<p>This is an implementation of the approximation algorithm detailed in <a href=\"#id16\"><span class=\"problematic\" id=\"id3\">[1]_</span></a>.\nIt chooses a set of edges from avail to add to G that renders it\n2-edge-connected if such a subset exists.  This is done by finding a\nminimum spanning arborescence of a specially constructed metagraph.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first simple\">\n<li><strong>G</strong> (<em>NetworkX graph</em>) \u2013 </li>\n<li><strong>avail</strong> (<em>set of 2</em><em> or </em><em>3 tuples.</em>) \u2013 candidate edges (with optional weights) to choose from</li>\n<li><strong>weight</strong> (<em>string</em>) \u2013 key to use to find weights if avail is a set of 3-tuples where the\nthird item in each tuple is a dictionary.</li>\n</ul>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>aug_edges (set)</strong></p>\n</td>\n</tr>\n<tr class=\"field-odd field\"><th class=\"field-name\">Return type:</th><td class=\"field-body\"><p class=\"first last\">subset of avail chosen to augment G</p>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>Finding a weighted 2-edge-augmentation is NP-hard.\nAny edge not in <code class=\"docutils literal notranslate\"><span class=\"pre\">avail</span></code> is considered to have a weight of infinity.\nThe approximation factor is 2 if <code class=\"docutils literal notranslate\"><span class=\"pre\">G</span></code> is connected and 3 if it is not.\nRuns in <div class=\"system-message\">\n<p class=\"system-message-title\">System Message: WARNING/2 (<tt class=\"docutils\">O(m + n log(n))</tt>)</p>\nlatex exited with error\n[stdout]\nThis is pdfTeX, Version 3.14159265-2.6-1.40.19 (TeX Live 2018/MacPorts 2018.47642_7) (preloaded format=latex)\n restricted \\write18 enabled.\nentering extended mode\n(./math.tex\nLaTeX2e &lt;2018-04-01&gt; patch level 2\nBabel &lt;3.18&gt; and hyphenation patterns for 3 language(s) loaded.\n(/opt/local/share/texmf-texlive/tex/latex/base/article.cls\nDocument Class: article 2014/09/29 v1.4h Standard LaTeX document class\n(/opt/local/share/texmf-texlive/tex/latex/base/size12.clo))\n(/opt/local/share/texmf-texlive/tex/latex/base/inputenc.sty\n\n! LaTeX Error: File `utf8x.def' not found.\n\nType X to quit or &lt;RETURN&gt; to proceed,\nor enter new name. (Default extension: def)\n\nEnter file name: \n! Emergency stop.\n&lt;read *&gt; \n         \nl.165 \\endinput\n               ^^M\nNo pages of output.\nTranscript written on math.log.\n</div>\n time</p>\n<p class=\"rubric\">References</p>\n<table class=\"docutils footnote\" frame=\"void\" id=\"id4\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\">[1]</td><td>Khuller, Samir, and Ramakrishna Thurimella. (1993) Approximation\nalgorithms for graph augmentation.\n<a class=\"reference external\" href=\"http://www.sciencedirect.com/science/article/pii/S0196677483710102\">http://www.sciencedirect.com/science/article/pii/S0196677483710102</a></td></tr>\n</tbody>\n</table>\n<p class=\"rubric\">Example</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">path_graph</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># When the weights are equal, (1, 4) is the best</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">avail</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">weighted_bridge_augmentation</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">,</span> <span class=\"n\">avail</span><span class=\"p\">))</span>\n<span class=\"go\">[(1, 4)]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Giving (1, 4) a high weight makes the two edge solution the best.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">avail</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">weighted_bridge_augmentation</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">,</span> <span class=\"n\">avail</span><span class=\"p\">))</span>\n<span class=\"go\">[(1, 3), (2, 4)]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\">#------</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">path_graph</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">add_node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">avail</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">weighted_bridge_augmentation</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">,</span> <span class=\"n\">avail</span><span class=\"o\">=</span><span class=\"n\">avail</span><span class=\"p\">))</span>\n<span class=\"go\">[(1, 5), (4, 5)]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">avail</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">51</span><span class=\"p\">)]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">weighted_bridge_augmentation</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">,</span> <span class=\"n\">avail</span><span class=\"o\">=</span><span class=\"n\">avail</span><span class=\"p\">))</span>\n<span class=\"go\">[(1, 5), (2, 5), (4, 5)]</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"function\">\n<dt id=\"ibeis.algo.graph.nx_edge_augmentation.weighted_one_edge_augmentation\">\n<code class=\"descclassname\">ibeis.algo.graph.nx_edge_augmentation.</code><code class=\"descname\">weighted_one_edge_augmentation</code><span class=\"sig-paren\">(</span><em>G</em>, <em>avail</em>, <em>weight=None</em>, <em>partial=False</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_edge_augmentation/#weighted_one_edge_augmentation\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_edge_augmentation.weighted_one_edge_augmentation\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Finds the minimum weight set of edges to connect G if one exists.</p>\n<p>This is a variant of the weighted MST problem.</p>\n<p class=\"rubric\">Example</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">Graph</span><span class=\"p\">([(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">add_nodes_from</span><span class=\"p\">([</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># any edge not in avail has an implicit weight of infinity</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">avail</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">weighted_one_edge_augmentation</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">,</span> <span class=\"n\">avail</span><span class=\"p\">))</span>\n<span class=\"go\">[(1, 5), (4, 7), (6, 1), (8, 1)]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># find another solution by giving large weights to edges in the</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># previous solution (note some of the old edges must be used)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">avail</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">99</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">99</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">99</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">weighted_one_edge_augmentation</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">,</span> <span class=\"n\">avail</span><span class=\"p\">))</span>\n<span class=\"go\">[(1, 5), (4, 7), (6, 1), (8, 2)]</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"module-ibeis.algo.graph.nx_edge_kcomponents\">\n<span id=\"ibeis-algo-graph-nx-edge-kcomponents-module\"></span><h2>ibeis.algo.graph.nx_edge_kcomponents module<a class=\"headerlink\" href=\"#module-ibeis.algo.graph.nx_edge_kcomponents\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Algorithms for finding k-edge-connected components and subgraphs.</p>\n<p>A k-edge-connected component (k-edge-cc) is a maximal set of nodes in G, such\nthat all pairs of node have an edge-connectivity of at least k.</p>\n<p>A k-edge-connected subgraph (k-edge-subgraph) is a maximal set of nodes in G,\nsuch that the subgraph of G defined by the nodes has an edge-connectivity at\nleast k.</p>\n<dl class=\"class\">\n<dt id=\"ibeis.algo.graph.nx_edge_kcomponents.EdgeComponentAuxGraph\">\n<em class=\"property\">class </em><code class=\"descclassname\">ibeis.algo.graph.nx_edge_kcomponents.</code><code class=\"descname\">EdgeComponentAuxGraph</code><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_edge_kcomponents/#EdgeComponentAuxGraph\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_edge_kcomponents.EdgeComponentAuxGraph\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></p>\n<p>A simple algorithm to find all k-edge-connected components in a graph.</p>\n<p>Constructing the AuxillaryGraph (which may take some time) allows for the\nk-edge-ccs to be found in linear time for arbitrary k.</p>\n<p class=\"rubric\">Notes</p>\n<p>This implementation is based on <a href=\"#id17\"><span class=\"problematic\" id=\"id5\">[1]_</span></a>. The idea is to construct an auxillary\ngraph from which the k-edge-ccs can be extracted in linear time. The\nauxillary graph is constructed in O(<a href=\"#id11\"><span class=\"problematic\" id=\"id12\">|V|F) operations, where F is the\ncomplexity of max flow. Querying the components takes an additional O(|V|</span></a>)\noperations. This algorithm can be slow for large graphs, but it handles an\narbitrary k and works for both directed and undirected inputs.</p>\n<p>The undirected case for k=1 is exactly connected components.\nThe undirected case for k=2 is exactly bridge connected components.\nThe directed case for k=1 is exactly strongly connected components.</p>\n<p class=\"rubric\">References</p>\n<table class=\"docutils footnote\" frame=\"void\" id=\"id6\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\">[1]</td><td>Wang, Tianhao, et al. (2015) A simple algorithm for finding all\nk-edge-connected components.\n<a class=\"reference external\" href=\"http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0136264\">http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0136264</a></td></tr>\n</tbody>\n</table>\n<p class=\"rubric\">Example</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">networkx.utils</span> <span class=\"k\">import</span> <span class=\"n\">pairwise</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Build an interesting graph with multiple levels of k-edge-ccs</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">paths</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n<span class=\"gp\">... </span>    <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span>  <span class=\"c1\"># a 3-edge-cc (a 4 clique)</span>\n<span class=\"gp\">... </span>    <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span>  <span class=\"c1\"># a 2-edge-cc (a 3 clique)</span>\n<span class=\"gp\">... </span>    <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span>  <span class=\"c1\"># combine first two ccs into a 1-edge-cc</span>\n<span class=\"gp\">... </span>    <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,),</span>  <span class=\"c1\"># add an additional disconnected 1-edge-cc</span>\n<span class=\"gp\">... </span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">Graph</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">add_nodes_from</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">chain</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">paths</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">add_edges_from</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">chain</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">[</span><span class=\"n\">pairwise</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">path</span> <span class=\"ow\">in</span> <span class=\"n\">paths</span><span class=\"p\">]))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Constructing the AuxGraph takes about O(n ** 4)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">aux_graph</span> <span class=\"o\">=</span> <span class=\"n\">EdgeComponentAuxGraph</span><span class=\"o\">.</span><span class=\"n\">construct</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Once constructed, querying takes O(n)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">sorted</span><span class=\"p\">,</span> <span class=\"n\">aux_graph</span><span class=\"o\">.</span><span class=\"n\">k_edge_components</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)))</span>\n<span class=\"go\">[[0], [1, 2, 3, 4, 5, 6, 7]]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">sorted</span><span class=\"p\">,</span> <span class=\"n\">aux_graph</span><span class=\"o\">.</span><span class=\"n\">k_edge_components</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)))</span>\n<span class=\"go\">[[0], [1, 2, 3, 4], [5, 6, 7]]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">sorted</span><span class=\"p\">,</span> <span class=\"n\">aux_graph</span><span class=\"o\">.</span><span class=\"n\">k_edge_components</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)))</span>\n<span class=\"go\">[[0], [1, 2, 3, 4], [5], [6], [7]]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">sorted</span><span class=\"p\">,</span> <span class=\"n\">aux_graph</span><span class=\"o\">.</span><span class=\"n\">k_edge_components</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)))</span>\n<span class=\"go\">[[0], [1], [2], [3], [4], [5], [6], [7]]</span>\n</pre></div>\n</div>\n<p class=\"rubric\">Example</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># The auxillary graph is primarilly used for k-edge-ccs but it</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># can also speed up the queries of k-edge-subgraphs by refining the</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># search space.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">networkx.utils</span> <span class=\"k\">import</span> <span class=\"n\">pairwise</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">paths</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n<span class=\"gp\">... </span>    <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">Graph</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">add_nodes_from</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">chain</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">paths</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">add_edges_from</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">chain</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">[</span><span class=\"n\">pairwise</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">path</span> <span class=\"ow\">in</span> <span class=\"n\">paths</span><span class=\"p\">]))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">aux_graph</span> <span class=\"o\">=</span> <span class=\"n\">EdgeComponentAuxGraph</span><span class=\"o\">.</span><span class=\"n\">construct</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">sorted</span><span class=\"p\">,</span> <span class=\"n\">aux_graph</span><span class=\"o\">.</span><span class=\"n\">k_edge_subgraphs</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)))</span>\n<span class=\"go\">[[1], [2], [3], [4]]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">sorted</span><span class=\"p\">,</span> <span class=\"n\">aux_graph</span><span class=\"o\">.</span><span class=\"n\">k_edge_components</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)))</span>\n<span class=\"go\">[[1, 4], [2], [3]]</span>\n</pre></div>\n</div>\n<dl class=\"classmethod\">\n<dt id=\"ibeis.algo.graph.nx_edge_kcomponents.EdgeComponentAuxGraph.construct\">\n<em class=\"property\">classmethod </em><code class=\"descname\">construct</code><span class=\"sig-paren\">(</span><em>G</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_edge_kcomponents/#EdgeComponentAuxGraph.construct\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_edge_kcomponents.EdgeComponentAuxGraph.construct\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Builds an auxillary graph encoding edge-connectivity between nodes.</p>\n<p class=\"rubric\">Notes</p>\n<p>Given G=(V, E), initialize an empty auxillary graph A.\nChoose an arbitrary source node s.  Initialize a set N of available\nnodes (that can be used as the sink). The algorithm picks an\narbitrary node t from N - {s}, and then computes the minimum st-cut\n(S, T) with value w. If G is directed the the minimum of the st-cut or\nthe ts-cut is used instead. Then, the edge (s, t) is added to the\nauxillary graph with weight w. The algorithm is called recursively\nfirst using S as the available nodes and s as the source, and then\nusing T and t. Recusion stops when the source is the only available\nnode.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><strong>G</strong> (<em>NetworkX graph</em>) \u2013 </td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.nx_edge_kcomponents.EdgeComponentAuxGraph.k_edge_components\">\n<code class=\"descname\">k_edge_components</code><span class=\"sig-paren\">(</span><em>k</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_edge_kcomponents/#EdgeComponentAuxGraph.k_edge_components\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_edge_kcomponents.EdgeComponentAuxGraph.k_edge_components\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Queries the auxillary graph for k-edge-connected components.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><strong>k</strong> (<em>Integer</em>) \u2013 Desired edge connectivity</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><strong>k_edge_components</strong></td>\n</tr>\n<tr class=\"field-odd field\"><th class=\"field-name\">Return type:</th><td class=\"field-body\">a generator of k-edge-ccs</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>Given the auxillary graph, the k-edge-connected components can be\ndetermined in linear time by removing all edges with weights less than\nk from the auxillary graph.  The resulting connected components are the\nk-edge-ccs in the original graph.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.nx_edge_kcomponents.EdgeComponentAuxGraph.k_edge_subgraphs\">\n<code class=\"descname\">k_edge_subgraphs</code><span class=\"sig-paren\">(</span><em>k</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_edge_kcomponents/#EdgeComponentAuxGraph.k_edge_subgraphs\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_edge_kcomponents.EdgeComponentAuxGraph.k_edge_subgraphs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Queries the auxillary graph for k-edge-connected subgraphs.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><strong>k</strong> (<em>Integer</em>) \u2013 Desired edge connectivity</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><strong>k_edge_subgraphs</strong></td>\n</tr>\n<tr class=\"field-odd field\"><th class=\"field-name\">Return type:</th><td class=\"field-body\">a generator of k-edge-subgraphs</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>Refines the k-edge-ccs into k-edge-subgraphs. The running time is more\nthan O(<a href=\"#id13\"><span class=\"problematic\" id=\"id14\">|V|</span></a>).</p>\n<p>For single values of k it is faster to use <cite>nx.k_edge_subgraphs</cite>.\nBut for multiple values of k, it can be faster to build AuxGraph and\nthen use this method.</p>\n</dd></dl>\n\n</dd></dl>\n\n<dl class=\"function\">\n<dt id=\"ibeis.algo.graph.nx_edge_kcomponents.bridge_components\">\n<code class=\"descclassname\">ibeis.algo.graph.nx_edge_kcomponents.</code><code class=\"descname\">bridge_components</code><span class=\"sig-paren\">(</span><em>G</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_edge_kcomponents/#bridge_components\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_edge_kcomponents.bridge_components\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Finds all bridge-connected components G.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><strong>G</strong> (<em>NetworkX undirected graph</em>) \u2013 </td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><strong>bridge_components</strong></td>\n</tr>\n<tr class=\"field-odd field\"><th class=\"field-name\">Return type:</th><td class=\"field-body\">a generator of 2-edge-connected components</td>\n</tr>\n</tbody>\n</table>\n<div class=\"admonition seealso\">\n<p class=\"first admonition-title\">See also</p>\n<dl class=\"last docutils\">\n<dt><a class=\"reference internal\" href=\"#ibeis.algo.graph.nx_edge_kcomponents.k_edge_subgraphs\" title=\"ibeis.algo.graph.nx_edge_kcomponents.k_edge_subgraphs\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">k_edge_subgraphs()</span></code></a></dt>\n<dd>this function is a special case for an undirected graph where k=2.</dd>\n<dt><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">biconnected_components()</span></code></dt>\n<dd>similar to this function, but is defined using 2-node-connectivity instead of 2-edge-connectivity.</dd>\n</dl>\n</div>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Raises:</th><td class=\"field-body\">NetworkXNotImplemented: \u2013 If the input graph is directed or a multigraph.</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>Bridge-connected components are also known as 2-edge-connected components.</p>\n<p class=\"rubric\">Example</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># The barbell graph with parameter zero has a single bridge</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">barbell_graph</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">sorted</span><span class=\"p\">,</span> <span class=\"n\">bridge_components</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">)))</span>\n<span class=\"go\">[[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]]</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"function\">\n<dt id=\"ibeis.algo.graph.nx_edge_kcomponents.general_k_edge_subgraphs\">\n<code class=\"descclassname\">ibeis.algo.graph.nx_edge_kcomponents.</code><code class=\"descname\">general_k_edge_subgraphs</code><span class=\"sig-paren\">(</span><em>G</em>, <em>k</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_edge_kcomponents/#general_k_edge_subgraphs\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_edge_kcomponents.general_k_edge_subgraphs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>General algorithm to find all maximal k-edge-connected subgraphs in G.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><strong>k_edge_subgraphs</strong> \u2013 Each k-edge-subgraph is a maximal set of nodes that defines a subgraph\nof G that is k-edge-connected.</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Return type:</th><td class=\"field-body\">a generator of nx.Graphs that are k-edge-subgraphs</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>Implementation of the basic algorithm from _[1].  The basic idea is to find\na global minimum cut of the graph. If the cut value is at least k, then the\ngraph is a k-edge-connected subgraph and can be added to the results.\nOtherwise, the cut is used to split the graph in two and the procedure is\napplied recursively. If the graph is just a single node, then it is also\nadded to the results. At the end, each result is either gaurenteed to be\na single node or a subgraph of G that is k-edge-connected.</p>\n<p>This implementation contains optimizations for reducing the number of calls\nto max-flow, but there are other optimizations in _[1] that could be\nimplemented.</p>\n<p class=\"rubric\">References</p>\n<table class=\"docutils footnote\" frame=\"void\" id=\"id7\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\">[1]</td><td>Zhou, Liu, et al. (2012) Finding maximal k-edge-connected subgraphs\nfrom a large graph.  ACM International Conference on Extending Database\nTechnology 2012 480-\u2013491.\n<a class=\"reference external\" href=\"https://openproceedings.org/2012/conf/edbt/ZhouLYLCL12.pdf\">https://openproceedings.org/2012/conf/edbt/ZhouLYLCL12.pdf</a></td></tr>\n</tbody>\n</table>\n<p class=\"rubric\">Example</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">networkx.utils</span> <span class=\"k\">import</span> <span class=\"n\">pairwise</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">paths</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n<span class=\"gp\">... </span>    <span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">),</span>  <span class=\"c1\"># a 4-clique</span>\n<span class=\"gp\">... </span>    <span class=\"p\">(</span><span class=\"mi\">21</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"mi\">23</span><span class=\"p\">,</span> <span class=\"mi\">24</span><span class=\"p\">,</span> <span class=\"mi\">21</span><span class=\"p\">,</span> <span class=\"mi\">23</span><span class=\"p\">,</span> <span class=\"mi\">24</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">),</span>  <span class=\"c1\"># another 4-clique</span>\n<span class=\"gp\">... </span>    <span class=\"c1\"># connect the cliques with high degree but low connectivity</span>\n<span class=\"gp\">... </span>    <span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span>    <span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span>    <span class=\"p\">(</span><span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">102</span><span class=\"p\">,</span> <span class=\"mi\">23</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span>    <span class=\"p\">(</span><span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"mi\">101</span><span class=\"p\">,</span> <span class=\"mi\">24</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">Graph</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">chain</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">[</span><span class=\"n\">pairwise</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">path</span> <span class=\"ow\">in</span> <span class=\"n\">paths</span><span class=\"p\">]))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">,</span> <span class=\"n\">k_edge_subgraphs</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)))</span>\n<span class=\"go\">[1, 1, 1, 4, 4]</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"function\">\n<dt id=\"ibeis.algo.graph.nx_edge_kcomponents.k_edge_components\">\n<code class=\"descclassname\">ibeis.algo.graph.nx_edge_kcomponents.</code><code class=\"descname\">k_edge_components</code><span class=\"sig-paren\">(</span><em>G</em>, <em>k</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_edge_kcomponents/#k_edge_components\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_edge_kcomponents.k_edge_components\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Generates nodes in each maximal k-edge-connected component in G.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first simple\">\n<li><strong>G</strong> (<em>NetworkX graph</em>) \u2013 </li>\n<li><strong>k</strong> (<em>Integer</em>) \u2013 Desired edge connectivity</li>\n</ul>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>k_edge_components</strong> \u2013 will have k-edge-connectivity in the graph G.</p>\n</td>\n</tr>\n<tr class=\"field-odd field\"><th class=\"field-name\">Return type:</th><td class=\"field-body\"><p class=\"first last\">a generator of k-edge-ccs. Each set of returned nodes</p>\n</td>\n</tr>\n</tbody>\n</table>\n<div class=\"admonition seealso\">\n<p class=\"first admonition-title\">See also</p>\n<p><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">local_edge_connectivity()</span></code></p>\n<dl class=\"last docutils\">\n<dt><a class=\"reference internal\" href=\"#ibeis.algo.graph.nx_edge_kcomponents.k_edge_subgraphs\" title=\"ibeis.algo.graph.nx_edge_kcomponents.k_edge_subgraphs\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">k_edge_subgraphs()</span></code></a></dt>\n<dd>similar to this function, but the subgraph defined by the nodes must also have k-edge-connectivity.</dd>\n<dt><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">k_components()</span></code></dt>\n<dd>similar to this function, but uses node-connectivity instead of edge-connectivity</dd>\n</dl>\n</div>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Raises:</th><td class=\"field-body\"><ul class=\"first last simple\">\n<li>NetworkXNotImplemented: \u2013 If the input graph is a multigraph.</li>\n<li>ValueError: \u2013 If k is less than 1</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>Attempts to use the most efficient implementation available based on k.\nIf k=1, this is simply simply connected components for directed graphs and\nconnected components for undirected graphs.\nIf k=2 on an efficient bridge connected component algorithm from _[1] is\nrun based on the chain decomposition.\nOtherwise, the algorithm from _[2] is used.</p>\n<p class=\"rubric\">Example</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">networkx.utils</span> <span class=\"k\">import</span> <span class=\"n\">pairwise</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">paths</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n<span class=\"gp\">... </span>    <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span>    <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">Graph</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">add_nodes_from</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">chain</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">paths</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">add_edges_from</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">chain</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">[</span><span class=\"n\">pairwise</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">path</span> <span class=\"ow\">in</span> <span class=\"n\">paths</span><span class=\"p\">]))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># note this returns {1, 4} unlike k_edge_subgraphs</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">sorted</span><span class=\"p\">,</span> <span class=\"n\">k_edge_components</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)))</span>\n<span class=\"go\">[[1, 4], [2], [3], [5, 6, 7, 8]]</span>\n</pre></div>\n</div>\n<p class=\"rubric\">References</p>\n<table class=\"docutils footnote\" frame=\"void\" id=\"id8\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\">[1]</td><td><a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Bridge_(graph_theory\">https://en.wikipedia.org/wiki/Bridge_(graph_theory</a>)</td></tr>\n</tbody>\n</table>\n<table class=\"docutils footnote\" frame=\"void\" id=\"id9\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\">[2]</td><td>Wang, Tianhao, et al. (2015) A simple algorithm for finding all\nk-edge-connected components.\n<a class=\"reference external\" href=\"http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0136264\">http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0136264</a></td></tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"function\">\n<dt id=\"ibeis.algo.graph.nx_edge_kcomponents.k_edge_subgraphs\">\n<code class=\"descclassname\">ibeis.algo.graph.nx_edge_kcomponents.</code><code class=\"descname\">k_edge_subgraphs</code><span class=\"sig-paren\">(</span><em>G</em>, <em>k</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_edge_kcomponents/#k_edge_subgraphs\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_edge_kcomponents.k_edge_subgraphs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Generates nodes in each maximal k-edge-connected subgraph in G.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first simple\">\n<li><strong>G</strong> (<em>NetworkX graph</em>) \u2013 </li>\n<li><strong>k</strong> (<em>Integer</em>) \u2013 Desired edge connectivity</li>\n</ul>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\"><strong>k_edge_subgraphs</strong> \u2013 Each k-edge-subgraph is a maximal set of nodes that defines a subgraph\nof G that is k-edge-connected.</p>\n</td>\n</tr>\n<tr class=\"field-odd field\"><th class=\"field-name\">Return type:</th><td class=\"field-body\"><p class=\"first last\">a generator of k-edge-subgraphs</p>\n</td>\n</tr>\n</tbody>\n</table>\n<div class=\"admonition seealso\">\n<p class=\"first admonition-title\">See also</p>\n<p><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">edge_connectivity()</span></code></p>\n<dl class=\"last docutils\">\n<dt><a class=\"reference internal\" href=\"#ibeis.algo.graph.nx_edge_kcomponents.k_edge_components\" title=\"ibeis.algo.graph.nx_edge_kcomponents.k_edge_components\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">k_edge_components()</span></code></a></dt>\n<dd>similar to this function, but nodes only need to have k-edge-connctivity within the graph G and the subgraphs might not be k-edge-connected.</dd>\n</dl>\n</div>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Raises:</th><td class=\"field-body\"><ul class=\"first last simple\">\n<li>NetworkXNotImplemented: \u2013 If the input graph is a multigraph.</li>\n<li>ValueError: \u2013 If k is less than 1</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>Attempts to use the most efficient implementation available based on k.\nIf k=1, or k=2 and the graph is undirected, then this simply calls\n<cite>k_edge_components</cite>.  Otherwise the algorithm from _[1] is used.</p>\n<p class=\"rubric\">Example</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">networkx.utils</span> <span class=\"k\">import</span> <span class=\"n\">pairwise</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">paths</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n<span class=\"gp\">... </span>    <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span>    <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">Graph</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">add_nodes_from</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">chain</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">paths</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">add_edges_from</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">chain</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">[</span><span class=\"n\">pairwise</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">path</span> <span class=\"ow\">in</span> <span class=\"n\">paths</span><span class=\"p\">]))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># note this does not return {1, 4} unlike k_edge_components</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">sorted</span><span class=\"p\">,</span> <span class=\"n\">k_edge_subgraphs</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)))</span>\n<span class=\"go\">[[1], [2], [3], [4], [5, 6, 7, 8]]</span>\n</pre></div>\n</div>\n<p class=\"rubric\">References</p>\n<table class=\"docutils footnote\" frame=\"void\" id=\"id10\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\">[1]</td><td>Zhou, Liu, et al. (2012) Finding maximal k-edge-connected subgraphs\nfrom a large graph.  ACM International Conference on Extending Database\nTechnology 2012 480-\u2013491.\n<a class=\"reference external\" href=\"https://openproceedings.org/2012/conf/edbt/ZhouLYLCL12.pdf\">https://openproceedings.org/2012/conf/edbt/ZhouLYLCL12.pdf</a></td></tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"module-ibeis.algo.graph.nx_utils\">\n<span id=\"ibeis-algo-graph-nx-utils-module\"></span><h2>ibeis.algo.graph.nx_utils module<a class=\"headerlink\" href=\"#module-ibeis.algo.graph.nx_utils\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>TODO: the k-components will soon be implemented in networkx 2.0 use those instead</p>\n<dl class=\"function\">\n<dt id=\"ibeis.algo.graph.nx_utils.complement_edges\">\n<code class=\"descclassname\">ibeis.algo.graph.nx_utils.</code><code class=\"descname\">complement_edges</code><span class=\"sig-paren\">(</span><em>G</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_utils/#complement_edges\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_utils.complement_edges\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"function\">\n<dt id=\"ibeis.algo.graph.nx_utils.demodata_bridge\">\n<code class=\"descclassname\">ibeis.algo.graph.nx_utils.</code><code class=\"descname\">demodata_bridge</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_utils/#demodata_bridge\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_utils.demodata_bridge\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"function\">\n<dt id=\"ibeis.algo.graph.nx_utils.demodata_tarjan_bridge\">\n<code class=\"descclassname\">ibeis.algo.graph.nx_utils.</code><code class=\"descname\">demodata_tarjan_bridge</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_utils/#demodata_tarjan_bridge\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_utils.demodata_tarjan_bridge\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl class=\"docutils\">\n<dt>CommandLine:</dt>\n<dd>python -m ibeis.algo.graph.nx_utils demodata_tarjan_bridge \u2013show</dd>\n</dl>\n<p class=\"rubric\">Example</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># ENABLE_DOCTEST</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.nx_utils</span> <span class=\"k\">import</span> <span class=\"o\">*</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">demodata_tarjan_bridge</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">quit_if_noshow</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">plottool</span> <span class=\"k\">as</span> <span class=\"nn\">pt</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">show_nx</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">show_if_requested</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"function\">\n<dt id=\"ibeis.algo.graph.nx_utils.diag_product\">\n<code class=\"descclassname\">ibeis.algo.graph.nx_utils.</code><code class=\"descname\">diag_product</code><span class=\"sig-paren\">(</span><em>s1</em>, <em>s2</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_utils/#diag_product\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_utils.diag_product\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Does product, but iterates over the diagonal first</p>\n</dd></dl>\n\n<dl class=\"function\">\n<dt id=\"ibeis.algo.graph.nx_utils.e_\">\n<code class=\"descclassname\">ibeis.algo.graph.nx_utils.</code><code class=\"descname\">e_</code><span class=\"sig-paren\">(</span><em>u</em>, <em>v</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_utils/#e_\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_utils.e_\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"function\">\n<dt id=\"ibeis.algo.graph.nx_utils.edge_df\">\n<code class=\"descclassname\">ibeis.algo.graph.nx_utils.</code><code class=\"descname\">edge_df</code><span class=\"sig-paren\">(</span><em>graph</em>, <em>edges</em>, <em>ignore=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_utils/#edge_df\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_utils.edge_df\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"function\">\n<dt id=\"ibeis.algo.graph.nx_utils.edges_between\">\n<code class=\"descclassname\">ibeis.algo.graph.nx_utils.</code><code class=\"descname\">edges_between</code><span class=\"sig-paren\">(</span><em>graph</em>, <em>nodes1</em>, <em>nodes2=None</em>, <em>assume_disjoint=False</em>, <em>assume_dense=True</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_utils/#edges_between\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_utils.edges_between\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Get edges between two components or within a single component</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first last simple\">\n<li><strong>graph</strong> (<em>nx.Graph</em>) \u2013 the graph</li>\n<li><strong>nodes1</strong> (<em>set</em>) \u2013 list of nodes</li>\n<li><strong>nodes2</strong> (<em>set</em>) \u2013 if None it is equivlanet to nodes2=nodes1 (default=None)</li>\n<li><strong>assume_disjoint</strong> (<em>bool</em>) \u2013 skips expensive check to ensure edges arnt\nreturned twice (default=False)</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"docutils\">\n<dt>CommandLine:</dt>\n<dd>python -m ibeis.algo.graph.nx_utils \u2013test-edges_between</dd>\n</dl>\n<p class=\"rubric\">Example</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># ENABLE_DOCTEST</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.nx_utils</span> <span class=\"k\">import</span> <span class=\"o\">*</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span>  <span class=\"c1\"># cc 1234</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span>  <span class=\"c1\"># cc 567 / 5678</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">),</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">digraph</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">DiGraph</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">graph</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">Graph</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">nodes1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">nodes2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">n2</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">edges_between</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"p\">,</span> <span class=\"n\">nodes1</span><span class=\"p\">,</span> <span class=\"n\">nodes2</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">n4</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">edges_between</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"p\">,</span> <span class=\"n\">nodes1</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">n5</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">edges_between</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"p\">,</span> <span class=\"n\">nodes1</span><span class=\"p\">,</span> <span class=\"n\">nodes1</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">n1</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">edges_between</span><span class=\"p\">(</span><span class=\"n\">digraph</span><span class=\"p\">,</span> <span class=\"n\">nodes1</span><span class=\"p\">,</span> <span class=\"n\">nodes2</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">n3</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">edges_between</span><span class=\"p\">(</span><span class=\"n\">digraph</span><span class=\"p\">,</span> <span class=\"n\">nodes1</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;n2 == </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">n2</span><span class=\"p\">,))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;n4 == </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">n4</span><span class=\"p\">,))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;n5 == </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">n5</span><span class=\"p\">,))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;n1 == </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">n1</span><span class=\"p\">,))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;n3 == </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">n3</span><span class=\"p\">,))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"n\">n2</span> <span class=\"o\">==</span> <span class=\"p\">([(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">)]),</span> <span class=\"s1\">&#39;2&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"n\">n4</span> <span class=\"o\">==</span> <span class=\"p\">([(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)]),</span> <span class=\"s1\">&#39;4&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"n\">n5</span> <span class=\"o\">==</span> <span class=\"p\">([(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)]),</span> <span class=\"s1\">&#39;5&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"n\">n1</span> <span class=\"o\">==</span> <span class=\"p\">([(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)]),</span> <span class=\"s1\">&#39;1&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"n\">n3</span> <span class=\"o\">==</span> <span class=\"p\">([(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)]),</span> <span class=\"s1\">&#39;3&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">n6</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">edges_between</span><span class=\"p\">(</span><span class=\"n\">digraph</span><span class=\"p\">,</span> <span class=\"n\">nodes1</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"n\">nodes2</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">assume_dense</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;n6 = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">n6</span><span class=\"p\">,))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">n6</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">edges_between</span><span class=\"p\">(</span><span class=\"n\">digraph</span><span class=\"p\">,</span> <span class=\"n\">nodes1</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"n\">nodes2</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">assume_dense</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;n6 = </span><span class=\"si\">%r</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">n6</span><span class=\"p\">,))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"n\">n6</span> <span class=\"o\">==</span> <span class=\"p\">([(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)]),</span> <span class=\"s1\">&#39;6&#39;</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"function\">\n<dt id=\"ibeis.algo.graph.nx_utils.edges_cross\">\n<code class=\"descclassname\">ibeis.algo.graph.nx_utils.</code><code class=\"descname\">edges_cross</code><span class=\"sig-paren\">(</span><em>graph</em>, <em>nodes1</em>, <em>nodes2</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_utils/#edges_cross\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_utils.edges_cross\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Finds edges between two sets of disjoint nodes.\nRunning time is O(len(nodes1) * len(nodes2))</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first last simple\">\n<li><strong>graph</strong> (<em>nx.Graph</em>) \u2013 an undirected graph</li>\n<li><strong>nodes1</strong> (<em>set</em>) \u2013 set of nodes disjoint from <cite>nodes2</cite></li>\n<li><strong>nodes2</strong> (<em>set</em>) \u2013 set of nodes disjoint from <cite>nodes1</cite>.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"function\">\n<dt id=\"ibeis.algo.graph.nx_utils.edges_inside\">\n<code class=\"descclassname\">ibeis.algo.graph.nx_utils.</code><code class=\"descname\">edges_inside</code><span class=\"sig-paren\">(</span><em>graph</em>, <em>nodes</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_utils/#edges_inside\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_utils.edges_inside\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Finds edges within a set of nodes\nRunning time is O(len(nodes) ** 2)</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first last simple\">\n<li><strong>graph</strong> (<em>nx.Graph</em>) \u2013 an undirected graph</li>\n<li><strong>nodes1</strong> (<em>set</em>) \u2013 a set of nodes</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"function\">\n<dt id=\"ibeis.algo.graph.nx_utils.edges_outgoing\">\n<code class=\"descclassname\">ibeis.algo.graph.nx_utils.</code><code class=\"descname\">edges_outgoing</code><span class=\"sig-paren\">(</span><em>graph</em>, <em>nodes</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_utils/#edges_outgoing\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_utils.edges_outgoing\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Finds edges leaving a set of nodes.\nAverage running time is O(len(nodes) * ave_degree(nodes))\nWorst case running time is O(G.number_of_edges()).</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first last simple\">\n<li><strong>graph</strong> (<em>nx.Graph</em>) \u2013 a graph</li>\n<li><strong>nodes</strong> (<em>set</em>) \u2013 set of nodes</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Example</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># ENABLE_DOCTEST</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.nx_utils</span> <span class=\"k\">import</span> <span class=\"o\">*</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">utool</span> <span class=\"k\">as</span> <span class=\"nn\">ut</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">demodata_bridge</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">nodes</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">outgoing</span> <span class=\"o\">=</span> <span class=\"n\">edges_outgoing</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">,</span> <span class=\"n\">nodes</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"n\">outgoing</span> <span class=\"o\">==</span> <span class=\"p\">{(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">)}</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"function\">\n<dt id=\"ibeis.algo.graph.nx_utils.ensure_multi_index\">\n<code class=\"descclassname\">ibeis.algo.graph.nx_utils.</code><code class=\"descname\">ensure_multi_index</code><span class=\"sig-paren\">(</span><em>index</em>, <em>names</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_utils/#ensure_multi_index\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_utils.ensure_multi_index\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"function\">\n<dt id=\"ibeis.algo.graph.nx_utils.group_name_edges\">\n<code class=\"descclassname\">ibeis.algo.graph.nx_utils.</code><code class=\"descname\">group_name_edges</code><span class=\"sig-paren\">(</span><em>g</em>, <em>node_to_label</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_utils/#group_name_edges\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_utils.group_name_edges\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"function\">\n<dt id=\"ibeis.algo.graph.nx_utils.is_complete\">\n<code class=\"descclassname\">ibeis.algo.graph.nx_utils.</code><code class=\"descname\">is_complete</code><span class=\"sig-paren\">(</span><em>G</em>, <em>self_loops=False</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_utils/#is_complete\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_utils.is_complete\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"function\">\n<dt id=\"ibeis.algo.graph.nx_utils.is_k_edge_connected\">\n<code class=\"descclassname\">ibeis.algo.graph.nx_utils.</code><code class=\"descname\">is_k_edge_connected</code><span class=\"sig-paren\">(</span><em>G</em>, <em>k</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_utils/#is_k_edge_connected\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_utils.is_k_edge_connected\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"function\">\n<dt id=\"ibeis.algo.graph.nx_utils.k_edge_augmentation\">\n<code class=\"descclassname\">ibeis.algo.graph.nx_utils.</code><code class=\"descname\">k_edge_augmentation</code><span class=\"sig-paren\">(</span><em>G</em>, <em>k</em>, <em>avail=None</em>, <em>partial=False</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_utils/#k_edge_augmentation\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_utils.k_edge_augmentation\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"function\">\n<dt id=\"ibeis.algo.graph.nx_utils.random_k_edge_connected_graph\">\n<code class=\"descclassname\">ibeis.algo.graph.nx_utils.</code><code class=\"descname\">random_k_edge_connected_graph</code><span class=\"sig-paren\">(</span><em>size</em>, <em>k</em>, <em>p=0.1</em>, <em>rng=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/nx_utils/#random_k_edge_connected_graph\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.nx_utils.random_k_edge_connected_graph\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Super hacky way of getting a random k-connected graph</p>\n<p class=\"rubric\">Example</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># ENABLE_DOCTEST</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">plottool</span> <span class=\"k\">as</span> <span class=\"nn\">pt</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.nx_utils</span> <span class=\"k\">import</span> <span class=\"o\">*</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">rng</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">ensure_rng</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gs</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">):</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">random_k_edge_connected_graph</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">rng</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"n\">gs</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">quit_if_noshow</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pnum_</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">make_pnum_nextgen</span><span class=\"p\">(</span><span class=\"n\">nRows</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">nSubplots</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">gs</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fnum</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">for</span> <span class=\"n\">g</span> <span class=\"ow\">in</span> <span class=\"n\">gs</span><span class=\"p\">:</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">show_nx</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"n\">fnum</span><span class=\"o\">=</span><span class=\"n\">fnum</span><span class=\"p\">,</span> <span class=\"n\">pnum</span><span class=\"o\">=</span><span class=\"n\">pnum_</span><span class=\"p\">())</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"module-ibeis.algo.graph.refresh\">\n<span id=\"ibeis-algo-graph-refresh-module\"></span><h2>ibeis.algo.graph.refresh module<a class=\"headerlink\" href=\"#module-ibeis.algo.graph.refresh\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"class\">\n<dt id=\"ibeis.algo.graph.refresh.RefreshCriteria\">\n<em class=\"property\">class </em><code class=\"descclassname\">ibeis.algo.graph.refresh.</code><code class=\"descname\">RefreshCriteria</code><span class=\"sig-paren\">(</span><em>window=20</em>, <em>patience=72</em>, <em>thresh=0.1</em>, <em>method='binomial'</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/refresh/#RefreshCriteria\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.refresh.RefreshCriteria\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></p>\n<p>Determine when to re-query for candidate edges.</p>\n<p>Models an upper bound on the probability that any of the next <cite>patience</cite>\nreviews will be label-changing (meaningful). Once this probability is below\na threshold the criterion triggers. The model is either binomial or\npoisson.  They both work about the same. The binomial is a slightly better\nmodel.</p>\n<p>Does this by maintaining an estimate of the probability any particular\nreview will be label-chaging using an exponentially weighted moving\naverage. This is the rate parameter / individual event probability.</p>\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.refresh.RefreshCriteria.add\">\n<code class=\"descname\">add</code><span class=\"sig-paren\">(</span><em>meaningful</em>, <em>user_id</em>, <em>decision=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/refresh/#RefreshCriteria.add\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.refresh.RefreshCriteria.add\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.refresh.RefreshCriteria.ave\">\n<code class=\"descname\">ave</code><span class=\"sig-paren\">(</span><em>method='exp'</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/refresh/#RefreshCriteria.ave\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.refresh.RefreshCriteria.ave\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># ENABLE_DOCTEST</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.refresh</span> <span class=\"k\">import</span> <span class=\"o\">*</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph</span> <span class=\"k\">import</span> <span class=\"n\">demo</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">demo</span><span class=\"o\">.</span><span class=\"n\">demodata_infr</span><span class=\"p\">(</span><span class=\"n\">num_pccs</span><span class=\"o\">=</span><span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">size_std</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">ignore_pair</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">dummy_verif</span><span class=\"o\">.</span><span class=\"n\">find_candidate_edges</span><span class=\"p\">(</span><span class=\"n\">K</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">scores</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">dummy_verif</span><span class=\"o\">.</span><span class=\"n\">predict_edges</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\">#sortx = ut.shuffle(np.arange(len(edges)), rng=321)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sortx</span> <span class=\"o\">=</span> <span class=\"n\">scores</span><span class=\"o\">.</span><span class=\"n\">argsort</span><span class=\"p\">()[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">,</span> <span class=\"n\">sortx</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">scores</span> <span class=\"o\">=</span> <span class=\"n\">scores</span><span class=\"p\">[</span><span class=\"n\">sortx</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ys</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">match_state_df</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">)[</span><span class=\"n\">POSTV</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y_remainsum</span> <span class=\"o\">=</span> <span class=\"n\">ys</span><span class=\"p\">[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">cumsum</span><span class=\"p\">()[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">refresh</span> <span class=\"o\">=</span> <span class=\"n\">RefreshCriteria</span><span class=\"p\">(</span><span class=\"n\">window</span><span class=\"o\">=</span><span class=\"mi\">250</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ma1</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ma2</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">reals</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">xdata</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">for</span> <span class=\"n\">count</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">,</span> <span class=\"n\">ys</span><span class=\"p\">)):</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"n\">refresh</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">user_id</span><span class=\"o\">=</span><span class=\"s1\">&#39;user:oracle&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"n\">ma1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">refresh</span><span class=\"o\">.</span><span class=\"n\">_ewma</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"n\">ma2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">refresh</span><span class=\"o\">.</span><span class=\"n\">pos_frac</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"n\">n_real</span> <span class=\"o\">=</span> <span class=\"n\">y_remainsum</span><span class=\"p\">[</span><span class=\"n\">count</span><span class=\"p\">]</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">count</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"n\">reals</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">n_real</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"n\">xdata</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">count</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">quit_if_noshow</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">plottool</span> <span class=\"k\">as</span> <span class=\"nn\">pt</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">qtensure</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">multi_plot</span><span class=\"p\">(</span><span class=\"n\">xdata</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">ma1</span><span class=\"p\">,</span> <span class=\"n\">ma2</span><span class=\"p\">,</span> <span class=\"n\">reals</span><span class=\"p\">],</span> <span class=\"n\">marker</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>              <span class=\"n\">label_list</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;exp&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;win&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;real&#39;</span><span class=\"p\">],</span> <span class=\"n\">xlabel</span><span class=\"o\">=</span><span class=\"s1\">&#39;review num&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>              <span class=\"n\">ylabel</span><span class=\"o\">=</span><span class=\"s1\">&#39;mu&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.refresh.RefreshCriteria.check\">\n<code class=\"descname\">check</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/refresh/#RefreshCriteria.check\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.refresh.RefreshCriteria.check\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.refresh.RefreshCriteria.clear\">\n<code class=\"descname\">clear</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/refresh/#RefreshCriteria.clear\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.refresh.RefreshCriteria.clear\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"ibeis.algo.graph.refresh.RefreshCriteria.pos_frac\">\n<code class=\"descname\">pos_frac</code><a class=\"headerlink\" href=\"#ibeis.algo.graph.refresh.RefreshCriteria.pos_frac\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.refresh.RefreshCriteria.pred_num_positives\">\n<code class=\"descname\">pred_num_positives</code><span class=\"sig-paren\">(</span><em>n_remain_edges</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/refresh/#RefreshCriteria.pred_num_positives\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.refresh.RefreshCriteria.pred_num_positives\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Uses poisson process to estimate remaining positive reviews.</p>\n<p>Multipling mu * n_remain_edges gives a probabilistic upper bound on the\nnumber of errors remaning.  This only provides a real estimate if\nreviewing in a random order</p>\n<p class=\"rubric\">Example</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># ENABLE_DOCTEST</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.refresh</span> <span class=\"k\">import</span> <span class=\"o\">*</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph</span> <span class=\"k\">import</span> <span class=\"n\">demo</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">infr</span> <span class=\"o\">=</span> <span class=\"n\">demo</span><span class=\"o\">.</span><span class=\"n\">demodata_infr</span><span class=\"p\">(</span><span class=\"n\">num_pccs</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">size_std</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">dummy_verif</span><span class=\"o\">.</span><span class=\"n\">find_candidate_edges</span><span class=\"p\">(</span><span class=\"n\">K</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\">#edges = ut.shuffle(sorted(edges), rng=321)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">scores</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">dummy_verif</span><span class=\"o\">.</span><span class=\"n\">predict_edges</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sortx</span> <span class=\"o\">=</span> <span class=\"n\">scores</span><span class=\"o\">.</span><span class=\"n\">argsort</span><span class=\"p\">()[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">,</span> <span class=\"n\">sortx</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">scores</span> <span class=\"o\">=</span> <span class=\"n\">scores</span><span class=\"p\">[</span><span class=\"n\">sortx</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ys</span> <span class=\"o\">=</span> <span class=\"n\">infr</span><span class=\"o\">.</span><span class=\"n\">match_state_df</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">)[</span><span class=\"n\">POSTV</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y_remainsum</span> <span class=\"o\">=</span> <span class=\"n\">ys</span><span class=\"p\">[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">cumsum</span><span class=\"p\">()[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">refresh</span> <span class=\"o\">=</span> <span class=\"n\">RefreshCriteria</span><span class=\"p\">(</span><span class=\"n\">window</span><span class=\"o\">=</span><span class=\"mi\">250</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">n_pred_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">n_real_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">xdata</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">for</span> <span class=\"n\">count</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">,</span> <span class=\"n\">ys</span><span class=\"p\">)):</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"n\">refresh</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">user_id</span><span class=\"o\">=</span><span class=\"s1\">&#39;user:oracle&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"n\">n_remain_edges</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">count</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"n\">n_pred</span> <span class=\"o\">=</span> <span class=\"n\">refresh</span><span class=\"o\">.</span><span class=\"n\">pred_num_positives</span><span class=\"p\">(</span><span class=\"n\">n_remain_edges</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"n\">n_real</span> <span class=\"o\">=</span> <span class=\"n\">y_remainsum</span><span class=\"p\">[</span><span class=\"n\">count</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"k\">if</span> <span class=\"n\">count</span> <span class=\"o\">==</span> <span class=\"mi\">2000</span><span class=\"p\">:</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>        <span class=\"k\">break</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"n\">n_real_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">n_real</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"n\">n_pred_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">n_pred</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"n\">xdata</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">count</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">quit_if_noshow</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">plottool</span> <span class=\"k\">as</span> <span class=\"nn\">pt</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">qtensure</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">n_pred_list</span> <span class=\"o\">=</span> <span class=\"n\">n_pred_list</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">:]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">n_real_list</span> <span class=\"o\">=</span> <span class=\"n\">n_real_list</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">:]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">xdata</span> <span class=\"o\">=</span> <span class=\"n\">xdata</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">:]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">multi_plot</span><span class=\"p\">(</span><span class=\"n\">xdata</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">n_pred_list</span><span class=\"p\">,</span> <span class=\"n\">n_real_list</span><span class=\"p\">],</span> <span class=\"n\">marker</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>              <span class=\"n\">label_list</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;pred&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;real&#39;</span><span class=\"p\">],</span> <span class=\"n\">xlabel</span><span class=\"o\">=</span><span class=\"s1\">&#39;review num&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>              <span class=\"n\">ylabel</span><span class=\"o\">=</span><span class=\"s1\">&#39;pred remaining merges&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">stop_point</span> <span class=\"o\">=</span> <span class=\"n\">xdata</span><span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">y_remainsum</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">:]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">gca</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">([</span><span class=\"n\">stop_point</span><span class=\"p\">,</span> <span class=\"n\">stop_point</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">n_pred_list</span><span class=\"p\">))],</span> <span class=\"s1\">&#39;g-&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"ibeis.algo.graph.refresh.RefreshCriteria.prob_any_remain\">\n<code class=\"descname\">prob_any_remain</code><span class=\"sig-paren\">(</span><em>n_remain_edges=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/refresh/#RefreshCriteria.prob_any_remain\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.refresh.RefreshCriteria.prob_any_remain\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n<dl class=\"function\">\n<dt id=\"ibeis.algo.graph.refresh.demo_refresh\">\n<code class=\"descclassname\">ibeis.algo.graph.refresh.</code><code class=\"descname\">demo_refresh</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/refresh/#demo_refresh\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.refresh.demo_refresh\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl class=\"docutils\">\n<dt>CommandLine:</dt>\n<dd><dl class=\"first last docutils\">\n<dt>python -m ibeis.algo.graph.refresh demo_refresh </dt>\n<dd>\u2013num_pccs=40 \u2013size=2 \u2013show</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Example</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># ENABLE_DOCTEST</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">ibeis.algo.graph.refresh</span> <span class=\"k\">import</span> <span class=\"o\">*</span>  <span class=\"c1\"># NOQA</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">demo_refresh</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ut</span><span class=\"o\">.</span><span class=\"n\">show_if_requested</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"module-ibeis.algo.graph.state\">\n<span id=\"ibeis-algo-graph-state-module\"></span><h2>ibeis.algo.graph.state module<a class=\"headerlink\" href=\"#module-ibeis.algo.graph.state\" title=\"Permalink to this headline\">\u00b6</a></h2>\n</div>\n<div class=\"section\" id=\"module-ibeis.algo.graph\">\n<span id=\"module-contents\"></span><h2>Module contents<a class=\"headerlink\" href=\"#module-ibeis.algo.graph\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"data\">\n<dt id=\"ibeis.algo.graph.IMPORT_TUPLES\">\n<code class=\"descclassname\">ibeis.algo.graph.</code><code class=\"descname\">IMPORT_TUPLES</code><em class=\"property\"> = []</em><a class=\"headerlink\" href=\"#ibeis.algo.graph.IMPORT_TUPLES\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>cd /home/joncrall/code/ibeis/ibeis/algo/graph\nmakeinit.py \u2013modname=ibeis.algo.graph</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Type:</th><td class=\"field-body\">Regen Command</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"function\">\n<dt id=\"ibeis.algo.graph.reassign_submodule_attributes\">\n<code class=\"descclassname\">ibeis.algo.graph.</code><code class=\"descname\">reassign_submodule_attributes</code><span class=\"sig-paren\">(</span><em>verbose=1</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/#reassign_submodule_attributes\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.reassign_submodule_attributes\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Updates attributes in the __init__ modules with updated attributes\nin the submodules.</p>\n</dd></dl>\n\n<dl class=\"function\">\n<dt id=\"ibeis.algo.graph.reload_subs\">\n<code class=\"descclassname\">ibeis.algo.graph.</code><code class=\"descname\">reload_subs</code><span class=\"sig-paren\">(</span><em>verbose=1</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/ibeis/algo/graph/#reload_subs\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#ibeis.algo.graph.reload_subs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Reloads ibeis.algo.graph and submodules</p>\n</dd></dl>\n\n<dl class=\"function\">\n<dt id=\"ibeis.algo.graph.rrrr\">\n<code class=\"descclassname\">ibeis.algo.graph.</code><code class=\"descname\">rrrr</code><span class=\"sig-paren\">(</span><em>verbose=1</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#ibeis.algo.graph.rrrr\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Reloads ibeis.algo.graph and submodules</p>\n</dd></dl>\n\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["ibeis.algo.graph.tests", "ibeis.algo.graph.tests package", "N", "next"], ["ibeis.algo.detect.nms", "ibeis.algo.detect.nms package", "P", "previous"]], "sourcename": "ibeis.algo.graph.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">ibeis.algo.graph package</a><ul>\n<li><a class=\"reference internal\" href=\"#subpackages\">Subpackages</a></li>\n<li><a class=\"reference internal\" href=\"#submodules\">Submodules</a></li>\n<li><a class=\"reference internal\" href=\"#module-ibeis.algo.graph.__main__\">ibeis.algo.graph.__main__ module</a></li>\n<li><a class=\"reference internal\" href=\"#module-ibeis.algo.graph.core\">ibeis.algo.graph.core module</a></li>\n<li><a class=\"reference internal\" href=\"#module-ibeis.algo.graph.demo\">ibeis.algo.graph.demo module</a></li>\n<li><a class=\"reference internal\" href=\"#module-ibeis.algo.graph.mixin_dynamic\">ibeis.algo.graph.mixin_dynamic module</a></li>\n<li><a class=\"reference internal\" href=\"#module-ibeis.algo.graph.mixin_groundtruth\">ibeis.algo.graph.mixin_groundtruth module</a></li>\n<li><a class=\"reference internal\" href=\"#module-ibeis.algo.graph.mixin_helpers\">ibeis.algo.graph.mixin_helpers module</a></li>\n<li><a class=\"reference internal\" href=\"#module-ibeis.algo.graph.mixin_ibeis\">ibeis.algo.graph.mixin_ibeis module</a></li>\n<li><a class=\"reference internal\" href=\"#module-ibeis.algo.graph.mixin_loops\">ibeis.algo.graph.mixin_loops module</a></li>\n<li><a class=\"reference internal\" href=\"#module-ibeis.algo.graph.mixin_matching\">ibeis.algo.graph.mixin_matching module</a></li>\n<li><a class=\"reference internal\" href=\"#module-ibeis.algo.graph.mixin_priority\">ibeis.algo.graph.mixin_priority module</a></li>\n<li><a class=\"reference internal\" href=\"#module-ibeis.algo.graph.mixin_simulation\">ibeis.algo.graph.mixin_simulation module</a></li>\n<li><a class=\"reference internal\" href=\"#module-ibeis.algo.graph.mixin_viz\">ibeis.algo.graph.mixin_viz module</a></li>\n<li><a class=\"reference internal\" href=\"#module-ibeis.algo.graph.nx_dynamic_graph\">ibeis.algo.graph.nx_dynamic_graph module</a></li>\n<li><a class=\"reference internal\" href=\"#module-ibeis.algo.graph.nx_edge_augmentation\">ibeis.algo.graph.nx_edge_augmentation module</a></li>\n<li><a class=\"reference internal\" href=\"#module-ibeis.algo.graph.nx_edge_kcomponents\">ibeis.algo.graph.nx_edge_kcomponents module</a></li>\n<li><a class=\"reference internal\" href=\"#module-ibeis.algo.graph.nx_utils\">ibeis.algo.graph.nx_utils module</a></li>\n<li><a class=\"reference internal\" href=\"#module-ibeis.algo.graph.refresh\">ibeis.algo.graph.refresh module</a></li>\n<li><a class=\"reference internal\" href=\"#module-ibeis.algo.graph.state\">ibeis.algo.graph.state module</a></li>\n<li><a class=\"reference internal\" href=\"#module-ibeis.algo.graph\">Module contents</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "ibeis.algo.graph", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}